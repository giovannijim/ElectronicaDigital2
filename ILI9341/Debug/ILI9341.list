
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800d6d8  0800d6d8  0000e6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc60  0800dc60  00025aec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc60  0800dc60  0000ec60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc68  0800dc68  00025aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc68  0800dc68  0000ec68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc6c  0800dc6c  0000ec6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00016aec  20000000  0800dc70  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063d8  20016aec  0802475c  00025aec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001cec4  0802475c  00025ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aa5  00000000  00000000  00025b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e4  00000000  00000000  0003b5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a2  00000000  00000000  0003fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024807  00000000  00000000  00040baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c80d  00000000  00000000  000653b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d755a  00000000  00000000  00081bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  0015915c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20016aec 	.word	0x20016aec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6c0 	.word	0x0800d6c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20016af0 	.word	0x20016af0
 800020c:	0800d6c0 	.word	0x0800d6c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2f>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000640:	bf24      	itt	cs
 8000642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800064a:	d90d      	bls.n	8000668 <__aeabi_d2f+0x30>
 800064c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000658:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800065c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000660:	bf08      	it	eq
 8000662:	f020 0001 	biceq.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800066c:	d121      	bne.n	80006b2 <__aeabi_d2f+0x7a>
 800066e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000672:	bfbc      	itt	lt
 8000674:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000678:	4770      	bxlt	lr
 800067a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000682:	f1c2 0218 	rsb	r2, r2, #24
 8000686:	f1c2 0c20 	rsb	ip, r2, #32
 800068a:	fa10 f30c 	lsls.w	r3, r0, ip
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	bf18      	it	ne
 8000694:	f040 0001 	orrne.w	r0, r0, #1
 8000698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800069c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006a4:	ea40 000c 	orr.w	r0, r0, ip
 80006a8:	fa23 f302 	lsr.w	r3, r3, r2
 80006ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006b0:	e7cc      	b.n	800064c <__aeabi_d2f+0x14>
 80006b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006b6:	d107      	bne.n	80006c8 <__aeabi_d2f+0x90>
 80006b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006bc:	bf1e      	ittt	ne
 80006be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006c6:	4770      	bxne	lr
 80006c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__aeabi_uldivmod>:
 80006d8:	b953      	cbnz	r3, 80006f0 <__aeabi_uldivmod+0x18>
 80006da:	b94a      	cbnz	r2, 80006f0 <__aeabi_uldivmod+0x18>
 80006dc:	2900      	cmp	r1, #0
 80006de:	bf08      	it	eq
 80006e0:	2800      	cmpeq	r0, #0
 80006e2:	bf1c      	itt	ne
 80006e4:	f04f 31ff 	movne.w	r1, #4294967295
 80006e8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ec:	f000 b96a 	b.w	80009c4 <__aeabi_idiv0>
 80006f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006f8:	f000 f806 	bl	8000708 <__udivmoddi4>
 80006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000704:	b004      	add	sp, #16
 8000706:	4770      	bx	lr

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <SELECT+0x18>)
 80009d2:	f006 f947 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f005 fddc 	bl	8006594 <HAL_Delay>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020400 	.word	0x40020400

080009e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <DESELECT+0x18>)
 80009ee:	f006 f939 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f005 fdce 	bl	8006594 <HAL_Delay>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020400 	.word	0x40020400

08000a00 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a0a:	bf00      	nop
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <SPI_TxByte+0x30>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d1f8      	bne.n	8000a0c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <SPI_TxByte+0x30>)
 8000a22:	f006 ff24 	bl	800786e <HAL_SPI_Transmit>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20016b10 	.word	0x20016b10

08000a34 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a40:	bf00      	nop
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <SPI_TxBuffer+0x30>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d1f8      	bne.n	8000a42 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a50:	887a      	ldrh	r2, [r7, #2]
 8000a52:	2364      	movs	r3, #100	@ 0x64
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <SPI_TxBuffer+0x30>)
 8000a58:	f006 ff09 	bl	800786e <HAL_SPI_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20016b10 	.word	0x20016b10

08000a68 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000a6e:	23ff      	movs	r3, #255	@ 0xff
 8000a70:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a72:	bf00      	nop
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <SPI_RxByte+0x34>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d1f8      	bne.n	8000a74 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a82:	1dba      	adds	r2, r7, #6
 8000a84:	1df9      	adds	r1, r7, #7
 8000a86:	2364      	movs	r3, #100	@ 0x64
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SPI_RxByte+0x34>)
 8000a8e:	f007 f831 	bl	8007af4 <HAL_SPI_TransmitReceive>

	return data;
 8000a92:	79bb      	ldrb	r3, [r7, #6]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20016b10 	.word	0x20016b10

08000aa0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000aa8:	f7ff ffde 	bl	8000a68 <SPI_RxByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	701a      	strb	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <SD_ReadyWait+0x30>)
 8000ac4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ac8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000aca:	f7ff ffcd 	bl	8000a68 <SPI_RxByte>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2bff      	cmp	r3, #255	@ 0xff
 8000ad6:	d003      	beq.n	8000ae0 <SD_ReadyWait+0x24>
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SD_ReadyWait+0x30>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <SD_ReadyWait+0xe>

	return res;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20016b0a 	.word	0x20016b0a

08000af0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000af6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000afa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000afc:	f7ff ff72 	bl	80009e4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	e005      	b.n	8000b12 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000b06:	20ff      	movs	r0, #255	@ 0xff
 8000b08:	f7ff ff7a 	bl	8000a00 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	ddf6      	ble.n	8000b06 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000b18:	f7ff ff56 	bl	80009c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000b30:	2395      	movs	r3, #149	@ 0x95
 8000b32:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000b34:	463b      	mov	r3, r7
 8000b36:	2106      	movs	r1, #6
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff7b 	bl	8000a34 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b3e:	e002      	b.n	8000b46 <SD_PowerOn+0x56>
	{
		cnt--;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b46:	f7ff ff8f 	bl	8000a68 <SPI_RxByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d002      	beq.n	8000b56 <SD_PowerOn+0x66>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f4      	bne.n	8000b40 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000b56:	f7ff ff45 	bl	80009e4 <DESELECT>
	SPI_TxByte(0XFF);
 8000b5a:	20ff      	movs	r0, #255	@ 0xff
 8000b5c:	f7ff ff50 	bl	8000a00 <SPI_TxByte>

	PowerFlag = 1;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <SD_PowerOn+0x80>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20016b0d 	.word	0x20016b0d

08000b74 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <SD_PowerOff+0x14>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20016b0d 	.word	0x20016b0d

08000b8c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <SD_CheckPower+0x14>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20016b0d 	.word	0x20016b0d

08000ba4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SD_RxDataBlock+0x58>)
 8000bb0:	22c8      	movs	r2, #200	@ 0xc8
 8000bb2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000bb4:	f7ff ff58 	bl	8000a68 <SPI_RxByte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d103      	bne.n	8000bca <SD_RxDataBlock+0x26>
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <SD_RxDataBlock+0x58>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f4      	bne.n	8000bb4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bce:	d001      	beq.n	8000bd4 <SD_RxDataBlock+0x30>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e00f      	b.n	8000bf4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff60 	bl	8000aa0 <SPI_RxBytePtr>
	} while(len--);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	1e5a      	subs	r2, r3, #1
 8000be4:	603a      	str	r2, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f4      	bne.n	8000bd4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000bea:	f7ff ff3d 	bl	8000a68 <SPI_RxByte>
	SPI_RxByte();
 8000bee:	f7ff ff3b 	bl	8000a68 <SPI_RxByte>

	return TRUE;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20016b08 	.word	0x20016b08

08000c00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000c10:	f7ff ff54 	bl	8000abc <SD_ReadyWait>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2bff      	cmp	r3, #255	@ 0xff
 8000c18:	d001      	beq.n	8000c1e <SD_TxDataBlock+0x1e>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e02f      	b.n	8000c7e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff feed 	bl	8000a00 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2bfd      	cmp	r3, #253	@ 0xfd
 8000c2a:	d020      	beq.n	8000c6e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000c2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff feff 	bl	8000a34 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000c36:	f7ff ff17 	bl	8000a68 <SPI_RxByte>
		SPI_RxByte();
 8000c3a:	f7ff ff15 	bl	8000a68 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000c3e:	e00b      	b.n	8000c58 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000c40:	f7ff ff12 	bl	8000a68 <SPI_RxByte>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d006      	beq.n	8000c60 <SD_TxDataBlock+0x60>
			i++;
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	3301      	adds	r3, #1
 8000c56:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	2b40      	cmp	r3, #64	@ 0x40
 8000c5c:	d9f0      	bls.n	8000c40 <SD_TxDataBlock+0x40>
 8000c5e:	e000      	b.n	8000c62 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000c60:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000c62:	bf00      	nop
 8000c64:	f7ff ff00 	bl	8000a68 <SPI_RxByte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0fa      	beq.n	8000c64 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	2b05      	cmp	r3, #5
 8000c76:	d101      	bne.n	8000c7c <SD_TxDataBlock+0x7c>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	6039      	str	r1, [r7, #0]
 8000c90:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c92:	f7ff ff13 	bl	8000abc <SD_ReadyWait>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2bff      	cmp	r3, #255	@ 0xff
 8000c9a:	d001      	beq.n	8000ca0 <SD_SendCmd+0x1a>
 8000c9c:	23ff      	movs	r3, #255	@ 0xff
 8000c9e:	e042      	b.n	8000d26 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff feac 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	0e1b      	lsrs	r3, r3, #24
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fea6 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fea0 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe9a 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe95 	bl	8000a00 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b40      	cmp	r3, #64	@ 0x40
 8000cda:	d102      	bne.n	8000ce2 <SD_SendCmd+0x5c>
 8000cdc:	2395      	movs	r3, #149	@ 0x95
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e007      	b.n	8000cf2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b48      	cmp	r3, #72	@ 0x48
 8000ce6:	d102      	bne.n	8000cee <SD_SendCmd+0x68>
 8000ce8:	2387      	movs	r3, #135	@ 0x87
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e001      	b.n	8000cf2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe83 	bl	8000a00 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b4c      	cmp	r3, #76	@ 0x4c
 8000cfe:	d101      	bne.n	8000d04 <SD_SendCmd+0x7e>
 8000d00:	f7ff feb2 	bl	8000a68 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000d04:	230a      	movs	r3, #10
 8000d06:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000d08:	f7ff feae 	bl	8000a68 <SPI_RxByte>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000d10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da05      	bge.n	8000d24 <SD_SendCmd+0x9e>
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f1      	bne.n	8000d08 <SD_SendCmd+0x82>

	return res;
 8000d24:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SD_disk_initialize+0x14>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0d1      	b.n	8000ee8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000d44:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <SD_disk_initialize+0x2a>
 8000d52:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	e0c6      	b.n	8000ee8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000d5a:	f7ff fec9 	bl	8000af0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000d5e:	f7ff fe33 	bl	80009c8 <SELECT>

	/* check disk type */
	type = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000d66:	2100      	movs	r1, #0
 8000d68:	2040      	movs	r0, #64	@ 0x40
 8000d6a:	f7ff ff8c 	bl	8000c86 <SD_SendCmd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 80a1 	bne.w	8000eb8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000d76:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000d78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d7c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d7e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000d82:	2048      	movs	r0, #72	@ 0x48
 8000d84:	f7ff ff7f 	bl	8000c86 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d155      	bne.n	8000e3a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e00c      	b.n	8000dae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000d94:	7bfc      	ldrb	r4, [r7, #15]
 8000d96:	f7ff fe67 	bl	8000a68 <SPI_RxByte>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f104 0310 	add.w	r3, r4, #16
 8000da2:	443b      	add	r3, r7
 8000da4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d9ef      	bls.n	8000d94 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000db4:	7abb      	ldrb	r3, [r7, #10]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d17e      	bne.n	8000eb8 <SD_disk_initialize+0x188>
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	2baa      	cmp	r3, #170	@ 0xaa
 8000dbe:	d17b      	bne.n	8000eb8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2077      	movs	r0, #119	@ 0x77
 8000dc4:	f7ff ff5f 	bl	8000c86 <SD_SendCmd>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d807      	bhi.n	8000dde <SD_disk_initialize+0xae>
 8000dce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000dd2:	2069      	movs	r0, #105	@ 0x69
 8000dd4:	f7ff ff57 	bl	8000c86 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000dde:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1ec      	bne.n	8000dc0 <SD_disk_initialize+0x90>
 8000de6:	e000      	b.n	8000dea <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000de8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000dea:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d062      	beq.n	8000eb8 <SD_disk_initialize+0x188>
 8000df2:	2100      	movs	r1, #0
 8000df4:	207a      	movs	r0, #122	@ 0x7a
 8000df6:	f7ff ff46 	bl	8000c86 <SD_SendCmd>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d15b      	bne.n	8000eb8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e00c      	b.n	8000e20 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000e06:	7bfc      	ldrb	r4, [r7, #15]
 8000e08:	f7ff fe2e 	bl	8000a68 <SPI_RxByte>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f104 0310 	add.w	r3, r4, #16
 8000e14:	443b      	add	r3, r7
 8000e16:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d9ef      	bls.n	8000e06 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SD_disk_initialize+0x104>
 8000e30:	230c      	movs	r3, #12
 8000e32:	e000      	b.n	8000e36 <SD_disk_initialize+0x106>
 8000e34:	2304      	movs	r3, #4
 8000e36:	73bb      	strb	r3, [r7, #14]
 8000e38:	e03e      	b.n	8000eb8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2077      	movs	r0, #119	@ 0x77
 8000e3e:	f7ff ff22 	bl	8000c86 <SD_SendCmd>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d808      	bhi.n	8000e5a <SD_disk_initialize+0x12a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2069      	movs	r0, #105	@ 0x69
 8000e4c:	f7ff ff1b 	bl	8000c86 <SD_SendCmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d801      	bhi.n	8000e5a <SD_disk_initialize+0x12a>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e000      	b.n	8000e5c <SD_disk_initialize+0x12c>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d10e      	bne.n	8000e82 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e64:	2100      	movs	r1, #0
 8000e66:	2077      	movs	r0, #119	@ 0x77
 8000e68:	f7ff ff0d 	bl	8000c86 <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d80e      	bhi.n	8000e90 <SD_disk_initialize+0x160>
 8000e72:	2100      	movs	r1, #0
 8000e74:	2069      	movs	r0, #105	@ 0x69
 8000e76:	f7ff ff06 	bl	8000c86 <SD_SendCmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d107      	bne.n	8000e90 <SD_disk_initialize+0x160>
 8000e80:	e00c      	b.n	8000e9c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e82:	2100      	movs	r1, #0
 8000e84:	2041      	movs	r0, #65	@ 0x41
 8000e86:	f7ff fefe 	bl	8000c86 <SD_SendCmd>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e2      	bne.n	8000e5e <SD_disk_initialize+0x12e>
 8000e98:	e000      	b.n	8000e9c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e9a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <SD_disk_initialize+0x184>
 8000ea4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea8:	2050      	movs	r0, #80	@ 0x50
 8000eaa:	f7ff feec 	bl	8000c86 <SD_SendCmd>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SD_disk_initialize+0x188>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <SD_disk_initialize+0x1c8>)
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ebe:	f7ff fd91 	bl	80009e4 <DESELECT>
	SPI_RxByte();
 8000ec2:	f7ff fdd1 	bl	8000a68 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e001      	b.n	8000ee2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ede:	f7ff fe49 	bl	8000b74 <SD_PowerOff>
	}

	return Stat;
 8000ee2:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20016b08 	.word	0x20016b08
 8000ef8:	20016b0c 	.word	0x20016b0c

08000efc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SD_disk_status+0x14>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e002      	b.n	8000f16 <SD_disk_status+0x1a>
	return Stat;
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SD_disk_status+0x28>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <SD_disk_read+0x1c>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <SD_disk_read+0x20>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e051      	b.n	8000fec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <SD_disk_read+0xcc>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SD_disk_read+0x32>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e048      	b.n	8000fec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <SD_disk_read+0xd0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <SD_disk_read+0x44>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f6c:	f7ff fd2c 	bl	80009c8 <SELECT>

	if (count == 1)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d111      	bne.n	8000f9a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2051      	movs	r0, #81	@ 0x51
 8000f7a:	f7ff fe84 	bl	8000c86 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d129      	bne.n	8000fd8 <SD_disk_read+0xb0>
 8000f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff fe0b 	bl	8000ba4 <SD_RxDataBlock>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <SD_disk_read+0xb0>
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	e01e      	b.n	8000fd8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	2052      	movs	r0, #82	@ 0x52
 8000f9e:	f7ff fe72 	bl	8000c86 <SD_SendCmd>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d117      	bne.n	8000fd8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fdf9 	bl	8000ba4 <SD_RxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00a      	beq.n	8000fce <SD_disk_read+0xa6>
				buff += 512;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000fbe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1ed      	bne.n	8000fa8 <SD_disk_read+0x80>
 8000fcc:	e000      	b.n	8000fd0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000fce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	204c      	movs	r0, #76	@ 0x4c
 8000fd4:	f7ff fe57 	bl	8000c86 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000fd8:	f7ff fd04 	bl	80009e4 <DESELECT>
	SPI_RxByte();
 8000fdc:	f7ff fd44 	bl	8000a68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20016b0c 	.word	0x20016b0c

08000ffc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <SD_disk_write+0x1c>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <SD_disk_write+0x20>
 8001018:	2304      	movs	r3, #4
 800101a:	e06b      	b.n	80010f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <SD_disk_write+0x100>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SD_disk_write+0x32>
 800102a:	2303      	movs	r3, #3
 800102c:	e062      	b.n	80010f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800102e:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <SD_disk_write+0x100>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SD_disk_write+0x44>
 800103c:	2302      	movs	r3, #2
 800103e:	e059      	b.n	80010f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <SD_disk_write+0x104>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <SD_disk_write+0x56>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	607b      	str	r3, [r7, #4]

	SELECT();
 8001052:	f7ff fcb9 	bl	80009c8 <SELECT>

	if (count == 1)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d110      	bne.n	800107e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	2058      	movs	r0, #88	@ 0x58
 8001060:	f7ff fe11 	bl	8000c86 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d13a      	bne.n	80010e0 <SD_disk_write+0xe4>
 800106a:	21fe      	movs	r1, #254	@ 0xfe
 800106c:	68b8      	ldr	r0, [r7, #8]
 800106e:	f7ff fdc7 	bl	8000c00 <SD_TxDataBlock>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d033      	beq.n	80010e0 <SD_disk_write+0xe4>
			count = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	e030      	b.n	80010e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <SD_disk_write+0x104>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	2077      	movs	r0, #119	@ 0x77
 800108e:	f7ff fdfa 	bl	8000c86 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	2057      	movs	r0, #87	@ 0x57
 8001096:	f7ff fdf6 	bl	8000c86 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	2059      	movs	r0, #89	@ 0x59
 800109e:	f7ff fdf2 	bl	8000c86 <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11b      	bne.n	80010e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010a8:	21fc      	movs	r1, #252	@ 0xfc
 80010aa:	68b8      	ldr	r0, [r7, #8]
 80010ac:	f7ff fda8 	bl	8000c00 <SD_TxDataBlock>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <SD_disk_write+0xd0>
				buff += 512;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80010bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ee      	bne.n	80010a8 <SD_disk_write+0xac>
 80010ca:	e000      	b.n	80010ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80010ce:	21fd      	movs	r1, #253	@ 0xfd
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd95 	bl	8000c00 <SD_TxDataBlock>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80010e0:	f7ff fc80 	bl	80009e4 <DESELECT>
	SPI_RxByte();
 80010e4:	f7ff fcc0 	bl	8000a68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20016b0c 	.word	0x20016b0c

08001104 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	603a      	str	r2, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	460b      	mov	r3, r1
 8001112:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SD_disk_ioctl+0x1e>
 800111e:	2304      	movs	r3, #4
 8001120:	e113      	b.n	800134a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d124      	bne.n	8001178 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d012      	beq.n	800115c <SD_disk_ioctl+0x58>
 8001136:	2b02      	cmp	r3, #2
 8001138:	dc1a      	bgt.n	8001170 <SD_disk_ioctl+0x6c>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <SD_disk_ioctl+0x40>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d006      	beq.n	8001150 <SD_disk_ioctl+0x4c>
 8001142:	e015      	b.n	8001170 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001144:	f7ff fd16 	bl	8000b74 <SD_PowerOff>
			res = RES_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800114e:	e0fa      	b.n	8001346 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001150:	f7ff fcce 	bl	8000af0 <SD_PowerOn>
			res = RES_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800115a:	e0f4      	b.n	8001346 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	1c5c      	adds	r4, r3, #1
 8001160:	f7ff fd14 	bl	8000b8c <SD_CheckPower>
 8001164:	4603      	mov	r3, r0
 8001166:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800116e:	e0ea      	b.n	8001346 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001170:	2304      	movs	r3, #4
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001176:	e0e6      	b.n	8001346 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001178:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <SD_disk_ioctl+0x250>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SD_disk_ioctl+0x86>
 8001186:	2303      	movs	r3, #3
 8001188:	e0df      	b.n	800134a <SD_disk_ioctl+0x246>

		SELECT();
 800118a:	f7ff fc1d 	bl	80009c8 <SELECT>

		switch (ctrl)
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b0d      	cmp	r3, #13
 8001192:	f200 80c9 	bhi.w	8001328 <SD_disk_ioctl+0x224>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <SD_disk_ioctl+0x98>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	08001293 	.word	0x08001293
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	08001283 	.word	0x08001283
 80011a8:	08001329 	.word	0x08001329
 80011ac:	08001329 	.word	0x08001329
 80011b0:	08001329 	.word	0x08001329
 80011b4:	08001329 	.word	0x08001329
 80011b8:	08001329 	.word	0x08001329
 80011bc:	08001329 	.word	0x08001329
 80011c0:	08001329 	.word	0x08001329
 80011c4:	08001329 	.word	0x08001329
 80011c8:	080012a5 	.word	0x080012a5
 80011cc:	080012c9 	.word	0x080012c9
 80011d0:	080012ed 	.word	0x080012ed
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011d4:	2100      	movs	r1, #0
 80011d6:	2049      	movs	r0, #73	@ 0x49
 80011d8:	f7ff fd55 	bl	8000c86 <SD_SendCmd>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80a6 	bne.w	8001330 <SD_disk_ioctl+0x22c>
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2110      	movs	r1, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fcda 	bl	8000ba4 <SD_RxDataBlock>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809c 	beq.w	8001330 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80011f8:	7b3b      	ldrb	r3, [r7, #12]
 80011fa:	099b      	lsrs	r3, r3, #6
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10d      	bne.n	800121e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	461a      	mov	r2, r3
 8001206:	7d3b      	ldrb	r3, [r7, #20]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	3301      	adds	r3, #1
 8001212:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001214:	8bfb      	ldrh	r3, [r7, #30]
 8001216:	029a      	lsls	r2, r3, #10
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e02d      	b.n	800127a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	09db      	lsrs	r3, r3, #7
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0306 	and.w	r3, r3, #6
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3302      	adds	r3, #2
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001246:	7d3b      	ldrb	r3, [r7, #20]
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	7cbb      	ldrb	r3, [r7, #18]
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	b29b      	uxth	r3, r3
 800125e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800126c:	8bfa      	ldrh	r2, [r7, #30]
 800126e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001272:	3b09      	subs	r3, #9
 8001274:	409a      	lsls	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001280:	e056      	b.n	8001330 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001288:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001290:	e055      	b.n	800133e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001292:	f7ff fc13 	bl	8000abc <SD_ReadyWait>
 8001296:	4603      	mov	r3, r0
 8001298:	2bff      	cmp	r3, #255	@ 0xff
 800129a:	d14b      	bne.n	8001334 <SD_disk_ioctl+0x230>
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012a2:	e047      	b.n	8001334 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012a4:	2100      	movs	r1, #0
 80012a6:	2049      	movs	r0, #73	@ 0x49
 80012a8:	f7ff fced 	bl	8000c86 <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d142      	bne.n	8001338 <SD_disk_ioctl+0x234>
 80012b2:	2110      	movs	r1, #16
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f7ff fc75 	bl	8000ba4 <SD_RxDataBlock>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03b      	beq.n	8001338 <SD_disk_ioctl+0x234>
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012c6:	e037      	b.n	8001338 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012c8:	2100      	movs	r1, #0
 80012ca:	204a      	movs	r0, #74	@ 0x4a
 80012cc:	f7ff fcdb 	bl	8000c86 <SD_SendCmd>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d132      	bne.n	800133c <SD_disk_ioctl+0x238>
 80012d6:	2110      	movs	r1, #16
 80012d8:	6a38      	ldr	r0, [r7, #32]
 80012da:	f7ff fc63 	bl	8000ba4 <SD_RxDataBlock>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02b      	beq.n	800133c <SD_disk_ioctl+0x238>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012ea:	e027      	b.n	800133c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80012ec:	2100      	movs	r1, #0
 80012ee:	207a      	movs	r0, #122	@ 0x7a
 80012f0:	f7ff fcc9 	bl	8000c86 <SD_SendCmd>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001300:	e00b      	b.n	800131a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001302:	6a3c      	ldr	r4, [r7, #32]
 8001304:	1c63      	adds	r3, r4, #1
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	f7ff fbae 	bl	8000a68 <SPI_RxByte>
 800130c:	4603      	mov	r3, r0
 800130e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001314:	3301      	adds	r3, #1
 8001316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800131a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800131e:	2b03      	cmp	r3, #3
 8001320:	d9ef      	bls.n	8001302 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001328:	2304      	movs	r3, #4
 800132a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800132e:	e006      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 8001330:	bf00      	nop
 8001332:	e004      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 800133c:	bf00      	nop
		}

		DESELECT();
 800133e:	f7ff fb51 	bl	80009e4 <DESELECT>
		SPI_RxByte();
 8001342:	f7ff fb91 	bl	8000a68 <SPI_RxByte>
	}

	return res;
 8001346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800134a:	4618      	mov	r0, r3
 800134c:	372c      	adds	r7, #44	@ 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000

08001358 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2101      	movs	r1, #1
 8001360:	4878      	ldr	r0, [pc, #480]	@ (8001544 <LCD_Init+0x1ec>)
 8001362:	f005 fc7f 	bl	8006c64 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8001366:	2201      	movs	r2, #1
 8001368:	2113      	movs	r1, #19
 800136a:	4877      	ldr	r0, [pc, #476]	@ (8001548 <LCD_Init+0x1f0>)
 800136c:	f005 fc7a 	bl	8006c64 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2102      	movs	r1, #2
 8001374:	4875      	ldr	r0, [pc, #468]	@ (800154c <LCD_Init+0x1f4>)
 8001376:	f005 fc75 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800137a:	2005      	movs	r0, #5
 800137c:	f005 f90a 	bl	8006594 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2102      	movs	r1, #2
 8001384:	4871      	ldr	r0, [pc, #452]	@ (800154c <LCD_Init+0x1f4>)
 8001386:	f005 fc6d 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800138a:	2014      	movs	r0, #20
 800138c:	f005 f902 	bl	8006594 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2102      	movs	r1, #2
 8001394:	486d      	ldr	r0, [pc, #436]	@ (800154c <LCD_Init+0x1f4>)
 8001396:	f005 fc65 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800139a:	2096      	movs	r0, #150	@ 0x96
 800139c:	f005 f8fa 	bl	8006594 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4867      	ldr	r0, [pc, #412]	@ (8001544 <LCD_Init+0x1ec>)
 80013a6:	f005 fc5d 	bl	8006c64 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 80013aa:	20e9      	movs	r0, #233	@ 0xe9
 80013ac:	f000 f8d0 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x20);
 80013b0:	2020      	movs	r0, #32
 80013b2:	f000 f973 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 80013b6:	2011      	movs	r0, #17
 80013b8:	f000 f8ca 	bl	8001550 <LCD_CMD>
	HAL_Delay(100);
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f005 f8e9 	bl	8006594 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 80013c2:	20d1      	movs	r0, #209	@ 0xd1
 80013c4:	f000 f8c4 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f967 	bl	800169c <LCD_DATA>
	LCD_DATA(0x71);
 80013ce:	2071      	movs	r0, #113	@ 0x71
 80013d0:	f000 f964 	bl	800169c <LCD_DATA>
	LCD_DATA(0x19);
 80013d4:	2019      	movs	r0, #25
 80013d6:	f000 f961 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 80013da:	20d0      	movs	r0, #208	@ 0xd0
 80013dc:	f000 f8b8 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x07);
 80013e0:	2007      	movs	r0, #7
 80013e2:	f000 f95b 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 f958 	bl	800169c <LCD_DATA>
	LCD_DATA(0x08);
 80013ec:	2008      	movs	r0, #8
 80013ee:	f000 f955 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80013f2:	2036      	movs	r0, #54	@ 0x36
 80013f4:	f000 f8ac 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80013f8:	20e8      	movs	r0, #232	@ 0xe8
 80013fa:	f000 f94f 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80013fe:	203a      	movs	r0, #58	@ 0x3a
 8001400:	f000 f8a6 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8001404:	2005      	movs	r0, #5
 8001406:	f000 f949 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 800140a:	20c1      	movs	r0, #193	@ 0xc1
 800140c:	f000 f8a0 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x10);
 8001410:	2010      	movs	r0, #16
 8001412:	f000 f943 	bl	800169c <LCD_DATA>
	LCD_DATA(0x10);
 8001416:	2010      	movs	r0, #16
 8001418:	f000 f940 	bl	800169c <LCD_DATA>
	LCD_DATA(0x02);
 800141c:	2002      	movs	r0, #2
 800141e:	f000 f93d 	bl	800169c <LCD_DATA>
	LCD_DATA(0x02);
 8001422:	2002      	movs	r0, #2
 8001424:	f000 f93a 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8001428:	20c0      	movs	r0, #192	@ 0xc0
 800142a:	f000 f891 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f934 	bl	800169c <LCD_DATA>
	LCD_DATA(0x35);
 8001434:	2035      	movs	r0, #53	@ 0x35
 8001436:	f000 f931 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f92e 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f000 f92b 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f928 	bl	800169c <LCD_DATA>
	LCD_DATA(0x02);
 800144c:	2002      	movs	r0, #2
 800144e:	f000 f925 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8001452:	20c5      	movs	r0, #197	@ 0xc5
 8001454:	f000 f87c 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8001458:	2004      	movs	r0, #4
 800145a:	f000 f91f 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 800145e:	20d2      	movs	r0, #210	@ 0xd2
 8001460:	f000 f876 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x01);
 8001464:	2001      	movs	r0, #1
 8001466:	f000 f919 	bl	800169c <LCD_DATA>
	LCD_DATA(0x44);
 800146a:	2044      	movs	r0, #68	@ 0x44
 800146c:	f000 f916 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8001470:	20c8      	movs	r0, #200	@ 0xc8
 8001472:	f000 f86d 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x04);
 8001476:	2004      	movs	r0, #4
 8001478:	f000 f910 	bl	800169c <LCD_DATA>
	LCD_DATA(0x67);
 800147c:	2067      	movs	r0, #103	@ 0x67
 800147e:	f000 f90d 	bl	800169c <LCD_DATA>
	LCD_DATA(0x35);
 8001482:	2035      	movs	r0, #53	@ 0x35
 8001484:	f000 f90a 	bl	800169c <LCD_DATA>
	LCD_DATA(0x04);
 8001488:	2004      	movs	r0, #4
 800148a:	f000 f907 	bl	800169c <LCD_DATA>
	LCD_DATA(0x08);
 800148e:	2008      	movs	r0, #8
 8001490:	f000 f904 	bl	800169c <LCD_DATA>
	LCD_DATA(0x06);
 8001494:	2006      	movs	r0, #6
 8001496:	f000 f901 	bl	800169c <LCD_DATA>
	LCD_DATA(0x24);
 800149a:	2024      	movs	r0, #36	@ 0x24
 800149c:	f000 f8fe 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 f8fb 	bl	800169c <LCD_DATA>
	LCD_DATA(0x37);
 80014a6:	2037      	movs	r0, #55	@ 0x37
 80014a8:	f000 f8f8 	bl	800169c <LCD_DATA>
	LCD_DATA(0x40);
 80014ac:	2040      	movs	r0, #64	@ 0x40
 80014ae:	f000 f8f5 	bl	800169c <LCD_DATA>
	LCD_DATA(0x03);
 80014b2:	2003      	movs	r0, #3
 80014b4:	f000 f8f2 	bl	800169c <LCD_DATA>
	LCD_DATA(0x10);
 80014b8:	2010      	movs	r0, #16
 80014ba:	f000 f8ef 	bl	800169c <LCD_DATA>
	LCD_DATA(0x08);
 80014be:	2008      	movs	r0, #8
 80014c0:	f000 f8ec 	bl	800169c <LCD_DATA>
	LCD_DATA(0x80);
 80014c4:	2080      	movs	r0, #128	@ 0x80
 80014c6:	f000 f8e9 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f8e6 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80014d0:	202a      	movs	r0, #42	@ 0x2a
 80014d2:	f000 f83d 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f8e0 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f8dd 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 f8da 	bl	800169c <LCD_DATA>
	//LCD_DATA(0x3F);
	LCD_DATA(0xEF);
 80014e8:	20ef      	movs	r0, #239	@ 0xef
 80014ea:	f000 f8d7 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 80014ee:	202b      	movs	r0, #43	@ 0x2b
 80014f0:	f000 f82e 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f8d1 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f8ce 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 8001500:	2001      	movs	r0, #1
 8001502:	f000 f8cb 	bl	800169c <LCD_DATA>
	//LCD_DATA(0xE0);
	LCD_DATA(0x3F);
 8001506:	203f      	movs	r0, #63	@ 0x3f
 8001508:	f000 f8c8 	bl	800169c <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 800150c:	2029      	movs	r0, #41	@ 0x29
 800150e:	f000 f81f 	bl	8001550 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8001512:	202c      	movs	r0, #44	@ 0x2c
 8001514:	f000 f81c 	bl	8001550 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001518:	2020      	movs	r0, #32
 800151a:	f000 f819 	bl	8001550 <LCD_CMD>
	HAL_Delay(120);
 800151e:	2078      	movs	r0, #120	@ 0x78
 8001520:	f005 f838 	bl	8006594 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001524:	2011      	movs	r0, #17
 8001526:	f000 f813 	bl	8001550 <LCD_CMD>
	HAL_Delay(120);
 800152a:	2078      	movs	r0, #120	@ 0x78
 800152c:	f005 f832 	bl	8006594 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8001530:	2029      	movs	r0, #41	@ 0x29
 8001532:	f000 f80d 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2101      	movs	r1, #1
 800153a:	4802      	ldr	r0, [pc, #8]	@ (8001544 <LCD_Init+0x1ec>)
 800153c:	f005 fb92 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020400 	.word	0x40020400
 8001548:	40020000 	.word	0x40020000
 800154c:	40020800 	.word	0x40020800

08001550 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	484c      	ldr	r0, [pc, #304]	@ (8001690 <LCD_CMD+0x140>)
 8001560:	f005 fb80 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2102      	movs	r1, #2
 8001568:	4849      	ldr	r0, [pc, #292]	@ (8001690 <LCD_CMD+0x140>)
 800156a:	f005 fb7b 	bl	8006c64 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157e:	4844      	ldr	r0, [pc, #272]	@ (8001690 <LCD_CMD+0x140>)
 8001580:	f005 fb70 	bl	8006c64 <HAL_GPIO_WritePin>
 8001584:	e005      	b.n	8001592 <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158c:	4840      	ldr	r0, [pc, #256]	@ (8001690 <LCD_CMD+0x140>)
 800158e:	f005 fb69 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	483c      	ldr	r0, [pc, #240]	@ (8001694 <LCD_CMD+0x144>)
 80015a2:	f005 fb5f 	bl	8006c64 <HAL_GPIO_WritePin>
 80015a6:	e004      	b.n	80015b2 <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	4839      	ldr	r0, [pc, #228]	@ (8001694 <LCD_CMD+0x144>)
 80015ae:	f005 fb59 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c2:	4833      	ldr	r0, [pc, #204]	@ (8001690 <LCD_CMD+0x140>)
 80015c4:	f005 fb4e 	bl	8006c64 <HAL_GPIO_WritePin>
 80015c8:	e005      	b.n	80015d6 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d0:	482f      	ldr	r0, [pc, #188]	@ (8001690 <LCD_CMD+0x140>)
 80015d2:	f005 fb47 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	482c      	ldr	r0, [pc, #176]	@ (8001698 <LCD_CMD+0x148>)
 80015e6:	f005 fb3d 	bl	8006c64 <HAL_GPIO_WritePin>
 80015ea:	e004      	b.n	80015f6 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2108      	movs	r1, #8
 80015f0:	4829      	ldr	r0, [pc, #164]	@ (8001698 <LCD_CMD+0x148>)
 80015f2:	f005 fb37 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	4824      	ldr	r0, [pc, #144]	@ (8001698 <LCD_CMD+0x148>)
 8001606:	f005 fb2d 	bl	8006c64 <HAL_GPIO_WritePin>
 800160a:	e004      	b.n	8001616 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2120      	movs	r1, #32
 8001610:	4821      	ldr	r0, [pc, #132]	@ (8001698 <LCD_CMD+0x148>)
 8001612:	f005 fb27 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	481c      	ldr	r0, [pc, #112]	@ (8001698 <LCD_CMD+0x148>)
 8001626:	f005 fb1d 	bl	8006c64 <HAL_GPIO_WritePin>
 800162a:	e004      	b.n	8001636 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2110      	movs	r1, #16
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <LCD_CMD+0x148>)
 8001632:	f005 fb17 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001646:	4814      	ldr	r0, [pc, #80]	@ (8001698 <LCD_CMD+0x148>)
 8001648:	f005 fb0c 	bl	8006c64 <HAL_GPIO_WritePin>
 800164c:	e005      	b.n	800165a <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001654:	4810      	ldr	r0, [pc, #64]	@ (8001698 <LCD_CMD+0x148>)
 8001656:	f005 fb05 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da06      	bge.n	8001670 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <LCD_CMD+0x140>)
 800166a:	f005 fafb 	bl	8006c64 <HAL_GPIO_WritePin>
 800166e:	e005      	b.n	800167c <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <LCD_CMD+0x140>)
 8001678:	f005 faf4 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2102      	movs	r1, #2
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <LCD_CMD+0x140>)
 8001682:	f005 faef 	bl	8006c64 <HAL_GPIO_WritePin>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000
 8001694:	40020800 	.word	0x40020800
 8001698:	40020400 	.word	0x40020400

0800169c <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2110      	movs	r1, #16
 80016aa:	484c      	ldr	r0, [pc, #304]	@ (80017dc <LCD_DATA+0x140>)
 80016ac:	f005 fada 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4849      	ldr	r0, [pc, #292]	@ (80017dc <LCD_DATA+0x140>)
 80016b6:	f005 fad5 	bl	8006c64 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ca:	4844      	ldr	r0, [pc, #272]	@ (80017dc <LCD_DATA+0x140>)
 80016cc:	f005 faca 	bl	8006c64 <HAL_GPIO_WritePin>
 80016d0:	e005      	b.n	80016de <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d8:	4840      	ldr	r0, [pc, #256]	@ (80017dc <LCD_DATA+0x140>)
 80016da:	f005 fac3 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <LCD_DATA+0x144>)
 80016ee:	f005 fab9 	bl	8006c64 <HAL_GPIO_WritePin>
 80016f2:	e004      	b.n	80016fe <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	4839      	ldr	r0, [pc, #228]	@ (80017e0 <LCD_DATA+0x144>)
 80016fa:	f005 fab3 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800170e:	4833      	ldr	r0, [pc, #204]	@ (80017dc <LCD_DATA+0x140>)
 8001710:	f005 faa8 	bl	8006c64 <HAL_GPIO_WritePin>
 8001714:	e005      	b.n	8001722 <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800171c:	482f      	ldr	r0, [pc, #188]	@ (80017dc <LCD_DATA+0x140>)
 800171e:	f005 faa1 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2108      	movs	r1, #8
 8001730:	482c      	ldr	r0, [pc, #176]	@ (80017e4 <LCD_DATA+0x148>)
 8001732:	f005 fa97 	bl	8006c64 <HAL_GPIO_WritePin>
 8001736:	e004      	b.n	8001742 <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	4829      	ldr	r0, [pc, #164]	@ (80017e4 <LCD_DATA+0x148>)
 800173e:	f005 fa91 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	4824      	ldr	r0, [pc, #144]	@ (80017e4 <LCD_DATA+0x148>)
 8001752:	f005 fa87 	bl	8006c64 <HAL_GPIO_WritePin>
 8001756:	e004      	b.n	8001762 <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2120      	movs	r1, #32
 800175c:	4821      	ldr	r0, [pc, #132]	@ (80017e4 <LCD_DATA+0x148>)
 800175e:	f005 fa81 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <LCD_DATA+0x148>)
 8001772:	f005 fa77 	bl	8006c64 <HAL_GPIO_WritePin>
 8001776:	e004      	b.n	8001782 <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2110      	movs	r1, #16
 800177c:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <LCD_DATA+0x148>)
 800177e:	f005 fa71 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <LCD_DATA+0x148>)
 8001794:	f005 fa66 	bl	8006c64 <HAL_GPIO_WritePin>
 8001798:	e005      	b.n	80017a6 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <LCD_DATA+0x148>)
 80017a2:	f005 fa5f 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da06      	bge.n	80017bc <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <LCD_DATA+0x140>)
 80017b6:	f005 fa55 	bl	8006c64 <HAL_GPIO_WritePin>
 80017ba:	e005      	b.n	80017c8 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c2:	4806      	ldr	r0, [pc, #24]	@ (80017dc <LCD_DATA+0x140>)
 80017c4:	f005 fa4e 	bl	8006c64 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2102      	movs	r1, #2
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <LCD_DATA+0x140>)
 80017ce:	f005 fa49 	bl	8006c64 <HAL_GPIO_WritePin>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020400 	.word	0x40020400

080017e8 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80017f6:	202a      	movs	r0, #42	@ 0x2a
 80017f8:	f7ff feaa 	bl	8001550 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff4a 	bl	800169c <LCD_DATA>
	LCD_DATA(x1);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff45 	bl	800169c <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff3f 	bl	800169c <LCD_DATA>
	LCD_DATA(x2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff3a 	bl	800169c <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001828:	202b      	movs	r0, #43	@ 0x2b
 800182a:	f7ff fe91 	bl	8001550 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <LCD_DATA>
	LCD_DATA(y1);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff2c 	bl	800169c <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff26 	bl	800169c <LCD_DATA>
	LCD_DATA(y2);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff21 	bl	800169c <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 800185a:	202c      	movs	r0, #44	@ 0x2c
 800185c:	f7ff fe78 	bl	8001550 <LCD_CMD>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <H_line>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8001876:	202c      	movs	r0, #44	@ 0x2c
 8001878:	f7ff fe6a 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <H_line+0x78>)
 8001882:	f005 f9ef 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	4816      	ldr	r0, [pc, #88]	@ (80018e4 <H_line+0x7c>)
 800188c:	f005 f9ea 	bl	8006c64 <HAL_GPIO_WritePin>
	l = l + x;
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff ffa2 	bl	80017e8 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00d      	b.n	80018c6 <H_line+0x5e>
		LCD_DATA(c >> 8);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fef3 	bl	800169c <LCD_DATA>
		LCD_DATA(c);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff feee 	bl	800169c <LCD_DATA>
	for (i = 0; i < l; i++) {
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3ed      	bcc.n	80018aa <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <H_line+0x7c>)
 80018d4:	f005 f9c6 	bl	8006c64 <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400

080018e8 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 80018f6:	202c      	movs	r0, #44	@ 0x2c
 80018f8:	f7ff fe2a 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <V_line+0x78>)
 8001902:	f005 f9af 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	4816      	ldr	r0, [pc, #88]	@ (8001964 <V_line+0x7c>)
 800190c:	f005 f9aa 	bl	8006c64 <HAL_GPIO_WritePin>
	l = l + y;
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4413      	add	r3, r2
 8001916:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff ff62 	bl	80017e8 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00d      	b.n	8001946 <V_line+0x5e>
		LCD_DATA(c >> 8);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff feb3 	bl	800169c <LCD_DATA>
		LCD_DATA(c);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff feae 	bl	800169c <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d9ed      	bls.n	800192a <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2101      	movs	r1, #1
 8001952:	4804      	ldr	r0, [pc, #16]	@ (8001964 <V_line+0x7c>)
 8001954:	f005 f986 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400

08001968 <Rect>:
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
	H_line(x, y, w, c);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff ff73 	bl	8001868 <H_line>
	H_line(x, y + h, w, c);
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	18d1      	adds	r1, r2, r3
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff6b 	bl	8001868 <H_line>
	V_line(x, y, h, c);
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ffa5 	bl	80018e8 <V_line>
	V_line(x + w, y, h, c);
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	18d0      	adds	r0, r2, r3
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	f7ff ff9d 	bl	80018e8 <V_line>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80019c6:	202c      	movs	r0, #44	@ 0x2c
 80019c8:	f7ff fdc2 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2110      	movs	r1, #16
 80019d0:	4824      	ldr	r0, [pc, #144]	@ (8001a64 <FillRect+0xac>)
 80019d2:	f005 f947 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2101      	movs	r1, #1
 80019da:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <FillRect+0xb0>)
 80019dc:	f005 f942 	bl	8006c64 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fef4 	bl	80017e8 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	e01a      	b.n	8001a4a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e010      	b.n	8001a3c <FillRect+0x84>
			LCD_DATA(c >> 8);
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe3b 	bl	800169c <LCD_DATA>
			LCD_DATA(c);
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe36 	bl	800169c <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	3b02      	subs	r3, #2
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8ea      	bhi.n	8001a1a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	3301      	adds	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d8e0      	bhi.n	8001a14 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2101      	movs	r1, #1
 8001a56:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <FillRect+0xb0>)
 8001a58:	f005 f904 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	@ 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400

08001a6c <LCD_Bitmap>:
	}
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned char bitmap[]) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2C); // write_memory_start
 8001a7a:	202c      	movs	r0, #44	@ 0x2c
 8001a7c:	f7ff fd68 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2110      	movs	r1, #16
 8001a84:	4822      	ldr	r0, [pc, #136]	@ (8001b10 <LCD_Bitmap+0xa4>)
 8001a86:	f005 f8ed 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4821      	ldr	r0, [pc, #132]	@ (8001b14 <LCD_Bitmap+0xa8>)
 8001a90:	f005 f8e8 	bl	8006c64 <HAL_GPIO_WritePin>

	unsigned int k = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
	SetWindows(x, y, x + width - 1, y + height - 1);
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fe9b 	bl	80017e8 <SetWindows>

	// Intercambiar el recorrido de 'i' y 'j' para ajustar la orientación horizontal
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e01e      	b.n	8001af6 <LCD_Bitmap+0x8a>
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e014      	b.n	8001ae8 <LCD_Bitmap+0x7c>
			LCD_DATA(bitmap[k]);
 8001abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fde8 	bl	800169c <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fde0 	bl	800169c <LCD_DATA>
			k += 2;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8e6      	bhi.n	8001abe <LCD_Bitmap+0x52>
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8dc      	bhi.n	8001ab8 <LCD_Bitmap+0x4c>
		}
	}

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2101      	movs	r1, #1
 8001b02:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <LCD_Bitmap+0xa8>)
 8001b04:	f005 f8ae 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400

08001b18 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001b26:	202c      	movs	r0, #44	@ 0x2c
 8001b28:	f7ff fd12 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2110      	movs	r1, #16
 8001b30:	484d      	ldr	r0, [pc, #308]	@ (8001c68 <LCD_Sprite+0x150>)
 8001b32:	f005 f897 	bl	8006c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	484c      	ldr	r0, [pc, #304]	@ (8001c6c <LCD_Sprite+0x154>)
 8001b3c:	f005 f892 	bl	8006c64 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f7ff fe44 	bl	80017e8 <SetWindows>
	int k = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	613b      	str	r3, [r7, #16]
	if (flip) {
 8001b6e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	e032      	b.n	8001be2 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8001b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	fb03 f202 	mul.w	r2, r3, r2
 8001b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba0:	4413      	add	r3, r2
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba8:	e014      	b.n	8001bd4 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8001baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd72 	bl	800169c <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fd6a 	bl	800169c <LCD_DATA>
				k = k - 2;
 8001bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bca:	3b02      	subs	r3, #2
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbe6      	blt.n	8001baa <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	3301      	adds	r3, #1
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbc8      	blt.n	8001b7c <LCD_Sprite+0x64>
 8001bea:	e034      	b.n	8001c56 <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	e02d      	b.n	8001c4e <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	fb03 f202 	mul.w	r2, r3, r2
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001c0a:	4413      	add	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	e014      	b.n	8001c40 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8001c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd3c 	bl	800169c <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	3301      	adds	r3, #1
 8001c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fd34 	bl	800169c <LCD_DATA>
				k = k + 2;
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	3302      	adds	r3, #2
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbe6      	blt.n	8001c16 <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbcd      	blt.n	8001bf2 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <LCD_Sprite+0x154>)
 8001c5c:	f005 f802 	bl	8006c64 <HAL_GPIO_WritePin>
}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	@ 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400

08001c70 <transmit_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void transmit_uart(char *string){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint8_t len=strlen(string);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7fe fac9 	bl	8000210 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, (uint8_t*)string, len, 200);
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	23c8      	movs	r3, #200	@ 0xc8
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <transmit_uart+0x28>)
 8001c8c:	f007 f8f2 	bl	8008e74 <HAL_UART_Transmit>
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20017c78 	.word	0x20017c78

08001c9c <CargarBitmaps_SD>:

// Función para leer una imagen desde la SD
int CargarBitmaps_SD(const char* filename) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ca8:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;
    // Montar SD
    fres = f_mount(&fs, "/", 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	4936      	ldr	r1, [pc, #216]	@ (8001d88 <CargarBitmaps_SD+0xec>)
 8001cb0:	4836      	ldr	r0, [pc, #216]	@ (8001d8c <CargarBitmaps_SD+0xf0>)
 8001cb2:	f00a fb2d 	bl	800c310 <f_mount>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cbc:	f102 021f 	add.w	r2, r2, #31
 8001cc0:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK){
 8001cc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cc6:	f103 031f 	add.w	r3, r3, #31
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <CargarBitmaps_SD+0x3a>
    	transmit_uart("SD MONTADA\n");
 8001cd0:	482f      	ldr	r0, [pc, #188]	@ (8001d90 <CargarBitmaps_SD+0xf4>)
 8001cd2:	f7ff ffcd 	bl	8001c70 <transmit_uart>
    }

    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 8001cd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	3b14      	subs	r3, #20
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00a fb57 	bl	800c39c <f_open>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cf4:	f102 021f 	add.w	r2, r2, #31
 8001cf8:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8001cfa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cfe:	f103 031f 	add.w	r3, r3, #31
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <CargarBitmaps_SD+0x76>
       transmit_uart("Error al abrir el archivo en la SD\n");
 8001d08:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <CargarBitmaps_SD+0xf8>)
 8001d0a:	f7ff ffb1 	bl	8001c70 <transmit_uart>
        return 0;  // Error al abrir el archivo
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e035      	b.n	8001d7e <CargarBitmaps_SD+0xe2>
    }
    transmit_uart("Se abrio el archivo\n");
 8001d12:	4821      	ldr	r0, [pc, #132]	@ (8001d98 <CargarBitmaps_SD+0xfc>)
 8001d14:	f7ff ffac 	bl	8001c70 <transmit_uart>
    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, fragmento_imagen, 19200, &bytes_read);
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	3b18      	subs	r3, #24
 8001d1e:	f107 0020 	add.w	r0, r7, #32
 8001d22:	3814      	subs	r0, #20
 8001d24:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001d28:	491c      	ldr	r1, [pc, #112]	@ (8001d9c <CargarBitmaps_SD+0x100>)
 8001d2a:	f00a fcff 	bl	800c72c <f_read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d34:	f102 021f 	add.w	r2, r2, #31
 8001d38:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 8001d3a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d3e:	f103 031f 	add.w	r3, r3, #31
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <CargarBitmaps_SD+0xb8>
 8001d48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d4c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <CargarBitmaps_SD+0xce>
       transmit_uart("Error al leer la imagen desde la SD\n");
 8001d54:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <CargarBitmaps_SD+0x104>)
 8001d56:	f7ff ff8b 	bl	8001c70 <transmit_uart>
        f_close(&fil);
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	3b14      	subs	r3, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00a fec0 	bl	800cae6 <f_close>
        return 0;  // Error al leer el archivo
 8001d66:	2300      	movs	r3, #0
 8001d68:	e009      	b.n	8001d7e <CargarBitmaps_SD+0xe2>
    }

    // Cerrar el archivo
    f_close(&fil);
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	3b14      	subs	r3, #20
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00a feb8 	bl	800cae6 <f_close>
    transmit_uart("TERMINO DE CARGAR IMAGEN\n");
 8001d76:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <CargarBitmaps_SD+0x108>)
 8001d78:	f7ff ff7a 	bl	8001c70 <transmit_uart>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;  // Éxito
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0800d6d8 	.word	0x0800d6d8
 8001d8c:	20016b68 	.word	0x20016b68
 8001d90:	0800d6dc 	.word	0x0800d6dc
 8001d94:	0800d6e8 	.word	0x0800d6e8
 8001d98:	0800d70c 	.word	0x0800d70c
 8001d9c:	20017cc0 	.word	0x20017cc0
 8001da0:	0800d724 	.word	0x0800d724
 8001da4:	0800d74c 	.word	0x0800d74c

08001da8 <setPWM_Frequency>:

/*---------Sonido---------------------*/

// Función para cambiar la frecuencia del PWM (ajusta el periodo)
void setPWM_Frequency(uint32_t frequency) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if (estadoActual==DUO || estadoActual==SOLO){
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <setPWM_Frequency+0x50>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d004      	beq.n	8001dc4 <setPWM_Frequency+0x1c>
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <setPWM_Frequency+0x50>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d112      	bne.n	8001dea <setPWM_Frequency+0x42>
		uint32_t timer_clock = 1000000; // 1 MHz (depende de tu configuración)
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <setPWM_Frequency+0x54>)
 8001dc6:	60fb      	str	r3, [r7, #12]
		uint32_t period = (timer_clock / frequency) - 1;
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]

		// Cambiar el periodo (Auto-Reload Register)
		__HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <setPWM_Frequency+0x58>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <setPWM_Frequency+0x58>)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	60d3      	str	r3, [r2, #12]

		// Reiniciar el timer para aplicar el cambio de frecuencia
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <setPWM_Frequency+0x58>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20016a78 	.word	0x20016a78
 8001dfc:	000f4240 	.word	0x000f4240
 8001e00:	20017be8 	.word	0x20017be8

08001e04 <setPWM_DutyCycle>:

// Función para cambiar el duty cycle
void setPWM_DutyCycle(uint16_t dutyCycle) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
	if (estadoActual==DUO || estadoActual==SOLO){
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <setPWM_DutyCycle+0x34>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d004      	beq.n	8001e22 <setPWM_DutyCycle+0x1e>
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <setPWM_DutyCycle+0x34>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d103      	bne.n	8001e2a <setPWM_DutyCycle+0x26>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, dutyCycle);
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <setPWM_DutyCycle+0x38>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20016a78 	.word	0x20016a78
 8001e3c:	20017be8 	.word	0x20017be8

08001e40 <animation_e1_control>:

/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 3a90 	vmov	r3, s15
 8001e56:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e62:	ee17 3a90 	vmov	r3, s15
 8001e66:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d131      	bne.n	8001ed4 <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	dd1b      	ble.n	8001eae <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	dc13      	bgt.n	8001ea4 <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb81 	bl	8000588 <__aeabi_f2d>
 8001e86:	a316      	add	r3, pc, #88	@ (adr r3, 8001ee0 <animation_e1_control+0xa0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fa1e 	bl	80002cc <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fbce 	bl	8000638 <__aeabi_d2f>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 8001ea2:	e017      	b.n	8001ed4 <animation_e1_control+0x94>
				enemy->animationV=0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001eac:	e012      	b.n	8001ed4 <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb68 	bl	8000588 <__aeabi_f2d>
 8001eb8:	a309      	add	r3, pc, #36	@ (adr r3, 8001ee0 <animation_e1_control+0xa0>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe fa05 	bl	80002cc <__adddf3>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fbb5 	bl	8000638 <__aeabi_d2f>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	f3af 8000 	nop.w
 8001ee0:	9999999a 	.word	0x9999999a
 8001ee4:	3fb99999 	.word	0x3fb99999

08001ee8 <animation_e1>:


void animation_e1(enemy_type1* enemy){
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	@ 0x2c
 8001eec:	af06      	add	r7, sp, #24
 8001eee:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efa:	ee17 3a90 	vmov	r3, s15
 8001efe:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0a:	ee17 3a90 	vmov	r3, s15
 8001f0e:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f040 80a6 	bne.w	8002066 <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	f340 80a2 	ble.w	8002066 <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3b06      	subs	r3, #6
 8001f28:	4618      	mov	r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	3b09      	subs	r3, #9
 8001f30:	4619      	mov	r1, r3
 8001f32:	2300      	movs	r3, #0
 8001f34:	9304      	str	r3, [sp, #16]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9303      	str	r3, [sp, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	2310      	movs	r3, #16
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <animation_e1+0x188>)
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2313      	movs	r3, #19
 8001f48:	2210      	movs	r2, #16
 8001f4a:	f7ff fde5 	bl	8001b18 <LCD_Sprite>
		    if (DrawHitbox==1){
 8001f4e:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <animation_e1+0x18c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d113      	bne.n	8001f7e <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	1ad0      	subs	r0, r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	1ad1      	subs	r1, r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2400      	movs	r4, #0
 8001f78:	9400      	str	r4, [sp, #0]
 8001f7a:	f7ff fcf5 	bl	8001968 <Rect>
		    }
		    if (DrawHitbox==2){
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <animation_e1+0x18c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d12b      	bne.n	8001fde <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6998      	ldr	r0, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	2201      	movs	r2, #1
 8001f98:	f7ff fd0e 	bl	80019b8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69d8      	ldr	r0, [r3, #28]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	2201      	movs	r2, #1
 8001fae:	f7ff fd03 	bl	80019b8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a19      	ldr	r1, [r3, #32]
 8001fba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f7ff fcf8 	bl	80019b8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001fd0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f7ff fced 	bl	80019b8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <animation_e1+0x18c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d13f      	bne.n	8002066 <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	1ad0      	subs	r0, r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	1ad1      	subs	r1, r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2400      	movs	r4, #0
 8002008:	9400      	str	r4, [sp, #0]
 800200a:	f7ff fcad 	bl	8001968 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6998      	ldr	r0, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2301      	movs	r3, #1
 800201e:	2201      	movs	r2, #1
 8002020:	f7ff fcca 	bl	80019b8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69d8      	ldr	r0, [r3, #28]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	2201      	movs	r2, #1
 8002036:	f7ff fcbf 	bl	80019b8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a19      	ldr	r1, [r3, #32]
 8002042:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	2201      	movs	r2, #1
 800204c:	f7ff fcb4 	bl	80019b8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002058:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2301      	movs	r3, #1
 8002060:	2201      	movs	r2, #1
 8002062:	f7ff fca9 	bl	80019b8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	2000b88c 	.word	0x2000b88c
 8002074:	2001cb27 	.word	0x2001cb27

08002078 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af06      	add	r7, sp, #24
 800207e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800208a:	ee17 3a90 	vmov	r3, s15
 800208e:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d134      	bne.n	8002102 <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b0a      	cmp	r3, #10
 800209c:	dc29      	bgt.n	80020f2 <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3b06      	subs	r3, #6
 80020a4:	4618      	mov	r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	3b0c      	subs	r3, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	9304      	str	r3, [sp, #16]
 80020b2:	2300      	movs	r3, #0
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	230b      	movs	r3, #11
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <animation_e1_die+0xa0>)
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2319      	movs	r3, #25
 80020c4:	220e      	movs	r2, #14
 80020c6:	f7ff fd27 	bl	8001b18 <LCD_Sprite>
				enemy->animationDie+=0.2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa5a 	bl	8000588 <__aeabi_f2d>
 80020d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002110 <animation_e1_die+0x98>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f8f7 	bl	80002cc <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe faa7 	bl	8000638 <__aeabi_d2f>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 80020f0:	e007      	b.n	8002102 <animation_e1_die+0x8a>
					enemy->x=5000;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f8:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	605a      	str	r2, [r3, #4]
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	9999999a 	.word	0x9999999a
 8002114:	3fc99999 	.word	0x3fc99999
 8002118:	2000de8c 	.word	0x2000de8c

0800211c <animation_e1_dieS>:

void animation_e1_dieS(enemy_type1* enemy){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	int variableAnimationDieS=enemy->animationDie;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800212a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212e:	ee17 3a90 	vmov	r3, s15
 8002132:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13b      	bne.n	80021b4 <animation_e1_dieS+0x98>
			if (variableAnimationDieS<11){
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b0a      	cmp	r3, #10
 8002140:	dc38      	bgt.n	80021b4 <animation_e1_dieS+0x98>
				switch (variableAnimationDieS){
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d835      	bhi.n	80021b4 <animation_e1_dieS+0x98>
 8002148:	a201      	add	r2, pc, #4	@ (adr r2, 8002150 <animation_e1_dieS+0x34>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002165 	.word	0x08002165
 8002154:	08002175 	.word	0x08002175
 8002158:	08002185 	.word	0x08002185
 800215c:	08002195 	.word	0x08002195
 8002160:	080021a5 	.word	0x080021a5
				case 0:
					setPWM_Frequency(8500); // Frecuencia de 1 kHz
 8002164:	f242 1034 	movw	r0, #8500	@ 0x2134
 8002168:	f7ff fe1e 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 800216c:	2032      	movs	r0, #50	@ 0x32
 800216e:	f7ff fe49 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8002172:	e01f      	b.n	80021b4 <animation_e1_dieS+0x98>
				case 1:
					setPWM_Frequency(6500); // Frecuencia de 1 kHz
 8002174:	f641 1064 	movw	r0, #6500	@ 0x1964
 8002178:	f7ff fe16 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 800217c:	2032      	movs	r0, #50	@ 0x32
 800217e:	f7ff fe41 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8002182:	e017      	b.n	80021b4 <animation_e1_dieS+0x98>
				case 2:
					setPWM_Frequency(8500); // Frecuencia de 1 kHz
 8002184:	f242 1034 	movw	r0, #8500	@ 0x2134
 8002188:	f7ff fe0e 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 800218c:	2032      	movs	r0, #50	@ 0x32
 800218e:	f7ff fe39 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8002192:	e00f      	b.n	80021b4 <animation_e1_dieS+0x98>
				case 3:
					setPWM_Frequency(6500); // Frecuencia de 1 kHz
 8002194:	f641 1064 	movw	r0, #6500	@ 0x1964
 8002198:	f7ff fe06 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 800219c:	2032      	movs	r0, #50	@ 0x32
 800219e:	f7ff fe31 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80021a2:	e007      	b.n	80021b4 <animation_e1_dieS+0x98>
				case 4:
					setPWM_Frequency(6500); // Frecuencia de 1 kHz
 80021a4:	f641 1064 	movw	r0, #6500	@ 0x1964
 80021a8:	f7ff fdfe 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(0);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fe29 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80021b2:	bf00      	nop
				}
			}
		}
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08b      	sub	sp, #44	@ 0x2c
 80021c0:	af06      	add	r7, sp, #24
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e6:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <initEnemy1+0x1d4>)
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a65      	ldr	r2, [pc, #404]	@ (8002394 <initEnemy1+0x1d8>)
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	1ad2      	subs	r2, r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	441a      	add	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	441a      	add	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3b08      	subs	r3, #8
 8002248:	4618      	mov	r0, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	3b09      	subs	r3, #9
 8002250:	4619      	mov	r1, r3
 8002252:	2300      	movs	r3, #0
 8002254:	9304      	str	r3, [sp, #16]
 8002256:	2300      	movs	r3, #0
 8002258:	9303      	str	r3, [sp, #12]
 800225a:	2300      	movs	r3, #0
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2310      	movs	r3, #16
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	4b4d      	ldr	r3, [pc, #308]	@ (8002398 <initEnemy1+0x1dc>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2313      	movs	r3, #19
 8002268:	2210      	movs	r2, #16
 800226a:	f7ff fc55 	bl	8001b18 <LCD_Sprite>

    if (DrawHitbox==1){
 800226e:	4b4b      	ldr	r3, [pc, #300]	@ (800239c <initEnemy1+0x1e0>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d113      	bne.n	800229e <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	1ad0      	subs	r0, r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	1ad1      	subs	r1, r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2400      	movs	r4, #0
 8002298:	9400      	str	r4, [sp, #0]
 800229a:	f7ff fb65 	bl	8001968 <Rect>
    }
    if (DrawHitbox==2){
 800229e:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <initEnemy1+0x1e0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d12b      	bne.n	80022fe <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6998      	ldr	r0, [r3, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	2201      	movs	r2, #1
 80022b8:	f7ff fb7e 	bl	80019b8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	69d8      	ldr	r0, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2301      	movs	r3, #1
 80022cc:	2201      	movs	r2, #1
 80022ce:	f7ff fb73 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a19      	ldr	r1, [r3, #32]
 80022da:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2301      	movs	r3, #1
 80022e2:	2201      	movs	r2, #1
 80022e4:	f7ff fb68 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022f0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2301      	movs	r3, #1
 80022f8:	2201      	movs	r2, #1
 80022fa:	f7ff fb5d 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 80022fe:	4b27      	ldr	r3, [pc, #156]	@ (800239c <initEnemy1+0x1e0>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d13f      	bne.n	8002386 <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	1ad0      	subs	r0, r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	1ad1      	subs	r1, r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2400      	movs	r4, #0
 8002328:	9400      	str	r4, [sp, #0]
 800232a:	f7ff fb1d 	bl	8001968 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6998      	ldr	r0, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2301      	movs	r3, #1
 800233e:	2201      	movs	r2, #1
 8002340:	f7ff fb3a 	bl	80019b8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	69d8      	ldr	r0, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	2201      	movs	r2, #1
 8002356:	f7ff fb2f 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a19      	ldr	r1, [r3, #32]
 8002362:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2201      	movs	r2, #1
 800236c:	f7ff fb24 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002378:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2301      	movs	r3, #1
 8002380:	2201      	movs	r2, #1
 8002382:	f7ff fb19 	bl	80019b8 <FillRect>
        }
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bd90      	pop	{r4, r7, pc}
 800238e:	bf00      	nop
 8002390:	40a00000 	.word	0x40a00000
 8002394:	41400000 	.word	0x41400000
 8002398:	2000b88c 	.word	0x2000b88c
 800239c:	2001cb27 	.word	0x2001cb27

080023a0 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f040 8251 	bne.w	800285a <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	f200 824c 	bhi.w	800285a <ColisionPlayer_e1+0x4ba>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <ColisionPlayer_e1+0x28>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080024f7 	.word	0x080024f7
 80023d0:	08002615 	.word	0x08002615
 80023d4:	08002733 	.word	0x08002733
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 80023d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023da:	3b0c      	subs	r3, #12
 80023dc:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f0c0 8231 	bcc.w	800284c <ColisionPlayer_e1+0x4ac>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f200 822b 	bhi.w	800284c <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d323      	bcc.n	800244a <ColisionPlayer_e1+0xaa>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	429a      	cmp	r2, r3
 800240c:	d81d      	bhi.n	800244a <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	1d5a      	adds	r2, r3, #5
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2201      	movs	r2, #1
 800241c:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002446:	2300      	movs	r3, #0
 8002448:	e208      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	429a      	cmp	r2, r3
 8002454:	d323      	bcc.n	800249e <ColisionPlayer_e1+0xfe>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	429a      	cmp	r2, r3
 8002460:	d81d      	bhi.n	800249e <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	1d5a      	adds	r2, r3, #5
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2201      	movs	r2, #1
 8002470:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800249a:	2300      	movs	r3, #0
 800249c:	e1de      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	f0c0 81d0 	bcc.w	800284c <ColisionPlayer_e1+0x4ac>
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f200 81c9 	bhi.w	800284c <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	1d5a      	adds	r2, r3, #5
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2201      	movs	r2, #1
 80024c8:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e1b2      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	429a      	cmp	r2, r3
 8002504:	f200 81a4 	bhi.w	8002850 <ColisionPlayer_e1+0x4b0>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	f0c0 819e 	bcc.w	8002850 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	429a      	cmp	r2, r3
 800251e:	d323      	bcc.n	8002568 <ColisionPlayer_e1+0x1c8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	429a      	cmp	r2, r3
 800252a:	d81d      	bhi.n	8002568 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1f5a      	subs	r2, r3, #5
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2201      	movs	r2, #1
 800253a:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2200      	movs	r2, #0
 800255a:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002564:	2300      	movs	r3, #0
 8002566:	e179      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d323      	bcc.n	80025bc <ColisionPlayer_e1+0x21c>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	429a      	cmp	r2, r3
 800257e:	d81d      	bhi.n	80025bc <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1f5a      	subs	r2, r3, #5
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2201      	movs	r2, #1
 800258e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e14f      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Up && player->y<=enemy->e1Down){
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f0c0 8143 	bcc.w	8002850 <ColisionPlayer_e1+0x4b0>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	429a      	cmp	r2, r3
 80025d4:	f200 813c 	bhi.w	8002850 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1f5a      	subs	r2, r3, #5
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2201      	movs	r2, #1
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002610:	2300      	movs	r3, #0
 8002612:	e123      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002616:	330c      	adds	r3, #12
 8002618:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1a      	ldr	r2, [r3, #32]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	f200 8117 	bhi.w	8002854 <ColisionPlayer_e1+0x4b4>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	429a      	cmp	r2, r3
 800262e:	f0c0 8111 	bcc.w	8002854 <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	429a      	cmp	r2, r3
 800263c:	d323      	bcc.n	8002686 <ColisionPlayer_e1+0x2e6>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	429a      	cmp	r2, r3
 8002648:	d81d      	bhi.n	8002686 <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	1f5a      	subs	r2, r3, #5
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2201      	movs	r2, #1
 8002658:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d106      	bne.n	8002682 <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002682:	2300      	movs	r3, #0
 8002684:	e0ea      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	429a      	cmp	r2, r3
 8002690:	d323      	bcc.n	80026da <ColisionPlayer_e1+0x33a>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d81d      	bhi.n	80026da <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	1f5a      	subs	r2, r3, #5
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2201      	movs	r2, #1
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e0c0      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	f0c0 80b6 	bcc.w	8002854 <ColisionPlayer_e1+0x4b4>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f200 80af 	bhi.w	8002854 <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	1f5a      	subs	r2, r3, #5
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2201      	movs	r2, #1
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	1e5a      	subs	r2, r3, #1
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800272e:	2300      	movs	r3, #0
 8002730:	e094      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	3b0c      	subs	r3, #12
 8002736:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	429a      	cmp	r2, r3
 8002740:	f0c0 808a 	bcc.w	8002858 <ColisionPlayer_e1+0x4b8>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	429a      	cmp	r2, r3
 800274c:	f200 8084 	bhi.w	8002858 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	429a      	cmp	r2, r3
 800275a:	d323      	bcc.n	80027a4 <ColisionPlayer_e1+0x404>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	429a      	cmp	r2, r3
 8002766:	d81d      	bhi.n	80027a4 <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1d5a      	adds	r2, r3, #5
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2201      	movs	r2, #1
 8002776:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e05b      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d323      	bcc.n	80027f8 <ColisionPlayer_e1+0x458>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d81d      	bhi.n	80027f8 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	1d5a      	adds	r2, r3, #5
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2201      	movs	r2, #1
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e031      	b.n	800285c <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Up && player->y<=enemy->e1Down){
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	429a      	cmp	r2, r3
 8002802:	d329      	bcc.n	8002858 <ColisionPlayer_e1+0x4b8>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	429a      	cmp	r2, r3
 800280e:	d823      	bhi.n	8002858 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	1d5a      	adds	r2, r3, #5
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2201      	movs	r2, #1
 800281e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002848:	2300      	movs	r3, #0
 800284a:	e007      	b.n	800285c <ColisionPlayer_e1+0x4bc>
					break;
 800284c:	bf00      	nop
 800284e:	e004      	b.n	800285a <ColisionPlayer_e1+0x4ba>
					break;
 8002850:	bf00      	nop
 8002852:	e002      	b.n	800285a <ColisionPlayer_e1+0x4ba>
					break;
 8002854:	bf00      	nop
 8002856:	e000      	b.n	800285a <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 8002858:	bf00      	nop
			return 1;
			}
	}
	return 1;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3724      	adds	r7, #36	@ 0x24
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b089      	sub	sp, #36	@ 0x24
 800286c:	af06      	add	r7, sp, #24
 800286e:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	441a      	add	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3b08      	subs	r3, #8
 80028b6:	4618      	mov	r0, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	3b0a      	subs	r3, #10
 80028be:	4619      	mov	r1, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	9304      	str	r3, [sp, #16]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	2304      	movs	r3, #4
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	2305      	movs	r3, #5
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <Hitbox_e2+0x194>)
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2314      	movs	r3, #20
 80028d6:	2210      	movs	r2, #16
 80028d8:	f7ff f91e 	bl	8001b18 <LCD_Sprite>

    if (DrawHitbox==1){
 80028dc:	4b48      	ldr	r3, [pc, #288]	@ (8002a00 <Hitbox_e2+0x198>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d113      	bne.n	800290c <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	1ad0      	subs	r0, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	1ad1      	subs	r1, r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2400      	movs	r4, #0
 8002906:	9400      	str	r4, [sp, #0]
 8002908:	f7ff f82e 	bl	8001968 <Rect>
    }
    if (DrawHitbox==2){
 800290c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a00 <Hitbox_e2+0x198>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d12b      	bne.n	800296c <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6998      	ldr	r0, [r3, #24]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	2201      	movs	r2, #1
 8002926:	f7ff f847 	bl	80019b8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69d8      	ldr	r0, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	2201      	movs	r2, #1
 800293c:	f7ff f83c 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a19      	ldr	r1, [r3, #32]
 8002948:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2301      	movs	r3, #1
 8002950:	2201      	movs	r2, #1
 8002952:	f7ff f831 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800295e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	2201      	movs	r2, #1
 8002968:	f7ff f826 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 800296c:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <Hitbox_e2+0x198>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d13f      	bne.n	80029f4 <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	1ad0      	subs	r0, r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	1ad1      	subs	r1, r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2400      	movs	r4, #0
 8002996:	9400      	str	r4, [sp, #0]
 8002998:	f7fe ffe6 	bl	8001968 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6998      	ldr	r0, [r3, #24]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	2201      	movs	r2, #1
 80029ae:	f7ff f803 	bl	80019b8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69d8      	ldr	r0, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2301      	movs	r3, #1
 80029c2:	2201      	movs	r2, #1
 80029c4:	f7fe fff8 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a19      	ldr	r1, [r3, #32]
 80029d0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2301      	movs	r3, #1
 80029d8:	2201      	movs	r2, #1
 80029da:	f7fe ffed 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029e6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	2201      	movs	r2, #1
 80029f0:	f7fe ffe2 	bl	80019b8 <FillRect>
        }
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	200016e4 	.word	0x200016e4
 8002a00:	2001cb27 	.word	0x2001cb27

08002a04 <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <initEnemy2+0x6c>)
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <initEnemy2+0x70>)
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40400000 	.word	0x40400000
 8002a74:	40c00000 	.word	0x40c00000

08002a78 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	@ 0x28
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8105 	bne.w	8002c96 <moveE2+0x21e>
		int delay_s=enemy->delay;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a96:	ee17 3a90 	vmov	r3, s15
 8002a9a:	61fb      	str	r3, [r7, #28]
		if (delay_s==100000){ //
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4a80      	ldr	r2, [pc, #512]	@ (8002ca0 <moveE2+0x228>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 80ef 	bne.w	8002c84 <moveE2+0x20c>
			switch(enemy->move){
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	f200 80f3 	bhi.w	8002c96 <moveE2+0x21e>
 8002ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab8 <moveE2+0x40>)
 8002ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab6:	bf00      	nop
 8002ab8:	08002ac9 	.word	0x08002ac9
 8002abc:	08002b39 	.word	0x08002b39
 8002ac0:	08002ba9 	.word	0x08002ba9
 8002ac4:	08002c19 	.word	0x08002c19
			case 0: //Derecha
				int futureX_D=player->x+50;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3332      	adds	r3, #50	@ 0x32
 8002ace:	60fb      	str	r3, [r7, #12]
				if (futureX_D>player->limitWidth-20){
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	f1a3 0214 	sub.w	r2, r3, #20
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d209      	bcs.n	8002af2 <moveE2+0x7a>
					enemy->move+=1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002ae8:	6839      	ldr	r1, [r7, #0]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffc4 	bl	8002a78 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002af0:	e0d1      	b.n	8002c96 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1a3 0008 	sub.w	r0, r3, #8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f1a3 010a 	sub.w	r1, r3, #10
 8002b02:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2314      	movs	r3, #20
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	f7fe ff54 	bl	80019b8 <FillRect>
					enemy->x=futureX_D;
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fe99 	bl	8002868 <Hitbox_e2>
				break;
 8002b36:	e0ae      	b.n	8002c96 <moveE2+0x21e>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	3332      	adds	r3, #50	@ 0x32
 8002b3e:	613b      	str	r3, [r7, #16]
				if (futureY_A>player->limitHeight-20){
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	f1a3 0214 	sub.w	r2, r3, #20
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d209      	bcs.n	8002b62 <moveE2+0xea>
					enemy->move+=1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ff8c 	bl	8002a78 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002b60:	e099      	b.n	8002c96 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1a3 0008 	sub.w	r0, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f1a3 010a 	sub.w	r1, r3, #10
 8002b72:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2314      	movs	r3, #20
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	f7fe ff1c 	bl	80019b8 <FillRect>
					enemy->y=futureY_A;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fe61 	bl	8002868 <Hitbox_e2>
				break;
 8002ba6:	e076      	b.n	8002c96 <moveE2+0x21e>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3b32      	subs	r3, #50	@ 0x32
 8002bae:	617b      	str	r3, [r7, #20]
				if (futureX_I<player->limitWidth_i+20){
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f103 0214 	add.w	r2, r3, #20
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d909      	bls.n	8002bd2 <moveE2+0x15a>
						enemy->move+=1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ff54 	bl	8002a78 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002bd0:	e061      	b.n	8002c96 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1a3 0008 	sub.w	r0, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f1a3 010a 	sub.w	r1, r3, #10
 8002be2:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2314      	movs	r3, #20
 8002bea:	2210      	movs	r2, #16
 8002bec:	f7fe fee4 	bl	80019b8 <FillRect>
					enemy->x=futureX_I;
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fe29 	bl	8002868 <Hitbox_e2>
				break;
 8002c16:	e03e      	b.n	8002c96 <moveE2+0x21e>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	3b32      	subs	r3, #50	@ 0x32
 8002c1e:	61bb      	str	r3, [r7, #24]
				if (futureY_U>player->limitHeight+20){
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	f103 0214 	add.w	r2, r3, #20
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d209      	bcs.n	8002c42 <moveE2+0x1ca>
					enemy->move+=1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ff1c 	bl	8002a78 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002c40:	e029      	b.n	8002c96 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1a3 0008 	sub.w	r0, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f1a3 010a 	sub.w	r1, r3, #10
 8002c52:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2314      	movs	r3, #20
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	f7fe feac 	bl	80019b8 <FillRect>
					enemy->y=futureY_U;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fdf3 	bl	8002868 <Hitbox_e2>
				break;
 8002c82:	e008      	b.n	8002c96 <moveE2+0x21e>
			}
		}else{
			if (delay_s==200000){ //
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4a07      	ldr	r2, [pc, #28]	@ (8002ca4 <moveE2+0x22c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d104      	bne.n	8002c96 <moveE2+0x21e>
				enemy->delay=0;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002c94:	e7ff      	b.n	8002c96 <moveE2+0x21e>
 8002c96:	bf00      	nop
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	000186a0 	.word	0x000186a0
 8002ca4:	00030d40 	.word	0x00030d40

08002ca8 <E2_Appear>:
			}
		}
	}
}

void E2_Appear(enemy_type2* enemy){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af06      	add	r7, sp, #24
 8002cae:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cba:	ee17 3a90 	vmov	r3, s15
 8002cbe:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d12b      	bne.n	8002d20 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	dc28      	bgt.n	8002d20 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3b08      	subs	r3, #8
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	3b0a      	subs	r3, #10
 8002cdc:	4619      	mov	r1, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9304      	str	r3, [sp, #16]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	9302      	str	r3, [sp, #8]
 8002cea:	2305      	movs	r3, #5
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <E2_Appear+0x88>)
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2314      	movs	r3, #20
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	f7fe ff0f 	bl	8001b18 <LCD_Sprite>
			enemy->animationV+=0.05;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fc42 	bl	8000588 <__aeabi_f2d>
 8002d04:	a308      	add	r3, pc, #32	@ (adr r3, 8002d28 <E2_Appear+0x80>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f7fd fadf 	bl	80002cc <__adddf3>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd fc8f 	bl	8000638 <__aeabi_d2f>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	9999999a 	.word	0x9999999a
 8002d2c:	3fa99999 	.word	0x3fa99999
 8002d30:	200016e4 	.word	0x200016e4
 8002d34:	00000000 	.word	0x00000000

08002d38 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af06      	add	r7, sp, #24
 8002d3e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d13b      	bne.n	8002dc0 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d52:	ee17 3a90 	vmov	r3, s15
 8002d56:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d12f      	bne.n	8002dc0 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	dc29      	bgt.n	8002dba <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3b0e      	subs	r3, #14
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	3b0c      	subs	r3, #12
 8002d74:	4619      	mov	r1, r3
 8002d76:	2300      	movs	r3, #0
 8002d78:	9304      	str	r3, [sp, #16]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9303      	str	r3, [sp, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	9302      	str	r3, [sp, #8]
 8002d82:	2303      	movs	r3, #3
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <E2_Hurt+0x98>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2319      	movs	r3, #25
 8002d8c:	221c      	movs	r2, #28
 8002d8e:	f7fe fec3 	bl	8001b18 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fbf6 	bl	8000588 <__aeabi_f2d>
 8002d9c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002dc8 <E2_Hurt+0x90>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fa93 	bl	80002cc <__adddf3>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7fd fc43 	bl	8000638 <__aeabi_d2f>
 8002db2:	4602      	mov	r2, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002db8:	e002      	b.n	8002dc0 <E2_Hurt+0x88>
					enemy->isHurt=0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	9999999a 	.word	0x9999999a
 8002dcc:	3fa99999 	.word	0x3fa99999
 8002dd0:	20002364 	.word	0x20002364

08002dd4 <E2_HurtS>:

void E2_HurtS(enemy_type2* enemy){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d133      	bne.n	8002e4c <E2_HurtS+0x78>
		int variableAnimationHurtS=enemy->animationDV;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dee:	ee17 3a90 	vmov	r3, s15
 8002df2:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d127      	bne.n	8002e4c <E2_HurtS+0x78>
			if (variableAnimationHurtS<3){
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	dc24      	bgt.n	8002e4c <E2_HurtS+0x78>
				switch (variableAnimationHurtS){
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d019      	beq.n	8002e3c <E2_HurtS+0x68>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	dc1e      	bgt.n	8002e4c <E2_HurtS+0x78>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <E2_HurtS+0x48>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d008      	beq.n	8002e2c <E2_HurtS+0x58>
					break;
				}
			}
		}
	}
}
 8002e1a:	e017      	b.n	8002e4c <E2_HurtS+0x78>
					setPWM_Frequency(6500); // Frecuencia de 1 kHz
 8002e1c:	f641 1064 	movw	r0, #6500	@ 0x1964
 8002e20:	f7fe ffc2 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 8002e24:	2032      	movs	r0, #50	@ 0x32
 8002e26:	f7fe ffed 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8002e2a:	e00f      	b.n	8002e4c <E2_HurtS+0x78>
					setPWM_Frequency(4500); // Frecuencia de 1 kHz
 8002e2c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002e30:	f7fe ffba 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 8002e34:	2032      	movs	r0, #50	@ 0x32
 8002e36:	f7fe ffe5 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8002e3a:	e007      	b.n	8002e4c <E2_HurtS+0x78>
					setPWM_Frequency(2500); // Frecuencia de 1 kHz
 8002e3c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002e40:	f7fe ffb2 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);
 8002e44:	2032      	movs	r0, #50	@ 0x32
 8002e46:	f7fe ffdd 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8002e4a:	bf00      	nop
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0000      	movs	r0, r0
	...

08002e58 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af06      	add	r7, sp, #24
 8002e5e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6a:	ee17 3a90 	vmov	r3, s15
 8002e6e:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d143      	bne.n	8002f00 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	dc29      	bgt.n	8002ed2 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3b0c      	subs	r3, #12
 8002e84:	4618      	mov	r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	3b0b      	subs	r3, #11
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9304      	str	r3, [sp, #16]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9303      	str	r3, [sp, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	9302      	str	r3, [sp, #8]
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f10 <E2_Die+0xb8>)
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	221a      	movs	r2, #26
 8002ea6:	f7fe fe37 	bl	8001b18 <LCD_Sprite>
					enemy->animationDie+=0.2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb6a 	bl	8000588 <__aeabi_f2d>
 8002eb4:	a314      	add	r3, pc, #80	@ (adr r3, 8002f08 <E2_Die+0xb0>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fa07 	bl	80002cc <__adddf3>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7fd fbb7 	bl	8000638 <__aeabi_d2f>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002ed0:	e016      	b.n	8002f00 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1a3 000c 	sub.w	r0, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f1a3 010b 	sub.w	r1, r3, #11
 8002ee2:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2317      	movs	r3, #23
 8002eea:	221a      	movs	r2, #26
 8002eec:	f7fe fd64 	bl	80019b8 <FillRect>
						enemy->x=5000;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef6:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	605a      	str	r2, [r3, #4]
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	9999999a 	.word	0x9999999a
 8002f0c:	3fc99999 	.word	0x3fc99999
 8002f10:	200033cc 	.word	0x200033cc

08002f14 <E2_DieS>:

void E2_DieS(enemy_type2* enemy){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	int variableAnimationDieS=enemy->animationDie;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f26:	ee17 3a90 	vmov	r3, s15
 8002f2a:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d145      	bne.n	8002fc0 <E2_DieS+0xac>
				if (variableAnimationDieS<6){
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	dc42      	bgt.n	8002fc0 <E2_DieS+0xac>
					switch (variableAnimationDieS){
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d83f      	bhi.n	8002fc0 <E2_DieS+0xac>
 8002f40:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <E2_DieS+0x34>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f61 	.word	0x08002f61
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f81 	.word	0x08002f81
 8002f54:	08002f91 	.word	0x08002f91
 8002f58:	08002fa1 	.word	0x08002fa1
 8002f5c:	08002fb1 	.word	0x08002fb1
					case 0:
						setPWM_Frequency(15000); // Frecuencia de 1 kHz
 8002f60:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002f64:	f7fe ff20 	bl	8001da8 <setPWM_Frequency>
						setPWM_DutyCycle(50);
 8002f68:	2032      	movs	r0, #50	@ 0x32
 8002f6a:	f7fe ff4b 	bl	8001e04 <setPWM_DutyCycle>
						break;
 8002f6e:	e027      	b.n	8002fc0 <E2_DieS+0xac>
					case 1:
						setPWM_Frequency(6000); // Frecuencia de 1 kHz
 8002f70:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002f74:	f7fe ff18 	bl	8001da8 <setPWM_Frequency>
						setPWM_DutyCycle(50);
 8002f78:	2032      	movs	r0, #50	@ 0x32
 8002f7a:	f7fe ff43 	bl	8001e04 <setPWM_DutyCycle>
						break;
 8002f7e:	e01f      	b.n	8002fc0 <E2_DieS+0xac>
					case 2:
						setPWM_Frequency(10000); // Frecuencia de 1 kHz
 8002f80:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002f84:	f7fe ff10 	bl	8001da8 <setPWM_Frequency>
						setPWM_DutyCycle(50);
 8002f88:	2032      	movs	r0, #50	@ 0x32
 8002f8a:	f7fe ff3b 	bl	8001e04 <setPWM_DutyCycle>
						break;
 8002f8e:	e017      	b.n	8002fc0 <E2_DieS+0xac>
					case 3:
						setPWM_Frequency(4500); // Frecuencia de 1 kHz
 8002f90:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002f94:	f7fe ff08 	bl	8001da8 <setPWM_Frequency>
						setPWM_DutyCycle(50);
 8002f98:	2032      	movs	r0, #50	@ 0x32
 8002f9a:	f7fe ff33 	bl	8001e04 <setPWM_DutyCycle>
						break;
 8002f9e:	e00f      	b.n	8002fc0 <E2_DieS+0xac>
					case 4:
						setPWM_Frequency(4500); // Frecuencia de 1 kHz
 8002fa0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002fa4:	f7fe ff00 	bl	8001da8 <setPWM_Frequency>
						setPWM_DutyCycle(50);
 8002fa8:	2032      	movs	r0, #50	@ 0x32
 8002faa:	f7fe ff2b 	bl	8001e04 <setPWM_DutyCycle>
						break;
 8002fae:	e007      	b.n	8002fc0 <E2_DieS+0xac>
					case 5:
						setPWM_Frequency(4500); // Frecuencia de 1 kHz
 8002fb0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002fb4:	f7fe fef8 	bl	8001da8 <setPWM_Frequency>
						setPWM_DutyCycle(0);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fe ff23 	bl	8001e04 <setPWM_DutyCycle>
						break;
 8002fbe:	bf00      	nop
					}
				}
			}
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <PlayerHit_E2>:

void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80f0 	bne.w	80031bc <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	f200 80eb 	bhi.w	80031bc <PlayerHit_E2+0x1f4>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <PlayerHit_E2+0x24>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	080030df 	.word	0x080030df
 8002ff4:	0800306f 	.word	0x0800306f
 8002ff8:	08003147 	.word	0x08003147
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	3b0f      	subs	r3, #15
 8003002:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	f0c0 80cf 	bcc.w	80031ae <PlayerHit_E2+0x1e6>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	429a      	cmp	r2, r3
 8003018:	f200 80c9 	bhi.w	80031ae <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	3b05      	subs	r3, #5
 8003026:	429a      	cmp	r2, r3
 8003028:	f0c0 80c1 	bcc.w	80031ae <PlayerHit_E2+0x1e6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	3305      	adds	r3, #5
 8003036:	429a      	cmp	r2, r3
 8003038:	f200 80b9 	bhi.w	80031ae <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2201      	movs	r2, #1
 800304a:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80a8 	bne.w	80031ae <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 800306c:	e09f      	b.n	80031ae <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	330f      	adds	r3, #15
 8003074:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	f0c0 8098 	bcc.w	80031b2 <PlayerHit_E2+0x1ea>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	f200 8092 	bhi.w	80031b2 <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	3b05      	subs	r3, #5
 8003098:	429a      	cmp	r2, r3
 800309a:	f0c0 808a 	bcc.w	80031b2 <PlayerHit_E2+0x1ea>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	3305      	adds	r3, #5
 80030a8:	429a      	cmp	r2, r3
 80030aa:	f200 8082 	bhi.w	80031b2 <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	1e5a      	subs	r2, r3, #1
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d171      	bne.n	80031b2 <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 80030dc:	e069      	b.n	80031b2 <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d362      	bcc.n	80031b6 <PlayerHit_E2+0x1ee>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d85d      	bhi.n	80031b6 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	3b0f      	subs	r3, #15
 8003104:	429a      	cmp	r2, r3
 8003106:	d356      	bcc.n	80031b6 <PlayerHit_E2+0x1ee>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	3314      	adds	r3, #20
 8003112:	429a      	cmp	r2, r3
 8003114:	d84f      	bhi.n	80031b6 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d13f      	bne.n	80031b6 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8003144:	e037      	b.n	80031b6 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3b14      	subs	r3, #20
 800314c:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d330      	bcc.n	80031ba <PlayerHit_E2+0x1f2>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	429a      	cmp	r2, r3
 8003160:	d82b      	bhi.n	80031ba <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	3b0f      	subs	r3, #15
 800316c:	429a      	cmp	r2, r3
 800316e:	d324      	bcc.n	80031ba <PlayerHit_E2+0x1f2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	3314      	adds	r3, #20
 800317a:	429a      	cmp	r2, r3
 800317c:	d81d      	bhi.n	80031ba <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 80031ac:	e005      	b.n	80031ba <PlayerHit_E2+0x1f2>
			break;
 80031ae:	bf00      	nop
 80031b0:	e004      	b.n	80031bc <PlayerHit_E2+0x1f4>
				break;
 80031b2:	bf00      	nop
 80031b4:	e002      	b.n	80031bc <PlayerHit_E2+0x1f4>
				break;
 80031b6:	bf00      	nop
 80031b8:	e000      	b.n	80031bc <PlayerHit_E2+0x1f4>
							break;
 80031ba:	bf00      	nop
						}
		}
	}
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <initEnemy3>:

/* Funciones Enemigo 3 -------------------------------------------------*/
void initEnemy3(enemy_type3* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health, player* player) {
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	601a      	str	r2, [r3, #0]
    enemy->y_eye=startY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]
    enemy->y = startY+20;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f103 0214 	add.w	r2, r3, #20
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	60da      	str	r2, [r3, #12]
    enemy->height = height;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	611a      	str	r2, [r3, #16]
    enemy->speed=5;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2205      	movs	r2, #5
 80031fc:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->Place=0;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	64da      	str	r2, [r3, #76]	@ 0x4c
    enemy->delay=0;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	651a      	str	r2, [r3, #80]	@ 0x50
    enemy->delay_init=0;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54

    // Inicializar la vida y el estado
    enemy->health = health;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
    enemy->isAlive = 0;  // El enemigo comienza vivo
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationFire=0;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationEye=0;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->isMove=0;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	649a      	str	r2, [r3, #72]	@ 0x48

    //Limites
    enemy->limitwidth=player->limitWidth;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34
    enemy->limitwidth_i=player->limitWidth_i;
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->limitheight_i=18;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2212      	movs	r2, #18
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
    enemy->limitheight=220;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22dc      	movs	r2, #220	@ 0xdc
 800324c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	0000      	movs	r0, r0
 800325c:	0000      	movs	r0, r0
	...

08003260 <E3_Eye>:

void E3_Eye(enemy_type3* enemy){
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af06      	add	r7, sp, #24
 8003266:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	2b00      	cmp	r3, #0
 800326e:	dd55      	ble.n	800331c <E3_Eye+0xbc>
		if (enemy->isMove==0){
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003274:	2b00      	cmp	r3, #0
 8003276:	d160      	bne.n	800333a <E3_Eye+0xda>
			enemy->y=enemy->y_eye+20;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f103 0214 	add.w	r2, r3, #20
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]
			int variableEye=enemy->animationEye;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800328a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328e:	ee17 3a90 	vmov	r3, s15
 8003292:	60fb      	str	r3, [r7, #12]
			if (variableEye<7){
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b06      	cmp	r3, #6
 8003298:	dc29      	bgt.n	80032ee <E3_Eye+0x8e>
				LCD_Sprite(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, E3_Eye16x17_7, 7, variableEye, 0, 0);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3b08      	subs	r3, #8
 80032a0:	4618      	mov	r0, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	3b08      	subs	r3, #8
 80032a8:	4619      	mov	r1, r3
 80032aa:	2300      	movs	r3, #0
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9303      	str	r3, [sp, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	2307      	movs	r3, #7
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <E3_Eye+0xf0>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2311      	movs	r3, #17
 80032c0:	2210      	movs	r2, #16
 80032c2:	f7fe fc29 	bl	8001b18 <LCD_Sprite>
				enemy->animationEye+=0.1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f95c 	bl	8000588 <__aeabi_f2d>
 80032d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8003348 <E3_Eye+0xe8>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fc fff9 	bl	80002cc <__adddf3>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7fd f9a9 	bl	8000638 <__aeabi_d2f>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	} else{
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
	}
}
 80032ec:	e025      	b.n	800333a <E3_Eye+0xda>
				FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1a3 0008 	sub.w	r0, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f1a3 0108 	sub.w	r1, r3, #8
 80032fe:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2311      	movs	r3, #17
 8003306:	2210      	movs	r2, #16
 8003308:	f7fe fb56 	bl	80019b8 <FillRect>
				enemy->isMove=1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationFire=0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800331a:	e00e      	b.n	800333a <E3_Eye+0xda>
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1a3 0008 	sub.w	r0, r3, #8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f1a3 0108 	sub.w	r1, r3, #8
 800332c:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2311      	movs	r3, #17
 8003334:	2210      	movs	r2, #16
 8003336:	f7fe fb3f 	bl	80019b8 <FillRect>
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	f3af 8000 	nop.w
 8003348:	9999999a 	.word	0x9999999a
 800334c:	3fb99999 	.word	0x3fb99999
 8003350:	20000804 	.word	0x20000804

08003354 <E3_EyeS>:

void E3_EyeS(enemy_type3* enemy){
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	2b00      	cmp	r3, #0
 8003362:	dd51      	ble.n	8003408 <E3_EyeS+0xb4>
		if (enemy->isMove==0){
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003368:	2b00      	cmp	r3, #0
 800336a:	d14d      	bne.n	8003408 <E3_EyeS+0xb4>
			int variableEyeS=enemy->animationEye;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003376:	ee17 3a90 	vmov	r3, s15
 800337a:	60fb      	str	r3, [r7, #12]
			if (variableEyeS<7){
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	dc42      	bgt.n	8003408 <E3_EyeS+0xb4>
				switch (variableEyeS){
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3b01      	subs	r3, #1
 8003386:	2b05      	cmp	r3, #5
 8003388:	d83e      	bhi.n	8003408 <E3_EyeS+0xb4>
 800338a:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <E3_EyeS+0x3c>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033a9 	.word	0x080033a9
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c9 	.word	0x080033c9
 800339c:	080033d9 	.word	0x080033d9
 80033a0:	080033e9 	.word	0x080033e9
 80033a4:	080033f9 	.word	0x080033f9
				case 1:
					setPWM_Frequency(6500); // Frecuencia de 1 kHz
 80033a8:	f641 1064 	movw	r0, #6500	@ 0x1964
 80033ac:	f7fe fcfc 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);   // Duty cycle al 50%
 80033b0:	2032      	movs	r0, #50	@ 0x32
 80033b2:	f7fe fd27 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80033b6:	e027      	b.n	8003408 <E3_EyeS+0xb4>
				case 2:
					setPWM_Frequency(45000); // Frecuencia de 1 kHz
 80033b8:	f64a 70c8 	movw	r0, #45000	@ 0xafc8
 80033bc:	f7fe fcf4 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);   // Duty cycle al 50%
 80033c0:	2032      	movs	r0, #50	@ 0x32
 80033c2:	f7fe fd1f 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80033c6:	e01f      	b.n	8003408 <E3_EyeS+0xb4>
				case 3:
					setPWM_Frequency(3000); // Frecuencia de 1 kHz
 80033c8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80033cc:	f7fe fcec 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);   // Duty cycle al 50%
 80033d0:	2032      	movs	r0, #50	@ 0x32
 80033d2:	f7fe fd17 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80033d6:	e017      	b.n	8003408 <E3_EyeS+0xb4>
				case 4:
					setPWM_Frequency(2000); // Frecuencia de 1 kHz
 80033d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80033dc:	f7fe fce4 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);   // Duty cycle al 50%
 80033e0:	2032      	movs	r0, #50	@ 0x32
 80033e2:	f7fe fd0f 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80033e6:	e00f      	b.n	8003408 <E3_EyeS+0xb4>
				case 5:
					setPWM_Frequency(1000); // Frecuencia de 1 kHz
 80033e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033ec:	f7fe fcdc 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(50);   // Duty cycle al 50%
 80033f0:	2032      	movs	r0, #50	@ 0x32
 80033f2:	f7fe fd07 	bl	8001e04 <setPWM_DutyCycle>
					break;
 80033f6:	e007      	b.n	8003408 <E3_EyeS+0xb4>
				case 6:
					setPWM_Frequency(10000); // Frecuencia de 1 kHz
 80033f8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80033fc:	f7fe fcd4 	bl	8001da8 <setPWM_Frequency>
					setPWM_DutyCycle(0);   // Duty cycle al 50%
 8003400:	2000      	movs	r0, #0
 8003402:	f7fe fcff 	bl	8001e04 <setPWM_DutyCycle>
					break;
 8003406:	bf00      	nop
				}
			}
		}
	}
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <E3_FireMove>:

void E3_FireMove(enemy_type3* enemy,player* player){
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b08b      	sub	sp, #44	@ 0x2c
 8003414:	af06      	add	r7, sp, #24
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	if (enemy->health>0){
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	2b00      	cmp	r3, #0
 8003420:	f340 8102 	ble.w	8003628 <E3_FireMove+0x218>
		if (enemy->isMove==1){
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003428:	2b01      	cmp	r3, #1
 800342a:	f040 80fd 	bne.w	8003628 <E3_FireMove+0x218>
			int FutureY=enemy->y+enemy->speed;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
			if (FutureY>=220){
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2bdb      	cmp	r3, #219	@ 0xdb
 800343e:	dd23      	ble.n	8003488 <E3_FireMove+0x78>
				enemy->isMove=0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationEye=0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	62da      	str	r2, [r3, #44]	@ 0x2c
				enemy->health-=1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
				enemy->Place+=1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	64da      	str	r2, [r3, #76]	@ 0x4c
				enemy->delay=0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	651a      	str	r2, [r3, #80]	@ 0x50
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1a3 0008 	sub.w	r0, r3, #8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f1a3 0108 	sub.w	r1, r3, #8
 8003478:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2310      	movs	r3, #16
 8003480:	2210      	movs	r2, #16
 8003482:	f7fe fa99 	bl	80019b8 <FillRect>
				}
			}
		}

	}
}
 8003486:	e0cf      	b.n	8003628 <E3_FireMove+0x218>
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1a3 0008 	sub.w	r0, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f1a3 0108 	sub.w	r1, r3, #8
 8003498:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2310      	movs	r3, #16
 80034a0:	2210      	movs	r2, #16
 80034a2:	f7fe fa89 	bl	80019b8 <FillRect>
				int animationFire=enemy->animationFire;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80034ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034b0:	ee17 3a90 	vmov	r3, s15
 80034b4:	60bb      	str	r3, [r7, #8]
				enemy->y=FutureY;
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	605a      	str	r2, [r3, #4]
				LCD_Sprite(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, E3_Fire16x16_4, 4, animationFire, 0, 0);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3b08      	subs	r3, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	3b08      	subs	r3, #8
 80034ca:	4619      	mov	r1, r3
 80034cc:	2300      	movs	r3, #0
 80034ce:	9304      	str	r3, [sp, #16]
 80034d0:	2300      	movs	r3, #0
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	2304      	movs	r3, #4
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	4b54      	ldr	r3, [pc, #336]	@ (8003630 <E3_FireMove+0x220>)
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2310      	movs	r3, #16
 80034e2:	2210      	movs	r2, #16
 80034e4:	f7fe fb18 	bl	8001b18 <LCD_Sprite>
				if (player->playerUp<=enemy->e1Down){ //player->playerUp>=enemy->e1Up &&
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f200 8099 	bhi.w	8003628 <E3_FireMove+0x218>
					if((enemy->e1Left >= player->playerLeft-4 && enemy->e1Left <= player->playerRight+4)||(enemy->e1Right >= player->playerLeft-4 && enemy->e1Right <= player->playerRight+4)||(enemy->x >= player->playerLeft-4 && enemy->x <= player->playerRight+4)){
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fe:	3b04      	subs	r3, #4
 8003500:	429a      	cmp	r2, r3
 8003502:	d306      	bcc.n	8003512 <E3_FireMove+0x102>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	3304      	adds	r3, #4
 800350e:	429a      	cmp	r2, r3
 8003510:	d91b      	bls.n	800354a <E3_FireMove+0x13a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	3b04      	subs	r3, #4
 800351c:	429a      	cmp	r2, r3
 800351e:	d306      	bcc.n	800352e <E3_FireMove+0x11e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	3304      	adds	r3, #4
 800352a:	429a      	cmp	r2, r3
 800352c:	d90d      	bls.n	800354a <E3_FireMove+0x13a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003536:	3b04      	subs	r3, #4
 8003538:	429a      	cmp	r2, r3
 800353a:	d375      	bcc.n	8003628 <E3_FireMove+0x218>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	3304      	adds	r3, #4
 8003546:	429a      	cmp	r2, r3
 8003548:	d86e      	bhi.n	8003628 <E3_FireMove+0x218>
						player->y=player->y+5;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	1d5a      	adds	r2, r3, #5
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
						player->direction=0;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	621a      	str	r2, [r3, #32]
						player->IsDamage=1;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2201      	movs	r2, #1
 800355e:	65da      	str	r2, [r3, #92]	@ 0x5c
						player->animationDamage=0;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	661a      	str	r2, [r3, #96]	@ 0x60
						player->life-=1;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	1e5a      	subs	r2, r3, #1
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	615a      	str	r2, [r3, #20]
						FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2)+1, player->width+1, player->height+1, 0xFE8B);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	1c58      	adds	r0, r3, #1
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	1c59      	adds	r1, r3, #1
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800359e:	9400      	str	r4, [sp, #0]
 80035a0:	f7fe fa0a 	bl	80019b8 <FillRect>
						if (player->life==0){
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11f      	bne.n	80035ec <E3_FireMove+0x1dc>
							player->isAlive=0;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
							player->animationDie=0;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	669a      	str	r2, [r3, #104]	@ 0x68
						FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2)+1, player->width+1, player->height+1, 0xFE8B);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	1c58      	adds	r0, r3, #1
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	3301      	adds	r3, #1
 80035e2:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80035e6:	9400      	str	r4, [sp, #0]
 80035e8:	f7fe f9e6 	bl	80019b8 <FillRect>
						FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1a3 0008 	sub.w	r0, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f1a3 0108 	sub.w	r1, r3, #8
 80035fc:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	2310      	movs	r3, #16
 8003604:	2210      	movs	r2, #16
 8003606:	f7fe f9d7 	bl	80019b8 <FillRect>
						enemy->isMove=0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	649a      	str	r2, [r3, #72]	@ 0x48
						enemy->animationEye=0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->Place+=1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	64da      	str	r2, [r3, #76]	@ 0x4c
						enemy->delay=0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bd90      	pop	{r4, r7, pc}
 8003630:	20000004 	.word	0x20000004
 8003634:	00000000 	.word	0x00000000

08003638 <E3_FireAnimation>:

void E3_FireAnimation(enemy_type3* enemy){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0 && enemy->isMove){
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	2b00      	cmp	r3, #0
 8003646:	dd25      	ble.n	8003694 <E3_FireAnimation+0x5c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364c:	2b00      	cmp	r3, #0
 800364e:	d021      	beq.n	8003694 <E3_FireAnimation+0x5c>
		enemy->animationFire+=0.2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff97 	bl	8000588 <__aeabi_f2d>
 800365a:	a311      	add	r3, pc, #68	@ (adr r3, 80036a0 <E3_FireAnimation+0x68>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fe34 	bl	80002cc <__adddf3>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fc ffe4 	bl	8000638 <__aeabi_d2f>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	@ 0x28
		if (enemy->animationFire>=4){
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800367c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	da00      	bge.n	800368c <E3_FireAnimation+0x54>
			enemy->animationFire=0;
		}
	}
}
 800368a:	e003      	b.n	8003694 <E3_FireAnimation+0x5c>
			enemy->animationFire=0;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	f3af 8000 	nop.w
 80036a0:	9999999a 	.word	0x9999999a
 80036a4:	3fc99999 	.word	0x3fc99999

080036a8 <E3_Hitbox>:

void E3_Hitbox(enemy_type3* enemy){
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24

		if (DrawHitbox==1){
 80036f0:	4b47      	ldr	r3, [pc, #284]	@ (8003810 <E3_Hitbox+0x168>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d113      	bne.n	8003720 <E3_Hitbox+0x78>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	1ad0      	subs	r0, r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	1ad1      	subs	r1, r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2400      	movs	r4, #0
 800371a:	9400      	str	r4, [sp, #0]
 800371c:	f7fe f924 	bl	8001968 <Rect>
	    }
	    if (DrawHitbox==2){
 8003720:	4b3b      	ldr	r3, [pc, #236]	@ (8003810 <E3_Hitbox+0x168>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d12b      	bne.n	8003780 <E3_Hitbox+0xd8>
	    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6998      	ldr	r0, [r3, #24]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2301      	movs	r3, #1
 8003738:	2201      	movs	r2, #1
 800373a:	f7fe f93d 	bl	80019b8 <FillRect>
	    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69d8      	ldr	r0, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2301      	movs	r3, #1
 800374e:	2201      	movs	r2, #1
 8003750:	f7fe f932 	bl	80019b8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a19      	ldr	r1, [r3, #32]
 800375c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2301      	movs	r3, #1
 8003764:	2201      	movs	r2, #1
 8003766:	f7fe f927 	bl	80019b8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003772:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2301      	movs	r3, #1
 800377a:	2201      	movs	r2, #1
 800377c:	f7fe f91c 	bl	80019b8 <FillRect>
	    }
	    if (DrawHitbox==3){
 8003780:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <E3_Hitbox+0x168>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d13f      	bne.n	8003808 <E3_Hitbox+0x160>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	1ad0      	subs	r0, r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	1ad1      	subs	r1, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2400      	movs	r4, #0
 80037aa:	9400      	str	r4, [sp, #0]
 80037ac:	f7fe f8dc 	bl	8001968 <Rect>
			FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6998      	ldr	r0, [r3, #24]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2301      	movs	r3, #1
 80037c0:	2201      	movs	r2, #1
 80037c2:	f7fe f8f9 	bl	80019b8 <FillRect>
			FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69d8      	ldr	r0, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2301      	movs	r3, #1
 80037d6:	2201      	movs	r2, #1
 80037d8:	f7fe f8ee 	bl	80019b8 <FillRect>
			FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a19      	ldr	r1, [r3, #32]
 80037e4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2301      	movs	r3, #1
 80037ec:	2201      	movs	r2, #1
 80037ee:	f7fe f8e3 	bl	80019b8 <FillRect>
			FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037fa:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2301      	movs	r3, #1
 8003802:	2201      	movs	r2, #1
 8003804:	f7fe f8d8 	bl	80019b8 <FillRect>
	        }
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	2001cb27 	.word	0x2001cb27

08003814 <E3_MoveX>:

void E3_MoveX(enemy_type3* enemy){
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	if (enemy->delay==0){
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003820:	2b00      	cmp	r3, #0
 8003822:	d167      	bne.n	80038f4 <E3_MoveX+0xe0>
	int FutureX;
	enemy->delay=1;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	651a      	str	r2, [r3, #80]	@ 0x50
	switch (enemy->Place){
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382e:	2b04      	cmp	r3, #4
 8003830:	d860      	bhi.n	80038f4 <E3_MoveX+0xe0>
 8003832:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <E3_MoveX+0x24>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800384d 	.word	0x0800384d
 800383c:	08003875 	.word	0x08003875
 8003840:	0800389d 	.word	0x0800389d
 8003844:	080038c5 	.word	0x080038c5
 8003848:	080038ed 	.word	0x080038ed
		case 0:
			FutureX=enemy->x+40;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3328      	adds	r3, #40	@ 0x28
 8003852:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	429a      	cmp	r2, r3
 800385c:	d806      	bhi.n	800386c <E3_MoveX+0x58>
				enemy->x=enemy->limitwidth_i+35;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 800386a:	e043      	b.n	80038f4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
			break;
 8003872:	e03f      	b.n	80038f4 <E3_MoveX+0xe0>

		case 1:
			FutureX=enemy->x-20;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3b14      	subs	r3, #20
 800387a:	60fb      	str	r3, [r7, #12]
			if (FutureX<=enemy->limitwidth_i){
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	429a      	cmp	r2, r3
 8003884:	d306      	bcc.n	8003894 <E3_MoveX+0x80>
				enemy->x=enemy->limitwidth-35;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388a:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8003892:	e02f      	b.n	80038f4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
			break;
 800389a:	e02b      	b.n	80038f4 <E3_MoveX+0xe0>
		case 2:
			FutureX=enemy->x+50;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3332      	adds	r3, #50	@ 0x32
 80038a2:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d806      	bhi.n	80038bc <E3_MoveX+0xa8>
				enemy->x=enemy->limitwidth_i+50;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80038ba:	e01b      	b.n	80038f4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
			break;
 80038c2:	e017      	b.n	80038f4 <E3_MoveX+0xe0>
		case 3:
					FutureX=enemy->x-50;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3b32      	subs	r3, #50	@ 0x32
 80038ca:	60fb      	str	r3, [r7, #12]
					if (FutureX<=enemy->limitwidth_i){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d306      	bcc.n	80038e4 <E3_MoveX+0xd0>
						enemy->x=enemy->limitwidth-35;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]

					} else{
						enemy->x=FutureX;
					}
					break;
 80038e2:	e007      	b.n	80038f4 <E3_MoveX+0xe0>
						enemy->x=FutureX;
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
					break;
 80038ea:	e003      	b.n	80038f4 <E3_MoveX+0xe0>
		case 4:
			enemy->Place=0;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
}
 80038f2:	e7ff      	b.n	80038f4 <E3_MoveX+0xe0>
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <initPlayer>:

/* Funciones Jugador ---------------------------------------------------*/
 void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af06      	add	r7, sp, #24
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	611a      	str	r2, [r3, #16]
    player->life = life;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2202      	movs	r2, #2
 8003942:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003954:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a27      	ldr	r2, [pc, #156]	@ (80039fc <initPlayer+0xfc>)
 8003960:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <initPlayer+0x100>)
 800396c:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003974:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+2, player->y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3b07      	subs	r3, #7
 8003988:	4618      	mov	r0, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	3b0f      	subs	r3, #15
 8003990:	4619      	mov	r1, r3
 8003992:	2300      	movs	r3, #0
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	2300      	movs	r3, #0
 8003998:	9303      	str	r3, [sp, #12]
 800399a:	2305      	movs	r3, #5
 800399c:	9302      	str	r3, [sp, #8]
 800399e:	2306      	movs	r3, #6
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <initPlayer+0x104>)
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2317      	movs	r3, #23
 80039a8:	2212      	movs	r2, #18
 80039aa:	f7fe f8b5 	bl	8001b18 <LCD_Sprite>
    //FillRect(player->x , player->y, 1, 1, 0x000000);

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	1ad2      	subs	r2, r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40e00000 	.word	0x40e00000
 8003a00:	40400000 	.word	0x40400000
 8003a04:	20007df4 	.word	0x20007df4

08003a08 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	@ 0x28
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d851      	bhi.n	8003abe <playerCanMove+0xb6>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <playerCanMove+0x18>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a4f 	.word	0x08003a4f
 8003a28:	08003a71 	.word	0x08003a71
 8003a2c:	08003a93 	.word	0x08003a93
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	1ad2      	subs	r2, r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b12      	cmp	r3, #18
 8003a48:	dc34      	bgt.n	8003ab4 <playerCanMove+0xac>
			return 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e094      	b.n	8003b78 <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d825      	bhi.n	8003ab8 <playerCanMove+0xb0>
			return 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e083      	b.n	8003b78 <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d816      	bhi.n	8003abc <playerCanMove+0xb4>
			return 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e072      	b.n	8003b78 <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d306      	bcc.n	8003abe <playerCanMove+0xb6>
			return 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e061      	b.n	8003b78 <playerCanMove+0x170>
		break;
 8003ab4:	bf00      	nop
 8003ab6:	e002      	b.n	8003abe <playerCanMove+0xb6>
		break;
 8003ab8:	bf00      	nop
 8003aba:	e000      	b.n	8003abe <playerCanMove+0xb6>
		break;
 8003abc:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d126      	bne.n	8003b20 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4828      	ldr	r0, [pc, #160]	@ (8003b80 <playerCanMove+0x178>)
 8003ade:	f7fe fc5f 	bl	80023a0 <ColisionPlayer_e1>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <playerCanMove+0xe4>
    	return 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e045      	b.n	8003b78 <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4823      	ldr	r0, [pc, #140]	@ (8003b84 <playerCanMove+0x17c>)
 8003af8:	f7fe fc52 	bl	80023a0 <ColisionPlayer_e1>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <playerCanMove+0xfe>
        	return 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e038      	b.n	8003b78 <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	481d      	ldr	r0, [pc, #116]	@ (8003b88 <playerCanMove+0x180>)
 8003b12:	f7fe fc45 	bl	80023a0 <ColisionPlayer_e1>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <playerCanMove+0x118>
        	return 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e02b      	b.n	8003b78 <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d126      	bne.n	8003b76 <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4816      	ldr	r0, [pc, #88]	@ (8003b8c <playerCanMove+0x184>)
 8003b34:	f7fe fc34 	bl	80023a0 <ColisionPlayer_e1>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <playerCanMove+0x13a>
       	return 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e01a      	b.n	8003b78 <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4810      	ldr	r0, [pc, #64]	@ (8003b90 <playerCanMove+0x188>)
 8003b4e:	f7fe fc27 	bl	80023a0 <ColisionPlayer_e1>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <playerCanMove+0x154>
           	return 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e00d      	b.n	8003b78 <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	480b      	ldr	r0, [pc, #44]	@ (8003b94 <playerCanMove+0x18c>)
 8003b68:	f7fe fc1a 	bl	80023a0 <ColisionPlayer_e1>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <playerCanMove+0x16e>
           	return 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	2001c8b4 	.word	0x2001c8b4
 8003b84:	2001c8e8 	.word	0x2001c8e8
 8003b88:	2001c91c 	.word	0x2001c91c
 8003b8c:	2001c950 	.word	0x2001c950
 8003b90:	2001c984 	.word	0x2001c984
 8003b94:	2001c9b8 	.word	0x2001c9b8

08003b98 <HitboxPlayer>:

void HitboxPlayer(player* player){
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 8003be0:	4b47      	ldr	r3, [pc, #284]	@ (8003d00 <HitboxPlayer+0x168>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d113      	bne.n	8003c10 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	1ad0      	subs	r0, r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	1ad1      	subs	r1, r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2400      	movs	r4, #0
 8003c0a:	9400      	str	r4, [sp, #0]
 8003c0c:	f7fd feac 	bl	8001968 <Rect>
        }
    if (DrawHitbox==2){
 8003c10:	4b3b      	ldr	r3, [pc, #236]	@ (8003d00 <HitboxPlayer+0x168>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d12b      	bne.n	8003c70 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2301      	movs	r3, #1
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f7fd fec5 	bl	80019b8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f7fd feba 	bl	80019b8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003c4c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2301      	movs	r3, #1
 8003c54:	2201      	movs	r2, #1
 8003c56:	f7fd feaf 	bl	80019b8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c62:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f7fd fea4 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 8003c70:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <HitboxPlayer+0x168>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d13f      	bne.n	8003cf8 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	1ad0      	subs	r0, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	1ad1      	subs	r1, r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2400      	movs	r4, #0
 8003c9a:	9400      	str	r4, [sp, #0]
 8003c9c:	f7fd fe64 	bl	8001968 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f7fd fe81 	bl	80019b8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f7fd fe76 	bl	80019b8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003cd4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f7fd fe6b 	bl	80019b8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003cea:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f7fd fe60 	bl	80019b8 <FillRect>

        }
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	2001cb27 	.word	0x2001cb27

08003d04 <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	f040 80d0 	bne.w	8003eb8 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	f200 80cb 	bhi.w	8003eb8 <PlayerHit+0x1b4>
 8003d22:	a201      	add	r2, pc, #4	@ (adr r2, 8003d28 <PlayerHit+0x24>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003df7 	.word	0x08003df7
 8003d30:	08003d9d 	.word	0x08003d9d
 8003d34:	08003e51 	.word	0x08003e51
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	3b0f      	subs	r3, #15
 8003d3e:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	f0c0 80af 	bcc.w	8003eaa <PlayerHit+0x1a6>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	f200 80a9 	bhi.w	8003eaa <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	3b05      	subs	r3, #5
 8003d62:	429a      	cmp	r2, r3
 8003d64:	f0c0 80a1 	bcc.w	8003eaa <PlayerHit+0x1a6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	3305      	adds	r3, #5
 8003d72:	429a      	cmp	r2, r3
 8003d74:	f200 8099 	bhi.w	8003eaa <PlayerHit+0x1a6>
						enemy->health -= 1;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 808f 	bne.w	8003eaa <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 8003d9a:	e086      	b.n	8003eaa <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	330f      	adds	r3, #15
 8003da2:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d37f      	bcc.n	8003eae <PlayerHit+0x1aa>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d87a      	bhi.n	8003eae <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	3b05      	subs	r3, #5
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d373      	bcc.n	8003eae <PlayerHit+0x1aa>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	3305      	adds	r3, #5
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d86c      	bhi.n	8003eae <PlayerHit+0x1aa>
						enemy->health -= 1;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d163      	bne.n	8003eae <PlayerHit+0x1aa>
							enemy->isAlive=0;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003df4:	e05b      	b.n	8003eae <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d354      	bcc.n	8003eb2 <PlayerHit+0x1ae>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d84f      	bhi.n	8003eb2 <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	3b0f      	subs	r3, #15
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d348      	bcc.n	8003eb2 <PlayerHit+0x1ae>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d841      	bhi.n	8003eb2 <PlayerHit+0x1ae>
						enemy->health -= 1;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	1e5a      	subs	r2, r3, #1
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d138      	bne.n	8003eb2 <PlayerHit+0x1ae>
							enemy->isAlive=0;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003e4e:	e030      	b.n	8003eb2 <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3b14      	subs	r3, #20
 8003e56:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d329      	bcc.n	8003eb6 <PlayerHit+0x1b2>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d824      	bhi.n	8003eb6 <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	3b0f      	subs	r3, #15
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d31d      	bcc.n	8003eb6 <PlayerHit+0x1b2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	3314      	adds	r3, #20
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d816      	bhi.n	8003eb6 <PlayerHit+0x1b2>
									enemy->health -= 1;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <PlayerHit+0x1b2>
										enemy->isAlive=0;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8003ea8:	e005      	b.n	8003eb6 <PlayerHit+0x1b2>
			break;
 8003eaa:	bf00      	nop
 8003eac:	e004      	b.n	8003eb8 <PlayerHit+0x1b4>
				break;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <PlayerHit+0x1b4>
				break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <PlayerHit+0x1b4>
							break;
 8003eb6:	bf00      	nop
						}
		}
	}
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <PlayerAnimation>:

void PlayerAnimation(player* player){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af06      	add	r7, sp, #24
 8003eca:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d16f      	bne.n	8003fb4 <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d117      	bne.n	8003f0c <PlayerAnimation+0x48>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3b08      	subs	r3, #8
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	3b0d      	subs	r3, #13
 8003eea:	4619      	mov	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9303      	str	r3, [sp, #12]
 8003efa:	9202      	str	r2, [sp, #8]
 8003efc:	230a      	movs	r3, #10
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	4b2e      	ldr	r3, [pc, #184]	@ (8003fbc <PlayerAnimation+0xf8>)
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	231a      	movs	r3, #26
 8003f06:	2212      	movs	r2, #18
 8003f08:	f7fd fe06 	bl	8001b18 <LCD_Sprite>
		}
		if (player->direction==1){
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d117      	bne.n	8003f44 <PlayerAnimation+0x80>
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3b0a      	subs	r3, #10
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	3b0b      	subs	r3, #11
 8003f22:	4619      	mov	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	9202      	str	r2, [sp, #8]
 8003f34:	230a      	movs	r3, #10
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	4b21      	ldr	r3, [pc, #132]	@ (8003fc0 <PlayerAnimation+0xfc>)
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2317      	movs	r3, #23
 8003f3e:	2216      	movs	r2, #22
 8003f40:	f7fd fdea 	bl	8001b18 <LCD_Sprite>
		}
		if (player->direction==2){
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d117      	bne.n	8003f7c <PlayerAnimation+0xb8>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3b08      	subs	r3, #8
 8003f52:	4618      	mov	r0, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	3b0b      	subs	r3, #11
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f60:	461a      	mov	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	9202      	str	r2, [sp, #8]
 8003f6c:	230a      	movs	r3, #10
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	4b14      	ldr	r3, [pc, #80]	@ (8003fc4 <PlayerAnimation+0x100>)
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2318      	movs	r3, #24
 8003f76:	2212      	movs	r2, #18
 8003f78:	f7fd fdce 	bl	8001b18 <LCD_Sprite>
			}
		if (player->direction==3){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d117      	bne.n	8003fb4 <PlayerAnimation+0xf0>

			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3b0a      	subs	r3, #10
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	3b0b      	subs	r3, #11
 8003f92:	4619      	mov	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	9202      	str	r2, [sp, #8]
 8003fa4:	230a      	movs	r3, #10
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <PlayerAnimation+0xfc>)
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2317      	movs	r3, #23
 8003fae:	2216      	movs	r2, #22
 8003fb0:	f7fd fdb2 	bl	8001b18 <LCD_Sprite>
			}
	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20012428 	.word	0x20012428
 8003fc0:	2000fca0 	.word	0x2000fca0
 8003fc4:	200148b8 	.word	0x200148b8

08003fc8 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	@ 0x28
 8003fcc:	af06      	add	r7, sp, #24
 8003fce:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fda:	ee17 3a90 	vmov	r3, s15
 8003fde:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 8082 	bne.w	80040ee <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	dc7b      	bgt.n	80040e8 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3b08      	subs	r3, #8
 8003ffe:	4618      	mov	r0, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	3b0b      	subs	r3, #11
 8004006:	4619      	mov	r1, r3
 8004008:	2300      	movs	r3, #0
 800400a:	9304      	str	r3, [sp, #16]
 800400c:	2300      	movs	r3, #0
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	2306      	movs	r3, #6
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <PlayerAttackAnimation+0x138>)
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2316      	movs	r3, #22
 800401e:	2212      	movs	r2, #18
 8004020:	f7fd fd7a 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==1){
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d115      	bne.n	8004058 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);			}
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3b09      	subs	r3, #9
 8004032:	4618      	mov	r0, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	3b0b      	subs	r3, #11
 800403a:	4619      	mov	r1, r3
 800403c:	2300      	movs	r3, #0
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	2301      	movs	r3, #1
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	9302      	str	r3, [sp, #8]
 8004048:	2306      	movs	r3, #6
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	4b2d      	ldr	r3, [pc, #180]	@ (8004104 <PlayerAttackAnimation+0x13c>)
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2316      	movs	r3, #22
 8004052:	2214      	movs	r2, #20
 8004054:	f7fd fd60 	bl	8001b18 <LCD_Sprite>
			if (player->direction==2){
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d115      	bne.n	800408c <PlayerAttackAnimation+0xc4>
				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3b08      	subs	r3, #8
 8004066:	4618      	mov	r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	3b0b      	subs	r3, #11
 800406e:	4619      	mov	r1, r3
 8004070:	2300      	movs	r3, #0
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	2300      	movs	r3, #0
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	9302      	str	r3, [sp, #8]
 800407c:	2306      	movs	r3, #6
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <PlayerAttackAnimation+0x140>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2317      	movs	r3, #23
 8004086:	2212      	movs	r2, #18
 8004088:	f7fd fd46 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==3){
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d115      	bne.n	80040c0 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3b09      	subs	r3, #9
 800409a:	4618      	mov	r0, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	3b0b      	subs	r3, #11
 80040a2:	4619      	mov	r1, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	2300      	movs	r3, #0
 80040aa:	9303      	str	r3, [sp, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	2306      	movs	r3, #6
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <PlayerAttackAnimation+0x13c>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2316      	movs	r3, #22
 80040ba:	2214      	movs	r2, #20
 80040bc:	f7fd fd2c 	bl	8001b18 <LCD_Sprite>
				}
			player->animationAttack+=0.2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fa5f 	bl	8000588 <__aeabi_f2d>
 80040ca:	a30b      	add	r3, pc, #44	@ (adr r3, 80040f8 <PlayerAttackAnimation+0x130>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f7fc f8fc 	bl	80002cc <__adddf3>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	f7fc faac 	bl	8000638 <__aeabi_d2f>
 80040e0:	4602      	mov	r2, r0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 80040e6:	e002      	b.n	80040ee <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	9999999a 	.word	0x9999999a
 80040fc:	3fc99999 	.word	0x3fc99999
 8004100:	2000a5fc 	.word	0x2000a5fc
 8004104:	2000915c 	.word	0x2000915c
 8004108:	20007df4 	.word	0x20007df4

0800410c <PlayerAttackSound>:

void PlayerAttackSound(player* player){
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	int variableAnimationAttackS=player->animationAttack;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800411a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800411e:	ee17 3a90 	vmov	r3, s15
 8004122:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d145      	bne.n	80041b8 <PlayerAttackSound+0xac>
		if (variableAnimationAttackS<6){
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b05      	cmp	r3, #5
 8004130:	dc42      	bgt.n	80041b8 <PlayerAttackSound+0xac>
			switch (variableAnimationAttackS){
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d83f      	bhi.n	80041b8 <PlayerAttackSound+0xac>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <PlayerAttackSound+0x34>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004159 	.word	0x08004159
 8004144:	08004169 	.word	0x08004169
 8004148:	08004179 	.word	0x08004179
 800414c:	08004189 	.word	0x08004189
 8004150:	08004199 	.word	0x08004199
 8004154:	080041a9 	.word	0x080041a9
			case 0:
		        setPWM_Frequency(1000); // Frecuencia de 1 kHz
 8004158:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800415c:	f7fd fe24 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004160:	2032      	movs	r0, #50	@ 0x32
 8004162:	f7fd fe4f 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004166:	e027      	b.n	80041b8 <PlayerAttackSound+0xac>
			case 1:
		        setPWM_Frequency(2000); // Frecuencia de 1 kHz
 8004168:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800416c:	f7fd fe1c 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004170:	2032      	movs	r0, #50	@ 0x32
 8004172:	f7fd fe47 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004176:	e01f      	b.n	80041b8 <PlayerAttackSound+0xac>
			case 2:
		        setPWM_Frequency(3000); // Frecuencia de 1 kHz
 8004178:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800417c:	f7fd fe14 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004180:	2032      	movs	r0, #50	@ 0x32
 8004182:	f7fd fe3f 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004186:	e017      	b.n	80041b8 <PlayerAttackSound+0xac>
			case 3:
		        setPWM_Frequency(4000); // Frecuencia de 1 kHz
 8004188:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800418c:	f7fd fe0c 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004190:	2032      	movs	r0, #50	@ 0x32
 8004192:	f7fd fe37 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004196:	e00f      	b.n	80041b8 <PlayerAttackSound+0xac>
			case 4:
		        setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8004198:	f241 3088 	movw	r0, #5000	@ 0x1388
 800419c:	f7fd fe04 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 80041a0:	2032      	movs	r0, #50	@ 0x32
 80041a2:	f7fd fe2f 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80041a6:	e007      	b.n	80041b8 <PlayerAttackSound+0xac>
			case 5:
		        setPWM_Frequency(6000); // Frecuencia de 1 kHz
 80041a8:	f241 7070 	movw	r0, #6000	@ 0x1770
 80041ac:	f7fd fdfc 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(0);   // Duty cycle al 50%
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7fd fe27 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80041b6:	bf00      	nop
			}

			}
	}
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	@ 0x28
 80041c4:	af06      	add	r7, sp, #24
 80041c6:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80041ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d2:	ee17 3a90 	vmov	r3, s15
 80041d6:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 8082 	bne.w	80042e6 <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	dc7b      	bgt.n	80042e0 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d115      	bne.n	800421c <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3b08      	subs	r3, #8
 80041f6:	4618      	mov	r0, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	3b0a      	subs	r3, #10
 80041fe:	4619      	mov	r1, r3
 8004200:	2300      	movs	r3, #0
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	2300      	movs	r3, #0
 8004206:	9303      	str	r3, [sp, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	9302      	str	r3, [sp, #8]
 800420c:	2303      	movs	r3, #3
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <PlayerDamageAnimation+0x138>)
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2314      	movs	r3, #20
 8004216:	2212      	movs	r2, #18
 8004218:	f7fd fc7e 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==1){
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d115      	bne.n	8004250 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3b09      	subs	r3, #9
 800422a:	4618      	mov	r0, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	3b0a      	subs	r3, #10
 8004232:	4619      	mov	r1, r3
 8004234:	2300      	movs	r3, #0
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	2301      	movs	r3, #1
 800423a:	9303      	str	r3, [sp, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	2303      	movs	r3, #3
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <PlayerDamageAnimation+0x13c>)
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2315      	movs	r3, #21
 800424a:	2214      	movs	r2, #20
 800424c:	f7fd fc64 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==2){
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d115      	bne.n	8004284 <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3b09      	subs	r3, #9
 800425e:	4618      	mov	r0, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	3b0a      	subs	r3, #10
 8004266:	4619      	mov	r1, r3
 8004268:	2300      	movs	r3, #0
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	2300      	movs	r3, #0
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	9302      	str	r3, [sp, #8]
 8004274:	2303      	movs	r3, #3
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <PlayerDamageAnimation+0x140>)
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2315      	movs	r3, #21
 800427e:	2214      	movs	r2, #20
 8004280:	f7fd fc4a 	bl	8001b18 <LCD_Sprite>
					}
			if (player->direction==3){
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d115      	bne.n	80042b8 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3b09      	subs	r3, #9
 8004292:	4618      	mov	r0, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	3b0a      	subs	r3, #10
 800429a:	4619      	mov	r1, r3
 800429c:	2300      	movs	r3, #0
 800429e:	9304      	str	r3, [sp, #16]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	2303      	movs	r3, #3
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <PlayerDamageAnimation+0x13c>)
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2315      	movs	r3, #21
 80042b2:	2214      	movs	r2, #20
 80042b4:	f7fd fc30 	bl	8001b18 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f963 	bl	8000588 <__aeabi_f2d>
 80042c2:	a30b      	add	r3, pc, #44	@ (adr r3, 80042f0 <PlayerDamageAnimation+0x130>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fc f800 	bl	80002cc <__adddf3>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7fc f9b0 	bl	8000638 <__aeabi_d2f>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 80042de:	e002      	b.n	80042e6 <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	9999999a 	.word	0x9999999a
 80042f4:	3fc99999 	.word	0x3fc99999
 80042f8:	20004fd4 	.word	0x20004fd4
 80042fc:	20005844 	.word	0x20005844
 8004300:	2000621c 	.word	0x2000621c

08004304 <PlayerDamageSound>:

void PlayerDamageSound(player* player){
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	int variableAnimationDamageS=player->animationDamage;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004316:	ee17 3a90 	vmov	r3, s15
 800431a:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d127      	bne.n	8004374 <PlayerDamageSound+0x70>
		if (variableAnimationDamageS<3){
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b02      	cmp	r3, #2
 8004328:	dc24      	bgt.n	8004374 <PlayerDamageSound+0x70>
			switch (variableAnimationDamageS){
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d019      	beq.n	8004364 <PlayerDamageSound+0x60>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b02      	cmp	r3, #2
 8004334:	dc1e      	bgt.n	8004374 <PlayerDamageSound+0x70>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <PlayerDamageSound+0x40>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d008      	beq.n	8004354 <PlayerDamageSound+0x50>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
				break;
			}
			}
		}
}
 8004342:	e017      	b.n	8004374 <PlayerDamageSound+0x70>
				setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8004344:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004348:	f7fd fd2e 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 800434c:	2032      	movs	r0, #50	@ 0x32
 800434e:	f7fd fd59 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004352:	e00f      	b.n	8004374 <PlayerDamageSound+0x70>
				setPWM_Frequency(8000); // Frecuencia de 1 kHz
 8004354:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8004358:	f7fd fd26 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 800435c:	2032      	movs	r0, #50	@ 0x32
 800435e:	f7fd fd51 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004362:	e007      	b.n	8004374 <PlayerDamageSound+0x70>
				setPWM_Frequency(1000); // Frecuencia de 1 kHz
 8004364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004368:	f7fd fd1e 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
 800436c:	2000      	movs	r0, #0
 800436e:	f7fd fd49 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004372:	bf00      	nop
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	0000      	movs	r0, r0
	...

08004380 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b08b      	sub	sp, #44	@ 0x2c
 8004384:	af06      	add	r7, sp, #24
 8004386:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800438e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004392:	ee17 3a90 	vmov	r3, s15
 8004396:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d143      	bne.n	8004428 <PlayerDieAnimation+0xa8>
		if (variableAnimationDie<4){
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	dc40      	bgt.n	8004428 <PlayerDieAnimation+0xa8>
			FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2), player->width+1, player->height+1, 0xFE8B);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	1c58      	adds	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	1ad1      	subs	r1, r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80043d0:	9400      	str	r4, [sp, #0]
 80043d2:	f7fd faf1 	bl	80019b8 <FillRect>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3b0b      	subs	r3, #11
 80043dc:	4618      	mov	r0, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	3b0c      	subs	r3, #12
 80043e4:	4619      	mov	r1, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9303      	str	r3, [sp, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	9302      	str	r3, [sp, #8]
 80043f2:	2304      	movs	r3, #4
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <PlayerDieAnimation+0xb8>)
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2318      	movs	r3, #24
 80043fc:	2218      	movs	r2, #24
 80043fe:	f7fd fb8b 	bl	8001b18 <LCD_Sprite>
			player->animationDie+=0.2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc f8be 	bl	8000588 <__aeabi_f2d>
 800440c:	a308      	add	r3, pc, #32	@ (adr r3, 8004430 <PlayerDieAnimation+0xb0>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f7fb ff5b 	bl	80002cc <__adddf3>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f7fc f90b 	bl	8000638 <__aeabi_d2f>
 8004422:	4602      	mov	r2, r0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	9999999a 	.word	0x9999999a
 8004434:	3fc99999 	.word	0x3fc99999
 8004438:	20006bf4 	.word	0x20006bf4

0800443c <PlayerDieSound>:

void PlayerDieSound(player* player){
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	int variableAnimationDieS=player->animationDie;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800444a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800444e:	ee17 3a90 	vmov	r3, s15
 8004452:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d131      	bne.n	80044c0 <PlayerDieSound+0x84>
		if (variableAnimationDieS<4){
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b03      	cmp	r3, #3
 8004460:	dc2e      	bgt.n	80044c0 <PlayerDieSound+0x84>
			switch (variableAnimationDieS){
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d82b      	bhi.n	80044c0 <PlayerDieSound+0x84>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <PlayerDieSound+0x34>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	08004491 	.word	0x08004491
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044b1 	.word	0x080044b1
			case 0:
				setPWM_Frequency(10000); // Frecuencia de 1 kHz
 8004480:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004484:	f7fd fc90 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004488:	2032      	movs	r0, #50	@ 0x32
 800448a:	f7fd fcbb 	bl	8001e04 <setPWM_DutyCycle>
				break;
 800448e:	e017      	b.n	80044c0 <PlayerDieSound+0x84>
			case 1:
				setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8004490:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004494:	f7fd fc88 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004498:	2032      	movs	r0, #50	@ 0x32
 800449a:	f7fd fcb3 	bl	8001e04 <setPWM_DutyCycle>
				break;
 800449e:	e00f      	b.n	80044c0 <PlayerDieSound+0x84>
			case 2:
				setPWM_Frequency(10000); // Frecuencia de 1 kHz
 80044a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80044a4:	f7fd fc80 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 80044a8:	2032      	movs	r0, #50	@ 0x32
 80044aa:	f7fd fcab 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80044ae:	e007      	b.n	80044c0 <PlayerDieSound+0x84>
			case 3:
				setPWM_Frequency(1000); // Frecuencia de 1 kHz
 80044b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044b4:	f7fd fc78 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
 80044b8:	2000      	movs	r0, #0
 80044ba:	f7fd fca3 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80044be:	bf00      	nop

			}
			}
		}
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <initLevelSolo>:

void initLevelSolo(void){
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af06      	add	r7, sp, #24
	FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80044ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004604 <initLevelSolo+0x13c>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004604 <initLevelSolo+0x13c>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	1c58      	adds	r0, r3, #1
 80044dc:	4b49      	ldr	r3, [pc, #292]	@ (8004604 <initLevelSolo+0x13c>)
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b48      	ldr	r3, [pc, #288]	@ (8004604 <initLevelSolo+0x13c>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	4b46      	ldr	r3, [pc, #280]	@ (8004604 <initLevelSolo+0x13c>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	4b44      	ldr	r3, [pc, #272]	@ (8004604 <initLevelSolo+0x13c>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80044fa:	9400      	str	r4, [sp, #0]
 80044fc:	f7fd fa5c 	bl	80019b8 <FillRect>
	if (IniciarLevel==1){
 8004500:	4b41      	ldr	r3, [pc, #260]	@ (8004608 <initLevelSolo+0x140>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d178      	bne.n	80045fa <initLevelSolo+0x132>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004508:	2312      	movs	r3, #18
 800450a:	9305      	str	r3, [sp, #20]
 800450c:	23dc      	movs	r3, #220	@ 0xdc
 800450e:	9304      	str	r3, [sp, #16]
 8004510:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004514:	9303      	str	r3, [sp, #12]
 8004516:	2303      	movs	r3, #3
 8004518:	9302      	str	r3, [sp, #8]
 800451a:	2305      	movs	r3, #5
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	231e      	movs	r3, #30
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2316      	movs	r3, #22
 8004524:	22c8      	movs	r2, #200	@ 0xc8
 8004526:	21a0      	movs	r1, #160	@ 0xa0
 8004528:	4836      	ldr	r0, [pc, #216]	@ (8004604 <initLevelSolo+0x13c>)
 800452a:	f7ff f9e9 	bl	8003900 <initPlayer>
		initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 800452e:	2312      	movs	r3, #18
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	23dc      	movs	r3, #220	@ 0xdc
 8004534:	9304      	str	r3, [sp, #16]
 8004536:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	2303      	movs	r3, #3
 800453e:	9302      	str	r3, [sp, #8]
 8004540:	2305      	movs	r3, #5
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	231e      	movs	r3, #30
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2316      	movs	r3, #22
 800454a:	22c8      	movs	r2, #200	@ 0xc8
 800454c:	21a0      	movs	r1, #160	@ 0xa0
 800454e:	482f      	ldr	r0, [pc, #188]	@ (800460c <initLevelSolo+0x144>)
 8004550:	f7ff f9d6 	bl	8003900 <initPlayer>
		p1.PlayerNum=1;
 8004554:	4b2b      	ldr	r3, [pc, #172]	@ (8004604 <initLevelSolo+0x13c>)
 8004556:	2201      	movs	r2, #1
 8004558:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 800455a:	4b2c      	ldr	r3, [pc, #176]	@ (800460c <initLevelSolo+0x144>)
 800455c:	2202      	movs	r2, #2
 800455e:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.isAlive=0;
 8004560:	4b2a      	ldr	r3, [pc, #168]	@ (800460c <initLevelSolo+0x144>)
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]

		if (nivelActual1==NIVEL1){
 8004566:	4b2a      	ldr	r3, [pc, #168]	@ (8004610 <initLevelSolo+0x148>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11e      	bne.n	80045ae <initLevelSolo+0xe6>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8004570:	2303      	movs	r3, #3
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	2313      	movs	r3, #19
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2310      	movs	r3, #16
 800457a:	2250      	movs	r2, #80	@ 0x50
 800457c:	2128      	movs	r1, #40	@ 0x28
 800457e:	4825      	ldr	r0, [pc, #148]	@ (8004614 <initLevelSolo+0x14c>)
 8004580:	f7fd fe1c 	bl	80021bc <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8004584:	2303      	movs	r3, #3
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	2313      	movs	r3, #19
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2310      	movs	r3, #16
 800458e:	2250      	movs	r2, #80	@ 0x50
 8004590:	21a0      	movs	r1, #160	@ 0xa0
 8004592:	4821      	ldr	r0, [pc, #132]	@ (8004618 <initLevelSolo+0x150>)
 8004594:	f7fd fe12 	bl	80021bc <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8004598:	2303      	movs	r3, #3
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	2313      	movs	r3, #19
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2310      	movs	r3, #16
 80045a2:	2250      	movs	r2, #80	@ 0x50
 80045a4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80045a8:	481c      	ldr	r0, [pc, #112]	@ (800461c <initLevelSolo+0x154>)
 80045aa:	f7fd fe07 	bl	80021bc <initEnemy1>

		  if (nivelActual1==NIVEL2){
 80045ae:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <initLevelSolo+0x148>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10c      	bne.n	80045d2 <initLevelSolo+0x10a>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 80045b8:	2303      	movs	r3, #3
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	2314      	movs	r3, #20
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2310      	movs	r3, #16
 80045c2:	2250      	movs	r2, #80	@ 0x50
 80045c4:	21a0      	movs	r1, #160	@ 0xa0
 80045c6:	4816      	ldr	r0, [pc, #88]	@ (8004620 <initLevelSolo+0x158>)
 80045c8:	f7fe fa1c 	bl	8002a04 <initEnemy2>
			  IniciarLevel=0;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <initLevelSolo+0x140>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 80045d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <initLevelSolo+0x148>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d10e      	bne.n	80045fa <initLevelSolo+0x132>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <initLevelSolo+0x13c>)
 80045de:	9302      	str	r3, [sp, #8]
 80045e0:	230f      	movs	r3, #15
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	230f      	movs	r3, #15
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	230f      	movs	r3, #15
 80045ea:	221e      	movs	r2, #30
 80045ec:	2150      	movs	r1, #80	@ 0x50
 80045ee:	480d      	ldr	r0, [pc, #52]	@ (8004624 <initLevelSolo+0x15c>)
 80045f0:	f7fe fdea 	bl	80031c8 <initEnemy3>
			  IniciarLevel=0;
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <initLevelSolo+0x140>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
		  	  }
		  }
}
 80045fa:	bf00      	nop
 80045fc:	3704      	adds	r7, #4
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}
 8004602:	bf00      	nop
 8004604:	2001c7cc 	.word	0x2001c7cc
 8004608:	2001cb2c 	.word	0x2001cb2c
 800460c:	2001c840 	.word	0x2001c840
 8004610:	2001cb29 	.word	0x2001cb29
 8004614:	2001c8b4 	.word	0x2001c8b4
 8004618:	2001c8e8 	.word	0x2001c8e8
 800461c:	2001c91c 	.word	0x2001c91c
 8004620:	2001c9ec 	.word	0x2001c9ec
 8004624:	2001ca74 	.word	0x2001ca74

08004628 <initLevelP1>:

void initLevelP1(void){
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b087      	sub	sp, #28
 800462c:	af06      	add	r7, sp, #24
	FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800462e:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <initLevelP1+0xf4>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b3a      	ldr	r3, [pc, #232]	@ (800471c <initLevelP1+0xf4>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	1c58      	adds	r0, r3, #1
 800463c:	4b37      	ldr	r3, [pc, #220]	@ (800471c <initLevelP1+0xf4>)
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4b36      	ldr	r3, [pc, #216]	@ (800471c <initLevelP1+0xf4>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	4b34      	ldr	r3, [pc, #208]	@ (800471c <initLevelP1+0xf4>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	4b32      	ldr	r3, [pc, #200]	@ (800471c <initLevelP1+0xf4>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800465a:	9400      	str	r4, [sp, #0]
 800465c:	f7fd f9ac 	bl	80019b8 <FillRect>
	if (IniciarLevel==1){
 8004660:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <initLevelP1+0xf8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d155      	bne.n	8004714 <initLevelP1+0xec>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8004668:	2300      	movs	r3, #0
 800466a:	22f0      	movs	r2, #240	@ 0xf0
 800466c:	2100      	movs	r1, #0
 800466e:	20a0      	movs	r0, #160	@ 0xa0
 8004670:	f7fd f93a 	bl	80018e8 <V_line>
		initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 8004674:	2312      	movs	r3, #18
 8004676:	9305      	str	r3, [sp, #20]
 8004678:	23dc      	movs	r3, #220	@ 0xdc
 800467a:	9304      	str	r3, [sp, #16]
 800467c:	23a0      	movs	r3, #160	@ 0xa0
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	2303      	movs	r3, #3
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	2305      	movs	r3, #5
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	231e      	movs	r3, #30
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2316      	movs	r3, #22
 800468e:	22c8      	movs	r2, #200	@ 0xc8
 8004690:	2150      	movs	r1, #80	@ 0x50
 8004692:	4822      	ldr	r0, [pc, #136]	@ (800471c <initLevelP1+0xf4>)
 8004694:	f7ff f934 	bl	8003900 <initPlayer>
		p1.PlayerNum=1;
 8004698:	4b20      	ldr	r3, [pc, #128]	@ (800471c <initLevelP1+0xf4>)
 800469a:	2201      	movs	r2, #1
 800469c:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 800469e:	4b21      	ldr	r3, [pc, #132]	@ (8004724 <initLevelP1+0xfc>)
 80046a0:	2202      	movs	r2, #2
 80046a2:	671a      	str	r2, [r3, #112]	@ 0x70

		if (nivelActual1==NIVEL1){
 80046a4:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <initLevelP1+0x100>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10c      	bne.n	80046c8 <initLevelP1+0xa0>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 80, 80, 16, 19, 3);
 80046ae:	2303      	movs	r3, #3
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	2313      	movs	r3, #19
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	2310      	movs	r3, #16
 80046b8:	2250      	movs	r2, #80	@ 0x50
 80046ba:	2150      	movs	r1, #80	@ 0x50
 80046bc:	481b      	ldr	r0, [pc, #108]	@ (800472c <initLevelP1+0x104>)
 80046be:	f7fd fd7d 	bl	80021bc <initEnemy1>
			IniciarLevel=0;}
 80046c2:	4b17      	ldr	r3, [pc, #92]	@ (8004720 <initLevelP1+0xf8>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

		  if (nivelActual1==NIVEL2){
 80046c8:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <initLevelP1+0x100>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10c      	bne.n	80046ec <initLevelP1+0xc4>
			  initEnemy2(&e2_1, 80, 80, 16, 20, 3);
 80046d2:	2303      	movs	r3, #3
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	2314      	movs	r3, #20
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2310      	movs	r3, #16
 80046dc:	2250      	movs	r2, #80	@ 0x50
 80046de:	2150      	movs	r1, #80	@ 0x50
 80046e0:	4813      	ldr	r0, [pc, #76]	@ (8004730 <initLevelP1+0x108>)
 80046e2:	f7fe f98f 	bl	8002a04 <initEnemy2>
			  IniciarLevel=0;
 80046e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <initLevelP1+0xf8>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 80046ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004728 <initLevelP1+0x100>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d10e      	bne.n	8004714 <initLevelP1+0xec>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <initLevelP1+0xf4>)
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	230f      	movs	r3, #15
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	230f      	movs	r3, #15
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	230f      	movs	r3, #15
 8004704:	221e      	movs	r2, #30
 8004706:	2150      	movs	r1, #80	@ 0x50
 8004708:	480a      	ldr	r0, [pc, #40]	@ (8004734 <initLevelP1+0x10c>)
 800470a:	f7fe fd5d 	bl	80031c8 <initEnemy3>
			  IniciarLevel=0;
 800470e:	4b04      	ldr	r3, [pc, #16]	@ (8004720 <initLevelP1+0xf8>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
		  	  }
		  }

}
 8004714:	bf00      	nop
 8004716:	3704      	adds	r7, #4
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	2001c7cc 	.word	0x2001c7cc
 8004720:	2001cb2c 	.word	0x2001cb2c
 8004724:	2001c840 	.word	0x2001c840
 8004728:	2001cb29 	.word	0x2001cb29
 800472c:	2001c8b4 	.word	0x2001c8b4
 8004730:	2001c9ec 	.word	0x2001c9ec
 8004734:	2001ca74 	.word	0x2001ca74

08004738 <initLevelP2>:

void initLevelP2(void){
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b087      	sub	sp, #28
 800473c:	af06      	add	r7, sp, #24
	FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 800473e:	4b3c      	ldr	r3, [pc, #240]	@ (8004830 <initLevelP2+0xf8>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <initLevelP2+0xf8>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	1c58      	adds	r0, r3, #1
 800474c:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <initLevelP2+0xf8>)
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4b37      	ldr	r3, [pc, #220]	@ (8004830 <initLevelP2+0xf8>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	4b35      	ldr	r3, [pc, #212]	@ (8004830 <initLevelP2+0xf8>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <initLevelP2+0xf8>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800476a:	9400      	str	r4, [sp, #0]
 800476c:	f7fd f924 	bl	80019b8 <FillRect>
	if (IniciarLevel2==1){
 8004770:	4b30      	ldr	r3, [pc, #192]	@ (8004834 <initLevelP2+0xfc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d156      	bne.n	8004826 <initLevelP2+0xee>
		//Inicializar Jugador 1
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8004778:	2300      	movs	r3, #0
 800477a:	22f0      	movs	r2, #240	@ 0xf0
 800477c:	2100      	movs	r1, #0
 800477e:	20a0      	movs	r0, #160	@ 0xa0
 8004780:	f7fd f8b2 	bl	80018e8 <V_line>
		initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 8004784:	23a0      	movs	r3, #160	@ 0xa0
 8004786:	9305      	str	r3, [sp, #20]
 8004788:	23dc      	movs	r3, #220	@ 0xdc
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004790:	9303      	str	r3, [sp, #12]
 8004792:	2303      	movs	r3, #3
 8004794:	9302      	str	r3, [sp, #8]
 8004796:	2305      	movs	r3, #5
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	231e      	movs	r3, #30
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2316      	movs	r3, #22
 80047a0:	22c8      	movs	r2, #200	@ 0xc8
 80047a2:	21f0      	movs	r1, #240	@ 0xf0
 80047a4:	4822      	ldr	r0, [pc, #136]	@ (8004830 <initLevelP2+0xf8>)
 80047a6:	f7ff f8ab 	bl	8003900 <initPlayer>
		p1.PlayerNum=1;
 80047aa:	4b23      	ldr	r3, [pc, #140]	@ (8004838 <initLevelP2+0x100>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 80047b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004830 <initLevelP2+0xf8>)
 80047b2:	2202      	movs	r2, #2
 80047b4:	671a      	str	r2, [r3, #112]	@ 0x70

		 if (nivelActual2==NIVEL1){
 80047b6:	4b21      	ldr	r3, [pc, #132]	@ (800483c <initLevelP2+0x104>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10c      	bne.n	80047da <initLevelP2+0xa2>
			//Inicializar enemigo 1
			initEnemy1(&e1_4, 240, 120, 16, 19, 3);
 80047c0:	2303      	movs	r3, #3
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	2313      	movs	r3, #19
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2310      	movs	r3, #16
 80047ca:	2278      	movs	r2, #120	@ 0x78
 80047cc:	21f0      	movs	r1, #240	@ 0xf0
 80047ce:	481c      	ldr	r0, [pc, #112]	@ (8004840 <initLevelP2+0x108>)
 80047d0:	f7fd fcf4 	bl	80021bc <initEnemy1>
			IniciarLevel2=0;
 80047d4:	4b17      	ldr	r3, [pc, #92]	@ (8004834 <initLevelP2+0xfc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
			}

	     if (nivelActual2==NIVEL2){
 80047da:	4b18      	ldr	r3, [pc, #96]	@ (800483c <initLevelP2+0x104>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10c      	bne.n	80047fe <initLevelP2+0xc6>
			  initEnemy2(&e2_2, 240, 80, 16, 20, 3);
 80047e4:	2303      	movs	r3, #3
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2314      	movs	r3, #20
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2310      	movs	r3, #16
 80047ee:	2250      	movs	r2, #80	@ 0x50
 80047f0:	21f0      	movs	r1, #240	@ 0xf0
 80047f2:	4814      	ldr	r0, [pc, #80]	@ (8004844 <initLevelP2+0x10c>)
 80047f4:	f7fe f906 	bl	8002a04 <initEnemy2>
			IniciarLevel2=0;
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <initLevelP2+0xfc>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
		  }

	     if (nivelActual2==NIVEL3){
 80047fe:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <initLevelP2+0x104>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d10e      	bne.n	8004826 <initLevelP2+0xee>
		  initEnemy3(&e3_2, 240, 30, 15, 15, 15, &p2);
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <initLevelP2+0xf8>)
 800480a:	9302      	str	r3, [sp, #8]
 800480c:	230f      	movs	r3, #15
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	230f      	movs	r3, #15
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	230f      	movs	r3, #15
 8004816:	221e      	movs	r2, #30
 8004818:	21f0      	movs	r1, #240	@ 0xf0
 800481a:	480b      	ldr	r0, [pc, #44]	@ (8004848 <initLevelP2+0x110>)
 800481c:	f7fe fcd4 	bl	80031c8 <initEnemy3>
		  IniciarLevel=0;
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <initLevelP2+0x114>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
		  }
	  }

}
 8004826:	bf00      	nop
 8004828:	3704      	adds	r7, #4
 800482a:	46bd      	mov	sp, r7
 800482c:	bd90      	pop	{r4, r7, pc}
 800482e:	bf00      	nop
 8004830:	2001c840 	.word	0x2001c840
 8004834:	2001cb30 	.word	0x2001cb30
 8004838:	2001c7cc 	.word	0x2001c7cc
 800483c:	2001cb2a 	.word	0x2001cb2a
 8004840:	2001c950 	.word	0x2001c950
 8004844:	2001ca30 	.word	0x2001ca30
 8004848:	2001cacc 	.word	0x2001cacc
 800484c:	2001cb2c 	.word	0x2001cb2c

08004850 <CargarMultiplesBitmaps>:

void CargarMultiplesBitmaps(char *baseName) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	@ 0x30
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
    char fileName[20];
    int y_offset = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 1; i <= 8; i++) {
 800485c:	2301      	movs	r3, #1
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	e01d      	b.n	800489e <CargarMultiplesBitmaps+0x4e>
        // Formateamos el nombre del archivo, agregando el número y "_h.bin"
        sprintf(fileName, "%s%d_h.bin", baseName, i);
 8004862:	f107 000c 	add.w	r0, r7, #12
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	4911      	ldr	r1, [pc, #68]	@ (80048b0 <CargarMultiplesBitmaps+0x60>)
 800486c:	f008 fa88 	bl	800cd80 <siprintf>

        // Intentamos cargar el bitmap desde la tarjeta SD
        if (CargarBitmaps_SD(fileName)) {
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd fa11 	bl	8001c9c <CargarBitmaps_SD>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <CargarMultiplesBitmaps+0x42>
            // Mostramos el bitmap en la posición correspondiente
            LCD_Bitmap(0, y_offset, 320, 30, fragmento_imagen);
 8004880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004882:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <CargarMultiplesBitmaps+0x64>)
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	231e      	movs	r3, #30
 8004888:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800488c:	2000      	movs	r0, #0
 800488e:	f7fd f8ed 	bl	8001a6c <LCD_Bitmap>
        }

        // Aumentamos el desplazamiento vertical para el siguiente bitmap
        y_offset += 30;
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	331e      	adds	r3, #30
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 1; i <= 8; i++) {
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	3301      	adds	r3, #1
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	ddde      	ble.n	8004862 <CargarMultiplesBitmaps+0x12>
    }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3728      	adds	r7, #40	@ 0x28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	0800d768 	.word	0x0800d768
 80048b4:	20017cc0 	.word	0x20017cc0

080048b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048be:	f001 fdf7 	bl	80064b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048c2:	f000 fc47 	bl	8005154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048c6:	f000 fe4f 	bl	8005568 <MX_GPIO_Init>
  MX_SPI1_Init();
 80048ca:	f000 fcaf 	bl	800522c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80048ce:	f000 fe21 	bl	8005514 <MX_USART2_UART_Init>
  MX_UART5_Init();
 80048d2:	f000 fdf5 	bl	80054c0 <MX_UART5_Init>
  MX_FATFS_Init();
 80048d6:	f005 fad3 	bl	8009e80 <MX_FATFS_Init>
  MX_TIM2_Init();
 80048da:	f000 fd7b 	bl	80053d4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80048de:	f000 fcdb 	bl	8005298 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 80048e2:	f7fc fd39 	bl	8001358 <LCD_Init>
	//LCD_Clear(0x00);

	//Cargar el fondo en 8 fragmentaciones
	CargarMultiplesBitmaps("mp");
 80048e6:	48a6      	ldr	r0, [pc, #664]	@ (8004b80 <main+0x2c8>)
 80048e8:	f7ff ffb2 	bl	8004850 <CargarMultiplesBitmaps>
	//LCD_Bitmap(0, 0, 320, 240, fondo);

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	// Activar bandera interrupcion
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80048ec:	2201      	movs	r2, #1
 80048ee:	49a5      	ldr	r1, [pc, #660]	@ (8004b84 <main+0x2cc>)
 80048f0:	48a5      	ldr	r0, [pc, #660]	@ (8004b88 <main+0x2d0>)
 80048f2:	f004 fb4a 	bl	8008f8a <HAL_UART_Receive_IT>

	//EstadoJuego estadoActual = SOLO;
	//LevelPlaying nivelActual1 = NIVEL3;
	//LevelPlaying nivelActual2 = NIVEL2;
	estadoActual = MENU;
 80048f6:	4ba5      	ldr	r3, [pc, #660]	@ (8004b8c <main+0x2d4>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
	nivelActual1 = NIVEL1;
 80048fc:	4ba4      	ldr	r3, [pc, #656]	@ (8004b90 <main+0x2d8>)
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
	nivelActual2 = NIVEL1;
 8004902:	4ba4      	ldr	r3, [pc, #656]	@ (8004b94 <main+0x2dc>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
	modo = 0;
 8004908:	4ba3      	ldr	r3, [pc, #652]	@ (8004b98 <main+0x2e0>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
    fase_p1=1;
 800490e:	4ba3      	ldr	r3, [pc, #652]	@ (8004b9c <main+0x2e4>)
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
    fase_p2=1;
 8004914:	4ba2      	ldr	r3, [pc, #648]	@ (8004ba0 <main+0x2e8>)
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]


  	if (estadoActual == SOLO){
 800491a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b8c <main+0x2d4>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d172      	bne.n	8004a0a <main+0x152>
	//Inicializar Jugador 1
	initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004924:	2312      	movs	r3, #18
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	23dc      	movs	r3, #220	@ 0xdc
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004930:	9303      	str	r3, [sp, #12]
 8004932:	2303      	movs	r3, #3
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	2305      	movs	r3, #5
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	231e      	movs	r3, #30
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2316      	movs	r3, #22
 8004940:	22c8      	movs	r2, #200	@ 0xc8
 8004942:	21a0      	movs	r1, #160	@ 0xa0
 8004944:	4897      	ldr	r0, [pc, #604]	@ (8004ba4 <main+0x2ec>)
 8004946:	f7fe ffdb 	bl	8003900 <initPlayer>
	initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 800494a:	2312      	movs	r3, #18
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	23dc      	movs	r3, #220	@ 0xdc
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004956:	9303      	str	r3, [sp, #12]
 8004958:	2303      	movs	r3, #3
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	2305      	movs	r3, #5
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	231e      	movs	r3, #30
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2316      	movs	r3, #22
 8004966:	22c8      	movs	r2, #200	@ 0xc8
 8004968:	21a0      	movs	r1, #160	@ 0xa0
 800496a:	488f      	ldr	r0, [pc, #572]	@ (8004ba8 <main+0x2f0>)
 800496c:	f7fe ffc8 	bl	8003900 <initPlayer>
	p1.PlayerNum=1;
 8004970:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba4 <main+0x2ec>)
 8004972:	2201      	movs	r2, #1
 8004974:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 8004976:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba8 <main+0x2f0>)
 8004978:	2202      	movs	r2, #2
 800497a:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.isAlive=0;
 800497c:	4b8a      	ldr	r3, [pc, #552]	@ (8004ba8 <main+0x2f0>)
 800497e:	2200      	movs	r2, #0
 8004980:	61da      	str	r2, [r3, #28]

	if (nivelActual1==NIVEL1){
 8004982:	4b83      	ldr	r3, [pc, #524]	@ (8004b90 <main+0x2d8>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11e      	bne.n	80049ca <main+0x112>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 800498c:	2303      	movs	r3, #3
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	2313      	movs	r3, #19
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2310      	movs	r3, #16
 8004996:	2250      	movs	r2, #80	@ 0x50
 8004998:	2128      	movs	r1, #40	@ 0x28
 800499a:	4884      	ldr	r0, [pc, #528]	@ (8004bac <main+0x2f4>)
 800499c:	f7fd fc0e 	bl	80021bc <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 80049a0:	2303      	movs	r3, #3
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	2313      	movs	r3, #19
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2310      	movs	r3, #16
 80049aa:	2250      	movs	r2, #80	@ 0x50
 80049ac:	21a0      	movs	r1, #160	@ 0xa0
 80049ae:	4880      	ldr	r0, [pc, #512]	@ (8004bb0 <main+0x2f8>)
 80049b0:	f7fd fc04 	bl	80021bc <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 80049b4:	2303      	movs	r3, #3
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	2313      	movs	r3, #19
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2310      	movs	r3, #16
 80049be:	2250      	movs	r2, #80	@ 0x50
 80049c0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80049c4:	487b      	ldr	r0, [pc, #492]	@ (8004bb4 <main+0x2fc>)
 80049c6:	f7fd fbf9 	bl	80021bc <initEnemy1>

	  if (nivelActual1==NIVEL2){
 80049ca:	4b71      	ldr	r3, [pc, #452]	@ (8004b90 <main+0x2d8>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d109      	bne.n	80049e8 <main+0x130>
		  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 80049d4:	2303      	movs	r3, #3
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	2314      	movs	r3, #20
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2310      	movs	r3, #16
 80049de:	2250      	movs	r2, #80	@ 0x50
 80049e0:	21a0      	movs	r1, #160	@ 0xa0
 80049e2:	4875      	ldr	r0, [pc, #468]	@ (8004bb8 <main+0x300>)
 80049e4:	f7fe f80e 	bl	8002a04 <initEnemy2>
		  }

	  if (nivelActual1==NIVEL3){
 80049e8:	4b69      	ldr	r3, [pc, #420]	@ (8004b90 <main+0x2d8>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d10b      	bne.n	8004a0a <main+0x152>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80049f2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba4 <main+0x2ec>)
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	230f      	movs	r3, #15
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	230f      	movs	r3, #15
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	230f      	movs	r3, #15
 8004a00:	221e      	movs	r2, #30
 8004a02:	2150      	movs	r1, #80	@ 0x50
 8004a04:	486d      	ldr	r0, [pc, #436]	@ (8004bbc <main+0x304>)
 8004a06:	f7fe fbdf 	bl	80031c8 <initEnemy3>
	  	  }
}
  if (estadoActual==DUO){
 8004a0a:	4b60      	ldr	r3, [pc, #384]	@ (8004b8c <main+0x2d4>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f040 8095 	bne.w	8004b40 <main+0x288>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 8004a16:	2300      	movs	r3, #0
 8004a18:	22f0      	movs	r2, #240	@ 0xf0
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	20a0      	movs	r0, #160	@ 0xa0
 8004a1e:	f7fc ff63 	bl	80018e8 <V_line>
	initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18); //80
 8004a22:	2312      	movs	r3, #18
 8004a24:	9305      	str	r3, [sp, #20]
 8004a26:	23dc      	movs	r3, #220	@ 0xdc
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	23a0      	movs	r3, #160	@ 0xa0
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	2303      	movs	r3, #3
 8004a30:	9302      	str	r3, [sp, #8]
 8004a32:	2305      	movs	r3, #5
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	231e      	movs	r3, #30
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2316      	movs	r3, #22
 8004a3c:	22c8      	movs	r2, #200	@ 0xc8
 8004a3e:	2150      	movs	r1, #80	@ 0x50
 8004a40:	4858      	ldr	r0, [pc, #352]	@ (8004ba4 <main+0x2ec>)
 8004a42:	f7fe ff5d 	bl	8003900 <initPlayer>
	initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160); //240
 8004a46:	23a0      	movs	r3, #160	@ 0xa0
 8004a48:	9305      	str	r3, [sp, #20]
 8004a4a:	23dc      	movs	r3, #220	@ 0xdc
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a52:	9303      	str	r3, [sp, #12]
 8004a54:	2303      	movs	r3, #3
 8004a56:	9302      	str	r3, [sp, #8]
 8004a58:	2305      	movs	r3, #5
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	231e      	movs	r3, #30
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2316      	movs	r3, #22
 8004a62:	22c8      	movs	r2, #200	@ 0xc8
 8004a64:	21f0      	movs	r1, #240	@ 0xf0
 8004a66:	4850      	ldr	r0, [pc, #320]	@ (8004ba8 <main+0x2f0>)
 8004a68:	f7fe ff4a 	bl	8003900 <initPlayer>
	p1.PlayerNum=1;
 8004a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba4 <main+0x2ec>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 8004a72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba8 <main+0x2f0>)
 8004a74:	2202      	movs	r2, #2
 8004a76:	671a      	str	r2, [r3, #112]	@ 0x70

	if (nivelActual1==NIVEL1){
 8004a78:	4b45      	ldr	r3, [pc, #276]	@ (8004b90 <main+0x2d8>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <main+0x1de>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 80, 80, 16, 19, 3);}
 8004a82:	2303      	movs	r3, #3
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	2313      	movs	r3, #19
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2310      	movs	r3, #16
 8004a8c:	2250      	movs	r2, #80	@ 0x50
 8004a8e:	2150      	movs	r1, #80	@ 0x50
 8004a90:	4846      	ldr	r0, [pc, #280]	@ (8004bac <main+0x2f4>)
 8004a92:	f7fd fb93 	bl	80021bc <initEnemy1>
	 if (nivelActual1==NIVEL2){
 8004a96:	4b3e      	ldr	r3, [pc, #248]	@ (8004b90 <main+0x2d8>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d109      	bne.n	8004ab4 <main+0x1fc>
		  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	2314      	movs	r3, #20
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	2250      	movs	r2, #80	@ 0x50
 8004aac:	215a      	movs	r1, #90	@ 0x5a
 8004aae:	4842      	ldr	r0, [pc, #264]	@ (8004bb8 <main+0x300>)
 8004ab0:	f7fd ffa8 	bl	8002a04 <initEnemy2>
		  }
	  if (nivelActual1==NIVEL3){
 8004ab4:	4b36      	ldr	r3, [pc, #216]	@ (8004b90 <main+0x2d8>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d10b      	bne.n	8004ad6 <main+0x21e>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);}
 8004abe:	4b39      	ldr	r3, [pc, #228]	@ (8004ba4 <main+0x2ec>)
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	230f      	movs	r3, #15
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	230f      	movs	r3, #15
 8004acc:	221e      	movs	r2, #30
 8004ace:	2150      	movs	r1, #80	@ 0x50
 8004ad0:	483a      	ldr	r0, [pc, #232]	@ (8004bbc <main+0x304>)
 8004ad2:	f7fe fb79 	bl	80031c8 <initEnemy3>
	  if (nivelActual2==NIVEL1){
 8004ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b94 <main+0x2dc>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <main+0x23c>
		//Inicializar enemigo 1
		initEnemy1(&e1_4, 240, 120, 16, 19, 3);
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	2313      	movs	r3, #19
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2310      	movs	r3, #16
 8004aea:	2278      	movs	r2, #120	@ 0x78
 8004aec:	21f0      	movs	r1, #240	@ 0xf0
 8004aee:	4834      	ldr	r0, [pc, #208]	@ (8004bc0 <main+0x308>)
 8004af0:	f7fd fb64 	bl	80021bc <initEnemy1>
	    }
	  if (nivelActual2==NIVEL2){
 8004af4:	4b27      	ldr	r3, [pc, #156]	@ (8004b94 <main+0x2dc>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d109      	bne.n	8004b12 <main+0x25a>
	  	  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 8004afe:	2303      	movs	r3, #3
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	2314      	movs	r3, #20
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2310      	movs	r3, #16
 8004b08:	2250      	movs	r2, #80	@ 0x50
 8004b0a:	21e6      	movs	r1, #230	@ 0xe6
 8004b0c:	482d      	ldr	r0, [pc, #180]	@ (8004bc4 <main+0x30c>)
 8004b0e:	f7fd ff79 	bl	8002a04 <initEnemy2>
	  }
	  if (nivelActual2==NIVEL3){
 8004b12:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <main+0x2dc>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d10b      	bne.n	8004b34 <main+0x27c>
		  initEnemy3(&e3_2, 240, 30, 15, 15, 15, &p2);}
 8004b1c:	4b22      	ldr	r3, [pc, #136]	@ (8004ba8 <main+0x2f0>)
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	230f      	movs	r3, #15
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	230f      	movs	r3, #15
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	230f      	movs	r3, #15
 8004b2a:	221e      	movs	r2, #30
 8004b2c:	21f0      	movs	r1, #240	@ 0xf0
 8004b2e:	4826      	ldr	r0, [pc, #152]	@ (8004bc8 <main+0x310>)
 8004b30:	f7fe fb4a 	bl	80031c8 <initEnemy3>
	  HitboxPlayer(&p1);
 8004b34:	481b      	ldr	r0, [pc, #108]	@ (8004ba4 <main+0x2ec>)
 8004b36:	f7ff f82f 	bl	8003b98 <HitboxPlayer>
	  HitboxPlayer(&p2);
 8004b3a:	481b      	ldr	r0, [pc, #108]	@ (8004ba8 <main+0x2f0>)
 8004b3c:	f7ff f82c 	bl	8003b98 <HitboxPlayer>
	}

  // Iniciar PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004b40:	210c      	movs	r1, #12
 8004b42:	4822      	ldr	r0, [pc, #136]	@ (8004bcc <main+0x314>)
 8004b44:	f003 fb0a 	bl	800815c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (repintarFondo) {
 8004b48:	4b21      	ldr	r3, [pc, #132]	@ (8004bd0 <main+0x318>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d07b      	beq.n	8004c48 <main+0x390>
			switch (estadoActual) {
 8004b50:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <main+0x2d4>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d873      	bhi.n	8004c42 <main+0x38a>
 8004b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <main+0x2a8>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b79 	.word	0x08004b79
 8004b64:	08004bd5 	.word	0x08004bd5
 8004b68:	08004c15 	.word	0x08004c15
 8004b6c:	08004c35 	.word	0x08004c35
 8004b70:	08004c43 	.word	0x08004c43
 8004b74:	08004c43 	.word	0x08004c43
				case MENU:
					CargarMultiplesBitmaps("mp");
 8004b78:	4801      	ldr	r0, [pc, #4]	@ (8004b80 <main+0x2c8>)
 8004b7a:	f7ff fe69 	bl	8004850 <CargarMultiplesBitmaps>
					break;
 8004b7e:	e060      	b.n	8004c42 <main+0x38a>
 8004b80:	0800d774 	.word	0x0800d774
 8004b84:	2001c7c0 	.word	0x2001c7c0
 8004b88:	20017c78 	.word	0x20017c78
 8004b8c:	20016a78 	.word	0x20016a78
 8004b90:	2001cb29 	.word	0x2001cb29
 8004b94:	2001cb2a 	.word	0x2001cb2a
 8004b98:	2001cb24 	.word	0x2001cb24
 8004b9c:	2001cb25 	.word	0x2001cb25
 8004ba0:	2001cb26 	.word	0x2001cb26
 8004ba4:	2001c7cc 	.word	0x2001c7cc
 8004ba8:	2001c840 	.word	0x2001c840
 8004bac:	2001c8b4 	.word	0x2001c8b4
 8004bb0:	2001c8e8 	.word	0x2001c8e8
 8004bb4:	2001c91c 	.word	0x2001c91c
 8004bb8:	2001c9ec 	.word	0x2001c9ec
 8004bbc:	2001ca74 	.word	0x2001ca74
 8004bc0:	2001c950 	.word	0x2001c950
 8004bc4:	2001ca30 	.word	0x2001ca30
 8004bc8:	2001cacc 	.word	0x2001cacc
 8004bcc:	20017be8 	.word	0x20017be8
 8004bd0:	2001cb34 	.word	0x2001cb34
				case SOLO:
					CargarMultiplesBitmaps("fb");
 8004bd4:	4893      	ldr	r0, [pc, #588]	@ (8004e24 <main+0x56c>)
 8004bd6:	f7ff fe3b 	bl	8004850 <CargarMultiplesBitmaps>
					LCD_Sprite(p1.x - (20 / 2)+1, p1.y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, 0, 0, 0);
 8004bda:	4b93      	ldr	r3, [pc, #588]	@ (8004e28 <main+0x570>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3b09      	subs	r3, #9
 8004be0:	4618      	mov	r0, r3
 8004be2:	4b91      	ldr	r3, [pc, #580]	@ (8004e28 <main+0x570>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	3b0a      	subs	r3, #10
 8004be8:	4619      	mov	r1, r3
 8004bea:	2300      	movs	r3, #0
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9302      	str	r3, [sp, #8]
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	4b8c      	ldr	r3, [pc, #560]	@ (8004e2c <main+0x574>)
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2315      	movs	r3, #21
 8004c00:	2214      	movs	r2, #20
 8004c02:	f7fc ff89 	bl	8001b18 <LCD_Sprite>
					if (IniciarP1==1){
 8004c06:	4b8a      	ldr	r3, [pc, #552]	@ (8004e30 <main+0x578>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d116      	bne.n	8004c3c <main+0x384>
					initLevelSolo();}
 8004c0e:	f7ff fc5b 	bl	80044c8 <initLevelSolo>
					break;
 8004c12:	e013      	b.n	8004c3c <main+0x384>
				case DUO:
					CargarMultiplesBitmaps("fb");
 8004c14:	4883      	ldr	r0, [pc, #524]	@ (8004e24 <main+0x56c>)
 8004c16:	f7ff fe1b 	bl	8004850 <CargarMultiplesBitmaps>
					if (IniciarP1==1){
 8004c1a:	4b85      	ldr	r3, [pc, #532]	@ (8004e30 <main+0x578>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <main+0x36e>
						initLevelP1();}
 8004c22:	f7ff fd01 	bl	8004628 <initLevelP1>
					if (IniciarP2==1){
 8004c26:	4b83      	ldr	r3, [pc, #524]	@ (8004e34 <main+0x57c>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d108      	bne.n	8004c40 <main+0x388>
						initLevelP2();}
 8004c2e:	f7ff fd83 	bl	8004738 <initLevelP2>
					break;
 8004c32:	e005      	b.n	8004c40 <main+0x388>
				case PAUSA:
					CargarMultiplesBitmaps("pausa");
 8004c34:	4880      	ldr	r0, [pc, #512]	@ (8004e38 <main+0x580>)
 8004c36:	f7ff fe0b 	bl	8004850 <CargarMultiplesBitmaps>
					break;
 8004c3a:	e002      	b.n	8004c42 <main+0x38a>
					break;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <main+0x38a>
					break;
 8004c40:	bf00      	nop
					break;
				case WIN2:
					break;
				// Agrega más casos según tus estados.
			}
			repintarFondo = 0; // Fondo pintado, no es necesario repintar.
 8004c42:	4b7e      	ldr	r3, [pc, #504]	@ (8004e3c <main+0x584>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
		}
		if (pintarFondoPausa == 1) {
 8004c48:	4b7d      	ldr	r3, [pc, #500]	@ (8004e40 <main+0x588>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <main+0x3a4>
			// Pinta el fondo de PAUSA solo una vez
			CargarMultiplesBitmaps("pausa");  // Función que pinta el fondo de PAUSA
 8004c50:	4879      	ldr	r0, [pc, #484]	@ (8004e38 <main+0x580>)
 8004c52:	f7ff fdfd 	bl	8004850 <CargarMultiplesBitmaps>
			pintarFondoPausa = 0;  // Desactiva la bandera
 8004c56:	4b7a      	ldr	r3, [pc, #488]	@ (8004e40 <main+0x588>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
		}
		switch(estadoActual){
 8004c5c:	4b79      	ldr	r3, [pc, #484]	@ (8004e44 <main+0x58c>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	f200 8255 	bhi.w	8005112 <main+0x85a>
 8004c68:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <main+0x3b8>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08005113 	.word	0x08005113
 8004c74:	08004c89 	.word	0x08004c89
 8004c78:	08004e65 	.word	0x08004e65
 8004c7c:	08005113 	.word	0x08005113
 8004c80:	08005103 	.word	0x08005103
 8004c84:	0800510b 	.word	0x0800510b
		case MENU:
			break;
		case SOLO:{
			if (nivelActual1==NIVEL1){
 8004c88:	4b6f      	ldr	r3, [pc, #444]	@ (8004e48 <main+0x590>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d161      	bne.n	8004d56 <main+0x49e>
					if(e1_1.isAlive==1){
 8004c92:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <main+0x594>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <main+0x3ee>
						animation_e1(&e1_1);
 8004c9a:	486c      	ldr	r0, [pc, #432]	@ (8004e4c <main+0x594>)
 8004c9c:	f7fd f924 	bl	8001ee8 <animation_e1>
						animation_e1_control(&e1_1);}
 8004ca0:	486a      	ldr	r0, [pc, #424]	@ (8004e4c <main+0x594>)
 8004ca2:	f7fd f8cd 	bl	8001e40 <animation_e1_control>

					if(e1_2.isAlive==1){
 8004ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e50 <main+0x598>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <main+0x402>
						animation_e1(&e1_2);
 8004cae:	4868      	ldr	r0, [pc, #416]	@ (8004e50 <main+0x598>)
 8004cb0:	f7fd f91a 	bl	8001ee8 <animation_e1>
						animation_e1_control(&e1_2);}
 8004cb4:	4866      	ldr	r0, [pc, #408]	@ (8004e50 <main+0x598>)
 8004cb6:	f7fd f8c3 	bl	8001e40 <animation_e1_control>

					if(e1_3.isAlive==1){
 8004cba:	4b66      	ldr	r3, [pc, #408]	@ (8004e54 <main+0x59c>)
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <main+0x416>
						animation_e1(&e1_3);
 8004cc2:	4864      	ldr	r0, [pc, #400]	@ (8004e54 <main+0x59c>)
 8004cc4:	f7fd f910 	bl	8001ee8 <animation_e1>
						animation_e1_control(&e1_3);}
 8004cc8:	4862      	ldr	r0, [pc, #392]	@ (8004e54 <main+0x59c>)
 8004cca:	f7fd f8b9 	bl	8001e40 <animation_e1_control>

					animation_e1_die(&e1_1);
 8004cce:	485f      	ldr	r0, [pc, #380]	@ (8004e4c <main+0x594>)
 8004cd0:	f7fd f9d2 	bl	8002078 <animation_e1_die>
					animation_e1_dieS(&e1_1);
 8004cd4:	485d      	ldr	r0, [pc, #372]	@ (8004e4c <main+0x594>)
 8004cd6:	f7fd fa21 	bl	800211c <animation_e1_dieS>
					animation_e1_die(&e1_2);
 8004cda:	485d      	ldr	r0, [pc, #372]	@ (8004e50 <main+0x598>)
 8004cdc:	f7fd f9cc 	bl	8002078 <animation_e1_die>
					animation_e1_dieS(&e1_2);
 8004ce0:	485b      	ldr	r0, [pc, #364]	@ (8004e50 <main+0x598>)
 8004ce2:	f7fd fa1b 	bl	800211c <animation_e1_dieS>
					animation_e1_die(&e1_3);
 8004ce6:	485b      	ldr	r0, [pc, #364]	@ (8004e54 <main+0x59c>)
 8004ce8:	f7fd f9c6 	bl	8002078 <animation_e1_die>
					animation_e1_dieS(&e1_3);
 8004cec:	4859      	ldr	r0, [pc, #356]	@ (8004e54 <main+0x59c>)
 8004cee:	f7fd fa15 	bl	800211c <animation_e1_dieS>
					if (e1_1.isAlive==0&&e1_2.isAlive==0&&e1_3.isAlive==0 && e1_1.animationDie>=11 && e1_2.animationDie>=11 && e1_3.animationDie>=11){
 8004cf2:	4b56      	ldr	r3, [pc, #344]	@ (8004e4c <main+0x594>)
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d12d      	bne.n	8004d56 <main+0x49e>
 8004cfa:	4b55      	ldr	r3, [pc, #340]	@ (8004e50 <main+0x598>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d129      	bne.n	8004d56 <main+0x49e>
 8004d02:	4b54      	ldr	r3, [pc, #336]	@ (8004e54 <main+0x59c>)
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d125      	bne.n	8004d56 <main+0x49e>
 8004d0a:	4b50      	ldr	r3, [pc, #320]	@ (8004e4c <main+0x594>)
 8004d0c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004d10:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1c:	db1b      	blt.n	8004d56 <main+0x49e>
 8004d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004e50 <main+0x598>)
 8004d20:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004d24:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d30:	db11      	blt.n	8004d56 <main+0x49e>
 8004d32:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <main+0x59c>)
 8004d34:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004d38:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	db07      	blt.n	8004d56 <main+0x49e>
						nivelActual1=NIVEL2;
 8004d46:	4b40      	ldr	r3, [pc, #256]	@ (8004e48 <main+0x590>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
						IniciarLevel=1;
 8004d4c:	4b42      	ldr	r3, [pc, #264]	@ (8004e58 <main+0x5a0>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
						initLevelSolo();
 8004d52:	f7ff fbb9 	bl	80044c8 <initLevelSolo>
					}
				}

			if (nivelActual1==NIVEL2){
 8004d56:	4b3c      	ldr	r3, [pc, #240]	@ (8004e48 <main+0x590>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d136      	bne.n	8004dce <main+0x516>
				if (e2_1.isAlive==1){
 8004d60:	4b3e      	ldr	r3, [pc, #248]	@ (8004e5c <main+0x5a4>)
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d116      	bne.n	8004d96 <main+0x4de>
					moveE2(&e2_1, &p1);
 8004d68:	492f      	ldr	r1, [pc, #188]	@ (8004e28 <main+0x570>)
 8004d6a:	483c      	ldr	r0, [pc, #240]	@ (8004e5c <main+0x5a4>)
 8004d6c:	f7fd fe84 	bl	8002a78 <moveE2>
					e2_1.delay+=1; //1
 8004d70:	4b3a      	ldr	r3, [pc, #232]	@ (8004e5c <main+0x5a4>)
 8004d72:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d7e:	4b37      	ldr	r3, [pc, #220]	@ (8004e5c <main+0x5a4>)
 8004d80:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
					E2_Appear(&e2_1);
 8004d84:	4835      	ldr	r0, [pc, #212]	@ (8004e5c <main+0x5a4>)
 8004d86:	f7fd ff8f 	bl	8002ca8 <E2_Appear>
					E2_Hurt(&e2_1);
 8004d8a:	4834      	ldr	r0, [pc, #208]	@ (8004e5c <main+0x5a4>)
 8004d8c:	f7fd ffd4 	bl	8002d38 <E2_Hurt>
					E2_HurtS(&e2_1);
 8004d90:	4832      	ldr	r0, [pc, #200]	@ (8004e5c <main+0x5a4>)
 8004d92:	f7fe f81f 	bl	8002dd4 <E2_HurtS>

				}
				E2_Die(&e2_1);
 8004d96:	4831      	ldr	r0, [pc, #196]	@ (8004e5c <main+0x5a4>)
 8004d98:	f7fe f85e 	bl	8002e58 <E2_Die>
				E2_DieS(&e2_1);
 8004d9c:	482f      	ldr	r0, [pc, #188]	@ (8004e5c <main+0x5a4>)
 8004d9e:	f7fe f8b9 	bl	8002f14 <E2_DieS>
				if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8004da2:	4b2e      	ldr	r3, [pc, #184]	@ (8004e5c <main+0x5a4>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d111      	bne.n	8004dce <main+0x516>
 8004daa:	4b2c      	ldr	r3, [pc, #176]	@ (8004e5c <main+0x5a4>)
 8004dac:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004db0:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbc:	db07      	blt.n	8004dce <main+0x516>
					nivelActual1=NIVEL3;
 8004dbe:	4b22      	ldr	r3, [pc, #136]	@ (8004e48 <main+0x590>)
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004dc4:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <main+0x5a0>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
					initLevelSolo();
 8004dca:	f7ff fb7d 	bl	80044c8 <initLevelSolo>
				}
			}

			if (nivelActual1==NIVEL3){
 8004dce:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <main+0x590>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d112      	bne.n	8004dfe <main+0x546>
				E3_MoveX(&e3_1);
 8004dd8:	4821      	ldr	r0, [pc, #132]	@ (8004e60 <main+0x5a8>)
 8004dda:	f7fe fd1b 	bl	8003814 <E3_MoveX>
				E3_Eye(&e3_1);
 8004dde:	4820      	ldr	r0, [pc, #128]	@ (8004e60 <main+0x5a8>)
 8004de0:	f7fe fa3e 	bl	8003260 <E3_Eye>
				E3_EyeS(&e3_1);
 8004de4:	481e      	ldr	r0, [pc, #120]	@ (8004e60 <main+0x5a8>)
 8004de6:	f7fe fab5 	bl	8003354 <E3_EyeS>
				E3_FireMove(&e3_1,&p1);
 8004dea:	490f      	ldr	r1, [pc, #60]	@ (8004e28 <main+0x570>)
 8004dec:	481c      	ldr	r0, [pc, #112]	@ (8004e60 <main+0x5a8>)
 8004dee:	f7fe fb0f 	bl	8003410 <E3_FireMove>
				E3_Hitbox(&e3_1);
 8004df2:	481b      	ldr	r0, [pc, #108]	@ (8004e60 <main+0x5a8>)
 8004df4:	f7fe fc58 	bl	80036a8 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8004df8:	4819      	ldr	r0, [pc, #100]	@ (8004e60 <main+0x5a8>)
 8004dfa:	f7fe fc1d 	bl	8003638 <E3_FireAnimation>
			}

			PlayerAttackAnimation(&p1);
 8004dfe:	480a      	ldr	r0, [pc, #40]	@ (8004e28 <main+0x570>)
 8004e00:	f7ff f8e2 	bl	8003fc8 <PlayerAttackAnimation>
			PlayerAttackSound(&p1);
 8004e04:	4808      	ldr	r0, [pc, #32]	@ (8004e28 <main+0x570>)
 8004e06:	f7ff f981 	bl	800410c <PlayerAttackSound>
			PlayerDamageAnimation(&p1);
 8004e0a:	4807      	ldr	r0, [pc, #28]	@ (8004e28 <main+0x570>)
 8004e0c:	f7ff f9d8 	bl	80041c0 <PlayerDamageAnimation>
			PlayerDamageSound(&p1);
 8004e10:	4805      	ldr	r0, [pc, #20]	@ (8004e28 <main+0x570>)
 8004e12:	f7ff fa77 	bl	8004304 <PlayerDamageSound>
			PlayerDieAnimation(&p1);
 8004e16:	4804      	ldr	r0, [pc, #16]	@ (8004e28 <main+0x570>)
 8004e18:	f7ff fab2 	bl	8004380 <PlayerDieAnimation>
			PlayerDieSound(&p1);
 8004e1c:	4802      	ldr	r0, [pc, #8]	@ (8004e28 <main+0x570>)
 8004e1e:	f7ff fb0d 	bl	800443c <PlayerDieSound>
			break;}
 8004e22:	e177      	b.n	8005114 <main+0x85c>
 8004e24:	0800d778 	.word	0x0800d778
 8004e28:	2001c7cc 	.word	0x2001c7cc
 8004e2c:	20005844 	.word	0x20005844
 8004e30:	2001cb36 	.word	0x2001cb36
 8004e34:	2001cb37 	.word	0x2001cb37
 8004e38:	0800d77c 	.word	0x0800d77c
 8004e3c:	2001cb34 	.word	0x2001cb34
 8004e40:	2001cb35 	.word	0x2001cb35
 8004e44:	20016a78 	.word	0x20016a78
 8004e48:	2001cb29 	.word	0x2001cb29
 8004e4c:	2001c8b4 	.word	0x2001c8b4
 8004e50:	2001c8e8 	.word	0x2001c8e8
 8004e54:	2001c91c 	.word	0x2001c91c
 8004e58:	2001cb2c 	.word	0x2001cb2c
 8004e5c:	2001c9ec 	.word	0x2001c9ec
 8004e60:	2001ca74 	.word	0x2001ca74


		case DUO:{
			if (nivelActual1==NIVEL1){
 8004e64:	4bac      	ldr	r3, [pc, #688]	@ (8005118 <main+0x860>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d125      	bne.n	8004eba <main+0x602>
				if(e1_1.isAlive==1){
 8004e6e:	4bab      	ldr	r3, [pc, #684]	@ (800511c <main+0x864>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <main+0x5ca>
					animation_e1(&e1_1);
 8004e76:	48a9      	ldr	r0, [pc, #676]	@ (800511c <main+0x864>)
 8004e78:	f7fd f836 	bl	8001ee8 <animation_e1>
					animation_e1_control(&e1_1);}
 8004e7c:	48a7      	ldr	r0, [pc, #668]	@ (800511c <main+0x864>)
 8004e7e:	f7fc ffdf 	bl	8001e40 <animation_e1_control>
				animation_e1_die(&e1_1);
 8004e82:	48a6      	ldr	r0, [pc, #664]	@ (800511c <main+0x864>)
 8004e84:	f7fd f8f8 	bl	8002078 <animation_e1_die>
				animation_e1_dieS(&e1_1);
 8004e88:	48a4      	ldr	r0, [pc, #656]	@ (800511c <main+0x864>)
 8004e8a:	f7fd f947 	bl	800211c <animation_e1_dieS>

				if ( e1_1.isAlive==0&& e1_1.animationDie>=11 ){
 8004e8e:	4ba3      	ldr	r3, [pc, #652]	@ (800511c <main+0x864>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d111      	bne.n	8004eba <main+0x602>
 8004e96:	4ba1      	ldr	r3, [pc, #644]	@ (800511c <main+0x864>)
 8004e98:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004e9c:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	db07      	blt.n	8004eba <main+0x602>
					nivelActual1=NIVEL2;
 8004eaa:	4b9b      	ldr	r3, [pc, #620]	@ (8005118 <main+0x860>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004eb0:	4b9b      	ldr	r3, [pc, #620]	@ (8005120 <main+0x868>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
					initLevelP1();
 8004eb6:	f7ff fbb7 	bl	8004628 <initLevelP1>
				}
			}

			if (nivelActual1==NIVEL2){
 8004eba:	4b97      	ldr	r3, [pc, #604]	@ (8005118 <main+0x860>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d146      	bne.n	8004f52 <main+0x69a>
				if (e2_1.isAlive==1){
 8004ec4:	4b97      	ldr	r3, [pc, #604]	@ (8005124 <main+0x86c>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d126      	bne.n	8004f1a <main+0x662>
					moveE2(&e2_1, &p1);
 8004ecc:	4996      	ldr	r1, [pc, #600]	@ (8005128 <main+0x870>)
 8004ece:	4895      	ldr	r0, [pc, #596]	@ (8005124 <main+0x86c>)
 8004ed0:	f7fd fdd2 	bl	8002a78 <moveE2>
					if (nivelActual2!=NIVEL2){
 8004ed4:	4b95      	ldr	r3, [pc, #596]	@ (800512c <main+0x874>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d00a      	beq.n	8004ef4 <main+0x63c>
					e2_1.delay+=1000;}//0.5
 8004ede:	4b91      	ldr	r3, [pc, #580]	@ (8005124 <main+0x86c>)
 8004ee0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004ee4:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8005130 <main+0x878>
 8004ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004eec:	4b8d      	ldr	r3, [pc, #564]	@ (8005124 <main+0x86c>)
 8004eee:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8004ef2:	e009      	b.n	8004f08 <main+0x650>
					else{
						e2_1.delay+=1;
 8004ef4:	4b8b      	ldr	r3, [pc, #556]	@ (8005124 <main+0x86c>)
 8004ef6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f02:	4b88      	ldr	r3, [pc, #544]	@ (8005124 <main+0x86c>)
 8004f04:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
					}
					E2_Appear(&e2_1);
 8004f08:	4886      	ldr	r0, [pc, #536]	@ (8005124 <main+0x86c>)
 8004f0a:	f7fd fecd 	bl	8002ca8 <E2_Appear>
					E2_Hurt(&e2_1);
 8004f0e:	4885      	ldr	r0, [pc, #532]	@ (8005124 <main+0x86c>)
 8004f10:	f7fd ff12 	bl	8002d38 <E2_Hurt>
					E2_HurtS(&e2_1);
 8004f14:	4883      	ldr	r0, [pc, #524]	@ (8005124 <main+0x86c>)
 8004f16:	f7fd ff5d 	bl	8002dd4 <E2_HurtS>
				}
				E2_Die(&e2_1);
 8004f1a:	4882      	ldr	r0, [pc, #520]	@ (8005124 <main+0x86c>)
 8004f1c:	f7fd ff9c 	bl	8002e58 <E2_Die>
				E2_DieS(&e2_1);
 8004f20:	4880      	ldr	r0, [pc, #512]	@ (8005124 <main+0x86c>)
 8004f22:	f7fd fff7 	bl	8002f14 <E2_DieS>
				if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8004f26:	4b7f      	ldr	r3, [pc, #508]	@ (8005124 <main+0x86c>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d111      	bne.n	8004f52 <main+0x69a>
 8004f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8005124 <main+0x86c>)
 8004f30:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004f34:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	db07      	blt.n	8004f52 <main+0x69a>
					nivelActual1=NIVEL3;
 8004f42:	4b75      	ldr	r3, [pc, #468]	@ (8005118 <main+0x860>)
 8004f44:	2202      	movs	r2, #2
 8004f46:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004f48:	4b75      	ldr	r3, [pc, #468]	@ (8005120 <main+0x868>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
					initLevelP1();
 8004f4e:	f7ff fb6b 	bl	8004628 <initLevelP1>
				}
			}
			if (nivelActual1==NIVEL3){
 8004f52:	4b71      	ldr	r3, [pc, #452]	@ (8005118 <main+0x860>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d118      	bne.n	8004f8e <main+0x6d6>
				V_line(160, 0, 240, 0x0000);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	22f0      	movs	r2, #240	@ 0xf0
 8004f60:	2100      	movs	r1, #0
 8004f62:	20a0      	movs	r0, #160	@ 0xa0
 8004f64:	f7fc fcc0 	bl	80018e8 <V_line>
				E3_MoveX(&e3_1);
 8004f68:	4872      	ldr	r0, [pc, #456]	@ (8005134 <main+0x87c>)
 8004f6a:	f7fe fc53 	bl	8003814 <E3_MoveX>
				E3_Eye(&e3_1);
 8004f6e:	4871      	ldr	r0, [pc, #452]	@ (8005134 <main+0x87c>)
 8004f70:	f7fe f976 	bl	8003260 <E3_Eye>
				E3_EyeS(&e3_1);
 8004f74:	486f      	ldr	r0, [pc, #444]	@ (8005134 <main+0x87c>)
 8004f76:	f7fe f9ed 	bl	8003354 <E3_EyeS>
				E3_FireMove(&e3_1,&p1);
 8004f7a:	496b      	ldr	r1, [pc, #428]	@ (8005128 <main+0x870>)
 8004f7c:	486d      	ldr	r0, [pc, #436]	@ (8005134 <main+0x87c>)
 8004f7e:	f7fe fa47 	bl	8003410 <E3_FireMove>
				E3_Hitbox(&e3_1);
 8004f82:	486c      	ldr	r0, [pc, #432]	@ (8005134 <main+0x87c>)
 8004f84:	f7fe fb90 	bl	80036a8 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8004f88:	486a      	ldr	r0, [pc, #424]	@ (8005134 <main+0x87c>)
 8004f8a:	f7fe fb55 	bl	8003638 <E3_FireAnimation>
			}

			if (nivelActual2==NIVEL1){
 8004f8e:	4b67      	ldr	r3, [pc, #412]	@ (800512c <main+0x874>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d125      	bne.n	8004fe4 <main+0x72c>
				if(e1_4.isAlive==1){
 8004f98:	4b67      	ldr	r3, [pc, #412]	@ (8005138 <main+0x880>)
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <main+0x6f4>
					animation_e1(&e1_4);
 8004fa0:	4865      	ldr	r0, [pc, #404]	@ (8005138 <main+0x880>)
 8004fa2:	f7fc ffa1 	bl	8001ee8 <animation_e1>
					animation_e1_control(&e1_4);}
 8004fa6:	4864      	ldr	r0, [pc, #400]	@ (8005138 <main+0x880>)
 8004fa8:	f7fc ff4a 	bl	8001e40 <animation_e1_control>
				animation_e1_die(&e1_4);
 8004fac:	4862      	ldr	r0, [pc, #392]	@ (8005138 <main+0x880>)
 8004fae:	f7fd f863 	bl	8002078 <animation_e1_die>
				animation_e1_dieS(&e1_4);
 8004fb2:	4861      	ldr	r0, [pc, #388]	@ (8005138 <main+0x880>)
 8004fb4:	f7fd f8b2 	bl	800211c <animation_e1_dieS>

				if (e1_4.isAlive==0 && e1_4.animationDie>=11){
 8004fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8005138 <main+0x880>)
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d111      	bne.n	8004fe4 <main+0x72c>
 8004fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8005138 <main+0x880>)
 8004fc2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004fc6:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd2:	db07      	blt.n	8004fe4 <main+0x72c>
					nivelActual2=NIVEL2;
 8004fd4:	4b55      	ldr	r3, [pc, #340]	@ (800512c <main+0x874>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
					IniciarLevel2=1;
 8004fda:	4b58      	ldr	r3, [pc, #352]	@ (800513c <main+0x884>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
					initLevelP2();
 8004fe0:	f7ff fbaa 	bl	8004738 <initLevelP2>
				}
			}

			if (nivelActual2==NIVEL2){
 8004fe4:	4b51      	ldr	r3, [pc, #324]	@ (800512c <main+0x874>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d146      	bne.n	800507c <main+0x7c4>
				if (e2_2.isAlive==1){
 8004fee:	4b54      	ldr	r3, [pc, #336]	@ (8005140 <main+0x888>)
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d126      	bne.n	8005044 <main+0x78c>
					moveE2(&e2_2, &p2);
 8004ff6:	4953      	ldr	r1, [pc, #332]	@ (8005144 <main+0x88c>)
 8004ff8:	4851      	ldr	r0, [pc, #324]	@ (8005140 <main+0x888>)
 8004ffa:	f7fd fd3d 	bl	8002a78 <moveE2>
					if (nivelActual1!=NIVEL2){
 8004ffe:	4b46      	ldr	r3, [pc, #280]	@ (8005118 <main+0x860>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d00a      	beq.n	800501e <main+0x766>
						e2_2.delay+=1000;
 8005008:	4b4d      	ldr	r3, [pc, #308]	@ (8005140 <main+0x888>)
 800500a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800500e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8005130 <main+0x878>
 8005012:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005016:	4b4a      	ldr	r3, [pc, #296]	@ (8005140 <main+0x888>)
 8005018:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 800501c:	e009      	b.n	8005032 <main+0x77a>
					}else{
					e2_2.delay+=1;}
 800501e:	4b48      	ldr	r3, [pc, #288]	@ (8005140 <main+0x888>)
 8005020:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800502c:	4b44      	ldr	r3, [pc, #272]	@ (8005140 <main+0x888>)
 800502e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
					E2_Appear(&e2_2);
 8005032:	4843      	ldr	r0, [pc, #268]	@ (8005140 <main+0x888>)
 8005034:	f7fd fe38 	bl	8002ca8 <E2_Appear>
					E2_Hurt(&e2_2);
 8005038:	4841      	ldr	r0, [pc, #260]	@ (8005140 <main+0x888>)
 800503a:	f7fd fe7d 	bl	8002d38 <E2_Hurt>
					E2_HurtS(&e2_2);
 800503e:	4840      	ldr	r0, [pc, #256]	@ (8005140 <main+0x888>)
 8005040:	f7fd fec8 	bl	8002dd4 <E2_HurtS>
				}
				E2_Die(&e2_2);
 8005044:	483e      	ldr	r0, [pc, #248]	@ (8005140 <main+0x888>)
 8005046:	f7fd ff07 	bl	8002e58 <E2_Die>
				E2_DieS(&e2_2);
 800504a:	483d      	ldr	r0, [pc, #244]	@ (8005140 <main+0x888>)
 800504c:	f7fd ff62 	bl	8002f14 <E2_DieS>
				if (e2_2.isAlive==0&&e2_2.animationDie>=6){
 8005050:	4b3b      	ldr	r3, [pc, #236]	@ (8005140 <main+0x888>)
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d111      	bne.n	800507c <main+0x7c4>
 8005058:	4b39      	ldr	r3, [pc, #228]	@ (8005140 <main+0x888>)
 800505a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800505e:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8005062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506a:	db07      	blt.n	800507c <main+0x7c4>
					nivelActual2=NIVEL3;
 800506c:	4b2f      	ldr	r3, [pc, #188]	@ (800512c <main+0x874>)
 800506e:	2202      	movs	r2, #2
 8005070:	701a      	strb	r2, [r3, #0]
					IniciarLevel2=1;
 8005072:	4b32      	ldr	r3, [pc, #200]	@ (800513c <main+0x884>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
					initLevelP2();
 8005078:	f7ff fb5e 	bl	8004738 <initLevelP2>
				}
			}

			if (nivelActual2==NIVEL3){
 800507c:	4b2b      	ldr	r3, [pc, #172]	@ (800512c <main+0x874>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d118      	bne.n	80050b8 <main+0x800>
				V_line(160, 0, 240, 0x0000);
 8005086:	2300      	movs	r3, #0
 8005088:	22f0      	movs	r2, #240	@ 0xf0
 800508a:	2100      	movs	r1, #0
 800508c:	20a0      	movs	r0, #160	@ 0xa0
 800508e:	f7fc fc2b 	bl	80018e8 <V_line>
				E3_MoveX(&e3_2);
 8005092:	482d      	ldr	r0, [pc, #180]	@ (8005148 <main+0x890>)
 8005094:	f7fe fbbe 	bl	8003814 <E3_MoveX>
				E3_Eye(&e3_2);
 8005098:	482b      	ldr	r0, [pc, #172]	@ (8005148 <main+0x890>)
 800509a:	f7fe f8e1 	bl	8003260 <E3_Eye>
				E3_EyeS(&e3_2);
 800509e:	482a      	ldr	r0, [pc, #168]	@ (8005148 <main+0x890>)
 80050a0:	f7fe f958 	bl	8003354 <E3_EyeS>
				E3_FireMove(&e3_2,&p2);
 80050a4:	4927      	ldr	r1, [pc, #156]	@ (8005144 <main+0x88c>)
 80050a6:	4828      	ldr	r0, [pc, #160]	@ (8005148 <main+0x890>)
 80050a8:	f7fe f9b2 	bl	8003410 <E3_FireMove>
				E3_Hitbox(&e3_2);
 80050ac:	4826      	ldr	r0, [pc, #152]	@ (8005148 <main+0x890>)
 80050ae:	f7fe fafb 	bl	80036a8 <E3_Hitbox>
				E3_FireAnimation(&e3_2);
 80050b2:	4825      	ldr	r0, [pc, #148]	@ (8005148 <main+0x890>)
 80050b4:	f7fe fac0 	bl	8003638 <E3_FireAnimation>
			}


			PlayerAttackAnimation(&p1);
 80050b8:	481b      	ldr	r0, [pc, #108]	@ (8005128 <main+0x870>)
 80050ba:	f7fe ff85 	bl	8003fc8 <PlayerAttackAnimation>
			PlayerAttackSound(&p1);
 80050be:	481a      	ldr	r0, [pc, #104]	@ (8005128 <main+0x870>)
 80050c0:	f7ff f824 	bl	800410c <PlayerAttackSound>
			PlayerDamageAnimation(&p1);
 80050c4:	4818      	ldr	r0, [pc, #96]	@ (8005128 <main+0x870>)
 80050c6:	f7ff f87b 	bl	80041c0 <PlayerDamageAnimation>
			PlayerDamageSound(&p1);
 80050ca:	4817      	ldr	r0, [pc, #92]	@ (8005128 <main+0x870>)
 80050cc:	f7ff f91a 	bl	8004304 <PlayerDamageSound>
			PlayerDieAnimation(&p1);
 80050d0:	4815      	ldr	r0, [pc, #84]	@ (8005128 <main+0x870>)
 80050d2:	f7ff f955 	bl	8004380 <PlayerDieAnimation>
			PlayerDieSound(&p1);
 80050d6:	4814      	ldr	r0, [pc, #80]	@ (8005128 <main+0x870>)
 80050d8:	f7ff f9b0 	bl	800443c <PlayerDieSound>


			PlayerAttackAnimation(&p2);
 80050dc:	4819      	ldr	r0, [pc, #100]	@ (8005144 <main+0x88c>)
 80050de:	f7fe ff73 	bl	8003fc8 <PlayerAttackAnimation>
			PlayerAttackSound(&p2);
 80050e2:	4818      	ldr	r0, [pc, #96]	@ (8005144 <main+0x88c>)
 80050e4:	f7ff f812 	bl	800410c <PlayerAttackSound>
			PlayerDamageAnimation(&p2);
 80050e8:	4816      	ldr	r0, [pc, #88]	@ (8005144 <main+0x88c>)
 80050ea:	f7ff f869 	bl	80041c0 <PlayerDamageAnimation>
			PlayerDamageSound(&p2);
 80050ee:	4815      	ldr	r0, [pc, #84]	@ (8005144 <main+0x88c>)
 80050f0:	f7ff f908 	bl	8004304 <PlayerDamageSound>
			PlayerDieAnimation(&p2);
 80050f4:	4813      	ldr	r0, [pc, #76]	@ (8005144 <main+0x88c>)
 80050f6:	f7ff f943 	bl	8004380 <PlayerDieAnimation>
			PlayerDieSound(&p2);
 80050fa:	4812      	ldr	r0, [pc, #72]	@ (8005144 <main+0x88c>)
 80050fc:	f7ff f99e 	bl	800443c <PlayerDieSound>
			break;}
 8005100:	e008      	b.n	8005114 <main+0x85c>
		case PAUSA:
			//LCD_Bitmap(0, 0, 320, 240, pausa_menu);
			break;
		case WIN1:
			CargarMultiplesBitmaps("p1w");
 8005102:	4812      	ldr	r0, [pc, #72]	@ (800514c <main+0x894>)
 8005104:	f7ff fba4 	bl	8004850 <CargarMultiplesBitmaps>
			break;
 8005108:	e004      	b.n	8005114 <main+0x85c>
		case WIN2:
			CargarMultiplesBitmaps("p2w");
 800510a:	4811      	ldr	r0, [pc, #68]	@ (8005150 <main+0x898>)
 800510c:	f7ff fba0 	bl	8004850 <CargarMultiplesBitmaps>
			break;
 8005110:	e000      	b.n	8005114 <main+0x85c>
		default:
			break;
 8005112:	bf00      	nop
		if (repintarFondo) {
 8005114:	e518      	b.n	8004b48 <main+0x290>
 8005116:	bf00      	nop
 8005118:	2001cb29 	.word	0x2001cb29
 800511c:	2001c8b4 	.word	0x2001c8b4
 8005120:	2001cb2c 	.word	0x2001cb2c
 8005124:	2001c9ec 	.word	0x2001c9ec
 8005128:	2001c7cc 	.word	0x2001c7cc
 800512c:	2001cb2a 	.word	0x2001cb2a
 8005130:	447a0000 	.word	0x447a0000
 8005134:	2001ca74 	.word	0x2001ca74
 8005138:	2001c950 	.word	0x2001c950
 800513c:	2001cb30 	.word	0x2001cb30
 8005140:	2001ca30 	.word	0x2001ca30
 8005144:	2001c840 	.word	0x2001c840
 8005148:	2001cacc 	.word	0x2001cacc
 800514c:	0800d784 	.word	0x0800d784
 8005150:	0800d788 	.word	0x0800d788

08005154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b094      	sub	sp, #80	@ 0x50
 8005158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800515a:	f107 031c 	add.w	r3, r7, #28
 800515e:	2234      	movs	r2, #52	@ 0x34
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f007 fe2c 	bl	800cdc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005168:	f107 0308 	add.w	r3, r7, #8
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005178:	2300      	movs	r3, #0
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	4b29      	ldr	r3, [pc, #164]	@ (8005224 <SystemClock_Config+0xd0>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	4a28      	ldr	r2, [pc, #160]	@ (8005224 <SystemClock_Config+0xd0>)
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005186:	6413      	str	r3, [r2, #64]	@ 0x40
 8005188:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <SystemClock_Config+0xd0>)
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4b23      	ldr	r3, [pc, #140]	@ (8005228 <SystemClock_Config+0xd4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80051a0:	4a21      	ldr	r2, [pc, #132]	@ (8005228 <SystemClock_Config+0xd4>)
 80051a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005228 <SystemClock_Config+0xd4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051b8:	2301      	movs	r3, #1
 80051ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051bc:	2310      	movs	r3, #16
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051c0:	2302      	movs	r3, #2
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051c4:	2300      	movs	r3, #0
 80051c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80051c8:	2308      	movs	r3, #8
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80051cc:	2350      	movs	r3, #80	@ 0x50
 80051ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051d0:	2302      	movs	r3, #2
 80051d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80051d4:	2302      	movs	r3, #2
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80051d8:	2302      	movs	r3, #2
 80051da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051dc:	f107 031c 	add.w	r3, r7, #28
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 f81d 	bl	8007220 <HAL_RCC_OscConfig>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80051ec:	f000 fed6 	bl	8005f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051f0:	230f      	movs	r3, #15
 80051f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051f4:	2302      	movs	r3, #2
 80051f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005200:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005206:	f107 0308 	add.w	r3, r7, #8
 800520a:	2102      	movs	r1, #2
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fd43 	bl	8006c98 <HAL_RCC_ClockConfig>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8005218:	f000 fec0 	bl	8005f9c <Error_Handler>
  }
}
 800521c:	bf00      	nop
 800521e:	3750      	adds	r7, #80	@ 0x50
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40023800 	.word	0x40023800
 8005228:	40007000 	.word	0x40007000

0800522c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005230:	4b17      	ldr	r3, [pc, #92]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005232:	4a18      	ldr	r2, [pc, #96]	@ (8005294 <MX_SPI1_Init+0x68>)
 8005234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005236:	4b16      	ldr	r3, [pc, #88]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800523c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800523e:	4b14      	ldr	r3, [pc, #80]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005244:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005246:	2200      	movs	r2, #0
 8005248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800524a:	4b11      	ldr	r3, [pc, #68]	@ (8005290 <MX_SPI1_Init+0x64>)
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005250:	4b0f      	ldr	r3, [pc, #60]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005252:	2200      	movs	r2, #0
 8005254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005256:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800525c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800525e:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005260:	2210      	movs	r2, #16
 8005262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005264:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005266:	2200      	movs	r2, #0
 8005268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800526a:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <MX_SPI1_Init+0x64>)
 800526c:	2200      	movs	r2, #0
 800526e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005270:	4b07      	ldr	r3, [pc, #28]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005272:	2200      	movs	r2, #0
 8005274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <MX_SPI1_Init+0x64>)
 8005278:	220a      	movs	r2, #10
 800527a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800527c:	4804      	ldr	r0, [pc, #16]	@ (8005290 <MX_SPI1_Init+0x64>)
 800527e:	f002 fa6d 	bl	800775c <HAL_SPI_Init>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005288:	f000 fe88 	bl	8005f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800528c:	bf00      	nop
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20016b10 	.word	0x20016b10
 8005294:	40013000 	.word	0x40013000

08005298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b096      	sub	sp, #88	@ 0x58
 800529c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800529e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	605a      	str	r2, [r3, #4]
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	611a      	str	r2, [r3, #16]
 80052c6:	615a      	str	r2, [r3, #20]
 80052c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	2220      	movs	r2, #32
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f007 fd75 	bl	800cdc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80052d6:	4b3d      	ldr	r3, [pc, #244]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052d8:	4a3d      	ldr	r2, [pc, #244]	@ (80053d0 <MX_TIM1_Init+0x138>)
 80052da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80052dc:	4b3b      	ldr	r3, [pc, #236]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052de:	224f      	movs	r2, #79	@ 0x4f
 80052e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e2:	4b3a      	ldr	r3, [pc, #232]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80052e8:	4b38      	ldr	r3, [pc, #224]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052f0:	4b36      	ldr	r3, [pc, #216]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052f6:	4b35      	ldr	r3, [pc, #212]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052fc:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <MX_TIM1_Init+0x134>)
 80052fe:	2200      	movs	r2, #0
 8005300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005302:	4832      	ldr	r0, [pc, #200]	@ (80053cc <MX_TIM1_Init+0x134>)
 8005304:	f002 fe82 	bl	800800c <HAL_TIM_Base_Init>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800530e:	f000 fe45 	bl	8005f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005318:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800531c:	4619      	mov	r1, r3
 800531e:	482b      	ldr	r0, [pc, #172]	@ (80053cc <MX_TIM1_Init+0x134>)
 8005320:	f003 f8a6 	bl	8008470 <HAL_TIM_ConfigClockSource>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800532a:	f000 fe37 	bl	8005f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800532e:	4827      	ldr	r0, [pc, #156]	@ (80053cc <MX_TIM1_Init+0x134>)
 8005330:	f002 febb 	bl	80080aa <HAL_TIM_PWM_Init>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800533a:	f000 fe2f 	bl	8005f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533e:	2300      	movs	r3, #0
 8005340:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005342:	2300      	movs	r3, #0
 8005344:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005346:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800534a:	4619      	mov	r1, r3
 800534c:	481f      	ldr	r0, [pc, #124]	@ (80053cc <MX_TIM1_Init+0x134>)
 800534e:	f003 fc73 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005358:	f000 fe20 	bl	8005f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800535c:	2360      	movs	r3, #96	@ 0x60
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800536c:	2300      	movs	r3, #0
 800536e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005378:	220c      	movs	r2, #12
 800537a:	4619      	mov	r1, r3
 800537c:	4813      	ldr	r0, [pc, #76]	@ (80053cc <MX_TIM1_Init+0x134>)
 800537e:	f002 ffb5 	bl	80082ec <HAL_TIM_PWM_ConfigChannel>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8005388:	f000 fe08 	bl	8005f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800538c:	2300      	movs	r3, #0
 800538e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4807      	ldr	r0, [pc, #28]	@ (80053cc <MX_TIM1_Init+0x134>)
 80053b0:	f003 fcbe 	bl	8008d30 <HAL_TIMEx_ConfigBreakDeadTime>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80053ba:	f000 fdef 	bl	8005f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80053be:	4803      	ldr	r0, [pc, #12]	@ (80053cc <MX_TIM1_Init+0x134>)
 80053c0:	f000 fe98 	bl	80060f4 <HAL_TIM_MspPostInit>

}
 80053c4:	bf00      	nop
 80053c6:	3758      	adds	r7, #88	@ 0x58
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20017ba0 	.word	0x20017ba0
 80053d0:	40010000 	.word	0x40010000

080053d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08e      	sub	sp, #56	@ 0x38
 80053d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053e8:	f107 0320 	add.w	r3, r7, #32
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	611a      	str	r2, [r3, #16]
 8005400:	615a      	str	r2, [r3, #20]
 8005402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005404:	4b2c      	ldr	r3, [pc, #176]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005406:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800540a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800540c:	4b2a      	ldr	r3, [pc, #168]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 800540e:	224f      	movs	r2, #79	@ 0x4f
 8005410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005412:	4b29      	ldr	r3, [pc, #164]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005414:	2200      	movs	r2, #0
 8005416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8005418:	4b27      	ldr	r3, [pc, #156]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 800541a:	4a28      	ldr	r2, [pc, #160]	@ (80054bc <MX_TIM2_Init+0xe8>)
 800541c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800541e:	4b26      	ldr	r3, [pc, #152]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005420:	2200      	movs	r2, #0
 8005422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005424:	4b24      	ldr	r3, [pc, #144]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005426:	2200      	movs	r2, #0
 8005428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800542a:	4823      	ldr	r0, [pc, #140]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 800542c:	f002 fdee 	bl	800800c <HAL_TIM_Base_Init>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005436:	f000 fdb1 	bl	8005f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800543a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005440:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005444:	4619      	mov	r1, r3
 8005446:	481c      	ldr	r0, [pc, #112]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005448:	f003 f812 	bl	8008470 <HAL_TIM_ConfigClockSource>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005452:	f000 fda3 	bl	8005f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005456:	4818      	ldr	r0, [pc, #96]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005458:	f002 fe27 	bl	80080aa <HAL_TIM_PWM_Init>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005462:	f000 fd9b 	bl	8005f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800546e:	f107 0320 	add.w	r3, r7, #32
 8005472:	4619      	mov	r1, r3
 8005474:	4810      	ldr	r0, [pc, #64]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 8005476:	f003 fbdf 	bl	8008c38 <HAL_TIMEx_MasterConfigSynchronization>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005480:	f000 fd8c 	bl	8005f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005484:	2360      	movs	r3, #96	@ 0x60
 8005486:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005494:	1d3b      	adds	r3, r7, #4
 8005496:	220c      	movs	r2, #12
 8005498:	4619      	mov	r1, r3
 800549a:	4807      	ldr	r0, [pc, #28]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 800549c:	f002 ff26 	bl	80082ec <HAL_TIM_PWM_ConfigChannel>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80054a6:	f000 fd79 	bl	8005f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80054aa:	4803      	ldr	r0, [pc, #12]	@ (80054b8 <MX_TIM2_Init+0xe4>)
 80054ac:	f000 fe22 	bl	80060f4 <HAL_TIM_MspPostInit>

}
 80054b0:	bf00      	nop
 80054b2:	3738      	adds	r7, #56	@ 0x38
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20017be8 	.word	0x20017be8
 80054bc:	000f4240 	.word	0x000f4240

080054c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80054c4:	4b11      	ldr	r3, [pc, #68]	@ (800550c <MX_UART5_Init+0x4c>)
 80054c6:	4a12      	ldr	r2, [pc, #72]	@ (8005510 <MX_UART5_Init+0x50>)
 80054c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80054ca:	4b10      	ldr	r3, [pc, #64]	@ (800550c <MX_UART5_Init+0x4c>)
 80054cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80054d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80054d2:	4b0e      	ldr	r3, [pc, #56]	@ (800550c <MX_UART5_Init+0x4c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80054d8:	4b0c      	ldr	r3, [pc, #48]	@ (800550c <MX_UART5_Init+0x4c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <MX_UART5_Init+0x4c>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80054e4:	4b09      	ldr	r3, [pc, #36]	@ (800550c <MX_UART5_Init+0x4c>)
 80054e6:	220c      	movs	r2, #12
 80054e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ea:	4b08      	ldr	r3, [pc, #32]	@ (800550c <MX_UART5_Init+0x4c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <MX_UART5_Init+0x4c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80054f6:	4805      	ldr	r0, [pc, #20]	@ (800550c <MX_UART5_Init+0x4c>)
 80054f8:	f003 fc6c 	bl	8008dd4 <HAL_UART_Init>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005502:	f000 fd4b 	bl	8005f9c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20017c30 	.word	0x20017c30
 8005510:	40005000 	.word	0x40005000

08005514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005518:	4b11      	ldr	r3, [pc, #68]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 800551a:	4a12      	ldr	r2, [pc, #72]	@ (8005564 <MX_USART2_UART_Init+0x50>)
 800551c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800551e:	4b10      	ldr	r3, [pc, #64]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 8005520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005526:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800552c:	4b0c      	ldr	r3, [pc, #48]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005532:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 8005534:	2200      	movs	r2, #0
 8005536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005538:	4b09      	ldr	r3, [pc, #36]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 800553a:	220c      	movs	r2, #12
 800553c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 8005540:	2200      	movs	r2, #0
 8005542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005544:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800554a:	4805      	ldr	r0, [pc, #20]	@ (8005560 <MX_USART2_UART_Init+0x4c>)
 800554c:	f003 fc42 	bl	8008dd4 <HAL_UART_Init>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005556:	f000 fd21 	bl	8005f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20017c78 	.word	0x20017c78
 8005564:	40004400 	.word	0x40004400

08005568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	@ 0x28
 800556c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556e:	f107 0314 	add.w	r3, r7, #20
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	609a      	str	r2, [r3, #8]
 800557a:	60da      	str	r2, [r3, #12]
 800557c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	4b4c      	ldr	r3, [pc, #304]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	4a4b      	ldr	r2, [pc, #300]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 8005588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558c:	6313      	str	r3, [r2, #48]	@ 0x30
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b45      	ldr	r3, [pc, #276]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	4a44      	ldr	r2, [pc, #272]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055a4:	f043 0304 	orr.w	r3, r3, #4
 80055a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055aa:	4b42      	ldr	r3, [pc, #264]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	4b3e      	ldr	r3, [pc, #248]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055be:	4a3d      	ldr	r2, [pc, #244]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055c6:	4b3b      	ldr	r3, [pc, #236]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	607b      	str	r3, [r7, #4]
 80055d6:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	4a36      	ldr	r2, [pc, #216]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055dc:	f043 0302 	orr.w	r3, r3, #2
 80055e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e2:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	4b30      	ldr	r3, [pc, #192]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f6:	4a2f      	ldr	r2, [pc, #188]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 80055f8:	f043 0308 	orr.w	r3, r3, #8
 80055fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fe:	4b2d      	ldr	r3, [pc, #180]	@ (80056b4 <MX_GPIO_Init+0x14c>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800560a:	2200      	movs	r2, #0
 800560c:	2182      	movs	r1, #130	@ 0x82
 800560e:	482a      	ldr	r0, [pc, #168]	@ (80056b8 <MX_GPIO_Init+0x150>)
 8005610:	f001 fb28 	bl	8006c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8005614:	2200      	movs	r2, #0
 8005616:	f240 7113 	movw	r1, #1811	@ 0x713
 800561a:	4828      	ldr	r0, [pc, #160]	@ (80056bc <MX_GPIO_Init+0x154>)
 800561c:	f001 fb22 	bl	8006c64 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8005620:	2200      	movs	r2, #0
 8005622:	f240 4139 	movw	r1, #1081	@ 0x439
 8005626:	4826      	ldr	r0, [pc, #152]	@ (80056c0 <MX_GPIO_Init+0x158>)
 8005628:	f001 fb1c 	bl	8006c64 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800562c:	2201      	movs	r2, #1
 800562e:	2140      	movs	r1, #64	@ 0x40
 8005630:	4823      	ldr	r0, [pc, #140]	@ (80056c0 <MX_GPIO_Init+0x158>)
 8005632:	f001 fb17 	bl	8006c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8005636:	2382      	movs	r3, #130	@ 0x82
 8005638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800563a:	2301      	movs	r3, #1
 800563c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005642:	2302      	movs	r3, #2
 8005644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	4619      	mov	r1, r3
 800564c:	481a      	ldr	r0, [pc, #104]	@ (80056b8 <MX_GPIO_Init+0x150>)
 800564e:	f001 f975 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8005652:	f240 7313 	movw	r3, #1811	@ 0x713
 8005656:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005658:	2301      	movs	r3, #1
 800565a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005660:	2302      	movs	r3, #2
 8005662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005664:	f107 0314 	add.w	r3, r7, #20
 8005668:	4619      	mov	r1, r3
 800566a:	4814      	ldr	r0, [pc, #80]	@ (80056bc <MX_GPIO_Init+0x154>)
 800566c:	f001 f966 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8005670:	f240 4339 	movw	r3, #1081	@ 0x439
 8005674:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005676:	2301      	movs	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800567e:	2302      	movs	r3, #2
 8005680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005682:	f107 0314 	add.w	r3, r7, #20
 8005686:	4619      	mov	r1, r3
 8005688:	480d      	ldr	r0, [pc, #52]	@ (80056c0 <MX_GPIO_Init+0x158>)
 800568a:	f001 f957 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 800568e:	2340      	movs	r3, #64	@ 0x40
 8005690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005692:	2301      	movs	r3, #1
 8005694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800569a:	2301      	movs	r3, #1
 800569c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	4619      	mov	r1, r3
 80056a4:	4806      	ldr	r0, [pc, #24]	@ (80056c0 <MX_GPIO_Init+0x158>)
 80056a6:	f001 f949 	bl	800693c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80056aa:	bf00      	nop
 80056ac:	3728      	adds	r7, #40	@ 0x28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40020800 	.word	0x40020800
 80056bc:	40020000 	.word	0x40020000
 80056c0:	40020400 	.word	0x40020400

080056c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b089      	sub	sp, #36	@ 0x24
 80056c8:	af06      	add	r7, sp, #24
 80056ca:	6078      	str	r0, [r7, #4]
	if (modo==1){
 80056cc:	4b97      	ldr	r3, [pc, #604]	@ (800592c <HAL_UART_RxCpltCallback+0x268>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d102      	bne.n	80056da <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 80056d4:	4896      	ldr	r0, [pc, #600]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80056d6:	f7fe fa5f 	bl	8003b98 <HitboxPlayer>
	if (modo==2){
 80056da:	4b94      	ldr	r3, [pc, #592]	@ (800592c <HAL_UART_RxCpltCallback+0x268>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d105      	bne.n	80056ee <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 80056e2:	4893      	ldr	r0, [pc, #588]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80056e4:	f7fe fa58 	bl	8003b98 <HitboxPlayer>
		HitboxPlayer(&p2);
 80056e8:	4892      	ldr	r0, [pc, #584]	@ (8005934 <HAL_UART_RxCpltCallback+0x270>)
 80056ea:	f7fe fa55 	bl	8003b98 <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 80056ee:	4b92      	ldr	r3, [pc, #584]	@ (8005938 <HAL_UART_RxCpltCallback+0x274>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b64      	cmp	r3, #100	@ 0x64
 80056f4:	d175      	bne.n	80057e2 <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80056f6:	4b8e      	ldr	r3, [pc, #568]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d171      	bne.n	80057e2 <HAL_UART_RxCpltCallback+0x11e>
 80056fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d16d      	bne.n	80057e2 <HAL_UART_RxCpltCallback+0x11e>
 8005706:	4b8a      	ldr	r3, [pc, #552]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d169      	bne.n	80057e2 <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800570e:	4b88      	ldr	r3, [pc, #544]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b87      	ldr	r3, [pc, #540]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	1c58      	adds	r0, r3, #1
 800571c:	4b84      	ldr	r3, [pc, #528]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b83      	ldr	r3, [pc, #524]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	085b      	lsrs	r3, r3, #1
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	4b81      	ldr	r3, [pc, #516]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	4b7f      	ldr	r3, [pc, #508]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800573a:	9400      	str	r4, [sp, #0]
 800573c:	f7fc f93c 	bl	80019b8 <FillRect>
			p1.direction=2;
 8005740:	4b7b      	ldr	r3, [pc, #492]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005742:	2202      	movs	r2, #2
 8005744:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8005746:	2100      	movs	r1, #0
 8005748:	4879      	ldr	r0, [pc, #484]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800574a:	f7fe f95d 	bl	8003a08 <playerCanMove>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d017      	beq.n	8005784 <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 8005754:	4b76      	ldr	r3, [pc, #472]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4b75      	ldr	r3, [pc, #468]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	4413      	add	r3, r2
 800575e:	4a74      	ldr	r2, [pc, #464]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005760:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 8005762:	4b73      	ldr	r3, [pc, #460]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	2b09      	cmp	r3, #9
 8005768:	d805      	bhi.n	8005776 <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 800576a:	4b71      	ldr	r3, [pc, #452]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800576c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800576e:	3301      	adds	r3, #1
 8005770:	4a6f      	ldr	r2, [pc, #444]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005772:	6513      	str	r3, [r2, #80]	@ 0x50
 8005774:	e002      	b.n	800577c <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 8005776:	4b6e      	ldr	r3, [pc, #440]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005778:	2200      	movs	r2, #0
 800577a:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 800577c:	486c      	ldr	r0, [pc, #432]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800577e:	f7fe fba1 	bl	8003ec4 <PlayerAnimation>
 8005782:	e02e      	b.n	80057e2 <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1,0xFE8B);
 8005784:	4b6a      	ldr	r3, [pc, #424]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b69      	ldr	r3, [pc, #420]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	1c58      	adds	r0, r3, #1
 8005792:	4b67      	ldr	r3, [pc, #412]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	4b66      	ldr	r3, [pc, #408]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	4b63      	ldr	r3, [pc, #396]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	4b62      	ldr	r3, [pc, #392]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80057b0:	9400      	str	r4, [sp, #0]
 80057b2:	f7fc f901 	bl	80019b8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 80057b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3b08      	subs	r3, #8
 80057bc:	4618      	mov	r0, r3
 80057be:	4b5c      	ldr	r3, [pc, #368]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	3b0c      	subs	r3, #12
 80057c4:	4619      	mov	r1, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	230a      	movs	r3, #10
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	4b59      	ldr	r3, [pc, #356]	@ (800593c <HAL_UART_RxCpltCallback+0x278>)
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	231a      	movs	r3, #26
 80057dc:	2212      	movs	r2, #18
 80057de:	f7fc f99b 	bl	8001b18 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 80057e2:	4b55      	ldr	r3, [pc, #340]	@ (8005938 <HAL_UART_RxCpltCallback+0x274>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b75      	cmp	r3, #117	@ 0x75
 80057e8:	d15c      	bne.n	80058a4 <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80057ea:	4b51      	ldr	r3, [pc, #324]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d158      	bne.n	80058a4 <HAL_UART_RxCpltCallback+0x1e0>
 80057f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d154      	bne.n	80058a4 <HAL_UART_RxCpltCallback+0x1e0>
 80057fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d150      	bne.n	80058a4 <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8005802:	4b4b      	ldr	r3, [pc, #300]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	1c58      	adds	r0, r3, #1
 8005810:	4b47      	ldr	r3, [pc, #284]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	4b46      	ldr	r3, [pc, #280]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	4b44      	ldr	r3, [pc, #272]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	4b42      	ldr	r3, [pc, #264]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800582e:	9400      	str	r4, [sp, #0]
 8005830:	f7fc f8c2 	bl	80019b8 <FillRect>
			p1.direction=0;
 8005834:	4b3e      	ldr	r3, [pc, #248]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005836:	2200      	movs	r2, #0
 8005838:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 800583a:	2102      	movs	r1, #2
 800583c:	483c      	ldr	r0, [pc, #240]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800583e:	f7fe f8e3 	bl	8003a08 <playerCanMove>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d017      	beq.n	8005878 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8005848:	4b39      	ldr	r3, [pc, #228]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b38      	ldr	r3, [pc, #224]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a37      	ldr	r2, [pc, #220]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005854:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8005856:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585a:	2b09      	cmp	r3, #9
 800585c:	d805      	bhi.n	800586a <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 800585e:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	3301      	adds	r3, #1
 8005864:	4a32      	ldr	r2, [pc, #200]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005868:	e002      	b.n	8005870 <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 800586a:	4b31      	ldr	r3, [pc, #196]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800586c:	2200      	movs	r2, #0
 800586e:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 8005870:	482f      	ldr	r0, [pc, #188]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005872:	f7fe fb27 	bl	8003ec4 <PlayerAnimation>
 8005876:	e015      	b.n	80058a4 <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8005878:	4b2d      	ldr	r3, [pc, #180]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3b08      	subs	r3, #8
 800587e:	4618      	mov	r0, r3
 8005880:	4b2b      	ldr	r3, [pc, #172]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	3b0d      	subs	r3, #13
 8005886:	4619      	mov	r1, r3
 8005888:	2300      	movs	r3, #0
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	2300      	movs	r3, #0
 800588e:	9303      	str	r3, [sp, #12]
 8005890:	2300      	movs	r3, #0
 8005892:	9302      	str	r3, [sp, #8]
 8005894:	230a      	movs	r3, #10
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	4b29      	ldr	r3, [pc, #164]	@ (8005940 <HAL_UART_RxCpltCallback+0x27c>)
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	231a      	movs	r3, #26
 800589e:	2212      	movs	r2, #18
 80058a0:	f7fc f93a 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 80058a4:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <HAL_UART_RxCpltCallback+0x274>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b72      	cmp	r3, #114	@ 0x72
 80058aa:	d168      	bne.n	800597e <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80058ac:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d164      	bne.n	800597e <HAL_UART_RxCpltCallback+0x2ba>
 80058b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d160      	bne.n	800597e <HAL_UART_RxCpltCallback+0x2ba>
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d15c      	bne.n	800597e <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80058c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	1c58      	adds	r0, r3, #1
 80058d2:	4b17      	ldr	r3, [pc, #92]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b16      	ldr	r3, [pc, #88]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	4b12      	ldr	r3, [pc, #72]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80058f0:	9400      	str	r4, [sp, #0]
 80058f2:	f7fc f861 	bl	80019b8 <FillRect>
			p1.direction=1;
 80058f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 80058fc:	2101      	movs	r1, #1
 80058fe:	480c      	ldr	r0, [pc, #48]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005900:	f7fe f882 	bl	8003a08 <playerCanMove>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d023      	beq.n	8005952 <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 800590a:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4413      	add	r3, r2
 8005914:	4a06      	ldr	r2, [pc, #24]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005916:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8005918:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 800591a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591c:	2b09      	cmp	r3, #9
 800591e:	d811      	bhi.n	8005944 <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 8005920:	4b03      	ldr	r3, [pc, #12]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005924:	3301      	adds	r3, #1
 8005926:	4a02      	ldr	r2, [pc, #8]	@ (8005930 <HAL_UART_RxCpltCallback+0x26c>)
 8005928:	6493      	str	r3, [r2, #72]	@ 0x48
 800592a:	e00e      	b.n	800594a <HAL_UART_RxCpltCallback+0x286>
 800592c:	2001cb24 	.word	0x2001cb24
 8005930:	2001c7cc 	.word	0x2001c7cc
 8005934:	2001c840 	.word	0x2001c840
 8005938:	2001c7c0 	.word	0x2001c7c0
 800593c:	200148b8 	.word	0x200148b8
 8005940:	20012428 	.word	0x20012428
						} else{
						  p1.animationWalkRight=0;
 8005944:	4b84      	ldr	r3, [pc, #528]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005946:	2200      	movs	r2, #0
 8005948:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 800594a:	4883      	ldr	r0, [pc, #524]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 800594c:	f7fe faba 	bl	8003ec4 <PlayerAnimation>
 8005950:	e015      	b.n	800597e <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8005952:	4b81      	ldr	r3, [pc, #516]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3b0a      	subs	r3, #10
 8005958:	4618      	mov	r0, r3
 800595a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	3b0b      	subs	r3, #11
 8005960:	4619      	mov	r1, r3
 8005962:	2300      	movs	r3, #0
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	2301      	movs	r3, #1
 8005968:	9303      	str	r3, [sp, #12]
 800596a:	2300      	movs	r3, #0
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	230a      	movs	r3, #10
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	4b7a      	ldr	r3, [pc, #488]	@ (8005b5c <HAL_UART_RxCpltCallback+0x498>)
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	2317      	movs	r3, #23
 8005978:	2216      	movs	r2, #22
 800597a:	f7fc f8cd 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 800597e:	4b78      	ldr	r3, [pc, #480]	@ (8005b60 <HAL_UART_RxCpltCallback+0x49c>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b6c      	cmp	r3, #108	@ 0x6c
 8005984:	d15c      	bne.n	8005a40 <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8005986:	4b74      	ldr	r3, [pc, #464]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	2b00      	cmp	r3, #0
 800598c:	d158      	bne.n	8005a40 <HAL_UART_RxCpltCallback+0x37c>
 800598e:	4b72      	ldr	r3, [pc, #456]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d154      	bne.n	8005a40 <HAL_UART_RxCpltCallback+0x37c>
 8005996:	4b70      	ldr	r3, [pc, #448]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d150      	bne.n	8005a40 <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800599e:	4b6e      	ldr	r3, [pc, #440]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	1c58      	adds	r0, r3, #1
 80059ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	4b69      	ldr	r3, [pc, #420]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	1c59      	adds	r1, r3, #1
 80059ba:	4b67      	ldr	r3, [pc, #412]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	4b65      	ldr	r3, [pc, #404]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80059ca:	9400      	str	r4, [sp, #0]
 80059cc:	f7fb fff4 	bl	80019b8 <FillRect>
			p1.direction=3;
 80059d0:	4b61      	ldr	r3, [pc, #388]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059d2:	2203      	movs	r2, #3
 80059d4:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 80059d6:	2103      	movs	r1, #3
 80059d8:	485f      	ldr	r0, [pc, #380]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059da:	f7fe f815 	bl	8003a08 <playerCanMove>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 80059e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	4a5a      	ldr	r2, [pc, #360]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059f0:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 80059f2:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	2b09      	cmp	r3, #9
 80059f8:	d805      	bhi.n	8005a06 <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 80059fa:	4b57      	ldr	r3, [pc, #348]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	3301      	adds	r3, #1
 8005a00:	4a55      	ldr	r2, [pc, #340]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a02:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a04:	e002      	b.n	8005a0c <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 8005a06:	4b54      	ldr	r3, [pc, #336]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 8005a0c:	4852      	ldr	r0, [pc, #328]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a0e:	f7fe fa59 	bl	8003ec4 <PlayerAnimation>
 8005a12:	e015      	b.n	8005a40 <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8005a14:	4b50      	ldr	r3, [pc, #320]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3b0a      	subs	r3, #10
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	3b0b      	subs	r3, #11
 8005a22:	4619      	mov	r1, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9303      	str	r3, [sp, #12]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9302      	str	r3, [sp, #8]
 8005a30:	230a      	movs	r3, #10
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	4b49      	ldr	r3, [pc, #292]	@ (8005b5c <HAL_UART_RxCpltCallback+0x498>)
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2317      	movs	r3, #23
 8005a3a:	2216      	movs	r2, #22
 8005a3c:	f7fc f86c 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 8005a40:	4b47      	ldr	r3, [pc, #284]	@ (8005b60 <HAL_UART_RxCpltCallback+0x49c>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b62      	cmp	r3, #98	@ 0x62
 8005a46:	d13b      	bne.n	8005ac0 <HAL_UART_RxCpltCallback+0x3fc>
		 if (estadoActual == MENU ) {
 8005a48:	4b46      	ldr	r3, [pc, #280]	@ (8005b64 <HAL_UART_RxCpltCallback+0x4a0>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <HAL_UART_RxCpltCallback+0x3a2>
			 // IMPRIMIR SPRITE DE UN JUGADOR
			 estadoFuturo = SOLO;
 8005a52:	4b45      	ldr	r3, [pc, #276]	@ (8005b68 <HAL_UART_RxCpltCallback+0x4a4>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
			 IniciarLevel=1;
 8005a58:	4b44      	ldr	r3, [pc, #272]	@ (8005b6c <HAL_UART_RxCpltCallback+0x4a8>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
			 IniciarP1=1;}
 8005a5e:	4b44      	ldr	r3, [pc, #272]	@ (8005b70 <HAL_UART_RxCpltCallback+0x4ac>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	e02c      	b.n	8005ac0 <HAL_UART_RxCpltCallback+0x3fc>
		 else {
			 if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1 && (estadoActual==SOLO||estadoActual==DUO)){
 8005a66:	4b3c      	ldr	r3, [pc, #240]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d124      	bne.n	8005ab8 <HAL_UART_RxCpltCallback+0x3f4>
 8005a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d120      	bne.n	8005ab8 <HAL_UART_RxCpltCallback+0x3f4>
 8005a76:	4b38      	ldr	r3, [pc, #224]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d11c      	bne.n	8005ab8 <HAL_UART_RxCpltCallback+0x3f4>
 8005a7e:	4b39      	ldr	r3, [pc, #228]	@ (8005b64 <HAL_UART_RxCpltCallback+0x4a0>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d004      	beq.n	8005a92 <HAL_UART_RxCpltCallback+0x3ce>
 8005a88:	4b36      	ldr	r3, [pc, #216]	@ (8005b64 <HAL_UART_RxCpltCallback+0x4a0>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d112      	bne.n	8005ab8 <HAL_UART_RxCpltCallback+0x3f4>
			 			p1.IsAttack=1;
 8005a92:	4b31      	ldr	r3, [pc, #196]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	655a      	str	r2, [r3, #84]	@ 0x54
			 			p1.animationAttack=0;
 8005a98:	4b2f      	ldr	r3, [pc, #188]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	659a      	str	r2, [r3, #88]	@ 0x58
			 			PlayerHit(&p1, &e1_1);
 8005aa0:	4934      	ldr	r1, [pc, #208]	@ (8005b74 <HAL_UART_RxCpltCallback+0x4b0>)
 8005aa2:	482d      	ldr	r0, [pc, #180]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005aa4:	f7fe f92e 	bl	8003d04 <PlayerHit>
			 			PlayerHit(&p1, &e1_2);
 8005aa8:	4933      	ldr	r1, [pc, #204]	@ (8005b78 <HAL_UART_RxCpltCallback+0x4b4>)
 8005aaa:	482b      	ldr	r0, [pc, #172]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005aac:	f7fe f92a 	bl	8003d04 <PlayerHit>
			 			PlayerHit(&p1, &e1_3);}
 8005ab0:	4932      	ldr	r1, [pc, #200]	@ (8005b7c <HAL_UART_RxCpltCallback+0x4b8>)
 8005ab2:	4829      	ldr	r0, [pc, #164]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005ab4:	f7fe f926 	bl	8003d04 <PlayerHit>
			 			PlayerHit_E2(&p1, &e2_1);
 8005ab8:	4931      	ldr	r1, [pc, #196]	@ (8005b80 <HAL_UART_RxCpltCallback+0x4bc>)
 8005aba:	4827      	ldr	r0, [pc, #156]	@ (8005b58 <HAL_UART_RxCpltCallback+0x494>)
 8005abc:	f7fd fa84 	bl	8002fc8 <PlayerHit_E2>
		 }
	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 8005ac0:	4b27      	ldr	r3, [pc, #156]	@ (8005b60 <HAL_UART_RxCpltCallback+0x49c>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b31      	cmp	r3, #49	@ 0x31
 8005ac6:	d175      	bne.n	8005bb4 <HAL_UART_RxCpltCallback+0x4f0>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d171      	bne.n	8005bb4 <HAL_UART_RxCpltCallback+0x4f0>
 8005ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d16d      	bne.n	8005bb4 <HAL_UART_RxCpltCallback+0x4f0>
 8005ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d169      	bne.n	8005bb4 <HAL_UART_RxCpltCallback+0x4f0>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005ae0:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	4b27      	ldr	r3, [pc, #156]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	1c58      	adds	r0, r3, #1
 8005aee:	4b25      	ldr	r3, [pc, #148]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	4b24      	ldr	r3, [pc, #144]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	4b21      	ldr	r3, [pc, #132]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005b0c:	9400      	str	r4, [sp, #0]
 8005b0e:	f7fb ff53 	bl	80019b8 <FillRect>
				p2.direction=0;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 8005b18:	2102      	movs	r1, #2
 8005b1a:	481a      	ldr	r0, [pc, #104]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b1c:	f7fd ff74 	bl	8003a08 <playerCanMove>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d030      	beq.n	8005b88 <HAL_UART_RxCpltCallback+0x4c4>
					p2.y=p2.y-p2.speed;
 8005b26:	4b17      	ldr	r3, [pc, #92]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4b16      	ldr	r3, [pc, #88]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	4a14      	ldr	r2, [pc, #80]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b32:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 8005b34:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	2b09      	cmp	r3, #9
 8005b3a:	d805      	bhi.n	8005b48 <HAL_UART_RxCpltCallback+0x484>
							p2.animationWalkUp+=1;
 8005b3c:	4b11      	ldr	r3, [pc, #68]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b40:	3301      	adds	r3, #1
 8005b42:	4a10      	ldr	r2, [pc, #64]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b46:	e002      	b.n	8005b4e <HAL_UART_RxCpltCallback+0x48a>
							} else{
							  p2.animationWalkUp=0;
 8005b48:	4b0e      	ldr	r3, [pc, #56]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 8005b4e:	480d      	ldr	r0, [pc, #52]	@ (8005b84 <HAL_UART_RxCpltCallback+0x4c0>)
 8005b50:	f7fe f9b8 	bl	8003ec4 <PlayerAnimation>
 8005b54:	e02e      	b.n	8005bb4 <HAL_UART_RxCpltCallback+0x4f0>
 8005b56:	bf00      	nop
 8005b58:	2001c7cc 	.word	0x2001c7cc
 8005b5c:	2000fca0 	.word	0x2000fca0
 8005b60:	2001c7c0 	.word	0x2001c7c0
 8005b64:	20016a78 	.word	0x20016a78
 8005b68:	2001cb28 	.word	0x2001cb28
 8005b6c:	2001cb2c 	.word	0x2001cb2c
 8005b70:	2001cb36 	.word	0x2001cb36
 8005b74:	2001c8b4 	.word	0x2001c8b4
 8005b78:	2001c8e8 	.word	0x2001c8e8
 8005b7c:	2001c91c 	.word	0x2001c91c
 8005b80:	2001c9ec 	.word	0x2001c9ec
 8005b84:	2001c840 	.word	0x2001c840
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8005b88:	4b9a      	ldr	r3, [pc, #616]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3b08      	subs	r3, #8
 8005b8e:	4618      	mov	r0, r3
 8005b90:	4b98      	ldr	r3, [pc, #608]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	3b0d      	subs	r3, #13
 8005b96:	4619      	mov	r1, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9304      	str	r3, [sp, #16]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9302      	str	r3, [sp, #8]
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	4b93      	ldr	r3, [pc, #588]	@ (8005df8 <HAL_UART_RxCpltCallback+0x734>)
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	231a      	movs	r3, #26
 8005bae:	2212      	movs	r2, #18
 8005bb0:	f7fb ffb2 	bl	8001b18 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 8005bb4:	4b91      	ldr	r3, [pc, #580]	@ (8005dfc <HAL_UART_RxCpltCallback+0x738>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b32      	cmp	r3, #50	@ 0x32
 8005bba:	d15c      	bne.n	8005c76 <HAL_UART_RxCpltCallback+0x5b2>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d158      	bne.n	8005c76 <HAL_UART_RxCpltCallback+0x5b2>
 8005bc4:	4b8b      	ldr	r3, [pc, #556]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d154      	bne.n	8005c76 <HAL_UART_RxCpltCallback+0x5b2>
 8005bcc:	4b89      	ldr	r3, [pc, #548]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d150      	bne.n	8005c76 <HAL_UART_RxCpltCallback+0x5b2>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005bd4:	4b87      	ldr	r3, [pc, #540]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4b86      	ldr	r3, [pc, #536]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	1c58      	adds	r0, r3, #1
 8005be2:	4b84      	ldr	r3, [pc, #528]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4b83      	ldr	r3, [pc, #524]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	1c59      	adds	r1, r3, #1
 8005bf0:	4b80      	ldr	r3, [pc, #512]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005c00:	9400      	str	r4, [sp, #0]
 8005c02:	f7fb fed9 	bl	80019b8 <FillRect>
			p2.direction=1;
 8005c06:	4b7b      	ldr	r3, [pc, #492]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4879      	ldr	r0, [pc, #484]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c10:	f7fd fefa 	bl	8003a08 <playerCanMove>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d017      	beq.n	8005c4a <HAL_UART_RxCpltCallback+0x586>
				p2.x=p2.x+p2.speed;
 8005c1a:	4b76      	ldr	r3, [pc, #472]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b75      	ldr	r3, [pc, #468]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	4a73      	ldr	r2, [pc, #460]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c26:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 8005c28:	4b72      	ldr	r3, [pc, #456]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2c:	2b09      	cmp	r3, #9
 8005c2e:	d805      	bhi.n	8005c3c <HAL_UART_RxCpltCallback+0x578>
						p2.animationWalkRight+=1;
 8005c30:	4b70      	ldr	r3, [pc, #448]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a6f      	ldr	r2, [pc, #444]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c38:	6493      	str	r3, [r2, #72]	@ 0x48
 8005c3a:	e002      	b.n	8005c42 <HAL_UART_RxCpltCallback+0x57e>
						} else{
						  p2.animationWalkRight=0;
 8005c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 8005c42:	486c      	ldr	r0, [pc, #432]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c44:	f7fe f93e 	bl	8003ec4 <PlayerAnimation>
 8005c48:	e015      	b.n	8005c76 <HAL_UART_RxCpltCallback+0x5b2>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8005c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3b0a      	subs	r3, #10
 8005c50:	4618      	mov	r0, r3
 8005c52:	4b68      	ldr	r3, [pc, #416]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	3b0b      	subs	r3, #11
 8005c58:	4619      	mov	r1, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	9303      	str	r3, [sp, #12]
 8005c62:	2300      	movs	r3, #0
 8005c64:	9302      	str	r3, [sp, #8]
 8005c66:	230a      	movs	r3, #10
 8005c68:	9301      	str	r3, [sp, #4]
 8005c6a:	4b65      	ldr	r3, [pc, #404]	@ (8005e00 <HAL_UART_RxCpltCallback+0x73c>)
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2317      	movs	r3, #23
 8005c70:	2216      	movs	r2, #22
 8005c72:	f7fb ff51 	bl	8001b18 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 8005c76:	4b61      	ldr	r3, [pc, #388]	@ (8005dfc <HAL_UART_RxCpltCallback+0x738>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b33      	cmp	r3, #51	@ 0x33
 8005c7c:	d175      	bne.n	8005d6a <HAL_UART_RxCpltCallback+0x6a6>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d171      	bne.n	8005d6a <HAL_UART_RxCpltCallback+0x6a6>
 8005c86:	4b5b      	ldr	r3, [pc, #364]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d16d      	bne.n	8005d6a <HAL_UART_RxCpltCallback+0x6a6>
 8005c8e:	4b59      	ldr	r3, [pc, #356]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d169      	bne.n	8005d6a <HAL_UART_RxCpltCallback+0x6a6>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005c96:	4b57      	ldr	r3, [pc, #348]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b56      	ldr	r3, [pc, #344]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	1c58      	adds	r0, r3, #1
 8005ca4:	4b53      	ldr	r3, [pc, #332]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	4b52      	ldr	r3, [pc, #328]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	4b50      	ldr	r3, [pc, #320]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005cc2:	9400      	str	r4, [sp, #0]
 8005cc4:	f7fb fe78 	bl	80019b8 <FillRect>
			p2.direction=2;
 8005cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cca:	2202      	movs	r2, #2
 8005ccc:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4848      	ldr	r0, [pc, #288]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cd2:	f7fd fe99 	bl	8003a08 <playerCanMove>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <HAL_UART_RxCpltCallback+0x648>
		    p2.y=p2.y+p2.speed;
 8005cdc:	4b45      	ldr	r3, [pc, #276]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	4b44      	ldr	r3, [pc, #272]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	4a43      	ldr	r2, [pc, #268]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005ce8:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 8005cea:	4b42      	ldr	r3, [pc, #264]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d805      	bhi.n	8005cfe <HAL_UART_RxCpltCallback+0x63a>
		    		p2.animationWalkDown+=1;
 8005cf2:	4b40      	ldr	r3, [pc, #256]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cfc:	e002      	b.n	8005d04 <HAL_UART_RxCpltCallback+0x640>
		    			} else{
		    				p2.animationWalkDown=0;
 8005cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 8005d04:	483b      	ldr	r0, [pc, #236]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d06:	f7fe f8dd 	bl	8003ec4 <PlayerAnimation>
 8005d0a:	e02e      	b.n	8005d6a <HAL_UART_RxCpltCallback+0x6a6>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005d0c:	4b39      	ldr	r3, [pc, #228]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b38      	ldr	r3, [pc, #224]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	1c58      	adds	r0, r3, #1
 8005d1a:	4b36      	ldr	r3, [pc, #216]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4b35      	ldr	r3, [pc, #212]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	4b32      	ldr	r3, [pc, #200]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	4b31      	ldr	r3, [pc, #196]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005d38:	9400      	str	r4, [sp, #0]
 8005d3a:	f7fb fe3d 	bl	80019b8 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8005d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3b08      	subs	r3, #8
 8005d44:	4618      	mov	r0, r3
 8005d46:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	3b0c      	subs	r3, #12
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	2300      	movs	r3, #0
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	2300      	movs	r3, #0
 8005d58:	9302      	str	r3, [sp, #8]
 8005d5a:	230a      	movs	r3, #10
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	4b29      	ldr	r3, [pc, #164]	@ (8005e04 <HAL_UART_RxCpltCallback+0x740>)
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	231a      	movs	r3, #26
 8005d64:	2212      	movs	r2, #18
 8005d66:	f7fb fed7 	bl	8001b18 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 8005d6a:	4b24      	ldr	r3, [pc, #144]	@ (8005dfc <HAL_UART_RxCpltCallback+0x738>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b34      	cmp	r3, #52	@ 0x34
 8005d70:	d167      	bne.n	8005e42 <HAL_UART_RxCpltCallback+0x77e>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005d72:	4b20      	ldr	r3, [pc, #128]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d163      	bne.n	8005e42 <HAL_UART_RxCpltCallback+0x77e>
 8005d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d15f      	bne.n	8005e42 <HAL_UART_RxCpltCallback+0x77e>
 8005d82:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d15b      	bne.n	8005e42 <HAL_UART_RxCpltCallback+0x77e>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	1c58      	adds	r0, r3, #1
 8005d98:	4b16      	ldr	r3, [pc, #88]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b15      	ldr	r3, [pc, #84]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	1c59      	adds	r1, r3, #1
 8005da6:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	4b11      	ldr	r3, [pc, #68]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	3301      	adds	r3, #1
 8005db2:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005db6:	9400      	str	r4, [sp, #0]
 8005db8:	f7fb fdfe 	bl	80019b8 <FillRect>
			p2.direction=3;
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 8005dc2:	2103      	movs	r1, #3
 8005dc4:	480b      	ldr	r0, [pc, #44]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005dc6:	f7fd fe1f 	bl	8003a08 <playerCanMove>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d022      	beq.n	8005e16 <HAL_UART_RxCpltCallback+0x752>
				p2.x=p2.x-p2.speed;
 8005dd0:	4b08      	ldr	r3, [pc, #32]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4b07      	ldr	r3, [pc, #28]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	4a06      	ldr	r2, [pc, #24]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005ddc:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 8005dde:	4b05      	ldr	r3, [pc, #20]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d810      	bhi.n	8005e08 <HAL_UART_RxCpltCallback+0x744>
						p2.animationWalkLeft+=1;
 8005de6:	4b03      	ldr	r3, [pc, #12]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	3301      	adds	r3, #1
 8005dec:	4a01      	ldr	r2, [pc, #4]	@ (8005df4 <HAL_UART_RxCpltCallback+0x730>)
 8005dee:	6453      	str	r3, [r2, #68]	@ 0x44
 8005df0:	e00d      	b.n	8005e0e <HAL_UART_RxCpltCallback+0x74a>
 8005df2:	bf00      	nop
 8005df4:	2001c840 	.word	0x2001c840
 8005df8:	20012428 	.word	0x20012428
 8005dfc:	2001c7c0 	.word	0x2001c7c0
 8005e00:	2000fca0 	.word	0x2000fca0
 8005e04:	200148b8 	.word	0x200148b8
						} else{
						  p2.animationWalkLeft=0;
 8005e08:	4b53      	ldr	r3, [pc, #332]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 8005e0e:	4852      	ldr	r0, [pc, #328]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e10:	f7fe f858 	bl	8003ec4 <PlayerAnimation>
 8005e14:	e015      	b.n	8005e42 <HAL_UART_RxCpltCallback+0x77e>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8005e16:	4b50      	ldr	r3, [pc, #320]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3b0a      	subs	r3, #10
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	3b0b      	subs	r3, #11
 8005e24:	4619      	mov	r1, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9303      	str	r3, [sp, #12]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9302      	str	r3, [sp, #8]
 8005e32:	230a      	movs	r3, #10
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	4b49      	ldr	r3, [pc, #292]	@ (8005f5c <HAL_UART_RxCpltCallback+0x898>)
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2317      	movs	r3, #23
 8005e3c:	2216      	movs	r2, #22
 8005e3e:	f7fb fe6b 	bl	8001b18 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 8005e42:	4b47      	ldr	r3, [pc, #284]	@ (8005f60 <HAL_UART_RxCpltCallback+0x89c>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b35      	cmp	r3, #53	@ 0x35
 8005e48:	d13c      	bne.n	8005ec4 <HAL_UART_RxCpltCallback+0x800>
		if (estadoActual == MENU ) {
 8005e4a:	4b46      	ldr	r3, [pc, #280]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <HAL_UART_RxCpltCallback+0x7b0>
					 // IMPRIMIR SPRITE DE DOS JUGADORES
			estadoFuturo = DUO;
 8005e54:	4b44      	ldr	r3, [pc, #272]	@ (8005f68 <HAL_UART_RxCpltCallback+0x8a4>)
 8005e56:	2202      	movs	r2, #2
 8005e58:	701a      	strb	r2, [r3, #0]
			IniciarLevel=1;
 8005e5a:	4b44      	ldr	r3, [pc, #272]	@ (8005f6c <HAL_UART_RxCpltCallback+0x8a8>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
			IniciarLevel2=1;
 8005e60:	4b43      	ldr	r3, [pc, #268]	@ (8005f70 <HAL_UART_RxCpltCallback+0x8ac>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
			IniciarP1=1;
 8005e66:	4b43      	ldr	r3, [pc, #268]	@ (8005f74 <HAL_UART_RxCpltCallback+0x8b0>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
			IniciarP2=1;
 8005e6c:	4b42      	ldr	r3, [pc, #264]	@ (8005f78 <HAL_UART_RxCpltCallback+0x8b4>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e027      	b.n	8005ec4 <HAL_UART_RxCpltCallback+0x800>
		}
		else {
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1 && estadoActual==DUO){
 8005e74:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d11f      	bne.n	8005ebc <HAL_UART_RxCpltCallback+0x7f8>
 8005e7c:	4b36      	ldr	r3, [pc, #216]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d11b      	bne.n	8005ebc <HAL_UART_RxCpltCallback+0x7f8>
 8005e84:	4b34      	ldr	r3, [pc, #208]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d117      	bne.n	8005ebc <HAL_UART_RxCpltCallback+0x7f8>
 8005e8c:	4b35      	ldr	r3, [pc, #212]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d112      	bne.n	8005ebc <HAL_UART_RxCpltCallback+0x7f8>
				p2.IsAttack=1;
 8005e96:	4b30      	ldr	r3, [pc, #192]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	655a      	str	r2, [r3, #84]	@ 0x54
				p2.animationAttack=0;
 8005e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	659a      	str	r2, [r3, #88]	@ 0x58
				PlayerHit(&p2, &e1_4);
 8005ea4:	4935      	ldr	r1, [pc, #212]	@ (8005f7c <HAL_UART_RxCpltCallback+0x8b8>)
 8005ea6:	482c      	ldr	r0, [pc, #176]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005ea8:	f7fd ff2c 	bl	8003d04 <PlayerHit>
				PlayerHit(&p2, &e1_5);
 8005eac:	4934      	ldr	r1, [pc, #208]	@ (8005f80 <HAL_UART_RxCpltCallback+0x8bc>)
 8005eae:	482a      	ldr	r0, [pc, #168]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005eb0:	f7fd ff28 	bl	8003d04 <PlayerHit>
				PlayerHit(&p2, &e1_6);}
 8005eb4:	4933      	ldr	r1, [pc, #204]	@ (8005f84 <HAL_UART_RxCpltCallback+0x8c0>)
 8005eb6:	4828      	ldr	r0, [pc, #160]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005eb8:	f7fd ff24 	bl	8003d04 <PlayerHit>
				PlayerHit_E2(&p2, &e2_2);
 8005ebc:	4932      	ldr	r1, [pc, #200]	@ (8005f88 <HAL_UART_RxCpltCallback+0x8c4>)
 8005ebe:	4826      	ldr	r0, [pc, #152]	@ (8005f58 <HAL_UART_RxCpltCallback+0x894>)
 8005ec0:	f7fd f882 	bl	8002fc8 <PlayerHit_E2>
		}
	}

	if (buffer[0] == '6') {
 8005ec4:	4b26      	ldr	r3, [pc, #152]	@ (8005f60 <HAL_UART_RxCpltCallback+0x89c>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b36      	cmp	r3, #54	@ 0x36
 8005eca:	d13b      	bne.n	8005f44 <HAL_UART_RxCpltCallback+0x880>
		if (estadoActual == MENU) {
 8005ecc:	4b25      	ldr	r3, [pc, #148]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d108      	bne.n	8005ee8 <HAL_UART_RxCpltCallback+0x824>
			// Al presionar 6 desde el menú, confirma el cambio al estado seleccionado (SOLO o DUO)
			estadoActual = estadoFuturo;
 8005ed6:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <HAL_UART_RxCpltCallback+0x8a4>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b21      	ldr	r3, [pc, #132]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005ede:	701a      	strb	r2, [r3, #0]
			repintarFondo = 1;
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f8c <HAL_UART_RxCpltCallback+0x8c8>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e02d      	b.n	8005f44 <HAL_UART_RxCpltCallback+0x880>
		} else if (estadoActual == SOLO || estadoActual == DUO) {
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d004      	beq.n	8005efc <HAL_UART_RxCpltCallback+0x838>
 8005ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d116      	bne.n	8005f2a <HAL_UART_RxCpltCallback+0x866>
			// Si ya estamos en SOLO o DUO, cambiamos a PAUSA
			if (estadoActual != PAUSA) {
 8005efc:	4b19      	ldr	r3, [pc, #100]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d01e      	beq.n	8005f44 <HAL_UART_RxCpltCallback+0x880>
				estadoAnterior = estadoActual;  // Guarda el estado actual (SOLO o DUO)
 8005f06:	4b17      	ldr	r3, [pc, #92]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	4b20      	ldr	r3, [pc, #128]	@ (8005f90 <HAL_UART_RxCpltCallback+0x8cc>)
 8005f0e:	701a      	strb	r2, [r3, #0]
				pintarFondoPausa = 1;
 8005f10:	4b20      	ldr	r3, [pc, #128]	@ (8005f94 <HAL_UART_RxCpltCallback+0x8d0>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
				estadoActual = PAUSA;
 8005f16:	4b13      	ldr	r3, [pc, #76]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005f18:	2203      	movs	r2, #3
 8005f1a:	701a      	strb	r2, [r3, #0]
				IniciarP1=0;
 8005f1c:	4b15      	ldr	r3, [pc, #84]	@ (8005f74 <HAL_UART_RxCpltCallback+0x8b0>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
				IniciarP2=0;// Cambia a PAUSA
 8005f22:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <HAL_UART_RxCpltCallback+0x8b4>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
			if (estadoActual != PAUSA) {
 8005f28:	e00c      	b.n	8005f44 <HAL_UART_RxCpltCallback+0x880>
			}
		} else if (estadoActual == PAUSA) {
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d107      	bne.n	8005f44 <HAL_UART_RxCpltCallback+0x880>
			// Si estamos en PAUSA, volvemos al estado anterior
			estadoActual = estadoAnterior;     // Restauramos el estado SOLO o DUO
 8005f34:	4b16      	ldr	r3, [pc, #88]	@ (8005f90 <HAL_UART_RxCpltCallback+0x8cc>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f64 <HAL_UART_RxCpltCallback+0x8a0>)
 8005f3c:	701a      	strb	r2, [r3, #0]
			repintarFondo = 1;                 // Indicamos que el fondo necesita repintarse
 8005f3e:	4b13      	ldr	r3, [pc, #76]	@ (8005f8c <HAL_UART_RxCpltCallback+0x8c8>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
		}
	}

	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8005f44:	2201      	movs	r2, #1
 8005f46:	4906      	ldr	r1, [pc, #24]	@ (8005f60 <HAL_UART_RxCpltCallback+0x89c>)
 8005f48:	4813      	ldr	r0, [pc, #76]	@ (8005f98 <HAL_UART_RxCpltCallback+0x8d4>)
 8005f4a:	f003 f81e 	bl	8008f8a <HAL_UART_Receive_IT>
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	2001c840 	.word	0x2001c840
 8005f5c:	2000fca0 	.word	0x2000fca0
 8005f60:	2001c7c0 	.word	0x2001c7c0
 8005f64:	20016a78 	.word	0x20016a78
 8005f68:	2001cb28 	.word	0x2001cb28
 8005f6c:	2001cb2c 	.word	0x2001cb2c
 8005f70:	2001cb30 	.word	0x2001cb30
 8005f74:	2001cb36 	.word	0x2001cb36
 8005f78:	2001cb37 	.word	0x2001cb37
 8005f7c:	2001c950 	.word	0x2001c950
 8005f80:	2001c984 	.word	0x2001c984
 8005f84:	2001c9b8 	.word	0x2001c9b8
 8005f88:	2001ca30 	.word	0x2001ca30
 8005f8c:	2001cb34 	.word	0x2001cb34
 8005f90:	20016a79 	.word	0x20016a79
 8005f94:	2001cb35 	.word	0x2001cb35
 8005f98:	20017c78 	.word	0x20017c78

08005f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fa0:	b672      	cpsid	i
}
 8005fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <Error_Handler+0x8>

08005fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <HAL_MspInit+0x4c>)
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff4 <HAL_MspInit+0x4c>)
 8005fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <HAL_MspInit+0x4c>)
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	4b09      	ldr	r3, [pc, #36]	@ (8005ff4 <HAL_MspInit+0x4c>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	4a08      	ldr	r2, [pc, #32]	@ (8005ff4 <HAL_MspInit+0x4c>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fda:	4b06      	ldr	r3, [pc, #24]	@ (8005ff4 <HAL_MspInit+0x4c>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800

08005ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	@ 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a19      	ldr	r2, [pc, #100]	@ (800607c <HAL_SPI_MspInit+0x84>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d12b      	bne.n	8006072 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	4b18      	ldr	r3, [pc, #96]	@ (8006080 <HAL_SPI_MspInit+0x88>)
 8006020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006022:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <HAL_SPI_MspInit+0x88>)
 8006024:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006028:	6453      	str	r3, [r2, #68]	@ 0x44
 800602a:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <HAL_SPI_MspInit+0x88>)
 800602c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <HAL_SPI_MspInit+0x88>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	4a10      	ldr	r2, [pc, #64]	@ (8006080 <HAL_SPI_MspInit+0x88>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	6313      	str	r3, [r2, #48]	@ 0x30
 8006046:	4b0e      	ldr	r3, [pc, #56]	@ (8006080 <HAL_SPI_MspInit+0x88>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006052:	23e0      	movs	r3, #224	@ 0xe0
 8006054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006056:	2302      	movs	r3, #2
 8006058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605e:	2303      	movs	r3, #3
 8006060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006062:	2305      	movs	r3, #5
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006066:	f107 0314 	add.w	r3, r7, #20
 800606a:	4619      	mov	r1, r3
 800606c:	4805      	ldr	r0, [pc, #20]	@ (8006084 <HAL_SPI_MspInit+0x8c>)
 800606e:	f000 fc65 	bl	800693c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006072:	bf00      	nop
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40013000 	.word	0x40013000
 8006080:	40023800 	.word	0x40023800
 8006084:	40020000 	.word	0x40020000

08006088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <HAL_TIM_Base_MspInit+0x64>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	4b14      	ldr	r3, [pc, #80]	@ (80060f0 <HAL_TIM_Base_MspInit+0x68>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	4a13      	ldr	r2, [pc, #76]	@ (80060f0 <HAL_TIM_Base_MspInit+0x68>)
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80060aa:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <HAL_TIM_Base_MspInit+0x68>)
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80060b6:	e012      	b.n	80060de <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c0:	d10d      	bne.n	80060de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <HAL_TIM_Base_MspInit+0x68>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	4a09      	ldr	r2, [pc, #36]	@ (80060f0 <HAL_TIM_Base_MspInit+0x68>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <HAL_TIM_Base_MspInit+0x68>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40023800 	.word	0x40023800

080060f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a24      	ldr	r2, [pc, #144]	@ (80061a4 <HAL_TIM_MspPostInit+0xb0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d11f      	bne.n	8006156 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	4b23      	ldr	r3, [pc, #140]	@ (80061a8 <HAL_TIM_MspPostInit+0xb4>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	4a22      	ldr	r2, [pc, #136]	@ (80061a8 <HAL_TIM_MspPostInit+0xb4>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6313      	str	r3, [r2, #48]	@ 0x30
 8006126:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <HAL_TIM_MspPostInit+0xb4>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006132:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
 800613a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006140:	2300      	movs	r3, #0
 8006142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006144:	2301      	movs	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	4619      	mov	r1, r3
 800614e:	4817      	ldr	r0, [pc, #92]	@ (80061ac <HAL_TIM_MspPostInit+0xb8>)
 8006150:	f000 fbf4 	bl	800693c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8006154:	e022      	b.n	800619c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615e:	d11d      	bne.n	800619c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <HAL_TIM_MspPostInit+0xb4>)
 8006166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006168:	4a0f      	ldr	r2, [pc, #60]	@ (80061a8 <HAL_TIM_MspPostInit+0xb4>)
 800616a:	f043 0302 	orr.w	r3, r3, #2
 800616e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006170:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <HAL_TIM_MspPostInit+0xb4>)
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800617c:	2304      	movs	r3, #4
 800617e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006180:	2302      	movs	r3, #2
 8006182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006188:	2300      	movs	r3, #0
 800618a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800618c:	2301      	movs	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006190:	f107 0314 	add.w	r3, r7, #20
 8006194:	4619      	mov	r1, r3
 8006196:	4806      	ldr	r0, [pc, #24]	@ (80061b0 <HAL_TIM_MspPostInit+0xbc>)
 8006198:	f000 fbd0 	bl	800693c <HAL_GPIO_Init>
}
 800619c:	bf00      	nop
 800619e:	3728      	adds	r7, #40	@ 0x28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40020000 	.word	0x40020000
 80061b0:	40020400 	.word	0x40020400

080061b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	@ 0x30
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061bc:	f107 031c 	add.w	r3, r7, #28
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a49      	ldr	r2, [pc, #292]	@ (80062f8 <HAL_UART_MspInit+0x144>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d153      	bne.n	800627e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80061d6:	2300      	movs	r3, #0
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	4b48      	ldr	r3, [pc, #288]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	4a47      	ldr	r2, [pc, #284]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80061e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80061e6:	4b45      	ldr	r3, [pc, #276]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	4b41      	ldr	r3, [pc, #260]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	4a40      	ldr	r2, [pc, #256]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6313      	str	r3, [r2, #48]	@ 0x30
 8006202:	4b3e      	ldr	r3, [pc, #248]	@ (80062fc <HAL_UART_MspInit+0x148>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	4b3a      	ldr	r3, [pc, #232]	@ (80062fc <HAL_UART_MspInit+0x148>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	4a39      	ldr	r2, [pc, #228]	@ (80062fc <HAL_UART_MspInit+0x148>)
 8006218:	f043 0308 	orr.w	r3, r3, #8
 800621c:	6313      	str	r3, [r2, #48]	@ 0x30
 800621e:	4b37      	ldr	r3, [pc, #220]	@ (80062fc <HAL_UART_MspInit+0x148>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800622a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800622e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006230:	2302      	movs	r3, #2
 8006232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006238:	2303      	movs	r3, #3
 800623a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800623c:	2308      	movs	r3, #8
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006240:	f107 031c 	add.w	r3, r7, #28
 8006244:	4619      	mov	r1, r3
 8006246:	482e      	ldr	r0, [pc, #184]	@ (8006300 <HAL_UART_MspInit+0x14c>)
 8006248:	f000 fb78 	bl	800693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800624c:	2304      	movs	r3, #4
 800624e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006250:	2302      	movs	r3, #2
 8006252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006254:	2300      	movs	r3, #0
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006258:	2303      	movs	r3, #3
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800625c:	2308      	movs	r3, #8
 800625e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006260:	f107 031c 	add.w	r3, r7, #28
 8006264:	4619      	mov	r1, r3
 8006266:	4827      	ldr	r0, [pc, #156]	@ (8006304 <HAL_UART_MspInit+0x150>)
 8006268:	f000 fb68 	bl	800693c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800626c:	2200      	movs	r2, #0
 800626e:	2100      	movs	r1, #0
 8006270:	2035      	movs	r0, #53	@ 0x35
 8006272:	f000 fa8e 	bl	8006792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006276:	2035      	movs	r0, #53	@ 0x35
 8006278:	f000 faa7 	bl	80067ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800627c:	e038      	b.n	80062f0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a21      	ldr	r2, [pc, #132]	@ (8006308 <HAL_UART_MspInit+0x154>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d133      	bne.n	80062f0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <HAL_UART_MspInit+0x148>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	4a1a      	ldr	r2, [pc, #104]	@ (80062fc <HAL_UART_MspInit+0x148>)
 8006292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006296:	6413      	str	r3, [r2, #64]	@ 0x40
 8006298:	4b18      	ldr	r3, [pc, #96]	@ (80062fc <HAL_UART_MspInit+0x148>)
 800629a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062a4:	2300      	movs	r3, #0
 80062a6:	60bb      	str	r3, [r7, #8]
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ac:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80062b4:	4b11      	ldr	r3, [pc, #68]	@ (80062fc <HAL_UART_MspInit+0x148>)
 80062b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062c0:	230c      	movs	r3, #12
 80062c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c4:	2302      	movs	r3, #2
 80062c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062cc:	2303      	movs	r3, #3
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80062d0:	2307      	movs	r3, #7
 80062d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d4:	f107 031c 	add.w	r3, r7, #28
 80062d8:	4619      	mov	r1, r3
 80062da:	480c      	ldr	r0, [pc, #48]	@ (800630c <HAL_UART_MspInit+0x158>)
 80062dc:	f000 fb2e 	bl	800693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	2026      	movs	r0, #38	@ 0x26
 80062e6:	f000 fa54 	bl	8006792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80062ea:	2026      	movs	r0, #38	@ 0x26
 80062ec:	f000 fa6d 	bl	80067ca <HAL_NVIC_EnableIRQ>
}
 80062f0:	bf00      	nop
 80062f2:	3730      	adds	r7, #48	@ 0x30
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40005000 	.word	0x40005000
 80062fc:	40023800 	.word	0x40023800
 8006300:	40020800 	.word	0x40020800
 8006304:	40020c00 	.word	0x40020c00
 8006308:	40004400 	.word	0x40004400
 800630c:	40020000 	.word	0x40020000

08006310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <NMI_Handler+0x4>

08006318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <HardFault_Handler+0x4>

08006320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <MemManage_Handler+0x4>

08006328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <BusFault_Handler+0x4>

08006330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <UsageFault_Handler+0x4>

08006338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006346:	b480      	push	{r7}
 8006348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1>0){
 8006368:	4b0c      	ldr	r3, [pc, #48]	@ (800639c <SysTick_Handler+0x38>)
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <SysTick_Handler+0x18>
		Timer1--;
 8006370:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <SysTick_Handler+0x38>)
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	4b08      	ldr	r3, [pc, #32]	@ (800639c <SysTick_Handler+0x38>)
 800637a:	801a      	strh	r2, [r3, #0]
	}
	if (Timer2>0){
 800637c:	4b08      	ldr	r3, [pc, #32]	@ (80063a0 <SysTick_Handler+0x3c>)
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <SysTick_Handler+0x2c>
		Timer2--;
 8006384:	4b06      	ldr	r3, [pc, #24]	@ (80063a0 <SysTick_Handler+0x3c>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <SysTick_Handler+0x3c>)
 800638e:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006390:	f000 f8e0 	bl	8006554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8006394:	f000 fa33 	bl	80067fe <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006398:	bf00      	nop
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20016b08 	.word	0x20016b08
 80063a0:	20016b0a 	.word	0x20016b0a

080063a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063a8:	4802      	ldr	r0, [pc, #8]	@ (80063b4 <USART2_IRQHandler+0x10>)
 80063aa:	f002 fe13 	bl	8008fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20017c78 	.word	0x20017c78

080063b8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80063bc:	4802      	ldr	r0, [pc, #8]	@ (80063c8 <UART5_IRQHandler+0x10>)
 80063be:	f002 fe09 	bl	8008fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20017c30 	.word	0x20017c30

080063cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063d4:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <_sbrk+0x5c>)
 80063d6:	4b15      	ldr	r3, [pc, #84]	@ (800642c <_sbrk+0x60>)
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063e0:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <_sbrk+0x64>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063e8:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <_sbrk+0x64>)
 80063ea:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <_sbrk+0x68>)
 80063ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063ee:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <_sbrk+0x64>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d207      	bcs.n	800640c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80063fc:	f006 fce8 	bl	800cdd0 <__errno>
 8006400:	4603      	mov	r3, r0
 8006402:	220c      	movs	r2, #12
 8006404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	e009      	b.n	8006420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800640c:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <_sbrk+0x64>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006412:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <_sbrk+0x64>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <_sbrk+0x64>)
 800641c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20020000 	.word	0x20020000
 800642c:	00000400 	.word	0x00000400
 8006430:	2001cb38 	.word	0x2001cb38
 8006434:	2001cec8 	.word	0x2001cec8

08006438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800643c:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <SystemInit+0x20>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	4a05      	ldr	r2, [pc, #20]	@ (8006458 <SystemInit+0x20>)
 8006444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	e000ed00 	.word	0xe000ed00

0800645c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800645c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006494 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006460:	f7ff ffea 	bl	8006438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006464:	480c      	ldr	r0, [pc, #48]	@ (8006498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006466:	490d      	ldr	r1, [pc, #52]	@ (800649c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006468:	4a0d      	ldr	r2, [pc, #52]	@ (80064a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800646a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800646c:	e002      	b.n	8006474 <LoopCopyDataInit>

0800646e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800646e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006472:	3304      	adds	r3, #4

08006474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006478:	d3f9      	bcc.n	800646e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800647a:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800647c:	4c0a      	ldr	r4, [pc, #40]	@ (80064a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800647e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006480:	e001      	b.n	8006486 <LoopFillZerobss>

08006482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006484:	3204      	adds	r2, #4

08006486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006488:	d3fb      	bcc.n	8006482 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800648a:	f006 fca7 	bl	800cddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800648e:	f7fe fa13 	bl	80048b8 <main>
  bx  lr    
 8006492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800649c:	20016aec 	.word	0x20016aec
  ldr r2, =_sidata
 80064a0:	0800dc70 	.word	0x0800dc70
  ldr r2, =_sbss
 80064a4:	20016aec 	.word	0x20016aec
  ldr r4, =_ebss
 80064a8:	2001cec4 	.word	0x2001cec4

080064ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064ac:	e7fe      	b.n	80064ac <ADC_IRQHandler>
	...

080064b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064b4:	4b0e      	ldr	r3, [pc, #56]	@ (80064f0 <HAL_Init+0x40>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a0d      	ldr	r2, [pc, #52]	@ (80064f0 <HAL_Init+0x40>)
 80064ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064c0:	4b0b      	ldr	r3, [pc, #44]	@ (80064f0 <HAL_Init+0x40>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0a      	ldr	r2, [pc, #40]	@ (80064f0 <HAL_Init+0x40>)
 80064c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064cc:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <HAL_Init+0x40>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a07      	ldr	r2, [pc, #28]	@ (80064f0 <HAL_Init+0x40>)
 80064d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d8:	2003      	movs	r0, #3
 80064da:	f000 f94f 	bl	800677c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064de:	200f      	movs	r0, #15
 80064e0:	f000 f808 	bl	80064f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064e4:	f7ff fd60 	bl	8005fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40023c00 	.word	0x40023c00

080064f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064fc:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <HAL_InitTick+0x54>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b12      	ldr	r3, [pc, #72]	@ (800654c <HAL_InitTick+0x58>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	4619      	mov	r1, r3
 8006506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800650a:	fbb3 f3f1 	udiv	r3, r3, r1
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	4618      	mov	r0, r3
 8006514:	f000 f967 	bl	80067e6 <HAL_SYSTICK_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e00e      	b.n	8006540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d80a      	bhi.n	800653e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006528:	2200      	movs	r2, #0
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	f000 f92f 	bl	8006792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006534:	4a06      	ldr	r2, [pc, #24]	@ (8006550 <HAL_InitTick+0x5c>)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20016a7c 	.word	0x20016a7c
 800654c:	20016a84 	.word	0x20016a84
 8006550:	20016a80 	.word	0x20016a80

08006554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006558:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <HAL_IncTick+0x20>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_IncTick+0x24>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4413      	add	r3, r2
 8006564:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <HAL_IncTick+0x24>)
 8006566:	6013      	str	r3, [r2, #0]
}
 8006568:	bf00      	nop
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20016a84 	.word	0x20016a84
 8006578:	2001cb3c 	.word	0x2001cb3c

0800657c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return uwTick;
 8006580:	4b03      	ldr	r3, [pc, #12]	@ (8006590 <HAL_GetTick+0x14>)
 8006582:	681b      	ldr	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	2001cb3c 	.word	0x2001cb3c

08006594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800659c:	f7ff ffee 	bl	800657c <HAL_GetTick>
 80065a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d005      	beq.n	80065ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ae:	4b0a      	ldr	r3, [pc, #40]	@ (80065d8 <HAL_Delay+0x44>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065ba:	bf00      	nop
 80065bc:	f7ff ffde 	bl	800657c <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d8f7      	bhi.n	80065bc <HAL_Delay+0x28>
  {
  }
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20016a84 	.word	0x20016a84

080065dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <__NVIC_SetPriorityGrouping+0x44>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80065f8:	4013      	ands	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800660c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800660e:	4a04      	ldr	r2, [pc, #16]	@ (8006620 <__NVIC_SetPriorityGrouping+0x44>)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	60d3      	str	r3, [r2, #12]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	e000ed00 	.word	0xe000ed00

08006624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006628:	4b04      	ldr	r3, [pc, #16]	@ (800663c <__NVIC_GetPriorityGrouping+0x18>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	f003 0307 	and.w	r3, r3, #7
}
 8006632:	4618      	mov	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800664a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664e:	2b00      	cmp	r3, #0
 8006650:	db0b      	blt.n	800666a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	f003 021f 	and.w	r2, r3, #31
 8006658:	4907      	ldr	r1, [pc, #28]	@ (8006678 <__NVIC_EnableIRQ+0x38>)
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	2001      	movs	r0, #1
 8006662:	fa00 f202 	lsl.w	r2, r0, r2
 8006666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	e000e100 	.word	0xe000e100

0800667c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668c:	2b00      	cmp	r3, #0
 800668e:	db0a      	blt.n	80066a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	490c      	ldr	r1, [pc, #48]	@ (80066c8 <__NVIC_SetPriority+0x4c>)
 8006696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669a:	0112      	lsls	r2, r2, #4
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	440b      	add	r3, r1
 80066a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066a4:	e00a      	b.n	80066bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4908      	ldr	r1, [pc, #32]	@ (80066cc <__NVIC_SetPriority+0x50>)
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	3b04      	subs	r3, #4
 80066b4:	0112      	lsls	r2, r2, #4
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	440b      	add	r3, r1
 80066ba:	761a      	strb	r2, [r3, #24]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	e000e100 	.word	0xe000e100
 80066cc:	e000ed00 	.word	0xe000ed00

080066d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b089      	sub	sp, #36	@ 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f1c3 0307 	rsb	r3, r3, #7
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	bf28      	it	cs
 80066ee:	2304      	movcs	r3, #4
 80066f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	3304      	adds	r3, #4
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d902      	bls.n	8006700 <NVIC_EncodePriority+0x30>
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	3b03      	subs	r3, #3
 80066fe:	e000      	b.n	8006702 <NVIC_EncodePriority+0x32>
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43da      	mvns	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	401a      	ands	r2, r3
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006718:	f04f 31ff 	mov.w	r1, #4294967295
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	fa01 f303 	lsl.w	r3, r1, r3
 8006722:	43d9      	mvns	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006728:	4313      	orrs	r3, r2
         );
}
 800672a:	4618      	mov	r0, r3
 800672c:	3724      	adds	r7, #36	@ 0x24
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3b01      	subs	r3, #1
 8006744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006748:	d301      	bcc.n	800674e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800674a:	2301      	movs	r3, #1
 800674c:	e00f      	b.n	800676e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800674e:	4a0a      	ldr	r2, [pc, #40]	@ (8006778 <SysTick_Config+0x40>)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3b01      	subs	r3, #1
 8006754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006756:	210f      	movs	r1, #15
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	f7ff ff8e 	bl	800667c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006760:	4b05      	ldr	r3, [pc, #20]	@ (8006778 <SysTick_Config+0x40>)
 8006762:	2200      	movs	r2, #0
 8006764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006766:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <SysTick_Config+0x40>)
 8006768:	2207      	movs	r2, #7
 800676a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	e000e010 	.word	0xe000e010

0800677c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff29 	bl	80065dc <__NVIC_SetPriorityGrouping>
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	4603      	mov	r3, r0
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
 800679e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067a4:	f7ff ff3e 	bl	8006624 <__NVIC_GetPriorityGrouping>
 80067a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	6978      	ldr	r0, [r7, #20]
 80067b0:	f7ff ff8e 	bl	80066d0 <NVIC_EncodePriority>
 80067b4:	4602      	mov	r2, r0
 80067b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff ff5d 	bl	800667c <__NVIC_SetPriority>
}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4603      	mov	r3, r0
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff ff31 	bl	8006640 <__NVIC_EnableIRQ>
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ffa2 	bl	8006738 <SysTick_Config>
 80067f4:	4603      	mov	r3, r0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006802:	f000 f802 	bl	800680a <HAL_SYSTICK_Callback>
}
 8006806:	bf00      	nop
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800680a:	b480      	push	{r7}
 800680c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006824:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006826:	f7ff fea9 	bl	800657c <HAL_GetTick>
 800682a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d008      	beq.n	800684a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2280      	movs	r2, #128	@ 0x80
 800683c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e052      	b.n	80068f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0216 	bic.w	r2, r2, #22
 8006858:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006868:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_DMA_Abort+0x62>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0208 	bic.w	r2, r2, #8
 8006888:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689a:	e013      	b.n	80068c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800689c:	f7ff fe6e 	bl	800657c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d90c      	bls.n	80068c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2203      	movs	r2, #3
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e015      	b.n	80068f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e4      	bne.n	800689c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d6:	223f      	movs	r2, #63	@ 0x3f
 80068d8:	409a      	lsls	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d004      	beq.n	8006916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e00c      	b.n	8006930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2205      	movs	r2, #5
 800691a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	@ 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e165      	b.n	8006c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006958:	2201      	movs	r2, #1
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	429a      	cmp	r2, r3
 8006972:	f040 8154 	bne.w	8006c1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d005      	beq.n	800698e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800698a:	2b02      	cmp	r3, #2
 800698c:	d130      	bne.n	80069f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	2203      	movs	r2, #3
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c4:	2201      	movs	r2, #1
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4013      	ands	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 0201 	and.w	r2, r3, #1
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d017      	beq.n	8006a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	2203      	movs	r2, #3
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4013      	ands	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d123      	bne.n	8006a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	08da      	lsrs	r2, r3, #3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3208      	adds	r2, #8
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	220f      	movs	r2, #15
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	08da      	lsrs	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3208      	adds	r2, #8
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 0203 	and.w	r2, r3, #3
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80ae 	beq.w	8006c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8006c3c <HAL_GPIO_Init+0x300>)
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aca:	4a5c      	ldr	r2, [pc, #368]	@ (8006c3c <HAL_GPIO_Init+0x300>)
 8006acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8006c3c <HAL_GPIO_Init+0x300>)
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ade:	4a58      	ldr	r2, [pc, #352]	@ (8006c40 <HAL_GPIO_Init+0x304>)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a4f      	ldr	r2, [pc, #316]	@ (8006c44 <HAL_GPIO_Init+0x308>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d025      	beq.n	8006b56 <HAL_GPIO_Init+0x21a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8006c48 <HAL_GPIO_Init+0x30c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01f      	beq.n	8006b52 <HAL_GPIO_Init+0x216>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a4d      	ldr	r2, [pc, #308]	@ (8006c4c <HAL_GPIO_Init+0x310>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d019      	beq.n	8006b4e <HAL_GPIO_Init+0x212>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8006c50 <HAL_GPIO_Init+0x314>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_GPIO_Init+0x20e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a4b      	ldr	r2, [pc, #300]	@ (8006c54 <HAL_GPIO_Init+0x318>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00d      	beq.n	8006b46 <HAL_GPIO_Init+0x20a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006c58 <HAL_GPIO_Init+0x31c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <HAL_GPIO_Init+0x206>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a49      	ldr	r2, [pc, #292]	@ (8006c5c <HAL_GPIO_Init+0x320>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d101      	bne.n	8006b3e <HAL_GPIO_Init+0x202>
 8006b3a:	2306      	movs	r3, #6
 8006b3c:	e00c      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b3e:	2307      	movs	r3, #7
 8006b40:	e00a      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b42:	2305      	movs	r3, #5
 8006b44:	e008      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b46:	2304      	movs	r3, #4
 8006b48:	e006      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e004      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e002      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_GPIO_Init+0x21c>
 8006b56:	2300      	movs	r3, #0
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	f002 0203 	and.w	r2, r2, #3
 8006b5e:	0092      	lsls	r2, r2, #2
 8006b60:	4093      	lsls	r3, r2
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b68:	4935      	ldr	r1, [pc, #212]	@ (8006c40 <HAL_GPIO_Init+0x304>)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b76:	4b3a      	ldr	r3, [pc, #232]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b9a:	4a31      	ldr	r2, [pc, #196]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bc4:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bca:	4b25      	ldr	r3, [pc, #148]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bee:	4a1c      	ldr	r2, [pc, #112]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4013      	ands	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c18:	4a11      	ldr	r2, [pc, #68]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	f67f ae96 	bls.w	8006958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3724      	adds	r7, #36	@ 0x24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40013800 	.word	0x40013800
 8006c44:	40020000 	.word	0x40020000
 8006c48:	40020400 	.word	0x40020400
 8006c4c:	40020800 	.word	0x40020800
 8006c50:	40020c00 	.word	0x40020c00
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40021400 	.word	0x40021400
 8006c5c:	40021800 	.word	0x40021800
 8006c60:	40013c00 	.word	0x40013c00

08006c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
 8006c70:	4613      	mov	r3, r2
 8006c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c74:	787b      	ldrb	r3, [r7, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c7a:	887a      	ldrh	r2, [r7, #2]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c80:	e003      	b.n	8006c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c82:	887b      	ldrh	r3, [r7, #2]
 8006c84:	041a      	lsls	r2, r3, #16
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	619a      	str	r2, [r3, #24]
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0cc      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cac:	4b68      	ldr	r3, [pc, #416]	@ (8006e50 <HAL_RCC_ClockConfig+0x1b8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d90c      	bls.n	8006cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cba:	4b65      	ldr	r3, [pc, #404]	@ (8006e50 <HAL_RCC_ClockConfig+0x1b8>)
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc2:	4b63      	ldr	r3, [pc, #396]	@ (8006e50 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d001      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0b8      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d020      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cec:	4b59      	ldr	r3, [pc, #356]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4a58      	ldr	r2, [pc, #352]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d04:	4b53      	ldr	r3, [pc, #332]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4a52      	ldr	r2, [pc, #328]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d10:	4b50      	ldr	r3, [pc, #320]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	494d      	ldr	r1, [pc, #308]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d044      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d107      	bne.n	8006d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d36:	4b47      	ldr	r3, [pc, #284]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d119      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e07f      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d107      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d56:	4b3f      	ldr	r3, [pc, #252]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e06f      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d66:	4b3b      	ldr	r3, [pc, #236]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e067      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d76:	4b37      	ldr	r3, [pc, #220]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f023 0203 	bic.w	r2, r3, #3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4934      	ldr	r1, [pc, #208]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d88:	f7ff fbf8 	bl	800657c <HAL_GetTick>
 8006d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d90:	f7ff fbf4 	bl	800657c <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e04f      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 020c 	and.w	r2, r3, #12
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d1eb      	bne.n	8006d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006db8:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <HAL_RCC_ClockConfig+0x1b8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d20c      	bcs.n	8006de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc6:	4b22      	ldr	r3, [pc, #136]	@ (8006e50 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dce:	4b20      	ldr	r3, [pc, #128]	@ (8006e50 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d001      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e032      	b.n	8006e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dec:	4b19      	ldr	r3, [pc, #100]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	4916      	ldr	r1, [pc, #88]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e0a:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	490e      	ldr	r1, [pc, #56]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e1e:	f000 f855 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 8006e22:	4602      	mov	r2, r0
 8006e24:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	490a      	ldr	r1, [pc, #40]	@ (8006e58 <HAL_RCC_ClockConfig+0x1c0>)
 8006e30:	5ccb      	ldrb	r3, [r1, r3]
 8006e32:	fa22 f303 	lsr.w	r3, r2, r3
 8006e36:	4a09      	ldr	r2, [pc, #36]	@ (8006e5c <HAL_RCC_ClockConfig+0x1c4>)
 8006e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e3a:	4b09      	ldr	r3, [pc, #36]	@ (8006e60 <HAL_RCC_ClockConfig+0x1c8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff fb58 	bl	80064f4 <HAL_InitTick>

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40023c00 	.word	0x40023c00
 8006e54:	40023800 	.word	0x40023800
 8006e58:	0800d7d4 	.word	0x0800d7d4
 8006e5c:	20016a7c 	.word	0x20016a7c
 8006e60:	20016a80 	.word	0x20016a80

08006e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e68:	4b03      	ldr	r3, [pc, #12]	@ (8006e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20016a7c 	.word	0x20016a7c

08006e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e80:	f7ff fff0 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8006e84:	4602      	mov	r2, r0
 8006e86:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	0a9b      	lsrs	r3, r3, #10
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	4903      	ldr	r1, [pc, #12]	@ (8006ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e92:	5ccb      	ldrb	r3, [r1, r3]
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	0800d7e4 	.word	0x0800d7e4

08006ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ea8:	f7ff ffdc 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8006eac:	4602      	mov	r2, r0
 8006eae:	4b05      	ldr	r3, [pc, #20]	@ (8006ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	0b5b      	lsrs	r3, r3, #13
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	4903      	ldr	r1, [pc, #12]	@ (8006ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eba:	5ccb      	ldrb	r3, [r1, r3]
 8006ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	0800d7e4 	.word	0x0800d7e4

08006ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed0:	b0a6      	sub	sp, #152	@ 0x98
 8006ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ef2:	4bc8      	ldr	r3, [pc, #800]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
 8006efa:	2b0c      	cmp	r3, #12
 8006efc:	f200 817e 	bhi.w	80071fc <HAL_RCC_GetSysClockFreq+0x330>
 8006f00:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	080071fd 	.word	0x080071fd
 8006f10:	080071fd 	.word	0x080071fd
 8006f14:	080071fd 	.word	0x080071fd
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	080071fd 	.word	0x080071fd
 8006f20:	080071fd 	.word	0x080071fd
 8006f24:	080071fd 	.word	0x080071fd
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	080071fd 	.word	0x080071fd
 8006f30:	080071fd 	.word	0x080071fd
 8006f34:	080071fd 	.word	0x080071fd
 8006f38:	080070b7 	.word	0x080070b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f3c:	4bb6      	ldr	r3, [pc, #728]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8006f42:	e15f      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f44:	4bb5      	ldr	r3, [pc, #724]	@ (800721c <HAL_RCC_GetSysClockFreq+0x350>)
 8006f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006f4a:	e15b      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f4c:	4bb1      	ldr	r3, [pc, #708]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f58:	4bae      	ldr	r3, [pc, #696]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d031      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f64:	4bab      	ldr	r3, [pc, #684]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	099b      	lsrs	r3, r3, #6
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f78:	2300      	movs	r3, #0
 8006f7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f7c:	4ba7      	ldr	r3, [pc, #668]	@ (800721c <HAL_RCC_GetSysClockFreq+0x350>)
 8006f7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006f82:	462a      	mov	r2, r5
 8006f84:	fb03 f202 	mul.w	r2, r3, r2
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	4413      	add	r3, r2
 8006f92:	4aa2      	ldr	r2, [pc, #648]	@ (800721c <HAL_RCC_GetSysClockFreq+0x350>)
 8006f94:	4621      	mov	r1, r4
 8006f96:	fba1 1202 	umull	r1, r2, r1, r2
 8006f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006fa0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fa2:	4413      	add	r3, r2
 8006fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006faa:	2200      	movs	r2, #0
 8006fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fb4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006fb8:	f7f9 fb8e 	bl	80006d8 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fc6:	e064      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fc8:	4b92      	ldr	r3, [pc, #584]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	099b      	lsrs	r3, r3, #6
 8006fce:	2200      	movs	r2, #0
 8006fd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fd2:	657a      	str	r2, [r7, #84]	@ 0x54
 8006fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fdc:	2300      	movs	r3, #0
 8006fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	f04f 0000 	mov.w	r0, #0
 8006fec:	f04f 0100 	mov.w	r1, #0
 8006ff0:	0159      	lsls	r1, r3, #5
 8006ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ff6:	0150      	lsls	r0, r2, #5
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	1a51      	subs	r1, r2, r1
 8007000:	6139      	str	r1, [r7, #16]
 8007002:	4629      	mov	r1, r5
 8007004:	eb63 0301 	sbc.w	r3, r3, r1
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007016:	4659      	mov	r1, fp
 8007018:	018b      	lsls	r3, r1, #6
 800701a:	4651      	mov	r1, sl
 800701c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007020:	4651      	mov	r1, sl
 8007022:	018a      	lsls	r2, r1, #6
 8007024:	4651      	mov	r1, sl
 8007026:	ebb2 0801 	subs.w	r8, r2, r1
 800702a:	4659      	mov	r1, fp
 800702c:	eb63 0901 	sbc.w	r9, r3, r1
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800703c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007044:	4690      	mov	r8, r2
 8007046:	4699      	mov	r9, r3
 8007048:	4623      	mov	r3, r4
 800704a:	eb18 0303 	adds.w	r3, r8, r3
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	462b      	mov	r3, r5
 8007052:	eb49 0303 	adc.w	r3, r9, r3
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007064:	4629      	mov	r1, r5
 8007066:	028b      	lsls	r3, r1, #10
 8007068:	4621      	mov	r1, r4
 800706a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800706e:	4621      	mov	r1, r4
 8007070:	028a      	lsls	r2, r1, #10
 8007072:	4610      	mov	r0, r2
 8007074:	4619      	mov	r1, r3
 8007076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800707a:	2200      	movs	r2, #0
 800707c:	643b      	str	r3, [r7, #64]	@ 0x40
 800707e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007084:	f7f9 fb28 	bl	80006d8 <__aeabi_uldivmod>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4613      	mov	r3, r2
 800708e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007092:	4b60      	ldr	r3, [pc, #384]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	3301      	adds	r3, #1
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80070a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80070b4:	e0a6      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070b6:	4b57      	ldr	r3, [pc, #348]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070c2:	4b54      	ldr	r3, [pc, #336]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d02a      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ce:	4b51      	ldr	r3, [pc, #324]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	099b      	lsrs	r3, r3, #6
 80070d4:	2200      	movs	r2, #0
 80070d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80070da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070e0:	2100      	movs	r1, #0
 80070e2:	4b4e      	ldr	r3, [pc, #312]	@ (800721c <HAL_RCC_GetSysClockFreq+0x350>)
 80070e4:	fb03 f201 	mul.w	r2, r3, r1
 80070e8:	2300      	movs	r3, #0
 80070ea:	fb00 f303 	mul.w	r3, r0, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	4a4a      	ldr	r2, [pc, #296]	@ (800721c <HAL_RCC_GetSysClockFreq+0x350>)
 80070f2:	fba0 1202 	umull	r1, r2, r0, r2
 80070f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80070f8:	460a      	mov	r2, r1
 80070fa:	673a      	str	r2, [r7, #112]	@ 0x70
 80070fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80070fe:	4413      	add	r3, r2
 8007100:	677b      	str	r3, [r7, #116]	@ 0x74
 8007102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007106:	2200      	movs	r2, #0
 8007108:	633b      	str	r3, [r7, #48]	@ 0x30
 800710a:	637a      	str	r2, [r7, #52]	@ 0x34
 800710c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007110:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007114:	f7f9 fae0 	bl	80006d8 <__aeabi_uldivmod>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4613      	mov	r3, r2
 800711e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007122:	e05b      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007124:	4b3b      	ldr	r3, [pc, #236]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	099b      	lsrs	r3, r3, #6
 800712a:	2200      	movs	r2, #0
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800712e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007136:	623b      	str	r3, [r7, #32]
 8007138:	2300      	movs	r3, #0
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
 800713c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007140:	4642      	mov	r2, r8
 8007142:	464b      	mov	r3, r9
 8007144:	f04f 0000 	mov.w	r0, #0
 8007148:	f04f 0100 	mov.w	r1, #0
 800714c:	0159      	lsls	r1, r3, #5
 800714e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007152:	0150      	lsls	r0, r2, #5
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4641      	mov	r1, r8
 800715a:	ebb2 0a01 	subs.w	sl, r2, r1
 800715e:	4649      	mov	r1, r9
 8007160:	eb63 0b01 	sbc.w	fp, r3, r1
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007178:	ebb2 040a 	subs.w	r4, r2, sl
 800717c:	eb63 050b 	sbc.w	r5, r3, fp
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	00eb      	lsls	r3, r5, #3
 800718a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800718e:	00e2      	lsls	r2, r4, #3
 8007190:	4614      	mov	r4, r2
 8007192:	461d      	mov	r5, r3
 8007194:	4643      	mov	r3, r8
 8007196:	18e3      	adds	r3, r4, r3
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	464b      	mov	r3, r9
 800719c:	eb45 0303 	adc.w	r3, r5, r3
 80071a0:	607b      	str	r3, [r7, #4]
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071ae:	4629      	mov	r1, r5
 80071b0:	028b      	lsls	r3, r1, #10
 80071b2:	4621      	mov	r1, r4
 80071b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071b8:	4621      	mov	r1, r4
 80071ba:	028a      	lsls	r2, r1, #10
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c4:	2200      	movs	r2, #0
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	61fa      	str	r2, [r7, #28]
 80071ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071ce:	f7f9 fa83 	bl	80006d8 <__aeabi_uldivmod>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4613      	mov	r3, r2
 80071d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80071dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x348>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	0f1b      	lsrs	r3, r3, #28
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80071ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80071fa:	e003      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071fc:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x34c>)
 80071fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007204:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8007208:	4618      	mov	r0, r3
 800720a:	3798      	adds	r7, #152	@ 0x98
 800720c:	46bd      	mov	sp, r7
 800720e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	00f42400 	.word	0x00f42400
 800721c:	017d7840 	.word	0x017d7840

08007220 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e28d      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8083 	beq.w	8007346 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007240:	4b94      	ldr	r3, [pc, #592]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 030c 	and.w	r3, r3, #12
 8007248:	2b04      	cmp	r3, #4
 800724a:	d019      	beq.n	8007280 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800724c:	4b91      	ldr	r3, [pc, #580]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007254:	2b08      	cmp	r3, #8
 8007256:	d106      	bne.n	8007266 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007258:	4b8e      	ldr	r3, [pc, #568]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007264:	d00c      	beq.n	8007280 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007266:	4b8b      	ldr	r3, [pc, #556]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800726e:	2b0c      	cmp	r3, #12
 8007270:	d112      	bne.n	8007298 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007272:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800727a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800727e:	d10b      	bne.n	8007298 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007280:	4b84      	ldr	r3, [pc, #528]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d05b      	beq.n	8007344 <HAL_RCC_OscConfig+0x124>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d157      	bne.n	8007344 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e25a      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a0:	d106      	bne.n	80072b0 <HAL_RCC_OscConfig+0x90>
 80072a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a7b      	ldr	r2, [pc, #492]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	e01d      	b.n	80072ec <HAL_RCC_OscConfig+0xcc>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0xb4>
 80072ba:	4b76      	ldr	r3, [pc, #472]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a75      	ldr	r2, [pc, #468]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b73      	ldr	r3, [pc, #460]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a72      	ldr	r2, [pc, #456]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e00b      	b.n	80072ec <HAL_RCC_OscConfig+0xcc>
 80072d4:	4b6f      	ldr	r3, [pc, #444]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a6e      	ldr	r2, [pc, #440]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a6b      	ldr	r2, [pc, #428]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80072e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d013      	beq.n	800731c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7ff f942 	bl	800657c <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072fc:	f7ff f93e 	bl	800657c <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	@ 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e21f      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730e:	4b61      	ldr	r3, [pc, #388]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0xdc>
 800731a:	e014      	b.n	8007346 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7ff f92e 	bl	800657c <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007324:	f7ff f92a 	bl	800657c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	@ 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e20b      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007336:	4b57      	ldr	r3, [pc, #348]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0x104>
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d06f      	beq.n	8007432 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007352:	4b50      	ldr	r3, [pc, #320]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	2b00      	cmp	r3, #0
 800735c:	d017      	beq.n	800738e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800735e:	4b4d      	ldr	r3, [pc, #308]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007366:	2b08      	cmp	r3, #8
 8007368:	d105      	bne.n	8007376 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800736a:	4b4a      	ldr	r3, [pc, #296]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00b      	beq.n	800738e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007376:	4b47      	ldr	r3, [pc, #284]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800737e:	2b0c      	cmp	r3, #12
 8007380:	d11c      	bne.n	80073bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007382:	4b44      	ldr	r3, [pc, #272]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d116      	bne.n	80073bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800738e:	4b41      	ldr	r3, [pc, #260]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <HAL_RCC_OscConfig+0x186>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d001      	beq.n	80073a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e1d3      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4937      	ldr	r1, [pc, #220]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ba:	e03a      	b.n	8007432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d020      	beq.n	8007406 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073c4:	4b34      	ldr	r3, [pc, #208]	@ (8007498 <HAL_RCC_OscConfig+0x278>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ca:	f7ff f8d7 	bl	800657c <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073d2:	f7ff f8d3 	bl	800657c <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e1b4      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f0      	beq.n	80073d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f0:	4b28      	ldr	r3, [pc, #160]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4925      	ldr	r1, [pc, #148]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007400:	4313      	orrs	r3, r2
 8007402:	600b      	str	r3, [r1, #0]
 8007404:	e015      	b.n	8007432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007406:	4b24      	ldr	r3, [pc, #144]	@ (8007498 <HAL_RCC_OscConfig+0x278>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7ff f8b6 	bl	800657c <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007414:	f7ff f8b2 	bl	800657c <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e193      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007426:	4b1b      	ldr	r3, [pc, #108]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d036      	beq.n	80074ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d016      	beq.n	8007474 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007446:	4b15      	ldr	r3, [pc, #84]	@ (800749c <HAL_RCC_OscConfig+0x27c>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800744c:	f7ff f896 	bl	800657c <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007454:	f7ff f892 	bl	800657c <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e173      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007466:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0x234>
 8007472:	e01b      	b.n	80074ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007474:	4b09      	ldr	r3, [pc, #36]	@ (800749c <HAL_RCC_OscConfig+0x27c>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747a:	f7ff f87f 	bl	800657c <HAL_GetTick>
 800747e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007480:	e00e      	b.n	80074a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007482:	f7ff f87b 	bl	800657c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d907      	bls.n	80074a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e15c      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
 8007494:	40023800 	.word	0x40023800
 8007498:	42470000 	.word	0x42470000
 800749c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a0:	4b8a      	ldr	r3, [pc, #552]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80074a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ea      	bne.n	8007482 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8097 	beq.w	80075e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ba:	2300      	movs	r3, #0
 80074bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074be:	4b83      	ldr	r3, [pc, #524]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10f      	bne.n	80074ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ca:	2300      	movs	r3, #0
 80074cc:	60bb      	str	r3, [r7, #8]
 80074ce:	4b7f      	ldr	r3, [pc, #508]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d2:	4a7e      	ldr	r2, [pc, #504]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80074d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80074da:	4b7c      	ldr	r3, [pc, #496]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80074dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074e2:	60bb      	str	r3, [r7, #8]
 80074e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074e6:	2301      	movs	r3, #1
 80074e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ea:	4b79      	ldr	r3, [pc, #484]	@ (80076d0 <HAL_RCC_OscConfig+0x4b0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d118      	bne.n	8007528 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074f6:	4b76      	ldr	r3, [pc, #472]	@ (80076d0 <HAL_RCC_OscConfig+0x4b0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a75      	ldr	r2, [pc, #468]	@ (80076d0 <HAL_RCC_OscConfig+0x4b0>)
 80074fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007502:	f7ff f83b 	bl	800657c <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750a:	f7ff f837 	bl	800657c <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e118      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800751c:	4b6c      	ldr	r3, [pc, #432]	@ (80076d0 <HAL_RCC_OscConfig+0x4b0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f0      	beq.n	800750a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d106      	bne.n	800753e <HAL_RCC_OscConfig+0x31e>
 8007530:	4b66      	ldr	r3, [pc, #408]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007534:	4a65      	ldr	r2, [pc, #404]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007536:	f043 0301 	orr.w	r3, r3, #1
 800753a:	6713      	str	r3, [r2, #112]	@ 0x70
 800753c:	e01c      	b.n	8007578 <HAL_RCC_OscConfig+0x358>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b05      	cmp	r3, #5
 8007544:	d10c      	bne.n	8007560 <HAL_RCC_OscConfig+0x340>
 8007546:	4b61      	ldr	r3, [pc, #388]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754a:	4a60      	ldr	r2, [pc, #384]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 800754c:	f043 0304 	orr.w	r3, r3, #4
 8007550:	6713      	str	r3, [r2, #112]	@ 0x70
 8007552:	4b5e      	ldr	r3, [pc, #376]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007556:	4a5d      	ldr	r2, [pc, #372]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007558:	f043 0301 	orr.w	r3, r3, #1
 800755c:	6713      	str	r3, [r2, #112]	@ 0x70
 800755e:	e00b      	b.n	8007578 <HAL_RCC_OscConfig+0x358>
 8007560:	4b5a      	ldr	r3, [pc, #360]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007564:	4a59      	ldr	r2, [pc, #356]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	6713      	str	r3, [r2, #112]	@ 0x70
 800756c:	4b57      	ldr	r3, [pc, #348]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 800756e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007570:	4a56      	ldr	r2, [pc, #344]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007572:	f023 0304 	bic.w	r3, r3, #4
 8007576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d015      	beq.n	80075ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007580:	f7fe fffc 	bl	800657c <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007586:	e00a      	b.n	800759e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007588:	f7fe fff8 	bl	800657c <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007596:	4293      	cmp	r3, r2
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e0d7      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759e:	4b4b      	ldr	r3, [pc, #300]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0ee      	beq.n	8007588 <HAL_RCC_OscConfig+0x368>
 80075aa:	e014      	b.n	80075d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ac:	f7fe ffe6 	bl	800657c <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b2:	e00a      	b.n	80075ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075b4:	f7fe ffe2 	bl	800657c <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e0c1      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075ca:	4b40      	ldr	r3, [pc, #256]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80075cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1ee      	bne.n	80075b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d105      	bne.n	80075e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075dc:	4b3b      	ldr	r3, [pc, #236]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	4a3a      	ldr	r2, [pc, #232]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80075e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80ad 	beq.w	800774c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075f2:	4b36      	ldr	r3, [pc, #216]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d060      	beq.n	80076c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d145      	bne.n	8007692 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007606:	4b33      	ldr	r3, [pc, #204]	@ (80076d4 <HAL_RCC_OscConfig+0x4b4>)
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fe ffb6 	bl	800657c <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007614:	f7fe ffb2 	bl	800657c <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e093      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007626:	4b29      	ldr	r3, [pc, #164]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f0      	bne.n	8007614 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69da      	ldr	r2, [r3, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	019b      	lsls	r3, r3, #6
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	3b01      	subs	r3, #1
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	061b      	lsls	r3, r3, #24
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765c:	071b      	lsls	r3, r3, #28
 800765e:	491b      	ldr	r1, [pc, #108]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007660:	4313      	orrs	r3, r2
 8007662:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007664:	4b1b      	ldr	r3, [pc, #108]	@ (80076d4 <HAL_RCC_OscConfig+0x4b4>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766a:	f7fe ff87 	bl	800657c <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007672:	f7fe ff83 	bl	800657c <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e064      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007684:	4b11      	ldr	r3, [pc, #68]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0f0      	beq.n	8007672 <HAL_RCC_OscConfig+0x452>
 8007690:	e05c      	b.n	800774c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007692:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <HAL_RCC_OscConfig+0x4b4>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fe ff70 	bl	800657c <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a0:	f7fe ff6c 	bl	800657c <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e04d      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b2:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <HAL_RCC_OscConfig+0x4ac>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x480>
 80076be:	e045      	b.n	800774c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d107      	bne.n	80076d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e040      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40007000 	.word	0x40007000
 80076d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007758 <HAL_RCC_OscConfig+0x538>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d030      	beq.n	8007748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d129      	bne.n	8007748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076fe:	429a      	cmp	r2, r3
 8007700:	d122      	bne.n	8007748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007708:	4013      	ands	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800770e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007710:	4293      	cmp	r3, r2
 8007712:	d119      	bne.n	8007748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771e:	085b      	lsrs	r3, r3, #1
 8007720:	3b01      	subs	r3, #1
 8007722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007724:	429a      	cmp	r2, r3
 8007726:	d10f      	bne.n	8007748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007734:	429a      	cmp	r2, r3
 8007736:	d107      	bne.n	8007748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007742:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007744:	429a      	cmp	r2, r3
 8007746:	d001      	beq.n	800774c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800

0800775c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e07b      	b.n	8007866 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	2b00      	cmp	r3, #0
 8007774:	d108      	bne.n	8007788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800777e:	d009      	beq.n	8007794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	61da      	str	r2, [r3, #28]
 8007786:	e005      	b.n	8007794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fe fc22 	bl	8005ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007818:	ea42 0103 	orr.w	r1, r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007820:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	0c1b      	lsrs	r3, r3, #16
 8007832:	f003 0104 	and.w	r1, r3, #4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	f003 0210 	and.w	r2, r3, #16
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007854:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b088      	sub	sp, #32
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_SPI_Transmit+0x22>
 800788c:	2302      	movs	r3, #2
 800788e:	e12d      	b.n	8007aec <HAL_SPI_Transmit+0x27e>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007898:	f7fe fe70 	bl	800657c <HAL_GetTick>
 800789c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
 80078b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078b2:	e116      	b.n	8007ae2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_SPI_Transmit+0x52>
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078c4:	e10d      	b.n	8007ae2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2203      	movs	r2, #3
 80078ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	88fa      	ldrh	r2, [r7, #6]
 80078de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800790c:	d10f      	bne.n	800792e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800791c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800792c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b40      	cmp	r3, #64	@ 0x40
 800793a:	d007      	beq.n	800794c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800794a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007954:	d14f      	bne.n	80079f6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_SPI_Transmit+0xf6>
 800795e:	8afb      	ldrh	r3, [r7, #22]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d142      	bne.n	80079ea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007974:	1c9a      	adds	r2, r3, #2
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007988:	e02f      	b.n	80079ea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b02      	cmp	r3, #2
 8007996:	d112      	bne.n	80079be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799c:	881a      	ldrh	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079bc:	e015      	b.n	80079ea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079be:	f7fe fddd 	bl	800657c <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d803      	bhi.n	80079d6 <HAL_SPI_Transmit+0x168>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d102      	bne.n	80079dc <HAL_SPI_Transmit+0x16e>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80079e8:	e07b      	b.n	8007ae2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ca      	bne.n	800798a <HAL_SPI_Transmit+0x11c>
 80079f4:	e050      	b.n	8007a98 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_SPI_Transmit+0x196>
 80079fe:	8afb      	ldrh	r3, [r7, #22]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d144      	bne.n	8007a8e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a2a:	e030      	b.n	8007a8e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d113      	bne.n	8007a62 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	7812      	ldrb	r2, [r2, #0]
 8007a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a60:	e015      	b.n	8007a8e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a62:	f7fe fd8b 	bl	800657c <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d803      	bhi.n	8007a7a <HAL_SPI_Transmit+0x20c>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d102      	bne.n	8007a80 <HAL_SPI_Transmit+0x212>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007a8c:	e029      	b.n	8007ae2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1c9      	bne.n	8007a2c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fa61 	bl	8007f64 <SPI_EndRxTxTransaction>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e003      	b.n	8007ae2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	@ 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b02:	2301      	movs	r3, #1
 8007b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x26>
 8007b16:	2302      	movs	r3, #2
 8007b18:	e198      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x358>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b22:	f7fe fd2b 	bl	800657c <HAL_GetTick>
 8007b26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b38:	887b      	ldrh	r3, [r7, #2]
 8007b3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d00f      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x70>
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b4a:	d107      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x68>
 8007b54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d003      	beq.n	8007b64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007b62:	e16d      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x82>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x82>
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007b7c:	e160      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d003      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2205      	movs	r2, #5
 8007b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	887a      	ldrh	r2, [r7, #2]
 8007ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd2:	2b40      	cmp	r3, #64	@ 0x40
 8007bd4:	d007      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bee:	d17c      	bne.n	8007cea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_SPI_TransmitReceive+0x10a>
 8007bf8:	8b7b      	ldrh	r3, [r7, #26]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d16a      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c02:	881a      	ldrh	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0e:	1c9a      	adds	r2, r3, #2
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c22:	e057      	b.n	8007cd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d11b      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x176>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d016      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x176>
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d113      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c46:	881a      	ldrh	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	1c9a      	adds	r2, r3, #2
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d119      	bne.n	8007cac <HAL_SPI_TransmitReceive+0x1b8>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d014      	beq.n	8007cac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cac:	f7fe fc66 	bl	800657c <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d80b      	bhi.n	8007cd4 <HAL_SPI_TransmitReceive+0x1e0>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d007      	beq.n	8007cd4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007cd2:	e0b5      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1a2      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x130>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d19d      	bne.n	8007c24 <HAL_SPI_TransmitReceive+0x130>
 8007ce8:	e080      	b.n	8007dec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_SPI_TransmitReceive+0x204>
 8007cf2:	8b7b      	ldrh	r3, [r7, #26]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d16f      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	330c      	adds	r3, #12
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d1e:	e05b      	b.n	8007dd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d11c      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x274>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d017      	beq.n	8007d68 <HAL_SPI_TransmitReceive+0x274>
 8007d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d114      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	7812      	ldrb	r2, [r2, #0]
 8007d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d119      	bne.n	8007daa <HAL_SPI_TransmitReceive+0x2b6>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d014      	beq.n	8007daa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007da6:	2301      	movs	r3, #1
 8007da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007daa:	f7fe fbe7 	bl	800657c <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d803      	bhi.n	8007dc2 <HAL_SPI_TransmitReceive+0x2ce>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc0:	d102      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x2d4>
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d107      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007dd6:	e033      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d19e      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x22c>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d199      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f8b7 	bl	8007f64 <SPI_EndRxTxTransaction>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d006      	beq.n	8007e0a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007e08:	e01a      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e36:	e003      	b.n	8007e40 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3730      	adds	r7, #48	@ 0x30
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e64:	f7fe fb8a 	bl	800657c <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	4413      	add	r3, r2
 8007e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e74:	f7fe fb82 	bl	800657c <HAL_GetTick>
 8007e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e7a:	4b39      	ldr	r3, [pc, #228]	@ (8007f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	015b      	lsls	r3, r3, #5
 8007e80:	0d1b      	lsrs	r3, r3, #20
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	fb02 f303 	mul.w	r3, r2, r3
 8007e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e8a:	e054      	b.n	8007f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d050      	beq.n	8007f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e94:	f7fe fb72 	bl	800657c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d902      	bls.n	8007eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d13d      	bne.n	8007f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec2:	d111      	bne.n	8007ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ecc:	d004      	beq.n	8007ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed6:	d107      	bne.n	8007ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef0:	d10f      	bne.n	8007f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e017      	b.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	bf0c      	ite	eq
 8007f46:	2301      	moveq	r3, #1
 8007f48:	2300      	movne	r3, #0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d19b      	bne.n	8007e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20016a7c 	.word	0x20016a7c

08007f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2201      	movs	r2, #1
 8007f78:	2102      	movs	r1, #2
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff ff6a 	bl	8007e54 <SPI_WaitFlagStateUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d007      	beq.n	8007f96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f8a:	f043 0220 	orr.w	r2, r3, #32
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e032      	b.n	8007ffc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f96:	4b1b      	ldr	r3, [pc, #108]	@ (8008004 <SPI_EndRxTxTransaction+0xa0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <SPI_EndRxTxTransaction+0xa4>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	0d5b      	lsrs	r3, r3, #21
 8007fa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
 8007faa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fb4:	d112      	bne.n	8007fdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2180      	movs	r1, #128	@ 0x80
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff ff47 	bl	8007e54 <SPI_WaitFlagStateUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d016      	beq.n	8007ffa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd0:	f043 0220 	orr.w	r2, r3, #32
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e00f      	b.n	8007ffc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff2:	2b80      	cmp	r3, #128	@ 0x80
 8007ff4:	d0f2      	beq.n	8007fdc <SPI_EndRxTxTransaction+0x78>
 8007ff6:	e000      	b.n	8007ffa <SPI_EndRxTxTransaction+0x96>
        break;
 8007ff8:	bf00      	nop
  }

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20016a7c 	.word	0x20016a7c
 8008008:	165e9f81 	.word	0x165e9f81

0800800c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e041      	b.n	80080a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fe f828 	bl	8006088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f000 fad8 	bl	8008600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e041      	b.n	8008140 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f839 	bl	8008148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f000 fa89 	bl	8008600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_TIM_PWM_Start+0x24>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	bf14      	ite	ne
 8008178:	2301      	movne	r3, #1
 800817a:	2300      	moveq	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	e022      	b.n	80081c6 <HAL_TIM_PWM_Start+0x6a>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b04      	cmp	r3, #4
 8008184:	d109      	bne.n	800819a <HAL_TIM_PWM_Start+0x3e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	e015      	b.n	80081c6 <HAL_TIM_PWM_Start+0x6a>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d109      	bne.n	80081b4 <HAL_TIM_PWM_Start+0x58>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e008      	b.n	80081c6 <HAL_TIM_PWM_Start+0x6a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	bf14      	ite	ne
 80081c0:	2301      	movne	r3, #1
 80081c2:	2300      	moveq	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e07c      	b.n	80082c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <HAL_TIM_PWM_Start+0x82>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081dc:	e013      	b.n	8008206 <HAL_TIM_PWM_Start+0xaa>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d104      	bne.n	80081ee <HAL_TIM_PWM_Start+0x92>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081ec:	e00b      	b.n	8008206 <HAL_TIM_PWM_Start+0xaa>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_PWM_Start+0xa2>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081fc:	e003      	b.n	8008206 <HAL_TIM_PWM_Start+0xaa>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2201      	movs	r2, #1
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fcec 	bl	8008bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a2d      	ldr	r2, [pc, #180]	@ (80082d0 <HAL_TIM_PWM_Start+0x174>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIM_PWM_Start+0xcc>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a2c      	ldr	r2, [pc, #176]	@ (80082d4 <HAL_TIM_PWM_Start+0x178>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d101      	bne.n	800822c <HAL_TIM_PWM_Start+0xd0>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_TIM_PWM_Start+0xd2>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008240:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a22      	ldr	r2, [pc, #136]	@ (80082d0 <HAL_TIM_PWM_Start+0x174>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d022      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008254:	d01d      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1f      	ldr	r2, [pc, #124]	@ (80082d8 <HAL_TIM_PWM_Start+0x17c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1d      	ldr	r2, [pc, #116]	@ (80082dc <HAL_TIM_PWM_Start+0x180>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1c      	ldr	r2, [pc, #112]	@ (80082e0 <HAL_TIM_PWM_Start+0x184>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a16      	ldr	r2, [pc, #88]	@ (80082d4 <HAL_TIM_PWM_Start+0x178>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	@ (80082e4 <HAL_TIM_PWM_Start+0x188>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a16      	ldr	r2, [pc, #88]	@ (80082e8 <HAL_TIM_PWM_Start+0x18c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d111      	bne.n	80082b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b06      	cmp	r3, #6
 80082a2:	d010      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b4:	e007      	b.n	80082c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40000400 	.word	0x40000400
 80082dc:	40000800 	.word	0x40000800
 80082e0:	40000c00 	.word	0x40000c00
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40001800 	.word	0x40001800

080082ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008306:	2302      	movs	r3, #2
 8008308:	e0ae      	b.n	8008468 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b0c      	cmp	r3, #12
 8008316:	f200 809f 	bhi.w	8008458 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008355 	.word	0x08008355
 8008324:	08008459 	.word	0x08008459
 8008328:	08008459 	.word	0x08008459
 800832c:	08008459 	.word	0x08008459
 8008330:	08008395 	.word	0x08008395
 8008334:	08008459 	.word	0x08008459
 8008338:	08008459 	.word	0x08008459
 800833c:	08008459 	.word	0x08008459
 8008340:	080083d7 	.word	0x080083d7
 8008344:	08008459 	.word	0x08008459
 8008348:	08008459 	.word	0x08008459
 800834c:	08008459 	.word	0x08008459
 8008350:	08008417 	.word	0x08008417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 f9fc 	bl	8008758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0208 	orr.w	r2, r2, #8
 800836e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0204 	bic.w	r2, r2, #4
 800837e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6999      	ldr	r1, [r3, #24]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	619a      	str	r2, [r3, #24]
      break;
 8008392:	e064      	b.n	800845e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fa4c 	bl	8008838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6999      	ldr	r1, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	021a      	lsls	r2, r3, #8
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	619a      	str	r2, [r3, #24]
      break;
 80083d4:	e043      	b.n	800845e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 faa1 	bl	8008924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0208 	orr.w	r2, r2, #8
 80083f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69da      	ldr	r2, [r3, #28]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0204 	bic.w	r2, r2, #4
 8008400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69d9      	ldr	r1, [r3, #28]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	61da      	str	r2, [r3, #28]
      break;
 8008414:	e023      	b.n	800845e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 faf5 	bl	8008a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69d9      	ldr	r1, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	021a      	lsls	r2, r3, #8
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	61da      	str	r2, [r3, #28]
      break;
 8008456:	e002      	b.n	800845e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	75fb      	strb	r3, [r7, #23]
      break;
 800845c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_TIM_ConfigClockSource+0x1c>
 8008488:	2302      	movs	r3, #2
 800848a:	e0b4      	b.n	80085f6 <HAL_TIM_ConfigClockSource+0x186>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c4:	d03e      	beq.n	8008544 <HAL_TIM_ConfigClockSource+0xd4>
 80084c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ca:	f200 8087 	bhi.w	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d2:	f000 8086 	beq.w	80085e2 <HAL_TIM_ConfigClockSource+0x172>
 80084d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084da:	d87f      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b70      	cmp	r3, #112	@ 0x70
 80084de:	d01a      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0xa6>
 80084e0:	2b70      	cmp	r3, #112	@ 0x70
 80084e2:	d87b      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b60      	cmp	r3, #96	@ 0x60
 80084e6:	d050      	beq.n	800858a <HAL_TIM_ConfigClockSource+0x11a>
 80084e8:	2b60      	cmp	r3, #96	@ 0x60
 80084ea:	d877      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084ec:	2b50      	cmp	r3, #80	@ 0x50
 80084ee:	d03c      	beq.n	800856a <HAL_TIM_ConfigClockSource+0xfa>
 80084f0:	2b50      	cmp	r3, #80	@ 0x50
 80084f2:	d873      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084f4:	2b40      	cmp	r3, #64	@ 0x40
 80084f6:	d058      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0x13a>
 80084f8:	2b40      	cmp	r3, #64	@ 0x40
 80084fa:	d86f      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 80084fc:	2b30      	cmp	r3, #48	@ 0x30
 80084fe:	d064      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x15a>
 8008500:	2b30      	cmp	r3, #48	@ 0x30
 8008502:	d86b      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 8008504:	2b20      	cmp	r3, #32
 8008506:	d060      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x15a>
 8008508:	2b20      	cmp	r3, #32
 800850a:	d867      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d05c      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x15a>
 8008510:	2b10      	cmp	r3, #16
 8008512:	d05a      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x15a>
 8008514:	e062      	b.n	80085dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008526:	f000 fb41 	bl	8008bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	609a      	str	r2, [r3, #8]
      break;
 8008542:	e04f      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008554:	f000 fb2a 	bl	8008bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008566:	609a      	str	r2, [r3, #8]
      break;
 8008568:	e03c      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008576:	461a      	mov	r2, r3
 8008578:	f000 fa9e 	bl	8008ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2150      	movs	r1, #80	@ 0x50
 8008582:	4618      	mov	r0, r3
 8008584:	f000 faf7 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 8008588:	e02c      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008596:	461a      	mov	r2, r3
 8008598:	f000 fabd 	bl	8008b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2160      	movs	r1, #96	@ 0x60
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fae7 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 80085a8:	e01c      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085b6:	461a      	mov	r2, r3
 80085b8:	f000 fa7e 	bl	8008ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2140      	movs	r1, #64	@ 0x40
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fad7 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 80085c8:	e00c      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f000 face 	bl	8008b76 <TIM_ITRx_SetConfig>
      break;
 80085da:	e003      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e000      	b.n	80085e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a46      	ldr	r2, [pc, #280]	@ (800872c <TIM_Base_SetConfig+0x12c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861e:	d00f      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a43      	ldr	r2, [pc, #268]	@ (8008730 <TIM_Base_SetConfig+0x130>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a42      	ldr	r2, [pc, #264]	@ (8008734 <TIM_Base_SetConfig+0x134>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a41      	ldr	r2, [pc, #260]	@ (8008738 <TIM_Base_SetConfig+0x138>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a40      	ldr	r2, [pc, #256]	@ (800873c <TIM_Base_SetConfig+0x13c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a35      	ldr	r2, [pc, #212]	@ (800872c <TIM_Base_SetConfig+0x12c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d02b      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008660:	d027      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a32      	ldr	r2, [pc, #200]	@ (8008730 <TIM_Base_SetConfig+0x130>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d023      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a31      	ldr	r2, [pc, #196]	@ (8008734 <TIM_Base_SetConfig+0x134>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01f      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a30      	ldr	r2, [pc, #192]	@ (8008738 <TIM_Base_SetConfig+0x138>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d01b      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2f      	ldr	r2, [pc, #188]	@ (800873c <TIM_Base_SetConfig+0x13c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d017      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a2e      	ldr	r2, [pc, #184]	@ (8008740 <TIM_Base_SetConfig+0x140>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2d      	ldr	r2, [pc, #180]	@ (8008744 <TIM_Base_SetConfig+0x144>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00f      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a2c      	ldr	r2, [pc, #176]	@ (8008748 <TIM_Base_SetConfig+0x148>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00b      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2b      	ldr	r2, [pc, #172]	@ (800874c <TIM_Base_SetConfig+0x14c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d007      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008750 <TIM_Base_SetConfig+0x150>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a29      	ldr	r2, [pc, #164]	@ (8008754 <TIM_Base_SetConfig+0x154>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d108      	bne.n	80086c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a10      	ldr	r2, [pc, #64]	@ (800872c <TIM_Base_SetConfig+0x12c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d003      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a12      	ldr	r2, [pc, #72]	@ (800873c <TIM_Base_SetConfig+0x13c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d103      	bne.n	8008700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	611a      	str	r2, [r3, #16]
  }
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40010000 	.word	0x40010000
 8008730:	40000400 	.word	0x40000400
 8008734:	40000800 	.word	0x40000800
 8008738:	40000c00 	.word	0x40000c00
 800873c:	40010400 	.word	0x40010400
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800
 800874c:	40001800 	.word	0x40001800
 8008750:	40001c00 	.word	0x40001c00
 8008754:	40002000 	.word	0x40002000

08008758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f023 0201 	bic.w	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f023 0302 	bic.w	r3, r3, #2
 80087a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a20      	ldr	r2, [pc, #128]	@ (8008830 <TIM_OC1_SetConfig+0xd8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_OC1_SetConfig+0x64>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008834 <TIM_OC1_SetConfig+0xdc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d10c      	bne.n	80087d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f023 0308 	bic.w	r3, r3, #8
 80087c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f023 0304 	bic.w	r3, r3, #4
 80087d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a15      	ldr	r2, [pc, #84]	@ (8008830 <TIM_OC1_SetConfig+0xd8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d003      	beq.n	80087e6 <TIM_OC1_SetConfig+0x8e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a14      	ldr	r2, [pc, #80]	@ (8008834 <TIM_OC1_SetConfig+0xdc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d111      	bne.n	800880a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	621a      	str	r2, [r3, #32]
}
 8008824:	bf00      	nop
 8008826:	371c      	adds	r7, #28
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	40010000 	.word	0x40010000
 8008834:	40010400 	.word	0x40010400

08008838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	f023 0210 	bic.w	r2, r3, #16
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800886e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f023 0320 	bic.w	r3, r3, #32
 8008882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a22      	ldr	r2, [pc, #136]	@ (800891c <TIM_OC2_SetConfig+0xe4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_OC2_SetConfig+0x68>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a21      	ldr	r2, [pc, #132]	@ (8008920 <TIM_OC2_SetConfig+0xe8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10d      	bne.n	80088bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a17      	ldr	r2, [pc, #92]	@ (800891c <TIM_OC2_SetConfig+0xe4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_OC2_SetConfig+0x94>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a16      	ldr	r2, [pc, #88]	@ (8008920 <TIM_OC2_SetConfig+0xe8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d113      	bne.n	80088f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400

08008924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0303 	bic.w	r3, r3, #3
 800895a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800896c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a21      	ldr	r2, [pc, #132]	@ (8008a04 <TIM_OC3_SetConfig+0xe0>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d003      	beq.n	800898a <TIM_OC3_SetConfig+0x66>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a20      	ldr	r2, [pc, #128]	@ (8008a08 <TIM_OC3_SetConfig+0xe4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d10d      	bne.n	80089a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a16      	ldr	r2, [pc, #88]	@ (8008a04 <TIM_OC3_SetConfig+0xe0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_OC3_SetConfig+0x92>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a15      	ldr	r2, [pc, #84]	@ (8008a08 <TIM_OC3_SetConfig+0xe4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d113      	bne.n	80089de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40010000 	.word	0x40010000
 8008a08:	40010400 	.word	0x40010400

08008a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	031b      	lsls	r3, r3, #12
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a12      	ldr	r2, [pc, #72]	@ (8008ab0 <TIM_OC4_SetConfig+0xa4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_OC4_SetConfig+0x68>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a11      	ldr	r2, [pc, #68]	@ (8008ab4 <TIM_OC4_SetConfig+0xa8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d109      	bne.n	8008a88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	019b      	lsls	r3, r3, #6
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40010400 	.word	0x40010400

08008ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f023 0201 	bic.w	r2, r3, #1
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f023 030a 	bic.w	r3, r3, #10
 8008af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	621a      	str	r2, [r3, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b087      	sub	sp, #28
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	f023 0210 	bic.w	r2, r3, #16
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	031b      	lsls	r3, r3, #12
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f043 0307 	orr.w	r3, r3, #7
 8008b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f003 031f 	and.w	r3, r3, #31
 8008bfe:	2201      	movs	r2, #1
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1a      	ldr	r2, [r3, #32]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	401a      	ands	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 031f 	and.w	r3, r3, #31
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	431a      	orrs	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e05a      	b.n	8008d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a21      	ldr	r2, [pc, #132]	@ (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d022      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9c:	d01d      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d018      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1b      	ldr	r2, [pc, #108]	@ (8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00e      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a18      	ldr	r2, [pc, #96]	@ (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d009      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a17      	ldr	r2, [pc, #92]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d004      	beq.n	8008cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a15      	ldr	r2, [pc, #84]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40000400 	.word	0x40000400
 8008d1c:	40000800 	.word	0x40000800
 8008d20:	40000c00 	.word	0x40000c00
 8008d24:	40010400 	.word	0x40010400
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40001800 	.word	0x40001800

08008d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e03d      	b.n	8008dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e042      	b.n	8008e6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7fd f9da 	bl	80061b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	@ 0x24
 8008e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fdbd 	bl	8009998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	@ 0x28
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d175      	bne.n	8008f80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <HAL_UART_Transmit+0x2c>
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e06e      	b.n	8008f82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2221      	movs	r2, #33	@ 0x21
 8008eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008eb2:	f7fd fb63 	bl	800657c <HAL_GetTick>
 8008eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	88fa      	ldrh	r2, [r7, #6]
 8008ebc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	88fa      	ldrh	r2, [r7, #6]
 8008ec2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ecc:	d108      	bne.n	8008ee0 <HAL_UART_Transmit+0x6c>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d104      	bne.n	8008ee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	e003      	b.n	8008ee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ee8:	e02e      	b.n	8008f48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2180      	movs	r1, #128	@ 0x80
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 fb1f 	bl	8009538 <UART_WaitOnFlagUntilTimeout>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e03a      	b.n	8008f82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10b      	bne.n	8008f2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	3302      	adds	r3, #2
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	e007      	b.n	8008f3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	781a      	ldrb	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	3301      	adds	r3, #1
 8008f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1cb      	bne.n	8008eea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2140      	movs	r1, #64	@ 0x40
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 faeb 	bl	8009538 <UART_WaitOnFlagUntilTimeout>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e006      	b.n	8008f82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e000      	b.n	8008f82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008f80:	2302      	movs	r3, #2
  }
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3720      	adds	r7, #32
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4613      	mov	r3, r2
 8008f96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d112      	bne.n	8008fca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_UART_Receive_IT+0x26>
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e00b      	b.n	8008fcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fb12 	bl	80095ea <UART_Start_Receive_IT>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	e000      	b.n	8008fcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008fca:	2302      	movs	r3, #2
  }
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009000:	2300      	movs	r3, #0
 8009002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900a:	f003 030f 	and.w	r3, r3, #15
 800900e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10f      	bne.n	800903a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800901a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <HAL_UART_IRQHandler+0x66>
 8009026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fbf2 	bl	800981c <UART_Receive_IT>
      return;
 8009038:	e25b      	b.n	80094f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800903a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80de 	beq.w	8009200 <HAL_UART_IRQHandler+0x22c>
 8009044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d106      	bne.n	800905e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009054:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80d1 	beq.w	8009200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <HAL_UART_IRQHandler+0xae>
 800906a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800906e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907a:	f043 0201 	orr.w	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009086:	f003 0304 	and.w	r3, r3, #4
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00b      	beq.n	80090a6 <HAL_UART_IRQHandler+0xd2>
 800908e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909e:	f043 0202 	orr.w	r2, r3, #2
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <HAL_UART_IRQHandler+0xf6>
 80090b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c2:	f043 0204 	orr.w	r2, r3, #4
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <HAL_UART_IRQHandler+0x126>
 80090d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d005      	beq.n	80090fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f2:	f043 0208 	orr.w	r2, r3, #8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 81f2 	beq.w	80094e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009108:	f003 0320 	and.w	r3, r3, #32
 800910c:	2b00      	cmp	r3, #0
 800910e:	d008      	beq.n	8009122 <HAL_UART_IRQHandler+0x14e>
 8009110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fb7d 	bl	800981c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912c:	2b40      	cmp	r3, #64	@ 0x40
 800912e:	bf0c      	ite	eq
 8009130:	2301      	moveq	r3, #1
 8009132:	2300      	movne	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d103      	bne.n	800914e <HAL_UART_IRQHandler+0x17a>
 8009146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d04f      	beq.n	80091ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa85 	bl	800965e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915e:	2b40      	cmp	r3, #64	@ 0x40
 8009160:	d141      	bne.n	80091e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3314      	adds	r3, #20
 8009168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800917c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3314      	adds	r3, #20
 800918a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800918e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800919a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1d9      	bne.n	8009162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d013      	beq.n	80091de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ba:	4a7e      	ldr	r2, [pc, #504]	@ (80093b4 <HAL_UART_IRQHandler+0x3e0>)
 80091bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fd fb98 	bl	80068f8 <HAL_DMA_Abort_IT>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d016      	beq.n	80091fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80091d8:	4610      	mov	r0, r2
 80091da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	e00e      	b.n	80091fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f994 	bl	800950c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e4:	e00a      	b.n	80091fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f990 	bl	800950c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ec:	e006      	b.n	80091fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f98c 	bl	800950c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80091fa:	e175      	b.n	80094e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091fc:	bf00      	nop
    return;
 80091fe:	e173      	b.n	80094e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009204:	2b01      	cmp	r3, #1
 8009206:	f040 814f 	bne.w	80094a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800920a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800920e:	f003 0310 	and.w	r3, r3, #16
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8148 	beq.w	80094a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8141 	beq.w	80094a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009226:	2300      	movs	r3, #0
 8009228:	60bb      	str	r3, [r7, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60bb      	str	r3, [r7, #8]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	60bb      	str	r3, [r7, #8]
 800923a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009246:	2b40      	cmp	r3, #64	@ 0x40
 8009248:	f040 80b6 	bne.w	80093b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8145 	beq.w	80094ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800926a:	429a      	cmp	r2, r3
 800926c:	f080 813e 	bcs.w	80094ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009276:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009282:	f000 8088 	beq.w	8009396 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800929c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	330c      	adds	r3, #12
 80092ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80092b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1d9      	bne.n	8009286 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3314      	adds	r3, #20
 80092d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3314      	adds	r3, #20
 80092f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e1      	bne.n	80092d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3314      	adds	r3, #20
 8009314:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800931e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3314      	adds	r3, #20
 800932e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009332:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009334:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009338:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e3      	bne.n	800930e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2220      	movs	r2, #32
 800934a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009366:	f023 0310 	bic.w	r3, r3, #16
 800936a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	330c      	adds	r3, #12
 8009374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009378:	65ba      	str	r2, [r7, #88]	@ 0x58
 800937a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800937e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e3      	bne.n	8009354 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009390:	4618      	mov	r0, r3
 8009392:	f7fd fa41 	bl	8006818 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f8b7 	bl	8009520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093b2:	e09b      	b.n	80094ec <HAL_UART_IRQHandler+0x518>
 80093b4:	08009725 	.word	0x08009725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 808e 	beq.w	80094f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80093d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8089 	beq.w	80094f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	330c      	adds	r3, #12
 80093e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	330c      	adds	r3, #12
 80093fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009402:	647a      	str	r2, [r7, #68]	@ 0x44
 8009404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e3      	bne.n	80093de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3314      	adds	r3, #20
 800941c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	623b      	str	r3, [r7, #32]
   return(result);
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3314      	adds	r3, #20
 8009436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800943a:	633a      	str	r2, [r7, #48]	@ 0x30
 800943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e3      	bne.n	8009416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	330c      	adds	r3, #12
 8009462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	e853 3f00 	ldrex	r3, [r3]
 800946a:	60fb      	str	r3, [r7, #12]
   return(result);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0310 	bic.w	r3, r3, #16
 8009472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	330c      	adds	r3, #12
 800947c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009480:	61fa      	str	r2, [r7, #28]
 8009482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	69b9      	ldr	r1, [r7, #24]
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	617b      	str	r3, [r7, #20]
   return(result);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e3      	bne.n	800945c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800949a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f83d 	bl	8009520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094a6:	e023      	b.n	80094f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <HAL_UART_IRQHandler+0x4f4>
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f943 	bl	800974c <UART_Transmit_IT>
    return;
 80094c6:	e014      	b.n	80094f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <HAL_UART_IRQHandler+0x51e>
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f983 	bl	80097ec <UART_EndTransmit_IT>
    return;
 80094e6:	e004      	b.n	80094f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80094e8:	bf00      	nop
 80094ea:	e002      	b.n	80094f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80094ec:	bf00      	nop
 80094ee:	e000      	b.n	80094f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80094f0:	bf00      	nop
  }
}
 80094f2:	37e8      	adds	r7, #232	@ 0xe8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	4613      	mov	r3, r2
 8009546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009548:	e03b      	b.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d037      	beq.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009552:	f7fd f813 	bl	800657c <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	6a3a      	ldr	r2, [r7, #32]
 800955e:	429a      	cmp	r2, r3
 8009560:	d302      	bcc.n	8009568 <UART_WaitOnFlagUntilTimeout+0x30>
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e03a      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d023      	beq.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b80      	cmp	r3, #128	@ 0x80
 800957e:	d020      	beq.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b40      	cmp	r3, #64	@ 0x40
 8009584:	d01d      	beq.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0308 	and.w	r3, r3, #8
 8009590:	2b08      	cmp	r3, #8
 8009592:	d116      	bne.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 f857 	bl	800965e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2208      	movs	r2, #8
 80095b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e00f      	b.n	80095e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4013      	ands	r3, r2
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	bf0c      	ite	eq
 80095d2:	2301      	moveq	r3, #1
 80095d4:	2300      	movne	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	461a      	mov	r2, r3
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d0b4      	beq.n	800954a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	4613      	mov	r3, r2
 80095f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2222      	movs	r2, #34	@ 0x22
 8009614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800962e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	695a      	ldr	r2, [r3, #20]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0201 	orr.w	r2, r2, #1
 800963e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0220 	orr.w	r2, r2, #32
 800964e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800965e:	b480      	push	{r7}
 8009660:	b095      	sub	sp, #84	@ 0x54
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	330c      	adds	r3, #12
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800967c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	330c      	adds	r3, #12
 8009684:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009686:	643a      	str	r2, [r7, #64]	@ 0x40
 8009688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800968c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e5      	bne.n	8009666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3314      	adds	r3, #20
 80096a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3314      	adds	r3, #20
 80096b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e5      	bne.n	800969a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d119      	bne.n	800970a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	330c      	adds	r3, #12
 80096dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f023 0310 	bic.w	r3, r3, #16
 80096ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	330c      	adds	r3, #12
 80096f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096f6:	61ba      	str	r2, [r7, #24]
 80096f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6979      	ldr	r1, [r7, #20]
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	613b      	str	r3, [r7, #16]
   return(result);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e5      	bne.n	80096d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009718:	bf00      	nop
 800971a:	3754      	adds	r7, #84	@ 0x54
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7ff fee4 	bl	800950c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b21      	cmp	r3, #33	@ 0x21
 800975e:	d13e      	bne.n	80097de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009768:	d114      	bne.n	8009794 <UART_Transmit_IT+0x48>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d110      	bne.n	8009794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	1c9a      	adds	r2, r3, #2
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	621a      	str	r2, [r3, #32]
 8009792:	e008      	b.n	80097a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	1c59      	adds	r1, r3, #1
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6211      	str	r1, [r2, #32]
 800979e:	781a      	ldrb	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4619      	mov	r1, r3
 80097b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10f      	bne.n	80097da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	e000      	b.n	80097e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097de:	2302      	movs	r3, #2
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fe73 	bl	80094f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08c      	sub	sp, #48	@ 0x30
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b22      	cmp	r3, #34	@ 0x22
 800982e:	f040 80ae 	bne.w	800998e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800983a:	d117      	bne.n	800986c <UART_Receive_IT+0x50>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d113      	bne.n	800986c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985a:	b29a      	uxth	r2, r3
 800985c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	1c9a      	adds	r2, r3, #2
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	629a      	str	r2, [r3, #40]	@ 0x28
 800986a:	e026      	b.n	80098ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800987e:	d007      	beq.n	8009890 <UART_Receive_IT+0x74>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <UART_Receive_IT+0x82>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d106      	bne.n	800989e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e008      	b.n	80098b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	4619      	mov	r1, r3
 80098c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d15d      	bne.n	800998a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0220 	bic.w	r2, r2, #32
 80098dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	695a      	ldr	r2, [r3, #20]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0201 	bic.w	r2, r2, #1
 80098fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2220      	movs	r2, #32
 8009902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009910:	2b01      	cmp	r3, #1
 8009912:	d135      	bne.n	8009980 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	330c      	adds	r3, #12
 8009920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	613b      	str	r3, [r7, #16]
   return(result);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f023 0310 	bic.w	r3, r3, #16
 8009930:	627b      	str	r3, [r7, #36]	@ 0x24
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	330c      	adds	r3, #12
 8009938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800993a:	623a      	str	r2, [r7, #32]
 800993c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	69f9      	ldr	r1, [r7, #28]
 8009940:	6a3a      	ldr	r2, [r7, #32]
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	61bb      	str	r3, [r7, #24]
   return(result);
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e5      	bne.n	800991a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d10a      	bne.n	8009972 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fdd1 	bl	8009520 <HAL_UARTEx_RxEventCallback>
 800997e:	e002      	b.n	8009986 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fb fe9f 	bl	80056c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	e002      	b.n	8009990 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3730      	adds	r7, #48	@ 0x30
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800999c:	b0c0      	sub	sp, #256	@ 0x100
 800999e:	af00      	add	r7, sp, #0
 80099a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b4:	68d9      	ldr	r1, [r3, #12]
 80099b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	ea40 0301 	orr.w	r3, r0, r1
 80099c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	4313      	orrs	r3, r2
 80099e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80099f0:	f021 010c 	bic.w	r1, r1, #12
 80099f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099fe:	430b      	orrs	r3, r1
 8009a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a12:	6999      	ldr	r1, [r3, #24]
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	ea40 0301 	orr.w	r3, r0, r1
 8009a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	4b8f      	ldr	r3, [pc, #572]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d005      	beq.n	8009a38 <UART_SetConfig+0xa0>
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b8d      	ldr	r3, [pc, #564]	@ (8009c68 <UART_SetConfig+0x2d0>)
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d104      	bne.n	8009a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a38:	f7fd fa34 	bl	8006ea4 <HAL_RCC_GetPCLK2Freq>
 8009a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a40:	e003      	b.n	8009a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a42:	f7fd fa1b 	bl	8006e7c <HAL_RCC_GetPCLK1Freq>
 8009a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a54:	f040 810c 	bne.w	8009c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	1891      	adds	r1, r2, r2
 8009a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a72:	415b      	adcs	r3, r3
 8009a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	eb12 0801 	adds.w	r8, r2, r1
 8009a80:	4629      	mov	r1, r5
 8009a82:	eb43 0901 	adc.w	r9, r3, r1
 8009a86:	f04f 0200 	mov.w	r2, #0
 8009a8a:	f04f 0300 	mov.w	r3, #0
 8009a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a9a:	4690      	mov	r8, r2
 8009a9c:	4699      	mov	r9, r3
 8009a9e:	4623      	mov	r3, r4
 8009aa0:	eb18 0303 	adds.w	r3, r8, r3
 8009aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	eb49 0303 	adc.w	r3, r9, r3
 8009aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	18db      	adds	r3, r3, r3
 8009aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009acc:	4613      	mov	r3, r2
 8009ace:	eb42 0303 	adc.w	r3, r2, r3
 8009ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009adc:	f7f6 fdfc 	bl	80006d8 <__aeabi_uldivmod>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4b61      	ldr	r3, [pc, #388]	@ (8009c6c <UART_SetConfig+0x2d4>)
 8009ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	011c      	lsls	r4, r3, #4
 8009aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	1891      	adds	r1, r2, r2
 8009b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b08:	415b      	adcs	r3, r3
 8009b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b10:	4641      	mov	r1, r8
 8009b12:	eb12 0a01 	adds.w	sl, r2, r1
 8009b16:	4649      	mov	r1, r9
 8009b18:	eb43 0b01 	adc.w	fp, r3, r1
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b30:	4692      	mov	sl, r2
 8009b32:	469b      	mov	fp, r3
 8009b34:	4643      	mov	r3, r8
 8009b36:	eb1a 0303 	adds.w	r3, sl, r3
 8009b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b3e:	464b      	mov	r3, r9
 8009b40:	eb4b 0303 	adc.w	r3, fp, r3
 8009b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	18db      	adds	r3, r3, r3
 8009b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b62:	4613      	mov	r3, r2
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b72:	f7f6 fdb1 	bl	80006d8 <__aeabi_uldivmod>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c6c <UART_SetConfig+0x2d4>)
 8009b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	2264      	movs	r2, #100	@ 0x64
 8009b86:	fb02 f303 	mul.w	r3, r2, r3
 8009b8a:	1acb      	subs	r3, r1, r3
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b92:	4b36      	ldr	r3, [pc, #216]	@ (8009c6c <UART_SetConfig+0x2d4>)
 8009b94:	fba3 2302 	umull	r2, r3, r3, r2
 8009b98:	095b      	lsrs	r3, r3, #5
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009ba0:	441c      	add	r4, r3
 8009ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	1891      	adds	r1, r2, r2
 8009bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bbc:	415b      	adcs	r3, r3
 8009bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	1851      	adds	r1, r2, r1
 8009bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009bca:	4649      	mov	r1, r9
 8009bcc:	414b      	adcs	r3, r1
 8009bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bd0:	f04f 0200 	mov.w	r2, #0
 8009bd4:	f04f 0300 	mov.w	r3, #0
 8009bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009bdc:	4659      	mov	r1, fp
 8009bde:	00cb      	lsls	r3, r1, #3
 8009be0:	4651      	mov	r1, sl
 8009be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009be6:	4651      	mov	r1, sl
 8009be8:	00ca      	lsls	r2, r1, #3
 8009bea:	4610      	mov	r0, r2
 8009bec:	4619      	mov	r1, r3
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4642      	mov	r2, r8
 8009bf2:	189b      	adds	r3, r3, r2
 8009bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	460a      	mov	r2, r1
 8009bfc:	eb42 0303 	adc.w	r3, r2, r3
 8009c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c18:	460b      	mov	r3, r1
 8009c1a:	18db      	adds	r3, r3, r3
 8009c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c1e:	4613      	mov	r3, r2
 8009c20:	eb42 0303 	adc.w	r3, r2, r3
 8009c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c2e:	f7f6 fd53 	bl	80006d8 <__aeabi_uldivmod>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <UART_SetConfig+0x2d4>)
 8009c38:	fba3 1302 	umull	r1, r3, r3, r2
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	2164      	movs	r1, #100	@ 0x64
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	3332      	adds	r3, #50	@ 0x32
 8009c4a:	4a08      	ldr	r2, [pc, #32]	@ (8009c6c <UART_SetConfig+0x2d4>)
 8009c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c50:	095b      	lsrs	r3, r3, #5
 8009c52:	f003 0207 	and.w	r2, r3, #7
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4422      	add	r2, r4
 8009c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c60:	e106      	b.n	8009e70 <UART_SetConfig+0x4d8>
 8009c62:	bf00      	nop
 8009c64:	40011000 	.word	0x40011000
 8009c68:	40011400 	.word	0x40011400
 8009c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c82:	4642      	mov	r2, r8
 8009c84:	464b      	mov	r3, r9
 8009c86:	1891      	adds	r1, r2, r2
 8009c88:	6239      	str	r1, [r7, #32]
 8009c8a:	415b      	adcs	r3, r3
 8009c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c92:	4641      	mov	r1, r8
 8009c94:	1854      	adds	r4, r2, r1
 8009c96:	4649      	mov	r1, r9
 8009c98:	eb43 0501 	adc.w	r5, r3, r1
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	00eb      	lsls	r3, r5, #3
 8009ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009caa:	00e2      	lsls	r2, r4, #3
 8009cac:	4614      	mov	r4, r2
 8009cae:	461d      	mov	r5, r3
 8009cb0:	4643      	mov	r3, r8
 8009cb2:	18e3      	adds	r3, r4, r3
 8009cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cb8:	464b      	mov	r3, r9
 8009cba:	eb45 0303 	adc.w	r3, r5, r3
 8009cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cd2:	f04f 0200 	mov.w	r2, #0
 8009cd6:	f04f 0300 	mov.w	r3, #0
 8009cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cde:	4629      	mov	r1, r5
 8009ce0:	008b      	lsls	r3, r1, #2
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ce8:	4621      	mov	r1, r4
 8009cea:	008a      	lsls	r2, r1, #2
 8009cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009cf0:	f7f6 fcf2 	bl	80006d8 <__aeabi_uldivmod>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4b60      	ldr	r3, [pc, #384]	@ (8009e7c <UART_SetConfig+0x4e4>)
 8009cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8009cfe:	095b      	lsrs	r3, r3, #5
 8009d00:	011c      	lsls	r4, r3, #4
 8009d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d14:	4642      	mov	r2, r8
 8009d16:	464b      	mov	r3, r9
 8009d18:	1891      	adds	r1, r2, r2
 8009d1a:	61b9      	str	r1, [r7, #24]
 8009d1c:	415b      	adcs	r3, r3
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d24:	4641      	mov	r1, r8
 8009d26:	1851      	adds	r1, r2, r1
 8009d28:	6139      	str	r1, [r7, #16]
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	414b      	adcs	r3, r1
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	f04f 0300 	mov.w	r3, #0
 8009d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	00cb      	lsls	r3, r1, #3
 8009d40:	4651      	mov	r1, sl
 8009d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d46:	4651      	mov	r1, sl
 8009d48:	00ca      	lsls	r2, r1, #3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4642      	mov	r2, r8
 8009d52:	189b      	adds	r3, r3, r2
 8009d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d58:	464b      	mov	r3, r9
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	eb42 0303 	adc.w	r3, r2, r3
 8009d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	f04f 0300 	mov.w	r3, #0
 8009d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	008b      	lsls	r3, r1, #2
 8009d80:	4641      	mov	r1, r8
 8009d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d86:	4641      	mov	r1, r8
 8009d88:	008a      	lsls	r2, r1, #2
 8009d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009d8e:	f7f6 fca3 	bl	80006d8 <__aeabi_uldivmod>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	4b38      	ldr	r3, [pc, #224]	@ (8009e7c <UART_SetConfig+0x4e4>)
 8009d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d9e:	095b      	lsrs	r3, r3, #5
 8009da0:	2264      	movs	r2, #100	@ 0x64
 8009da2:	fb02 f303 	mul.w	r3, r2, r3
 8009da6:	1acb      	subs	r3, r1, r3
 8009da8:	011b      	lsls	r3, r3, #4
 8009daa:	3332      	adds	r3, #50	@ 0x32
 8009dac:	4a33      	ldr	r2, [pc, #204]	@ (8009e7c <UART_SetConfig+0x4e4>)
 8009dae:	fba2 2303 	umull	r2, r3, r2, r3
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009db8:	441c      	add	r4, r3
 8009dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8009dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009dc8:	4642      	mov	r2, r8
 8009dca:	464b      	mov	r3, r9
 8009dcc:	1891      	adds	r1, r2, r2
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	415b      	adcs	r3, r3
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dd8:	4641      	mov	r1, r8
 8009dda:	1851      	adds	r1, r2, r1
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	4649      	mov	r1, r9
 8009de0:	414b      	adcs	r3, r1
 8009de2:	607b      	str	r3, [r7, #4]
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009df0:	4659      	mov	r1, fp
 8009df2:	00cb      	lsls	r3, r1, #3
 8009df4:	4651      	mov	r1, sl
 8009df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dfa:	4651      	mov	r1, sl
 8009dfc:	00ca      	lsls	r2, r1, #3
 8009dfe:	4610      	mov	r0, r2
 8009e00:	4619      	mov	r1, r3
 8009e02:	4603      	mov	r3, r0
 8009e04:	4642      	mov	r2, r8
 8009e06:	189b      	adds	r3, r3, r2
 8009e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e0a:	464b      	mov	r3, r9
 8009e0c:	460a      	mov	r2, r1
 8009e0e:	eb42 0303 	adc.w	r3, r2, r3
 8009e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	008b      	lsls	r3, r1, #2
 8009e30:	4641      	mov	r1, r8
 8009e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e36:	4641      	mov	r1, r8
 8009e38:	008a      	lsls	r2, r1, #2
 8009e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e3e:	f7f6 fc4b 	bl	80006d8 <__aeabi_uldivmod>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4b0d      	ldr	r3, [pc, #52]	@ (8009e7c <UART_SetConfig+0x4e4>)
 8009e48:	fba3 1302 	umull	r1, r3, r3, r2
 8009e4c:	095b      	lsrs	r3, r3, #5
 8009e4e:	2164      	movs	r1, #100	@ 0x64
 8009e50:	fb01 f303 	mul.w	r3, r1, r3
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	3332      	adds	r3, #50	@ 0x32
 8009e5a:	4a08      	ldr	r2, [pc, #32]	@ (8009e7c <UART_SetConfig+0x4e4>)
 8009e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	f003 020f 	and.w	r2, r3, #15
 8009e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4422      	add	r2, r4
 8009e6e:	609a      	str	r2, [r3, #8]
}
 8009e70:	bf00      	nop
 8009e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e76:	46bd      	mov	sp, r7
 8009e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e7c:	51eb851f 	.word	0x51eb851f

08009e80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009e84:	4904      	ldr	r1, [pc, #16]	@ (8009e98 <MX_FATFS_Init+0x18>)
 8009e86:	4805      	ldr	r0, [pc, #20]	@ (8009e9c <MX_FATFS_Init+0x1c>)
 8009e88:	f002 fea4 	bl	800cbd4 <FATFS_LinkDriver>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461a      	mov	r2, r3
 8009e90:	4b03      	ldr	r3, [pc, #12]	@ (8009ea0 <MX_FATFS_Init+0x20>)
 8009e92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e94:	bf00      	nop
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	2001cb44 	.word	0x2001cb44
 8009e9c:	20016a88 	.word	0x20016a88
 8009ea0:	2001cb40 	.word	0x2001cb40

08009ea4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ea8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7f6 ff35 	bl	8000d30 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8009ec6:	bf00      	nop
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7f7 f80d 	bl	8000efc <SD_disk_status>
  /* USER CODE END STATUS */
}
 8009ee2:	bf00      	nop
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	603b      	str	r3, [r7, #0]
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv, buff, sector, count);
 8009efc:	7bf8      	ldrb	r0, [r7, #15]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	f7f7 f810 	bl	8000f28 <SD_disk_read>
  /* USER CODE END READ */
}
 8009f08:	bf00      	nop
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector,count);
 8009f22:	7bf8      	ldrb	r0, [r7, #15]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	f7f7 f867 	bl	8000ffc <SD_disk_write>
  /* USER CODE END WRITE */
}
 8009f2e:	bf00      	nop
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	603a      	str	r2, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
 8009f44:	460b      	mov	r3, r1
 8009f46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	79b9      	ldrb	r1, [r7, #6]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f7 f8d8 	bl	8001104 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8009f54:	bf00      	nop
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	4a08      	ldr	r2, [pc, #32]	@ (8009f90 <disk_status+0x30>)
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	79fa      	ldrb	r2, [r7, #7]
 8009f78:	4905      	ldr	r1, [pc, #20]	@ (8009f90 <disk_status+0x30>)
 8009f7a:	440a      	add	r2, r1
 8009f7c:	7a12      	ldrb	r2, [r2, #8]
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4798      	blx	r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	2001cd70 	.word	0x2001cd70

08009f94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe0 <disk_initialize+0x4c>)
 8009fa6:	5cd3      	ldrb	r3, [r2, r3]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d114      	bne.n	8009fd6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	4a0c      	ldr	r2, [pc, #48]	@ (8009fe0 <disk_initialize+0x4c>)
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	79fa      	ldrb	r2, [r7, #7]
 8009fba:	4909      	ldr	r1, [pc, #36]	@ (8009fe0 <disk_initialize+0x4c>)
 8009fbc:	440a      	add	r2, r1
 8009fbe:	7a12      	ldrb	r2, [r2, #8]
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009fce:	79fb      	ldrb	r3, [r7, #7]
 8009fd0:	4a03      	ldr	r2, [pc, #12]	@ (8009fe0 <disk_initialize+0x4c>)
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	2001cd70 	.word	0x2001cd70

08009fe4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009fe4:	b590      	push	{r4, r7, lr}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	4a0a      	ldr	r2, [pc, #40]	@ (800a020 <disk_read+0x3c>)
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	689c      	ldr	r4, [r3, #8]
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	4a07      	ldr	r2, [pc, #28]	@ (800a020 <disk_read+0x3c>)
 800a004:	4413      	add	r3, r2
 800a006:	7a18      	ldrb	r0, [r3, #8]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	47a0      	blx	r4
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
  return res;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
}
 800a016:	4618      	mov	r0, r3
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd90      	pop	{r4, r7, pc}
 800a01e:	bf00      	nop
 800a020:	2001cd70 	.word	0x2001cd70

0800a024 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4603      	mov	r3, r0
 800a032:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	4a0a      	ldr	r2, [pc, #40]	@ (800a060 <disk_write+0x3c>)
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	68dc      	ldr	r4, [r3, #12]
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	4a07      	ldr	r2, [pc, #28]	@ (800a060 <disk_write+0x3c>)
 800a044:	4413      	add	r3, r2
 800a046:	7a18      	ldrb	r0, [r3, #8]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	47a0      	blx	r4
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]
  return res;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
}
 800a056:	4618      	mov	r0, r3
 800a058:	371c      	adds	r7, #28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd90      	pop	{r4, r7, pc}
 800a05e:	bf00      	nop
 800a060:	2001cd70 	.word	0x2001cd70

0800a064 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	603a      	str	r2, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
 800a070:	460b      	mov	r3, r1
 800a072:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	4a09      	ldr	r2, [pc, #36]	@ (800a09c <disk_ioctl+0x38>)
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	79fa      	ldrb	r2, [r7, #7]
 800a082:	4906      	ldr	r1, [pc, #24]	@ (800a09c <disk_ioctl+0x38>)
 800a084:	440a      	add	r2, r1
 800a086:	7a10      	ldrb	r0, [r2, #8]
 800a088:	79b9      	ldrb	r1, [r7, #6]
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4798      	blx	r3
 800a08e:	4603      	mov	r3, r0
 800a090:	73fb      	strb	r3, [r7, #15]
  return res;
 800a092:	7bfb      	ldrb	r3, [r7, #15]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	2001cd70 	.word	0x2001cd70

0800a0a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a0b0:	89fb      	ldrh	r3, [r7, #14]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	b21a      	sxth	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	b21b      	sxth	r3, r3
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	b21b      	sxth	r3, r3
 800a0c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a0c2:	89fb      	ldrh	r3, [r7, #14]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3303      	adds	r3, #3
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	3202      	adds	r2, #2
 800a0e8:	7812      	ldrb	r2, [r2, #0]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	021b      	lsls	r3, r3, #8
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	7812      	ldrb	r2, [r2, #0]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]
	return rv;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	607a      	str	r2, [r7, #4]
 800a128:	887a      	ldrh	r2, [r7, #2]
 800a12a:	b2d2      	uxtb	r2, r2
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	887b      	ldrh	r3, [r7, #2]
 800a130:	0a1b      	lsrs	r3, r3, #8
 800a132:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	887a      	ldrh	r2, [r7, #2]
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	701a      	strb	r2, [r3, #0]
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	0a1b      	lsrs	r3, r3, #8
 800a166:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	607a      	str	r2, [r7, #4]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	0a1b      	lsrs	r3, r3, #8
 800a178:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	1c5a      	adds	r2, r3, #1
 800a190:	607a      	str	r2, [r7, #4]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	1c53      	adds	r3, r2, #1
 800a1c2:	613b      	str	r3, [r7, #16]
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	1c59      	adds	r1, r3, #1
 800a1c8:	6179      	str	r1, [r7, #20]
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	607b      	str	r3, [r7, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f1      	bne.n	800a1be <mem_cpy+0x1a>
	}
}
 800a1da:	bf00      	nop
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a1e6:	b480      	push	{r7}
 800a1e8:	b087      	sub	sp, #28
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	617a      	str	r2, [r7, #20]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3b01      	subs	r3, #1
 800a206:	607b      	str	r3, [r7, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1f3      	bne.n	800a1f6 <mem_set+0x10>
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	371c      	adds	r7, #28
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a21c:	b480      	push	{r7}
 800a21e:	b089      	sub	sp, #36	@ 0x24
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	61fb      	str	r3, [r7, #28]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	61fa      	str	r2, [r7, #28]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	4619      	mov	r1, r3
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	61ba      	str	r2, [r7, #24]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	1acb      	subs	r3, r1, r3
 800a248:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	607b      	str	r3, [r7, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <mem_cmp+0x40>
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0eb      	beq.n	800a234 <mem_cmp+0x18>

	return r;
 800a25c:	697b      	ldr	r3, [r7, #20]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3724      	adds	r7, #36	@ 0x24
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a274:	e002      	b.n	800a27c <chk_chr+0x12>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3301      	adds	r3, #1
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <chk_chr+0x26>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d1f2      	bne.n	800a276 <chk_chr+0xc>
	return *str;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	781b      	ldrb	r3, [r3, #0]
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60bb      	str	r3, [r7, #8]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	e029      	b.n	800a308 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a2b4:	4a27      	ldr	r2, [pc, #156]	@ (800a354 <chk_lock+0xb4>)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	011b      	lsls	r3, r3, #4
 800a2ba:	4413      	add	r3, r2
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01d      	beq.n	800a2fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2c2:	4a24      	ldr	r2, [pc, #144]	@ (800a354 <chk_lock+0xb4>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	4413      	add	r3, r2
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d116      	bne.n	800a302 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a354 <chk_lock+0xb4>)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	4413      	add	r3, r2
 800a2dc:	3304      	adds	r3, #4
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d10c      	bne.n	800a302 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a354 <chk_lock+0xb4>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d102      	bne.n	800a302 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2fc:	e007      	b.n	800a30e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a2fe:	2301      	movs	r3, #1
 800a300:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3301      	adds	r3, #1
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d9d2      	bls.n	800a2b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d109      	bne.n	800a328 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d102      	bne.n	800a320 <chk_lock+0x80>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d101      	bne.n	800a324 <chk_lock+0x84>
 800a320:	2300      	movs	r3, #0
 800a322:	e010      	b.n	800a346 <chk_lock+0xa6>
 800a324:	2312      	movs	r3, #18
 800a326:	e00e      	b.n	800a346 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d108      	bne.n	800a340 <chk_lock+0xa0>
 800a32e:	4a09      	ldr	r2, [pc, #36]	@ (800a354 <chk_lock+0xb4>)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	4413      	add	r3, r2
 800a336:	330c      	adds	r3, #12
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a33e:	d101      	bne.n	800a344 <chk_lock+0xa4>
 800a340:	2310      	movs	r3, #16
 800a342:	e000      	b.n	800a346 <chk_lock+0xa6>
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	2001cb50 	.word	0x2001cb50

0800a358 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a35e:	2300      	movs	r3, #0
 800a360:	607b      	str	r3, [r7, #4]
 800a362:	e002      	b.n	800a36a <enq_lock+0x12>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3301      	adds	r3, #1
 800a368:	607b      	str	r3, [r7, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d806      	bhi.n	800a37e <enq_lock+0x26>
 800a370:	4a09      	ldr	r2, [pc, #36]	@ (800a398 <enq_lock+0x40>)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	4413      	add	r3, r2
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f2      	bne.n	800a364 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b02      	cmp	r3, #2
 800a382:	bf14      	ite	ne
 800a384:	2301      	movne	r3, #1
 800a386:	2300      	moveq	r3, #0
 800a388:	b2db      	uxtb	r3, r3
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	2001cb50 	.word	0x2001cb50

0800a39c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	e01f      	b.n	800a3ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a3ac:	4a41      	ldr	r2, [pc, #260]	@ (800a4b4 <inc_lock+0x118>)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	4413      	add	r3, r2
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d113      	bne.n	800a3e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a3be:	4a3d      	ldr	r2, [pc, #244]	@ (800a4b4 <inc_lock+0x118>)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d109      	bne.n	800a3e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a3d2:	4a38      	ldr	r2, [pc, #224]	@ (800a4b4 <inc_lock+0x118>)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	011b      	lsls	r3, r3, #4
 800a3d8:	4413      	add	r3, r2
 800a3da:	3308      	adds	r3, #8
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d006      	beq.n	800a3f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d9dc      	bls.n	800a3ac <inc_lock+0x10>
 800a3f2:	e000      	b.n	800a3f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a3f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d132      	bne.n	800a462 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	e002      	b.n	800a408 <inc_lock+0x6c>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3301      	adds	r3, #1
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d806      	bhi.n	800a41c <inc_lock+0x80>
 800a40e:	4a29      	ldr	r2, [pc, #164]	@ (800a4b4 <inc_lock+0x118>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	4413      	add	r3, r2
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1f2      	bne.n	800a402 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d101      	bne.n	800a426 <inc_lock+0x8a>
 800a422:	2300      	movs	r3, #0
 800a424:	e040      	b.n	800a4a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4922      	ldr	r1, [pc, #136]	@ (800a4b4 <inc_lock+0x118>)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	440b      	add	r3, r1
 800a432:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	491e      	ldr	r1, [pc, #120]	@ (800a4b4 <inc_lock+0x118>)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	440b      	add	r3, r1
 800a440:	3304      	adds	r3, #4
 800a442:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695a      	ldr	r2, [r3, #20]
 800a448:	491a      	ldr	r1, [pc, #104]	@ (800a4b4 <inc_lock+0x118>)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	011b      	lsls	r3, r3, #4
 800a44e:	440b      	add	r3, r1
 800a450:	3308      	adds	r3, #8
 800a452:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a454:	4a17      	ldr	r2, [pc, #92]	@ (800a4b4 <inc_lock+0x118>)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	011b      	lsls	r3, r3, #4
 800a45a:	4413      	add	r3, r2
 800a45c:	330c      	adds	r3, #12
 800a45e:	2200      	movs	r2, #0
 800a460:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d009      	beq.n	800a47c <inc_lock+0xe0>
 800a468:	4a12      	ldr	r2, [pc, #72]	@ (800a4b4 <inc_lock+0x118>)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	4413      	add	r3, r2
 800a470:	330c      	adds	r3, #12
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <inc_lock+0xe0>
 800a478:	2300      	movs	r3, #0
 800a47a:	e015      	b.n	800a4a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d108      	bne.n	800a494 <inc_lock+0xf8>
 800a482:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b4 <inc_lock+0x118>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	4413      	add	r3, r2
 800a48a:	330c      	adds	r3, #12
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	3301      	adds	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	e001      	b.n	800a498 <inc_lock+0xfc>
 800a494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a498:	4906      	ldr	r1, [pc, #24]	@ (800a4b4 <inc_lock+0x118>)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	440b      	add	r3, r1
 800a4a0:	330c      	adds	r3, #12
 800a4a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	2001cb50 	.word	0x2001cb50

0800a4b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d825      	bhi.n	800a518 <dec_lock+0x60>
		n = Files[i].ctr;
 800a4cc:	4a17      	ldr	r2, [pc, #92]	@ (800a52c <dec_lock+0x74>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	4413      	add	r3, r2
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a4da:	89fb      	ldrh	r3, [r7, #14]
 800a4dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4e0:	d101      	bne.n	800a4e6 <dec_lock+0x2e>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a4e6:	89fb      	ldrh	r3, [r7, #14]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <dec_lock+0x3a>
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a4f2:	4a0e      	ldr	r2, [pc, #56]	@ (800a52c <dec_lock+0x74>)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	4413      	add	r3, r2
 800a4fa:	330c      	adds	r3, #12
 800a4fc:	89fa      	ldrh	r2, [r7, #14]
 800a4fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a500:	89fb      	ldrh	r3, [r7, #14]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <dec_lock+0x5a>
 800a506:	4a09      	ldr	r2, [pc, #36]	@ (800a52c <dec_lock+0x74>)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	011b      	lsls	r3, r3, #4
 800a50c:	4413      	add	r3, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	737b      	strb	r3, [r7, #13]
 800a516:	e001      	b.n	800a51c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a518:	2302      	movs	r3, #2
 800a51a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	2001cb50 	.word	0x2001cb50

0800a530 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e010      	b.n	800a560 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a53e:	4a0d      	ldr	r2, [pc, #52]	@ (800a574 <clear_lock+0x44>)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	4413      	add	r3, r2
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d105      	bne.n	800a55a <clear_lock+0x2a>
 800a54e:	4a09      	ldr	r2, [pc, #36]	@ (800a574 <clear_lock+0x44>)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	4413      	add	r3, r2
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d9eb      	bls.n	800a53e <clear_lock+0xe>
	}
}
 800a566:	bf00      	nop
 800a568:	bf00      	nop
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	2001cb50 	.word	0x2001cb50

0800a578 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	78db      	ldrb	r3, [r3, #3]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d034      	beq.n	800a5f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a590:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7858      	ldrb	r0, [r3, #1]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a59c:	2301      	movs	r3, #1
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	f7ff fd40 	bl	800a024 <disk_write>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	73fb      	strb	r3, [r7, #15]
 800a5ae:	e022      	b.n	800a5f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	1ad2      	subs	r2, r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d217      	bcs.n	800a5f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	789b      	ldrb	r3, [r3, #2]
 800a5ca:	613b      	str	r3, [r7, #16]
 800a5cc:	e010      	b.n	800a5f0 <sync_window+0x78>
					wsect += fs->fsize;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7858      	ldrb	r0, [r3, #1]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	f7ff fd1d 	bl	800a024 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	613b      	str	r3, [r7, #16]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d8eb      	bhi.n	800a5ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d01b      	beq.n	800a650 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ffad 	bl	800a578 <sync_window>
 800a61e:	4603      	mov	r3, r0
 800a620:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d113      	bne.n	800a650 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	7858      	ldrb	r0, [r3, #1]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a632:	2301      	movs	r3, #1
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	f7ff fcd5 	bl	8009fe4 <disk_read>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d004      	beq.n	800a64a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a640:	f04f 33ff 	mov.w	r3, #4294967295
 800a644:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a646:	2301      	movs	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ff87 	bl	800a578 <sync_window>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d159      	bne.n	800a728 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d149      	bne.n	800a710 <sync_fs+0xb4>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	791b      	ldrb	r3, [r3, #4]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d145      	bne.n	800a710 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	899b      	ldrh	r3, [r3, #12]
 800a68e:	461a      	mov	r2, r3
 800a690:	2100      	movs	r1, #0
 800a692:	f7ff fda8 	bl	800a1e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3338      	adds	r3, #56	@ 0x38
 800a69a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a69e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff fd37 	bl	800a116 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3338      	adds	r3, #56	@ 0x38
 800a6ac:	4921      	ldr	r1, [pc, #132]	@ (800a734 <sync_fs+0xd8>)
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fd4c 	bl	800a14c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3338      	adds	r3, #56	@ 0x38
 800a6b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a6bc:	491e      	ldr	r1, [pc, #120]	@ (800a738 <sync_fs+0xdc>)
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff fd44 	bl	800a14c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3338      	adds	r3, #56	@ 0x38
 800a6c8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f7ff fd3a 	bl	800a14c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3338      	adds	r3, #56	@ 0x38
 800a6dc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f7ff fd30 	bl	800a14c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7858      	ldrb	r0, [r3, #1]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a704:	2301      	movs	r3, #1
 800a706:	f7ff fc8d 	bl	800a024 <disk_write>
			fs->fsi_flag = 0;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	2200      	movs	r2, #0
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fca3 	bl	800a064 <disk_ioctl>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <sync_fs+0xcc>
 800a724:	2301      	movs	r3, #1
 800a726:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	41615252 	.word	0x41615252
 800a738:	61417272 	.word	0x61417272

0800a73c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	3b02      	subs	r3, #2
 800a74a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	3b02      	subs	r3, #2
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	429a      	cmp	r2, r3
 800a756:	d301      	bcc.n	800a75c <clust2sect+0x20>
 800a758:	2300      	movs	r3, #0
 800a75a:	e008      	b.n	800a76e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	895b      	ldrh	r3, [r3, #10]
 800a760:	461a      	mov	r2, r3
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	fb03 f202 	mul.w	r2, r3, r2
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a76c:	4413      	add	r3, r2
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d904      	bls.n	800a79a <get_fat+0x20>
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d302      	bcc.n	800a7a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a79a:	2301      	movs	r3, #1
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e0ba      	b.n	800a916 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	f000 8082 	beq.w	800a8b4 <get_fat+0x13a>
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	f300 80a6 	bgt.w	800a902 <get_fat+0x188>
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d002      	beq.n	800a7c0 <get_fat+0x46>
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d055      	beq.n	800a86a <get_fat+0xf0>
 800a7be:	e0a0      	b.n	800a902 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	899b      	ldrh	r3, [r3, #12]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7de:	4413      	add	r3, r2
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6938      	ldr	r0, [r7, #16]
 800a7e4:	f7ff ff0c 	bl	800a600 <move_window>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f040 808c 	bne.w	800a908 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	60fa      	str	r2, [r7, #12]
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	8992      	ldrh	r2, [r2, #12]
 800a7fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7fe:	fb01 f202 	mul.w	r2, r1, r2
 800a802:	1a9b      	subs	r3, r3, r2
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	4413      	add	r3, r2
 800a808:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a80c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	899b      	ldrh	r3, [r3, #12]
 800a816:	4619      	mov	r1, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a81e:	4413      	add	r3, r2
 800a820:	4619      	mov	r1, r3
 800a822:	6938      	ldr	r0, [r7, #16]
 800a824:	f7ff feec 	bl	800a600 <move_window>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d16e      	bne.n	800a90c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	899b      	ldrh	r3, [r3, #12]
 800a832:	461a      	mov	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	fbb3 f1f2 	udiv	r1, r3, r2
 800a83a:	fb01 f202 	mul.w	r2, r1, r2
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a848:	021b      	lsls	r3, r3, #8
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <get_fat+0xe6>
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	091b      	lsrs	r3, r3, #4
 800a85e:	e002      	b.n	800a866 <get_fat+0xec>
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a866:	617b      	str	r3, [r7, #20]
			break;
 800a868:	e055      	b.n	800a916 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	899b      	ldrh	r3, [r3, #12]
 800a872:	085b      	lsrs	r3, r3, #1
 800a874:	b29b      	uxth	r3, r3
 800a876:	4619      	mov	r1, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a87e:	4413      	add	r3, r2
 800a880:	4619      	mov	r1, r3
 800a882:	6938      	ldr	r0, [r7, #16]
 800a884:	f7ff febc 	bl	800a600 <move_window>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d140      	bne.n	800a910 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	8992      	ldrh	r2, [r2, #12]
 800a89c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8a0:	fb00 f202 	mul.w	r2, r0, r2
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	440b      	add	r3, r1
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fbf9 	bl	800a0a0 <ld_word>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	617b      	str	r3, [r7, #20]
			break;
 800a8b2:	e030      	b.n	800a916 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	899b      	ldrh	r3, [r3, #12]
 800a8bc:	089b      	lsrs	r3, r3, #2
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8c8:	4413      	add	r3, r2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6938      	ldr	r0, [r7, #16]
 800a8ce:	f7ff fe97 	bl	800a600 <move_window>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d11d      	bne.n	800a914 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	8992      	ldrh	r2, [r2, #12]
 800a8e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8ea:	fb00 f202 	mul.w	r2, r0, r2
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fbec 	bl	800a0d0 <ld_dword>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a8fe:	617b      	str	r3, [r7, #20]
			break;
 800a900:	e009      	b.n	800a916 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a902:	2301      	movs	r3, #1
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	e006      	b.n	800a916 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a908:	bf00      	nop
 800a90a:	e004      	b.n	800a916 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a90c:	bf00      	nop
 800a90e:	e002      	b.n	800a916 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a910:	bf00      	nop
 800a912:	e000      	b.n	800a916 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a914:	bf00      	nop
		}
	}

	return val;
 800a916:	697b      	ldr	r3, [r7, #20]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a920:	b590      	push	{r4, r7, lr}
 800a922:	b089      	sub	sp, #36	@ 0x24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a92c:	2302      	movs	r3, #2
 800a92e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b01      	cmp	r3, #1
 800a934:	f240 8109 	bls.w	800ab4a <put_fat+0x22a>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	f080 8103 	bcs.w	800ab4a <put_fat+0x22a>
		switch (fs->fs_type) {
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	f000 80b6 	beq.w	800aaba <put_fat+0x19a>
 800a94e:	2b03      	cmp	r3, #3
 800a950:	f300 80fb 	bgt.w	800ab4a <put_fat+0x22a>
 800a954:	2b01      	cmp	r3, #1
 800a956:	d003      	beq.n	800a960 <put_fat+0x40>
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f000 8083 	beq.w	800aa64 <put_fat+0x144>
 800a95e:	e0f4      	b.n	800ab4a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	61bb      	str	r3, [r7, #24]
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	085b      	lsrs	r3, r3, #1
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4413      	add	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	899b      	ldrh	r3, [r3, #12]
 800a976:	4619      	mov	r1, r3
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a97e:	4413      	add	r3, r2
 800a980:	4619      	mov	r1, r3
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fe3c 	bl	800a600 <move_window>
 800a988:	4603      	mov	r3, r0
 800a98a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a98c:	7ffb      	ldrb	r3, [r7, #31]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f040 80d4 	bne.w	800ab3c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	61ba      	str	r2, [r7, #24]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	8992      	ldrh	r2, [r2, #12]
 800a9a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9a8:	fb00 f202 	mul.w	r2, r0, r2
 800a9ac:	1a9b      	subs	r3, r3, r2
 800a9ae:	440b      	add	r3, r1
 800a9b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00d      	beq.n	800a9d8 <put_fat+0xb8>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	b25b      	sxtb	r3, r3
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	b25a      	sxtb	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	b25b      	sxtb	r3, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	b25b      	sxtb	r3, r3
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	e001      	b.n	800a9dc <put_fat+0xbc>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	899b      	ldrh	r3, [r3, #12]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9f6:	4413      	add	r3, r2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff fe00 	bl	800a600 <move_window>
 800aa00:	4603      	mov	r3, r0
 800aa02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa04:	7ffb      	ldrb	r3, [r7, #31]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f040 809a 	bne.w	800ab40 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	899b      	ldrh	r3, [r3, #12]
 800aa16:	461a      	mov	r2, r3
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa1e:	fb00 f202 	mul.w	r2, r0, r2
 800aa22:	1a9b      	subs	r3, r3, r2
 800aa24:	440b      	add	r3, r1
 800aa26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <put_fat+0x11a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	091b      	lsrs	r3, r3, #4
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	e00e      	b.n	800aa58 <put_fat+0x138>
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	f023 030f 	bic.w	r3, r3, #15
 800aa44:	b25a      	sxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0a1b      	lsrs	r3, r3, #8
 800aa4a:	b25b      	sxtb	r3, r3
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	b25b      	sxtb	r3, r3
 800aa52:	4313      	orrs	r3, r2
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	70da      	strb	r2, [r3, #3]
			break;
 800aa62:	e072      	b.n	800ab4a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	899b      	ldrh	r3, [r3, #12]
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4619      	mov	r1, r3
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa78:	4413      	add	r3, r2
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fdbf 	bl	800a600 <move_window>
 800aa82:	4603      	mov	r3, r0
 800aa84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa86:	7ffb      	ldrb	r3, [r7, #31]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d15b      	bne.n	800ab44 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	8992      	ldrh	r2, [r2, #12]
 800aa9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa9e:	fb00 f202 	mul.w	r2, r0, r2
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	b292      	uxth	r2, r2
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff fb32 	bl	800a116 <st_word>
			fs->wflag = 1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	70da      	strb	r2, [r3, #3]
			break;
 800aab8:	e047      	b.n	800ab4a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	899b      	ldrh	r3, [r3, #12]
 800aac2:	089b      	lsrs	r3, r3, #2
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	fbb3 f3f1 	udiv	r3, r3, r1
 800aace:	4413      	add	r3, r2
 800aad0:	4619      	mov	r1, r3
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff fd94 	bl	800a600 <move_window>
 800aad8:	4603      	mov	r3, r0
 800aada:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aadc:	7ffb      	ldrb	r3, [r7, #31]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d132      	bne.n	800ab48 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	8992      	ldrh	r2, [r2, #12]
 800aaf6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aafa:	fb00 f202 	mul.w	r2, r0, r2
 800aafe:	1a9b      	subs	r3, r3, r2
 800ab00:	440b      	add	r3, r1
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff fae4 	bl	800a0d0 <ld_dword>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ab0e:	4323      	orrs	r3, r4
 800ab10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	8992      	ldrh	r2, [r2, #12]
 800ab20:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab24:	fb00 f202 	mul.w	r2, r0, r2
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff fb0c 	bl	800a14c <st_dword>
			fs->wflag = 1;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	70da      	strb	r2, [r3, #3]
			break;
 800ab3a:	e006      	b.n	800ab4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ab3c:	bf00      	nop
 800ab3e:	e004      	b.n	800ab4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ab40:	bf00      	nop
 800ab42:	e002      	b.n	800ab4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ab44:	bf00      	nop
 800ab46:	e000      	b.n	800ab4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ab48:	bf00      	nop
		}
	}
	return res;
 800ab4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3724      	adds	r7, #36	@ 0x24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd90      	pop	{r4, r7, pc}

0800ab54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d904      	bls.n	800ab7a <remove_chain+0x26>
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d301      	bcc.n	800ab7e <remove_chain+0x2a>
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e04b      	b.n	800ac16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00c      	beq.n	800ab9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	69b8      	ldr	r0, [r7, #24]
 800ab8c:	f7ff fec8 	bl	800a920 <put_fat>
 800ab90:	4603      	mov	r3, r0
 800ab92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ab94:	7ffb      	ldrb	r3, [r7, #31]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <remove_chain+0x4a>
 800ab9a:	7ffb      	ldrb	r3, [r7, #31]
 800ab9c:	e03b      	b.n	800ac16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7ff fdea 	bl	800a77a <get_fat>
 800aba6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d031      	beq.n	800ac12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d101      	bne.n	800abb8 <remove_chain+0x64>
 800abb4:	2302      	movs	r3, #2
 800abb6:	e02e      	b.n	800ac16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbe:	d101      	bne.n	800abc4 <remove_chain+0x70>
 800abc0:	2301      	movs	r3, #1
 800abc2:	e028      	b.n	800ac16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abc4:	2200      	movs	r2, #0
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	69b8      	ldr	r0, [r7, #24]
 800abca:	f7ff fea9 	bl	800a920 <put_fat>
 800abce:	4603      	mov	r3, r0
 800abd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abd2:	7ffb      	ldrb	r3, [r7, #31]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <remove_chain+0x88>
 800abd8:	7ffb      	ldrb	r3, [r7, #31]
 800abda:	e01c      	b.n	800ac16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	699a      	ldr	r2, [r3, #24]
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	69db      	ldr	r3, [r3, #28]
 800abe4:	3b02      	subs	r3, #2
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d20b      	bcs.n	800ac02 <remove_chain+0xae>
			fs->free_clst++;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	791b      	ldrb	r3, [r3, #4]
 800abf8:	f043 0301 	orr.w	r3, r3, #1
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d3c6      	bcc.n	800ab9e <remove_chain+0x4a>
 800ac10:	e000      	b.n	800ac14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3720      	adds	r7, #32
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b088      	sub	sp, #32
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10d      	bne.n	800ac50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <create_chain+0x2c>
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d31b      	bcc.n	800ac82 <create_chain+0x64>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	61bb      	str	r3, [r7, #24]
 800ac4e:	e018      	b.n	800ac82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7ff fd91 	bl	800a77a <get_fat>
 800ac58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d801      	bhi.n	800ac64 <create_chain+0x46>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e070      	b.n	800ad46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d101      	bne.n	800ac70 <create_chain+0x52>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	e06a      	b.n	800ad46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d201      	bcs.n	800ac7e <create_chain+0x60>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	e063      	b.n	800ad46 <create_chain+0x128>
		scl = clst;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d307      	bcc.n	800aca6 <create_chain+0x88>
				ncl = 2;
 800ac96:	2302      	movs	r3, #2
 800ac98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d901      	bls.n	800aca6 <create_chain+0x88>
 800aca2:	2300      	movs	r3, #0
 800aca4:	e04f      	b.n	800ad46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aca6:	69f9      	ldr	r1, [r7, #28]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fd66 	bl	800a77a <get_fat>
 800acae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00e      	beq.n	800acd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d003      	beq.n	800acc4 <create_chain+0xa6>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc2:	d101      	bne.n	800acc8 <create_chain+0xaa>
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	e03e      	b.n	800ad46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800acc8:	69fa      	ldr	r2, [r7, #28]
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	429a      	cmp	r2, r3
 800acce:	d1da      	bne.n	800ac86 <create_chain+0x68>
 800acd0:	2300      	movs	r3, #0
 800acd2:	e038      	b.n	800ad46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800acd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295
 800acda:	69f9      	ldr	r1, [r7, #28]
 800acdc:	6938      	ldr	r0, [r7, #16]
 800acde:	f7ff fe1f 	bl	800a920 <put_fat>
 800ace2:	4603      	mov	r3, r0
 800ace4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d109      	bne.n	800ad00 <create_chain+0xe2>
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d006      	beq.n	800ad00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6938      	ldr	r0, [r7, #16]
 800acf8:	f7ff fe12 	bl	800a920 <put_fat>
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d116      	bne.n	800ad34 <create_chain+0x116>
		fs->last_clst = ncl;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	69fa      	ldr	r2, [r7, #28]
 800ad0a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	699a      	ldr	r2, [r3, #24]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	3b02      	subs	r3, #2
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d804      	bhi.n	800ad24 <create_chain+0x106>
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	791b      	ldrb	r3, [r3, #4]
 800ad28:	f043 0301 	orr.w	r3, r3, #1
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	711a      	strb	r2, [r3, #4]
 800ad32:	e007      	b.n	800ad44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d102      	bne.n	800ad40 <create_chain+0x122>
 800ad3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3e:	e000      	b.n	800ad42 <create_chain+0x124>
 800ad40:	2301      	movs	r3, #1
 800ad42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad44:	69fb      	ldr	r3, [r7, #28]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b087      	sub	sp, #28
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad62:	3304      	adds	r3, #4
 800ad64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	899b      	ldrh	r3, [r3, #12]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	8952      	ldrh	r2, [r2, #10]
 800ad76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	1d1a      	adds	r2, r3, #4
 800ad80:	613a      	str	r2, [r7, #16]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <clmt_clust+0x42>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e010      	b.n	800adb2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ad90:	697a      	ldr	r2, [r7, #20]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d307      	bcc.n	800ada8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3304      	adds	r3, #4
 800ada4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ada6:	e7e9      	b.n	800ad7c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ada8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	4413      	add	r3, r2
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800add4:	d204      	bcs.n	800ade0 <dir_sdi+0x22>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ade0:	2302      	movs	r3, #2
 800ade2:	e071      	b.n	800aec8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d106      	bne.n	800ae04 <dir_sdi+0x46>
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d902      	bls.n	800ae04 <dir_sdi+0x46>
		clst = fs->dirbase;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae02:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10c      	bne.n	800ae24 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	095b      	lsrs	r3, r3, #5
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	8912      	ldrh	r2, [r2, #8]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d301      	bcc.n	800ae1a <dir_sdi+0x5c>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e056      	b.n	800aec8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	61da      	str	r2, [r3, #28]
 800ae22:	e02d      	b.n	800ae80 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	895b      	ldrh	r3, [r3, #10]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	899b      	ldrh	r3, [r3, #12]
 800ae2e:	fb02 f303 	mul.w	r3, r2, r3
 800ae32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae34:	e019      	b.n	800ae6a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff fc9d 	bl	800a77a <get_fat>
 800ae40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d101      	bne.n	800ae4e <dir_sdi+0x90>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e03c      	b.n	800aec8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d904      	bls.n	800ae5e <dir_sdi+0xa0>
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d301      	bcc.n	800ae62 <dir_sdi+0xa4>
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e032      	b.n	800aec8 <dir_sdi+0x10a>
			ofs -= csz;
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d2e1      	bcs.n	800ae36 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ae72:	6979      	ldr	r1, [r7, #20]
 800ae74:	6938      	ldr	r0, [r7, #16]
 800ae76:	f7ff fc61 	bl	800a73c <clust2sect>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <dir_sdi+0xd4>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e01a      	b.n	800aec8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69da      	ldr	r2, [r3, #28]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	899b      	ldrh	r3, [r3, #12]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aea2:	441a      	add	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	899b      	ldrh	r3, [r3, #12]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeba:	fb00 f202 	mul.w	r2, r0, r2
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	18ca      	adds	r2, r1, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	3320      	adds	r3, #32
 800aee6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <dir_next+0x28>
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aef6:	d301      	bcc.n	800aefc <dir_next+0x2c>
 800aef8:	2304      	movs	r3, #4
 800aefa:	e0bb      	b.n	800b074 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	899b      	ldrh	r3, [r3, #12]
 800af00:	461a      	mov	r2, r3
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	fbb3 f1f2 	udiv	r1, r3, r2
 800af08:	fb01 f202 	mul.w	r2, r1, r2
 800af0c:	1a9b      	subs	r3, r3, r2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f040 809d 	bne.w	800b04e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10b      	bne.n	800af3e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	095b      	lsrs	r3, r3, #5
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	8912      	ldrh	r2, [r2, #8]
 800af2e:	4293      	cmp	r3, r2
 800af30:	f0c0 808d 	bcc.w	800b04e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	61da      	str	r2, [r3, #28]
 800af3a:	2304      	movs	r3, #4
 800af3c:	e09a      	b.n	800b074 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	899b      	ldrh	r3, [r3, #12]
 800af42:	461a      	mov	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	fbb3 f3f2 	udiv	r3, r3, r2
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	8952      	ldrh	r2, [r2, #10]
 800af4e:	3a01      	subs	r2, #1
 800af50:	4013      	ands	r3, r2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d17b      	bne.n	800b04e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7ff fc0b 	bl	800a77a <get_fat>
 800af64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d801      	bhi.n	800af70 <dir_next+0xa0>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e081      	b.n	800b074 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af76:	d101      	bne.n	800af7c <dir_next+0xac>
 800af78:	2301      	movs	r3, #1
 800af7a:	e07b      	b.n	800b074 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	429a      	cmp	r2, r3
 800af84:	d359      	bcc.n	800b03a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	61da      	str	r2, [r3, #28]
 800af92:	2304      	movs	r3, #4
 800af94:	e06e      	b.n	800b074 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7ff fe3d 	bl	800ac1e <create_chain>
 800afa4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <dir_next+0xe0>
 800afac:	2307      	movs	r3, #7
 800afae:	e061      	b.n	800b074 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d101      	bne.n	800afba <dir_next+0xea>
 800afb6:	2302      	movs	r3, #2
 800afb8:	e05c      	b.n	800b074 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc0:	d101      	bne.n	800afc6 <dir_next+0xf6>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e056      	b.n	800b074 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fad6 	bl	800a578 <sync_window>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <dir_next+0x106>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e04e      	b.n	800b074 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	899b      	ldrh	r3, [r3, #12]
 800afe0:	461a      	mov	r2, r3
 800afe2:	2100      	movs	r1, #0
 800afe4:	f7ff f8ff 	bl	800a1e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	6979      	ldr	r1, [r7, #20]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7ff fba4 	bl	800a73c <clust2sect>
 800aff4:	4602      	mov	r2, r0
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	635a      	str	r2, [r3, #52]	@ 0x34
 800affa:	e012      	b.n	800b022 <dir_next+0x152>
						fs->wflag = 1;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff fab8 	bl	800a578 <sync_window>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <dir_next+0x142>
 800b00e:	2301      	movs	r3, #1
 800b010:	e030      	b.n	800b074 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3301      	adds	r3, #1
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	1c5a      	adds	r2, r3, #1
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	635a      	str	r2, [r3, #52]	@ 0x34
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	895b      	ldrh	r3, [r3, #10]
 800b026:	461a      	mov	r2, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d3e6      	bcc.n	800affc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	1ad2      	subs	r2, r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b040:	6979      	ldr	r1, [r7, #20]
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7ff fb7a 	bl	800a73c <clust2sect>
 800b048:	4602      	mov	r2, r0
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	899b      	ldrh	r3, [r3, #12]
 800b05e:	461a      	mov	r2, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	fbb3 f0f2 	udiv	r0, r3, r2
 800b066:	fb00 f202 	mul.w	r2, r0, r2
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	18ca      	adds	r2, r1, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b08c:	2100      	movs	r1, #0
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fe95 	bl	800adbe <dir_sdi>
 800b094:	4603      	mov	r3, r0
 800b096:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b098:	7dfb      	ldrb	r3, [r7, #23]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d12b      	bne.n	800b0f6 <dir_alloc+0x7a>
		n = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f7ff faa9 	bl	800a600 <move_window>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d11d      	bne.n	800b0f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2be5      	cmp	r3, #229	@ 0xe5
 800b0c0:	d004      	beq.n	800b0cc <dir_alloc+0x50>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d107      	bne.n	800b0dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	613b      	str	r3, [r7, #16]
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d102      	bne.n	800b0e0 <dir_alloc+0x64>
 800b0da:	e00c      	b.n	800b0f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0dc:	2300      	movs	r3, #0
 800b0de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff fef4 	bl	800aed0 <dir_next>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0d7      	beq.n	800b0a2 <dir_alloc+0x26>
 800b0f2:	e000      	b.n	800b0f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	2b04      	cmp	r3, #4
 800b0fa:	d101      	bne.n	800b100 <dir_alloc+0x84>
 800b0fc:	2307      	movs	r3, #7
 800b0fe:	75fb      	strb	r3, [r7, #23]
	return res;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	331a      	adds	r3, #26
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe ffc1 	bl	800a0a0 <ld_word>
 800b11e:	4603      	mov	r3, r0
 800b120:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b03      	cmp	r3, #3
 800b128:	d109      	bne.n	800b13e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	3314      	adds	r3, #20
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe ffb6 	bl	800a0a0 <ld_word>
 800b134:	4603      	mov	r3, r0
 800b136:	041b      	lsls	r3, r3, #16
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b13e:	68fb      	ldr	r3, [r7, #12]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	331a      	adds	r3, #26
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	b292      	uxth	r2, r2
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe ffd9 	bl	800a116 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d109      	bne.n	800b180 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	f103 0214 	add.w	r2, r3, #20
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	0c1b      	lsrs	r3, r3, #16
 800b176:	b29b      	uxth	r3, r3
 800b178:	4619      	mov	r1, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7fe ffcb 	bl	800a116 <st_word>
	}
}
 800b180:	bf00      	nop
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b188:	b590      	push	{r4, r7, lr}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	331a      	adds	r3, #26
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe ff82 	bl	800a0a0 <ld_word>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <cmp_lfn+0x1e>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e059      	b.n	800b25a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1ae:	1e5a      	subs	r2, r3, #1
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b1bc:	2301      	movs	r3, #1
 800b1be:	81fb      	strh	r3, [r7, #14]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	e033      	b.n	800b22e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b1c6:	4a27      	ldr	r2, [pc, #156]	@ (800b264 <cmp_lfn+0xdc>)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe ff63 	bl	800a0a0 <ld_word>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b1de:	89fb      	ldrh	r3, [r7, #14]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01a      	beq.n	800b21a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1e8:	d812      	bhi.n	800b210 <cmp_lfn+0x88>
 800b1ea:	89bb      	ldrh	r3, [r7, #12]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 fd3d 	bl	800cc6c <ff_wtoupper>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	461c      	mov	r4, r3
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	617a      	str	r2, [r7, #20]
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	4413      	add	r3, r2
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f001 fd31 	bl	800cc6c <ff_wtoupper>
 800b20a:	4603      	mov	r3, r0
 800b20c:	429c      	cmp	r4, r3
 800b20e:	d001      	beq.n	800b214 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b210:	2300      	movs	r3, #0
 800b212:	e022      	b.n	800b25a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b214:	89bb      	ldrh	r3, [r7, #12]
 800b216:	81fb      	strh	r3, [r7, #14]
 800b218:	e006      	b.n	800b228 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b21a:	89bb      	ldrh	r3, [r7, #12]
 800b21c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b220:	4293      	cmp	r3, r2
 800b222:	d001      	beq.n	800b228 <cmp_lfn+0xa0>
 800b224:	2300      	movs	r3, #0
 800b226:	e018      	b.n	800b25a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	3301      	adds	r3, #1
 800b22c:	613b      	str	r3, [r7, #16]
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	2b0c      	cmp	r3, #12
 800b232:	d9c8      	bls.n	800b1c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <cmp_lfn+0xd0>
 800b240:	89fb      	ldrh	r3, [r7, #14]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d008      	beq.n	800b258 <cmp_lfn+0xd0>
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	4413      	add	r3, r2
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <cmp_lfn+0xd0>
 800b254:	2300      	movs	r3, #0
 800b256:	e000      	b.n	800b25a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b258:	2301      	movs	r3, #1
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	0800d86c 	.word	0x0800d86c

0800b268 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	4611      	mov	r1, r2
 800b274:	461a      	mov	r2, r3
 800b276:	460b      	mov	r3, r1
 800b278:	71fb      	strb	r3, [r7, #7]
 800b27a:	4613      	mov	r3, r2
 800b27c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	330d      	adds	r3, #13
 800b282:	79ba      	ldrb	r2, [r7, #6]
 800b284:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	330b      	adds	r3, #11
 800b28a:	220f      	movs	r2, #15
 800b28c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	330c      	adds	r3, #12
 800b292:	2200      	movs	r2, #0
 800b294:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	331a      	adds	r3, #26
 800b29a:	2100      	movs	r1, #0
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe ff3a 	bl	800a116 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	1e5a      	subs	r2, r3, #1
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	82fb      	strh	r3, [r7, #22]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b2ba:	8afb      	ldrh	r3, [r7, #22]
 800b2bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d007      	beq.n	800b2d4 <put_lfn+0x6c>
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	1c5a      	adds	r2, r3, #1
 800b2c8:	61fa      	str	r2, [r7, #28]
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	881b      	ldrh	r3, [r3, #0]
 800b2d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b2d4:	4a17      	ldr	r2, [pc, #92]	@ (800b334 <put_lfn+0xcc>)
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	4413      	add	r3, r2
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	8afa      	ldrh	r2, [r7, #22]
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe ff15 	bl	800a116 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b2ec:	8afb      	ldrh	r3, [r7, #22]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d102      	bne.n	800b2f8 <put_lfn+0x90>
 800b2f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b0c      	cmp	r3, #12
 800b302:	d9da      	bls.n	800b2ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b304:	8afb      	ldrh	r3, [r7, #22]
 800b306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d006      	beq.n	800b31c <put_lfn+0xb4>
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	881b      	ldrh	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <put_lfn+0xbc>
 800b31c:	79fb      	ldrb	r3, [r7, #7]
 800b31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b322:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	79fa      	ldrb	r2, [r7, #7]
 800b328:	701a      	strb	r2, [r3, #0]
}
 800b32a:	bf00      	nop
 800b32c:	3720      	adds	r7, #32
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	0800d86c 	.word	0x0800d86c

0800b338 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08c      	sub	sp, #48	@ 0x30
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b346:	220b      	movs	r2, #11
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7fe ff2a 	bl	800a1a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b05      	cmp	r3, #5
 800b354:	d92b      	bls.n	800b3ae <gen_numname+0x76>
		sr = seq;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b35a:	e022      	b.n	800b3a2 <gen_numname+0x6a>
			wc = *lfn++;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	1c9a      	adds	r2, r3, #2
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b366:	2300      	movs	r3, #0
 800b368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b36a:	e017      	b.n	800b39c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	005a      	lsls	r2, r3, #1
 800b370:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	4413      	add	r3, r2
 800b378:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b37a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b37c:	085b      	lsrs	r3, r3, #1
 800b37e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <gen_numname+0x5e>
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b390:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b394:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b398:	3301      	adds	r3, #1
 800b39a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39e:	2b0f      	cmp	r3, #15
 800b3a0:	d9e4      	bls.n	800b36c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1d8      	bne.n	800b35c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b3ae:	2307      	movs	r3, #7
 800b3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	f003 030f 	and.w	r3, r3, #15
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	3330      	adds	r3, #48	@ 0x30
 800b3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3c6:	2b39      	cmp	r3, #57	@ 0x39
 800b3c8:	d904      	bls.n	800b3d4 <gen_numname+0x9c>
 800b3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3ce:	3307      	adds	r3, #7
 800b3d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	1e5a      	subs	r2, r3, #1
 800b3d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3da:	3330      	adds	r3, #48	@ 0x30
 800b3dc:	443b      	add	r3, r7
 800b3de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b3e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	091b      	lsrs	r3, r3, #4
 800b3ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1df      	bne.n	800b3b2 <gen_numname+0x7a>
	ns[i] = '~';
 800b3f2:	f107 0214 	add.w	r2, r7, #20
 800b3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f8:	4413      	add	r3, r2
 800b3fa:	227e      	movs	r2, #126	@ 0x7e
 800b3fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b3fe:	2300      	movs	r3, #0
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
 800b402:	e002      	b.n	800b40a <gen_numname+0xd2>
 800b404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b406:	3301      	adds	r3, #1
 800b408:	627b      	str	r3, [r7, #36]	@ 0x24
 800b40a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40e:	429a      	cmp	r2, r3
 800b410:	d205      	bcs.n	800b41e <gen_numname+0xe6>
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	4413      	add	r3, r2
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b20      	cmp	r3, #32
 800b41c:	d1f2      	bne.n	800b404 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b420:	2b07      	cmp	r3, #7
 800b422:	d807      	bhi.n	800b434 <gen_numname+0xfc>
 800b424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b42a:	3330      	adds	r3, #48	@ 0x30
 800b42c:	443b      	add	r3, r7
 800b42e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b432:	e000      	b.n	800b436 <gen_numname+0xfe>
 800b434:	2120      	movs	r1, #32
 800b436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	460a      	mov	r2, r1
 800b442:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	2b07      	cmp	r3, #7
 800b448:	d9e9      	bls.n	800b41e <gen_numname+0xe6>
}
 800b44a:	bf00      	nop
 800b44c:	bf00      	nop
 800b44e:	3730      	adds	r7, #48	@ 0x30
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b460:	230b      	movs	r3, #11
 800b462:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	b2da      	uxtb	r2, r3
 800b468:	0852      	lsrs	r2, r2, #1
 800b46a:	01db      	lsls	r3, r3, #7
 800b46c:	4313      	orrs	r3, r2
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	1c59      	adds	r1, r3, #1
 800b474:	6079      	str	r1, [r7, #4]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	4413      	add	r3, r2
 800b47a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	3b01      	subs	r3, #1
 800b480:	60bb      	str	r3, [r7, #8]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1ed      	bne.n	800b464 <sum_sfn+0x10>
	return sum;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff fc89 	bl	800adbe <dir_sdi>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <dir_find+0x24>
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	e0a9      	b.n	800b60e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b4ba:	23ff      	movs	r3, #255	@ 0xff
 800b4bc:	753b      	strb	r3, [r7, #20]
 800b4be:	7d3b      	ldrb	r3, [r7, #20]
 800b4c0:	757b      	strb	r3, [r7, #21]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6938      	ldr	r0, [r7, #16]
 800b4d2:	f7ff f895 	bl	800a600 <move_window>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 8090 	bne.w	800b602 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b4ea:	7dbb      	ldrb	r3, [r7, #22]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <dir_find+0x60>
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	75fb      	strb	r3, [r7, #23]
 800b4f4:	e08a      	b.n	800b60c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	330b      	adds	r3, #11
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b502:	73fb      	strb	r3, [r7, #15]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7bfa      	ldrb	r2, [r7, #15]
 800b508:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b50a:	7dbb      	ldrb	r3, [r7, #22]
 800b50c:	2be5      	cmp	r3, #229	@ 0xe5
 800b50e:	d007      	beq.n	800b520 <dir_find+0x8a>
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	f003 0308 	and.w	r3, r3, #8
 800b516:	2b00      	cmp	r3, #0
 800b518:	d009      	beq.n	800b52e <dir_find+0x98>
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
 800b51c:	2b0f      	cmp	r3, #15
 800b51e:	d006      	beq.n	800b52e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b520:	23ff      	movs	r3, #255	@ 0xff
 800b522:	757b      	strb	r3, [r7, #21]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b52c:	e05e      	b.n	800b5ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	2b0f      	cmp	r3, #15
 800b532:	d136      	bne.n	800b5a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d154      	bne.n	800b5ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b542:	7dbb      	ldrb	r3, [r7, #22]
 800b544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00d      	beq.n	800b568 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	7b5b      	ldrb	r3, [r3, #13]
 800b552:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b554:	7dbb      	ldrb	r3, [r7, #22]
 800b556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b55a:	75bb      	strb	r3, [r7, #22]
 800b55c:	7dbb      	ldrb	r3, [r7, #22]
 800b55e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	695a      	ldr	r2, [r3, #20]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b568:	7dba      	ldrb	r2, [r7, #22]
 800b56a:	7d7b      	ldrb	r3, [r7, #21]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d115      	bne.n	800b59c <dir_find+0x106>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	330d      	adds	r3, #13
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	7d3a      	ldrb	r2, [r7, #20]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d10e      	bne.n	800b59c <dir_find+0x106>
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	691a      	ldr	r2, [r3, #16]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	4619      	mov	r1, r3
 800b588:	4610      	mov	r0, r2
 800b58a:	f7ff fdfd 	bl	800b188 <cmp_lfn>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <dir_find+0x106>
 800b594:	7d7b      	ldrb	r3, [r7, #21]
 800b596:	3b01      	subs	r3, #1
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	e000      	b.n	800b59e <dir_find+0x108>
 800b59c:	23ff      	movs	r3, #255	@ 0xff
 800b59e:	757b      	strb	r3, [r7, #21]
 800b5a0:	e024      	b.n	800b5ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b5a2:	7d7b      	ldrb	r3, [r7, #21]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d109      	bne.n	800b5bc <dir_find+0x126>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7ff ff51 	bl	800b454 <sum_sfn>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	7d3b      	ldrb	r3, [r7, #20]
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d024      	beq.n	800b606 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10a      	bne.n	800b5e0 <dir_find+0x14a>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a18      	ldr	r0, [r3, #32]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3324      	adds	r3, #36	@ 0x24
 800b5d2:	220b      	movs	r2, #11
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f7fe fe21 	bl	800a21c <mem_cmp>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d014      	beq.n	800b60a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5e0:	23ff      	movs	r3, #255	@ 0xff
 800b5e2:	757b      	strb	r3, [r7, #21]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff fc6e 	bl	800aed0 <dir_next>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f43f af65 	beq.w	800b4ca <dir_find+0x34>
 800b600:	e004      	b.n	800b60c <dir_find+0x176>
		if (res != FR_OK) break;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b60a:	bf00      	nop

	return res;
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	@ 0x30
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b62c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <dir_register+0x20>
 800b634:	2306      	movs	r3, #6
 800b636:	e0e0      	b.n	800b7fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b638:	2300      	movs	r3, #0
 800b63a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b63c:	e002      	b.n	800b644 <dir_register+0x2c>
 800b63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b640:	3301      	adds	r3, #1
 800b642:	627b      	str	r3, [r7, #36]	@ 0x24
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	691a      	ldr	r2, [r3, #16]
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	4413      	add	r3, r2
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1f4      	bne.n	800b63e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b65a:	f107 030c 	add.w	r3, r7, #12
 800b65e:	220c      	movs	r2, #12
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fd9f 	bl	800a1a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d032      	beq.n	800b6d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2240      	movs	r2, #64	@ 0x40
 800b674:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800b678:	2301      	movs	r3, #1
 800b67a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b67c:	e016      	b.n	800b6ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	f107 010c 	add.w	r1, r7, #12
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	f7ff fe53 	bl	800b338 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff feff 	bl	800b496 <dir_find>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b69e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ae:	2b63      	cmp	r3, #99	@ 0x63
 800b6b0:	d9e5      	bls.n	800b67e <dir_register+0x66>
 800b6b2:	e000      	b.n	800b6b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b6b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b8:	2b64      	cmp	r3, #100	@ 0x64
 800b6ba:	d101      	bne.n	800b6c0 <dir_register+0xa8>
 800b6bc:	2307      	movs	r3, #7
 800b6be:	e09c      	b.n	800b7fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6c4:	2b04      	cmp	r3, #4
 800b6c6:	d002      	beq.n	800b6ce <dir_register+0xb6>
 800b6c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6cc:	e095      	b.n	800b7fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b6ce:	7dfa      	ldrb	r2, [r7, #23]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d007      	beq.n	800b6f0 <dir_register+0xd8>
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	330c      	adds	r3, #12
 800b6e4:	4a47      	ldr	r2, [pc, #284]	@ (800b804 <dir_register+0x1ec>)
 800b6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ea:	089b      	lsrs	r3, r3, #2
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	e000      	b.n	800b6f2 <dir_register+0xda>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b6f4:	6a39      	ldr	r1, [r7, #32]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7ff fcc0 	bl	800b07c <dir_alloc>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b706:	2b00      	cmp	r3, #0
 800b708:	d148      	bne.n	800b79c <dir_register+0x184>
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	623b      	str	r3, [r7, #32]
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d042      	beq.n	800b79c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	695a      	ldr	r2, [r3, #20]
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	015b      	lsls	r3, r3, #5
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fb4b 	bl	800adbe <dir_sdi>
 800b728:	4603      	mov	r3, r0
 800b72a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b72e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b732:	2b00      	cmp	r3, #0
 800b734:	d132      	bne.n	800b79c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3324      	adds	r3, #36	@ 0x24
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff fe8a 	bl	800b454 <sum_sfn>
 800b740:	4603      	mov	r3, r0
 800b742:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	4619      	mov	r1, r3
 800b74a:	69f8      	ldr	r0, [r7, #28]
 800b74c:	f7fe ff58 	bl	800a600 <move_window>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b756:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d11d      	bne.n	800b79a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	6918      	ldr	r0, [r3, #16]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a19      	ldr	r1, [r3, #32]
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	7efb      	ldrb	r3, [r7, #27]
 800b76c:	f7ff fd7c 	bl	800b268 <put_lfn>
				fs->wflag = 1;
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	2201      	movs	r2, #1
 800b774:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b776:	2100      	movs	r1, #0
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fba9 	bl	800aed0 <dir_next>
 800b77e:	4603      	mov	r3, r0
 800b780:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d107      	bne.n	800b79c <dir_register+0x184>
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	3b01      	subs	r3, #1
 800b790:	623b      	str	r3, [r7, #32]
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1d5      	bne.n	800b744 <dir_register+0x12c>
 800b798:	e000      	b.n	800b79c <dir_register+0x184>
				if (res != FR_OK) break;
 800b79a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b79c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d128      	bne.n	800b7f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	69f8      	ldr	r0, [r7, #28]
 800b7ac:	f7fe ff28 	bl	800a600 <move_window>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11b      	bne.n	800b7f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fd0d 	bl	800a1e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a18      	ldr	r0, [r3, #32]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3324      	adds	r3, #36	@ 0x24
 800b7d4:	220b      	movs	r2, #11
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	f7fe fce4 	bl	800a1a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	330c      	adds	r3, #12
 800b7e8:	f002 0218 	and.w	r2, r2, #24
 800b7ec:	b2d2      	uxtb	r2, r2
 800b7ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3730      	adds	r7, #48	@ 0x30
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	4ec4ec4f 	.word	0x4ec4ec4f

0800b808 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08a      	sub	sp, #40	@ 0x28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	613b      	str	r3, [r7, #16]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	2300      	movs	r3, #0
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	61ba      	str	r2, [r7, #24]
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	4413      	add	r3, r2
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b838:	2b1f      	cmp	r3, #31
 800b83a:	d940      	bls.n	800b8be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b83c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b83e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b840:	d006      	beq.n	800b850 <create_name+0x48>
 800b842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b844:	2b5c      	cmp	r3, #92	@ 0x5c
 800b846:	d110      	bne.n	800b86a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b848:	e002      	b.n	800b850 <create_name+0x48>
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	3301      	adds	r3, #1
 800b84e:	61bb      	str	r3, [r7, #24]
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	4413      	add	r3, r2
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	2b2f      	cmp	r3, #47	@ 0x2f
 800b85a:	d0f6      	beq.n	800b84a <create_name+0x42>
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	4413      	add	r3, r2
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b5c      	cmp	r3, #92	@ 0x5c
 800b866:	d0f0      	beq.n	800b84a <create_name+0x42>
			break;
 800b868:	e02a      	b.n	800b8c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b86e:	d901      	bls.n	800b874 <create_name+0x6c>
 800b870:	2306      	movs	r3, #6
 800b872:	e17d      	b.n	800bb70 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b876:	b2db      	uxtb	r3, r3
 800b878:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b87a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b87c:	2101      	movs	r1, #1
 800b87e:	4618      	mov	r0, r3
 800b880:	f001 f9b8 	bl	800cbf4 <ff_convert>
 800b884:	4603      	mov	r3, r0
 800b886:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b888:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d101      	bne.n	800b892 <create_name+0x8a>
 800b88e:	2306      	movs	r3, #6
 800b890:	e16e      	b.n	800bb70 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b894:	2b7f      	cmp	r3, #127	@ 0x7f
 800b896:	d809      	bhi.n	800b8ac <create_name+0xa4>
 800b898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b89a:	4619      	mov	r1, r3
 800b89c:	488d      	ldr	r0, [pc, #564]	@ (800bad4 <create_name+0x2cc>)
 800b89e:	f7fe fce4 	bl	800a26a <chk_chr>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <create_name+0xa4>
 800b8a8:	2306      	movs	r3, #6
 800b8aa:	e161      	b.n	800bb70 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	617a      	str	r2, [r7, #20]
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b8ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b8bc:	e7b4      	b.n	800b828 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b8be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	441a      	add	r2, r3
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b8ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8cc:	2b1f      	cmp	r3, #31
 800b8ce:	d801      	bhi.n	800b8d4 <create_name+0xcc>
 800b8d0:	2304      	movs	r3, #4
 800b8d2:	e000      	b.n	800b8d6 <create_name+0xce>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b8da:	e011      	b.n	800b900 <create_name+0xf8>
		w = lfn[di - 1];
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b8ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8f0:	2b20      	cmp	r3, #32
 800b8f2:	d002      	beq.n	800b8fa <create_name+0xf2>
 800b8f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8f8:	d106      	bne.n	800b908 <create_name+0x100>
		di--;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1ea      	bne.n	800b8dc <create_name+0xd4>
 800b906:	e000      	b.n	800b90a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b908:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	4413      	add	r3, r2
 800b912:	2200      	movs	r2, #0
 800b914:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <create_name+0x118>
 800b91c:	2306      	movs	r3, #6
 800b91e:	e127      	b.n	800bb70 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3324      	adds	r3, #36	@ 0x24
 800b924:	220b      	movs	r2, #11
 800b926:	2120      	movs	r1, #32
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fc5c 	bl	800a1e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b92e:	2300      	movs	r3, #0
 800b930:	61bb      	str	r3, [r7, #24]
 800b932:	e002      	b.n	800b93a <create_name+0x132>
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	3301      	adds	r3, #1
 800b938:	61bb      	str	r3, [r7, #24]
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	4413      	add	r3, r2
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	2b20      	cmp	r3, #32
 800b946:	d0f5      	beq.n	800b934 <create_name+0x12c>
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	2b2e      	cmp	r3, #46	@ 0x2e
 800b954:	d0ee      	beq.n	800b934 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d009      	beq.n	800b970 <create_name+0x168>
 800b95c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b960:	f043 0303 	orr.w	r3, r3, #3
 800b964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b968:	e002      	b.n	800b970 <create_name+0x168>
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <create_name+0x182>
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b97c:	3b01      	subs	r3, #1
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	2b2e      	cmp	r3, #46	@ 0x2e
 800b988:	d1ef      	bne.n	800b96a <create_name+0x162>

	i = b = 0; ni = 8;
 800b98a:	2300      	movs	r3, #0
 800b98c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b990:	2300      	movs	r3, #0
 800b992:	623b      	str	r3, [r7, #32]
 800b994:	2308      	movs	r3, #8
 800b996:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	61ba      	str	r2, [r7, #24]
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b9a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 8090 	beq.w	800bad0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b9b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	d006      	beq.n	800b9c4 <create_name+0x1bc>
 800b9b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ba:	d10a      	bne.n	800b9d2 <create_name+0x1ca>
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d006      	beq.n	800b9d2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9c8:	f043 0303 	orr.w	r3, r3, #3
 800b9cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b9d0:	e07d      	b.n	800bace <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b9d2:	6a3a      	ldr	r2, [r7, #32]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d203      	bcs.n	800b9e2 <create_name+0x1da>
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d123      	bne.n	800ba2a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b0b      	cmp	r3, #11
 800b9e6:	d106      	bne.n	800b9f6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9ec:	f043 0303 	orr.w	r3, r3, #3
 800b9f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b9f4:	e075      	b.n	800bae2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d005      	beq.n	800ba0a <create_name+0x202>
 800b9fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba02:	f043 0303 	orr.w	r3, r3, #3
 800ba06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d866      	bhi.n	800bae0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	2308      	movs	r3, #8
 800ba18:	623b      	str	r3, [r7, #32]
 800ba1a:	230b      	movs	r3, #11
 800ba1c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ba1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ba28:	e051      	b.n	800bace <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ba2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba2c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba2e:	d914      	bls.n	800ba5a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ba30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba32:	2100      	movs	r1, #0
 800ba34:	4618      	mov	r0, r3
 800ba36:	f001 f8dd 	bl	800cbf4 <ff_convert>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ba3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <create_name+0x246>
 800ba44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba46:	3b80      	subs	r3, #128	@ 0x80
 800ba48:	4a23      	ldr	r2, [pc, #140]	@ (800bad8 <create_name+0x2d0>)
 800ba4a:	5cd3      	ldrb	r3, [r2, r3]
 800ba4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ba4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba52:	f043 0302 	orr.w	r3, r3, #2
 800ba56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ba5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d007      	beq.n	800ba70 <create_name+0x268>
 800ba60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba62:	4619      	mov	r1, r3
 800ba64:	481d      	ldr	r0, [pc, #116]	@ (800badc <create_name+0x2d4>)
 800ba66:	f7fe fc00 	bl	800a26a <chk_chr>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d008      	beq.n	800ba82 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ba70:	235f      	movs	r3, #95	@ 0x5f
 800ba72:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ba74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba78:	f043 0303 	orr.w	r3, r3, #3
 800ba7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba80:	e01b      	b.n	800baba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ba82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba84:	2b40      	cmp	r3, #64	@ 0x40
 800ba86:	d909      	bls.n	800ba9c <create_name+0x294>
 800ba88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba8a:	2b5a      	cmp	r3, #90	@ 0x5a
 800ba8c:	d806      	bhi.n	800ba9c <create_name+0x294>
					b |= 2;
 800ba8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba92:	f043 0302 	orr.w	r3, r3, #2
 800ba96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ba9a:	e00e      	b.n	800baba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ba9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba9e:	2b60      	cmp	r3, #96	@ 0x60
 800baa0:	d90b      	bls.n	800baba <create_name+0x2b2>
 800baa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800baa4:	2b7a      	cmp	r3, #122	@ 0x7a
 800baa6:	d808      	bhi.n	800baba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800baa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800baac:	f043 0301 	orr.w	r3, r3, #1
 800bab0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bab4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bab6:	3b20      	subs	r3, #32
 800bab8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	623a      	str	r2, [r7, #32]
 800bac0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bac2:	b2d1      	uxtb	r1, r2
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	4413      	add	r3, r2
 800bac8:	460a      	mov	r2, r1
 800baca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bace:	e763      	b.n	800b998 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bad0:	bf00      	nop
 800bad2:	e006      	b.n	800bae2 <create_name+0x2da>
 800bad4:	0800d78c 	.word	0x0800d78c
 800bad8:	0800d7ec 	.word	0x0800d7ec
 800badc:	0800d798 	.word	0x0800d798
			if (si > di) break;			/* No extension */
 800bae0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bae8:	2be5      	cmp	r3, #229	@ 0xe5
 800baea:	d103      	bne.n	800baf4 <create_name+0x2ec>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2205      	movs	r2, #5
 800baf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	2b08      	cmp	r3, #8
 800baf8:	d104      	bne.n	800bb04 <create_name+0x2fc>
 800bafa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bb04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb08:	f003 030c 	and.w	r3, r3, #12
 800bb0c:	2b0c      	cmp	r3, #12
 800bb0e:	d005      	beq.n	800bb1c <create_name+0x314>
 800bb10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb14:	f003 0303 	and.w	r3, r3, #3
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d105      	bne.n	800bb28 <create_name+0x320>
 800bb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb20:	f043 0302 	orr.w	r3, r3, #2
 800bb24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bb28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d117      	bne.n	800bb64 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bb34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb38:	f003 0303 	and.w	r3, r3, #3
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d105      	bne.n	800bb4c <create_name+0x344>
 800bb40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb44:	f043 0310 	orr.w	r3, r3, #16
 800bb48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bb4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb50:	f003 030c 	and.w	r3, r3, #12
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d105      	bne.n	800bb64 <create_name+0x35c>
 800bb58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5c:	f043 0308 	orr.w	r3, r3, #8
 800bb60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bb6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800bb6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3728      	adds	r7, #40	@ 0x28
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb8c:	e002      	b.n	800bb94 <follow_path+0x1c>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	3301      	adds	r3, #1
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb9a:	d0f8      	beq.n	800bb8e <follow_path+0x16>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bba2:	d0f4      	beq.n	800bb8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2200      	movs	r2, #0
 800bba8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b1f      	cmp	r3, #31
 800bbb0:	d80a      	bhi.n	800bbc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2280      	movs	r2, #128	@ 0x80
 800bbb6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff f8fe 	bl	800adbe <dir_sdi>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75fb      	strb	r3, [r7, #23]
 800bbc6:	e048      	b.n	800bc5a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbc8:	463b      	mov	r3, r7
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff fe1b 	bl	800b808 <create_name>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d139      	bne.n	800bc50 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff fc5a 	bl	800b496 <dir_find>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bbec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00a      	beq.n	800bc0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b04      	cmp	r3, #4
 800bbf8:	d12c      	bne.n	800bc54 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bbfa:	7afb      	ldrb	r3, [r7, #11]
 800bbfc:	f003 0304 	and.w	r3, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d127      	bne.n	800bc54 <follow_path+0xdc>
 800bc04:	2305      	movs	r3, #5
 800bc06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc08:	e024      	b.n	800bc54 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc0a:	7afb      	ldrb	r3, [r7, #11]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d121      	bne.n	800bc58 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	799b      	ldrb	r3, [r3, #6]
 800bc18:	f003 0310 	and.w	r3, r3, #16
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bc20:	2305      	movs	r3, #5
 800bc22:	75fb      	strb	r3, [r7, #23]
 800bc24:	e019      	b.n	800bc5a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	8992      	ldrh	r2, [r2, #12]
 800bc34:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc38:	fb00 f202 	mul.w	r2, r0, r2
 800bc3c:	1a9b      	subs	r3, r3, r2
 800bc3e:	440b      	add	r3, r1
 800bc40:	4619      	mov	r1, r3
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7ff fa61 	bl	800b10a <ld_clust>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc4e:	e7bb      	b.n	800bbc8 <follow_path+0x50>
			if (res != FR_OK) break;
 800bc50:	bf00      	nop
 800bc52:	e002      	b.n	800bc5a <follow_path+0xe2>
				break;
 800bc54:	bf00      	nop
 800bc56:	e000      	b.n	800bc5a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc58:	bf00      	nop
			}
		}
	}

	return res;
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d031      	beq.n	800bcde <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e002      	b.n	800bc88 <get_ldnumber+0x24>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	3301      	adds	r3, #1
 800bc86:	617b      	str	r3, [r7, #20]
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b1f      	cmp	r3, #31
 800bc8e:	d903      	bls.n	800bc98 <get_ldnumber+0x34>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b3a      	cmp	r3, #58	@ 0x3a
 800bc96:	d1f4      	bne.n	800bc82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	2b3a      	cmp	r3, #58	@ 0x3a
 800bc9e:	d11c      	bne.n	800bcda <get_ldnumber+0x76>
			tp = *path;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	60fa      	str	r2, [r7, #12]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	3b30      	subs	r3, #48	@ 0x30
 800bcb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b09      	cmp	r3, #9
 800bcb6:	d80e      	bhi.n	800bcd6 <get_ldnumber+0x72>
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d10a      	bne.n	800bcd6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d107      	bne.n	800bcd6 <get_ldnumber+0x72>
					vol = (int)i;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	3301      	adds	r3, #1
 800bcce:	617b      	str	r3, [r7, #20]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	e002      	b.n	800bce0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bcda:	2300      	movs	r3, #0
 800bcdc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bcde:	693b      	ldr	r3, [r7, #16]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	371c      	adds	r7, #28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	70da      	strb	r2, [r3, #3]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f04f 32ff 	mov.w	r2, #4294967295
 800bd02:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7fe fc7a 	bl	800a600 <move_window>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <check_fs+0x2a>
 800bd12:	2304      	movs	r3, #4
 800bd14:	e038      	b.n	800bd88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3338      	adds	r3, #56	@ 0x38
 800bd1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe f9be 	bl	800a0a0 <ld_word>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d001      	beq.n	800bd34 <check_fs+0x48>
 800bd30:	2303      	movs	r3, #3
 800bd32:	e029      	b.n	800bd88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bd3a:	2be9      	cmp	r3, #233	@ 0xe9
 800bd3c:	d009      	beq.n	800bd52 <check_fs+0x66>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bd44:	2beb      	cmp	r3, #235	@ 0xeb
 800bd46:	d11e      	bne.n	800bd86 <check_fs+0x9a>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bd4e:	2b90      	cmp	r3, #144	@ 0x90
 800bd50:	d119      	bne.n	800bd86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3338      	adds	r3, #56	@ 0x38
 800bd56:	3336      	adds	r3, #54	@ 0x36
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe f9b9 	bl	800a0d0 <ld_dword>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bd64:	4a0a      	ldr	r2, [pc, #40]	@ (800bd90 <check_fs+0xa4>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d101      	bne.n	800bd6e <check_fs+0x82>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e00c      	b.n	800bd88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3338      	adds	r3, #56	@ 0x38
 800bd72:	3352      	adds	r3, #82	@ 0x52
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe f9ab 	bl	800a0d0 <ld_dword>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	4a05      	ldr	r2, [pc, #20]	@ (800bd94 <check_fs+0xa8>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d101      	bne.n	800bd86 <check_fs+0x9a>
 800bd82:	2300      	movs	r3, #0
 800bd84:	e000      	b.n	800bd88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bd86:	2302      	movs	r3, #2
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	00544146 	.word	0x00544146
 800bd94:	33544146 	.word	0x33544146

0800bd98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b096      	sub	sp, #88	@ 0x58
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	4613      	mov	r3, r2
 800bda4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff ff59 	bl	800bc64 <get_ldnumber>
 800bdb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	da01      	bge.n	800bdbe <find_volume+0x26>
 800bdba:	230b      	movs	r3, #11
 800bdbc:	e265      	b.n	800c28a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdbe:	4a9f      	ldr	r2, [pc, #636]	@ (800c03c <find_volume+0x2a4>)
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <find_volume+0x3a>
 800bdce:	230c      	movs	r3, #12
 800bdd0:	e25b      	b.n	800c28a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	f023 0301 	bic.w	r3, r3, #1
 800bdde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d01a      	beq.n	800be1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe f8b7 	bl	8009f60 <disk_status>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bdf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10c      	bne.n	800be1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be04:	79fb      	ldrb	r3, [r7, #7]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d007      	beq.n	800be1a <find_volume+0x82>
 800be0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800be16:	230a      	movs	r3, #10
 800be18:	e237      	b.n	800c28a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800be1a:	2300      	movs	r3, #0
 800be1c:	e235      	b.n	800c28a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	2200      	movs	r2, #0
 800be22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be26:	b2da      	uxtb	r2, r3
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2e:	785b      	ldrb	r3, [r3, #1]
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe f8af 	bl	8009f94 <disk_initialize>
 800be36:	4603      	mov	r3, r0
 800be38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be48:	2303      	movs	r3, #3
 800be4a:	e21e      	b.n	800c28a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d007      	beq.n	800be62 <find_volume+0xca>
 800be52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be56:	f003 0304 	and.w	r3, r3, #4
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be5e:	230a      	movs	r3, #10
 800be60:	e213      	b.n	800c28a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800be62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be64:	7858      	ldrb	r0, [r3, #1]
 800be66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be68:	330c      	adds	r3, #12
 800be6a:	461a      	mov	r2, r3
 800be6c:	2102      	movs	r1, #2
 800be6e:	f7fe f8f9 	bl	800a064 <disk_ioctl>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <find_volume+0xe4>
 800be78:	2301      	movs	r3, #1
 800be7a:	e206      	b.n	800c28a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800be7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be7e:	899b      	ldrh	r3, [r3, #12]
 800be80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be84:	d80d      	bhi.n	800bea2 <find_volume+0x10a>
 800be86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be88:	899b      	ldrh	r3, [r3, #12]
 800be8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be8e:	d308      	bcc.n	800bea2 <find_volume+0x10a>
 800be90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be92:	899b      	ldrh	r3, [r3, #12]
 800be94:	461a      	mov	r2, r3
 800be96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be98:	899b      	ldrh	r3, [r3, #12]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	4013      	ands	r3, r2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <find_volume+0x10e>
 800bea2:	2301      	movs	r3, #1
 800bea4:	e1f1      	b.n	800c28a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800beaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800beac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800beae:	f7ff ff1d 	bl	800bcec <check_fs>
 800beb2:	4603      	mov	r3, r0
 800beb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800beb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d149      	bne.n	800bf54 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bec0:	2300      	movs	r3, #0
 800bec2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bec4:	e01e      	b.n	800bf04 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800becc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bed4:	4413      	add	r3, r2
 800bed6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	3304      	adds	r3, #4
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d006      	beq.n	800bef0 <find_volume+0x158>
 800bee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee4:	3308      	adds	r3, #8
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe f8f2 	bl	800a0d0 <ld_dword>
 800beec:	4602      	mov	r2, r0
 800beee:	e000      	b.n	800bef2 <find_volume+0x15a>
 800bef0:	2200      	movs	r2, #0
 800bef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	3358      	adds	r3, #88	@ 0x58
 800bef8:	443b      	add	r3, r7
 800befa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800befe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf00:	3301      	adds	r3, #1
 800bf02:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d9dd      	bls.n	800bec6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bf0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <find_volume+0x182>
 800bf14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf16:	3b01      	subs	r3, #1
 800bf18:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bf1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	3358      	adds	r3, #88	@ 0x58
 800bf20:	443b      	add	r3, r7
 800bf22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bf26:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <find_volume+0x1a2>
 800bf2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf32:	f7ff fedb 	bl	800bcec <check_fs>
 800bf36:	4603      	mov	r3, r0
 800bf38:	e000      	b.n	800bf3c <find_volume+0x1a4>
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d905      	bls.n	800bf54 <find_volume+0x1bc>
 800bf48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf50:	2b03      	cmp	r3, #3
 800bf52:	d9e2      	bls.n	800bf1a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d101      	bne.n	800bf60 <find_volume+0x1c8>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e194      	b.n	800c28a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d901      	bls.n	800bf6c <find_volume+0x1d4>
 800bf68:	230d      	movs	r3, #13
 800bf6a:	e18e      	b.n	800c28a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	3338      	adds	r3, #56	@ 0x38
 800bf70:	330b      	adds	r3, #11
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe f894 	bl	800a0a0 <ld_word>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7e:	899b      	ldrh	r3, [r3, #12]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d001      	beq.n	800bf88 <find_volume+0x1f0>
 800bf84:	230d      	movs	r3, #13
 800bf86:	e180      	b.n	800c28a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8a:	3338      	adds	r3, #56	@ 0x38
 800bf8c:	3316      	adds	r3, #22
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe f886 	bl	800a0a0 <ld_word>
 800bf94:	4603      	mov	r3, r0
 800bf96:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <find_volume+0x214>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa0:	3338      	adds	r3, #56	@ 0x38
 800bfa2:	3324      	adds	r3, #36	@ 0x24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe f893 	bl	800a0d0 <ld_dword>
 800bfaa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfb0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	789b      	ldrb	r3, [r3, #2]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d005      	beq.n	800bfd0 <find_volume+0x238>
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc6:	789b      	ldrb	r3, [r3, #2]
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d001      	beq.n	800bfd0 <find_volume+0x238>
 800bfcc:	230d      	movs	r3, #13
 800bfce:	e15c      	b.n	800c28a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd2:	789b      	ldrb	r3, [r3, #2]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfd8:	fb02 f303 	mul.w	r3, r2, r3
 800bfdc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfec:	895b      	ldrh	r3, [r3, #10]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d008      	beq.n	800c004 <find_volume+0x26c>
 800bff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff4:	895b      	ldrh	r3, [r3, #10]
 800bff6:	461a      	mov	r2, r3
 800bff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffa:	895b      	ldrh	r3, [r3, #10]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	4013      	ands	r3, r2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <find_volume+0x270>
 800c004:	230d      	movs	r3, #13
 800c006:	e140      	b.n	800c28a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00a:	3338      	adds	r3, #56	@ 0x38
 800c00c:	3311      	adds	r3, #17
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe f846 	bl	800a0a0 <ld_word>
 800c014:	4603      	mov	r3, r0
 800c016:	461a      	mov	r2, r3
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01e:	891b      	ldrh	r3, [r3, #8]
 800c020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c022:	8992      	ldrh	r2, [r2, #12]
 800c024:	0952      	lsrs	r2, r2, #5
 800c026:	b292      	uxth	r2, r2
 800c028:	fbb3 f1f2 	udiv	r1, r3, r2
 800c02c:	fb01 f202 	mul.w	r2, r1, r2
 800c030:	1a9b      	subs	r3, r3, r2
 800c032:	b29b      	uxth	r3, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <find_volume+0x2a8>
 800c038:	230d      	movs	r3, #13
 800c03a:	e126      	b.n	800c28a <find_volume+0x4f2>
 800c03c:	2001cb48 	.word	0x2001cb48

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c042:	3338      	adds	r3, #56	@ 0x38
 800c044:	3313      	adds	r3, #19
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe f82a 	bl	800a0a0 <ld_word>
 800c04c:	4603      	mov	r3, r0
 800c04e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <find_volume+0x2cc>
 800c056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c058:	3338      	adds	r3, #56	@ 0x38
 800c05a:	3320      	adds	r3, #32
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe f837 	bl	800a0d0 <ld_dword>
 800c062:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c066:	3338      	adds	r3, #56	@ 0x38
 800c068:	330e      	adds	r3, #14
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe f818 	bl	800a0a0 <ld_word>
 800c070:	4603      	mov	r3, r0
 800c072:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c074:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <find_volume+0x2e6>
 800c07a:	230d      	movs	r3, #13
 800c07c:	e105      	b.n	800c28a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c07e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c082:	4413      	add	r3, r2
 800c084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c086:	8911      	ldrh	r1, [r2, #8]
 800c088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c08a:	8992      	ldrh	r2, [r2, #12]
 800c08c:	0952      	lsrs	r2, r2, #5
 800c08e:	b292      	uxth	r2, r2
 800c090:	fbb1 f2f2 	udiv	r2, r1, r2
 800c094:	b292      	uxth	r2, r2
 800c096:	4413      	add	r3, r2
 800c098:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c09a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d201      	bcs.n	800c0a6 <find_volume+0x30e>
 800c0a2:	230d      	movs	r3, #13
 800c0a4:	e0f1      	b.n	800c28a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c0a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ae:	8952      	ldrh	r2, [r2, #10]
 800c0b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0b4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <find_volume+0x328>
 800c0bc:	230d      	movs	r3, #13
 800c0be:	e0e4      	b.n	800c28a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d802      	bhi.n	800c0d6 <find_volume+0x33e>
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d802      	bhi.n	800c0e6 <find_volume+0x34e>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	1c9a      	adds	r2, r3, #2
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c0f2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c0f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f8:	441a      	add	r2, r3
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c0fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c102:	441a      	add	r2, r3
 800c104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c106:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c108:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d11e      	bne.n	800c14e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c112:	3338      	adds	r3, #56	@ 0x38
 800c114:	332a      	adds	r3, #42	@ 0x2a
 800c116:	4618      	mov	r0, r3
 800c118:	f7fd ffc2 	bl	800a0a0 <ld_word>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <find_volume+0x38e>
 800c122:	230d      	movs	r3, #13
 800c124:	e0b1      	b.n	800c28a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c128:	891b      	ldrh	r3, [r3, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <find_volume+0x39a>
 800c12e:	230d      	movs	r3, #13
 800c130:	e0ab      	b.n	800c28a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	3338      	adds	r3, #56	@ 0x38
 800c136:	332c      	adds	r3, #44	@ 0x2c
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fd ffc9 	bl	800a0d0 <ld_dword>
 800c13e:	4602      	mov	r2, r0
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c14c:	e01f      	b.n	800c18e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c150:	891b      	ldrh	r3, [r3, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <find_volume+0x3c2>
 800c156:	230d      	movs	r3, #13
 800c158:	e097      	b.n	800c28a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c160:	441a      	add	r2, r3
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c166:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d103      	bne.n	800c176 <find_volume+0x3de>
 800c16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c170:	69db      	ldr	r3, [r3, #28]
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	e00a      	b.n	800c18c <find_volume+0x3f4>
 800c176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c178:	69da      	ldr	r2, [r3, #28]
 800c17a:	4613      	mov	r3, r2
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	4413      	add	r3, r2
 800c180:	085a      	lsrs	r2, r3, #1
 800c182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c184:	69db      	ldr	r3, [r3, #28]
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c18c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c190:	6a1a      	ldr	r2, [r3, #32]
 800c192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c194:	899b      	ldrh	r3, [r3, #12]
 800c196:	4619      	mov	r1, r3
 800c198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c19a:	440b      	add	r3, r1
 800c19c:	3b01      	subs	r3, #1
 800c19e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1a0:	8989      	ldrh	r1, [r1, #12]
 800c1a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d201      	bcs.n	800c1ae <find_volume+0x416>
 800c1aa:	230d      	movs	r3, #13
 800c1ac:	e06d      	b.n	800c28a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b4:	619a      	str	r2, [r3, #24]
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b8:	699a      	ldr	r2, [r3, #24]
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c0:	2280      	movs	r2, #128	@ 0x80
 800c1c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c1c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	d149      	bne.n	800c260 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	3338      	adds	r3, #56	@ 0x38
 800c1d0:	3330      	adds	r3, #48	@ 0x30
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd ff64 	bl	800a0a0 <ld_word>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d140      	bne.n	800c260 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1e6:	f7fe fa0b 	bl	800a600 <move_window>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d137      	bne.n	800c260 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f8:	3338      	adds	r3, #56	@ 0x38
 800c1fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fd ff4e 	bl	800a0a0 <ld_word>
 800c204:	4603      	mov	r3, r0
 800c206:	461a      	mov	r2, r3
 800c208:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d127      	bne.n	800c260 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c212:	3338      	adds	r3, #56	@ 0x38
 800c214:	4618      	mov	r0, r3
 800c216:	f7fd ff5b 	bl	800a0d0 <ld_dword>
 800c21a:	4603      	mov	r3, r0
 800c21c:	4a1d      	ldr	r2, [pc, #116]	@ (800c294 <find_volume+0x4fc>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d11e      	bne.n	800c260 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c224:	3338      	adds	r3, #56	@ 0x38
 800c226:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fd ff50 	bl	800a0d0 <ld_dword>
 800c230:	4603      	mov	r3, r0
 800c232:	4a19      	ldr	r2, [pc, #100]	@ (800c298 <find_volume+0x500>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d113      	bne.n	800c260 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23a:	3338      	adds	r3, #56	@ 0x38
 800c23c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c240:	4618      	mov	r0, r3
 800c242:	f7fd ff45 	bl	800a0d0 <ld_dword>
 800c246:	4602      	mov	r2, r0
 800c248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24e:	3338      	adds	r3, #56	@ 0x38
 800c250:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c254:	4618      	mov	r0, r3
 800c256:	f7fd ff3b 	bl	800a0d0 <ld_dword>
 800c25a:	4602      	mov	r2, r0
 800c25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c262:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c266:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c268:	4b0c      	ldr	r3, [pc, #48]	@ (800c29c <find_volume+0x504>)
 800c26a:	881b      	ldrh	r3, [r3, #0]
 800c26c:	3301      	adds	r3, #1
 800c26e:	b29a      	uxth	r2, r3
 800c270:	4b0a      	ldr	r3, [pc, #40]	@ (800c29c <find_volume+0x504>)
 800c272:	801a      	strh	r2, [r3, #0]
 800c274:	4b09      	ldr	r3, [pc, #36]	@ (800c29c <find_volume+0x504>)
 800c276:	881a      	ldrh	r2, [r3, #0]
 800c278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27e:	4a08      	ldr	r2, [pc, #32]	@ (800c2a0 <find_volume+0x508>)
 800c280:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c282:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c284:	f7fe f954 	bl	800a530 <clear_lock>
#endif
	return FR_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3758      	adds	r7, #88	@ 0x58
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	41615252 	.word	0x41615252
 800c298:	61417272 	.word	0x61417272
 800c29c:	2001cb4c 	.word	0x2001cb4c
 800c2a0:	2001cb70 	.word	0x2001cb70

0800c2a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c2ae:	2309      	movs	r3, #9
 800c2b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01c      	beq.n	800c2f2 <validate+0x4e>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d018      	beq.n	800c2f2 <validate+0x4e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d013      	beq.n	800c2f2 <validate+0x4e>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	889a      	ldrh	r2, [r3, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	88db      	ldrh	r3, [r3, #6]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d10c      	bne.n	800c2f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	785b      	ldrb	r3, [r3, #1]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fd fe3e 	bl	8009f60 <disk_status>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <validate+0x4e>
			res = FR_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <validate+0x5a>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	e000      	b.n	800c300 <validate+0x5c>
 800c2fe:	2300      	movs	r3, #0
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	6013      	str	r3, [r2, #0]
	return res;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fc9c 	bl	800bc64 <get_ldnumber>
 800c32c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	2b00      	cmp	r3, #0
 800c332:	da01      	bge.n	800c338 <f_mount+0x28>
 800c334:	230b      	movs	r3, #11
 800c336:	e02b      	b.n	800c390 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c338:	4a17      	ldr	r2, [pc, #92]	@ (800c398 <f_mount+0x88>)
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c340:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d005      	beq.n	800c354 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c348:	69b8      	ldr	r0, [r7, #24]
 800c34a:	f7fe f8f1 	bl	800a530 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	2200      	movs	r2, #0
 800c352:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	490d      	ldr	r1, [pc, #52]	@ (800c398 <f_mount+0x88>)
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <f_mount+0x66>
 800c370:	79fb      	ldrb	r3, [r7, #7]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d001      	beq.n	800c37a <f_mount+0x6a>
 800c376:	2300      	movs	r3, #0
 800c378:	e00a      	b.n	800c390 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c37a:	f107 010c 	add.w	r1, r7, #12
 800c37e:	f107 0308 	add.w	r3, r7, #8
 800c382:	2200      	movs	r2, #0
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff fd07 	bl	800bd98 <find_volume>
 800c38a:	4603      	mov	r3, r0
 800c38c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3720      	adds	r7, #32
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	2001cb48 	.word	0x2001cb48

0800c39c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b09a      	sub	sp, #104	@ 0x68
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <f_open+0x18>
 800c3b0:	2309      	movs	r3, #9
 800c3b2:	e1b7      	b.n	800c724 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c3bc:	79fa      	ldrb	r2, [r7, #7]
 800c3be:	f107 0114 	add.w	r1, r7, #20
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fce6 	bl	800bd98 <find_volume>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c3d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f040 819b 	bne.w	800c712 <f_open+0x376>
		dj.obj.fs = fs;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	f107 0318 	add.w	r3, r7, #24
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff fbc5 	bl	800bb78 <follow_path>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c3f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d118      	bne.n	800c42e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c3fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c400:	b25b      	sxtb	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	da03      	bge.n	800c40e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c406:	2306      	movs	r3, #6
 800c408:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c40c:	e00f      	b.n	800c42e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	2b01      	cmp	r3, #1
 800c412:	bf8c      	ite	hi
 800c414:	2301      	movhi	r3, #1
 800c416:	2300      	movls	r3, #0
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	461a      	mov	r2, r3
 800c41c:	f107 0318 	add.w	r3, r7, #24
 800c420:	4611      	mov	r1, r2
 800c422:	4618      	mov	r0, r3
 800c424:	f7fd ff3c 	bl	800a2a0 <chk_lock>
 800c428:	4603      	mov	r3, r0
 800c42a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c42e:	79fb      	ldrb	r3, [r7, #7]
 800c430:	f003 031c 	and.w	r3, r3, #28
 800c434:	2b00      	cmp	r3, #0
 800c436:	d07f      	beq.n	800c538 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c438:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d017      	beq.n	800c470 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c440:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c444:	2b04      	cmp	r3, #4
 800c446:	d10e      	bne.n	800c466 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c448:	f7fd ff86 	bl	800a358 <enq_lock>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d006      	beq.n	800c460 <f_open+0xc4>
 800c452:	f107 0318 	add.w	r3, r7, #24
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff f8de 	bl	800b618 <dir_register>
 800c45c:	4603      	mov	r3, r0
 800c45e:	e000      	b.n	800c462 <f_open+0xc6>
 800c460:	2312      	movs	r3, #18
 800c462:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	f043 0308 	orr.w	r3, r3, #8
 800c46c:	71fb      	strb	r3, [r7, #7]
 800c46e:	e010      	b.n	800c492 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c470:	7fbb      	ldrb	r3, [r7, #30]
 800c472:	f003 0311 	and.w	r3, r3, #17
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <f_open+0xe6>
					res = FR_DENIED;
 800c47a:	2307      	movs	r3, #7
 800c47c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c480:	e007      	b.n	800c492 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c482:	79fb      	ldrb	r3, [r7, #7]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <f_open+0xf6>
 800c48c:	2308      	movs	r3, #8
 800c48e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c492:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c496:	2b00      	cmp	r3, #0
 800c498:	d168      	bne.n	800c56c <f_open+0x1d0>
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	f003 0308 	and.w	r3, r3, #8
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d063      	beq.n	800c56c <f_open+0x1d0>
				dw = GET_FATTIME();
 800c4a4:	f7fd fcfe 	bl	8009ea4 <get_fattime>
 800c4a8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ac:	330e      	adds	r3, #14
 800c4ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fd fe4b 	bl	800a14c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b8:	3316      	adds	r3, #22
 800c4ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fd fe45 	bl	800a14c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c4:	330b      	adds	r3, #11
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4ce:	4611      	mov	r1, r2
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe fe1a 	bl	800b10a <ld_clust>
 800c4d6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c4dc:	2200      	movs	r2, #0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe fe32 	bl	800b148 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	331c      	adds	r3, #28
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd fe2e 	bl	800a14c <st_dword>
					fs->wflag = 1;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d037      	beq.n	800c56c <f_open+0x1d0>
						dw = fs->winsect;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c500:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c502:	f107 0318 	add.w	r3, r7, #24
 800c506:	2200      	movs	r2, #0
 800c508:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe fb22 	bl	800ab54 <remove_chain>
 800c510:	4603      	mov	r3, r0
 800c512:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c516:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d126      	bne.n	800c56c <f_open+0x1d0>
							res = move_window(fs, dw);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe f86c 	bl	800a600 <move_window>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c532:	3a01      	subs	r2, #1
 800c534:	615a      	str	r2, [r3, #20]
 800c536:	e019      	b.n	800c56c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c538:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d115      	bne.n	800c56c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c540:	7fbb      	ldrb	r3, [r7, #30]
 800c542:	f003 0310 	and.w	r3, r3, #16
 800c546:	2b00      	cmp	r3, #0
 800c548:	d003      	beq.n	800c552 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c54a:	2304      	movs	r3, #4
 800c54c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c550:	e00c      	b.n	800c56c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	f003 0302 	and.w	r3, r3, #2
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d007      	beq.n	800c56c <f_open+0x1d0>
 800c55c:	7fbb      	ldrb	r3, [r7, #30]
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <f_open+0x1d0>
						res = FR_DENIED;
 800c566:	2307      	movs	r3, #7
 800c568:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c56c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c570:	2b00      	cmp	r3, #0
 800c572:	d126      	bne.n	800c5c2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	f003 0308 	and.w	r3, r3, #8
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c57e:	79fb      	ldrb	r3, [r7, #7]
 800c580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c584:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c58e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	2b01      	cmp	r3, #1
 800c598:	bf8c      	ite	hi
 800c59a:	2301      	movhi	r3, #1
 800c59c:	2300      	movls	r3, #0
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	f107 0318 	add.w	r3, r7, #24
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fd fef7 	bl	800a39c <inc_lock>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d102      	bne.n	800c5c2 <f_open+0x226>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c5c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f040 80a3 	bne.w	800c712 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fd99 	bl	800b10a <ld_clust>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e0:	331c      	adds	r3, #28
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fd fd74 	bl	800a0d0 <ld_dword>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	88da      	ldrh	r2, [r3, #6]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	79fa      	ldrb	r2, [r7, #7]
 800c606:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3330      	adds	r3, #48	@ 0x30
 800c61e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c622:	2100      	movs	r1, #0
 800c624:	4618      	mov	r0, r3
 800c626:	f7fd fdde 	bl	800a1e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	f003 0320 	and.w	r3, r3, #32
 800c630:	2b00      	cmp	r3, #0
 800c632:	d06e      	beq.n	800c712 <f_open+0x376>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d06a      	beq.n	800c712 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	68da      	ldr	r2, [r3, #12]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	895b      	ldrh	r3, [r3, #10]
 800c648:	461a      	mov	r2, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	899b      	ldrh	r3, [r3, #12]
 800c64e:	fb02 f303 	mul.w	r3, r2, r3
 800c652:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c660:	e016      	b.n	800c690 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe f887 	bl	800a77a <get_fat>
 800c66c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c66e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c670:	2b01      	cmp	r3, #1
 800c672:	d802      	bhi.n	800c67a <f_open+0x2de>
 800c674:	2302      	movs	r3, #2
 800c676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c67a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c680:	d102      	bne.n	800c688 <f_open+0x2ec>
 800c682:	2301      	movs	r3, #1
 800c684:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c688:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c68a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c690:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c694:	2b00      	cmp	r3, #0
 800c696:	d103      	bne.n	800c6a0 <f_open+0x304>
 800c698:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d8e0      	bhi.n	800c662 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c6a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d131      	bne.n	800c712 <f_open+0x376>
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	899b      	ldrh	r3, [r3, #12]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6ba:	fb01 f202 	mul.w	r2, r1, r2
 800c6be:	1a9b      	subs	r3, r3, r2
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d026      	beq.n	800c712 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fe f837 	bl	800a73c <clust2sect>
 800c6ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c6d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d103      	bne.n	800c6de <f_open+0x342>
						res = FR_INT_ERR;
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c6dc:	e019      	b.n	800c712 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	899b      	ldrh	r3, [r3, #12]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ec:	441a      	add	r2, r3
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	7858      	ldrb	r0, [r3, #1]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6a1a      	ldr	r2, [r3, #32]
 800c700:	2301      	movs	r3, #1
 800c702:	f7fd fc6f 	bl	8009fe4 <disk_read>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <f_open+0x376>
 800c70c:	2301      	movs	r3, #1
 800c70e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c712:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <f_open+0x384>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c720:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c724:	4618      	mov	r0, r3
 800c726:	3768      	adds	r7, #104	@ 0x68
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08e      	sub	sp, #56	@ 0x38
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f107 0214 	add.w	r2, r7, #20
 800c74a:	4611      	mov	r1, r2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff fda9 	bl	800c2a4 <validate>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d107      	bne.n	800c770 <f_read+0x44>
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	7d5b      	ldrb	r3, [r3, #21]
 800c764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <f_read+0x4a>
 800c770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c774:	e135      	b.n	800c9e2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	f003 0301 	and.w	r3, r3, #1
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d101      	bne.n	800c786 <f_read+0x5a>
 800c782:	2307      	movs	r3, #7
 800c784:	e12d      	b.n	800c9e2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	699b      	ldr	r3, [r3, #24]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	429a      	cmp	r2, r3
 800c798:	f240 811e 	bls.w	800c9d8 <f_read+0x2ac>
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c7a0:	e11a      	b.n	800c9d8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	8992      	ldrh	r2, [r2, #12]
 800c7aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7ae:	fb01 f202 	mul.w	r2, r1, r2
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f040 80d5 	bne.w	800c964 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	8992      	ldrh	r2, [r2, #12]
 800c7c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	8952      	ldrh	r2, [r2, #10]
 800c7ca:	3a01      	subs	r2, #1
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d12f      	bne.n	800c836 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d103      	bne.n	800c7e6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7e4:	e013      	b.n	800c80e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d007      	beq.n	800c7fe <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f7fe faaa 	bl	800ad4e <clmt_clust>
 800c7fa:	6338      	str	r0, [r7, #48]	@ 0x30
 800c7fc:	e007      	b.n	800c80e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f7fd ffb7 	bl	800a77a <get_fat>
 800c80c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	2b01      	cmp	r3, #1
 800c812:	d804      	bhi.n	800c81e <f_read+0xf2>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2202      	movs	r2, #2
 800c818:	755a      	strb	r2, [r3, #21]
 800c81a:	2302      	movs	r3, #2
 800c81c:	e0e1      	b.n	800c9e2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c824:	d104      	bne.n	800c830 <f_read+0x104>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2201      	movs	r2, #1
 800c82a:	755a      	strb	r2, [r3, #21]
 800c82c:	2301      	movs	r3, #1
 800c82e:	e0d8      	b.n	800c9e2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c834:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fd ff7c 	bl	800a73c <clust2sect>
 800c844:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d104      	bne.n	800c856 <f_read+0x12a>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2202      	movs	r2, #2
 800c850:	755a      	strb	r2, [r3, #21]
 800c852:	2302      	movs	r3, #2
 800c854:	e0c5      	b.n	800c9e2 <f_read+0x2b6>
			sect += csect;
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	4413      	add	r3, r2
 800c85c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	899b      	ldrh	r3, [r3, #12]
 800c862:	461a      	mov	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	fbb3 f3f2 	udiv	r3, r3, r2
 800c86a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d041      	beq.n	800c8f6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c872:	69fa      	ldr	r2, [r7, #28]
 800c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c876:	4413      	add	r3, r2
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	8952      	ldrh	r2, [r2, #10]
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d905      	bls.n	800c88c <f_read+0x160>
					cc = fs->csize - csect;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	895b      	ldrh	r3, [r3, #10]
 800c884:	461a      	mov	r2, r3
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	7858      	ldrb	r0, [r3, #1]
 800c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c892:	69ba      	ldr	r2, [r7, #24]
 800c894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c896:	f7fd fba5 	bl	8009fe4 <disk_read>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d004      	beq.n	800c8aa <f_read+0x17e>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	755a      	strb	r2, [r3, #21]
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e09b      	b.n	800c9e2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	7d1b      	ldrb	r3, [r3, #20]
 800c8ae:	b25b      	sxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	da18      	bge.n	800c8e6 <f_read+0x1ba>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6a1a      	ldr	r2, [r3, #32]
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d911      	bls.n	800c8e6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a1a      	ldr	r2, [r3, #32]
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	8992      	ldrh	r2, [r2, #12]
 800c8ce:	fb02 f303 	mul.w	r3, r2, r3
 800c8d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d4:	18d0      	adds	r0, r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	899b      	ldrh	r3, [r3, #12]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f7fd fc5f 	bl	800a1a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	899b      	ldrh	r3, [r3, #12]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ee:	fb02 f303 	mul.w	r3, r2, r3
 800c8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c8f4:	e05c      	b.n	800c9b0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d02e      	beq.n	800c95e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	7d1b      	ldrb	r3, [r3, #20]
 800c904:	b25b      	sxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	da18      	bge.n	800c93c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	7858      	ldrb	r0, [r3, #1]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6a1a      	ldr	r2, [r3, #32]
 800c918:	2301      	movs	r3, #1
 800c91a:	f7fd fb83 	bl	800a024 <disk_write>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d004      	beq.n	800c92e <f_read+0x202>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	755a      	strb	r2, [r3, #21]
 800c92a:	2301      	movs	r3, #1
 800c92c:	e059      	b.n	800c9e2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	7d1b      	ldrb	r3, [r3, #20]
 800c932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c936:	b2da      	uxtb	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	7858      	ldrb	r0, [r3, #1]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c946:	2301      	movs	r3, #1
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	f7fd fb4b 	bl	8009fe4 <disk_read>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d004      	beq.n	800c95e <f_read+0x232>
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2201      	movs	r2, #1
 800c958:	755a      	strb	r2, [r3, #21]
 800c95a:	2301      	movs	r3, #1
 800c95c:	e041      	b.n	800c9e2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	69ba      	ldr	r2, [r7, #24]
 800c962:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	899b      	ldrh	r3, [r3, #12]
 800c968:	4618      	mov	r0, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	8992      	ldrh	r2, [r2, #12]
 800c972:	fbb3 f1f2 	udiv	r1, r3, r2
 800c976:	fb01 f202 	mul.w	r2, r1, r2
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	1ac3      	subs	r3, r0, r3
 800c97e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	429a      	cmp	r2, r3
 800c986:	d901      	bls.n	800c98c <f_read+0x260>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	8992      	ldrh	r2, [r2, #12]
 800c99a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c99e:	fb00 f202 	mul.w	r2, r0, r2
 800c9a2:	1a9b      	subs	r3, r3, r2
 800c9a4:	440b      	add	r3, r1
 800c9a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c9ac:	f7fd fbfa 	bl	800a1a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	4413      	add	r3, r2
 800c9b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	699a      	ldr	r2, [r3, #24]
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	441a      	add	r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	619a      	str	r2, [r3, #24]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	441a      	add	r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f47f aee1 	bne.w	800c7a2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3738      	adds	r7, #56	@ 0x38
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b086      	sub	sp, #24
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f107 0208 	add.w	r2, r7, #8
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff fc52 	bl	800c2a4 <validate>
 800ca00:	4603      	mov	r3, r0
 800ca02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d168      	bne.n	800cadc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7d1b      	ldrb	r3, [r3, #20]
 800ca0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d062      	beq.n	800cadc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	7d1b      	ldrb	r3, [r3, #20]
 800ca1a:	b25b      	sxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	da15      	bge.n	800ca4c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	7858      	ldrb	r0, [r3, #1]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a1a      	ldr	r2, [r3, #32]
 800ca2e:	2301      	movs	r3, #1
 800ca30:	f7fd faf8 	bl	800a024 <disk_write>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <f_sync+0x54>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e04f      	b.n	800cade <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7d1b      	ldrb	r3, [r3, #20]
 800ca42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca4c:	f7fd fa2a 	bl	8009ea4 <get_fattime>
 800ca50:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	f7fd fdd0 	bl	800a600 <move_window>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d138      	bne.n	800cadc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	330b      	adds	r3, #11
 800ca74:	781a      	ldrb	r2, [r3, #0]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	330b      	adds	r3, #11
 800ca7a:	f042 0220 	orr.w	r2, r2, #32
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6818      	ldr	r0, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	68f9      	ldr	r1, [r7, #12]
 800ca8e:	f7fe fb5b 	bl	800b148 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f103 021c 	add.w	r2, r3, #28
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4610      	mov	r0, r2
 800caa0:	f7fd fb54 	bl	800a14c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3316      	adds	r3, #22
 800caa8:	6939      	ldr	r1, [r7, #16]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fd fb4e 	bl	800a14c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	3312      	adds	r3, #18
 800cab4:	2100      	movs	r1, #0
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fd fb2d 	bl	800a116 <st_word>
					fs->wflag = 1;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2201      	movs	r2, #1
 800cac0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fd fdc9 	bl	800a65c <sync_fs>
 800caca:	4603      	mov	r3, r0
 800cacc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	7d1b      	ldrb	r3, [r3, #20]
 800cad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff ff7b 	bl	800c9ea <f_sync>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d118      	bne.n	800cb30 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f107 0208 	add.w	r2, r7, #8
 800cb04:	4611      	mov	r1, r2
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7ff fbcc 	bl	800c2a4 <validate>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10c      	bne.n	800cb30 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fd fccc 	bl	800a4b8 <dec_lock>
 800cb20:	4603      	mov	r3, r0
 800cb22:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d102      	bne.n	800cb30 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb52:	4b1f      	ldr	r3, [pc, #124]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb54:	7a5b      	ldrb	r3, [r3, #9]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d131      	bne.n	800cbc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb5e:	7a5b      	ldrb	r3, [r3, #9]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	461a      	mov	r2, r3
 800cb64:	4b1a      	ldr	r3, [pc, #104]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb66:	2100      	movs	r1, #0
 800cb68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb6a:	4b19      	ldr	r3, [pc, #100]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb6c:	7a5b      	ldrb	r3, [r3, #9]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	4a17      	ldr	r2, [pc, #92]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb7a:	4b15      	ldr	r3, [pc, #84]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb7c:	7a5b      	ldrb	r3, [r3, #9]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	461a      	mov	r2, r3
 800cb82:	4b13      	ldr	r3, [pc, #76]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb84:	4413      	add	r3, r2
 800cb86:	79fa      	ldrb	r2, [r7, #7]
 800cb88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb8a:	4b11      	ldr	r3, [pc, #68]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb8c:	7a5b      	ldrb	r3, [r3, #9]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	b2d1      	uxtb	r1, r2
 800cb94:	4a0e      	ldr	r2, [pc, #56]	@ (800cbd0 <FATFS_LinkDriverEx+0x94>)
 800cb96:	7251      	strb	r1, [r2, #9]
 800cb98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb9a:	7dbb      	ldrb	r3, [r7, #22]
 800cb9c:	3330      	adds	r3, #48	@ 0x30
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	3301      	adds	r3, #1
 800cba8:	223a      	movs	r2, #58	@ 0x3a
 800cbaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	3302      	adds	r3, #2
 800cbb0:	222f      	movs	r2, #47	@ 0x2f
 800cbb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	3303      	adds	r3, #3
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	371c      	adds	r7, #28
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	2001cd70 	.word	0x2001cd70

0800cbd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbde:	2200      	movs	r2, #0
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7ff ffaa 	bl	800cb3c <FATFS_LinkDriverEx>
 800cbe8:	4603      	mov	r3, r0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cc00:	88fb      	ldrh	r3, [r7, #6]
 800cc02:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc04:	d802      	bhi.n	800cc0c <ff_convert+0x18>
		c = chr;
 800cc06:	88fb      	ldrh	r3, [r7, #6]
 800cc08:	81fb      	strh	r3, [r7, #14]
 800cc0a:	e025      	b.n	800cc58 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00b      	beq.n	800cc2a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cc12:	88fb      	ldrh	r3, [r7, #6]
 800cc14:	2bff      	cmp	r3, #255	@ 0xff
 800cc16:	d805      	bhi.n	800cc24 <ff_convert+0x30>
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	3b80      	subs	r3, #128	@ 0x80
 800cc1c:	4a12      	ldr	r2, [pc, #72]	@ (800cc68 <ff_convert+0x74>)
 800cc1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc22:	e000      	b.n	800cc26 <ff_convert+0x32>
 800cc24:	2300      	movs	r3, #0
 800cc26:	81fb      	strh	r3, [r7, #14]
 800cc28:	e016      	b.n	800cc58 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	81fb      	strh	r3, [r7, #14]
 800cc2e:	e009      	b.n	800cc44 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cc30:	89fb      	ldrh	r3, [r7, #14]
 800cc32:	4a0d      	ldr	r2, [pc, #52]	@ (800cc68 <ff_convert+0x74>)
 800cc34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc38:	88fa      	ldrh	r2, [r7, #6]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d006      	beq.n	800cc4c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cc3e:	89fb      	ldrh	r3, [r7, #14]
 800cc40:	3301      	adds	r3, #1
 800cc42:	81fb      	strh	r3, [r7, #14]
 800cc44:	89fb      	ldrh	r3, [r7, #14]
 800cc46:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc48:	d9f2      	bls.n	800cc30 <ff_convert+0x3c>
 800cc4a:	e000      	b.n	800cc4e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cc4c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cc4e:	89fb      	ldrh	r3, [r7, #14]
 800cc50:	3380      	adds	r3, #128	@ 0x80
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cc58:	89fb      	ldrh	r3, [r7, #14]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	0800d87c 	.word	0x0800d87c

0800cc6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cc76:	88fb      	ldrh	r3, [r7, #6]
 800cc78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc7c:	d201      	bcs.n	800cc82 <ff_wtoupper+0x16>
 800cc7e:	4b3e      	ldr	r3, [pc, #248]	@ (800cd78 <ff_wtoupper+0x10c>)
 800cc80:	e000      	b.n	800cc84 <ff_wtoupper+0x18>
 800cc82:	4b3e      	ldr	r3, [pc, #248]	@ (800cd7c <ff_wtoupper+0x110>)
 800cc84:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	1c9a      	adds	r2, r3, #2
 800cc8a:	617a      	str	r2, [r7, #20]
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cc90:	8a7b      	ldrh	r3, [r7, #18]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d068      	beq.n	800cd68 <ff_wtoupper+0xfc>
 800cc96:	88fa      	ldrh	r2, [r7, #6]
 800cc98:	8a7b      	ldrh	r3, [r7, #18]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d364      	bcc.n	800cd68 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	1c9a      	adds	r2, r3, #2
 800cca2:	617a      	str	r2, [r7, #20]
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	823b      	strh	r3, [r7, #16]
 800cca8:	8a3b      	ldrh	r3, [r7, #16]
 800ccaa:	0a1b      	lsrs	r3, r3, #8
 800ccac:	81fb      	strh	r3, [r7, #14]
 800ccae:	8a3b      	ldrh	r3, [r7, #16]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ccb4:	88fa      	ldrh	r2, [r7, #6]
 800ccb6:	8a79      	ldrh	r1, [r7, #18]
 800ccb8:	8a3b      	ldrh	r3, [r7, #16]
 800ccba:	440b      	add	r3, r1
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	da49      	bge.n	800cd54 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ccc0:	89fb      	ldrh	r3, [r7, #14]
 800ccc2:	2b08      	cmp	r3, #8
 800ccc4:	d84f      	bhi.n	800cd66 <ff_wtoupper+0xfa>
 800ccc6:	a201      	add	r2, pc, #4	@ (adr r2, 800cccc <ff_wtoupper+0x60>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800ccf1 	.word	0x0800ccf1
 800ccd0:	0800cd03 	.word	0x0800cd03
 800ccd4:	0800cd19 	.word	0x0800cd19
 800ccd8:	0800cd21 	.word	0x0800cd21
 800ccdc:	0800cd29 	.word	0x0800cd29
 800cce0:	0800cd31 	.word	0x0800cd31
 800cce4:	0800cd39 	.word	0x0800cd39
 800cce8:	0800cd41 	.word	0x0800cd41
 800ccec:	0800cd49 	.word	0x0800cd49
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ccf0:	88fa      	ldrh	r2, [r7, #6]
 800ccf2:	8a7b      	ldrh	r3, [r7, #18]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	80fb      	strh	r3, [r7, #6]
 800cd00:	e027      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cd02:	88fa      	ldrh	r2, [r7, #6]
 800cd04:	8a7b      	ldrh	r3, [r7, #18]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	88fa      	ldrh	r2, [r7, #6]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	80fb      	strh	r3, [r7, #6]
 800cd16:	e01c      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cd18:	88fb      	ldrh	r3, [r7, #6]
 800cd1a:	3b10      	subs	r3, #16
 800cd1c:	80fb      	strh	r3, [r7, #6]
 800cd1e:	e018      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cd20:	88fb      	ldrh	r3, [r7, #6]
 800cd22:	3b20      	subs	r3, #32
 800cd24:	80fb      	strh	r3, [r7, #6]
 800cd26:	e014      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cd28:	88fb      	ldrh	r3, [r7, #6]
 800cd2a:	3b30      	subs	r3, #48	@ 0x30
 800cd2c:	80fb      	strh	r3, [r7, #6]
 800cd2e:	e010      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cd30:	88fb      	ldrh	r3, [r7, #6]
 800cd32:	3b1a      	subs	r3, #26
 800cd34:	80fb      	strh	r3, [r7, #6]
 800cd36:	e00c      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cd38:	88fb      	ldrh	r3, [r7, #6]
 800cd3a:	3308      	adds	r3, #8
 800cd3c:	80fb      	strh	r3, [r7, #6]
 800cd3e:	e008      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cd40:	88fb      	ldrh	r3, [r7, #6]
 800cd42:	3b50      	subs	r3, #80	@ 0x50
 800cd44:	80fb      	strh	r3, [r7, #6]
 800cd46:	e004      	b.n	800cd52 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cd48:	88fb      	ldrh	r3, [r7, #6]
 800cd4a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800cd4e:	80fb      	strh	r3, [r7, #6]
 800cd50:	bf00      	nop
			}
			break;
 800cd52:	e008      	b.n	800cd66 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cd54:	89fb      	ldrh	r3, [r7, #14]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d195      	bne.n	800cc86 <ff_wtoupper+0x1a>
 800cd5a:	8a3b      	ldrh	r3, [r7, #16]
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	4413      	add	r3, r2
 800cd62:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cd64:	e78f      	b.n	800cc86 <ff_wtoupper+0x1a>
			break;
 800cd66:	bf00      	nop
	}

	return chr;
 800cd68:	88fb      	ldrh	r3, [r7, #6]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	0800d97c 	.word	0x0800d97c
 800cd7c:	0800db70 	.word	0x0800db70

0800cd80 <siprintf>:
 800cd80:	b40e      	push	{r1, r2, r3}
 800cd82:	b500      	push	{lr}
 800cd84:	b09c      	sub	sp, #112	@ 0x70
 800cd86:	ab1d      	add	r3, sp, #116	@ 0x74
 800cd88:	9002      	str	r0, [sp, #8]
 800cd8a:	9006      	str	r0, [sp, #24]
 800cd8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cd90:	4809      	ldr	r0, [pc, #36]	@ (800cdb8 <siprintf+0x38>)
 800cd92:	9107      	str	r1, [sp, #28]
 800cd94:	9104      	str	r1, [sp, #16]
 800cd96:	4909      	ldr	r1, [pc, #36]	@ (800cdbc <siprintf+0x3c>)
 800cd98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd9c:	9105      	str	r1, [sp, #20]
 800cd9e:	6800      	ldr	r0, [r0, #0]
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	a902      	add	r1, sp, #8
 800cda4:	f000 f994 	bl	800d0d0 <_svfiprintf_r>
 800cda8:	9b02      	ldr	r3, [sp, #8]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	b01c      	add	sp, #112	@ 0x70
 800cdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb4:	b003      	add	sp, #12
 800cdb6:	4770      	bx	lr
 800cdb8:	20016a9c 	.word	0x20016a9c
 800cdbc:	ffff0208 	.word	0xffff0208

0800cdc0 <memset>:
 800cdc0:	4402      	add	r2, r0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d100      	bne.n	800cdca <memset+0xa>
 800cdc8:	4770      	bx	lr
 800cdca:	f803 1b01 	strb.w	r1, [r3], #1
 800cdce:	e7f9      	b.n	800cdc4 <memset+0x4>

0800cdd0 <__errno>:
 800cdd0:	4b01      	ldr	r3, [pc, #4]	@ (800cdd8 <__errno+0x8>)
 800cdd2:	6818      	ldr	r0, [r3, #0]
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	20016a9c 	.word	0x20016a9c

0800cddc <__libc_init_array>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	4d0d      	ldr	r5, [pc, #52]	@ (800ce14 <__libc_init_array+0x38>)
 800cde0:	4c0d      	ldr	r4, [pc, #52]	@ (800ce18 <__libc_init_array+0x3c>)
 800cde2:	1b64      	subs	r4, r4, r5
 800cde4:	10a4      	asrs	r4, r4, #2
 800cde6:	2600      	movs	r6, #0
 800cde8:	42a6      	cmp	r6, r4
 800cdea:	d109      	bne.n	800ce00 <__libc_init_array+0x24>
 800cdec:	4d0b      	ldr	r5, [pc, #44]	@ (800ce1c <__libc_init_array+0x40>)
 800cdee:	4c0c      	ldr	r4, [pc, #48]	@ (800ce20 <__libc_init_array+0x44>)
 800cdf0:	f000 fc66 	bl	800d6c0 <_init>
 800cdf4:	1b64      	subs	r4, r4, r5
 800cdf6:	10a4      	asrs	r4, r4, #2
 800cdf8:	2600      	movs	r6, #0
 800cdfa:	42a6      	cmp	r6, r4
 800cdfc:	d105      	bne.n	800ce0a <__libc_init_array+0x2e>
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}
 800ce00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce04:	4798      	blx	r3
 800ce06:	3601      	adds	r6, #1
 800ce08:	e7ee      	b.n	800cde8 <__libc_init_array+0xc>
 800ce0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce0e:	4798      	blx	r3
 800ce10:	3601      	adds	r6, #1
 800ce12:	e7f2      	b.n	800cdfa <__libc_init_array+0x1e>
 800ce14:	0800dc68 	.word	0x0800dc68
 800ce18:	0800dc68 	.word	0x0800dc68
 800ce1c:	0800dc68 	.word	0x0800dc68
 800ce20:	0800dc6c 	.word	0x0800dc6c

0800ce24 <__retarget_lock_acquire_recursive>:
 800ce24:	4770      	bx	lr

0800ce26 <__retarget_lock_release_recursive>:
 800ce26:	4770      	bx	lr

0800ce28 <_free_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	2900      	cmp	r1, #0
 800ce2e:	d041      	beq.n	800ceb4 <_free_r+0x8c>
 800ce30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce34:	1f0c      	subs	r4, r1, #4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	bfb8      	it	lt
 800ce3a:	18e4      	addlt	r4, r4, r3
 800ce3c:	f000 f8e0 	bl	800d000 <__malloc_lock>
 800ce40:	4a1d      	ldr	r2, [pc, #116]	@ (800ceb8 <_free_r+0x90>)
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	b933      	cbnz	r3, 800ce54 <_free_r+0x2c>
 800ce46:	6063      	str	r3, [r4, #4]
 800ce48:	6014      	str	r4, [r2, #0]
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce50:	f000 b8dc 	b.w	800d00c <__malloc_unlock>
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	d908      	bls.n	800ce6a <_free_r+0x42>
 800ce58:	6820      	ldr	r0, [r4, #0]
 800ce5a:	1821      	adds	r1, r4, r0
 800ce5c:	428b      	cmp	r3, r1
 800ce5e:	bf01      	itttt	eq
 800ce60:	6819      	ldreq	r1, [r3, #0]
 800ce62:	685b      	ldreq	r3, [r3, #4]
 800ce64:	1809      	addeq	r1, r1, r0
 800ce66:	6021      	streq	r1, [r4, #0]
 800ce68:	e7ed      	b.n	800ce46 <_free_r+0x1e>
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	b10b      	cbz	r3, 800ce74 <_free_r+0x4c>
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	d9fa      	bls.n	800ce6a <_free_r+0x42>
 800ce74:	6811      	ldr	r1, [r2, #0]
 800ce76:	1850      	adds	r0, r2, r1
 800ce78:	42a0      	cmp	r0, r4
 800ce7a:	d10b      	bne.n	800ce94 <_free_r+0x6c>
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	4401      	add	r1, r0
 800ce80:	1850      	adds	r0, r2, r1
 800ce82:	4283      	cmp	r3, r0
 800ce84:	6011      	str	r1, [r2, #0]
 800ce86:	d1e0      	bne.n	800ce4a <_free_r+0x22>
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	6053      	str	r3, [r2, #4]
 800ce8e:	4408      	add	r0, r1
 800ce90:	6010      	str	r0, [r2, #0]
 800ce92:	e7da      	b.n	800ce4a <_free_r+0x22>
 800ce94:	d902      	bls.n	800ce9c <_free_r+0x74>
 800ce96:	230c      	movs	r3, #12
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	e7d6      	b.n	800ce4a <_free_r+0x22>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	1821      	adds	r1, r4, r0
 800cea0:	428b      	cmp	r3, r1
 800cea2:	bf04      	itt	eq
 800cea4:	6819      	ldreq	r1, [r3, #0]
 800cea6:	685b      	ldreq	r3, [r3, #4]
 800cea8:	6063      	str	r3, [r4, #4]
 800ceaa:	bf04      	itt	eq
 800ceac:	1809      	addeq	r1, r1, r0
 800ceae:	6021      	streq	r1, [r4, #0]
 800ceb0:	6054      	str	r4, [r2, #4]
 800ceb2:	e7ca      	b.n	800ce4a <_free_r+0x22>
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	2001cec0 	.word	0x2001cec0

0800cebc <sbrk_aligned>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	4e0f      	ldr	r6, [pc, #60]	@ (800cefc <sbrk_aligned+0x40>)
 800cec0:	460c      	mov	r4, r1
 800cec2:	6831      	ldr	r1, [r6, #0]
 800cec4:	4605      	mov	r5, r0
 800cec6:	b911      	cbnz	r1, 800cece <sbrk_aligned+0x12>
 800cec8:	f000 fba6 	bl	800d618 <_sbrk_r>
 800cecc:	6030      	str	r0, [r6, #0]
 800cece:	4621      	mov	r1, r4
 800ced0:	4628      	mov	r0, r5
 800ced2:	f000 fba1 	bl	800d618 <_sbrk_r>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	d103      	bne.n	800cee2 <sbrk_aligned+0x26>
 800ceda:	f04f 34ff 	mov.w	r4, #4294967295
 800cede:	4620      	mov	r0, r4
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	1cc4      	adds	r4, r0, #3
 800cee4:	f024 0403 	bic.w	r4, r4, #3
 800cee8:	42a0      	cmp	r0, r4
 800ceea:	d0f8      	beq.n	800cede <sbrk_aligned+0x22>
 800ceec:	1a21      	subs	r1, r4, r0
 800ceee:	4628      	mov	r0, r5
 800cef0:	f000 fb92 	bl	800d618 <_sbrk_r>
 800cef4:	3001      	adds	r0, #1
 800cef6:	d1f2      	bne.n	800cede <sbrk_aligned+0x22>
 800cef8:	e7ef      	b.n	800ceda <sbrk_aligned+0x1e>
 800cefa:	bf00      	nop
 800cefc:	2001cebc 	.word	0x2001cebc

0800cf00 <_malloc_r>:
 800cf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf04:	1ccd      	adds	r5, r1, #3
 800cf06:	f025 0503 	bic.w	r5, r5, #3
 800cf0a:	3508      	adds	r5, #8
 800cf0c:	2d0c      	cmp	r5, #12
 800cf0e:	bf38      	it	cc
 800cf10:	250c      	movcc	r5, #12
 800cf12:	2d00      	cmp	r5, #0
 800cf14:	4606      	mov	r6, r0
 800cf16:	db01      	blt.n	800cf1c <_malloc_r+0x1c>
 800cf18:	42a9      	cmp	r1, r5
 800cf1a:	d904      	bls.n	800cf26 <_malloc_r+0x26>
 800cf1c:	230c      	movs	r3, #12
 800cf1e:	6033      	str	r3, [r6, #0]
 800cf20:	2000      	movs	r0, #0
 800cf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cffc <_malloc_r+0xfc>
 800cf2a:	f000 f869 	bl	800d000 <__malloc_lock>
 800cf2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf32:	461c      	mov	r4, r3
 800cf34:	bb44      	cbnz	r4, 800cf88 <_malloc_r+0x88>
 800cf36:	4629      	mov	r1, r5
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f7ff ffbf 	bl	800cebc <sbrk_aligned>
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	4604      	mov	r4, r0
 800cf42:	d158      	bne.n	800cff6 <_malloc_r+0xf6>
 800cf44:	f8d8 4000 	ldr.w	r4, [r8]
 800cf48:	4627      	mov	r7, r4
 800cf4a:	2f00      	cmp	r7, #0
 800cf4c:	d143      	bne.n	800cfd6 <_malloc_r+0xd6>
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	d04b      	beq.n	800cfea <_malloc_r+0xea>
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	4639      	mov	r1, r7
 800cf56:	4630      	mov	r0, r6
 800cf58:	eb04 0903 	add.w	r9, r4, r3
 800cf5c:	f000 fb5c 	bl	800d618 <_sbrk_r>
 800cf60:	4581      	cmp	r9, r0
 800cf62:	d142      	bne.n	800cfea <_malloc_r+0xea>
 800cf64:	6821      	ldr	r1, [r4, #0]
 800cf66:	1a6d      	subs	r5, r5, r1
 800cf68:	4629      	mov	r1, r5
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7ff ffa6 	bl	800cebc <sbrk_aligned>
 800cf70:	3001      	adds	r0, #1
 800cf72:	d03a      	beq.n	800cfea <_malloc_r+0xea>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	442b      	add	r3, r5
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	bb62      	cbnz	r2, 800cfdc <_malloc_r+0xdc>
 800cf82:	f8c8 7000 	str.w	r7, [r8]
 800cf86:	e00f      	b.n	800cfa8 <_malloc_r+0xa8>
 800cf88:	6822      	ldr	r2, [r4, #0]
 800cf8a:	1b52      	subs	r2, r2, r5
 800cf8c:	d420      	bmi.n	800cfd0 <_malloc_r+0xd0>
 800cf8e:	2a0b      	cmp	r2, #11
 800cf90:	d917      	bls.n	800cfc2 <_malloc_r+0xc2>
 800cf92:	1961      	adds	r1, r4, r5
 800cf94:	42a3      	cmp	r3, r4
 800cf96:	6025      	str	r5, [r4, #0]
 800cf98:	bf18      	it	ne
 800cf9a:	6059      	strne	r1, [r3, #4]
 800cf9c:	6863      	ldr	r3, [r4, #4]
 800cf9e:	bf08      	it	eq
 800cfa0:	f8c8 1000 	streq.w	r1, [r8]
 800cfa4:	5162      	str	r2, [r4, r5]
 800cfa6:	604b      	str	r3, [r1, #4]
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f000 f82f 	bl	800d00c <__malloc_unlock>
 800cfae:	f104 000b 	add.w	r0, r4, #11
 800cfb2:	1d23      	adds	r3, r4, #4
 800cfb4:	f020 0007 	bic.w	r0, r0, #7
 800cfb8:	1ac2      	subs	r2, r0, r3
 800cfba:	bf1c      	itt	ne
 800cfbc:	1a1b      	subne	r3, r3, r0
 800cfbe:	50a3      	strne	r3, [r4, r2]
 800cfc0:	e7af      	b.n	800cf22 <_malloc_r+0x22>
 800cfc2:	6862      	ldr	r2, [r4, #4]
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	bf0c      	ite	eq
 800cfc8:	f8c8 2000 	streq.w	r2, [r8]
 800cfcc:	605a      	strne	r2, [r3, #4]
 800cfce:	e7eb      	b.n	800cfa8 <_malloc_r+0xa8>
 800cfd0:	4623      	mov	r3, r4
 800cfd2:	6864      	ldr	r4, [r4, #4]
 800cfd4:	e7ae      	b.n	800cf34 <_malloc_r+0x34>
 800cfd6:	463c      	mov	r4, r7
 800cfd8:	687f      	ldr	r7, [r7, #4]
 800cfda:	e7b6      	b.n	800cf4a <_malloc_r+0x4a>
 800cfdc:	461a      	mov	r2, r3
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	d1fb      	bne.n	800cfdc <_malloc_r+0xdc>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	6053      	str	r3, [r2, #4]
 800cfe8:	e7de      	b.n	800cfa8 <_malloc_r+0xa8>
 800cfea:	230c      	movs	r3, #12
 800cfec:	6033      	str	r3, [r6, #0]
 800cfee:	4630      	mov	r0, r6
 800cff0:	f000 f80c 	bl	800d00c <__malloc_unlock>
 800cff4:	e794      	b.n	800cf20 <_malloc_r+0x20>
 800cff6:	6005      	str	r5, [r0, #0]
 800cff8:	e7d6      	b.n	800cfa8 <_malloc_r+0xa8>
 800cffa:	bf00      	nop
 800cffc:	2001cec0 	.word	0x2001cec0

0800d000 <__malloc_lock>:
 800d000:	4801      	ldr	r0, [pc, #4]	@ (800d008 <__malloc_lock+0x8>)
 800d002:	f7ff bf0f 	b.w	800ce24 <__retarget_lock_acquire_recursive>
 800d006:	bf00      	nop
 800d008:	2001ceb8 	.word	0x2001ceb8

0800d00c <__malloc_unlock>:
 800d00c:	4801      	ldr	r0, [pc, #4]	@ (800d014 <__malloc_unlock+0x8>)
 800d00e:	f7ff bf0a 	b.w	800ce26 <__retarget_lock_release_recursive>
 800d012:	bf00      	nop
 800d014:	2001ceb8 	.word	0x2001ceb8

0800d018 <__ssputs_r>:
 800d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	688e      	ldr	r6, [r1, #8]
 800d01e:	461f      	mov	r7, r3
 800d020:	42be      	cmp	r6, r7
 800d022:	680b      	ldr	r3, [r1, #0]
 800d024:	4682      	mov	sl, r0
 800d026:	460c      	mov	r4, r1
 800d028:	4690      	mov	r8, r2
 800d02a:	d82d      	bhi.n	800d088 <__ssputs_r+0x70>
 800d02c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d034:	d026      	beq.n	800d084 <__ssputs_r+0x6c>
 800d036:	6965      	ldr	r5, [r4, #20]
 800d038:	6909      	ldr	r1, [r1, #16]
 800d03a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d03e:	eba3 0901 	sub.w	r9, r3, r1
 800d042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d046:	1c7b      	adds	r3, r7, #1
 800d048:	444b      	add	r3, r9
 800d04a:	106d      	asrs	r5, r5, #1
 800d04c:	429d      	cmp	r5, r3
 800d04e:	bf38      	it	cc
 800d050:	461d      	movcc	r5, r3
 800d052:	0553      	lsls	r3, r2, #21
 800d054:	d527      	bpl.n	800d0a6 <__ssputs_r+0x8e>
 800d056:	4629      	mov	r1, r5
 800d058:	f7ff ff52 	bl	800cf00 <_malloc_r>
 800d05c:	4606      	mov	r6, r0
 800d05e:	b360      	cbz	r0, 800d0ba <__ssputs_r+0xa2>
 800d060:	6921      	ldr	r1, [r4, #16]
 800d062:	464a      	mov	r2, r9
 800d064:	f000 fae8 	bl	800d638 <memcpy>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	6126      	str	r6, [r4, #16]
 800d076:	6165      	str	r5, [r4, #20]
 800d078:	444e      	add	r6, r9
 800d07a:	eba5 0509 	sub.w	r5, r5, r9
 800d07e:	6026      	str	r6, [r4, #0]
 800d080:	60a5      	str	r5, [r4, #8]
 800d082:	463e      	mov	r6, r7
 800d084:	42be      	cmp	r6, r7
 800d086:	d900      	bls.n	800d08a <__ssputs_r+0x72>
 800d088:	463e      	mov	r6, r7
 800d08a:	6820      	ldr	r0, [r4, #0]
 800d08c:	4632      	mov	r2, r6
 800d08e:	4641      	mov	r1, r8
 800d090:	f000 faa8 	bl	800d5e4 <memmove>
 800d094:	68a3      	ldr	r3, [r4, #8]
 800d096:	1b9b      	subs	r3, r3, r6
 800d098:	60a3      	str	r3, [r4, #8]
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	4433      	add	r3, r6
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a6:	462a      	mov	r2, r5
 800d0a8:	f000 fad4 	bl	800d654 <_realloc_r>
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d1e0      	bne.n	800d074 <__ssputs_r+0x5c>
 800d0b2:	6921      	ldr	r1, [r4, #16]
 800d0b4:	4650      	mov	r0, sl
 800d0b6:	f7ff feb7 	bl	800ce28 <_free_r>
 800d0ba:	230c      	movs	r3, #12
 800d0bc:	f8ca 3000 	str.w	r3, [sl]
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0c6:	81a3      	strh	r3, [r4, #12]
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e7e9      	b.n	800d0a2 <__ssputs_r+0x8a>
	...

0800d0d0 <_svfiprintf_r>:
 800d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	4698      	mov	r8, r3
 800d0d6:	898b      	ldrh	r3, [r1, #12]
 800d0d8:	061b      	lsls	r3, r3, #24
 800d0da:	b09d      	sub	sp, #116	@ 0x74
 800d0dc:	4607      	mov	r7, r0
 800d0de:	460d      	mov	r5, r1
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	d510      	bpl.n	800d106 <_svfiprintf_r+0x36>
 800d0e4:	690b      	ldr	r3, [r1, #16]
 800d0e6:	b973      	cbnz	r3, 800d106 <_svfiprintf_r+0x36>
 800d0e8:	2140      	movs	r1, #64	@ 0x40
 800d0ea:	f7ff ff09 	bl	800cf00 <_malloc_r>
 800d0ee:	6028      	str	r0, [r5, #0]
 800d0f0:	6128      	str	r0, [r5, #16]
 800d0f2:	b930      	cbnz	r0, 800d102 <_svfiprintf_r+0x32>
 800d0f4:	230c      	movs	r3, #12
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	b01d      	add	sp, #116	@ 0x74
 800d0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d102:	2340      	movs	r3, #64	@ 0x40
 800d104:	616b      	str	r3, [r5, #20]
 800d106:	2300      	movs	r3, #0
 800d108:	9309      	str	r3, [sp, #36]	@ 0x24
 800d10a:	2320      	movs	r3, #32
 800d10c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d110:	f8cd 800c 	str.w	r8, [sp, #12]
 800d114:	2330      	movs	r3, #48	@ 0x30
 800d116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2b4 <_svfiprintf_r+0x1e4>
 800d11a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d11e:	f04f 0901 	mov.w	r9, #1
 800d122:	4623      	mov	r3, r4
 800d124:	469a      	mov	sl, r3
 800d126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d12a:	b10a      	cbz	r2, 800d130 <_svfiprintf_r+0x60>
 800d12c:	2a25      	cmp	r2, #37	@ 0x25
 800d12e:	d1f9      	bne.n	800d124 <_svfiprintf_r+0x54>
 800d130:	ebba 0b04 	subs.w	fp, sl, r4
 800d134:	d00b      	beq.n	800d14e <_svfiprintf_r+0x7e>
 800d136:	465b      	mov	r3, fp
 800d138:	4622      	mov	r2, r4
 800d13a:	4629      	mov	r1, r5
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7ff ff6b 	bl	800d018 <__ssputs_r>
 800d142:	3001      	adds	r0, #1
 800d144:	f000 80a7 	beq.w	800d296 <_svfiprintf_r+0x1c6>
 800d148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d14a:	445a      	add	r2, fp
 800d14c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d14e:	f89a 3000 	ldrb.w	r3, [sl]
 800d152:	2b00      	cmp	r3, #0
 800d154:	f000 809f 	beq.w	800d296 <_svfiprintf_r+0x1c6>
 800d158:	2300      	movs	r3, #0
 800d15a:	f04f 32ff 	mov.w	r2, #4294967295
 800d15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d162:	f10a 0a01 	add.w	sl, sl, #1
 800d166:	9304      	str	r3, [sp, #16]
 800d168:	9307      	str	r3, [sp, #28]
 800d16a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d16e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d170:	4654      	mov	r4, sl
 800d172:	2205      	movs	r2, #5
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	484e      	ldr	r0, [pc, #312]	@ (800d2b4 <_svfiprintf_r+0x1e4>)
 800d17a:	f7f3 f851 	bl	8000220 <memchr>
 800d17e:	9a04      	ldr	r2, [sp, #16]
 800d180:	b9d8      	cbnz	r0, 800d1ba <_svfiprintf_r+0xea>
 800d182:	06d0      	lsls	r0, r2, #27
 800d184:	bf44      	itt	mi
 800d186:	2320      	movmi	r3, #32
 800d188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d18c:	0711      	lsls	r1, r2, #28
 800d18e:	bf44      	itt	mi
 800d190:	232b      	movmi	r3, #43	@ 0x2b
 800d192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d196:	f89a 3000 	ldrb.w	r3, [sl]
 800d19a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d19c:	d015      	beq.n	800d1ca <_svfiprintf_r+0xfa>
 800d19e:	9a07      	ldr	r2, [sp, #28]
 800d1a0:	4654      	mov	r4, sl
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	f04f 0c0a 	mov.w	ip, #10
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ae:	3b30      	subs	r3, #48	@ 0x30
 800d1b0:	2b09      	cmp	r3, #9
 800d1b2:	d94b      	bls.n	800d24c <_svfiprintf_r+0x17c>
 800d1b4:	b1b0      	cbz	r0, 800d1e4 <_svfiprintf_r+0x114>
 800d1b6:	9207      	str	r2, [sp, #28]
 800d1b8:	e014      	b.n	800d1e4 <_svfiprintf_r+0x114>
 800d1ba:	eba0 0308 	sub.w	r3, r0, r8
 800d1be:	fa09 f303 	lsl.w	r3, r9, r3
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	46a2      	mov	sl, r4
 800d1c8:	e7d2      	b.n	800d170 <_svfiprintf_r+0xa0>
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	1d19      	adds	r1, r3, #4
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	9103      	str	r1, [sp, #12]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	bfbb      	ittet	lt
 800d1d6:	425b      	neglt	r3, r3
 800d1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1dc:	9307      	strge	r3, [sp, #28]
 800d1de:	9307      	strlt	r3, [sp, #28]
 800d1e0:	bfb8      	it	lt
 800d1e2:	9204      	strlt	r2, [sp, #16]
 800d1e4:	7823      	ldrb	r3, [r4, #0]
 800d1e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1e8:	d10a      	bne.n	800d200 <_svfiprintf_r+0x130>
 800d1ea:	7863      	ldrb	r3, [r4, #1]
 800d1ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ee:	d132      	bne.n	800d256 <_svfiprintf_r+0x186>
 800d1f0:	9b03      	ldr	r3, [sp, #12]
 800d1f2:	1d1a      	adds	r2, r3, #4
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	9203      	str	r2, [sp, #12]
 800d1f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1fc:	3402      	adds	r4, #2
 800d1fe:	9305      	str	r3, [sp, #20]
 800d200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d2c4 <_svfiprintf_r+0x1f4>
 800d204:	7821      	ldrb	r1, [r4, #0]
 800d206:	2203      	movs	r2, #3
 800d208:	4650      	mov	r0, sl
 800d20a:	f7f3 f809 	bl	8000220 <memchr>
 800d20e:	b138      	cbz	r0, 800d220 <_svfiprintf_r+0x150>
 800d210:	9b04      	ldr	r3, [sp, #16]
 800d212:	eba0 000a 	sub.w	r0, r0, sl
 800d216:	2240      	movs	r2, #64	@ 0x40
 800d218:	4082      	lsls	r2, r0
 800d21a:	4313      	orrs	r3, r2
 800d21c:	3401      	adds	r4, #1
 800d21e:	9304      	str	r3, [sp, #16]
 800d220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d224:	4824      	ldr	r0, [pc, #144]	@ (800d2b8 <_svfiprintf_r+0x1e8>)
 800d226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d22a:	2206      	movs	r2, #6
 800d22c:	f7f2 fff8 	bl	8000220 <memchr>
 800d230:	2800      	cmp	r0, #0
 800d232:	d036      	beq.n	800d2a2 <_svfiprintf_r+0x1d2>
 800d234:	4b21      	ldr	r3, [pc, #132]	@ (800d2bc <_svfiprintf_r+0x1ec>)
 800d236:	bb1b      	cbnz	r3, 800d280 <_svfiprintf_r+0x1b0>
 800d238:	9b03      	ldr	r3, [sp, #12]
 800d23a:	3307      	adds	r3, #7
 800d23c:	f023 0307 	bic.w	r3, r3, #7
 800d240:	3308      	adds	r3, #8
 800d242:	9303      	str	r3, [sp, #12]
 800d244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d246:	4433      	add	r3, r6
 800d248:	9309      	str	r3, [sp, #36]	@ 0x24
 800d24a:	e76a      	b.n	800d122 <_svfiprintf_r+0x52>
 800d24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d250:	460c      	mov	r4, r1
 800d252:	2001      	movs	r0, #1
 800d254:	e7a8      	b.n	800d1a8 <_svfiprintf_r+0xd8>
 800d256:	2300      	movs	r3, #0
 800d258:	3401      	adds	r4, #1
 800d25a:	9305      	str	r3, [sp, #20]
 800d25c:	4619      	mov	r1, r3
 800d25e:	f04f 0c0a 	mov.w	ip, #10
 800d262:	4620      	mov	r0, r4
 800d264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d268:	3a30      	subs	r2, #48	@ 0x30
 800d26a:	2a09      	cmp	r2, #9
 800d26c:	d903      	bls.n	800d276 <_svfiprintf_r+0x1a6>
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d0c6      	beq.n	800d200 <_svfiprintf_r+0x130>
 800d272:	9105      	str	r1, [sp, #20]
 800d274:	e7c4      	b.n	800d200 <_svfiprintf_r+0x130>
 800d276:	fb0c 2101 	mla	r1, ip, r1, r2
 800d27a:	4604      	mov	r4, r0
 800d27c:	2301      	movs	r3, #1
 800d27e:	e7f0      	b.n	800d262 <_svfiprintf_r+0x192>
 800d280:	ab03      	add	r3, sp, #12
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	462a      	mov	r2, r5
 800d286:	4b0e      	ldr	r3, [pc, #56]	@ (800d2c0 <_svfiprintf_r+0x1f0>)
 800d288:	a904      	add	r1, sp, #16
 800d28a:	4638      	mov	r0, r7
 800d28c:	f3af 8000 	nop.w
 800d290:	1c42      	adds	r2, r0, #1
 800d292:	4606      	mov	r6, r0
 800d294:	d1d6      	bne.n	800d244 <_svfiprintf_r+0x174>
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	065b      	lsls	r3, r3, #25
 800d29a:	f53f af2d 	bmi.w	800d0f8 <_svfiprintf_r+0x28>
 800d29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a0:	e72c      	b.n	800d0fc <_svfiprintf_r+0x2c>
 800d2a2:	ab03      	add	r3, sp, #12
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	462a      	mov	r2, r5
 800d2a8:	4b05      	ldr	r3, [pc, #20]	@ (800d2c0 <_svfiprintf_r+0x1f0>)
 800d2aa:	a904      	add	r1, sp, #16
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f000 f879 	bl	800d3a4 <_printf_i>
 800d2b2:	e7ed      	b.n	800d290 <_svfiprintf_r+0x1c0>
 800d2b4:	0800dc2c 	.word	0x0800dc2c
 800d2b8:	0800dc36 	.word	0x0800dc36
 800d2bc:	00000000 	.word	0x00000000
 800d2c0:	0800d019 	.word	0x0800d019
 800d2c4:	0800dc32 	.word	0x0800dc32

0800d2c8 <_printf_common>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	4698      	mov	r8, r3
 800d2d0:	688a      	ldr	r2, [r1, #8]
 800d2d2:	690b      	ldr	r3, [r1, #16]
 800d2d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	bfb8      	it	lt
 800d2dc:	4613      	movlt	r3, r2
 800d2de:	6033      	str	r3, [r6, #0]
 800d2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	b10a      	cbz	r2, 800d2ee <_printf_common+0x26>
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	6033      	str	r3, [r6, #0]
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	0699      	lsls	r1, r3, #26
 800d2f2:	bf42      	ittt	mi
 800d2f4:	6833      	ldrmi	r3, [r6, #0]
 800d2f6:	3302      	addmi	r3, #2
 800d2f8:	6033      	strmi	r3, [r6, #0]
 800d2fa:	6825      	ldr	r5, [r4, #0]
 800d2fc:	f015 0506 	ands.w	r5, r5, #6
 800d300:	d106      	bne.n	800d310 <_printf_common+0x48>
 800d302:	f104 0a19 	add.w	sl, r4, #25
 800d306:	68e3      	ldr	r3, [r4, #12]
 800d308:	6832      	ldr	r2, [r6, #0]
 800d30a:	1a9b      	subs	r3, r3, r2
 800d30c:	42ab      	cmp	r3, r5
 800d30e:	dc26      	bgt.n	800d35e <_printf_common+0x96>
 800d310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d314:	6822      	ldr	r2, [r4, #0]
 800d316:	3b00      	subs	r3, #0
 800d318:	bf18      	it	ne
 800d31a:	2301      	movne	r3, #1
 800d31c:	0692      	lsls	r2, r2, #26
 800d31e:	d42b      	bmi.n	800d378 <_printf_common+0xb0>
 800d320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d324:	4641      	mov	r1, r8
 800d326:	4638      	mov	r0, r7
 800d328:	47c8      	blx	r9
 800d32a:	3001      	adds	r0, #1
 800d32c:	d01e      	beq.n	800d36c <_printf_common+0xa4>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	6922      	ldr	r2, [r4, #16]
 800d332:	f003 0306 	and.w	r3, r3, #6
 800d336:	2b04      	cmp	r3, #4
 800d338:	bf02      	ittt	eq
 800d33a:	68e5      	ldreq	r5, [r4, #12]
 800d33c:	6833      	ldreq	r3, [r6, #0]
 800d33e:	1aed      	subeq	r5, r5, r3
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	bf0c      	ite	eq
 800d344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d348:	2500      	movne	r5, #0
 800d34a:	4293      	cmp	r3, r2
 800d34c:	bfc4      	itt	gt
 800d34e:	1a9b      	subgt	r3, r3, r2
 800d350:	18ed      	addgt	r5, r5, r3
 800d352:	2600      	movs	r6, #0
 800d354:	341a      	adds	r4, #26
 800d356:	42b5      	cmp	r5, r6
 800d358:	d11a      	bne.n	800d390 <_printf_common+0xc8>
 800d35a:	2000      	movs	r0, #0
 800d35c:	e008      	b.n	800d370 <_printf_common+0xa8>
 800d35e:	2301      	movs	r3, #1
 800d360:	4652      	mov	r2, sl
 800d362:	4641      	mov	r1, r8
 800d364:	4638      	mov	r0, r7
 800d366:	47c8      	blx	r9
 800d368:	3001      	adds	r0, #1
 800d36a:	d103      	bne.n	800d374 <_printf_common+0xac>
 800d36c:	f04f 30ff 	mov.w	r0, #4294967295
 800d370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d374:	3501      	adds	r5, #1
 800d376:	e7c6      	b.n	800d306 <_printf_common+0x3e>
 800d378:	18e1      	adds	r1, r4, r3
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	2030      	movs	r0, #48	@ 0x30
 800d37e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d382:	4422      	add	r2, r4
 800d384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d38c:	3302      	adds	r3, #2
 800d38e:	e7c7      	b.n	800d320 <_printf_common+0x58>
 800d390:	2301      	movs	r3, #1
 800d392:	4622      	mov	r2, r4
 800d394:	4641      	mov	r1, r8
 800d396:	4638      	mov	r0, r7
 800d398:	47c8      	blx	r9
 800d39a:	3001      	adds	r0, #1
 800d39c:	d0e6      	beq.n	800d36c <_printf_common+0xa4>
 800d39e:	3601      	adds	r6, #1
 800d3a0:	e7d9      	b.n	800d356 <_printf_common+0x8e>
	...

0800d3a4 <_printf_i>:
 800d3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a8:	7e0f      	ldrb	r7, [r1, #24]
 800d3aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3ac:	2f78      	cmp	r7, #120	@ 0x78
 800d3ae:	4691      	mov	r9, r2
 800d3b0:	4680      	mov	r8, r0
 800d3b2:	460c      	mov	r4, r1
 800d3b4:	469a      	mov	sl, r3
 800d3b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3ba:	d807      	bhi.n	800d3cc <_printf_i+0x28>
 800d3bc:	2f62      	cmp	r7, #98	@ 0x62
 800d3be:	d80a      	bhi.n	800d3d6 <_printf_i+0x32>
 800d3c0:	2f00      	cmp	r7, #0
 800d3c2:	f000 80d2 	beq.w	800d56a <_printf_i+0x1c6>
 800d3c6:	2f58      	cmp	r7, #88	@ 0x58
 800d3c8:	f000 80b9 	beq.w	800d53e <_printf_i+0x19a>
 800d3cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3d4:	e03a      	b.n	800d44c <_printf_i+0xa8>
 800d3d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3da:	2b15      	cmp	r3, #21
 800d3dc:	d8f6      	bhi.n	800d3cc <_printf_i+0x28>
 800d3de:	a101      	add	r1, pc, #4	@ (adr r1, 800d3e4 <_printf_i+0x40>)
 800d3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3e4:	0800d43d 	.word	0x0800d43d
 800d3e8:	0800d451 	.word	0x0800d451
 800d3ec:	0800d3cd 	.word	0x0800d3cd
 800d3f0:	0800d3cd 	.word	0x0800d3cd
 800d3f4:	0800d3cd 	.word	0x0800d3cd
 800d3f8:	0800d3cd 	.word	0x0800d3cd
 800d3fc:	0800d451 	.word	0x0800d451
 800d400:	0800d3cd 	.word	0x0800d3cd
 800d404:	0800d3cd 	.word	0x0800d3cd
 800d408:	0800d3cd 	.word	0x0800d3cd
 800d40c:	0800d3cd 	.word	0x0800d3cd
 800d410:	0800d551 	.word	0x0800d551
 800d414:	0800d47b 	.word	0x0800d47b
 800d418:	0800d50b 	.word	0x0800d50b
 800d41c:	0800d3cd 	.word	0x0800d3cd
 800d420:	0800d3cd 	.word	0x0800d3cd
 800d424:	0800d573 	.word	0x0800d573
 800d428:	0800d3cd 	.word	0x0800d3cd
 800d42c:	0800d47b 	.word	0x0800d47b
 800d430:	0800d3cd 	.word	0x0800d3cd
 800d434:	0800d3cd 	.word	0x0800d3cd
 800d438:	0800d513 	.word	0x0800d513
 800d43c:	6833      	ldr	r3, [r6, #0]
 800d43e:	1d1a      	adds	r2, r3, #4
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6032      	str	r2, [r6, #0]
 800d444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d44c:	2301      	movs	r3, #1
 800d44e:	e09d      	b.n	800d58c <_printf_i+0x1e8>
 800d450:	6833      	ldr	r3, [r6, #0]
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	1d19      	adds	r1, r3, #4
 800d456:	6031      	str	r1, [r6, #0]
 800d458:	0606      	lsls	r6, r0, #24
 800d45a:	d501      	bpl.n	800d460 <_printf_i+0xbc>
 800d45c:	681d      	ldr	r5, [r3, #0]
 800d45e:	e003      	b.n	800d468 <_printf_i+0xc4>
 800d460:	0645      	lsls	r5, r0, #25
 800d462:	d5fb      	bpl.n	800d45c <_printf_i+0xb8>
 800d464:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d468:	2d00      	cmp	r5, #0
 800d46a:	da03      	bge.n	800d474 <_printf_i+0xd0>
 800d46c:	232d      	movs	r3, #45	@ 0x2d
 800d46e:	426d      	negs	r5, r5
 800d470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d474:	4859      	ldr	r0, [pc, #356]	@ (800d5dc <_printf_i+0x238>)
 800d476:	230a      	movs	r3, #10
 800d478:	e011      	b.n	800d49e <_printf_i+0xfa>
 800d47a:	6821      	ldr	r1, [r4, #0]
 800d47c:	6833      	ldr	r3, [r6, #0]
 800d47e:	0608      	lsls	r0, r1, #24
 800d480:	f853 5b04 	ldr.w	r5, [r3], #4
 800d484:	d402      	bmi.n	800d48c <_printf_i+0xe8>
 800d486:	0649      	lsls	r1, r1, #25
 800d488:	bf48      	it	mi
 800d48a:	b2ad      	uxthmi	r5, r5
 800d48c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d48e:	4853      	ldr	r0, [pc, #332]	@ (800d5dc <_printf_i+0x238>)
 800d490:	6033      	str	r3, [r6, #0]
 800d492:	bf14      	ite	ne
 800d494:	230a      	movne	r3, #10
 800d496:	2308      	moveq	r3, #8
 800d498:	2100      	movs	r1, #0
 800d49a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d49e:	6866      	ldr	r6, [r4, #4]
 800d4a0:	60a6      	str	r6, [r4, #8]
 800d4a2:	2e00      	cmp	r6, #0
 800d4a4:	bfa2      	ittt	ge
 800d4a6:	6821      	ldrge	r1, [r4, #0]
 800d4a8:	f021 0104 	bicge.w	r1, r1, #4
 800d4ac:	6021      	strge	r1, [r4, #0]
 800d4ae:	b90d      	cbnz	r5, 800d4b4 <_printf_i+0x110>
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	d04b      	beq.n	800d54c <_printf_i+0x1a8>
 800d4b4:	4616      	mov	r6, r2
 800d4b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4ba:	fb03 5711 	mls	r7, r3, r1, r5
 800d4be:	5dc7      	ldrb	r7, [r0, r7]
 800d4c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4c4:	462f      	mov	r7, r5
 800d4c6:	42bb      	cmp	r3, r7
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	d9f4      	bls.n	800d4b6 <_printf_i+0x112>
 800d4cc:	2b08      	cmp	r3, #8
 800d4ce:	d10b      	bne.n	800d4e8 <_printf_i+0x144>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	07df      	lsls	r7, r3, #31
 800d4d4:	d508      	bpl.n	800d4e8 <_printf_i+0x144>
 800d4d6:	6923      	ldr	r3, [r4, #16]
 800d4d8:	6861      	ldr	r1, [r4, #4]
 800d4da:	4299      	cmp	r1, r3
 800d4dc:	bfde      	ittt	le
 800d4de:	2330      	movle	r3, #48	@ 0x30
 800d4e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4e8:	1b92      	subs	r2, r2, r6
 800d4ea:	6122      	str	r2, [r4, #16]
 800d4ec:	f8cd a000 	str.w	sl, [sp]
 800d4f0:	464b      	mov	r3, r9
 800d4f2:	aa03      	add	r2, sp, #12
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f7ff fee6 	bl	800d2c8 <_printf_common>
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	d14a      	bne.n	800d596 <_printf_i+0x1f2>
 800d500:	f04f 30ff 	mov.w	r0, #4294967295
 800d504:	b004      	add	sp, #16
 800d506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	f043 0320 	orr.w	r3, r3, #32
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	4833      	ldr	r0, [pc, #204]	@ (800d5e0 <_printf_i+0x23c>)
 800d514:	2778      	movs	r7, #120	@ 0x78
 800d516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	6831      	ldr	r1, [r6, #0]
 800d51e:	061f      	lsls	r7, r3, #24
 800d520:	f851 5b04 	ldr.w	r5, [r1], #4
 800d524:	d402      	bmi.n	800d52c <_printf_i+0x188>
 800d526:	065f      	lsls	r7, r3, #25
 800d528:	bf48      	it	mi
 800d52a:	b2ad      	uxthmi	r5, r5
 800d52c:	6031      	str	r1, [r6, #0]
 800d52e:	07d9      	lsls	r1, r3, #31
 800d530:	bf44      	itt	mi
 800d532:	f043 0320 	orrmi.w	r3, r3, #32
 800d536:	6023      	strmi	r3, [r4, #0]
 800d538:	b11d      	cbz	r5, 800d542 <_printf_i+0x19e>
 800d53a:	2310      	movs	r3, #16
 800d53c:	e7ac      	b.n	800d498 <_printf_i+0xf4>
 800d53e:	4827      	ldr	r0, [pc, #156]	@ (800d5dc <_printf_i+0x238>)
 800d540:	e7e9      	b.n	800d516 <_printf_i+0x172>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	f023 0320 	bic.w	r3, r3, #32
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	e7f6      	b.n	800d53a <_printf_i+0x196>
 800d54c:	4616      	mov	r6, r2
 800d54e:	e7bd      	b.n	800d4cc <_printf_i+0x128>
 800d550:	6833      	ldr	r3, [r6, #0]
 800d552:	6825      	ldr	r5, [r4, #0]
 800d554:	6961      	ldr	r1, [r4, #20]
 800d556:	1d18      	adds	r0, r3, #4
 800d558:	6030      	str	r0, [r6, #0]
 800d55a:	062e      	lsls	r6, r5, #24
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	d501      	bpl.n	800d564 <_printf_i+0x1c0>
 800d560:	6019      	str	r1, [r3, #0]
 800d562:	e002      	b.n	800d56a <_printf_i+0x1c6>
 800d564:	0668      	lsls	r0, r5, #25
 800d566:	d5fb      	bpl.n	800d560 <_printf_i+0x1bc>
 800d568:	8019      	strh	r1, [r3, #0]
 800d56a:	2300      	movs	r3, #0
 800d56c:	6123      	str	r3, [r4, #16]
 800d56e:	4616      	mov	r6, r2
 800d570:	e7bc      	b.n	800d4ec <_printf_i+0x148>
 800d572:	6833      	ldr	r3, [r6, #0]
 800d574:	1d1a      	adds	r2, r3, #4
 800d576:	6032      	str	r2, [r6, #0]
 800d578:	681e      	ldr	r6, [r3, #0]
 800d57a:	6862      	ldr	r2, [r4, #4]
 800d57c:	2100      	movs	r1, #0
 800d57e:	4630      	mov	r0, r6
 800d580:	f7f2 fe4e 	bl	8000220 <memchr>
 800d584:	b108      	cbz	r0, 800d58a <_printf_i+0x1e6>
 800d586:	1b80      	subs	r0, r0, r6
 800d588:	6060      	str	r0, [r4, #4]
 800d58a:	6863      	ldr	r3, [r4, #4]
 800d58c:	6123      	str	r3, [r4, #16]
 800d58e:	2300      	movs	r3, #0
 800d590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d594:	e7aa      	b.n	800d4ec <_printf_i+0x148>
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	4632      	mov	r2, r6
 800d59a:	4649      	mov	r1, r9
 800d59c:	4640      	mov	r0, r8
 800d59e:	47d0      	blx	sl
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d0ad      	beq.n	800d500 <_printf_i+0x15c>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	079b      	lsls	r3, r3, #30
 800d5a8:	d413      	bmi.n	800d5d2 <_printf_i+0x22e>
 800d5aa:	68e0      	ldr	r0, [r4, #12]
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	4298      	cmp	r0, r3
 800d5b0:	bfb8      	it	lt
 800d5b2:	4618      	movlt	r0, r3
 800d5b4:	e7a6      	b.n	800d504 <_printf_i+0x160>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	4632      	mov	r2, r6
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	4640      	mov	r0, r8
 800d5be:	47d0      	blx	sl
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d09d      	beq.n	800d500 <_printf_i+0x15c>
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	68e3      	ldr	r3, [r4, #12]
 800d5c8:	9903      	ldr	r1, [sp, #12]
 800d5ca:	1a5b      	subs	r3, r3, r1
 800d5cc:	42ab      	cmp	r3, r5
 800d5ce:	dcf2      	bgt.n	800d5b6 <_printf_i+0x212>
 800d5d0:	e7eb      	b.n	800d5aa <_printf_i+0x206>
 800d5d2:	2500      	movs	r5, #0
 800d5d4:	f104 0619 	add.w	r6, r4, #25
 800d5d8:	e7f5      	b.n	800d5c6 <_printf_i+0x222>
 800d5da:	bf00      	nop
 800d5dc:	0800dc3d 	.word	0x0800dc3d
 800d5e0:	0800dc4e 	.word	0x0800dc4e

0800d5e4 <memmove>:
 800d5e4:	4288      	cmp	r0, r1
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	eb01 0402 	add.w	r4, r1, r2
 800d5ec:	d902      	bls.n	800d5f4 <memmove+0x10>
 800d5ee:	4284      	cmp	r4, r0
 800d5f0:	4623      	mov	r3, r4
 800d5f2:	d807      	bhi.n	800d604 <memmove+0x20>
 800d5f4:	1e43      	subs	r3, r0, #1
 800d5f6:	42a1      	cmp	r1, r4
 800d5f8:	d008      	beq.n	800d60c <memmove+0x28>
 800d5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d602:	e7f8      	b.n	800d5f6 <memmove+0x12>
 800d604:	4402      	add	r2, r0
 800d606:	4601      	mov	r1, r0
 800d608:	428a      	cmp	r2, r1
 800d60a:	d100      	bne.n	800d60e <memmove+0x2a>
 800d60c:	bd10      	pop	{r4, pc}
 800d60e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d616:	e7f7      	b.n	800d608 <memmove+0x24>

0800d618 <_sbrk_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d06      	ldr	r5, [pc, #24]	@ (800d634 <_sbrk_r+0x1c>)
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	4608      	mov	r0, r1
 800d622:	602b      	str	r3, [r5, #0]
 800d624:	f7f8 fed2 	bl	80063cc <_sbrk>
 800d628:	1c43      	adds	r3, r0, #1
 800d62a:	d102      	bne.n	800d632 <_sbrk_r+0x1a>
 800d62c:	682b      	ldr	r3, [r5, #0]
 800d62e:	b103      	cbz	r3, 800d632 <_sbrk_r+0x1a>
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	bd38      	pop	{r3, r4, r5, pc}
 800d634:	2001ceb4 	.word	0x2001ceb4

0800d638 <memcpy>:
 800d638:	440a      	add	r2, r1
 800d63a:	4291      	cmp	r1, r2
 800d63c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d640:	d100      	bne.n	800d644 <memcpy+0xc>
 800d642:	4770      	bx	lr
 800d644:	b510      	push	{r4, lr}
 800d646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d64a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d64e:	4291      	cmp	r1, r2
 800d650:	d1f9      	bne.n	800d646 <memcpy+0xe>
 800d652:	bd10      	pop	{r4, pc}

0800d654 <_realloc_r>:
 800d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d658:	4680      	mov	r8, r0
 800d65a:	4615      	mov	r5, r2
 800d65c:	460c      	mov	r4, r1
 800d65e:	b921      	cbnz	r1, 800d66a <_realloc_r+0x16>
 800d660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d664:	4611      	mov	r1, r2
 800d666:	f7ff bc4b 	b.w	800cf00 <_malloc_r>
 800d66a:	b92a      	cbnz	r2, 800d678 <_realloc_r+0x24>
 800d66c:	f7ff fbdc 	bl	800ce28 <_free_r>
 800d670:	2400      	movs	r4, #0
 800d672:	4620      	mov	r0, r4
 800d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d678:	f000 f81a 	bl	800d6b0 <_malloc_usable_size_r>
 800d67c:	4285      	cmp	r5, r0
 800d67e:	4606      	mov	r6, r0
 800d680:	d802      	bhi.n	800d688 <_realloc_r+0x34>
 800d682:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d686:	d8f4      	bhi.n	800d672 <_realloc_r+0x1e>
 800d688:	4629      	mov	r1, r5
 800d68a:	4640      	mov	r0, r8
 800d68c:	f7ff fc38 	bl	800cf00 <_malloc_r>
 800d690:	4607      	mov	r7, r0
 800d692:	2800      	cmp	r0, #0
 800d694:	d0ec      	beq.n	800d670 <_realloc_r+0x1c>
 800d696:	42b5      	cmp	r5, r6
 800d698:	462a      	mov	r2, r5
 800d69a:	4621      	mov	r1, r4
 800d69c:	bf28      	it	cs
 800d69e:	4632      	movcs	r2, r6
 800d6a0:	f7ff ffca 	bl	800d638 <memcpy>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	f7ff fbbe 	bl	800ce28 <_free_r>
 800d6ac:	463c      	mov	r4, r7
 800d6ae:	e7e0      	b.n	800d672 <_realloc_r+0x1e>

0800d6b0 <_malloc_usable_size_r>:
 800d6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b4:	1f18      	subs	r0, r3, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfbc      	itt	lt
 800d6ba:	580b      	ldrlt	r3, [r1, r0]
 800d6bc:	18c0      	addlt	r0, r0, r3
 800d6be:	4770      	bx	lr

0800d6c0 <_init>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	bf00      	nop
 800d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c6:	bc08      	pop	{r3}
 800d6c8:	469e      	mov	lr, r3
 800d6ca:	4770      	bx	lr

0800d6cc <_fini>:
 800d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ce:	bf00      	nop
 800d6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6d2:	bc08      	pop	{r3}
 800d6d4:	469e      	mov	lr, r3
 800d6d6:	4770      	bx	lr
