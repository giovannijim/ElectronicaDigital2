
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b7c  08003b7c  00004b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b9c  08003b9c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ba4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003bb0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003bb0  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3bc  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d46  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00012140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000780  00000000  00000000  00012af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002072f  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cce5  00000000  00000000  0003399f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbcd3  00000000  00000000  00040684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000275c  00000000  00000000  0010c39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003b64 	.word	0x08003b64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003b64 	.word	0x08003b64

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2101      	movs	r1, #1
 80004fc:	4878      	ldr	r0, [pc, #480]	@ (80006e0 <LCD_Init+0x1ec>)
 80004fe:	f001 fd8d 	bl	800201c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000502:	2201      	movs	r2, #1
 8000504:	2113      	movs	r1, #19
 8000506:	4877      	ldr	r0, [pc, #476]	@ (80006e4 <LCD_Init+0x1f0>)
 8000508:	f001 fd88 	bl	800201c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2102      	movs	r1, #2
 8000510:	4875      	ldr	r0, [pc, #468]	@ (80006e8 <LCD_Init+0x1f4>)
 8000512:	f001 fd83 	bl	800201c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000516:	2005      	movs	r0, #5
 8000518:	f001 fa24 	bl	8001964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	4871      	ldr	r0, [pc, #452]	@ (80006e8 <LCD_Init+0x1f4>)
 8000522:	f001 fd7b 	bl	800201c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000526:	2014      	movs	r0, #20
 8000528:	f001 fa1c 	bl	8001964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2102      	movs	r1, #2
 8000530:	486d      	ldr	r0, [pc, #436]	@ (80006e8 <LCD_Init+0x1f4>)
 8000532:	f001 fd73 	bl	800201c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000536:	2096      	movs	r0, #150	@ 0x96
 8000538:	f001 fa14 	bl	8001964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2101      	movs	r1, #1
 8000540:	4867      	ldr	r0, [pc, #412]	@ (80006e0 <LCD_Init+0x1ec>)
 8000542:	f001 fd6b 	bl	800201c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000546:	20e9      	movs	r0, #233	@ 0xe9
 8000548:	f000 f8d0 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x20);
 800054c:	2020      	movs	r0, #32
 800054e:	f000 f973 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000552:	2011      	movs	r0, #17
 8000554:	f000 f8ca 	bl	80006ec <LCD_CMD>
	HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f001 fa03 	bl	8001964 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800055e:	20d1      	movs	r0, #209	@ 0xd1
 8000560:	f000 f8c4 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f967 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x71);
 800056a:	2071      	movs	r0, #113	@ 0x71
 800056c:	f000 f964 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x19);
 8000570:	2019      	movs	r0, #25
 8000572:	f000 f961 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000576:	20d0      	movs	r0, #208	@ 0xd0
 8000578:	f000 f8b8 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x07);
 800057c:	2007      	movs	r0, #7
 800057e:	f000 f95b 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 8000582:	2001      	movs	r0, #1
 8000584:	f000 f958 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x08);
 8000588:	2008      	movs	r0, #8
 800058a:	f000 f955 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800058e:	2036      	movs	r0, #54	@ 0x36
 8000590:	f000 f8ac 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000594:	20e8      	movs	r0, #232	@ 0xe8
 8000596:	f000 f94f 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 800059a:	203a      	movs	r0, #58	@ 0x3a
 800059c:	f000 f8a6 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 f949 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005a6:	20c1      	movs	r0, #193	@ 0xc1
 80005a8:	f000 f8a0 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x10);
 80005ac:	2010      	movs	r0, #16
 80005ae:	f000 f943 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x10);
 80005b2:	2010      	movs	r0, #16
 80005b4:	f000 f940 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x02);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f000 f93d 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x02);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 f93a 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80005c4:	20c0      	movs	r0, #192	@ 0xc0
 80005c6:	f000 f891 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f934 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x35);
 80005d0:	2035      	movs	r0, #53	@ 0x35
 80005d2:	f000 f931 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f92e 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f92b 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f928 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x02);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f000 f925 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80005ee:	20c5      	movs	r0, #197	@ 0xc5
 80005f0:	f000 f87c 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80005f4:	2004      	movs	r0, #4
 80005f6:	f000 f91f 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80005fa:	20d2      	movs	r0, #210	@ 0xd2
 80005fc:	f000 f876 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x01);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 f919 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x44);
 8000606:	2044      	movs	r0, #68	@ 0x44
 8000608:	f000 f916 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 800060c:	20c8      	movs	r0, #200	@ 0xc8
 800060e:	f000 f86d 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x04);
 8000612:	2004      	movs	r0, #4
 8000614:	f000 f910 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x67);
 8000618:	2067      	movs	r0, #103	@ 0x67
 800061a:	f000 f90d 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x35);
 800061e:	2035      	movs	r0, #53	@ 0x35
 8000620:	f000 f90a 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x04);
 8000624:	2004      	movs	r0, #4
 8000626:	f000 f907 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x08);
 800062a:	2008      	movs	r0, #8
 800062c:	f000 f904 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x06);
 8000630:	2006      	movs	r0, #6
 8000632:	f000 f901 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x24);
 8000636:	2024      	movs	r0, #36	@ 0x24
 8000638:	f000 f8fe 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f8fb 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x37);
 8000642:	2037      	movs	r0, #55	@ 0x37
 8000644:	f000 f8f8 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x40);
 8000648:	2040      	movs	r0, #64	@ 0x40
 800064a:	f000 f8f5 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x03);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f8f2 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x10);
 8000654:	2010      	movs	r0, #16
 8000656:	f000 f8ef 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x08);
 800065a:	2008      	movs	r0, #8
 800065c:	f000 f8ec 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x80);
 8000660:	2080      	movs	r0, #128	@ 0x80
 8000662:	f000 f8e9 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f8e6 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800066c:	202a      	movs	r0, #42	@ 0x2a
 800066e:	f000 f83d 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f8e0 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f8dd 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f8da 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x3F);
 8000684:	203f      	movs	r0, #63	@ 0x3f
 8000686:	f000 f8d7 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800068a:	202b      	movs	r0, #43	@ 0x2b
 800068c:	f000 f82e 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f8d1 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f8ce 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f8cb 	bl	8000838 <LCD_DATA>
	LCD_DATA(0xE0);
 80006a2:	20e0      	movs	r0, #224	@ 0xe0
 80006a4:	f000 f8c8 	bl	8000838 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006a8:	2029      	movs	r0, #41	@ 0x29
 80006aa:	f000 f81f 	bl	80006ec <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006ae:	202c      	movs	r0, #44	@ 0x2c
 80006b0:	f000 f81c 	bl	80006ec <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006b4:	2020      	movs	r0, #32
 80006b6:	f000 f819 	bl	80006ec <LCD_CMD>
	HAL_Delay(120);
 80006ba:	2078      	movs	r0, #120	@ 0x78
 80006bc:	f001 f952 	bl	8001964 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006c0:	2011      	movs	r0, #17
 80006c2:	f000 f813 	bl	80006ec <LCD_CMD>
	HAL_Delay(120);
 80006c6:	2078      	movs	r0, #120	@ 0x78
 80006c8:	f001 f94c 	bl	8001964 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80006cc:	2029      	movs	r0, #41	@ 0x29
 80006ce:	f000 f80d 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <LCD_Init+0x1ec>)
 80006d8:	f001 fca0 	bl	800201c <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020800 	.word	0x40020800

080006ec <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	484c      	ldr	r0, [pc, #304]	@ (800082c <LCD_CMD+0x140>)
 80006fc:	f001 fc8e 	bl	800201c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2102      	movs	r1, #2
 8000704:	4849      	ldr	r0, [pc, #292]	@ (800082c <LCD_CMD+0x140>)
 8000706:	f001 fc89 	bl	800201c <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071a:	4844      	ldr	r0, [pc, #272]	@ (800082c <LCD_CMD+0x140>)
 800071c:	f001 fc7e 	bl	800201c <HAL_GPIO_WritePin>
 8000720:	e005      	b.n	800072e <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000728:	4840      	ldr	r0, [pc, #256]	@ (800082c <LCD_CMD+0x140>)
 800072a:	f001 fc77 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d005      	beq.n	8000744 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	483c      	ldr	r0, [pc, #240]	@ (8000830 <LCD_CMD+0x144>)
 800073e:	f001 fc6d 	bl	800201c <HAL_GPIO_WritePin>
 8000742:	e004      	b.n	800074e <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2180      	movs	r1, #128	@ 0x80
 8000748:	4839      	ldr	r0, [pc, #228]	@ (8000830 <LCD_CMD+0x144>)
 800074a:	f001 fc67 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	2b00      	cmp	r3, #0
 8000756:	d006      	beq.n	8000766 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075e:	4833      	ldr	r0, [pc, #204]	@ (800082c <LCD_CMD+0x140>)
 8000760:	f001 fc5c 	bl	800201c <HAL_GPIO_WritePin>
 8000764:	e005      	b.n	8000772 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076c:	482f      	ldr	r0, [pc, #188]	@ (800082c <LCD_CMD+0x140>)
 800076e:	f001 fc55 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d005      	beq.n	8000788 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	482c      	ldr	r0, [pc, #176]	@ (8000834 <LCD_CMD+0x148>)
 8000782:	f001 fc4b 	bl	800201c <HAL_GPIO_WritePin>
 8000786:	e004      	b.n	8000792 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4829      	ldr	r0, [pc, #164]	@ (8000834 <LCD_CMD+0x148>)
 800078e:	f001 fc45 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2120      	movs	r1, #32
 80007a0:	4824      	ldr	r0, [pc, #144]	@ (8000834 <LCD_CMD+0x148>)
 80007a2:	f001 fc3b 	bl	800201c <HAL_GPIO_WritePin>
 80007a6:	e004      	b.n	80007b2 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	4821      	ldr	r0, [pc, #132]	@ (8000834 <LCD_CMD+0x148>)
 80007ae:	f001 fc35 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	481c      	ldr	r0, [pc, #112]	@ (8000834 <LCD_CMD+0x148>)
 80007c2:	f001 fc2b 	bl	800201c <HAL_GPIO_WritePin>
 80007c6:	e004      	b.n	80007d2 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2110      	movs	r1, #16
 80007cc:	4819      	ldr	r0, [pc, #100]	@ (8000834 <LCD_CMD+0x148>)
 80007ce:	f001 fc25 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e2:	4814      	ldr	r0, [pc, #80]	@ (8000834 <LCD_CMD+0x148>)
 80007e4:	f001 fc1a 	bl	800201c <HAL_GPIO_WritePin>
 80007e8:	e005      	b.n	80007f6 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f0:	4810      	ldr	r0, [pc, #64]	@ (8000834 <LCD_CMD+0x148>)
 80007f2:	f001 fc13 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da06      	bge.n	800080c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <LCD_CMD+0x140>)
 8000806:	f001 fc09 	bl	800201c <HAL_GPIO_WritePin>
 800080a:	e005      	b.n	8000818 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <LCD_CMD+0x140>)
 8000814:	f001 fc02 	bl	800201c <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2102      	movs	r1, #2
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <LCD_CMD+0x140>)
 800081e:	f001 fbfd 	bl	800201c <HAL_GPIO_WritePin>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020000 	.word	0x40020000
 8000830:	40020800 	.word	0x40020800
 8000834:	40020400 	.word	0x40020400

08000838 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2110      	movs	r1, #16
 8000846:	484c      	ldr	r0, [pc, #304]	@ (8000978 <LCD_DATA+0x140>)
 8000848:	f001 fbe8 	bl	800201c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2102      	movs	r1, #2
 8000850:	4849      	ldr	r0, [pc, #292]	@ (8000978 <LCD_DATA+0x140>)
 8000852:	f001 fbe3 	bl	800201c <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d006      	beq.n	800086e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000866:	4844      	ldr	r0, [pc, #272]	@ (8000978 <LCD_DATA+0x140>)
 8000868:	f001 fbd8 	bl	800201c <HAL_GPIO_WritePin>
 800086c:	e005      	b.n	800087a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	4840      	ldr	r0, [pc, #256]	@ (8000978 <LCD_DATA+0x140>)
 8000876:	f001 fbd1 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d005      	beq.n	8000890 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	483c      	ldr	r0, [pc, #240]	@ (800097c <LCD_DATA+0x144>)
 800088a:	f001 fbc7 	bl	800201c <HAL_GPIO_WritePin>
 800088e:	e004      	b.n	800089a <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	4839      	ldr	r0, [pc, #228]	@ (800097c <LCD_DATA+0x144>)
 8000896:	f001 fbc1 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d006      	beq.n	80008b2 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008aa:	4833      	ldr	r0, [pc, #204]	@ (8000978 <LCD_DATA+0x140>)
 80008ac:	f001 fbb6 	bl	800201c <HAL_GPIO_WritePin>
 80008b0:	e005      	b.n	80008be <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b8:	482f      	ldr	r0, [pc, #188]	@ (8000978 <LCD_DATA+0x140>)
 80008ba:	f001 fbaf 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d005      	beq.n	80008d4 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2108      	movs	r1, #8
 80008cc:	482c      	ldr	r0, [pc, #176]	@ (8000980 <LCD_DATA+0x148>)
 80008ce:	f001 fba5 	bl	800201c <HAL_GPIO_WritePin>
 80008d2:	e004      	b.n	80008de <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2108      	movs	r1, #8
 80008d8:	4829      	ldr	r0, [pc, #164]	@ (8000980 <LCD_DATA+0x148>)
 80008da:	f001 fb9f 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2120      	movs	r1, #32
 80008ec:	4824      	ldr	r0, [pc, #144]	@ (8000980 <LCD_DATA+0x148>)
 80008ee:	f001 fb95 	bl	800201c <HAL_GPIO_WritePin>
 80008f2:	e004      	b.n	80008fe <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2120      	movs	r1, #32
 80008f8:	4821      	ldr	r0, [pc, #132]	@ (8000980 <LCD_DATA+0x148>)
 80008fa:	f001 fb8f 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 0320 	and.w	r3, r3, #32
 8000904:	2b00      	cmp	r3, #0
 8000906:	d005      	beq.n	8000914 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	481c      	ldr	r0, [pc, #112]	@ (8000980 <LCD_DATA+0x148>)
 800090e:	f001 fb85 	bl	800201c <HAL_GPIO_WritePin>
 8000912:	e004      	b.n	800091e <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	4819      	ldr	r0, [pc, #100]	@ (8000980 <LCD_DATA+0x148>)
 800091a:	f001 fb7f 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <LCD_DATA+0x148>)
 8000930:	f001 fb74 	bl	800201c <HAL_GPIO_WritePin>
 8000934:	e005      	b.n	8000942 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093c:	4810      	ldr	r0, [pc, #64]	@ (8000980 <LCD_DATA+0x148>)
 800093e:	f001 fb6d 	bl	800201c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	da06      	bge.n	8000958 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <LCD_DATA+0x140>)
 8000952:	f001 fb63 	bl	800201c <HAL_GPIO_WritePin>
 8000956:	e005      	b.n	8000964 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <LCD_DATA+0x140>)
 8000960:	f001 fb5c 	bl	800201c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2102      	movs	r1, #2
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <LCD_DATA+0x140>)
 800096a:	f001 fb57 	bl	800201c <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020400 	.word	0x40020400

08000984 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000992:	202a      	movs	r0, #42	@ 0x2a
 8000994:	f7ff feaa 	bl	80006ec <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff4a 	bl	8000838 <LCD_DATA>
	LCD_DATA(x1);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff45 	bl	8000838 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff3f 	bl	8000838 <LCD_DATA>
	LCD_DATA(x2);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff3a 	bl	8000838 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80009c4:	202b      	movs	r0, #43	@ 0x2b
 80009c6:	f7ff fe91 	bl	80006ec <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff31 	bl	8000838 <LCD_DATA>
	LCD_DATA(y1);
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff2c 	bl	8000838 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff26 	bl	8000838 <LCD_DATA>
	LCD_DATA(y2);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff21 	bl	8000838 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 80009f6:	202c      	movs	r0, #44	@ 0x2c
 80009f8:	f7ff fe78 	bl	80006ec <LCD_CMD>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a0c:	202c      	movs	r0, #44	@ 0x2c
 8000a0e:	f7ff fe6d 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <LCD_Clear+0x80>)
 8000a18:	f001 fb00 	bl	800201c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <LCD_Clear+0x84>)
 8000a22:	f001 fafb 	bl	800201c <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a26:	23ef      	movs	r3, #239	@ 0xef
 8000a28:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ffa8 	bl	8000984 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e016      	b.n	8000a68 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	e00d      	b.n	8000a5c <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fef6 	bl	8000838 <LCD_DATA>
			LCD_DATA(c);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fef1 	bl	8000838 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2bef      	cmp	r3, #239	@ 0xef
 8000a60:	d9ee      	bls.n	8000a40 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a6e:	d3e4      	bcc.n	8000a3a <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <LCD_Clear+0x84>)
 8000a76:	f001 fad1 	bl	800201c <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400

08000a8c <V_line>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000a9a:	202c      	movs	r0, #44	@ 0x2c
 8000a9c:	f7ff fe26 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	4817      	ldr	r0, [pc, #92]	@ (8000b04 <V_line+0x78>)
 8000aa6:	f001 fab9 	bl	800201c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	4816      	ldr	r0, [pc, #88]	@ (8000b08 <V_line+0x7c>)
 8000ab0:	f001 fab4 	bl	800201c <HAL_GPIO_WritePin>
	l = l + y;
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff ff5e 	bl	8000984 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00d      	b.n	8000aea <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff feaf 	bl	8000838 <LCD_DATA>
		LCD_DATA(c);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff feaa 	bl	8000838 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d9ed      	bls.n	8000ace <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <V_line+0x7c>)
 8000af8:	f001 fa90 	bl	800201c <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400

08000b0c <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b1a:	202c      	movs	r0, #44	@ 0x2c
 8000b1c:	f7ff fde6 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	4824      	ldr	r0, [pc, #144]	@ (8000bb8 <FillRect+0xac>)
 8000b26:	f001 fa79 	bl	800201c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4823      	ldr	r0, [pc, #140]	@ (8000bbc <FillRect+0xb0>)
 8000b30:	f001 fa74 	bl	800201c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff ff18 	bl	8000984 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	fb02 f303 	mul.w	r3, r2, r3
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	e01a      	b.n	8000b9e <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	e010      	b.n	8000b90 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe5f 	bl	8000838 <LCD_DATA>
			LCD_DATA(c);
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fe5a 	bl	8000838 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	3b02      	subs	r3, #2
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8ea      	bhi.n	8000b6e <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d8e0      	bhi.n	8000b68 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <FillRect+0xb0>)
 8000bac:	f001 fa36 	bl	800201c <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <initEnemy1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Funciones Enemigo tipo 1
void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6a3a      	ldr	r2, [r7, #32]
 8000be4:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bea:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	615a      	str	r2, [r3, #20]

    // Dibujar el enemigo en pantalla
    FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	1ad0      	subs	r0, r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	1ad1      	subs	r1, r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f44f 047f 	mov.w	r4, #16711680	@ 0xff0000
 8000c16:	9400      	str	r4, [sp, #0]
 8000c18:	f7ff ff78 	bl	8000b0c <FillRect>
    FillRect(enemy->x , enemy->y, 1, 1, 0xFFFFFF);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6859      	ldr	r1, [r3, #4]
 8000c24:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f7ff ff6d 	bl	8000b0c <FillRect>
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd90      	pop	{r4, r7, pc}
	...

08000c3c <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction ){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	unsigned int enemyLeft = enemy->x - (enemy->width / 2);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	085b      	lsrs	r3, r3, #1
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	61fb      	str	r3, [r7, #28]
	unsigned int enemyRight = enemy->x + (enemy->width / 2);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	085b      	lsrs	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
	unsigned int enemyTop = enemy->y - (enemy->height / 2);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	085b      	lsrs	r3, r3, #1
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	617b      	str	r3, [r7, #20]
	unsigned int enemyBottom = enemy->y + (enemy->height / 2);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]

	// Verificar colisión con el enemigo basado en la dirección de movimiento
	    switch (player->direction) {
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d87e      	bhi.n	8000d86 <ColisionPlayer_e1+0x14a>
 8000c88:	a201      	add	r2, pc, #4	@ (adr r2, 8000c90 <ColisionPlayer_e1+0x54>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000cd7 	.word	0x08000cd7
 8000c98:	08000d0d 	.word	0x08000d0d
 8000c9c:	08000d43 	.word	0x08000d43
	        case 0: // Movimiento hacia arriba
	            if (player->y - player->speed < enemyBottom &&
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d963      	bls.n	8000d78 <ColisionPlayer_e1+0x13c>
	                player->x > enemyLeft &&
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	681b      	ldr	r3, [r3, #0]
	            if (player->y - player->speed < enemyBottom &&
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d25e      	bcs.n	8000d78 <ColisionPlayer_e1+0x13c>
	                player->x < enemyRight) {
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	681b      	ldr	r3, [r3, #0]
	                player->x > enemyLeft &&
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d959      	bls.n	8000d78 <ColisionPlayer_e1+0x13c>
	            	player->y -= player->speed;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	1ad2      	subs	r2, r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	605a      	str	r2, [r3, #4]
	                return 1;  // Colisión con el enemigo
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e057      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            }
	            break;
	        case 1: // Movimiento hacia abajo
	            if (player->y + player->speed > enemyTop &&
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d24a      	bcs.n	8000d7c <ColisionPlayer_e1+0x140>
	                player->x > enemyLeft &&
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	681b      	ldr	r3, [r3, #0]
	            if (player->y + player->speed > enemyTop &&
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d245      	bcs.n	8000d7c <ColisionPlayer_e1+0x140>
	                player->x < enemyRight) {
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	681b      	ldr	r3, [r3, #0]
	                player->x > enemyLeft &&
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d940      	bls.n	8000d7c <ColisionPlayer_e1+0x140>
	            	player->y += player->speed;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	441a      	add	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	605a      	str	r2, [r3, #4]
	                return 1;  // Colisión con el enemigo
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e03c      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            }
	            break;
	        case 2: // Movimiento hacia la izquierda
	            if (player->x - player->speed < enemyRight &&
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d931      	bls.n	8000d80 <ColisionPlayer_e1+0x144>
	                player->y > enemyTop &&
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	685b      	ldr	r3, [r3, #4]
	            if (player->x - player->speed < enemyRight &&
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d22c      	bcs.n	8000d80 <ColisionPlayer_e1+0x144>
	                player->y < enemyBottom) {
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	685b      	ldr	r3, [r3, #4]
	                player->y > enemyTop &&
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d927      	bls.n	8000d80 <ColisionPlayer_e1+0x144>
	            	player->x += player->speed;
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	441a      	add	r2, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	601a      	str	r2, [r3, #0]
	                return 1;  // Colisión con el enemigo
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e021      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            }
	            break;
	        case 3: // Movimiento hacia la derecha
	            if (player->x + player->speed > enemyLeft &&
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d218      	bcs.n	8000d84 <ColisionPlayer_e1+0x148>
	                player->y > enemyTop &&
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	685b      	ldr	r3, [r3, #4]
	            if (player->x + player->speed > enemyLeft &&
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d213      	bcs.n	8000d84 <ColisionPlayer_e1+0x148>
	                player->y < enemyBottom) {
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	685b      	ldr	r3, [r3, #4]
	                player->y > enemyTop &&
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d90e      	bls.n	8000d84 <ColisionPlayer_e1+0x148>
	            	player->x -= player->speed;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	1ad2      	subs	r2, r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	601a      	str	r2, [r3, #0]
	                return 1;  // Colisión con el enemigo
 8000d74:	2301      	movs	r3, #1
 8000d76:	e006      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            break;
 8000d78:	bf00      	nop
 8000d7a:	e004      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            break;
 8000d7c:	bf00      	nop
 8000d7e:	e002      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            break;
 8000d80:	bf00      	nop
 8000d82:	e000      	b.n	8000d86 <ColisionPlayer_e1+0x14a>
	            }
	            break;
 8000d84:	bf00      	nop
	    }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <initPlayer>:

    }
 */

//Funciones Player
void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight) {
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6a3a      	ldr	r2, [r7, #32]
 8000db8:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dbe:	611a      	str	r2, [r3, #16]
    player->life = life;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dc4:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	61da      	str	r2, [r3, #28]
    player->direction = 0;      // Dirección inicial (arriba)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitHeight = limitHeight;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28

    // Dibujar el jugador en pantalla
    FillRect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0xFFFB00);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	1ad0      	subs	r0, r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	085b      	lsrs	r3, r3, #1
 8000dfa:	1ad1      	subs	r1, r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4c08      	ldr	r4, [pc, #32]	@ (8000e28 <initPlayer+0x94>)
 8000e06:	9400      	str	r4, [sp, #0]
 8000e08:	f7ff fe80 	bl	8000b0c <FillRect>
    FillRect(player->x , player->y, 1, 1, 0x000000);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6859      	ldr	r1, [r3, #4]
 8000e14:	2300      	movs	r3, #0
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f7ff fe76 	bl	8000b0c <FillRect>
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	00fffb00 	.word	0x00fffb00

08000e2c <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	60bb      	str	r3, [r7, #8]

    // Calcular las nuevas coordenadas dependiendo de la dirección
    switch (direction) {
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d823      	bhi.n	8000e90 <playerCanMove+0x64>
 8000e48:	a201      	add	r2, pc, #4	@ (adr r2, 8000e50 <playerCanMove+0x24>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e61 	.word	0x08000e61
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000e79 	.word	0x08000e79
 8000e5c:	08000e85 	.word	0x08000e85
        case 0:  // Abajo
            futureY += player->speed;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4413      	add	r3, r2
 8000e68:	60bb      	str	r3, [r7, #8]
            break;
 8000e6a:	e011      	b.n	8000e90 <playerCanMove+0x64>
        case 1:  // Derecha
            futureX += player->speed;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
            break;
 8000e76:	e00b      	b.n	8000e90 <playerCanMove+0x64>
        case 2:  // Arriba
            futureY -= player->speed;
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	60bb      	str	r3, [r7, #8]
            break;
 8000e82:	e005      	b.n	8000e90 <playerCanMove+0x64>
        case 3:  // Izquierda
            futureX -= player->speed;
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	60fb      	str	r3, [r7, #12]
            break;
 8000e8e:	bf00      	nop
    }
    if (ColisionPlayer_e1(&e1_1, player, direction)){
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <playerCanMove+0xe0>)
 8000e98:	f7ff fed0 	bl	8000c3c <ColisionPlayer_e1>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <playerCanMove+0x7a>
    	return 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e02e      	b.n	8000f04 <playerCanMove+0xd8>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction)){
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4818      	ldr	r0, [pc, #96]	@ (8000f10 <playerCanMove+0xe4>)
 8000eae:	f7ff fec5 	bl	8000c3c <ColisionPlayer_e1>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <playerCanMove+0x90>
        	return 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e023      	b.n	8000f04 <playerCanMove+0xd8>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction)){
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <playerCanMove+0xe8>)
 8000ec4:	f7ff feba 	bl	8000c3c <ColisionPlayer_e1>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <playerCanMove+0xa6>
        	return 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e018      	b.n	8000f04 <playerCanMove+0xd8>
        }

    // Verificar colisiones con los bordes en base a la posición futura
    if (futureX <= 0) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	dc01      	bgt.n	8000edc <playerCanMove+0xb0>
        return 0;  // Colisión con el borde izquierdo
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e013      	b.n	8000f04 <playerCanMove+0xd8>
    }
    if (futureX >= player->limitWidth) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d801      	bhi.n	8000eea <playerCanMove+0xbe>
        return 0;  // Colisión con el borde derecho
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e00c      	b.n	8000f04 <playerCanMove+0xd8>
    }
    if (futureY  <= 0) {
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dc01      	bgt.n	8000ef4 <playerCanMove+0xc8>
        return 0;  // Colisión con el borde superior
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e007      	b.n	8000f04 <playerCanMove+0xd8>
    }
    if (futureY>= player->limitHeight) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d801      	bhi.n	8000f02 <playerCanMove+0xd6>
        return 0;  // Colisión con el borde inferior
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <playerCanMove+0xd8>
    }
    // No hay colisiones, se puede mover
    return 1;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000104 	.word	0x20000104
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	20000134 	.word	0x20000134

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fcaf 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f86d 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f937 	bl	8001198 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f2a:	f000 f8d5 	bl	80010d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f2e:	f000 f909 	bl	8001144 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8000f32:	f7ff fadf 	bl	80004f4 <LCD_Init>
	LCD_Clear(0x00);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fd64 	bl	8000a04 <LCD_Clear>

	//Fondo
	FillRect(0, 0, 319, 239, 0xFFFF);
 8000f3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	23ef      	movs	r3, #239	@ 0xef
 8000f44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fdde 	bl	8000b0c <FillRect>
	//FillRect(0, 0, 319, 206, 0x1911);

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	  // Activar bandera interrupcion
	  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	4924      	ldr	r1, [pc, #144]	@ (8000fe4 <main+0xcc>)
 8000f54:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <main+0xd0>)
 8000f56:	f001 feb6 	bl	8002cc6 <HAL_UART_Receive_IT>
	  modo=1;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <main+0xd4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
	  if (modo==1){
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <main+0xd4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d12f      	bne.n	8000fc8 <main+0xb0>
	    //Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 20, 20, 20, 3, 320, 240);
 8000f68:	23f0      	movs	r3, #240	@ 0xf0
 8000f6a:	9304      	str	r3, [sp, #16]
 8000f6c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	2303      	movs	r3, #3
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2314      	movs	r3, #20
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2314      	movs	r3, #20
 8000f80:	22c8      	movs	r2, #200	@ 0xc8
 8000f82:	21a0      	movs	r1, #160	@ 0xa0
 8000f84:	481a      	ldr	r0, [pc, #104]	@ (8000ff0 <main+0xd8>)
 8000f86:	f7ff ff05 	bl	8000d94 <initPlayer>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 50, 80, 20, 20, 3);
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2314      	movs	r3, #20
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2314      	movs	r3, #20
 8000f94:	2250      	movs	r2, #80	@ 0x50
 8000f96:	2132      	movs	r1, #50	@ 0x32
 8000f98:	4816      	ldr	r0, [pc, #88]	@ (8000ff4 <main+0xdc>)
 8000f9a:	f7ff fe11 	bl	8000bc0 <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 20, 20, 3);
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2314      	movs	r3, #20
 8000fa8:	2250      	movs	r2, #80	@ 0x50
 8000faa:	21a0      	movs	r1, #160	@ 0xa0
 8000fac:	4812      	ldr	r0, [pc, #72]	@ (8000ff8 <main+0xe0>)
 8000fae:	f7ff fe07 	bl	8000bc0 <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 270, 80, 20, 20, 3);}
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2314      	movs	r3, #20
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2314      	movs	r3, #20
 8000fbc:	2250      	movs	r2, #80	@ 0x50
 8000fbe:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000fc2:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <main+0xe4>)
 8000fc4:	f7ff fdfc 	bl	8000bc0 <initEnemy1>
	  if (modo==2){
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <main+0xd4>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d106      	bne.n	8000fde <main+0xc6>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	22f0      	movs	r2, #240	@ 0xf0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	20a0      	movs	r0, #160	@ 0xa0
 8000fd8:	f7ff fd58 	bl	8000a8c <V_line>
	  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	e7fd      	b.n	8000fde <main+0xc6>
 8000fe2:	bf00      	nop
 8000fe4:	200000c8 	.word	0x200000c8
 8000fe8:	20000080 	.word	0x20000080
 8000fec:	2000014c 	.word	0x2000014c
 8000ff0:	200000d4 	.word	0x200000d4
 8000ff4:	20000104 	.word	0x20000104
 8000ff8:	2000011c 	.word	0x2000011c
 8000ffc:	20000134 	.word	0x20000134

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	@ 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2234      	movs	r2, #52	@ 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fd7c 	bl	8003b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b29      	ldr	r3, [pc, #164]	@ (80010d0 <SystemClock_Config+0xd0>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	4a28      	ldr	r2, [pc, #160]	@ (80010d0 <SystemClock_Config+0xd0>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	@ 0x40
 8001034:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <SystemClock_Config+0xd0>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <SystemClock_Config+0xd4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <SystemClock_Config+0xd4>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <SystemClock_Config+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001074:	2308      	movs	r3, #8
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001078:	2350      	movs	r3, #80	@ 0x50
 800107a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f001 faa3 	bl	80025d8 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001098:	f000 fab6 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a0:	2302      	movs	r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2102      	movs	r1, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 ffc9 	bl	8002050 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010c4:	f000 faa0 	bl	8001608 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	@ 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_SPI1_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	@ (8001140 <MX_SPI1_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_SPI1_Init+0x64>)
 80010e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_SPI1_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_SPI1_Init+0x64>)
 8001104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_SPI1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_SPI1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_SPI1_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_SPI1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_SPI1_Init+0x64>)
 8001124:	220a      	movs	r2, #10
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_SPI1_Init+0x64>)
 800112a:	f001 fcf3 	bl	8002b14 <HAL_SPI_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001134:	f000 fa68 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000028 	.word	0x20000028
 8001140:	40013000 	.word	0x40013000

08001144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <MX_USART2_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_USART2_UART_Init+0x4c>)
 800117c:	f001 fd53 	bl	8002c26 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 fa3f 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000080 	.word	0x20000080
 8001194:	40004400 	.word	0x40004400

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a3a      	ldr	r2, [pc, #232]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a33      	ldr	r2, [pc, #204]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a2c      	ldr	r2, [pc, #176]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <MX_GPIO_Init+0x108>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <MX_GPIO_Init+0x108>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a25      	ldr	r2, [pc, #148]	@ (80012a0 <MX_GPIO_Init+0x108>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <MX_GPIO_Init+0x108>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2182      	movs	r1, #130	@ 0x82
 8001222:	4820      	ldr	r0, [pc, #128]	@ (80012a4 <MX_GPIO_Init+0x10c>)
 8001224:	f000 fefa 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001228:	2200      	movs	r2, #0
 800122a:	f240 7113 	movw	r1, #1811	@ 0x713
 800122e:	481e      	ldr	r0, [pc, #120]	@ (80012a8 <MX_GPIO_Init+0x110>)
 8001230:	f000 fef4 	bl	800201c <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001234:	2200      	movs	r2, #0
 8001236:	f240 4179 	movw	r1, #1145	@ 0x479
 800123a:	481c      	ldr	r0, [pc, #112]	@ (80012ac <MX_GPIO_Init+0x114>)
 800123c:	f000 feee 	bl	800201c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001240:	2382      	movs	r3, #130	@ 0x82
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <MX_GPIO_Init+0x10c>)
 8001258:	f000 fd4c 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800125c:	f240 7313 	movw	r3, #1811	@ 0x713
 8001260:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126a:	2302      	movs	r3, #2
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <MX_GPIO_Init+0x110>)
 8001276:	f000 fd3d 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800127a:	f240 4379 	movw	r3, #1145	@ 0x479
 800127e:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_GPIO_Init+0x114>)
 8001294:	f000 fd2e 	bl	8001cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	6078      	str	r0, [r7, #4]
	if(buffer[0] == 'd'){
 80012b8:	4b86      	ldr	r3, [pc, #536]	@ (80014d4 <HAL_UART_RxCpltCallback+0x224>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b64      	cmp	r3, #100	@ 0x64
 80012be:	d15f      	bne.n	8001380 <HAL_UART_RxCpltCallback+0xd0>
		FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFFFF);
 80012c0:	4b85      	ldr	r3, [pc, #532]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b84      	ldr	r3, [pc, #528]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	085b      	lsrs	r3, r3, #1
 80012ca:	1ad0      	subs	r0, r2, r3
 80012cc:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	1ad1      	subs	r1, r2, r3
 80012d8:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80012e4:	9400      	str	r4, [sp, #0]
 80012e6:	f7ff fc11 	bl	8000b0c <FillRect>
		if (playerCanMove(&p1, 0)) {
 80012ea:	2100      	movs	r1, #0
 80012ec:	487a      	ldr	r0, [pc, #488]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012ee:	f7ff fd9d 	bl	8000e2c <playerCanMove>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d025      	beq.n	8001344 <HAL_UART_RxCpltCallback+0x94>
		    p1.y=p1.y+p1.speed;
 80012f8:	4b77      	ldr	r3, [pc, #476]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4b76      	ldr	r3, [pc, #472]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4413      	add	r3, r2
 8001302:	4a75      	ldr	r2, [pc, #468]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001304:	6053      	str	r3, [r2, #4]
		    FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 8001306:	4b74      	ldr	r3, [pc, #464]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b73      	ldr	r3, [pc, #460]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	1ad0      	subs	r0, r2, r3
 8001312:	4b71      	ldr	r3, [pc, #452]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4b70      	ldr	r3, [pc, #448]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	1ad1      	subs	r1, r2, r3
 800131e:	4b6e      	ldr	r3, [pc, #440]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4c6d      	ldr	r4, [pc, #436]	@ (80014dc <HAL_UART_RxCpltCallback+0x22c>)
 8001328:	9400      	str	r4, [sp, #0]
 800132a:	f7ff fbef 	bl	8000b0c <FillRect>
		    FillRect(p1.x , p1.y, 1, 1, 0x000000);
 800132e:	4b6a      	ldr	r3, [pc, #424]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001334:	6859      	ldr	r1, [r3, #4]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2201      	movs	r2, #1
 800133e:	f7ff fbe5 	bl	8000b0c <FillRect>
 8001342:	e01d      	b.n	8001380 <HAL_UART_RxCpltCallback+0xd0>
		} else {
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 8001344:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	1ad0      	subs	r0, r2, r3
 8001350:	4b61      	ldr	r3, [pc, #388]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	1ad1      	subs	r1, r2, r3
 800135c:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4c5d      	ldr	r4, [pc, #372]	@ (80014dc <HAL_UART_RxCpltCallback+0x22c>)
 8001366:	9400      	str	r4, [sp, #0]
 8001368:	f7ff fbd0 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 800136c:	4b5a      	ldr	r3, [pc, #360]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	4b59      	ldr	r3, [pc, #356]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	2201      	movs	r2, #1
 800137c:	f7ff fbc6 	bl	8000b0c <FillRect>
		}
	}
	if(buffer[0] == 'u'){
 8001380:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <HAL_UART_RxCpltCallback+0x224>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b75      	cmp	r3, #117	@ 0x75
 8001386:	d15f      	bne.n	8001448 <HAL_UART_RxCpltCallback+0x198>
		FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFFFF);
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b52      	ldr	r3, [pc, #328]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	1ad0      	subs	r0, r2, r3
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4b4f      	ldr	r3, [pc, #316]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	1ad1      	subs	r1, r2, r3
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	4b4c      	ldr	r3, [pc, #304]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80013ac:	9400      	str	r4, [sp, #0]
 80013ae:	f7ff fbad 	bl	8000b0c <FillRect>
		if (playerCanMove(&p1, 2)) {
 80013b2:	2102      	movs	r1, #2
 80013b4:	4848      	ldr	r0, [pc, #288]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013b6:	f7ff fd39 	bl	8000e2c <playerCanMove>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d025      	beq.n	800140c <HAL_UART_RxCpltCallback+0x15c>
			p1.y=p1.y-p1.speed;
 80013c0:	4b45      	ldr	r3, [pc, #276]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a43      	ldr	r2, [pc, #268]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013cc:	6053      	str	r3, [r2, #4]
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 80013ce:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	1ad0      	subs	r0, r2, r3
 80013da:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	4b3b      	ldr	r3, [pc, #236]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4c3b      	ldr	r4, [pc, #236]	@ (80014dc <HAL_UART_RxCpltCallback+0x22c>)
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	f7ff fb8b 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80013f6:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80013fc:	6859      	ldr	r1, [r3, #4]
 80013fe:	2300      	movs	r3, #0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	2201      	movs	r2, #1
 8001406:	f7ff fb81 	bl	8000b0c <FillRect>
 800140a:	e01d      	b.n	8001448 <HAL_UART_RxCpltCallback+0x198>
		} else {
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	1ad0      	subs	r0, r2, r3
 8001418:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	1ad1      	subs	r1, r2, r3
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4c2b      	ldr	r4, [pc, #172]	@ (80014dc <HAL_UART_RxCpltCallback+0x22c>)
 800142e:	9400      	str	r4, [sp, #0]
 8001430:	f7ff fb6c 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	2300      	movs	r3, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2201      	movs	r2, #1
 8001444:	f7ff fb62 	bl	8000b0c <FillRect>
		}
	}
	if(buffer[0] == 'r'){
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_UART_RxCpltCallback+0x224>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b72      	cmp	r3, #114	@ 0x72
 800144e:	d165      	bne.n	800151c <HAL_UART_RxCpltCallback+0x26c>
		FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFFFF);
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	1ad0      	subs	r0, r2, r3
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	1ad1      	subs	r1, r2, r3
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8001474:	9400      	str	r4, [sp, #0]
 8001476:	f7ff fb49 	bl	8000b0c <FillRect>
		if (playerCanMove(&p1, 1)) {
 800147a:	2101      	movs	r1, #1
 800147c:	4816      	ldr	r0, [pc, #88]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800147e:	f7ff fcd5 	bl	8000e2c <playerCanMove>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d02b      	beq.n	80014e0 <HAL_UART_RxCpltCallback+0x230>
			p1.x=p1.x+p1.speed;
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	4413      	add	r3, r2
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001494:	6013      	str	r3, [r2, #0]
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	1ad0      	subs	r0, r2, r3
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	1ad1      	subs	r1, r2, r3
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4c09      	ldr	r4, [pc, #36]	@ (80014dc <HAL_UART_RxCpltCallback+0x22c>)
 80014b8:	9400      	str	r4, [sp, #0]
 80014ba:	f7ff fb27 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_UART_RxCpltCallback+0x228>)
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	2201      	movs	r2, #1
 80014ce:	f7ff fb1d 	bl	8000b0c <FillRect>
 80014d2:	e023      	b.n	800151c <HAL_UART_RxCpltCallback+0x26c>
 80014d4:	200000c8 	.word	0x200000c8
 80014d8:	200000d4 	.word	0x200000d4
 80014dc:	00fffb00 	.word	0x00fffb00
		} else {
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 80014e0:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	1ad0      	subs	r0, r2, r3
 80014ec:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	1ad1      	subs	r1, r2, r3
 80014f8:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b3e      	ldr	r3, [pc, #248]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4c3e      	ldr	r4, [pc, #248]	@ (80015fc <HAL_UART_RxCpltCallback+0x34c>)
 8001502:	9400      	str	r4, [sp, #0]
 8001504:	f7ff fb02 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 8001508:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	2201      	movs	r2, #1
 8001518:	f7ff faf8 	bl	8000b0c <FillRect>
		}
	}
	if(buffer[0] == 'l'){
 800151c:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <HAL_UART_RxCpltCallback+0x350>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b6c      	cmp	r3, #108	@ 0x6c
 8001522:	d15f      	bne.n	80015e4 <HAL_UART_RxCpltCallback+0x334>
		FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFFFF);
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	1ad0      	subs	r0, r2, r3
 8001530:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	1ad1      	subs	r1, r2, r3
 800153c:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8001548:	9400      	str	r4, [sp, #0]
 800154a:	f7ff fadf 	bl	8000b0c <FillRect>
		if (playerCanMove(&p1, 3)) {
 800154e:	2103      	movs	r1, #3
 8001550:	4829      	ldr	r0, [pc, #164]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001552:	f7ff fc6b 	bl	8000e2c <playerCanMove>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d025      	beq.n	80015a8 <HAL_UART_RxCpltCallback+0x2f8>
			p1.x=p1.x-p1.speed;
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	4a24      	ldr	r2, [pc, #144]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001568:	6013      	str	r3, [r2, #0]
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	1ad0      	subs	r0, r2, r3
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	1ad1      	subs	r1, r2, r3
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4c1c      	ldr	r4, [pc, #112]	@ (80015fc <HAL_UART_RxCpltCallback+0x34c>)
 800158c:	9400      	str	r4, [sp, #0]
 800158e:	f7ff fabd 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	2201      	movs	r2, #1
 80015a2:	f7ff fab3 	bl	8000b0c <FillRect>
 80015a6:	e01d      	b.n	80015e4 <HAL_UART_RxCpltCallback+0x334>
		} else {
			FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	1ad0      	subs	r0, r2, r3
 80015b4:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	1ad1      	subs	r1, r2, r3
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4c0c      	ldr	r4, [pc, #48]	@ (80015fc <HAL_UART_RxCpltCallback+0x34c>)
 80015ca:	9400      	str	r4, [sp, #0]
 80015cc:	f7ff fa9e 	bl	8000b0c <FillRect>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_UART_RxCpltCallback+0x348>)
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	2201      	movs	r2, #1
 80015e0:	f7ff fa94 	bl	8000b0c <FillRect>
	    verificar_golpe(&e2, position_p1);
	    verificar_golpe(&e3, position_p1);
	    */
	}
	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	4906      	ldr	r1, [pc, #24]	@ (8001600 <HAL_UART_RxCpltCallback+0x350>)
 80015e8:	4806      	ldr	r0, [pc, #24]	@ (8001604 <HAL_UART_RxCpltCallback+0x354>)
 80015ea:	f001 fb6c 	bl	8002cc6 <HAL_UART_Receive_IT>
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000d4 	.word	0x200000d4
 80015fc:	00fffb00 	.word	0x00fffb00
 8001600:	200000c8 	.word	0x200000c8
 8001604:	20000080 	.word	0x20000080

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <HAL_SPI_MspInit+0x84>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12b      	bne.n	80016de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <HAL_SPI_MspInit+0x88>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a17      	ldr	r2, [pc, #92]	@ (80016ec <HAL_SPI_MspInit+0x88>)
 8001690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_SPI_MspInit+0x88>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <HAL_SPI_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <HAL_SPI_MspInit+0x88>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_SPI_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23e0      	movs	r3, #224	@ 0xe0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ce:	2305      	movs	r3, #5
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <HAL_SPI_MspInit+0x8c>)
 80016da:	f000 fb0b 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	@ 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40013000 	.word	0x40013000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000

080016f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <HAL_UART_MspInit+0x94>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d133      	bne.n	800177e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_UART_MspInit+0x98>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_UART_MspInit+0x98>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_UART_MspInit+0x98>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x98>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <HAL_UART_MspInit+0x98>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_UART_MspInit+0x98>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4809      	ldr	r0, [pc, #36]	@ (8001790 <HAL_UART_MspInit+0x9c>)
 800176a:	f000 fac3 	bl	8001cf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2026      	movs	r0, #38	@ 0x26
 8001774:	f000 f9f5 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001778:	2026      	movs	r0, #38	@ 0x26
 800177a:	f000 fa0e 	bl	8001b9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004400 	.word	0x40004400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f89b 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <USART2_IRQHandler+0x10>)
 80017fa:	f001 fa89 	bl	8002d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000080 	.word	0x20000080

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001864 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001830:	f7ff ffea 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	@ (8001868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	@ (800186c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	@ (8001878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800185a:	f002 f95f 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fb5b 	bl	8000f18 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001870:	08003ba4 	.word	0x08003ba4
  ldr r2, =_sbss
 8001874:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001878:	20000154 	.word	0x20000154

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f94f 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff feae 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f967 	bl	8001bb6 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f92f 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	20000150 	.word	0x20000150

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000150 	.word	0x20000150

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff3e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff31 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa2 	bl	8001b08 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff feb6 	bl	800194c <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d008      	beq.n	8001c00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2280      	movs	r2, #128	@ 0x80
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e052      	b.n	8001ca6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0216 	bic.w	r2, r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <HAL_DMA_Abort+0x62>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c50:	e013      	b.n	8001c7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c52:	f7ff fe7b 	bl	800194c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d90c      	bls.n	8001c7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e015      	b.n	8001ca6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e4      	bne.n	8001c52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	223f      	movs	r2, #63	@ 0x3f
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d004      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e00c      	b.n	8001ce6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e165      	b.n	8001fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8154 	bne.w	8001fd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d130      	bne.n	8001da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0201 	and.w	r2, r3, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d017      	beq.n	8001de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d123      	bne.n	8001e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80ae 	beq.w	8001fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e96:	4a58      	ldr	r2, [pc, #352]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8001ffc <HAL_GPIO_Init+0x308>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x21a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8002000 <HAL_GPIO_Init+0x30c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x216>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x212>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8002008 <HAL_GPIO_Init+0x314>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4b      	ldr	r2, [pc, #300]	@ (800200c <HAL_GPIO_Init+0x318>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x20a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_GPIO_Init+0x31c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x206>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <HAL_GPIO_Init+0x320>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x202>
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a26      	ldr	r2, [pc, #152]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f82:	4b25      	ldr	r3, [pc, #148]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae96 	bls.w	8001d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0cc      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d90c      	bls.n	800208c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b63      	ldr	r3, [pc, #396]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a4:	4b59      	ldr	r3, [pc, #356]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a58      	ldr	r2, [pc, #352]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020bc:	4b53      	ldr	r3, [pc, #332]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a52      	ldr	r2, [pc, #328]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b50      	ldr	r3, [pc, #320]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	494d      	ldr	r1, [pc, #308]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d044      	beq.n	8002170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d119      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e07f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	2b03      	cmp	r3, #3
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4b3f      	ldr	r3, [pc, #252]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e067      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b37      	ldr	r3, [pc, #220]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4934      	ldr	r1, [pc, #208]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002140:	f7ff fc04 	bl	800194c <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff fc00 	bl	800194c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e04f      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 020c 	and.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1eb      	bne.n	8002148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d20c      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e032      	b.n	80021fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4916      	ldr	r1, [pc, #88]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c2:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	490e      	ldr	r1, [pc, #56]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d6:	f000 f855 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 80021da:	4602      	mov	r2, r0
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	490a      	ldr	r1, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	5ccb      	ldrb	r3, [r1, r3]
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fb64 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00
 800220c:	40023800 	.word	0x40023800
 8002210:	08003b7c 	.word	0x08003b7c
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <HAL_RCC_GetHCLKFreq+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000000 	.word	0x20000000

08002234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002238:	f7ff fff0 	bl	800221c <HAL_RCC_GetHCLKFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0a9b      	lsrs	r3, r3, #10
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4903      	ldr	r1, [pc, #12]	@ (8002258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	08003b8c 	.word	0x08003b8c

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002260:	f7ff ffdc 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0b5b      	lsrs	r3, r3, #13
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4903      	ldr	r1, [pc, #12]	@ (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	08003b8c 	.word	0x08003b8c

08002284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002288:	b0a6      	sub	sp, #152	@ 0x98
 800228a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022aa:	4bc8      	ldr	r3, [pc, #800]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	f200 817e 	bhi.w	80025b4 <HAL_RCC_GetSysClockFreq+0x330>
 80022b8:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	080022f5 	.word	0x080022f5
 80022c4:	080025b5 	.word	0x080025b5
 80022c8:	080025b5 	.word	0x080025b5
 80022cc:	080025b5 	.word	0x080025b5
 80022d0:	080022fd 	.word	0x080022fd
 80022d4:	080025b5 	.word	0x080025b5
 80022d8:	080025b5 	.word	0x080025b5
 80022dc:	080025b5 	.word	0x080025b5
 80022e0:	08002305 	.word	0x08002305
 80022e4:	080025b5 	.word	0x080025b5
 80022e8:	080025b5 	.word	0x080025b5
 80022ec:	080025b5 	.word	0x080025b5
 80022f0:	0800246f 	.word	0x0800246f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4bb6      	ldr	r3, [pc, #728]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80022f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80022fa:	e15f      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fc:	4bb5      	ldr	r3, [pc, #724]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80022fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002302:	e15b      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4bb1      	ldr	r3, [pc, #708]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800230c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002310:	4bae      	ldr	r3, [pc, #696]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d031      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231c:	4bab      	ldr	r3, [pc, #684]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	2200      	movs	r2, #0
 8002324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002326:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002330:	2300      	movs	r3, #0
 8002332:	667b      	str	r3, [r7, #100]	@ 0x64
 8002334:	4ba7      	ldr	r3, [pc, #668]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002336:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800233a:	462a      	mov	r2, r5
 800233c:	fb03 f202 	mul.w	r2, r3, r2
 8002340:	2300      	movs	r3, #0
 8002342:	4621      	mov	r1, r4
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	4aa2      	ldr	r2, [pc, #648]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800234c:	4621      	mov	r1, r4
 800234e:	fba1 1202 	umull	r1, r2, r1, r2
 8002352:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002354:	460a      	mov	r2, r1
 8002356:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002358:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800235a:	4413      	add	r3, r2
 800235c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800235e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002362:	2200      	movs	r2, #0
 8002364:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002366:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002368:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800236c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002370:	f7fd ff48 	bl	8000204 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4613      	mov	r3, r2
 800237a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800237e:	e064      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002380:	4b92      	ldr	r3, [pc, #584]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	2200      	movs	r2, #0
 8002388:	653b      	str	r3, [r7, #80]	@ 0x50
 800238a:	657a      	str	r2, [r7, #84]	@ 0x54
 800238c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002394:	2300      	movs	r3, #0
 8002396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002398:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800239c:	4622      	mov	r2, r4
 800239e:	462b      	mov	r3, r5
 80023a0:	f04f 0000 	mov.w	r0, #0
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	0159      	lsls	r1, r3, #5
 80023aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ae:	0150      	lsls	r0, r2, #5
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4621      	mov	r1, r4
 80023b6:	1a51      	subs	r1, r2, r1
 80023b8:	6139      	str	r1, [r7, #16]
 80023ba:	4629      	mov	r1, r5
 80023bc:	eb63 0301 	sbc.w	r3, r3, r1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ce:	4659      	mov	r1, fp
 80023d0:	018b      	lsls	r3, r1, #6
 80023d2:	4651      	mov	r1, sl
 80023d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d8:	4651      	mov	r1, sl
 80023da:	018a      	lsls	r2, r1, #6
 80023dc:	4651      	mov	r1, sl
 80023de:	ebb2 0801 	subs.w	r8, r2, r1
 80023e2:	4659      	mov	r1, fp
 80023e4:	eb63 0901 	sbc.w	r9, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fc:	4690      	mov	r8, r2
 80023fe:	4699      	mov	r9, r3
 8002400:	4623      	mov	r3, r4
 8002402:	eb18 0303 	adds.w	r3, r8, r3
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	462b      	mov	r3, r5
 800240a:	eb49 0303 	adc.w	r3, r9, r3
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800241c:	4629      	mov	r1, r5
 800241e:	028b      	lsls	r3, r1, #10
 8002420:	4621      	mov	r1, r4
 8002422:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002426:	4621      	mov	r1, r4
 8002428:	028a      	lsls	r2, r1, #10
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002432:	2200      	movs	r2, #0
 8002434:	643b      	str	r3, [r7, #64]	@ 0x40
 8002436:	647a      	str	r2, [r7, #68]	@ 0x44
 8002438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800243c:	f7fd fee2 	bl	8000204 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4613      	mov	r3, r2
 8002446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800244a:	4b60      	ldr	r3, [pc, #384]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 800245c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800246c:	e0a6      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246e:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800247a:	4b54      	ldr	r3, [pc, #336]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02a      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002486:	4b51      	ldr	r3, [pc, #324]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	2200      	movs	r2, #0
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002490:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002498:	2100      	movs	r1, #0
 800249a:	4b4e      	ldr	r3, [pc, #312]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800249c:	fb03 f201 	mul.w	r2, r3, r1
 80024a0:	2300      	movs	r3, #0
 80024a2:	fb00 f303 	mul.w	r3, r0, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	4a4a      	ldr	r2, [pc, #296]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80024aa:	fba0 1202 	umull	r1, r2, r0, r2
 80024ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80024b0:	460a      	mov	r2, r1
 80024b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80024b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024b6:	4413      	add	r3, r2
 80024b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024be:	2200      	movs	r2, #0
 80024c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80024c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80024c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80024cc:	f7fd fe9a 	bl	8000204 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024da:	e05b      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	2200      	movs	r2, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f8:	4642      	mov	r2, r8
 80024fa:	464b      	mov	r3, r9
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	0159      	lsls	r1, r3, #5
 8002506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250a:	0150      	lsls	r0, r2, #5
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4641      	mov	r1, r8
 8002512:	ebb2 0a01 	subs.w	sl, r2, r1
 8002516:	4649      	mov	r1, r9
 8002518:	eb63 0b01 	sbc.w	fp, r3, r1
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800252c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002530:	ebb2 040a 	subs.w	r4, r2, sl
 8002534:	eb63 050b 	sbc.w	r5, r3, fp
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	00eb      	lsls	r3, r5, #3
 8002542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002546:	00e2      	lsls	r2, r4, #3
 8002548:	4614      	mov	r4, r2
 800254a:	461d      	mov	r5, r3
 800254c:	4643      	mov	r3, r8
 800254e:	18e3      	adds	r3, r4, r3
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	464b      	mov	r3, r9
 8002554:	eb45 0303 	adc.w	r3, r5, r3
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002566:	4629      	mov	r1, r5
 8002568:	028b      	lsls	r3, r1, #10
 800256a:	4621      	mov	r1, r4
 800256c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002570:	4621      	mov	r1, r4
 8002572:	028a      	lsls	r2, r1, #10
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257c:	2200      	movs	r2, #0
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	61fa      	str	r2, [r7, #28]
 8002582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002586:	f7fd fe3d 	bl	8000204 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4613      	mov	r3, r2
 8002590:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002594:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0f1b      	lsrs	r3, r3, #28
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80025a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025b2:	e003      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80025b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3798      	adds	r7, #152	@ 0x98
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	017d7840 	.word	0x017d7840

080025d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e28d      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8083 	beq.w	80026fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025f8:	4b94      	ldr	r3, [pc, #592]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d019      	beq.n	8002638 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002604:	4b91      	ldr	r3, [pc, #580]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800260c:	2b08      	cmp	r3, #8
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002610:	4b8e      	ldr	r3, [pc, #568]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261c:	d00c      	beq.n	8002638 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b8b      	ldr	r3, [pc, #556]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d112      	bne.n	8002650 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b88      	ldr	r3, [pc, #544]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b84      	ldr	r3, [pc, #528]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x124>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e25a      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x90>
 800265a:	4b7c      	ldr	r3, [pc, #496]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7b      	ldr	r2, [pc, #492]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xcc>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0xb4>
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b73      	ldr	r3, [pc, #460]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a72      	ldr	r2, [pc, #456]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xcc>
 800268c:	4b6f      	ldr	r3, [pc, #444]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6e      	ldr	r2, [pc, #440]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b6c      	ldr	r3, [pc, #432]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6b      	ldr	r2, [pc, #428]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff f94e 	bl	800194c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f94a 	bl	800194c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e21f      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b61      	ldr	r3, [pc, #388]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xdc>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f93a 	bl	800194c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f936 	bl	800194c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	@ 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e20b      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b57      	ldr	r3, [pc, #348]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x104>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06f      	beq.n	80027ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800270a:	4b50      	ldr	r3, [pc, #320]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002716:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800271e:	2b08      	cmp	r3, #8
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002722:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b44      	ldr	r3, [pc, #272]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x186>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1d3      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4937      	ldr	r1, [pc, #220]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_OscConfig+0x278>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f8e3 	bl	800194c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff f8df 	bl	800194c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1b4      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2b      	ldr	r3, [pc, #172]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4925      	ldr	r1, [pc, #148]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCC_OscConfig+0x278>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f8c2 	bl	800194c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7ff f8be 	bl	800194c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e193      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x27c>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff f8a2 	bl	800194c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7ff f89e 	bl	800194c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e173      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCC_OscConfig+0x274>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x234>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_OscConfig+0x27c>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f88b 	bl	800194c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e00e      	b.n	8002858 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7ff f887 	bl	800194c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d907      	bls.n	8002858 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e15c      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b8a      	ldr	r3, [pc, #552]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ea      	bne.n	800283a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b83      	ldr	r3, [pc, #524]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b7f      	ldr	r3, [pc, #508]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
 8002892:	4b7c      	ldr	r3, [pc, #496]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b79      	ldr	r3, [pc, #484]	@ (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d118      	bne.n	80028e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b76      	ldr	r3, [pc, #472]	@ (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	@ (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7ff f847 	bl	800194c <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7ff f843 	bl	800194c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e118      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a88 <HAL_RCC_OscConfig+0x4b0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x31e>
 80028e8:	4b66      	ldr	r3, [pc, #408]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a65      	ldr	r2, [pc, #404]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x358>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x340>
 80028fe:	4b61      	ldr	r3, [pc, #388]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	4a60      	ldr	r2, [pc, #384]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	@ 0x70
 800290a:	4b5e      	ldr	r3, [pc, #376]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a5d      	ldr	r2, [pc, #372]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0x358>
 8002918:	4b5a      	ldr	r3, [pc, #360]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a59      	ldr	r2, [pc, #356]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
 8002924:	4b57      	ldr	r3, [pc, #348]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a56      	ldr	r2, [pc, #344]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7ff f808 	bl	800194c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7ff f804 	bl	800194c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0d7      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	4b4b      	ldr	r3, [pc, #300]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RCC_OscConfig+0x368>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fff2 	bl	800194c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe ffee 	bl	800194c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e0c1      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002982:	4b40      	ldr	r3, [pc, #256]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b3b      	ldr	r3, [pc, #236]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4a3a      	ldr	r2, [pc, #232]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80ad 	beq.w	8002b04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029aa:	4b36      	ldr	r3, [pc, #216]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d060      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d145      	bne.n	8002a4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b33      	ldr	r3, [pc, #204]	@ (8002a8c <HAL_RCC_OscConfig+0x4b4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe ffc2 	bl	800194c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe ffbe 	bl	800194c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e093      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	071b      	lsls	r3, r3, #28
 8002a16:	491b      	ldr	r1, [pc, #108]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x4b4>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe ff93 	bl	800194c <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fe ff8f 	bl	800194c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e064      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x452>
 8002a48:	e05c      	b.n	8002b04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <HAL_RCC_OscConfig+0x4b4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe ff7c 	bl	800194c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe ff78 	bl	800194c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04d      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x480>
 8002a76:	e045      	b.n	8002b04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e040      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a90:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <HAL_RCC_OscConfig+0x538>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d030      	beq.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d129      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d122      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d119      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d10f      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07b      	b.n	8002c1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b36:	d009      	beq.n	8002b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
 8002b3e:	e005      	b.n	8002b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe fd7c 	bl	8001664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	ea42 0103 	orr.w	r1, r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0104 	and.w	r1, r3, #4
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	f003 0210 	and.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e042      	b.n	8002cbe <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fe fd51 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2224      	movs	r2, #36	@ 0x24
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fcda 	bl	8003624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d112      	bne.n	8002d06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Receive_IT+0x26>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e00b      	b.n	8002d08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fab9 	bl	8003274 <UART_Start_Receive_IT>
 8002d02:	4603      	mov	r3, r0
 8002d04:	e000      	b.n	8002d08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0ba      	sub	sp, #232	@ 0xe8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_UART_IRQHandler+0x66>
 8002d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fb99 	bl	80034a6 <UART_Receive_IT>
      return;
 8002d74:	e25b      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80de 	beq.w	8002f3c <HAL_UART_IRQHandler+0x22c>
 8002d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80d1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_UART_IRQHandler+0xae>
 8002da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_UART_IRQHandler+0xd2>
 8002dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	f043 0202 	orr.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_UART_IRQHandler+0xf6>
 8002dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d011      	beq.n	8002e36 <HAL_UART_IRQHandler+0x126>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	f043 0208 	orr.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 81f2 	beq.w	8003224 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_UART_IRQHandler+0x14e>
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb24 	bl	80034a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b40      	cmp	r3, #64	@ 0x40
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_UART_IRQHandler+0x17a>
 8002e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04f      	beq.n	8002f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa2c 	bl	80032e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d141      	bne.n	8002f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002eca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1d9      	bne.n	8002e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80030f0 <HAL_UART_IRQHandler+0x3e0>)
 8002ef8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fed5 	bl	8001cae <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00e      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f994 	bl	8003248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00a      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f990 	bl	8003248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e006      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f98c 	bl	8003248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f36:	e175      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	bf00      	nop
    return;
 8002f3a:	e173      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 814f 	bne.w	80031e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8148 	beq.w	80031e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8141 	beq.w	80031e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	f040 80b6 	bne.w	80030f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8145 	beq.w	8003228 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f080 813e 	bcs.w	8003228 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fbe:	f000 8088 	beq.w	80030d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1d9      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800301e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003032:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003036:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800303a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e1      	bne.n	800300e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800305a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800306e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003070:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003074:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800307c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e3      	bne.n	800304a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e3      	bne.n	8003090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fd7e 	bl	8001bce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8b7 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ee:	e09b      	b.n	8003228 <HAL_UART_IRQHandler+0x518>
 80030f0:	080033af 	.word	0x080033af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 808e 	beq.w	800322c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8089 	beq.w	800322c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800313e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800314c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e3      	bne.n	800311a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	623b      	str	r3, [r7, #32]
   return(result);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003176:	633a      	str	r2, [r7, #48]	@ 0x30
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800317c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0310 	bic.w	r3, r3, #16
 80031ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031bc:	61fa      	str	r2, [r7, #28]
 80031be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	617b      	str	r3, [r7, #20]
   return(result);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e3      	bne.n	8003198 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f83d 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031e2:	e023      	b.n	800322c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <HAL_UART_IRQHandler+0x4f4>
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8ea 	bl	80033d6 <UART_Transmit_IT>
    return;
 8003202:	e014      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <HAL_UART_IRQHandler+0x51e>
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f92a 	bl	8003476 <UART_EndTransmit_IT>
    return;
 8003222:	e004      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
    return;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
      return;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_UART_IRQHandler+0x51e>
      return;
 800322c:	bf00      	nop
  }
}
 800322e:	37e8      	adds	r7, #232	@ 0xe8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2222      	movs	r2, #34	@ 0x22
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b095      	sub	sp, #84	@ 0x54
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003310:	643a      	str	r2, [r7, #64]	@ 0x40
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	61fb      	str	r3, [r7, #28]
   return(result);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3314      	adds	r3, #20
 8003342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800334a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	2b01      	cmp	r3, #1
 800335e:	d119      	bne.n	8003394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f023 0310 	bic.w	r3, r3, #16
 8003376:	647b      	str	r3, [r7, #68]	@ 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003380:	61ba      	str	r2, [r7, #24]
 8003382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6979      	ldr	r1, [r7, #20]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	613b      	str	r3, [r7, #16]
   return(result);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033a2:	bf00      	nop
 80033a4:	3754      	adds	r7, #84	@ 0x54
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff ff3d 	bl	8003248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b21      	cmp	r3, #33	@ 0x21
 80033e8:	d13e      	bne.n	8003468 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d114      	bne.n	800341e <UART_Transmit_IT+0x48>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d110      	bne.n	800341e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003410:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]
 800341c:	e008      	b.n	8003430 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6211      	str	r1, [r2, #32]
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4619      	mov	r1, r3
 800343e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10f      	bne.n	8003464 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003452:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003462:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800348c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fecc 	bl	8003234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08c      	sub	sp, #48	@ 0x30
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b22      	cmp	r3, #34	@ 0x22
 80034b8:	f040 80ae 	bne.w	8003618 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c4:	d117      	bne.n	80034f6 <UART_Receive_IT+0x50>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80034f4:	e026      	b.n	8003544 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	d007      	beq.n	800351a <UART_Receive_IT+0x74>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <UART_Receive_IT+0x82>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e008      	b.n	800353a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003534:	b2da      	uxtb	r2, r3
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29b      	uxth	r3, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4619      	mov	r1, r3
 8003552:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003554:	2b00      	cmp	r3, #0
 8003556:	d15d      	bne.n	8003614 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0220 	bic.w	r2, r2, #32
 8003566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003576:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	2b01      	cmp	r3, #1
 800359c:	d135      	bne.n	800360a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	613b      	str	r3, [r7, #16]
   return(result);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 0310 	bic.w	r3, r3, #16
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	623a      	str	r2, [r7, #32]
 80035c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	69f9      	ldr	r1, [r7, #28]
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e5      	bne.n	80035a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d10a      	bne.n	80035fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fe2a 	bl	800325c <HAL_UARTEx_RxEventCallback>
 8003608:	e002      	b.n	8003610 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fe50 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e002      	b.n	800361a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3730      	adds	r7, #48	@ 0x30
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b0c0      	sub	sp, #256	@ 0x100
 800362a:	af00      	add	r7, sp, #0
 800362c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	ea40 0301 	orr.w	r3, r0, r1
 800364c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	431a      	orrs	r2, r3
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800367c:	f021 010c 	bic.w	r1, r1, #12
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800368a:	430b      	orrs	r3, r1
 800368c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	ea40 0301 	orr.w	r3, r0, r1
 80036aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b8f      	ldr	r3, [pc, #572]	@ (80038f0 <UART_SetConfig+0x2cc>)
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d005      	beq.n	80036c4 <UART_SetConfig+0xa0>
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b8d      	ldr	r3, [pc, #564]	@ (80038f4 <UART_SetConfig+0x2d0>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d104      	bne.n	80036ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fdca 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80036c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036cc:	e003      	b.n	80036d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ce:	f7fe fdb1 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80036d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e0:	f040 810c 	bne.w	80038fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036fe:	415b      	adcs	r3, r3
 8003700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003706:	4621      	mov	r1, r4
 8003708:	eb12 0801 	adds.w	r8, r2, r1
 800370c:	4629      	mov	r1, r5
 800370e:	eb43 0901 	adc.w	r9, r3, r1
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003726:	4690      	mov	r8, r2
 8003728:	4699      	mov	r9, r3
 800372a:	4623      	mov	r3, r4
 800372c:	eb18 0303 	adds.w	r3, r8, r3
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003734:	462b      	mov	r3, r5
 8003736:	eb49 0303 	adc.w	r3, r9, r3
 800373a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800374a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800374e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003752:	460b      	mov	r3, r1
 8003754:	18db      	adds	r3, r3, r3
 8003756:	653b      	str	r3, [r7, #80]	@ 0x50
 8003758:	4613      	mov	r3, r2
 800375a:	eb42 0303 	adc.w	r3, r2, r3
 800375e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003768:	f7fc fd4c 	bl	8000204 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <UART_SetConfig+0x2d4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011c      	lsls	r4, r3, #4
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003784:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003794:	415b      	adcs	r3, r3
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800379c:	4641      	mov	r1, r8
 800379e:	eb12 0a01 	adds.w	sl, r2, r1
 80037a2:	4649      	mov	r1, r9
 80037a4:	eb43 0b01 	adc.w	fp, r3, r1
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037bc:	4692      	mov	sl, r2
 80037be:	469b      	mov	fp, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	eb1a 0303 	adds.w	r3, sl, r3
 80037c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ca:	464b      	mov	r3, r9
 80037cc:	eb4b 0303 	adc.w	r3, fp, r3
 80037d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037e8:	460b      	mov	r3, r1
 80037ea:	18db      	adds	r3, r3, r3
 80037ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ee:	4613      	mov	r3, r2
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037fe:	f7fc fd01 	bl	8000204 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4611      	mov	r1, r2
 8003808:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <UART_SetConfig+0x2d4>)
 800380a:	fba3 2301 	umull	r2, r3, r3, r1
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2264      	movs	r2, #100	@ 0x64
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800381e:	4b36      	ldr	r3, [pc, #216]	@ (80038f8 <UART_SetConfig+0x2d4>)
 8003820:	fba3 2302 	umull	r2, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800382c:	441c      	add	r4, r3
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003838:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800383c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003848:	415b      	adcs	r3, r3
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800384c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6339      	str	r1, [r7, #48]	@ 0x30
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003884:	464b      	mov	r3, r9
 8003886:	460a      	mov	r2, r1
 8003888:	eb42 0303 	adc.w	r3, r2, r3
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800389c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038a4:	460b      	mov	r3, r1
 80038a6:	18db      	adds	r3, r3, r3
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038aa:	4613      	mov	r3, r2
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038ba:	f7fc fca3 	bl	8000204 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <UART_SetConfig+0x2d4>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	2164      	movs	r1, #100	@ 0x64
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	3332      	adds	r3, #50	@ 0x32
 80038d6:	4a08      	ldr	r2, [pc, #32]	@ (80038f8 <UART_SetConfig+0x2d4>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	f003 0207 	and.w	r2, r3, #7
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4422      	add	r2, r4
 80038ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038ec:	e106      	b.n	8003afc <UART_SetConfig+0x4d8>
 80038ee:	bf00      	nop
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40011400 	.word	0x40011400
 80038f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003906:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800390a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800390e:	4642      	mov	r2, r8
 8003910:	464b      	mov	r3, r9
 8003912:	1891      	adds	r1, r2, r2
 8003914:	6239      	str	r1, [r7, #32]
 8003916:	415b      	adcs	r3, r3
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800391e:	4641      	mov	r1, r8
 8003920:	1854      	adds	r4, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0501 	adc.w	r5, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	00eb      	lsls	r3, r5, #3
 8003932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003936:	00e2      	lsls	r2, r4, #3
 8003938:	4614      	mov	r4, r2
 800393a:	461d      	mov	r5, r3
 800393c:	4643      	mov	r3, r8
 800393e:	18e3      	adds	r3, r4, r3
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003944:	464b      	mov	r3, r9
 8003946:	eb45 0303 	adc.w	r3, r5, r3
 800394a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800395a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800396a:	4629      	mov	r1, r5
 800396c:	008b      	lsls	r3, r1, #2
 800396e:	4621      	mov	r1, r4
 8003970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003974:	4621      	mov	r1, r4
 8003976:	008a      	lsls	r2, r1, #2
 8003978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800397c:	f7fc fc42 	bl	8000204 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003986:	fba3 2302 	umull	r2, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	011c      	lsls	r4, r3, #4
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800399c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	1891      	adds	r1, r2, r2
 80039a6:	61b9      	str	r1, [r7, #24]
 80039a8:	415b      	adcs	r3, r3
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b0:	4641      	mov	r1, r8
 80039b2:	1851      	adds	r1, r2, r1
 80039b4:	6139      	str	r1, [r7, #16]
 80039b6:	4649      	mov	r1, r9
 80039b8:	414b      	adcs	r3, r1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c8:	4659      	mov	r1, fp
 80039ca:	00cb      	lsls	r3, r1, #3
 80039cc:	4651      	mov	r1, sl
 80039ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d2:	4651      	mov	r1, sl
 80039d4:	00ca      	lsls	r2, r1, #3
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	4642      	mov	r2, r8
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e4:	464b      	mov	r3, r9
 80039e6:	460a      	mov	r2, r1
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a08:	4649      	mov	r1, r9
 8003a0a:	008b      	lsls	r3, r1, #2
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a12:	4641      	mov	r1, r8
 8003a14:	008a      	lsls	r2, r1, #2
 8003a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a1a:	f7fc fbf3 	bl	8000204 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b38      	ldr	r3, [pc, #224]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	@ 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	3332      	adds	r3, #50	@ 0x32
 8003a38:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a44:	441c      	add	r4, r3
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a96:	464b      	mov	r3, r9
 8003a98:	460a      	mov	r2, r1
 8003a9a:	eb42 0303 	adc.w	r3, r2, r3
 8003a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ab8:	4649      	mov	r1, r9
 8003aba:	008b      	lsls	r3, r1, #2
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	008a      	lsls	r2, r1, #2
 8003ac6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003aca:	f7fc fb9b 	bl	8000204 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	2164      	movs	r1, #100	@ 0x64
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	@ 0x32
 8003ae6:	4a08      	ldr	r2, [pc, #32]	@ (8003b08 <UART_SetConfig+0x4e4>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4422      	add	r2, r4
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b02:	46bd      	mov	sp, r7
 8003b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <memset>:
 8003b0c:	4402      	add	r2, r0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d100      	bne.n	8003b16 <memset+0xa>
 8003b14:	4770      	bx	lr
 8003b16:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1a:	e7f9      	b.n	8003b10 <memset+0x4>

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	@ (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f818 	bl	8003b64 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003b9c 	.word	0x08003b9c
 8003b58:	08003b9c 	.word	0x08003b9c
 8003b5c:	08003b9c 	.word	0x08003b9c
 8003b60:	08003ba0 	.word	0x08003ba0

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
