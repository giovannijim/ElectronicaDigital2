
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006994  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025818  08006b5c  08006b5c  00007b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c374  0802c374  00044a84  2**0
                  CONTENTS
  4 .ARM          00000008  0802c374  0802c374  0002d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c37c  0802c37c  00044a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c37c  0802c37c  0002d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802c380  0802c380  0002d380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00016a84  20000000  0802c384  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20016a84  08042e08  00044a84  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016ea0  08042e08  00044ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00044a84  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3d6  00000000  00000000  00044ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e13  00000000  00000000  00050e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00052ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021074  00000000  00000000  00053728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e95d  00000000  00000000  0007479c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cc334  00000000  00000000  000830f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0014f42d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000008b7  00000000  00000000  0014f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bc8  00000000  00000000  0014fd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001528f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20016a84 	.word	0x20016a84
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006b44 	.word	0x08006b44

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20016a88 	.word	0x20016a88
 8000204:	08006b44 	.word	0x08006b44

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f004 fb6f 	bl	8004ffc <HAL_GPIO_WritePin>
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f004 fb6a 	bl	8004ffc <HAL_GPIO_WritePin>
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f004 fb65 	bl	8004ffc <HAL_GPIO_WritePin>
 8000932:	2005      	movs	r0, #5
 8000934:	f004 f806 	bl	8004944 <HAL_Delay>
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f004 fb5d 	bl	8004ffc <HAL_GPIO_WritePin>
 8000942:	2014      	movs	r0, #20
 8000944:	f003 fffe 	bl	8004944 <HAL_Delay>
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f004 fb55 	bl	8004ffc <HAL_GPIO_WritePin>
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f003 fff6 	bl	8004944 <HAL_Delay>
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f004 fb4d 	bl	8004ffc <HAL_GPIO_WritePin>
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f003 ffe5 	bl	8004944 <HAL_Delay>
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f003 ff34 	bl	8004944 <HAL_Delay>
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f003 ff2e 	bl	8004944 <HAL_Delay>
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f004 fa82 	bl	8004ffc <HAL_GPIO_WritePin>
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f004 fa70 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f004 fa6b 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f004 fa60 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f004 fa59 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f004 fa4f 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f004 fa49 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f004 fa3e 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f004 fa37 	bl	8004ffc <HAL_GPIO_WritePin>
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f004 fa2d 	bl	8004ffc <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f004 fa27 	bl	8004ffc <HAL_GPIO_WritePin>
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f004 fa1d 	bl	8004ffc <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f004 fa17 	bl	8004ffc <HAL_GPIO_WritePin>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f004 fa0d 	bl	8004ffc <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f004 fa07 	bl	8004ffc <HAL_GPIO_WritePin>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f004 f9fc 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f004 f9f5 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f004 f9eb 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f004 f9e4 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f004 f9df 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f004 f9ca 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f004 f9c5 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f004 f9ba 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f004 f9b3 	bl	8004ffc <HAL_GPIO_WritePin>
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f004 f9a9 	bl	8004ffc <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f004 f9a3 	bl	8004ffc <HAL_GPIO_WritePin>
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f004 f998 	bl	8004ffc <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f004 f991 	bl	8004ffc <HAL_GPIO_WritePin>
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f004 f987 	bl	8004ffc <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f004 f981 	bl	8004ffc <HAL_GPIO_WritePin>
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f004 f977 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f004 f971 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f004 f967 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f004 f961 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f004 f956 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f004 f94f 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f004 f945 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f004 f93e 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f004 f939 	bl	8004ffc <HAL_GPIO_WritePin>
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f004 f8e2 	bl	8004ffc <HAL_GPIO_WritePin>
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f004 f8dd 	bl	8004ffc <HAL_GPIO_WritePin>
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f004 f8b3 	bl	8004ffc <HAL_GPIO_WritePin>
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <H_line>:
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <H_line+0x78>)
 8000ec2:	f004 f89b 	bl	8004ffc <HAL_GPIO_WritePin>
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <H_line+0x7c>)
 8000ecc:	f004 f896 	bl	8004ffc <HAL_GPIO_WritePin>
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff5e 	bl	8000da0 <SetWindows>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00d      	b.n	8000f06 <H_line+0x5e>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feaf 	bl	8000c54 <LCD_DATA>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feaa 	bl	8000c54 <LCD_DATA>
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3ed      	bcc.n	8000eea <H_line+0x42>
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <H_line+0x7c>)
 8000f14:	f004 f872 	bl	8004ffc <HAL_GPIO_WritePin>
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400

08000f28 <V_line>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	202c      	movs	r0, #44	@ 0x2c
 8000f38:	f7ff fde6 	bl	8000b08 <LCD_CMD>
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <V_line+0x78>)
 8000f42:	f004 f85b 	bl	8004ffc <HAL_GPIO_WritePin>
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <V_line+0x7c>)
 8000f4c:	f004 f856 	bl	8004ffc <HAL_GPIO_WritePin>
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ff1e 	bl	8000da0 <SetWindows>
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00d      	b.n	8000f86 <V_line+0x5e>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe6f 	bl	8000c54 <LCD_DATA>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe6a 	bl	8000c54 <LCD_DATA>
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d9ed      	bls.n	8000f6a <V_line+0x42>
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <V_line+0x7c>)
 8000f94:	f004 f832 	bl	8004ffc <HAL_GPIO_WritePin>
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Rect>:
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff73 	bl	8000ea8 <H_line>
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	18d1      	adds	r1, r2, r3
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ff6b 	bl	8000ea8 <H_line>
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ffa5 	bl	8000f28 <V_line>
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f7ff ff9d 	bl	8000f28 <V_line>
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <FillRect>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	202c      	movs	r0, #44	@ 0x2c
 8001008:	f7ff fd7e 	bl	8000b08 <LCD_CMD>
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <FillRect+0xac>)
 8001012:	f003 fff3 	bl	8004ffc <HAL_GPIO_WritePin>
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <FillRect+0xb0>)
 800101c:	f003 ffee 	bl	8004ffc <HAL_GPIO_WritePin>
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3b01      	subs	r3, #1
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff feb0 	bl	8000da0 <SetWindows>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e01a      	b.n	800108a <FillRect+0x92>
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e010      	b.n	800107c <FillRect+0x84>
 800105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdf7 	bl	8000c54 <LCD_DATA>
 8001066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fdf2 	bl	8000c54 <LCD_DATA>
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	3b02      	subs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8ea      	bhi.n	800105a <FillRect+0x62>
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	3301      	adds	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8e0      	bhi.n	8001054 <FillRect+0x5c>
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <FillRect+0xb0>)
 8001098:	f003 ffb0 	bl	8004ffc <HAL_GPIO_WritePin>
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <LCD_Bitmap>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	202c      	movs	r0, #44	@ 0x2c
 80010bc:	f7ff fd24 	bl	8000b08 <LCD_CMD>
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	4824      	ldr	r0, [pc, #144]	@ (8001158 <LCD_Bitmap+0xac>)
 80010c6:	f003 ff99 	bl	8004ffc <HAL_GPIO_WritePin>
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4823      	ldr	r0, [pc, #140]	@ (800115c <LCD_Bitmap+0xb0>)
 80010d0:	f003 ff94 	bl	8004ffc <HAL_GPIO_WritePin>
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fe56 	bl	8000da0 <SetWindows>
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e01e      	b.n	800113c <LCD_Bitmap+0x90>
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e014      	b.n	800112e <LCD_Bitmap+0x82>
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fda1 	bl	8000c54 <LCD_DATA>
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd99 	bl	8000c54 <LCD_DATA>
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3302      	adds	r3, #2
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d8e6      	bhi.n	8001104 <LCD_Bitmap+0x58>
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	3301      	adds	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8dc      	bhi.n	80010fe <LCD_Bitmap+0x52>
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <LCD_Bitmap+0xb0>)
 800114a:	f003 ff57 	bl	8004ffc <HAL_GPIO_WritePin>
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <LCD_Sprite>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	202c      	movs	r0, #44	@ 0x2c
 8001170:	f7ff fcca 	bl	8000b08 <LCD_CMD>
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <LCD_Sprite+0x150>)
 800117a:	f003 ff3f 	bl	8004ffc <HAL_GPIO_WritePin>
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	484c      	ldr	r0, [pc, #304]	@ (80012b4 <LCD_Sprite+0x154>)
 8001184:	f003 ff3a 	bl	8004ffc <HAL_GPIO_WritePin>
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f7ff fdfc 	bl	8000da0 <SetWindows>
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d03a      	beq.n	8001234 <LCD_Sprite+0xd4>
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c2:	e032      	b.n	800122a <LCD_Sprite+0xca>
 80011c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	fb03 f202 	mul.w	r2, r3, r2
 80011cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e8:	4413      	add	r3, r2
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f0:	e014      	b.n	800121c <LCD_Sprite+0xbc>
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd2a 	bl	8000c54 <LCD_DATA>
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd22 	bl	8000c54 <LCD_DATA>
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	3b02      	subs	r3, #2
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbe6      	blt.n	80011f2 <LCD_Sprite+0x92>
 8001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001226:	3301      	adds	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800122a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbc8      	blt.n	80011c4 <LCD_Sprite+0x64>
 8001232:	e034      	b.n	800129e <LCD_Sprite+0x13e>
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	e02d      	b.n	8001296 <LCD_Sprite+0x136>
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	e014      	b.n	8001288 <LCD_Sprite+0x128>
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fcf4 	bl	8000c54 <LCD_DATA>
 800126c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126e:	3301      	adds	r3, #1
 8001270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcec 	bl	8000c54 <LCD_DATA>
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	3302      	adds	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbe6      	blt.n	800125e <LCD_Sprite+0xfe>
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	3301      	adds	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbcd      	blt.n	800123a <LCD_Sprite+0xda>
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <LCD_Sprite+0x154>)
 80012a4:	f003 feaa 	bl	8004ffc <HAL_GPIO_WritePin>
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400

080012b8 <animation_e1_control>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d131      	bne.n	800134c <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dd1b      	ble.n	8001326 <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	dc13      	bgt.n	800131c <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8e9 	bl	80004d0 <__aeabi_f2d>
 80012fe:	a316      	add	r3, pc, #88	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7fe ff86 	bl	8000214 <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff f936 	bl	8000580 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 800131a:	e017      	b.n	800134c <animation_e1_control+0x94>
				enemy->animationV=0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001324:	e012      	b.n	800134c <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_f2d>
 8001330:	a309      	add	r3, pc, #36	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ff6d 	bl	8000214 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fb99999 	.word	0x3fb99999

08001360 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	@ 0x2c
 8001364:	af06      	add	r7, sp, #24
 8001366:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 80a6 	bne.w	80014de <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b04      	cmp	r3, #4
 8001396:	f340 80a2 	ble.w	80014de <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b06      	subs	r3, #6
 80013a0:	4618      	mov	r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3b09      	subs	r3, #9
 80013a8:	4619      	mov	r1, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	9304      	str	r3, [sp, #16]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2310      	movs	r3, #16
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <animation_e1+0x188>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2313      	movs	r3, #19
 80013c0:	2210      	movs	r2, #16
 80013c2:	f7ff fecd 	bl	8001160 <LCD_Sprite>
		    if (DrawHitbox==1){
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <animation_e1+0x18c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d113      	bne.n	80013f6 <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	1ad0      	subs	r0, r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2400      	movs	r4, #0
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	f7ff fdd9 	bl	8000fa8 <Rect>
		    }
		    if (DrawHitbox==2){
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <animation_e1+0x18c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d12b      	bne.n	8001456 <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6998      	ldr	r0, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6859      	ldr	r1, [r3, #4]
 8001406:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2201      	movs	r2, #1
 8001410:	f7ff fdf2 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	f7ff fde7 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a19      	ldr	r1, [r3, #32]
 8001432:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2201      	movs	r2, #1
 800143c:	f7ff fddc 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001448:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	2201      	movs	r2, #1
 8001452:	f7ff fdd1 	bl	8000ff8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <animation_e1+0x18c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d13f      	bne.n	80014de <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	1ad0      	subs	r0, r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	1ad1      	subs	r1, r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2400      	movs	r4, #0
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	f7ff fd91 	bl	8000fa8 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6998      	ldr	r0, [r3, #24]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	2201      	movs	r2, #1
 8001498:	f7ff fdae 	bl	8000ff8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69d8      	ldr	r0, [r3, #28]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2201      	movs	r2, #1
 80014ae:	f7ff fda3 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a19      	ldr	r1, [r3, #32]
 80014ba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	f7ff fd98 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80014d0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f7ff fd8d 	bl	8000ff8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000b888 	.word	0x2000b888
 80014ec:	20016e97 	.word	0x20016e97

080014f0 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af06      	add	r7, sp, #24
 80014f6:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d134      	bne.n	800157a <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	dc29      	bgt.n	800156a <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3b06      	subs	r3, #6
 800151c:	4618      	mov	r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	3b0c      	subs	r3, #12
 8001524:	4619      	mov	r1, r3
 8001526:	2300      	movs	r3, #0
 8001528:	9304      	str	r3, [sp, #16]
 800152a:	2300      	movs	r3, #0
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	230b      	movs	r3, #11
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <animation_e1_die+0xa0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2319      	movs	r3, #25
 800153c:	220e      	movs	r2, #14
 800153e:	f7ff fe0f 	bl	8001160 <LCD_Sprite>
				enemy->animationDie+=0.2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffc2 	bl	80004d0 <__aeabi_f2d>
 800154c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001588 <animation_e1_die+0x98>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fe5f 	bl	8000214 <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f80f 	bl	8000580 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 8001568:	e007      	b.n	800157a <animation_e1_die+0x8a>
					enemy->x=5000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	9999999a 	.word	0x9999999a
 800158c:	3fc99999 	.word	0x3fc99999
 8001590:	2000de88 	.word	0x2000de88

08001594 <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af06      	add	r7, sp, #24
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <initEnemy1+0x1d4>)
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a65      	ldr	r2, [pc, #404]	@ (800176c <initEnemy1+0x1d8>)
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	441a      	add	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	441a      	add	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3b08      	subs	r3, #8
 8001620:	4618      	mov	r0, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	3b09      	subs	r3, #9
 8001628:	4619      	mov	r1, r3
 800162a:	2300      	movs	r3, #0
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	2300      	movs	r3, #0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2310      	movs	r3, #16
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b4d      	ldr	r3, [pc, #308]	@ (8001770 <initEnemy1+0x1dc>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2313      	movs	r3, #19
 8001640:	2210      	movs	r2, #16
 8001642:	f7ff fd8d 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001646:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <initEnemy1+0x1e0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d113      	bne.n	8001676 <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	1ad0      	subs	r0, r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2400      	movs	r4, #0
 8001670:	9400      	str	r4, [sp, #0]
 8001672:	f7ff fc99 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <initEnemy1+0x1e0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d12b      	bne.n	80016d6 <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6998      	ldr	r0, [r3, #24]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2201      	movs	r2, #1
 8001690:	f7ff fcb2 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	69d8      	ldr	r0, [r3, #28]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2201      	movs	r2, #1
 80016a6:	f7ff fca7 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a19      	ldr	r1, [r3, #32]
 80016b2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fc9c 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80016c8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2201      	movs	r2, #1
 80016d2:	f7ff fc91 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <initEnemy1+0x1e0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d13f      	bne.n	800175e <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	1ad0      	subs	r0, r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	1ad1      	subs	r1, r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2400      	movs	r4, #0
 8001700:	9400      	str	r4, [sp, #0]
 8001702:	f7ff fc51 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6998      	ldr	r0, [r3, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2201      	movs	r2, #1
 8001718:	f7ff fc6e 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	69d8      	ldr	r0, [r3, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	2201      	movs	r2, #1
 800172e:	f7ff fc63 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a19      	ldr	r1, [r3, #32]
 800173a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fc58 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001750:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fc4d 	bl	8000ff8 <FillRect>
        }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	40a00000 	.word	0x40a00000
 800176c:	41400000 	.word	0x41400000
 8001770:	2000b888 	.word	0x2000b888
 8001774:	20016e97 	.word	0x20016e97

08001778 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 8251 	bne.w	8001c32 <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	2b03      	cmp	r3, #3
 8001796:	f200 824c 	bhi.w	8001c32 <ColisionPlayer_e1+0x4ba>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <ColisionPlayer_e1+0x28>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080018cf 	.word	0x080018cf
 80017a8:	080019ed 	.word	0x080019ed
 80017ac:	08001b0b 	.word	0x08001b0b
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	3b0c      	subs	r3, #12
 80017b4:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f0c0 8231 	bcc.w	8001c24 <ColisionPlayer_e1+0x4ac>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f200 822b 	bhi.w	8001c24 <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d323      	bcc.n	8001822 <ColisionPlayer_e1+0xaa>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d81d      	bhi.n	8001822 <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	1d5a      	adds	r2, r3, #5
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2201      	movs	r2, #1
 80017f4:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e208      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	429a      	cmp	r2, r3
 800182c:	d323      	bcc.n	8001876 <ColisionPlayer_e1+0xfe>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	429a      	cmp	r2, r3
 8001838:	d81d      	bhi.n	8001876 <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	1d5a      	adds	r2, r3, #5
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d106      	bne.n	8001872 <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e1de      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	429a      	cmp	r2, r3
 8001880:	f0c0 81d0 	bcc.w	8001c24 <ColisionPlayer_e1+0x4ac>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f200 81c9 	bhi.w	8001c24 <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	1d5a      	adds	r2, r3, #5
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2201      	movs	r2, #1
 80018a0:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e1b2      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	f200 81a4 	bhi.w	8001c28 <ColisionPlayer_e1+0x4b0>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	f0c0 819e 	bcc.w	8001c28 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d323      	bcc.n	8001940 <ColisionPlayer_e1+0x1c8>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	d81d      	bhi.n	8001940 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1f5a      	subs	r2, r3, #5
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2201      	movs	r2, #1
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800193c:	2300      	movs	r3, #0
 800193e:	e179      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d323      	bcc.n	8001994 <ColisionPlayer_e1+0x21c>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	429a      	cmp	r2, r3
 8001956:	d81d      	bhi.n	8001994 <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1f5a      	subs	r2, r3, #5
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2201      	movs	r2, #1
 8001966:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001990:	2300      	movs	r3, #0
 8001992:	e14f      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	429a      	cmp	r2, r3
 800199e:	f0c0 8143 	bcc.w	8001c28 <ColisionPlayer_e1+0x4b0>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f200 813c 	bhi.w	8001c28 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1f5a      	subs	r2, r3, #5
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2201      	movs	r2, #1
 80019be:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e123      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	330c      	adds	r3, #12
 80019f0:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f200 8117 	bhi.w	8001c2c <ColisionPlayer_e1+0x4b4>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f0c0 8111 	bcc.w	8001c2c <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d323      	bcc.n	8001a5e <ColisionPlayer_e1+0x2e6>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d81d      	bhi.n	8001a5e <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	1f5a      	subs	r2, r3, #5
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e0ea      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d323      	bcc.n	8001ab2 <ColisionPlayer_e1+0x33a>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d81d      	bhi.n	8001ab2 <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	1f5a      	subs	r2, r3, #5
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2201      	movs	r2, #1
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d106      	bne.n	8001aae <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e0c0      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	f0c0 80b6 	bcc.w	8001c2c <ColisionPlayer_e1+0x4b4>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f200 80af 	bhi.w	8001c2c <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	1f5a      	subs	r2, r3, #5
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2201      	movs	r2, #1
 8001adc:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e094      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3b0c      	subs	r3, #12
 8001b0e:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	f0c0 808a 	bcc.w	8001c30 <ColisionPlayer_e1+0x4b8>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	f200 8084 	bhi.w	8001c30 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d323      	bcc.n	8001b7c <ColisionPlayer_e1+0x404>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d81d      	bhi.n	8001b7c <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1d5a      	adds	r2, r3, #5
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e05b      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d323      	bcc.n	8001bd0 <ColisionPlayer_e1+0x458>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d81d      	bhi.n	8001bd0 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1d5a      	adds	r2, r3, #5
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e031      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d329      	bcc.n	8001c30 <ColisionPlayer_e1+0x4b8>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d823      	bhi.n	8001c30 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1d5a      	adds	r2, r3, #5
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e007      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
					break;
 8001c24:	bf00      	nop
 8001c26:	e004      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
					break;
 8001c28:	bf00      	nop
 8001c2a:	e002      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
					break;
 8001c2c:	bf00      	nop
 8001c2e:	e000      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 8001c30:	bf00      	nop
			return 1;
			}
	}
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3724      	adds	r7, #36	@ 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af06      	add	r7, sp, #24
 8001c46:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	1ad2      	subs	r2, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	1ad2      	subs	r2, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	441a      	add	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	3b0a      	subs	r3, #10
 8001c96:	4619      	mov	r1, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9304      	str	r3, [sp, #16]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <Hitbox_e2+0x194>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2314      	movs	r3, #20
 8001cae:	2210      	movs	r2, #16
 8001cb0:	f7ff fa56 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001cb4:	4b48      	ldr	r3, [pc, #288]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d113      	bne.n	8001ce4 <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	1ad0      	subs	r0, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	1ad1      	subs	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2400      	movs	r4, #0
 8001cde:	9400      	str	r4, [sp, #0]
 8001ce0:	f7ff f962 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d12b      	bne.n	8001d44 <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6998      	ldr	r0, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f7ff f97b 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69d8      	ldr	r0, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	2201      	movs	r2, #1
 8001d14:	f7ff f970 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f7ff f965 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d36:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f7ff f95a 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d13f      	bne.n	8001dcc <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	1ad0      	subs	r0, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	1ad1      	subs	r1, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9400      	str	r4, [sp, #0]
 8001d70:	f7ff f91a 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6998      	ldr	r0, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2301      	movs	r3, #1
 8001d84:	2201      	movs	r2, #1
 8001d86:	f7ff f937 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69d8      	ldr	r0, [r3, #28]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f7ff f92c 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a19      	ldr	r1, [r3, #32]
 8001da8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2301      	movs	r3, #1
 8001db0:	2201      	movs	r2, #1
 8001db2:	f7ff f921 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001dbe:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f7ff f916 	bl	8000ff8 <FillRect>
        }
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	200016e0 	.word	0x200016e0
 8001dd8:	20016e97 	.word	0x20016e97

08001ddc <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <initEnemy2+0x6c>)
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <initEnemy2+0x70>)
 8001e26:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40400000 	.word	0x40400000
 8001e4c:	40c00000 	.word	0x40c00000

08001e50 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8109 	bne.w	8002076 <moveE2+0x226>
		if (enemy->delay==100000){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001e6a:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002080 <moveE2+0x230>
 8001e6e:	eef4 7a47 	vcmp.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	f040 80ef 	bne.w	8002058 <moveE2+0x208>
			switch(enemy->move){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 80f9 	bhi.w	8002076 <moveE2+0x226>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <moveE2+0x3c>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001f0d 	.word	0x08001f0d
 8001e94:	08001f7d 	.word	0x08001f7d
 8001e98:	08001fed 	.word	0x08001fed
			case 0: //Derecha
				int futureX_D=player->x+50;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3332      	adds	r3, #50	@ 0x32
 8001ea2:	60bb      	str	r3, [r7, #8]
				if (futureX_D>player->limitWidth-20){
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	f1a3 0214 	sub.w	r2, r3, #20
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d209      	bcs.n	8001ec6 <moveE2+0x76>
					enemy->move+=1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffc6 	bl	8001e50 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001ec4:	e0d7      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1a3 0008 	sub.w	r0, r3, #8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f1a3 010a 	sub.w	r1, r3, #10
 8001ed6:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2314      	movs	r3, #20
 8001ede:	2210      	movs	r2, #16
 8001ee0:	f7ff f88a 	bl	8000ff8 <FillRect>
					enemy->x=futureX_D;
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fe9b 	bl	8001c40 <Hitbox_e2>
				break;
 8001f0a:	e0b4      	b.n	8002076 <moveE2+0x226>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	3332      	adds	r3, #50	@ 0x32
 8001f12:	60fb      	str	r3, [r7, #12]
				if (futureY_A>player->limitHeight-20){
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f1a3 0214 	sub.w	r2, r3, #20
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d209      	bcs.n	8001f36 <moveE2+0xe6>
					enemy->move+=1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff8e 	bl	8001e50 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001f34:	e09f      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1a3 0008 	sub.w	r0, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f1a3 010a 	sub.w	r1, r3, #10
 8001f46:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2314      	movs	r3, #20
 8001f4e:	2210      	movs	r2, #16
 8001f50:	f7ff f852 	bl	8000ff8 <FillRect>
					enemy->y=futureY_A;
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fe63 	bl	8001c40 <Hitbox_e2>
				break;
 8001f7a:	e07c      	b.n	8002076 <moveE2+0x226>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3b32      	subs	r3, #50	@ 0x32
 8001f82:	613b      	str	r3, [r7, #16]
				if (futureX_I<player->limitWidth_i+20){
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f103 0214 	add.w	r2, r3, #20
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d909      	bls.n	8001fa6 <moveE2+0x156>
						enemy->move+=1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff56 	bl	8001e50 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001fa4:	e067      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1a3 0008 	sub.w	r0, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f1a3 010a 	sub.w	r1, r3, #10
 8001fb6:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2314      	movs	r3, #20
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	f7ff f81a 	bl	8000ff8 <FillRect>
					enemy->x=futureX_I;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe2b 	bl	8001c40 <Hitbox_e2>
				break;
 8001fea:	e044      	b.n	8002076 <moveE2+0x226>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	3b32      	subs	r3, #50	@ 0x32
 8001ff2:	617b      	str	r3, [r7, #20]
				if (futureY_U>player->limitHeight+20){
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	f103 0214 	add.w	r2, r3, #20
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d209      	bcs.n	8002016 <moveE2+0x1c6>
					enemy->move+=1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff1e 	bl	8001e50 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002014:	e02f      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1a3 0008 	sub.w	r0, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f1a3 010a 	sub.w	r1, r3, #10
 8002026:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2314      	movs	r3, #20
 800202e:	2210      	movs	r2, #16
 8002030:	f7fe ffe2 	bl	8000ff8 <FillRect>
					enemy->y=futureY_U;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fdf5 	bl	8001c40 <Hitbox_e2>
				break;
 8002056:	e00e      	b.n	8002076 <moveE2+0x226>
			}
		}else{
			if (enemy->delay==200000){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800205e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002084 <moveE2+0x234>
 8002062:	eef4 7a47 	vcmp.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d104      	bne.n	8002076 <moveE2+0x226>
				enemy->delay=0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002074:	e7ff      	b.n	8002076 <moveE2+0x226>
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	47c35000 	.word	0x47c35000
 8002084:	48435000 	.word	0x48435000

08002088 <E2_Appear>:

void E2_Appear(enemy_type2* enemy){
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af06      	add	r7, sp, #24
 800208e:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d12b      	bne.n	8002100 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	dc28      	bgt.n	8002100 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3b08      	subs	r3, #8
 80020b4:	4618      	mov	r0, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	3b0a      	subs	r3, #10
 80020bc:	4619      	mov	r1, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	2305      	movs	r3, #5
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <E2_Appear+0x88>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2314      	movs	r3, #20
 80020d4:	2210      	movs	r2, #16
 80020d6:	f7ff f843 	bl	8001160 <LCD_Sprite>
			enemy->animationV+=0.05;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9f6 	bl	80004d0 <__aeabi_f2d>
 80020e4:	a308      	add	r3, pc, #32	@ (adr r3, 8002108 <E2_Appear+0x80>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe f893 	bl	8000214 <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fa43 	bl	8000580 <__aeabi_d2f>
 80020fa:	4602      	mov	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	9999999a 	.word	0x9999999a
 800210c:	3fa99999 	.word	0x3fa99999
 8002110:	200016e0 	.word	0x200016e0
 8002114:	00000000 	.word	0x00000000

08002118 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af06      	add	r7, sp, #24
 800211e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d13b      	bne.n	80021a0 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800212e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002132:	ee17 3a90 	vmov	r3, s15
 8002136:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d12f      	bne.n	80021a0 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b02      	cmp	r3, #2
 8002144:	dc29      	bgt.n	800219a <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3b0e      	subs	r3, #14
 800214c:	4618      	mov	r0, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	3b0c      	subs	r3, #12
 8002154:	4619      	mov	r1, r3
 8002156:	2300      	movs	r3, #0
 8002158:	9304      	str	r3, [sp, #16]
 800215a:	2300      	movs	r3, #0
 800215c:	9303      	str	r3, [sp, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2303      	movs	r3, #3
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <E2_Hurt+0x98>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2319      	movs	r3, #25
 800216c:	221c      	movs	r2, #28
 800216e:	f7fe fff7 	bl	8001160 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9aa 	bl	80004d0 <__aeabi_f2d>
 800217c:	a30a      	add	r3, pc, #40	@ (adr r3, 80021a8 <E2_Hurt+0x90>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f847 	bl	8000214 <__adddf3>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe f9f7 	bl	8000580 <__aeabi_d2f>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002198:	e002      	b.n	80021a0 <E2_Hurt+0x88>
					enemy->isHurt=0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	9999999a 	.word	0x9999999a
 80021ac:	3fa99999 	.word	0x3fa99999
 80021b0:	20002360 	.word	0x20002360
 80021b4:	00000000 	.word	0x00000000

080021b8 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af06      	add	r7, sp, #24
 80021be:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80021c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ca:	ee17 3a90 	vmov	r3, s15
 80021ce:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d143      	bne.n	8002260 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	dc29      	bgt.n	8002232 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3b0c      	subs	r3, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	3b0b      	subs	r3, #11
 80021ec:	4619      	mov	r1, r3
 80021ee:	2300      	movs	r3, #0
 80021f0:	9304      	str	r3, [sp, #16]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2306      	movs	r3, #6
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <E2_Die+0xb8>)
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2317      	movs	r3, #23
 8002204:	221a      	movs	r2, #26
 8002206:	f7fe ffab 	bl	8001160 <LCD_Sprite>
					enemy->animationDie+=0.2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f95e 	bl	80004d0 <__aeabi_f2d>
 8002214:	a314      	add	r3, pc, #80	@ (adr r3, 8002268 <E2_Die+0xb0>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fd fffb 	bl	8000214 <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe f9ab 	bl	8000580 <__aeabi_d2f>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xF66B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002230:	e016      	b.n	8002260 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xF66B);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1a3 000c 	sub.w	r0, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f1a3 010b 	sub.w	r1, r3, #11
 8002242:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2317      	movs	r3, #23
 800224a:	221a      	movs	r2, #26
 800224c:	f7fe fed4 	bl	8000ff8 <FillRect>
						enemy->x=5000;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	605a      	str	r2, [r3, #4]
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	9999999a 	.word	0x9999999a
 800226c:	3fc99999 	.word	0x3fc99999
 8002270:	200033c8 	.word	0x200033c8

08002274 <PlayerHit_E2>:

void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 80f0 	bne.w	8002468 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	2b03      	cmp	r3, #3
 800228e:	f200 80eb 	bhi.w	8002468 <PlayerHit_E2+0x1f4>
 8002292:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <PlayerHit_E2+0x24>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022a9 	.word	0x080022a9
 800229c:	0800238b 	.word	0x0800238b
 80022a0:	0800231b 	.word	0x0800231b
 80022a4:	080023f3 	.word	0x080023f3
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	3b0f      	subs	r3, #15
 80022ae:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f0c0 80cf 	bcc.w	800245a <PlayerHit_E2+0x1e6>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	f200 80c9 	bhi.w	800245a <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	3b05      	subs	r3, #5
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f0c0 80c1 	bcc.w	800245a <PlayerHit_E2+0x1e6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	3305      	adds	r3, #5
 80022e2:	429a      	cmp	r2, r3
 80022e4:	f200 80b9 	bhi.w	800245a <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 80a8 	bne.w	800245a <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002318:	e09f      	b.n	800245a <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	330f      	adds	r3, #15
 8002320:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	f0c0 8098 	bcc.w	800245e <PlayerHit_E2+0x1ea>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	f200 8092 	bhi.w	800245e <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	3b05      	subs	r3, #5
 8002344:	429a      	cmp	r2, r3
 8002346:	f0c0 808a 	bcc.w	800245e <PlayerHit_E2+0x1ea>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	3305      	adds	r3, #5
 8002354:	429a      	cmp	r2, r3
 8002356:	f200 8082 	bhi.w	800245e <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d171      	bne.n	800245e <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002388:	e069      	b.n	800245e <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d362      	bcc.n	8002462 <PlayerHit_E2+0x1ee>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d85d      	bhi.n	8002462 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	3b0f      	subs	r3, #15
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d356      	bcc.n	8002462 <PlayerHit_E2+0x1ee>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	3314      	adds	r3, #20
 80023be:	429a      	cmp	r2, r3
 80023c0:	d84f      	bhi.n	8002462 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d13f      	bne.n	8002462 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 80023f0:	e037      	b.n	8002462 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3b14      	subs	r3, #20
 80023f8:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d330      	bcc.n	8002466 <PlayerHit_E2+0x1f2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	429a      	cmp	r2, r3
 800240c:	d82b      	bhi.n	8002466 <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	3b0f      	subs	r3, #15
 8002418:	429a      	cmp	r2, r3
 800241a:	d324      	bcc.n	8002466 <PlayerHit_E2+0x1f2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	3314      	adds	r3, #20
 8002426:	429a      	cmp	r2, r3
 8002428:	d81d      	bhi.n	8002466 <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002458:	e005      	b.n	8002466 <PlayerHit_E2+0x1f2>
			break;
 800245a:	bf00      	nop
 800245c:	e004      	b.n	8002468 <PlayerHit_E2+0x1f4>
				break;
 800245e:	bf00      	nop
 8002460:	e002      	b.n	8002468 <PlayerHit_E2+0x1f4>
				break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <PlayerHit_E2+0x1f4>
							break;
 8002466:	bf00      	nop
						}
		}
	}
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <initEnemy3>:

/* Funciones Enemigo 3 -------------------------------------------------*/
void initEnemy3(enemy_type3* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health, player* player) {
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	601a      	str	r2, [r3, #0]
    enemy->y_eye=startY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
    enemy->y = startY+20;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 0214 	add.w	r2, r3, #20
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	60da      	str	r2, [r3, #12]
    enemy->height = height;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	611a      	str	r2, [r3, #16]
    enemy->speed=5;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2205      	movs	r2, #5
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->Place=0;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    enemy->delay=0;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	651a      	str	r2, [r3, #80]	@ 0x50
    enemy->delay_init=0;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54

    // Inicializar la vida y el estado
    enemy->health = health;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
    enemy->isAlive = 0;  // El enemigo comienza vivo
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationFire=0;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationEye=0;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->isMove=0;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	649a      	str	r2, [r3, #72]	@ 0x48

    //Limites
    enemy->limitwidth=player->limitWidth;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34
    enemy->limitwidth_i=player->limitWidth_i;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->limitheight_i=18;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2212      	movs	r2, #18
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40
    enemy->limitheight=220;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	22dc      	movs	r2, #220	@ 0xdc
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <E3_Eye>:

void E3_Eye(enemy_type3* enemy){
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af06      	add	r7, sp, #24
 800250e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	2b00      	cmp	r3, #0
 8002516:	dd55      	ble.n	80025c4 <E3_Eye+0xbc>
		if (enemy->isMove==0){
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251c:	2b00      	cmp	r3, #0
 800251e:	d160      	bne.n	80025e2 <E3_Eye+0xda>
			enemy->y=enemy->y_eye+20;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f103 0214 	add.w	r2, r3, #20
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]
			int variableEye=enemy->animationEye;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	60fb      	str	r3, [r7, #12]
			if (variableEye<7){
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b06      	cmp	r3, #6
 8002540:	dc29      	bgt.n	8002596 <E3_Eye+0x8e>
				LCD_Sprite(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, E3_Eye16x17_7, 7, variableEye, 0, 0);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3b08      	subs	r3, #8
 8002548:	4618      	mov	r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	3b08      	subs	r3, #8
 8002550:	4619      	mov	r1, r3
 8002552:	2300      	movs	r3, #0
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	2300      	movs	r3, #0
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	2307      	movs	r3, #7
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <E3_Eye+0xf0>)
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2311      	movs	r3, #17
 8002568:	2210      	movs	r2, #16
 800256a:	f7fe fdf9 	bl	8001160 <LCD_Sprite>
				enemy->animationEye+=0.1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ffac 	bl	80004d0 <__aeabi_f2d>
 8002578:	a31d      	add	r3, pc, #116	@ (adr r3, 80025f0 <E3_Eye+0xe8>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fd fe49 	bl	8000214 <__adddf3>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fd fff9 	bl	8000580 <__aeabi_d2f>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	} else{
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xF66B);
	}
}
 8002594:	e025      	b.n	80025e2 <E3_Eye+0xda>
				FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xF66B);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1a3 0008 	sub.w	r0, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f1a3 0108 	sub.w	r1, r3, #8
 80025a6:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2311      	movs	r3, #17
 80025ae:	2210      	movs	r2, #16
 80025b0:	f7fe fd22 	bl	8000ff8 <FillRect>
				enemy->isMove=1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationFire=0;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c2:	e00e      	b.n	80025e2 <E3_Eye+0xda>
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xF66B);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1a3 0008 	sub.w	r0, r3, #8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f1a3 0108 	sub.w	r1, r3, #8
 80025d4:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2311      	movs	r3, #17
 80025dc:	2210      	movs	r2, #16
 80025de:	f7fe fd0b 	bl	8000ff8 <FillRect>
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	9999999a 	.word	0x9999999a
 80025f4:	3fb99999 	.word	0x3fb99999
 80025f8:	20000800 	.word	0x20000800

080025fc <E3_FireMove>:

void E3_FireMove(enemy_type3* enemy,player* player){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af06      	add	r7, sp, #24
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	if (enemy->health>0){
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	2b00      	cmp	r3, #0
 800260c:	f340 80b4 	ble.w	8002778 <E3_FireMove+0x17c>
		if (enemy->isMove==1){
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 80af 	bne.w	8002778 <E3_FireMove+0x17c>
			int FutureY=enemy->y+enemy->speed;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
			if (FutureY>=220){
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2bdb      	cmp	r3, #219	@ 0xdb
 800262a:	dd23      	ble.n	8002674 <E3_FireMove+0x78>
				enemy->isMove=0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationEye=0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	62da      	str	r2, [r3, #44]	@ 0x2c
				enemy->health-=1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
				enemy->Place+=1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	64da      	str	r2, [r3, #76]	@ 0x4c
				enemy->delay=0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	651a      	str	r2, [r3, #80]	@ 0x50
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xF66B); //Se puede eliminar
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1a3 0008 	sub.w	r0, r3, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f1a3 0108 	sub.w	r1, r3, #8
 8002664:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2310      	movs	r3, #16
 800266c:	2210      	movs	r2, #16
 800266e:	f7fe fcc3 	bl	8000ff8 <FillRect>
				}
			}
		}

	}
}
 8002672:	e081      	b.n	8002778 <E3_FireMove+0x17c>
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xF66B);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1a3 0008 	sub.w	r0, r3, #8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f1a3 0108 	sub.w	r1, r3, #8
 8002684:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2310      	movs	r3, #16
 800268c:	2210      	movs	r2, #16
 800268e:	f7fe fcb3 	bl	8000ff8 <FillRect>
				int animationFire=enemy->animationFire;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	60bb      	str	r3, [r7, #8]
				enemy->y=FutureY;
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	605a      	str	r2, [r3, #4]
				LCD_Sprite(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, E3_Fire16x16_4, 4, animationFire, 0, 0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3b08      	subs	r3, #8
 80026ae:	4618      	mov	r0, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	3b08      	subs	r3, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	9304      	str	r3, [sp, #16]
 80026bc:	2300      	movs	r3, #0
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2304      	movs	r3, #4
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <E3_FireMove+0x184>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2310      	movs	r3, #16
 80026ce:	2210      	movs	r2, #16
 80026d0:	f7fe fd46 	bl	8001160 <LCD_Sprite>
				if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d34b      	bcc.n	8002778 <E3_FireMove+0x17c>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d845      	bhi.n	8002778 <E3_FireMove+0x17c>
					if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d33f      	bcc.n	8002778 <E3_FireMove+0x17c>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	429a      	cmp	r2, r3
 8002702:	d839      	bhi.n	8002778 <E3_FireMove+0x17c>
						player->y=player->y-5;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	1f5a      	subs	r2, r3, #5
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	605a      	str	r2, [r3, #4]
						player->IsDamage=1;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2201      	movs	r2, #1
 8002712:	65da      	str	r2, [r3, #92]	@ 0x5c
						player->animationDamage=0;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	661a      	str	r2, [r3, #96]	@ 0x60
						player->life-=1;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	615a      	str	r2, [r3, #20]
						if (player->life==0){
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <E3_FireMove+0x140>
							player->isAlive=0;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
							player->animationDie=0;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	669a      	str	r2, [r3, #104]	@ 0x68
						FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xF66B); //Se puede eliminar
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1a3 0008 	sub.w	r0, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f1a3 0108 	sub.w	r1, r3, #8
 800274c:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2310      	movs	r3, #16
 8002754:	2210      	movs	r2, #16
 8002756:	f7fe fc4f 	bl	8000ff8 <FillRect>
						enemy->isMove=0;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	649a      	str	r2, [r3, #72]	@ 0x48
						enemy->animationEye=0;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->Place+=1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	64da      	str	r2, [r3, #76]	@ 0x4c
						enemy->delay=0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000000 	.word	0x20000000
 8002784:	00000000 	.word	0x00000000

08002788 <E3_FireAnimation>:

void E3_FireAnimation(enemy_type3* enemy){
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0 && enemy->isMove){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	2b00      	cmp	r3, #0
 8002796:	dd25      	ble.n	80027e4 <E3_FireAnimation+0x5c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279c:	2b00      	cmp	r3, #0
 800279e:	d021      	beq.n	80027e4 <E3_FireAnimation+0x5c>
		enemy->animationFire+=0.2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe93 	bl	80004d0 <__aeabi_f2d>
 80027aa:	a311      	add	r3, pc, #68	@ (adr r3, 80027f0 <E3_FireAnimation+0x68>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd fd30 	bl	8000214 <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fd fee0 	bl	8000580 <__aeabi_d2f>
 80027c0:	4602      	mov	r2, r0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (enemy->animationFire>=4){
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80027cc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80027d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	da00      	bge.n	80027dc <E3_FireAnimation+0x54>
			enemy->animationFire=0;
		}
	}
}
 80027da:	e003      	b.n	80027e4 <E3_FireAnimation+0x5c>
			enemy->animationFire=0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	f3af 8000 	nop.w
 80027f0:	9999999a 	.word	0x9999999a
 80027f4:	3fc99999 	.word	0x3fc99999

080027f8 <E3_Hitbox>:

void E3_Hitbox(enemy_type3* enemy){
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	441a      	add	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	1ad2      	subs	r2, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24

		if (DrawHitbox==1){
 8002840:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <E3_Hitbox+0x168>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d113      	bne.n	8002870 <E3_Hitbox+0x78>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	1ad0      	subs	r0, r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	1ad1      	subs	r1, r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2400      	movs	r4, #0
 800286a:	9400      	str	r4, [sp, #0]
 800286c:	f7fe fb9c 	bl	8000fa8 <Rect>
	    }
	    if (DrawHitbox==2){
 8002870:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <E3_Hitbox+0x168>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d12b      	bne.n	80028d0 <E3_Hitbox+0xd8>
	    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6998      	ldr	r0, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2301      	movs	r3, #1
 8002888:	2201      	movs	r2, #1
 800288a:	f7fe fbb5 	bl	8000ff8 <FillRect>
	    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69d8      	ldr	r0, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2301      	movs	r3, #1
 800289e:	2201      	movs	r2, #1
 80028a0:	f7fe fbaa 	bl	8000ff8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a19      	ldr	r1, [r3, #32]
 80028ac:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	2201      	movs	r2, #1
 80028b6:	f7fe fb9f 	bl	8000ff8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80028c2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	2201      	movs	r2, #1
 80028cc:	f7fe fb94 	bl	8000ff8 <FillRect>
	    }
	    if (DrawHitbox==3){
 80028d0:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <E3_Hitbox+0x168>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d13f      	bne.n	8002958 <E3_Hitbox+0x160>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	1ad0      	subs	r0, r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	1ad1      	subs	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2400      	movs	r4, #0
 80028fa:	9400      	str	r4, [sp, #0]
 80028fc:	f7fe fb54 	bl	8000fa8 <Rect>
			FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6998      	ldr	r0, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2301      	movs	r3, #1
 8002910:	2201      	movs	r2, #1
 8002912:	f7fe fb71 	bl	8000ff8 <FillRect>
			FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69d8      	ldr	r0, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2301      	movs	r3, #1
 8002926:	2201      	movs	r2, #1
 8002928:	f7fe fb66 	bl	8000ff8 <FillRect>
			FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a19      	ldr	r1, [r3, #32]
 8002934:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2301      	movs	r3, #1
 800293c:	2201      	movs	r2, #1
 800293e:	f7fe fb5b 	bl	8000ff8 <FillRect>
			FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800294a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	2201      	movs	r2, #1
 8002954:	f7fe fb50 	bl	8000ff8 <FillRect>
	        }
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	20016e97 	.word	0x20016e97

08002964 <E3_MoveX>:

void E3_MoveX(enemy_type3* enemy){
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	if (enemy->delay==0){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002970:	2b00      	cmp	r3, #0
 8002972:	d167      	bne.n	8002a44 <E3_MoveX+0xe0>
	int FutureX;
	enemy->delay=1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	651a      	str	r2, [r3, #80]	@ 0x50
	switch (enemy->Place){
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297e:	2b04      	cmp	r3, #4
 8002980:	d860      	bhi.n	8002a44 <E3_MoveX+0xe0>
 8002982:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <E3_MoveX+0x24>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	0800299d 	.word	0x0800299d
 800298c:	080029c5 	.word	0x080029c5
 8002990:	080029ed 	.word	0x080029ed
 8002994:	08002a15 	.word	0x08002a15
 8002998:	08002a3d 	.word	0x08002a3d
		case 0:
			FutureX=enemy->x+40;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3328      	adds	r3, #40	@ 0x28
 80029a2:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d806      	bhi.n	80029bc <E3_MoveX+0x58>
				enemy->x=enemy->limitwidth_i+35;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b2:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80029ba:	e043      	b.n	8002a44 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	601a      	str	r2, [r3, #0]
			break;
 80029c2:	e03f      	b.n	8002a44 <E3_MoveX+0xe0>

		case 1:
			FutureX=enemy->x-20;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3b14      	subs	r3, #20
 80029ca:	60fb      	str	r3, [r7, #12]
			if (FutureX<=enemy->limitwidth_i){
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d306      	bcc.n	80029e4 <E3_MoveX+0x80>
				enemy->x=enemy->limitwidth-35;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80029e2:	e02f      	b.n	8002a44 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
			break;
 80029ea:	e02b      	b.n	8002a44 <E3_MoveX+0xe0>
		case 2:
			FutureX=enemy->x+50;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3332      	adds	r3, #50	@ 0x32
 80029f2:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d806      	bhi.n	8002a0c <E3_MoveX+0xa8>
				enemy->x=enemy->limitwidth_i+50;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8002a0a:	e01b      	b.n	8002a44 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]
			break;
 8002a12:	e017      	b.n	8002a44 <E3_MoveX+0xe0>
		case 3:
					FutureX=enemy->x-50;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3b32      	subs	r3, #50	@ 0x32
 8002a1a:	60fb      	str	r3, [r7, #12]
					if (FutureX<=enemy->limitwidth_i){
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d306      	bcc.n	8002a34 <E3_MoveX+0xd0>
						enemy->x=enemy->limitwidth-35;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]

					} else{
						enemy->x=FutureX;
					}
					break;
 8002a32:	e007      	b.n	8002a44 <E3_MoveX+0xe0>
						enemy->x=FutureX;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
					break;
 8002a3a:	e003      	b.n	8002a44 <E3_MoveX+0xe0>
		case 4:
			enemy->Place=0;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
}
 8002a42:	e7ff      	b.n	8002a44 <E3_MoveX+0xe0>
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <initPlayer>:

/* Funciones Jugador ---------------------------------------------------*/
 void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	@ 0x28
 8002a54:	af06      	add	r7, sp, #24
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	611a      	str	r2, [r3, #16]
    player->life = life;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2202      	movs	r2, #2
 8002a92:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aa4:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <initPlayer+0x110>)
 8002ab0:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a2a      	ldr	r2, [pc, #168]	@ (8002b64 <initPlayer+0x114>)
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002ac4:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+1, player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3b08      	subs	r3, #8
 8002ad8:	4618      	mov	r0, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	3b0b      	subs	r3, #11
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9304      	str	r3, [sp, #16]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	2305      	movs	r3, #5
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	2306      	movs	r3, #6
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <initPlayer+0x118>)
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2317      	movs	r3, #23
 8002af8:	2212      	movs	r2, #18
 8002afa:	f7fe fb31 	bl	8001160 <LCD_Sprite>
    FillRect(player->x , player->y, 1, 1, 0x000000);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f7fe fa73 	bl	8000ff8 <FillRect>

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	1ad2      	subs	r2, r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	1ad2      	subs	r2, r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	1e5a      	subs	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	635a      	str	r2, [r3, #52]	@ 0x34
    FillRect(player->playerRight , player->y, 1, 1, 0x0420); //Derecha
    FillRect(player->x , player->playerUp, 1, 1, 0xFFFFFF); //Arriba
    FillRect(player->x , player->playerDown, 1, 1, 0x0420); //Abajo*/


}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40e00000 	.word	0x40e00000
 8002b64:	40400000 	.word	0x40400000
 8002b68:	20007df0 	.word	0x20007df0

08002b6c <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d851      	bhi.n	8002c22 <playerCanMove+0xb6>
 8002b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <playerCanMove+0x18>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002bb3 	.word	0x08002bb3
 8002b8c:	08002bd5 	.word	0x08002bd5
 8002b90:	08002bf7 	.word	0x08002bf7
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	1ad2      	subs	r2, r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b12      	cmp	r3, #18
 8002bac:	dc34      	bgt.n	8002c18 <playerCanMove+0xac>
			return 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e094      	b.n	8002cdc <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	441a      	add	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d825      	bhi.n	8002c1c <playerCanMove+0xb0>
			return 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e083      	b.n	8002cdc <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d816      	bhi.n	8002c20 <playerCanMove+0xb4>
			return 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e072      	b.n	8002cdc <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	1ad2      	subs	r2, r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d306      	bcc.n	8002c22 <playerCanMove+0xb6>
			return 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e061      	b.n	8002cdc <playerCanMove+0x170>
		break;
 8002c18:	bf00      	nop
 8002c1a:	e002      	b.n	8002c22 <playerCanMove+0xb6>
		break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <playerCanMove+0xb6>
		break;
 8002c20:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d126      	bne.n	8002c84 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4828      	ldr	r0, [pc, #160]	@ (8002ce4 <playerCanMove+0x178>)
 8002c42:	f7fe fd99 	bl	8001778 <ColisionPlayer_e1>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <playerCanMove+0xe4>
    	return 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e045      	b.n	8002cdc <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4823      	ldr	r0, [pc, #140]	@ (8002ce8 <playerCanMove+0x17c>)
 8002c5c:	f7fe fd8c 	bl	8001778 <ColisionPlayer_e1>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <playerCanMove+0xfe>
        	return 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e038      	b.n	8002cdc <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	481d      	ldr	r0, [pc, #116]	@ (8002cec <playerCanMove+0x180>)
 8002c76:	f7fe fd7f 	bl	8001778 <ColisionPlayer_e1>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <playerCanMove+0x118>
        	return 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e02b      	b.n	8002cdc <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d126      	bne.n	8002cda <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4816      	ldr	r0, [pc, #88]	@ (8002cf0 <playerCanMove+0x184>)
 8002c98:	f7fe fd6e 	bl	8001778 <ColisionPlayer_e1>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <playerCanMove+0x13a>
       	return 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e01a      	b.n	8002cdc <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4810      	ldr	r0, [pc, #64]	@ (8002cf4 <playerCanMove+0x188>)
 8002cb2:	f7fe fd61 	bl	8001778 <ColisionPlayer_e1>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <playerCanMove+0x154>
           	return 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e00d      	b.n	8002cdc <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	480b      	ldr	r0, [pc, #44]	@ (8002cf8 <playerCanMove+0x18c>)
 8002ccc:	f7fe fd54 	bl	8001778 <ColisionPlayer_e1>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <playerCanMove+0x16e>
           	return 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20016c7c 	.word	0x20016c7c
 8002ce8:	20016cb0 	.word	0x20016cb0
 8002cec:	20016ce4 	.word	0x20016ce4
 8002cf0:	20016d18 	.word	0x20016d18
 8002cf4:	20016d4c 	.word	0x20016d4c
 8002cf8:	20016d80 	.word	0x20016d80

08002cfc <HitboxPlayer>:

void HitboxPlayer(player* player){
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 8002d44:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HitboxPlayer+0x168>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d113      	bne.n	8002d74 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	1ad0      	subs	r0, r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	1ad1      	subs	r1, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2400      	movs	r4, #0
 8002d6e:	9400      	str	r4, [sp, #0]
 8002d70:	f7fe f91a 	bl	8000fa8 <Rect>
        }
    if (DrawHitbox==2){
 8002d74:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HitboxPlayer+0x168>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d12b      	bne.n	8002dd4 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f7fe f933 	bl	8000ff8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2301      	movs	r3, #1
 8002da2:	2201      	movs	r2, #1
 8002da4:	f7fe f928 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002db0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2301      	movs	r3, #1
 8002db8:	2201      	movs	r2, #1
 8002dba:	f7fe f91d 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dc6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f7fe f912 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8002dd4:	4b23      	ldr	r3, [pc, #140]	@ (8002e64 <HitboxPlayer+0x168>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d13f      	bne.n	8002e5c <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	1ad0      	subs	r0, r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	1ad1      	subs	r1, r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	9400      	str	r4, [sp, #0]
 8002e00:	f7fe f8d2 	bl	8000fa8 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	2201      	movs	r2, #1
 8002e16:	f7fe f8ef 	bl	8000ff8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f7fe f8e4 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e38:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	2201      	movs	r2, #1
 8002e42:	f7fe f8d9 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e4e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2301      	movs	r3, #1
 8002e56:	2201      	movs	r2, #1
 8002e58:	f7fe f8ce 	bl	8000ff8 <FillRect>

        }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	20016e97 	.word	0x20016e97

08002e68 <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 80d0 	bne.w	800301c <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	f200 80cb 	bhi.w	800301c <PlayerHit+0x1b4>
 8002e86:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <PlayerHit+0x24>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002f5b 	.word	0x08002f5b
 8002e94:	08002f01 	.word	0x08002f01
 8002e98:	08002fb5 	.word	0x08002fb5
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	3b0f      	subs	r3, #15
 8002ea2:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f0c0 80af 	bcc.w	800300e <PlayerHit+0x1a6>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	f200 80a9 	bhi.w	800300e <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	3b05      	subs	r3, #5
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f0c0 80a1 	bcc.w	800300e <PlayerHit+0x1a6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	3305      	adds	r3, #5
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f200 8099 	bhi.w	800300e <PlayerHit+0x1a6>
						enemy->health -= 1;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	1e5a      	subs	r2, r3, #1
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 808f 	bne.w	800300e <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 8002efe:	e086      	b.n	800300e <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	330f      	adds	r3, #15
 8002f06:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d37f      	bcc.n	8003012 <PlayerHit+0x1aa>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d87a      	bhi.n	8003012 <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	3b05      	subs	r3, #5
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d373      	bcc.n	8003012 <PlayerHit+0x1aa>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	3305      	adds	r3, #5
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d86c      	bhi.n	8003012 <PlayerHit+0x1aa>
						enemy->health -= 1;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d163      	bne.n	8003012 <PlayerHit+0x1aa>
							enemy->isAlive=0;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8002f58:	e05b      	b.n	8003012 <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3314      	adds	r3, #20
 8002f60:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d354      	bcc.n	8003016 <PlayerHit+0x1ae>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d84f      	bhi.n	8003016 <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	3b0f      	subs	r3, #15
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d348      	bcc.n	8003016 <PlayerHit+0x1ae>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d841      	bhi.n	8003016 <PlayerHit+0x1ae>
						enemy->health -= 1;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d138      	bne.n	8003016 <PlayerHit+0x1ae>
							enemy->isAlive=0;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8002fb2:	e030      	b.n	8003016 <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3b14      	subs	r3, #20
 8002fba:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d329      	bcc.n	800301a <PlayerHit+0x1b2>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d824      	bhi.n	800301a <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	3b0f      	subs	r3, #15
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d31d      	bcc.n	800301a <PlayerHit+0x1b2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d816      	bhi.n	800301a <PlayerHit+0x1b2>
									enemy->health -= 1;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <PlayerHit+0x1b2>
										enemy->isAlive=0;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 800300c:	e005      	b.n	800301a <PlayerHit+0x1b2>
			break;
 800300e:	bf00      	nop
 8003010:	e004      	b.n	800301c <PlayerHit+0x1b4>
				break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <PlayerHit+0x1b4>
				break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <PlayerHit+0x1b4>
							break;
 800301a:	bf00      	nop
						}
		}
	}
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <PlayerAnimation>:

void PlayerAnimation(player* player){
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af06      	add	r7, sp, #24
 800302e:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d16f      	bne.n	8003118 <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d117      	bne.n	8003070 <PlayerAnimation+0x48>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3b08      	subs	r3, #8
 8003046:	4618      	mov	r0, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	3b0d      	subs	r3, #13
 800304e:	4619      	mov	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003054:	461a      	mov	r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	9304      	str	r3, [sp, #16]
 800305a:	2300      	movs	r3, #0
 800305c:	9303      	str	r3, [sp, #12]
 800305e:	9202      	str	r2, [sp, #8]
 8003060:	230a      	movs	r3, #10
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <PlayerAnimation+0xf8>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	231a      	movs	r3, #26
 800306a:	2212      	movs	r2, #18
 800306c:	f7fe f878 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==1){
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d117      	bne.n	80030a8 <PlayerAnimation+0x80>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3b0a      	subs	r3, #10
 800307e:	4618      	mov	r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	3b0b      	subs	r3, #11
 8003086:	4619      	mov	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308c:	461a      	mov	r2, r3
 800308e:	2300      	movs	r3, #0
 8003090:	9304      	str	r3, [sp, #16]
 8003092:	2301      	movs	r3, #1
 8003094:	9303      	str	r3, [sp, #12]
 8003096:	9202      	str	r2, [sp, #8]
 8003098:	230a      	movs	r3, #10
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <PlayerAnimation+0xfc>)
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2317      	movs	r3, #23
 80030a2:	2216      	movs	r2, #22
 80030a4:	f7fe f85c 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==2){
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d117      	bne.n	80030e0 <PlayerAnimation+0xb8>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3b08      	subs	r3, #8
 80030b6:	4618      	mov	r0, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	3b0b      	subs	r3, #11
 80030be:	4619      	mov	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c4:	461a      	mov	r2, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	9304      	str	r3, [sp, #16]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9303      	str	r3, [sp, #12]
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	230a      	movs	r3, #10
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <PlayerAnimation+0x100>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2318      	movs	r3, #24
 80030da:	2212      	movs	r2, #18
 80030dc:	f7fe f840 	bl	8001160 <LCD_Sprite>
			}
		if (player->direction==3){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d117      	bne.n	8003118 <PlayerAnimation+0xf0>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3b0a      	subs	r3, #10
 80030ee:	4618      	mov	r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	3b0b      	subs	r3, #11
 80030f6:	4619      	mov	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	461a      	mov	r2, r3
 80030fe:	2300      	movs	r3, #0
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	2300      	movs	r3, #0
 8003104:	9303      	str	r3, [sp, #12]
 8003106:	9202      	str	r2, [sp, #8]
 8003108:	230a      	movs	r3, #10
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <PlayerAnimation+0xfc>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2317      	movs	r3, #23
 8003112:	2216      	movs	r2, #22
 8003114:	f7fe f824 	bl	8001160 <LCD_Sprite>
			}
	}
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20012424 	.word	0x20012424
 8003124:	2000fc9c 	.word	0x2000fc9c
 8003128:	200148b4 	.word	0x200148b4
 800312c:	00000000 	.word	0x00000000

08003130 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	@ 0x28
 8003134:	af06      	add	r7, sp, #24
 8003136:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800313e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003142:	ee17 3a90 	vmov	r3, s15
 8003146:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b01      	cmp	r3, #1
 800314e:	f040 8082 	bne.w	8003256 <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b05      	cmp	r3, #5
 8003156:	dc7b      	bgt.n	8003250 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3b08      	subs	r3, #8
 8003166:	4618      	mov	r0, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	3b0b      	subs	r3, #11
 800316e:	4619      	mov	r1, r3
 8003170:	2300      	movs	r3, #0
 8003172:	9304      	str	r3, [sp, #16]
 8003174:	2300      	movs	r3, #0
 8003176:	9303      	str	r3, [sp, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	2306      	movs	r3, #6
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <PlayerAttackAnimation+0x138>)
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2316      	movs	r3, #22
 8003186:	2212      	movs	r2, #18
 8003188:	f7fd ffea 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d115      	bne.n	80031c0 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3b09      	subs	r3, #9
 800319a:	4618      	mov	r0, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	3b0b      	subs	r3, #11
 80031a2:	4619      	mov	r1, r3
 80031a4:	2300      	movs	r3, #0
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	2301      	movs	r3, #1
 80031aa:	9303      	str	r3, [sp, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	2306      	movs	r3, #6
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <PlayerAttackAnimation+0x13c>)
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2316      	movs	r3, #22
 80031ba:	2214      	movs	r2, #20
 80031bc:	f7fd ffd0 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d115      	bne.n	80031f4 <PlayerAttackAnimation+0xc4>

				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3b08      	subs	r3, #8
 80031ce:	4618      	mov	r0, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	3b0b      	subs	r3, #11
 80031d6:	4619      	mov	r1, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	2300      	movs	r3, #0
 80031de:	9303      	str	r3, [sp, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2306      	movs	r3, #6
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <PlayerAttackAnimation+0x140>)
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2317      	movs	r3, #23
 80031ee:	2212      	movs	r2, #18
 80031f0:	f7fd ffb6 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d115      	bne.n	8003228 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3b09      	subs	r3, #9
 8003202:	4618      	mov	r0, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	3b0b      	subs	r3, #11
 800320a:	4619      	mov	r1, r3
 800320c:	2300      	movs	r3, #0
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	2300      	movs	r3, #0
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	2306      	movs	r3, #6
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	4b13      	ldr	r3, [pc, #76]	@ (800326c <PlayerAttackAnimation+0x13c>)
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2316      	movs	r3, #22
 8003222:	2214      	movs	r2, #20
 8003224:	f7fd ff9c 	bl	8001160 <LCD_Sprite>
					}
			player->animationAttack+=0.2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f94f 	bl	80004d0 <__aeabi_f2d>
 8003232:	a30b      	add	r3, pc, #44	@ (adr r3, 8003260 <PlayerAttackAnimation+0x130>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fc ffec 	bl	8000214 <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd f99c 	bl	8000580 <__aeabi_d2f>
 8003248:	4602      	mov	r2, r0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 800324e:	e002      	b.n	8003256 <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	9999999a 	.word	0x9999999a
 8003264:	3fc99999 	.word	0x3fc99999
 8003268:	2000a5f8 	.word	0x2000a5f8
 800326c:	20009158 	.word	0x20009158
 8003270:	20007df0 	.word	0x20007df0
 8003274:	00000000 	.word	0x00000000

08003278 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	@ 0x28
 800327c:	af06      	add	r7, sp, #24
 800327e:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328a:	ee17 3a90 	vmov	r3, s15
 800328e:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 8082 	bne.w	800339e <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b02      	cmp	r3, #2
 800329e:	dc7b      	bgt.n	8003398 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d115      	bne.n	80032d4 <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3b08      	subs	r3, #8
 80032ae:	4618      	mov	r0, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	3b0a      	subs	r3, #10
 80032b6:	4619      	mov	r1, r3
 80032b8:	2300      	movs	r3, #0
 80032ba:	9304      	str	r3, [sp, #16]
 80032bc:	2300      	movs	r3, #0
 80032be:	9303      	str	r3, [sp, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	2303      	movs	r3, #3
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <PlayerDamageAnimation+0x138>)
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2314      	movs	r3, #20
 80032ce:	2212      	movs	r2, #18
 80032d0:	f7fd ff46 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d115      	bne.n	8003308 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3b09      	subs	r3, #9
 80032e2:	4618      	mov	r0, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	3b0a      	subs	r3, #10
 80032ea:	4619      	mov	r1, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	2301      	movs	r3, #1
 80032f2:	9303      	str	r3, [sp, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	9302      	str	r3, [sp, #8]
 80032f8:	2303      	movs	r3, #3
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <PlayerDamageAnimation+0x13c>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2315      	movs	r3, #21
 8003302:	2214      	movs	r2, #20
 8003304:	f7fd ff2c 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d115      	bne.n	800333c <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3b09      	subs	r3, #9
 8003316:	4618      	mov	r0, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	3b0a      	subs	r3, #10
 800331e:	4619      	mov	r1, r3
 8003320:	2300      	movs	r3, #0
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	2300      	movs	r3, #0
 8003326:	9303      	str	r3, [sp, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	2303      	movs	r3, #3
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	4b21      	ldr	r3, [pc, #132]	@ (80033b8 <PlayerDamageAnimation+0x140>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2315      	movs	r3, #21
 8003336:	2214      	movs	r2, #20
 8003338:	f7fd ff12 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d115      	bne.n	8003370 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3b09      	subs	r3, #9
 800334a:	4618      	mov	r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	3b0a      	subs	r3, #10
 8003352:	4619      	mov	r1, r3
 8003354:	2300      	movs	r3, #0
 8003356:	9304      	str	r3, [sp, #16]
 8003358:	2300      	movs	r3, #0
 800335a:	9303      	str	r3, [sp, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	2303      	movs	r3, #3
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <PlayerDamageAnimation+0x13c>)
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2315      	movs	r3, #21
 800336a:	2214      	movs	r2, #20
 800336c:	f7fd fef8 	bl	8001160 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd f8ab 	bl	80004d0 <__aeabi_f2d>
 800337a:	a30b      	add	r3, pc, #44	@ (adr r3, 80033a8 <PlayerDamageAnimation+0x130>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f7fc ff48 	bl	8000214 <__adddf3>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f7fd f8f8 	bl	8000580 <__aeabi_d2f>
 8003390:	4602      	mov	r2, r0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 8003396:	e002      	b.n	800339e <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	9999999a 	.word	0x9999999a
 80033ac:	3fc99999 	.word	0x3fc99999
 80033b0:	20004fd0 	.word	0x20004fd0
 80033b4:	20005840 	.word	0x20005840
 80033b8:	20006218 	.word	0x20006218
 80033bc:	00000000 	.word	0x00000000

080033c0 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af06      	add	r7, sp, #24
 80033c6:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80033ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d2:	ee17 3a90 	vmov	r3, s15
 80033d6:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d12b      	bne.n	8003438 <PlayerDieAnimation+0x78>
		if (variableAnimationDie<4){
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	dc28      	bgt.n	8003438 <PlayerDieAnimation+0x78>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3b0b      	subs	r3, #11
 80033ec:	4618      	mov	r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	3b0c      	subs	r3, #12
 80033f4:	4619      	mov	r1, r3
 80033f6:	2300      	movs	r3, #0
 80033f8:	9304      	str	r3, [sp, #16]
 80033fa:	2300      	movs	r3, #0
 80033fc:	9303      	str	r3, [sp, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	9302      	str	r3, [sp, #8]
 8003402:	2304      	movs	r3, #4
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <PlayerDieAnimation+0x88>)
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2318      	movs	r3, #24
 800340c:	2218      	movs	r2, #24
 800340e:	f7fd fea7 	bl	8001160 <LCD_Sprite>
			player->animationDie+=0.2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f85a 	bl	80004d0 <__aeabi_f2d>
 800341c:	a308      	add	r3, pc, #32	@ (adr r3, 8003440 <PlayerDieAnimation+0x80>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fc fef7 	bl	8000214 <__adddf3>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	f7fd f8a7 	bl	8000580 <__aeabi_d2f>
 8003432:	4602      	mov	r2, r0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	9999999a 	.word	0x9999999a
 8003444:	3fc99999 	.word	0x3fc99999
 8003448:	20006bf0 	.word	0x20006bf0

0800344c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8003452:	f001 fa05 	bl	8004860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003456:	f000 fabd 	bl	80039d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800345a:	f000 fbb1 	bl	8003bc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800345e:	f000 fb25 	bl	8003aac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003462:	f000 fb83 	bl	8003b6c <MX_USART2_UART_Init>
  MX_UART5_Init();
 8003466:	f000 fb57 	bl	8003b18 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 800346a:	f7fd fa51 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fcd6 	bl	8000e20 <LCD_Clear>

	//Fondo
	//FillRect(0, 0, 319, 239, 0xFFFF);
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8003474:	4baa      	ldr	r3, [pc, #680]	@ (8003720 <main+0x2d4>)
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	23f0      	movs	r3, #240	@ 0xf0
 800347a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800347e:	2100      	movs	r1, #0
 8003480:	2000      	movs	r0, #0
 8003482:	f7fd fe13 	bl	80010ac <LCD_Bitmap>

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	// Activar bandera interrupcion
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8003486:	2201      	movs	r2, #1
 8003488:	49a6      	ldr	r1, [pc, #664]	@ (8003724 <main+0x2d8>)
 800348a:	48a7      	ldr	r0, [pc, #668]	@ (8003728 <main+0x2dc>)
 800348c:	f002 fc0b 	bl	8005ca6 <HAL_UART_Receive_IT>

	//EstadoJuego estadoActual = SOLO;
	//LevelPlaying nivelActual1 = NIVEL3;
	//LevelPlaying nivelActual2 = NIVEL2;
	estadoActual = SOLO;
 8003490:	4ba6      	ldr	r3, [pc, #664]	@ (800372c <main+0x2e0>)
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
	nivelActual1 = NIVEL3;
 8003496:	4ba6      	ldr	r3, [pc, #664]	@ (8003730 <main+0x2e4>)
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
	modo = 0;
 800349c:	4ba5      	ldr	r3, [pc, #660]	@ (8003734 <main+0x2e8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
    fase_p1=1;
 80034a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003738 <main+0x2ec>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    fase_p2=1;
 80034a8:	4ba4      	ldr	r3, [pc, #656]	@ (800373c <main+0x2f0>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]


  	if (estadoActual == SOLO){
 80034ae:	4b9f      	ldr	r3, [pc, #636]	@ (800372c <main+0x2e0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d172      	bne.n	800359e <main+0x152>
	//Inicializar Jugador 1
	initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80034b8:	2312      	movs	r3, #18
 80034ba:	9305      	str	r3, [sp, #20]
 80034bc:	23dc      	movs	r3, #220	@ 0xdc
 80034be:	9304      	str	r3, [sp, #16]
 80034c0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	2303      	movs	r3, #3
 80034c8:	9302      	str	r3, [sp, #8]
 80034ca:	2305      	movs	r3, #5
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	231e      	movs	r3, #30
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2316      	movs	r3, #22
 80034d4:	22c8      	movs	r2, #200	@ 0xc8
 80034d6:	21a0      	movs	r1, #160	@ 0xa0
 80034d8:	4899      	ldr	r0, [pc, #612]	@ (8003740 <main+0x2f4>)
 80034da:	f7ff fab9 	bl	8002a50 <initPlayer>
	initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80034de:	2312      	movs	r3, #18
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	23dc      	movs	r3, #220	@ 0xdc
 80034e4:	9304      	str	r3, [sp, #16]
 80034e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80034ea:	9303      	str	r3, [sp, #12]
 80034ec:	2303      	movs	r3, #3
 80034ee:	9302      	str	r3, [sp, #8]
 80034f0:	2305      	movs	r3, #5
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	231e      	movs	r3, #30
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2316      	movs	r3, #22
 80034fa:	22c8      	movs	r2, #200	@ 0xc8
 80034fc:	21a0      	movs	r1, #160	@ 0xa0
 80034fe:	4891      	ldr	r0, [pc, #580]	@ (8003744 <main+0x2f8>)
 8003500:	f7ff faa6 	bl	8002a50 <initPlayer>
	p1.PlayerNum=1;
 8003504:	4b8e      	ldr	r3, [pc, #568]	@ (8003740 <main+0x2f4>)
 8003506:	2201      	movs	r2, #1
 8003508:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 800350a:	4b8e      	ldr	r3, [pc, #568]	@ (8003744 <main+0x2f8>)
 800350c:	2202      	movs	r2, #2
 800350e:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.isAlive=0;
 8003510:	4b8c      	ldr	r3, [pc, #560]	@ (8003744 <main+0x2f8>)
 8003512:	2200      	movs	r2, #0
 8003514:	61da      	str	r2, [r3, #28]

	if (nivelActual1==NIVEL1){
 8003516:	4b86      	ldr	r3, [pc, #536]	@ (8003730 <main+0x2e4>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11e      	bne.n	800355e <main+0x112>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8003520:	2303      	movs	r3, #3
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2313      	movs	r3, #19
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2310      	movs	r3, #16
 800352a:	2250      	movs	r2, #80	@ 0x50
 800352c:	2128      	movs	r1, #40	@ 0x28
 800352e:	4886      	ldr	r0, [pc, #536]	@ (8003748 <main+0x2fc>)
 8003530:	f7fe f830 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8003534:	2303      	movs	r3, #3
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	2313      	movs	r3, #19
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2310      	movs	r3, #16
 800353e:	2250      	movs	r2, #80	@ 0x50
 8003540:	21a0      	movs	r1, #160	@ 0xa0
 8003542:	4882      	ldr	r0, [pc, #520]	@ (800374c <main+0x300>)
 8003544:	f7fe f826 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8003548:	2303      	movs	r3, #3
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	2313      	movs	r3, #19
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2310      	movs	r3, #16
 8003552:	2250      	movs	r2, #80	@ 0x50
 8003554:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003558:	487d      	ldr	r0, [pc, #500]	@ (8003750 <main+0x304>)
 800355a:	f7fe f81b 	bl	8001594 <initEnemy1>

	  if (nivelActual1==NIVEL2){
 800355e:	4b74      	ldr	r3, [pc, #464]	@ (8003730 <main+0x2e4>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d109      	bne.n	800357c <main+0x130>
		  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 8003568:	2303      	movs	r3, #3
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	2314      	movs	r3, #20
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2310      	movs	r3, #16
 8003572:	2250      	movs	r2, #80	@ 0x50
 8003574:	21a0      	movs	r1, #160	@ 0xa0
 8003576:	4877      	ldr	r0, [pc, #476]	@ (8003754 <main+0x308>)
 8003578:	f7fe fc30 	bl	8001ddc <initEnemy2>
		  }

	  if (nivelActual1==NIVEL3){
 800357c:	4b6c      	ldr	r3, [pc, #432]	@ (8003730 <main+0x2e4>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d10b      	bne.n	800359e <main+0x152>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 8003586:	4b6e      	ldr	r3, [pc, #440]	@ (8003740 <main+0x2f4>)
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	230f      	movs	r3, #15
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	230f      	movs	r3, #15
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	230f      	movs	r3, #15
 8003594:	221e      	movs	r2, #30
 8003596:	2150      	movs	r1, #80	@ 0x50
 8003598:	486f      	ldr	r0, [pc, #444]	@ (8003758 <main+0x30c>)
 800359a:	f7fe ff6b 	bl	8002474 <initEnemy3>
	  	  }
	  }
  if (estadoActual==DUO){
 800359e:	4b63      	ldr	r3, [pc, #396]	@ (800372c <main+0x2e0>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	f040 809c 	bne.w	80036e2 <main+0x296>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 80035aa:	2300      	movs	r3, #0
 80035ac:	22f0      	movs	r2, #240	@ 0xf0
 80035ae:	2100      	movs	r1, #0
 80035b0:	20a0      	movs	r0, #160	@ 0xa0
 80035b2:	f7fd fcb9 	bl	8000f28 <V_line>
	initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 80035b6:	2312      	movs	r3, #18
 80035b8:	9305      	str	r3, [sp, #20]
 80035ba:	23dc      	movs	r3, #220	@ 0xdc
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	23a0      	movs	r3, #160	@ 0xa0
 80035c0:	9303      	str	r3, [sp, #12]
 80035c2:	2303      	movs	r3, #3
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	2305      	movs	r3, #5
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	231e      	movs	r3, #30
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2316      	movs	r3, #22
 80035d0:	22c8      	movs	r2, #200	@ 0xc8
 80035d2:	2150      	movs	r1, #80	@ 0x50
 80035d4:	485a      	ldr	r0, [pc, #360]	@ (8003740 <main+0x2f4>)
 80035d6:	f7ff fa3b 	bl	8002a50 <initPlayer>
	initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 80035da:	23a0      	movs	r3, #160	@ 0xa0
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	23dc      	movs	r3, #220	@ 0xdc
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80035e6:	9303      	str	r3, [sp, #12]
 80035e8:	2303      	movs	r3, #3
 80035ea:	9302      	str	r3, [sp, #8]
 80035ec:	2305      	movs	r3, #5
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	231e      	movs	r3, #30
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2316      	movs	r3, #22
 80035f6:	22c8      	movs	r2, #200	@ 0xc8
 80035f8:	21f0      	movs	r1, #240	@ 0xf0
 80035fa:	4852      	ldr	r0, [pc, #328]	@ (8003744 <main+0x2f8>)
 80035fc:	f7ff fa28 	bl	8002a50 <initPlayer>
	p1.PlayerNum=1;
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <main+0x2f4>)
 8003602:	2201      	movs	r2, #1
 8003604:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 8003606:	4b4f      	ldr	r3, [pc, #316]	@ (8003744 <main+0x2f8>)
 8003608:	2202      	movs	r2, #2
 800360a:	671a      	str	r2, [r3, #112]	@ 0x70

	if (nivelActual1==NIVEL1){
 800360c:	4b48      	ldr	r3, [pc, #288]	@ (8003730 <main+0x2e4>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <main+0x206>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 30, 80, 16, 19, 3);
 8003616:	2303      	movs	r3, #3
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	2313      	movs	r3, #19
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2310      	movs	r3, #16
 8003620:	2250      	movs	r2, #80	@ 0x50
 8003622:	211e      	movs	r1, #30
 8003624:	4848      	ldr	r0, [pc, #288]	@ (8003748 <main+0x2fc>)
 8003626:	f7fd ffb5 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2,90, 100, 16, 19, 3);
 800362a:	2303      	movs	r3, #3
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2313      	movs	r3, #19
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2310      	movs	r3, #16
 8003634:	2264      	movs	r2, #100	@ 0x64
 8003636:	215a      	movs	r1, #90	@ 0x5a
 8003638:	4844      	ldr	r0, [pc, #272]	@ (800374c <main+0x300>)
 800363a:	f7fd ffab 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3,150, 120, 16, 19, 3);}
 800363e:	2303      	movs	r3, #3
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2313      	movs	r3, #19
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2310      	movs	r3, #16
 8003648:	2278      	movs	r2, #120	@ 0x78
 800364a:	2196      	movs	r1, #150	@ 0x96
 800364c:	4840      	ldr	r0, [pc, #256]	@ (8003750 <main+0x304>)
 800364e:	f7fd ffa1 	bl	8001594 <initEnemy1>
	  if (nivelActual1==NIVEL2){
 8003652:	4b37      	ldr	r3, [pc, #220]	@ (8003730 <main+0x2e4>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d109      	bne.n	8003670 <main+0x224>
		  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 800365c:	2303      	movs	r3, #3
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2314      	movs	r3, #20
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2310      	movs	r3, #16
 8003666:	2250      	movs	r2, #80	@ 0x50
 8003668:	215a      	movs	r1, #90	@ 0x5a
 800366a:	483a      	ldr	r0, [pc, #232]	@ (8003754 <main+0x308>)
 800366c:	f7fe fbb6 	bl	8001ddc <initEnemy2>
		  }
	  if (nivelActual2==NIVEL1){
 8003670:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <main+0x310>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11e      	bne.n	80036b8 <main+0x26c>
	  			//Inicializar enemigo 1
	  			initEnemy1(&e1_4, 170, 120, 16, 19, 3);
 800367a:	2303      	movs	r3, #3
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2313      	movs	r3, #19
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2310      	movs	r3, #16
 8003684:	2278      	movs	r2, #120	@ 0x78
 8003686:	21aa      	movs	r1, #170	@ 0xaa
 8003688:	4835      	ldr	r0, [pc, #212]	@ (8003760 <main+0x314>)
 800368a:	f7fd ff83 	bl	8001594 <initEnemy1>
	  			//Inicializar enemigo 2
	  			initEnemy1(&e1_5,230, 100, 16, 19, 3);
 800368e:	2303      	movs	r3, #3
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	2313      	movs	r3, #19
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2310      	movs	r3, #16
 8003698:	2264      	movs	r2, #100	@ 0x64
 800369a:	21e6      	movs	r1, #230	@ 0xe6
 800369c:	4831      	ldr	r0, [pc, #196]	@ (8003764 <main+0x318>)
 800369e:	f7fd ff79 	bl	8001594 <initEnemy1>
	  			//Inicializar enemigo 3
	  			initEnemy1(&e1_6,290, 80, 16, 19, 3);
 80036a2:	2303      	movs	r3, #3
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	2313      	movs	r3, #19
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2310      	movs	r3, #16
 80036ac:	2250      	movs	r2, #80	@ 0x50
 80036ae:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80036b2:	482d      	ldr	r0, [pc, #180]	@ (8003768 <main+0x31c>)
 80036b4:	f7fd ff6e 	bl	8001594 <initEnemy1>
	    }

	  if (nivelActual2==NIVEL2){
 80036b8:	4b28      	ldr	r3, [pc, #160]	@ (800375c <main+0x310>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d109      	bne.n	80036d6 <main+0x28a>
	  	  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 80036c2:	2303      	movs	r3, #3
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2314      	movs	r3, #20
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2310      	movs	r3, #16
 80036cc:	2250      	movs	r2, #80	@ 0x50
 80036ce:	21e6      	movs	r1, #230	@ 0xe6
 80036d0:	4826      	ldr	r0, [pc, #152]	@ (800376c <main+0x320>)
 80036d2:	f7fe fb83 	bl	8001ddc <initEnemy2>
	  }
	  HitboxPlayer(&p1);
 80036d6:	481a      	ldr	r0, [pc, #104]	@ (8003740 <main+0x2f4>)
 80036d8:	f7ff fb10 	bl	8002cfc <HitboxPlayer>
	  HitboxPlayer(&p2);
 80036dc:	4819      	ldr	r0, [pc, #100]	@ (8003744 <main+0x2f8>)
 80036de:	f7ff fb0d 	bl	8002cfc <HitboxPlayer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch(estadoActual){
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <main+0x2e0>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	f200 8156 	bhi.w	800399a <main+0x54e>
 80036ee:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <main+0x2a8>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003709 	.word	0x08003709
 80036f8:	08003771 	.word	0x08003771
 80036fc:	0800383f 	.word	0x0800383f
 8003700:	08003985 	.word	0x08003985
 8003704:	0800399b 	.word	0x0800399b
		case MENU:
			FillRect(0, 0, 319, 239, 0xFF00);
 8003708:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	23ef      	movs	r3, #239	@ 0xef
 8003710:	f240 123f 	movw	r2, #319	@ 0x13f
 8003714:	2100      	movs	r1, #0
 8003716:	2000      	movs	r0, #0
 8003718:	f7fd fc6e 	bl	8000ff8 <FillRect>
			break;
 800371c:	e13e      	b.n	800399c <main+0x550>
 800371e:	bf00      	nop
 8003720:	08006b5c 	.word	0x08006b5c
 8003724:	20016b88 	.word	0x20016b88
 8003728:	20016b40 	.word	0x20016b40
 800372c:	20016a74 	.word	0x20016a74
 8003730:	20016e98 	.word	0x20016e98
 8003734:	20016e94 	.word	0x20016e94
 8003738:	20016e95 	.word	0x20016e95
 800373c:	20016e96 	.word	0x20016e96
 8003740:	20016b94 	.word	0x20016b94
 8003744:	20016c08 	.word	0x20016c08
 8003748:	20016c7c 	.word	0x20016c7c
 800374c:	20016cb0 	.word	0x20016cb0
 8003750:	20016ce4 	.word	0x20016ce4
 8003754:	20016db4 	.word	0x20016db4
 8003758:	20016e3c 	.word	0x20016e3c
 800375c:	20016e99 	.word	0x20016e99
 8003760:	20016d18 	.word	0x20016d18
 8003764:	20016d4c 	.word	0x20016d4c
 8003768:	20016d80 	.word	0x20016d80
 800376c:	20016df8 	.word	0x20016df8
		case SOLO:
			if (nivelActual1==NIVEL1){
 8003770:	4b8b      	ldr	r3, [pc, #556]	@ (80039a0 <main+0x554>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d126      	bne.n	80037c8 <main+0x37c>
					if(e1_1.isAlive==1){
 800377a:	4b8a      	ldr	r3, [pc, #552]	@ (80039a4 <main+0x558>)
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <main+0x342>
							animation_e1(&e1_1);
 8003782:	4888      	ldr	r0, [pc, #544]	@ (80039a4 <main+0x558>)
 8003784:	f7fd fdec 	bl	8001360 <animation_e1>
							animation_e1_control(&e1_1);}
 8003788:	4886      	ldr	r0, [pc, #536]	@ (80039a4 <main+0x558>)
 800378a:	f7fd fd95 	bl	80012b8 <animation_e1_control>
					if(e1_2.isAlive==1){
 800378e:	4b86      	ldr	r3, [pc, #536]	@ (80039a8 <main+0x55c>)
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <main+0x356>
						animation_e1(&e1_2);
 8003796:	4884      	ldr	r0, [pc, #528]	@ (80039a8 <main+0x55c>)
 8003798:	f7fd fde2 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_2);}
 800379c:	4882      	ldr	r0, [pc, #520]	@ (80039a8 <main+0x55c>)
 800379e:	f7fd fd8b 	bl	80012b8 <animation_e1_control>

					if(e1_2.isAlive==1){
 80037a2:	4b81      	ldr	r3, [pc, #516]	@ (80039a8 <main+0x55c>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <main+0x36a>
						animation_e1(&e1_3);
 80037aa:	4880      	ldr	r0, [pc, #512]	@ (80039ac <main+0x560>)
 80037ac:	f7fd fdd8 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_3);}
 80037b0:	487e      	ldr	r0, [pc, #504]	@ (80039ac <main+0x560>)
 80037b2:	f7fd fd81 	bl	80012b8 <animation_e1_control>

					animation_e1_die(&e1_1);
 80037b6:	487b      	ldr	r0, [pc, #492]	@ (80039a4 <main+0x558>)
 80037b8:	f7fd fe9a 	bl	80014f0 <animation_e1_die>
					animation_e1_die(&e1_2);
 80037bc:	487a      	ldr	r0, [pc, #488]	@ (80039a8 <main+0x55c>)
 80037be:	f7fd fe97 	bl	80014f0 <animation_e1_die>
					animation_e1_die(&e1_3);
 80037c2:	487a      	ldr	r0, [pc, #488]	@ (80039ac <main+0x560>)
 80037c4:	f7fd fe94 	bl	80014f0 <animation_e1_die>
				}

			if (nivelActual1==NIVEL2){
 80037c8:	4b75      	ldr	r3, [pc, #468]	@ (80039a0 <main+0x554>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d116      	bne.n	8003800 <main+0x3b4>
				moveE2(&e2_1, &p1);
 80037d2:	4977      	ldr	r1, [pc, #476]	@ (80039b0 <main+0x564>)
 80037d4:	4877      	ldr	r0, [pc, #476]	@ (80039b4 <main+0x568>)
 80037d6:	f7fe fb3b 	bl	8001e50 <moveE2>
				e2_1.delay+=0.5; //1
 80037da:	4b76      	ldr	r3, [pc, #472]	@ (80039b4 <main+0x568>)
 80037dc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80037e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037e8:	4b72      	ldr	r3, [pc, #456]	@ (80039b4 <main+0x568>)
 80037ea:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_1);
 80037ee:	4871      	ldr	r0, [pc, #452]	@ (80039b4 <main+0x568>)
 80037f0:	f7fe fc4a 	bl	8002088 <E2_Appear>
				E2_Hurt(&e2_1);
 80037f4:	486f      	ldr	r0, [pc, #444]	@ (80039b4 <main+0x568>)
 80037f6:	f7fe fc8f 	bl	8002118 <E2_Hurt>
				E2_Die(&e2_1);
 80037fa:	486e      	ldr	r0, [pc, #440]	@ (80039b4 <main+0x568>)
 80037fc:	f7fe fcdc 	bl	80021b8 <E2_Die>
			}

			if (nivelActual1==NIVEL3){
 8003800:	4b67      	ldr	r3, [pc, #412]	@ (80039a0 <main+0x554>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d10f      	bne.n	800382a <main+0x3de>
				E3_MoveX(&e3_1);
 800380a:	486b      	ldr	r0, [pc, #428]	@ (80039b8 <main+0x56c>)
 800380c:	f7ff f8aa 	bl	8002964 <E3_MoveX>
				E3_Eye(&e3_1);
 8003810:	4869      	ldr	r0, [pc, #420]	@ (80039b8 <main+0x56c>)
 8003812:	f7fe fe79 	bl	8002508 <E3_Eye>
				E3_FireMove(&e3_1,&p1);
 8003816:	4966      	ldr	r1, [pc, #408]	@ (80039b0 <main+0x564>)
 8003818:	4867      	ldr	r0, [pc, #412]	@ (80039b8 <main+0x56c>)
 800381a:	f7fe feef 	bl	80025fc <E3_FireMove>
				E3_Hitbox(&e3_1);
 800381e:	4866      	ldr	r0, [pc, #408]	@ (80039b8 <main+0x56c>)
 8003820:	f7fe ffea 	bl	80027f8 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8003824:	4864      	ldr	r0, [pc, #400]	@ (80039b8 <main+0x56c>)
 8003826:	f7fe ffaf 	bl	8002788 <E3_FireAnimation>


			}

			PlayerAttackAnimation(&p1);
 800382a:	4861      	ldr	r0, [pc, #388]	@ (80039b0 <main+0x564>)
 800382c:	f7ff fc80 	bl	8003130 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8003830:	485f      	ldr	r0, [pc, #380]	@ (80039b0 <main+0x564>)
 8003832:	f7ff fd21 	bl	8003278 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 8003836:	485e      	ldr	r0, [pc, #376]	@ (80039b0 <main+0x564>)
 8003838:	f7ff fdc2 	bl	80033c0 <PlayerDieAnimation>
			break;
 800383c:	e0ae      	b.n	800399c <main+0x550>
		case DUO:
			if (nivelActual1==NIVEL1){
 800383e:	4b58      	ldr	r3, [pc, #352]	@ (80039a0 <main+0x554>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d126      	bne.n	8003896 <main+0x44a>
				if(e1_1.isAlive==1){
 8003848:	4b56      	ldr	r3, [pc, #344]	@ (80039a4 <main+0x558>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <main+0x410>
						animation_e1(&e1_1);
 8003850:	4854      	ldr	r0, [pc, #336]	@ (80039a4 <main+0x558>)
 8003852:	f7fd fd85 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_1);
 8003856:	4853      	ldr	r0, [pc, #332]	@ (80039a4 <main+0x558>)
 8003858:	f7fd fd2e 	bl	80012b8 <animation_e1_control>
				}
				if(e1_2.isAlive==1){
 800385c:	4b52      	ldr	r3, [pc, #328]	@ (80039a8 <main+0x55c>)
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <main+0x424>
					animation_e1(&e1_2);
 8003864:	4850      	ldr	r0, [pc, #320]	@ (80039a8 <main+0x55c>)
 8003866:	f7fd fd7b 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_2);
 800386a:	484f      	ldr	r0, [pc, #316]	@ (80039a8 <main+0x55c>)
 800386c:	f7fd fd24 	bl	80012b8 <animation_e1_control>
				}
				if(e1_2.isAlive==1){
 8003870:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <main+0x55c>)
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <main+0x438>
					animation_e1(&e1_3);
 8003878:	484c      	ldr	r0, [pc, #304]	@ (80039ac <main+0x560>)
 800387a:	f7fd fd71 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_3);
 800387e:	484b      	ldr	r0, [pc, #300]	@ (80039ac <main+0x560>)
 8003880:	f7fd fd1a 	bl	80012b8 <animation_e1_control>
				}
				animation_e1_die(&e1_1);
 8003884:	4847      	ldr	r0, [pc, #284]	@ (80039a4 <main+0x558>)
 8003886:	f7fd fe33 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_2);
 800388a:	4847      	ldr	r0, [pc, #284]	@ (80039a8 <main+0x55c>)
 800388c:	f7fd fe30 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_3);
 8003890:	4846      	ldr	r0, [pc, #280]	@ (80039ac <main+0x560>)
 8003892:	f7fd fe2d 	bl	80014f0 <animation_e1_die>
			}
			if (nivelActual1==NIVEL2){
 8003896:	4b42      	ldr	r3, [pc, #264]	@ (80039a0 <main+0x554>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d116      	bne.n	80038ce <main+0x482>
							moveE2(&e2_1, &p1);
 80038a0:	4943      	ldr	r1, [pc, #268]	@ (80039b0 <main+0x564>)
 80038a2:	4844      	ldr	r0, [pc, #272]	@ (80039b4 <main+0x568>)
 80038a4:	f7fe fad4 	bl	8001e50 <moveE2>
							e2_1.delay+=0.5; //1
 80038a8:	4b42      	ldr	r3, [pc, #264]	@ (80039b4 <main+0x568>)
 80038aa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80038ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038b6:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <main+0x568>)
 80038b8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
							E2_Appear(&e2_1);
 80038bc:	483d      	ldr	r0, [pc, #244]	@ (80039b4 <main+0x568>)
 80038be:	f7fe fbe3 	bl	8002088 <E2_Appear>
							E2_Hurt(&e2_1);
 80038c2:	483c      	ldr	r0, [pc, #240]	@ (80039b4 <main+0x568>)
 80038c4:	f7fe fc28 	bl	8002118 <E2_Hurt>
							E2_Die(&e2_1);
 80038c8:	483a      	ldr	r0, [pc, #232]	@ (80039b4 <main+0x568>)
 80038ca:	f7fe fc75 	bl	80021b8 <E2_Die>
						}


			if (nivelActual2==NIVEL1){
 80038ce:	4b3b      	ldr	r3, [pc, #236]	@ (80039bc <main+0x570>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d126      	bne.n	8003926 <main+0x4da>
				if(e1_4.isAlive==1){
 80038d8:	4b39      	ldr	r3, [pc, #228]	@ (80039c0 <main+0x574>)
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <main+0x4a0>
						animation_e1(&e1_4);
 80038e0:	4837      	ldr	r0, [pc, #220]	@ (80039c0 <main+0x574>)
 80038e2:	f7fd fd3d 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_4);
 80038e6:	4836      	ldr	r0, [pc, #216]	@ (80039c0 <main+0x574>)
 80038e8:	f7fd fce6 	bl	80012b8 <animation_e1_control>
				}
				if(e1_5.isAlive==1){
 80038ec:	4b35      	ldr	r3, [pc, #212]	@ (80039c4 <main+0x578>)
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <main+0x4b4>
					animation_e1(&e1_5);
 80038f4:	4833      	ldr	r0, [pc, #204]	@ (80039c4 <main+0x578>)
 80038f6:	f7fd fd33 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_5);
 80038fa:	4832      	ldr	r0, [pc, #200]	@ (80039c4 <main+0x578>)
 80038fc:	f7fd fcdc 	bl	80012b8 <animation_e1_control>
				}
				if(e1_6.isAlive==1){
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <main+0x57c>)
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <main+0x4c8>
				animation_e1(&e1_6);
 8003908:	482f      	ldr	r0, [pc, #188]	@ (80039c8 <main+0x57c>)
 800390a:	f7fd fd29 	bl	8001360 <animation_e1>
				animation_e1_control(&e1_6);
 800390e:	482e      	ldr	r0, [pc, #184]	@ (80039c8 <main+0x57c>)
 8003910:	f7fd fcd2 	bl	80012b8 <animation_e1_control>
				}
				animation_e1_die(&e1_4);
 8003914:	482a      	ldr	r0, [pc, #168]	@ (80039c0 <main+0x574>)
 8003916:	f7fd fdeb 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_5);
 800391a:	482a      	ldr	r0, [pc, #168]	@ (80039c4 <main+0x578>)
 800391c:	f7fd fde8 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_6);
 8003920:	4829      	ldr	r0, [pc, #164]	@ (80039c8 <main+0x57c>)
 8003922:	f7fd fde5 	bl	80014f0 <animation_e1_die>
			}

			if (nivelActual2==NIVEL2){
 8003926:	4b25      	ldr	r3, [pc, #148]	@ (80039bc <main+0x570>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d116      	bne.n	800395e <main+0x512>
				moveE2(&e2_2, &p2);
 8003930:	4926      	ldr	r1, [pc, #152]	@ (80039cc <main+0x580>)
 8003932:	4827      	ldr	r0, [pc, #156]	@ (80039d0 <main+0x584>)
 8003934:	f7fe fa8c 	bl	8001e50 <moveE2>
				e2_2.delay+=0.5; //1
 8003938:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <main+0x584>)
 800393a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800393e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003946:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <main+0x584>)
 8003948:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_2);
 800394c:	4820      	ldr	r0, [pc, #128]	@ (80039d0 <main+0x584>)
 800394e:	f7fe fb9b 	bl	8002088 <E2_Appear>
				E2_Hurt(&e2_2);
 8003952:	481f      	ldr	r0, [pc, #124]	@ (80039d0 <main+0x584>)
 8003954:	f7fe fbe0 	bl	8002118 <E2_Hurt>
				E2_Die(&e2_2);
 8003958:	481d      	ldr	r0, [pc, #116]	@ (80039d0 <main+0x584>)
 800395a:	f7fe fc2d 	bl	80021b8 <E2_Die>
			}


			PlayerAttackAnimation(&p1);
 800395e:	4814      	ldr	r0, [pc, #80]	@ (80039b0 <main+0x564>)
 8003960:	f7ff fbe6 	bl	8003130 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8003964:	4812      	ldr	r0, [pc, #72]	@ (80039b0 <main+0x564>)
 8003966:	f7ff fc87 	bl	8003278 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 800396a:	4811      	ldr	r0, [pc, #68]	@ (80039b0 <main+0x564>)
 800396c:	f7ff fd28 	bl	80033c0 <PlayerDieAnimation>

			PlayerAttackAnimation(&p2);
 8003970:	4816      	ldr	r0, [pc, #88]	@ (80039cc <main+0x580>)
 8003972:	f7ff fbdd 	bl	8003130 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p2);
 8003976:	4815      	ldr	r0, [pc, #84]	@ (80039cc <main+0x580>)
 8003978:	f7ff fc7e 	bl	8003278 <PlayerDamageAnimation>
			PlayerDieAnimation(&p2);
 800397c:	4813      	ldr	r0, [pc, #76]	@ (80039cc <main+0x580>)
 800397e:	f7ff fd1f 	bl	80033c0 <PlayerDieAnimation>
			break;
 8003982:	e00b      	b.n	800399c <main+0x550>
		case PAUSA:
			FillRect(0, 0, 319, 239, 0xFFFF);
 8003984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	23ef      	movs	r3, #239	@ 0xef
 800398c:	f240 123f 	movw	r2, #319	@ 0x13f
 8003990:	2100      	movs	r1, #0
 8003992:	2000      	movs	r0, #0
 8003994:	f7fd fb30 	bl	8000ff8 <FillRect>
			break;
 8003998:	e000      	b.n	800399c <main+0x550>
		case FIN:
			break;
		default:
			break;
 800399a:	bf00      	nop
		switch(estadoActual){
 800399c:	e6a1      	b.n	80036e2 <main+0x296>
 800399e:	bf00      	nop
 80039a0:	20016e98 	.word	0x20016e98
 80039a4:	20016c7c 	.word	0x20016c7c
 80039a8:	20016cb0 	.word	0x20016cb0
 80039ac:	20016ce4 	.word	0x20016ce4
 80039b0:	20016b94 	.word	0x20016b94
 80039b4:	20016db4 	.word	0x20016db4
 80039b8:	20016e3c 	.word	0x20016e3c
 80039bc:	20016e99 	.word	0x20016e99
 80039c0:	20016d18 	.word	0x20016d18
 80039c4:	20016d4c 	.word	0x20016d4c
 80039c8:	20016d80 	.word	0x20016d80
 80039cc:	20016c08 	.word	0x20016c08
 80039d0:	20016df8 	.word	0x20016df8

080039d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b094      	sub	sp, #80	@ 0x50
 80039d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	2234      	movs	r2, #52	@ 0x34
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 f882 	bl	8006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	4b29      	ldr	r3, [pc, #164]	@ (8003aa4 <SystemClock_Config+0xd0>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <SystemClock_Config+0xd0>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a08:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <SystemClock_Config+0xd0>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a14:	2300      	movs	r3, #0
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4b23      	ldr	r3, [pc, #140]	@ (8003aa8 <SystemClock_Config+0xd4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003a20:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <SystemClock_Config+0xd4>)
 8003a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa8 <SystemClock_Config+0xd4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a34:	2302      	movs	r3, #2
 8003a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a40:	2302      	movs	r3, #2
 8003a42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a44:	2300      	movs	r3, #0
 8003a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a48:	2308      	movs	r3, #8
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003a4c:	2350      	movs	r3, #80	@ 0x50
 8003a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a50:	2302      	movs	r3, #2
 8003a52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a54:	2302      	movs	r3, #2
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fda9 	bl	80055b8 <HAL_RCC_OscConfig>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003a6c:	f000 fd54 	bl	8004518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a70:	230f      	movs	r3, #15
 8003a72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a74:	2302      	movs	r3, #2
 8003a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 facf 	bl	8005030 <HAL_RCC_ClockConfig>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003a98:	f000 fd3e 	bl	8004518 <Error_Handler>
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3750      	adds	r7, #80	@ 0x50
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40007000 	.word	0x40007000

08003aac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ab0:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <MX_SPI1_Init+0x68>)
 8003ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ab6:	4b16      	ldr	r3, [pc, #88]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ab8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003abc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003abe:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aca:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003adc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ade:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003af6:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003af8:	220a      	movs	r2, #10
 8003afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003afc:	4804      	ldr	r0, [pc, #16]	@ (8003b10 <MX_SPI1_Init+0x64>)
 8003afe:	f001 fff9 	bl	8005af4 <HAL_SPI_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b08:	f000 fd06 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20016aa0 	.word	0x20016aa0
 8003b14:	40013000 	.word	0x40013000

08003b18 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <MX_UART5_Init+0x50>)
 8003b20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b3e:	220c      	movs	r2, #12
 8003b40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b42:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b4e:	4805      	ldr	r0, [pc, #20]	@ (8003b64 <MX_UART5_Init+0x4c>)
 8003b50:	f002 f859 	bl	8005c06 <HAL_UART_Init>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003b5a:	f000 fcdd 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20016af8 	.word	0x20016af8
 8003b68:	40005000 	.word	0x40005000

08003b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b70:	4b11      	ldr	r3, [pc, #68]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b72:	4a12      	ldr	r2, [pc, #72]	@ (8003bbc <MX_USART2_UART_Init+0x50>)
 8003b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b76:	4b10      	ldr	r3, [pc, #64]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b90:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b92:	220c      	movs	r2, #12
 8003b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b96:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ba2:	4805      	ldr	r0, [pc, #20]	@ (8003bb8 <MX_USART2_UART_Init+0x4c>)
 8003ba4:	f002 f82f 	bl	8005c06 <HAL_UART_Init>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003bae:	f000 fcb3 	bl	8004518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20016b40 	.word	0x20016b40
 8003bbc:	40004400 	.word	0x40004400

08003bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc6:	f107 0314 	add.w	r3, r7, #20
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	609a      	str	r2, [r3, #8]
 8003bd2:	60da      	str	r2, [r3, #12]
 8003bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	4b42      	ldr	r3, [pc, #264]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	4a41      	ldr	r2, [pc, #260]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c02:	4b38      	ldr	r3, [pc, #224]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4b26      	ldr	r3, [pc, #152]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	4a25      	ldr	r2, [pc, #148]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c50:	f043 0308 	orr.w	r3, r3, #8
 8003c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c56:	4b23      	ldr	r3, [pc, #140]	@ (8003ce4 <MX_GPIO_Init+0x124>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2182      	movs	r1, #130	@ 0x82
 8003c66:	4820      	ldr	r0, [pc, #128]	@ (8003ce8 <MX_GPIO_Init+0x128>)
 8003c68:	f001 f9c8 	bl	8004ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f240 7113 	movw	r1, #1811	@ 0x713
 8003c72:	481e      	ldr	r0, [pc, #120]	@ (8003cec <MX_GPIO_Init+0x12c>)
 8003c74:	f001 f9c2 	bl	8004ffc <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f240 4179 	movw	r1, #1145	@ 0x479
 8003c7e:	481c      	ldr	r0, [pc, #112]	@ (8003cf0 <MX_GPIO_Init+0x130>)
 8003c80:	f001 f9bc 	bl	8004ffc <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8003c84:	2382      	movs	r3, #130	@ 0x82
 8003c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c90:	2302      	movs	r3, #2
 8003c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4813      	ldr	r0, [pc, #76]	@ (8003ce8 <MX_GPIO_Init+0x128>)
 8003c9c:	f001 f81a 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003ca0:	f240 7313 	movw	r3, #1811	@ 0x713
 8003ca4:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480c      	ldr	r0, [pc, #48]	@ (8003cec <MX_GPIO_Init+0x12c>)
 8003cba:	f001 f80b 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003cbe:	f240 4379 	movw	r3, #1145	@ 0x479
 8003cc2:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4806      	ldr	r0, [pc, #24]	@ (8003cf0 <MX_GPIO_Init+0x130>)
 8003cd8:	f000 fffc 	bl	8004cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cdc:	bf00      	nop
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40020400 	.word	0x40020400

08003cf4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b089      	sub	sp, #36	@ 0x24
 8003cf8:	af06      	add	r7, sp, #24
 8003cfa:	6078      	str	r0, [r7, #4]
	if (modo==1){
 8003cfc:	4b97      	ldr	r3, [pc, #604]	@ (8003f5c <HAL_UART_RxCpltCallback+0x268>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 8003d04:	4896      	ldr	r0, [pc, #600]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d06:	f7fe fff9 	bl	8002cfc <HitboxPlayer>
	if (modo==2){
 8003d0a:	4b94      	ldr	r3, [pc, #592]	@ (8003f5c <HAL_UART_RxCpltCallback+0x268>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d105      	bne.n	8003d1e <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 8003d12:	4893      	ldr	r0, [pc, #588]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d14:	f7fe fff2 	bl	8002cfc <HitboxPlayer>
		HitboxPlayer(&p2);
 8003d18:	4892      	ldr	r0, [pc, #584]	@ (8003f64 <HAL_UART_RxCpltCallback+0x270>)
 8003d1a:	f7fe ffef 	bl	8002cfc <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 8003d1e:	4b92      	ldr	r3, [pc, #584]	@ (8003f68 <HAL_UART_RxCpltCallback+0x274>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d175      	bne.n	8003e12 <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003d26:	4b8e      	ldr	r3, [pc, #568]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d171      	bne.n	8003e12 <HAL_UART_RxCpltCallback+0x11e>
 8003d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d16d      	bne.n	8003e12 <HAL_UART_RxCpltCallback+0x11e>
 8003d36:	4b8a      	ldr	r3, [pc, #552]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d169      	bne.n	8003e12 <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8003d3e:	4b88      	ldr	r3, [pc, #544]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b87      	ldr	r3, [pc, #540]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	1c58      	adds	r0, r3, #1
 8003d4c:	4b84      	ldr	r3, [pc, #528]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4b83      	ldr	r3, [pc, #524]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	4b81      	ldr	r3, [pc, #516]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	4b7f      	ldr	r3, [pc, #508]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	3301      	adds	r3, #1
 8003d66:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003d6a:	9400      	str	r4, [sp, #0]
 8003d6c:	f7fd f944 	bl	8000ff8 <FillRect>
			p1.direction=2;
 8003d70:	4b7b      	ldr	r3, [pc, #492]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d72:	2202      	movs	r2, #2
 8003d74:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8003d76:	2100      	movs	r1, #0
 8003d78:	4879      	ldr	r0, [pc, #484]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d7a:	f7fe fef7 	bl	8002b6c <playerCanMove>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d017      	beq.n	8003db4 <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 8003d84:	4b76      	ldr	r3, [pc, #472]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	4b75      	ldr	r3, [pc, #468]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4a74      	ldr	r2, [pc, #464]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d90:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 8003d92:	4b73      	ldr	r3, [pc, #460]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	d805      	bhi.n	8003da6 <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 8003d9a:	4b71      	ldr	r3, [pc, #452]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a6f      	ldr	r2, [pc, #444]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003da2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003da4:	e002      	b.n	8003dac <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 8003da6:	4b6e      	ldr	r3, [pc, #440]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 8003dac:	486c      	ldr	r0, [pc, #432]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003dae:	f7ff f93b 	bl	8003028 <PlayerAnimation>
 8003db2:	e02e      	b.n	8003e12 <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8003db4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b69      	ldr	r3, [pc, #420]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	1c58      	adds	r0, r3, #1
 8003dc2:	4b67      	ldr	r3, [pc, #412]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4b66      	ldr	r3, [pc, #408]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	4b63      	ldr	r3, [pc, #396]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	4b62      	ldr	r3, [pc, #392]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003de0:	9400      	str	r4, [sp, #0]
 8003de2:	f7fd f909 	bl	8000ff8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8003de6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3b08      	subs	r3, #8
 8003dec:	4618      	mov	r0, r3
 8003dee:	4b5c      	ldr	r3, [pc, #368]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	3b0c      	subs	r3, #12
 8003df4:	4619      	mov	r1, r3
 8003df6:	2300      	movs	r3, #0
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9303      	str	r3, [sp, #12]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9302      	str	r3, [sp, #8]
 8003e02:	230a      	movs	r3, #10
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	4b59      	ldr	r3, [pc, #356]	@ (8003f6c <HAL_UART_RxCpltCallback+0x278>)
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	231a      	movs	r3, #26
 8003e0c:	2212      	movs	r2, #18
 8003e0e:	f7fd f9a7 	bl	8001160 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 8003e12:	4b55      	ldr	r3, [pc, #340]	@ (8003f68 <HAL_UART_RxCpltCallback+0x274>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b75      	cmp	r3, #117	@ 0x75
 8003e18:	d15c      	bne.n	8003ed4 <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003e1a:	4b51      	ldr	r3, [pc, #324]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d158      	bne.n	8003ed4 <HAL_UART_RxCpltCallback+0x1e0>
 8003e22:	4b4f      	ldr	r3, [pc, #316]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d154      	bne.n	8003ed4 <HAL_UART_RxCpltCallback+0x1e0>
 8003e2a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d150      	bne.n	8003ed4 <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8003e32:	4b4b      	ldr	r3, [pc, #300]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b4a      	ldr	r3, [pc, #296]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	1c58      	adds	r0, r3, #1
 8003e40:	4b47      	ldr	r3, [pc, #284]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	1c59      	adds	r1, r3, #1
 8003e4e:	4b44      	ldr	r3, [pc, #272]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	4b42      	ldr	r3, [pc, #264]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003e5e:	9400      	str	r4, [sp, #0]
 8003e60:	f7fd f8ca 	bl	8000ff8 <FillRect>
			p1.direction=0;
 8003e64:	4b3e      	ldr	r3, [pc, #248]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	483c      	ldr	r0, [pc, #240]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e6e:	f7fe fe7d 	bl	8002b6c <playerCanMove>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8003e78:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	4b38      	ldr	r3, [pc, #224]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	4a37      	ldr	r2, [pc, #220]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e84:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8003e86:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	2b09      	cmp	r3, #9
 8003e8c:	d805      	bhi.n	8003e9a <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 8003e8e:	4b34      	ldr	r3, [pc, #208]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	3301      	adds	r3, #1
 8003e94:	4a32      	ldr	r2, [pc, #200]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e98:	e002      	b.n	8003ea0 <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 8003e9a:	4b31      	ldr	r3, [pc, #196]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 8003ea0:	482f      	ldr	r0, [pc, #188]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003ea2:	f7ff f8c1 	bl	8003028 <PlayerAnimation>
 8003ea6:	e015      	b.n	8003ed4 <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3b08      	subs	r3, #8
 8003eae:	4618      	mov	r0, r3
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	3b0d      	subs	r3, #13
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9302      	str	r3, [sp, #8]
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <HAL_UART_RxCpltCallback+0x27c>)
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	231a      	movs	r3, #26
 8003ece:	2212      	movs	r2, #18
 8003ed0:	f7fd f946 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 8003ed4:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <HAL_UART_RxCpltCallback+0x274>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b72      	cmp	r3, #114	@ 0x72
 8003eda:	d168      	bne.n	8003fae <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003edc:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d164      	bne.n	8003fae <HAL_UART_RxCpltCallback+0x2ba>
 8003ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d160      	bne.n	8003fae <HAL_UART_RxCpltCallback+0x2ba>
 8003eec:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d15c      	bne.n	8003fae <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	1c58      	adds	r0, r3, #1
 8003f02:	4b17      	ldr	r3, [pc, #92]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	1c59      	adds	r1, r3, #1
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003f20:	9400      	str	r4, [sp, #0]
 8003f22:	f7fd f869 	bl	8000ff8 <FillRect>
			p1.direction=1;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	480c      	ldr	r0, [pc, #48]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f30:	f7fe fe1c 	bl	8002b6c <playerCanMove>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d023      	beq.n	8003f82 <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	4a06      	ldr	r2, [pc, #24]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f46:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8003f48:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4c:	2b09      	cmp	r3, #9
 8003f4e:	d811      	bhi.n	8003f74 <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a02      	ldr	r2, [pc, #8]	@ (8003f60 <HAL_UART_RxCpltCallback+0x26c>)
 8003f58:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f5a:	e00e      	b.n	8003f7a <HAL_UART_RxCpltCallback+0x286>
 8003f5c:	20016e94 	.word	0x20016e94
 8003f60:	20016b94 	.word	0x20016b94
 8003f64:	20016c08 	.word	0x20016c08
 8003f68:	20016b88 	.word	0x20016b88
 8003f6c:	200148b4 	.word	0x200148b4
 8003f70:	20012424 	.word	0x20012424
						} else{
						  p1.animationWalkRight=0;
 8003f74:	4b77      	ldr	r3, [pc, #476]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 8003f7a:	4876      	ldr	r0, [pc, #472]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003f7c:	f7ff f854 	bl	8003028 <PlayerAnimation>
 8003f80:	e015      	b.n	8003fae <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8003f82:	4b74      	ldr	r3, [pc, #464]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3b0a      	subs	r3, #10
 8003f88:	4618      	mov	r0, r3
 8003f8a:	4b72      	ldr	r3, [pc, #456]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	3b0b      	subs	r3, #11
 8003f90:	4619      	mov	r1, r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	2301      	movs	r3, #1
 8003f98:	9303      	str	r3, [sp, #12]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9302      	str	r3, [sp, #8]
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8004158 <HAL_UART_RxCpltCallback+0x464>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2317      	movs	r3, #23
 8003fa8:	2216      	movs	r2, #22
 8003faa:	f7fd f8d9 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 8003fae:	4b6b      	ldr	r3, [pc, #428]	@ (800415c <HAL_UART_RxCpltCallback+0x468>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b6c      	cmp	r3, #108	@ 0x6c
 8003fb4:	d15c      	bne.n	8004070 <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003fb6:	4b67      	ldr	r3, [pc, #412]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d158      	bne.n	8004070 <HAL_UART_RxCpltCallback+0x37c>
 8003fbe:	4b65      	ldr	r3, [pc, #404]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d154      	bne.n	8004070 <HAL_UART_RxCpltCallback+0x37c>
 8003fc6:	4b63      	ldr	r3, [pc, #396]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d150      	bne.n	8004070 <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8003fce:	4b61      	ldr	r3, [pc, #388]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b60      	ldr	r3, [pc, #384]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	1c58      	adds	r0, r3, #1
 8003fdc:	4b5d      	ldr	r3, [pc, #372]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4b5c      	ldr	r3, [pc, #368]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	1c59      	adds	r1, r3, #1
 8003fea:	4b5a      	ldr	r3, [pc, #360]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	4b58      	ldr	r3, [pc, #352]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003ffa:	9400      	str	r4, [sp, #0]
 8003ffc:	f7fc fffc 	bl	8000ff8 <FillRect>
			p1.direction=3;
 8004000:	4b54      	ldr	r3, [pc, #336]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004002:	2203      	movs	r2, #3
 8004004:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 8004006:	2103      	movs	r1, #3
 8004008:	4852      	ldr	r0, [pc, #328]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800400a:	f7fe fdaf 	bl	8002b6c <playerCanMove>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 8004014:	4b4f      	ldr	r3, [pc, #316]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	4a4d      	ldr	r2, [pc, #308]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004020:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 8004022:	4b4c      	ldr	r3, [pc, #304]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	2b09      	cmp	r3, #9
 8004028:	d805      	bhi.n	8004036 <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 800402a:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	3301      	adds	r3, #1
 8004030:	4a48      	ldr	r2, [pc, #288]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004032:	6453      	str	r3, [r2, #68]	@ 0x44
 8004034:	e002      	b.n	800403c <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 800403c:	4845      	ldr	r0, [pc, #276]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800403e:	f7fe fff3 	bl	8003028 <PlayerAnimation>
 8004042:	e015      	b.n	8004070 <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8004044:	4b43      	ldr	r3, [pc, #268]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3b0a      	subs	r3, #10
 800404a:	4618      	mov	r0, r3
 800404c:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	3b0b      	subs	r3, #11
 8004052:	4619      	mov	r1, r3
 8004054:	2300      	movs	r3, #0
 8004056:	9304      	str	r3, [sp, #16]
 8004058:	2300      	movs	r3, #0
 800405a:	9303      	str	r3, [sp, #12]
 800405c:	2300      	movs	r3, #0
 800405e:	9302      	str	r3, [sp, #8]
 8004060:	230a      	movs	r3, #10
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	4b3c      	ldr	r3, [pc, #240]	@ (8004158 <HAL_UART_RxCpltCallback+0x464>)
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2317      	movs	r3, #23
 800406a:	2216      	movs	r2, #22
 800406c:	f7fd f878 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 8004070:	4b3a      	ldr	r3, [pc, #232]	@ (800415c <HAL_UART_RxCpltCallback+0x468>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b62      	cmp	r3, #98	@ 0x62
 8004076:	d122      	bne.n	80040be <HAL_UART_RxCpltCallback+0x3ca>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11a      	bne.n	80040b6 <HAL_UART_RxCpltCallback+0x3c2>
 8004080:	4b34      	ldr	r3, [pc, #208]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d116      	bne.n	80040b6 <HAL_UART_RxCpltCallback+0x3c2>
 8004088:	4b32      	ldr	r3, [pc, #200]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d112      	bne.n	80040b6 <HAL_UART_RxCpltCallback+0x3c2>
			p1.IsAttack=1;
 8004090:	4b30      	ldr	r3, [pc, #192]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004092:	2201      	movs	r2, #1
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54
			p1.animationAttack=0;
 8004096:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	659a      	str	r2, [r3, #88]	@ 0x58
			PlayerHit(&p1, &e1_1);
 800409e:	4930      	ldr	r1, [pc, #192]	@ (8004160 <HAL_UART_RxCpltCallback+0x46c>)
 80040a0:	482c      	ldr	r0, [pc, #176]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 80040a2:	f7fe fee1 	bl	8002e68 <PlayerHit>
			PlayerHit(&p1, &e1_2);
 80040a6:	492f      	ldr	r1, [pc, #188]	@ (8004164 <HAL_UART_RxCpltCallback+0x470>)
 80040a8:	482a      	ldr	r0, [pc, #168]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 80040aa:	f7fe fedd 	bl	8002e68 <PlayerHit>
			PlayerHit(&p1, &e1_3);}
 80040ae:	492e      	ldr	r1, [pc, #184]	@ (8004168 <HAL_UART_RxCpltCallback+0x474>)
 80040b0:	4828      	ldr	r0, [pc, #160]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 80040b2:	f7fe fed9 	bl	8002e68 <PlayerHit>
			PlayerHit_E2(&p1, &e2_1);
 80040b6:	492d      	ldr	r1, [pc, #180]	@ (800416c <HAL_UART_RxCpltCallback+0x478>)
 80040b8:	4826      	ldr	r0, [pc, #152]	@ (8004154 <HAL_UART_RxCpltCallback+0x460>)
 80040ba:	f7fe f8db 	bl	8002274 <PlayerHit_E2>

	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 80040be:	4b27      	ldr	r3, [pc, #156]	@ (800415c <HAL_UART_RxCpltCallback+0x468>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b31      	cmp	r3, #49	@ 0x31
 80040c4:	d16c      	bne.n	80041a0 <HAL_UART_RxCpltCallback+0x4ac>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80040c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d168      	bne.n	80041a0 <HAL_UART_RxCpltCallback+0x4ac>
 80040ce:	4b28      	ldr	r3, [pc, #160]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d164      	bne.n	80041a0 <HAL_UART_RxCpltCallback+0x4ac>
 80040d6:	4b26      	ldr	r3, [pc, #152]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d160      	bne.n	80041a0 <HAL_UART_RxCpltCallback+0x4ac>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 80040de:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	1c58      	adds	r0, r3, #1
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	1c59      	adds	r1, r3, #1
 80040fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	3301      	adds	r3, #1
 8004106:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800410a:	9400      	str	r4, [sp, #0]
 800410c:	f7fc ff74 	bl	8000ff8 <FillRect>
				p2.direction=0;
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004112:	2200      	movs	r2, #0
 8004114:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 8004116:	2102      	movs	r1, #2
 8004118:	4815      	ldr	r0, [pc, #84]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 800411a:	f7fe fd27 	bl	8002b6c <playerCanMove>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d027      	beq.n	8004174 <HAL_UART_RxCpltCallback+0x480>
					p2.y=p2.y-p2.speed;
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	4b11      	ldr	r3, [pc, #68]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a10      	ldr	r2, [pc, #64]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004130:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	2b09      	cmp	r3, #9
 8004138:	d805      	bhi.n	8004146 <HAL_UART_RxCpltCallback+0x452>
							p2.animationWalkUp+=1;
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413e:	3301      	adds	r3, #1
 8004140:	4a0b      	ldr	r2, [pc, #44]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004144:	e002      	b.n	800414c <HAL_UART_RxCpltCallback+0x458>
							} else{
							  p2.animationWalkUp=0;
 8004146:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 8004148:	2200      	movs	r2, #0
 800414a:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 800414c:	4808      	ldr	r0, [pc, #32]	@ (8004170 <HAL_UART_RxCpltCallback+0x47c>)
 800414e:	f7fe ff6b 	bl	8003028 <PlayerAnimation>
 8004152:	e025      	b.n	80041a0 <HAL_UART_RxCpltCallback+0x4ac>
 8004154:	20016b94 	.word	0x20016b94
 8004158:	2000fc9c 	.word	0x2000fc9c
 800415c:	20016b88 	.word	0x20016b88
 8004160:	20016c7c 	.word	0x20016c7c
 8004164:	20016cb0 	.word	0x20016cb0
 8004168:	20016ce4 	.word	0x20016ce4
 800416c:	20016db4 	.word	0x20016db4
 8004170:	20016c08 	.word	0x20016c08
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8004174:	4b9a      	ldr	r3, [pc, #616]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3b08      	subs	r3, #8
 800417a:	4618      	mov	r0, r3
 800417c:	4b98      	ldr	r3, [pc, #608]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	3b0d      	subs	r3, #13
 8004182:	4619      	mov	r1, r3
 8004184:	2300      	movs	r3, #0
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	2300      	movs	r3, #0
 800418a:	9303      	str	r3, [sp, #12]
 800418c:	2300      	movs	r3, #0
 800418e:	9302      	str	r3, [sp, #8]
 8004190:	230a      	movs	r3, #10
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	4b93      	ldr	r3, [pc, #588]	@ (80043e4 <HAL_UART_RxCpltCallback+0x6f0>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	231a      	movs	r3, #26
 800419a:	2212      	movs	r2, #18
 800419c:	f7fc ffe0 	bl	8001160 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 80041a0:	4b91      	ldr	r3, [pc, #580]	@ (80043e8 <HAL_UART_RxCpltCallback+0x6f4>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b32      	cmp	r3, #50	@ 0x32
 80041a6:	d15c      	bne.n	8004262 <HAL_UART_RxCpltCallback+0x56e>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80041a8:	4b8d      	ldr	r3, [pc, #564]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d158      	bne.n	8004262 <HAL_UART_RxCpltCallback+0x56e>
 80041b0:	4b8b      	ldr	r3, [pc, #556]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d154      	bne.n	8004262 <HAL_UART_RxCpltCallback+0x56e>
 80041b8:	4b89      	ldr	r3, [pc, #548]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d150      	bne.n	8004262 <HAL_UART_RxCpltCallback+0x56e>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 80041c0:	4b87      	ldr	r3, [pc, #540]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b86      	ldr	r3, [pc, #536]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	1c58      	adds	r0, r3, #1
 80041ce:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4b83      	ldr	r3, [pc, #524]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	4b80      	ldr	r3, [pc, #512]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	4b7f      	ldr	r3, [pc, #508]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80041ec:	9400      	str	r4, [sp, #0]
 80041ee:	f7fc ff03 	bl	8000ff8 <FillRect>
			p2.direction=1;
 80041f2:	4b7b      	ldr	r3, [pc, #492]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 80041f8:	2101      	movs	r1, #1
 80041fa:	4879      	ldr	r0, [pc, #484]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80041fc:	f7fe fcb6 	bl	8002b6c <playerCanMove>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <HAL_UART_RxCpltCallback+0x542>
				p2.x=p2.x+p2.speed;
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b75      	ldr	r3, [pc, #468]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	4413      	add	r3, r2
 8004210:	4a73      	ldr	r2, [pc, #460]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004212:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 8004214:	4b72      	ldr	r3, [pc, #456]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004218:	2b09      	cmp	r3, #9
 800421a:	d805      	bhi.n	8004228 <HAL_UART_RxCpltCallback+0x534>
						p2.animationWalkRight+=1;
 800421c:	4b70      	ldr	r3, [pc, #448]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800421e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004220:	3301      	adds	r3, #1
 8004222:	4a6f      	ldr	r2, [pc, #444]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004224:	6493      	str	r3, [r2, #72]	@ 0x48
 8004226:	e002      	b.n	800422e <HAL_UART_RxCpltCallback+0x53a>
						} else{
						  p2.animationWalkRight=0;
 8004228:	4b6d      	ldr	r3, [pc, #436]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800422a:	2200      	movs	r2, #0
 800422c:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 800422e:	486c      	ldr	r0, [pc, #432]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004230:	f7fe fefa 	bl	8003028 <PlayerAnimation>
 8004234:	e015      	b.n	8004262 <HAL_UART_RxCpltCallback+0x56e>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8004236:	4b6a      	ldr	r3, [pc, #424]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b0a      	subs	r3, #10
 800423c:	4618      	mov	r0, r3
 800423e:	4b68      	ldr	r3, [pc, #416]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	3b0b      	subs	r3, #11
 8004244:	4619      	mov	r1, r3
 8004246:	2300      	movs	r3, #0
 8004248:	9304      	str	r3, [sp, #16]
 800424a:	2301      	movs	r3, #1
 800424c:	9303      	str	r3, [sp, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	9302      	str	r3, [sp, #8]
 8004252:	230a      	movs	r3, #10
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	4b65      	ldr	r3, [pc, #404]	@ (80043ec <HAL_UART_RxCpltCallback+0x6f8>)
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2317      	movs	r3, #23
 800425c:	2216      	movs	r2, #22
 800425e:	f7fc ff7f 	bl	8001160 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 8004262:	4b61      	ldr	r3, [pc, #388]	@ (80043e8 <HAL_UART_RxCpltCallback+0x6f4>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b33      	cmp	r3, #51	@ 0x33
 8004268:	d175      	bne.n	8004356 <HAL_UART_RxCpltCallback+0x662>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 800426a:	4b5d      	ldr	r3, [pc, #372]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800426c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426e:	2b00      	cmp	r3, #0
 8004270:	d171      	bne.n	8004356 <HAL_UART_RxCpltCallback+0x662>
 8004272:	4b5b      	ldr	r3, [pc, #364]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d16d      	bne.n	8004356 <HAL_UART_RxCpltCallback+0x662>
 800427a:	4b59      	ldr	r3, [pc, #356]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d169      	bne.n	8004356 <HAL_UART_RxCpltCallback+0x662>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b56      	ldr	r3, [pc, #344]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	1c58      	adds	r0, r3, #1
 8004290:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4b52      	ldr	r3, [pc, #328]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	1c59      	adds	r1, r3, #1
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	4b4e      	ldr	r3, [pc, #312]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	3301      	adds	r3, #1
 80042aa:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80042ae:	9400      	str	r4, [sp, #0]
 80042b0:	f7fc fea2 	bl	8000ff8 <FillRect>
			p2.direction=2;
 80042b4:	4b4a      	ldr	r3, [pc, #296]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042b6:	2202      	movs	r2, #2
 80042b8:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 80042ba:	2100      	movs	r1, #0
 80042bc:	4848      	ldr	r0, [pc, #288]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042be:	f7fe fc55 	bl	8002b6c <playerCanMove>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_UART_RxCpltCallback+0x604>
		    p2.y=p2.y+p2.speed;
 80042c8:	4b45      	ldr	r3, [pc, #276]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	4b44      	ldr	r3, [pc, #272]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	4a43      	ldr	r2, [pc, #268]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042d4:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 80042d6:	4b42      	ldr	r3, [pc, #264]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042da:	2b09      	cmp	r3, #9
 80042dc:	d805      	bhi.n	80042ea <HAL_UART_RxCpltCallback+0x5f6>
		    		p2.animationWalkDown+=1;
 80042de:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a3e      	ldr	r2, [pc, #248]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80042e8:	e002      	b.n	80042f0 <HAL_UART_RxCpltCallback+0x5fc>
		    			} else{
		    				p2.animationWalkDown=0;
 80042ea:	4b3d      	ldr	r3, [pc, #244]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 80042f0:	483b      	ldr	r0, [pc, #236]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042f2:	f7fe fe99 	bl	8003028 <PlayerAnimation>
 80042f6:	e02e      	b.n	8004356 <HAL_UART_RxCpltCallback+0x662>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 80042f8:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	1c58      	adds	r0, r3, #1
 8004306:	4b36      	ldr	r3, [pc, #216]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	4b31      	ldr	r3, [pc, #196]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	3301      	adds	r3, #1
 8004320:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8004324:	9400      	str	r4, [sp, #0]
 8004326:	f7fc fe67 	bl	8000ff8 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 800432a:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3b08      	subs	r3, #8
 8004330:	4618      	mov	r0, r3
 8004332:	4b2b      	ldr	r3, [pc, #172]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	3b0c      	subs	r3, #12
 8004338:	4619      	mov	r1, r3
 800433a:	2300      	movs	r3, #0
 800433c:	9304      	str	r3, [sp, #16]
 800433e:	2300      	movs	r3, #0
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	2300      	movs	r3, #0
 8004344:	9302      	str	r3, [sp, #8]
 8004346:	230a      	movs	r3, #10
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	4b29      	ldr	r3, [pc, #164]	@ (80043f0 <HAL_UART_RxCpltCallback+0x6fc>)
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	231a      	movs	r3, #26
 8004350:	2212      	movs	r2, #18
 8004352:	f7fc ff05 	bl	8001160 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 8004356:	4b24      	ldr	r3, [pc, #144]	@ (80043e8 <HAL_UART_RxCpltCallback+0x6f4>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b34      	cmp	r3, #52	@ 0x34
 800435c:	d167      	bne.n	800442e <HAL_UART_RxCpltCallback+0x73a>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	2b00      	cmp	r3, #0
 8004364:	d163      	bne.n	800442e <HAL_UART_RxCpltCallback+0x73a>
 8004366:	4b1e      	ldr	r3, [pc, #120]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d15f      	bne.n	800442e <HAL_UART_RxCpltCallback+0x73a>
 800436e:	4b1c      	ldr	r3, [pc, #112]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d15b      	bne.n	800442e <HAL_UART_RxCpltCallback+0x73a>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 8004376:	4b1a      	ldr	r3, [pc, #104]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	1c58      	adds	r0, r3, #1
 8004384:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	1c59      	adds	r1, r3, #1
 8004392:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	4b11      	ldr	r3, [pc, #68]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	3301      	adds	r3, #1
 800439e:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80043a2:	9400      	str	r4, [sp, #0]
 80043a4:	f7fc fe28 	bl	8000ff8 <FillRect>
			p2.direction=3;
 80043a8:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043aa:	2203      	movs	r2, #3
 80043ac:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 80043ae:	2103      	movs	r1, #3
 80043b0:	480b      	ldr	r0, [pc, #44]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043b2:	f7fe fbdb 	bl	8002b6c <playerCanMove>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_UART_RxCpltCallback+0x70e>
				p2.x=p2.x-p2.speed;
 80043bc:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	4a06      	ldr	r2, [pc, #24]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043c8:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d810      	bhi.n	80043f4 <HAL_UART_RxCpltCallback+0x700>
						p2.animationWalkLeft+=1;
 80043d2:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	3301      	adds	r3, #1
 80043d8:	4a01      	ldr	r2, [pc, #4]	@ (80043e0 <HAL_UART_RxCpltCallback+0x6ec>)
 80043da:	6453      	str	r3, [r2, #68]	@ 0x44
 80043dc:	e00d      	b.n	80043fa <HAL_UART_RxCpltCallback+0x706>
 80043de:	bf00      	nop
 80043e0:	20016c08 	.word	0x20016c08
 80043e4:	20012424 	.word	0x20012424
 80043e8:	20016b88 	.word	0x20016b88
 80043ec:	2000fc9c 	.word	0x2000fc9c
 80043f0:	200148b4 	.word	0x200148b4
						} else{
						  p2.animationWalkLeft=0;
 80043f4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 80043fa:	483c      	ldr	r0, [pc, #240]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 80043fc:	f7fe fe14 	bl	8003028 <PlayerAnimation>
 8004400:	e015      	b.n	800442e <HAL_UART_RxCpltCallback+0x73a>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8004402:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3b0a      	subs	r3, #10
 8004408:	4618      	mov	r0, r3
 800440a:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	3b0b      	subs	r3, #11
 8004410:	4619      	mov	r1, r3
 8004412:	2300      	movs	r3, #0
 8004414:	9304      	str	r3, [sp, #16]
 8004416:	2300      	movs	r3, #0
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	2300      	movs	r3, #0
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	230a      	movs	r3, #10
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_UART_RxCpltCallback+0x7fc>)
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2317      	movs	r3, #23
 8004428:	2216      	movs	r2, #22
 800442a:	f7fc fe99 	bl	8001160 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_UART_RxCpltCallback+0x800>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b35      	cmp	r3, #53	@ 0x35
 8004434:	d122      	bne.n	800447c <HAL_UART_RxCpltCallback+0x788>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8004436:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11a      	bne.n	8004474 <HAL_UART_RxCpltCallback+0x780>
 800443e:	4b2b      	ldr	r3, [pc, #172]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d116      	bne.n	8004474 <HAL_UART_RxCpltCallback+0x780>
 8004446:	4b29      	ldr	r3, [pc, #164]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d112      	bne.n	8004474 <HAL_UART_RxCpltCallback+0x780>
			p2.IsAttack=1;
 800444e:	4b27      	ldr	r3, [pc, #156]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004450:	2201      	movs	r2, #1
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54
			p2.animationAttack=0;
 8004454:	4b25      	ldr	r3, [pc, #148]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	659a      	str	r2, [r3, #88]	@ 0x58
			PlayerHit(&p2, &e1_1);
 800445c:	4926      	ldr	r1, [pc, #152]	@ (80044f8 <HAL_UART_RxCpltCallback+0x804>)
 800445e:	4823      	ldr	r0, [pc, #140]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004460:	f7fe fd02 	bl	8002e68 <PlayerHit>
			PlayerHit(&p2, &e1_2);
 8004464:	4925      	ldr	r1, [pc, #148]	@ (80044fc <HAL_UART_RxCpltCallback+0x808>)
 8004466:	4821      	ldr	r0, [pc, #132]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004468:	f7fe fcfe 	bl	8002e68 <PlayerHit>
			PlayerHit(&p2, &e1_3);}
 800446c:	4924      	ldr	r1, [pc, #144]	@ (8004500 <HAL_UART_RxCpltCallback+0x80c>)
 800446e:	481f      	ldr	r0, [pc, #124]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004470:	f7fe fcfa 	bl	8002e68 <PlayerHit>
			PlayerHit_E2(&p2, &e2_2);
 8004474:	4923      	ldr	r1, [pc, #140]	@ (8004504 <HAL_UART_RxCpltCallback+0x810>)
 8004476:	481d      	ldr	r0, [pc, #116]	@ (80044ec <HAL_UART_RxCpltCallback+0x7f8>)
 8004478:	f7fd fefc 	bl	8002274 <PlayerHit_E2>
	}

	if (buffer[0]=='6'){
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_UART_RxCpltCallback+0x800>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b36      	cmp	r3, #54	@ 0x36
 8004482:	d12a      	bne.n	80044da <HAL_UART_RxCpltCallback+0x7e6>
		// Solo cambia a PAUSA si estamos en SOLO o DUO
		        if (estadoActual == SOLO || estadoActual == DUO) {
 8004484:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d004      	beq.n	8004498 <HAL_UART_RxCpltCallback+0x7a4>
 800448e:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d10d      	bne.n	80044b4 <HAL_UART_RxCpltCallback+0x7c0>
		            // Solo cambia si no estamos ya en PAUSA
		            if (estadoActual != PAUSA) {
 8004498:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d01b      	beq.n	80044da <HAL_UART_RxCpltCallback+0x7e6>
		                estadoAnterior = estadoActual;  // Guarda el estado actual antes de cambiar
 80044a2:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	4b18      	ldr	r3, [pc, #96]	@ (800450c <HAL_UART_RxCpltCallback+0x818>)
 80044aa:	701a      	strb	r2, [r3, #0]
		                estadoActual = PAUSA;           // Cambia a PAUSA
 80044ac:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 80044ae:	2203      	movs	r2, #3
 80044b0:	701a      	strb	r2, [r3, #0]
		            if (estadoActual != PAUSA) {
 80044b2:	e012      	b.n	80044da <HAL_UART_RxCpltCallback+0x7e6>
		            }
		        } else if (estadoActual == PAUSA) {
 80044b4:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d10d      	bne.n	80044da <HAL_UART_RxCpltCallback+0x7e6>
		            // Si estamos en PAUSA, regresa al estado anterior
		        	LCD_Bitmap(0, 0, 320, 240, fondo);
 80044be:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <HAL_UART_RxCpltCallback+0x81c>)
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	23f0      	movs	r3, #240	@ 0xf0
 80044c4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80044c8:	2100      	movs	r1, #0
 80044ca:	2000      	movs	r0, #0
 80044cc:	f7fc fdee 	bl	80010ac <LCD_Bitmap>
		            estadoActual = estadoAnterior; // Restaura el estado anterior
 80044d0:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <HAL_UART_RxCpltCallback+0x818>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <HAL_UART_RxCpltCallback+0x814>)
 80044d8:	701a      	strb	r2, [r3, #0]
		        }
	}

	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80044da:	2201      	movs	r2, #1
 80044dc:	4905      	ldr	r1, [pc, #20]	@ (80044f4 <HAL_UART_RxCpltCallback+0x800>)
 80044de:	480d      	ldr	r0, [pc, #52]	@ (8004514 <HAL_UART_RxCpltCallback+0x820>)
 80044e0:	f001 fbe1 	bl	8005ca6 <HAL_UART_Receive_IT>
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	20016c08 	.word	0x20016c08
 80044f0:	2000fc9c 	.word	0x2000fc9c
 80044f4:	20016b88 	.word	0x20016b88
 80044f8:	20016c7c 	.word	0x20016c7c
 80044fc:	20016cb0 	.word	0x20016cb0
 8004500:	20016ce4 	.word	0x20016ce4
 8004504:	20016df8 	.word	0x20016df8
 8004508:	20016a74 	.word	0x20016a74
 800450c:	20016a75 	.word	0x20016a75
 8004510:	08006b5c 	.word	0x08006b5c
 8004514:	20016b40 	.word	0x20016b40

08004518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800451c:	b672      	cpsid	i
}
 800451e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <Error_Handler+0x8>

08004524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <HAL_MspInit+0x4c>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004532:	4a0f      	ldr	r2, [pc, #60]	@ (8004570 <HAL_MspInit+0x4c>)
 8004534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004538:	6453      	str	r3, [r2, #68]	@ 0x44
 800453a:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <HAL_MspInit+0x4c>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <HAL_MspInit+0x4c>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	4a08      	ldr	r2, [pc, #32]	@ (8004570 <HAL_MspInit+0x4c>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004554:	6413      	str	r3, [r2, #64]	@ 0x40
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_MspInit+0x4c>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	@ 0x28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <HAL_SPI_MspInit+0x84>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d12b      	bne.n	80045ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045a6:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	4a10      	ldr	r2, [pc, #64]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c2:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045ce:	23e0      	movs	r3, #224	@ 0xe0
 80045d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	2302      	movs	r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045da:	2303      	movs	r3, #3
 80045dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045de:	2305      	movs	r3, #5
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	f107 0314 	add.w	r3, r7, #20
 80045e6:	4619      	mov	r1, r3
 80045e8:	4805      	ldr	r0, [pc, #20]	@ (8004600 <HAL_SPI_MspInit+0x8c>)
 80045ea:	f000 fb73 	bl	8004cd4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80045ee:	bf00      	nop
 80045f0:	3728      	adds	r7, #40	@ 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40013000 	.word	0x40013000
 80045fc:	40023800 	.word	0x40023800
 8004600:	40020000 	.word	0x40020000

08004604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08c      	sub	sp, #48	@ 0x30
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	f107 031c 	add.w	r3, r7, #28
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a49      	ldr	r2, [pc, #292]	@ (8004748 <HAL_UART_MspInit+0x144>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d153      	bne.n	80046ce <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	4b48      	ldr	r3, [pc, #288]	@ (800474c <HAL_UART_MspInit+0x148>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	4a47      	ldr	r2, [pc, #284]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004630:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004634:	6413      	str	r3, [r2, #64]	@ 0x40
 8004636:	4b45      	ldr	r3, [pc, #276]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	4b41      	ldr	r3, [pc, #260]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	4a40      	ldr	r2, [pc, #256]	@ (800474c <HAL_UART_MspInit+0x148>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6313      	str	r3, [r2, #48]	@ 0x30
 8004652:	4b3e      	ldr	r3, [pc, #248]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	4b3a      	ldr	r3, [pc, #232]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	4a39      	ldr	r2, [pc, #228]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004668:	f043 0308 	orr.w	r3, r3, #8
 800466c:	6313      	str	r3, [r2, #48]	@ 0x30
 800466e:	4b37      	ldr	r3, [pc, #220]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800467a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800467e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004680:	2302      	movs	r3, #2
 8004682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004688:	2303      	movs	r3, #3
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800468c:	2308      	movs	r3, #8
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004690:	f107 031c 	add.w	r3, r7, #28
 8004694:	4619      	mov	r1, r3
 8004696:	482e      	ldr	r0, [pc, #184]	@ (8004750 <HAL_UART_MspInit+0x14c>)
 8004698:	f000 fb1c 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800469c:	2304      	movs	r3, #4
 800469e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a8:	2303      	movs	r3, #3
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80046ac:	2308      	movs	r3, #8
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046b0:	f107 031c 	add.w	r3, r7, #28
 80046b4:	4619      	mov	r1, r3
 80046b6:	4827      	ldr	r0, [pc, #156]	@ (8004754 <HAL_UART_MspInit+0x150>)
 80046b8:	f000 fb0c 	bl	8004cd4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80046bc:	2200      	movs	r2, #0
 80046be:	2100      	movs	r1, #0
 80046c0:	2035      	movs	r0, #53	@ 0x35
 80046c2:	f000 fa3e 	bl	8004b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80046c6:	2035      	movs	r0, #53	@ 0x35
 80046c8:	f000 fa57 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046cc:	e038      	b.n	8004740 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a21      	ldr	r2, [pc, #132]	@ (8004758 <HAL_UART_MspInit+0x154>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d133      	bne.n	8004740 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_UART_MspInit+0x148>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <HAL_UART_MspInit+0x148>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e8:	4b18      	ldr	r3, [pc, #96]	@ (800474c <HAL_UART_MspInit+0x148>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	4b14      	ldr	r3, [pc, #80]	@ (800474c <HAL_UART_MspInit+0x148>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	4a13      	ldr	r2, [pc, #76]	@ (800474c <HAL_UART_MspInit+0x148>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6313      	str	r3, [r2, #48]	@ 0x30
 8004704:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_UART_MspInit+0x148>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004710:	230c      	movs	r3, #12
 8004712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471c:	2303      	movs	r3, #3
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004720:	2307      	movs	r3, #7
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004724:	f107 031c 	add.w	r3, r7, #28
 8004728:	4619      	mov	r1, r3
 800472a:	480c      	ldr	r0, [pc, #48]	@ (800475c <HAL_UART_MspInit+0x158>)
 800472c:	f000 fad2 	bl	8004cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004730:	2200      	movs	r2, #0
 8004732:	2100      	movs	r1, #0
 8004734:	2026      	movs	r0, #38	@ 0x26
 8004736:	f000 fa04 	bl	8004b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800473a:	2026      	movs	r0, #38	@ 0x26
 800473c:	f000 fa1d 	bl	8004b7a <HAL_NVIC_EnableIRQ>
}
 8004740:	bf00      	nop
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40005000 	.word	0x40005000
 800474c:	40023800 	.word	0x40023800
 8004750:	40020800 	.word	0x40020800
 8004754:	40020c00 	.word	0x40020c00
 8004758:	40004400 	.word	0x40004400
 800475c:	40020000 	.word	0x40020000

08004760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <NMI_Handler+0x4>

08004768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <HardFault_Handler+0x4>

08004770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <MemManage_Handler+0x4>

08004778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800477c:	bf00      	nop
 800477e:	e7fd      	b.n	800477c <BusFault_Handler+0x4>

08004780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <UsageFault_Handler+0x4>

08004788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047b6:	f000 f8a5 	bl	8004904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047c4:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <USART2_IRQHandler+0x10>)
 80047c6:	f001 fa93 	bl	8005cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20016b40 	.word	0x20016b40

080047d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80047d8:	4802      	ldr	r0, [pc, #8]	@ (80047e4 <UART5_IRQHandler+0x10>)
 80047da:	f001 fa89 	bl	8005cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20016af8 	.word	0x20016af8

080047e8 <SystemInit>:
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <SystemInit+0x20>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <SystemInit+0x20>)
 80047f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <Reset_Handler>:
 800480c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004844 <LoopFillZerobss+0xe>
 8004810:	f7ff ffea 	bl	80047e8 <SystemInit>
 8004814:	480c      	ldr	r0, [pc, #48]	@ (8004848 <LoopFillZerobss+0x12>)
 8004816:	490d      	ldr	r1, [pc, #52]	@ (800484c <LoopFillZerobss+0x16>)
 8004818:	4a0d      	ldr	r2, [pc, #52]	@ (8004850 <LoopFillZerobss+0x1a>)
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <LoopCopyDataInit>

0800481e <CopyDataInit>:
 800481e:	58d4      	ldr	r4, [r2, r3]
 8004820:	50c4      	str	r4, [r0, r3]
 8004822:	3304      	adds	r3, #4

08004824 <LoopCopyDataInit>:
 8004824:	18c4      	adds	r4, r0, r3
 8004826:	428c      	cmp	r4, r1
 8004828:	d3f9      	bcc.n	800481e <CopyDataInit>
 800482a:	4a0a      	ldr	r2, [pc, #40]	@ (8004854 <LoopFillZerobss+0x1e>)
 800482c:	4c0a      	ldr	r4, [pc, #40]	@ (8004858 <LoopFillZerobss+0x22>)
 800482e:	2300      	movs	r3, #0
 8004830:	e001      	b.n	8004836 <LoopFillZerobss>

08004832 <FillZerobss>:
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	3204      	adds	r2, #4

08004836 <LoopFillZerobss>:
 8004836:	42a2      	cmp	r2, r4
 8004838:	d3fb      	bcc.n	8004832 <FillZerobss>
 800483a:	f002 f95f 	bl	8006afc <__libc_init_array>
 800483e:	f7fe fe05 	bl	800344c <main>
 8004842:	4770      	bx	lr
 8004844:	20020000 	.word	0x20020000
 8004848:	20000000 	.word	0x20000000
 800484c:	20016a84 	.word	0x20016a84
 8004850:	0802c384 	.word	0x0802c384
 8004854:	20016a84 	.word	0x20016a84
 8004858:	20016ea0 	.word	0x20016ea0

0800485c <ADC_IRQHandler>:
 800485c:	e7fe      	b.n	800485c <ADC_IRQHandler>
	...

08004860 <HAL_Init>:
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
 8004864:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <HAL_Init+0x40>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <HAL_Init+0x40>)
 800486a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <HAL_Init+0x40>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <HAL_Init+0x40>)
 8004876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <HAL_Init+0x40>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a07      	ldr	r2, [pc, #28]	@ (80048a0 <HAL_Init+0x40>)
 8004882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	2003      	movs	r0, #3
 800488a:	f000 f94f 	bl	8004b2c <HAL_NVIC_SetPriorityGrouping>
 800488e:	200f      	movs	r0, #15
 8004890:	f000 f808 	bl	80048a4 <HAL_InitTick>
 8004894:	f7ff fe46 	bl	8004524 <HAL_MspInit>
 8004898:	2300      	movs	r3, #0
 800489a:	4618      	mov	r0, r3
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40023c00 	.word	0x40023c00

080048a4 <HAL_InitTick>:
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <HAL_InitTick+0x54>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b12      	ldr	r3, [pc, #72]	@ (80048fc <HAL_InitTick+0x58>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f967 	bl	8004b96 <HAL_SYSTICK_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_InitTick+0x2e>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e00e      	b.n	80048f0 <HAL_InitTick+0x4c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d80a      	bhi.n	80048ee <HAL_InitTick+0x4a>
 80048d8:	2200      	movs	r2, #0
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	f000 f92f 	bl	8004b42 <HAL_NVIC_SetPriority>
 80048e4:	4a06      	ldr	r2, [pc, #24]	@ (8004900 <HAL_InitTick+0x5c>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_InitTick+0x4c>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20016a78 	.word	0x20016a78
 80048fc:	20016a80 	.word	0x20016a80
 8004900:	20016a7c 	.word	0x20016a7c

08004904 <HAL_IncTick>:
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_IncTick+0x20>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_IncTick+0x24>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4413      	add	r3, r2
 8004914:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <HAL_IncTick+0x24>)
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20016a80 	.word	0x20016a80
 8004928:	20016e9c 	.word	0x20016e9c

0800492c <HAL_GetTick>:
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
 8004930:	4b03      	ldr	r3, [pc, #12]	@ (8004940 <HAL_GetTick+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20016e9c 	.word	0x20016e9c

08004944 <HAL_Delay>:
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	f7ff ffee 	bl	800492c <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d005      	beq.n	800496a <HAL_Delay+0x26>
 800495e:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <HAL_Delay+0x44>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	bf00      	nop
 800496c:	f7ff ffde 	bl	800492c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d8f7      	bhi.n	800496c <HAL_Delay+0x28>
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20016a80 	.word	0x20016a80

0800498c <__NVIC_SetPriorityGrouping>:
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <__NVIC_SetPriorityGrouping+0x44>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049a8:	4013      	ands	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <__NVIC_SetPriorityGrouping+0x44>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	60d3      	str	r3, [r2, #12]
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <__NVIC_GetPriorityGrouping>:
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4b04      	ldr	r3, [pc, #16]	@ (80049ec <__NVIC_GetPriorityGrouping+0x18>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <__NVIC_EnableIRQ>:
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	db0b      	blt.n	8004a1a <__NVIC_EnableIRQ+0x2a>
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	f003 021f 	and.w	r2, r3, #31
 8004a08:	4907      	ldr	r1, [pc, #28]	@ (8004a28 <__NVIC_EnableIRQ+0x38>)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2001      	movs	r0, #1
 8004a12:	fa00 f202 	lsl.w	r2, r0, r2
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e100 	.word	0xe000e100

08004a2c <__NVIC_SetPriority>:
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	6039      	str	r1, [r7, #0]
 8004a36:	71fb      	strb	r3, [r7, #7]
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db0a      	blt.n	8004a56 <__NVIC_SetPriority+0x2a>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	490c      	ldr	r1, [pc, #48]	@ (8004a78 <__NVIC_SetPriority+0x4c>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	0112      	lsls	r2, r2, #4
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	440b      	add	r3, r1
 8004a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8004a54:	e00a      	b.n	8004a6c <__NVIC_SetPriority+0x40>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	4908      	ldr	r1, [pc, #32]	@ (8004a7c <__NVIC_SetPriority+0x50>)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	3b04      	subs	r3, #4
 8004a64:	0112      	lsls	r2, r2, #4
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	440b      	add	r3, r1
 8004a6a:	761a      	strb	r2, [r3, #24]
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000e100 	.word	0xe000e100
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <NVIC_EncodePriority>:
 8004a80:	b480      	push	{r7}
 8004a82:	b089      	sub	sp, #36	@ 0x24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f1c3 0307 	rsb	r3, r3, #7
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	bf28      	it	cs
 8004a9e:	2304      	movcs	r3, #4
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d902      	bls.n	8004ab0 <NVIC_EncodePriority+0x30>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3b03      	subs	r3, #3
 8004aae:	e000      	b.n	8004ab2 <NVIC_EncodePriority+0x32>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad2:	43d9      	mvns	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	400b      	ands	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	3724      	adds	r7, #36	@ 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <SysTick_Config>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004af8:	d301      	bcc.n	8004afe <SysTick_Config+0x16>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e00f      	b.n	8004b1e <SysTick_Config+0x36>
 8004afe:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <SysTick_Config+0x40>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	6053      	str	r3, [r2, #4]
 8004b06:	210f      	movs	r1, #15
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	f7ff ff8e 	bl	8004a2c <__NVIC_SetPriority>
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <SysTick_Config+0x40>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
 8004b16:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <SysTick_Config+0x40>)
 8004b18:	2207      	movs	r2, #7
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000e010 	.word	0xe000e010

08004b2c <HAL_NVIC_SetPriorityGrouping>:
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff29 	bl	800498c <__NVIC_SetPriorityGrouping>
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_NVIC_SetPriority>:
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	73fb      	strb	r3, [r7, #15]
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	f7ff ff3e 	bl	80049d4 <__NVIC_GetPriorityGrouping>
 8004b58:	6178      	str	r0, [r7, #20]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff8e 	bl	8004a80 <NVIC_EncodePriority>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff5d 	bl	8004a2c <__NVIC_SetPriority>
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_NVIC_EnableIRQ>:
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff31 	bl	80049f0 <__NVIC_EnableIRQ>
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SYSTICK_Config>:
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ffa2 	bl	8004ae8 <SysTick_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_DMA_Abort>:
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	f7ff feb6 	bl	800492c <HAL_GetTick>
 8004bc0:	60b8      	str	r0, [r7, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d008      	beq.n	8004be0 <HAL_DMA_Abort+0x32>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2280      	movs	r2, #128	@ 0x80
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e052      	b.n	8004c86 <HAL_DMA_Abort+0xd8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0216 	bic.w	r2, r2, #22
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bfe:	615a      	str	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <HAL_DMA_Abort+0x62>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_DMA_Abort+0x72>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0208 	bic.w	r2, r2, #8
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e013      	b.n	8004c5a <HAL_DMA_Abort+0xac>
 8004c32:	f7ff fe7b 	bl	800492c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d90c      	bls.n	8004c5a <HAL_DMA_Abort+0xac>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8004c56:	2303      	movs	r3, #3
 8004c58:	e015      	b.n	8004c86 <HAL_DMA_Abort+0xd8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e4      	bne.n	8004c32 <HAL_DMA_Abort+0x84>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6c:	223f      	movs	r2, #63	@ 0x3f
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8004c84:	2300      	movs	r3, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_DMA_Abort_IT>:
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_Abort_IT+0x1e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2280      	movs	r2, #128	@ 0x80
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e00c      	b.n	8004cc6 <HAL_DMA_Abort_IT+0x38>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2205      	movs	r2, #5
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_GPIO_Init>:
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	@ 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e165      	b.n	8004fbc <HAL_GPIO_Init+0x2e8>
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	f040 8154 	bne.w	8004fb6 <HAL_GPIO_Init+0x2e2>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d005      	beq.n	8004d26 <HAL_GPIO_Init+0x52>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d130      	bne.n	8004d88 <HAL_GPIO_Init+0xb4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2203      	movs	r2, #3
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 0201 	and.w	r2, r3, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d017      	beq.n	8004dc4 <HAL_GPIO_Init+0xf0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	2203      	movs	r2, #3
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	60da      	str	r2, [r3, #12]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d123      	bne.n	8004e18 <HAL_GPIO_Init+0x144>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	08da      	lsrs	r2, r3, #3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3208      	adds	r2, #8
 8004dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	220f      	movs	r2, #15
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	08da      	lsrs	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3208      	adds	r2, #8
 8004e12:	69b9      	ldr	r1, [r7, #24]
 8004e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	2203      	movs	r2, #3
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80ae 	beq.w	8004fb6 <HAL_GPIO_Init+0x2e2>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	4a5c      	ldr	r2, [pc, #368]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e6a:	4b5a      	ldr	r3, [pc, #360]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a58      	ldr	r2, [pc, #352]	@ (8004fd8 <HAL_GPIO_Init+0x304>)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8004fdc <HAL_GPIO_Init+0x308>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d025      	beq.n	8004eee <HAL_GPIO_Init+0x21a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe0 <HAL_GPIO_Init+0x30c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <HAL_GPIO_Init+0x216>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a4d      	ldr	r2, [pc, #308]	@ (8004fe4 <HAL_GPIO_Init+0x310>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d019      	beq.n	8004ee6 <HAL_GPIO_Init+0x212>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8004fe8 <HAL_GPIO_Init+0x314>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x20e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8004fec <HAL_GPIO_Init+0x318>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x20a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff0 <HAL_GPIO_Init+0x31c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x206>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a49      	ldr	r2, [pc, #292]	@ (8004ff4 <HAL_GPIO_Init+0x320>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x202>
 8004ed2:	2306      	movs	r3, #6
 8004ed4:	e00c      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004ed6:	2307      	movs	r3, #7
 8004ed8:	e00a      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004eda:	2305      	movs	r3, #5
 8004edc:	e008      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	e006      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e004      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_GPIO_Init+0x21c>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	f002 0203 	and.w	r2, r2, #3
 8004ef6:	0092      	lsls	r2, r2, #2
 8004ef8:	4093      	lsls	r3, r2
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	4935      	ldr	r1, [pc, #212]	@ (8004fd8 <HAL_GPIO_Init+0x304>)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	3302      	adds	r3, #2
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_Init+0x25e>
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	4a31      	ldr	r2, [pc, #196]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	6093      	str	r3, [r2, #8]
 8004f38:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x288>
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	60d3      	str	r3, [r2, #12]
 8004f62:	4b25      	ldr	r3, [pc, #148]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x2b2>
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	6053      	str	r3, [r2, #4]
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_GPIO_Init+0x2dc>
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	4a11      	ldr	r2, [pc, #68]	@ (8004ff8 <HAL_GPIO_Init+0x324>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	f67f ae96 	bls.w	8004cf0 <HAL_GPIO_Init+0x1c>
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3724      	adds	r7, #36	@ 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	40020000 	.word	0x40020000
 8004fe0:	40020400 	.word	0x40020400
 8004fe4:	40020800 	.word	0x40020800
 8004fe8:	40020c00 	.word	0x40020c00
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40021400 	.word	0x40021400
 8004ff4:	40021800 	.word	0x40021800
 8004ff8:	40013c00 	.word	0x40013c00

08004ffc <HAL_GPIO_WritePin>:
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
 8005008:	4613      	mov	r3, r2
 800500a:	707b      	strb	r3, [r7, #1]
 800500c:	787b      	ldrb	r3, [r7, #1]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_WritePin+0x1e>
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	619a      	str	r2, [r3, #24]
 8005018:	e003      	b.n	8005022 <HAL_GPIO_WritePin+0x26>
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	041a      	lsls	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	619a      	str	r2, [r3, #24]
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_RCC_ClockConfig>:
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_ClockConfig+0x14>
 8005040:	2301      	movs	r3, #1
 8005042:	e0cc      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 8005044:	4b68      	ldr	r3, [pc, #416]	@ (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d90c      	bls.n	800506c <HAL_RCC_ClockConfig+0x3c>
 8005052:	4b65      	ldr	r3, [pc, #404]	@ (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	4b63      	ldr	r3, [pc, #396]	@ (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_ClockConfig+0x3c>
 8005068:	2301      	movs	r3, #1
 800506a:	e0b8      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d020      	beq.n	80050ba <HAL_RCC_ClockConfig+0x8a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_ClockConfig+0x60>
 8005084:	4b59      	ldr	r3, [pc, #356]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a58      	ldr	r2, [pc, #352]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800508e:	6093      	str	r3, [r2, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x78>
 800509c:	4b53      	ldr	r3, [pc, #332]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4a52      	ldr	r2, [pc, #328]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050a6:	6093      	str	r3, [r2, #8]
 80050a8:	4b50      	ldr	r3, [pc, #320]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	494d      	ldr	r1, [pc, #308]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d044      	beq.n	8005150 <HAL_RCC_ClockConfig+0x120>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xae>
 80050ce:	4b47      	ldr	r3, [pc, #284]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d119      	bne.n	800510e <HAL_RCC_ClockConfig+0xde>
 80050da:	2301      	movs	r3, #1
 80050dc:	e07f      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d003      	beq.n	80050ee <HAL_RCC_ClockConfig+0xbe>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xce>
 80050ee:	4b3f      	ldr	r3, [pc, #252]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_RCC_ClockConfig+0xde>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e06f      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 80050fe:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCC_ClockConfig+0xde>
 800510a:	2301      	movs	r3, #1
 800510c:	e067      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 800510e:	4b37      	ldr	r3, [pc, #220]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 0203 	bic.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4934      	ldr	r1, [pc, #208]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]
 8005120:	f7ff fc04 	bl	800492c <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	e00a      	b.n	800513e <HAL_RCC_ClockConfig+0x10e>
 8005128:	f7ff fc00 	bl	800492c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x10e>
 800513a:	2303      	movs	r3, #3
 800513c:	e04f      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 800513e:	4b2b      	ldr	r3, [pc, #172]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 020c 	and.w	r2, r3, #12
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	429a      	cmp	r2, r3
 800514e:	d1eb      	bne.n	8005128 <HAL_RCC_ClockConfig+0xf8>
 8005150:	4b25      	ldr	r3, [pc, #148]	@ (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d20c      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x148>
 800515e:	4b22      	ldr	r3, [pc, #136]	@ (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	4b20      	ldr	r3, [pc, #128]	@ (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_ClockConfig+0x148>
 8005174:	2301      	movs	r3, #1
 8005176:	e032      	b.n	80051de <HAL_RCC_ClockConfig+0x1ae>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_RCC_ClockConfig+0x166>
 8005184:	4b19      	ldr	r3, [pc, #100]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4916      	ldr	r1, [pc, #88]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x186>
 80051a2:	4b12      	ldr	r3, [pc, #72]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	490e      	ldr	r1, [pc, #56]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
 80051b6:	f000 f855 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 80051ba:	4602      	mov	r2, r0
 80051bc:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	490a      	ldr	r1, [pc, #40]	@ (80051f0 <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	5ccb      	ldrb	r3, [r1, r3]
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b09      	ldr	r3, [pc, #36]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fb64 	bl	80048a4 <HAL_InitTick>
 80051dc:	2300      	movs	r3, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40023c00 	.word	0x40023c00
 80051ec:	40023800 	.word	0x40023800
 80051f0:	0802c35c 	.word	0x0802c35c
 80051f4:	20016a78 	.word	0x20016a78
 80051f8:	20016a7c 	.word	0x20016a7c

080051fc <HAL_RCC_GetHCLKFreq>:
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
 8005200:	4b03      	ldr	r3, [pc, #12]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x14>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20016a78 	.word	0x20016a78

08005214 <HAL_RCC_GetPCLK1Freq>:
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
 8005218:	f7ff fff0 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0a9b      	lsrs	r3, r3, #10
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4903      	ldr	r1, [pc, #12]	@ (8005238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40023800 	.word	0x40023800
 8005238:	0802c36c 	.word	0x0802c36c

0800523c <HAL_RCC_GetPCLK2Freq>:
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
 8005240:	f7ff ffdc 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b05      	ldr	r3, [pc, #20]	@ (800525c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	0b5b      	lsrs	r3, r3, #13
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4903      	ldr	r1, [pc, #12]	@ (8005260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40023800 	.word	0x40023800
 8005260:	0802c36c 	.word	0x0802c36c

08005264 <HAL_RCC_GetSysClockFreq>:
 8005264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005268:	b0a6      	sub	sp, #152	@ 0x98
 800526a:	af00      	add	r7, sp, #0
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800528a:	4bc8      	ldr	r3, [pc, #800]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 030c 	and.w	r3, r3, #12
 8005292:	2b0c      	cmp	r3, #12
 8005294:	f200 817e 	bhi.w	8005594 <HAL_RCC_GetSysClockFreq+0x330>
 8005298:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	080052d5 	.word	0x080052d5
 80052a4:	08005595 	.word	0x08005595
 80052a8:	08005595 	.word	0x08005595
 80052ac:	08005595 	.word	0x08005595
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	08005595 	.word	0x08005595
 80052b8:	08005595 	.word	0x08005595
 80052bc:	08005595 	.word	0x08005595
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	08005595 	.word	0x08005595
 80052c8:	08005595 	.word	0x08005595
 80052cc:	08005595 	.word	0x08005595
 80052d0:	0800544f 	.word	0x0800544f
 80052d4:	4bb6      	ldr	r3, [pc, #728]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80052d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052da:	e15f      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x338>
 80052dc:	4bb5      	ldr	r3, [pc, #724]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x350>)
 80052de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052e2:	e15b      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x338>
 80052e4:	4bb1      	ldr	r3, [pc, #708]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80052f0:	4bae      	ldr	r3, [pc, #696]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d031      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0xfc>
 80052fc:	4bab      	ldr	r3, [pc, #684]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	2200      	movs	r2, #0
 8005304:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005306:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005310:	2300      	movs	r3, #0
 8005312:	667b      	str	r3, [r7, #100]	@ 0x64
 8005314:	4ba7      	ldr	r3, [pc, #668]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005316:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800531a:	462a      	mov	r2, r5
 800531c:	fb03 f202 	mul.w	r2, r3, r2
 8005320:	2300      	movs	r3, #0
 8005322:	4621      	mov	r1, r4
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	4aa2      	ldr	r2, [pc, #648]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800532c:	4621      	mov	r1, r4
 800532e:	fba1 1202 	umull	r1, r2, r1, r2
 8005332:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005334:	460a      	mov	r2, r1
 8005336:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005338:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800533a:	4413      	add	r3, r2
 800533c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800533e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005342:	2200      	movs	r2, #0
 8005344:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005346:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005348:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800534c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005350:	f7fb f966 	bl	8000620 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800535e:	e064      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x1c6>
 8005360:	4b92      	ldr	r3, [pc, #584]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	2200      	movs	r2, #0
 8005368:	653b      	str	r3, [r7, #80]	@ 0x50
 800536a:	657a      	str	r2, [r7, #84]	@ 0x54
 800536c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005374:	2300      	movs	r3, #0
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005378:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800537c:	4622      	mov	r2, r4
 800537e:	462b      	mov	r3, r5
 8005380:	f04f 0000 	mov.w	r0, #0
 8005384:	f04f 0100 	mov.w	r1, #0
 8005388:	0159      	lsls	r1, r3, #5
 800538a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800538e:	0150      	lsls	r0, r2, #5
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4621      	mov	r1, r4
 8005396:	1a51      	subs	r1, r2, r1
 8005398:	6139      	str	r1, [r7, #16]
 800539a:	4629      	mov	r1, r5
 800539c:	eb63 0301 	sbc.w	r3, r3, r1
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ae:	4659      	mov	r1, fp
 80053b0:	018b      	lsls	r3, r1, #6
 80053b2:	4651      	mov	r1, sl
 80053b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053b8:	4651      	mov	r1, sl
 80053ba:	018a      	lsls	r2, r1, #6
 80053bc:	4651      	mov	r1, sl
 80053be:	ebb2 0801 	subs.w	r8, r2, r1
 80053c2:	4659      	mov	r1, fp
 80053c4:	eb63 0901 	sbc.w	r9, r3, r1
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053dc:	4690      	mov	r8, r2
 80053de:	4699      	mov	r9, r3
 80053e0:	4623      	mov	r3, r4
 80053e2:	eb18 0303 	adds.w	r3, r8, r3
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	462b      	mov	r3, r5
 80053ea:	eb49 0303 	adc.w	r3, r9, r3
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053fc:	4629      	mov	r1, r5
 80053fe:	028b      	lsls	r3, r1, #10
 8005400:	4621      	mov	r1, r4
 8005402:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005406:	4621      	mov	r1, r4
 8005408:	028a      	lsls	r2, r1, #10
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005412:	2200      	movs	r2, #0
 8005414:	643b      	str	r3, [r7, #64]	@ 0x40
 8005416:	647a      	str	r2, [r7, #68]	@ 0x44
 8005418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800541c:	f7fb f900 	bl	8000620 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4613      	mov	r3, r2
 8005426:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800542a:	4b60      	ldr	r3, [pc, #384]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	3301      	adds	r3, #1
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800543c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005440:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800544c:	e0a6      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x338>
 800544e:	4b57      	ldr	r3, [pc, #348]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005456:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800545a:	4b54      	ldr	r3, [pc, #336]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02a      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x258>
 8005466:	4b51      	ldr	r3, [pc, #324]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	2200      	movs	r2, #0
 800546e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005470:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005478:	2100      	movs	r1, #0
 800547a:	4b4e      	ldr	r3, [pc, #312]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800547c:	fb03 f201 	mul.w	r2, r3, r1
 8005480:	2300      	movs	r3, #0
 8005482:	fb00 f303 	mul.w	r3, r0, r3
 8005486:	4413      	add	r3, r2
 8005488:	4a4a      	ldr	r2, [pc, #296]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800548a:	fba0 1202 	umull	r1, r2, r0, r2
 800548e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005490:	460a      	mov	r2, r1
 8005492:	673a      	str	r2, [r7, #112]	@ 0x70
 8005494:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005496:	4413      	add	r3, r2
 8005498:	677b      	str	r3, [r7, #116]	@ 0x74
 800549a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800549e:	2200      	movs	r2, #0
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80054a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80054ac:	f7fb f8b8 	bl	8000620 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054ba:	e05b      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x310>
 80054bc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	2200      	movs	r2, #0
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	2300      	movs	r3, #0
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	f04f 0000 	mov.w	r0, #0
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	0159      	lsls	r1, r3, #5
 80054e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054ea:	0150      	lsls	r0, r2, #5
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4641      	mov	r1, r8
 80054f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054f6:	4649      	mov	r1, r9
 80054f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800550c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005510:	ebb2 040a 	subs.w	r4, r2, sl
 8005514:	eb63 050b 	sbc.w	r5, r3, fp
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	00eb      	lsls	r3, r5, #3
 8005522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005526:	00e2      	lsls	r2, r4, #3
 8005528:	4614      	mov	r4, r2
 800552a:	461d      	mov	r5, r3
 800552c:	4643      	mov	r3, r8
 800552e:	18e3      	adds	r3, r4, r3
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	464b      	mov	r3, r9
 8005534:	eb45 0303 	adc.w	r3, r5, r3
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005546:	4629      	mov	r1, r5
 8005548:	028b      	lsls	r3, r1, #10
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005550:	4621      	mov	r1, r4
 8005552:	028a      	lsls	r2, r1, #10
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800555c:	2200      	movs	r2, #0
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005566:	f7fb f85b 	bl	8000620 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4613      	mov	r3, r2
 8005570:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005574:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x348>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	0f1b      	lsrs	r3, r3, #28
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005586:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005592:	e003      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x338>
 8005594:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800559a:	bf00      	nop
 800559c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80055a0:	4618      	mov	r0, r3
 80055a2:	3798      	adds	r7, #152	@ 0x98
 80055a4:	46bd      	mov	sp, r7
 80055a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	017d7840 	.word	0x017d7840

080055b8 <HAL_RCC_OscConfig>:
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x12>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e28d      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8083 	beq.w	80056de <HAL_RCC_OscConfig+0x126>
 80055d8:	4b94      	ldr	r3, [pc, #592]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d019      	beq.n	8005618 <HAL_RCC_OscConfig+0x60>
 80055e4:	4b91      	ldr	r3, [pc, #580]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d106      	bne.n	80055fe <HAL_RCC_OscConfig+0x46>
 80055f0:	4b8e      	ldr	r3, [pc, #568]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055fc:	d00c      	beq.n	8005618 <HAL_RCC_OscConfig+0x60>
 80055fe:	4b8b      	ldr	r3, [pc, #556]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d112      	bne.n	8005630 <HAL_RCC_OscConfig+0x78>
 800560a:	4b88      	ldr	r3, [pc, #544]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005616:	d10b      	bne.n	8005630 <HAL_RCC_OscConfig+0x78>
 8005618:	4b84      	ldr	r3, [pc, #528]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05b      	beq.n	80056dc <HAL_RCC_OscConfig+0x124>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d157      	bne.n	80056dc <HAL_RCC_OscConfig+0x124>
 800562c:	2301      	movs	r3, #1
 800562e:	e25a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005638:	d106      	bne.n	8005648 <HAL_RCC_OscConfig+0x90>
 800563a:	4b7c      	ldr	r3, [pc, #496]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a7b      	ldr	r2, [pc, #492]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e01d      	b.n	8005684 <HAL_RCC_OscConfig+0xcc>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005650:	d10c      	bne.n	800566c <HAL_RCC_OscConfig+0xb4>
 8005652:	4b76      	ldr	r3, [pc, #472]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a75      	ldr	r2, [pc, #468]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	4b73      	ldr	r3, [pc, #460]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a72      	ldr	r2, [pc, #456]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e00b      	b.n	8005684 <HAL_RCC_OscConfig+0xcc>
 800566c:	4b6f      	ldr	r3, [pc, #444]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6e      	ldr	r2, [pc, #440]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	4b6c      	ldr	r3, [pc, #432]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6b      	ldr	r2, [pc, #428]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800567e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d013      	beq.n	80056b4 <HAL_RCC_OscConfig+0xfc>
 800568c:	f7ff f94e 	bl	800492c <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0xee>
 8005694:	f7ff f94a 	bl	800492c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	@ 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0xee>
 80056a2:	2303      	movs	r3, #3
 80056a4:	e21f      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80056a6:	4b61      	ldr	r3, [pc, #388]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0xdc>
 80056b2:	e014      	b.n	80056de <HAL_RCC_OscConfig+0x126>
 80056b4:	f7ff f93a 	bl	800492c <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x116>
 80056bc:	f7ff f936 	bl	800492c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b64      	cmp	r3, #100	@ 0x64
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x116>
 80056ca:	2303      	movs	r3, #3
 80056cc:	e20b      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80056ce:	4b57      	ldr	r3, [pc, #348]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x104>
 80056da:	e000      	b.n	80056de <HAL_RCC_OscConfig+0x126>
 80056dc:	bf00      	nop
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d06f      	beq.n	80057ca <HAL_RCC_OscConfig+0x212>
 80056ea:	4b50      	ldr	r3, [pc, #320]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d017      	beq.n	8005726 <HAL_RCC_OscConfig+0x16e>
 80056f6:	4b4d      	ldr	r3, [pc, #308]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d105      	bne.n	800570e <HAL_RCC_OscConfig+0x156>
 8005702:	4b4a      	ldr	r3, [pc, #296]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_RCC_OscConfig+0x16e>
 800570e:	4b47      	ldr	r3, [pc, #284]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
 8005716:	2b0c      	cmp	r3, #12
 8005718:	d11c      	bne.n	8005754 <HAL_RCC_OscConfig+0x19c>
 800571a:	4b44      	ldr	r3, [pc, #272]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d116      	bne.n	8005754 <HAL_RCC_OscConfig+0x19c>
 8005726:	4b41      	ldr	r3, [pc, #260]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_RCC_OscConfig+0x186>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d001      	beq.n	800573e <HAL_RCC_OscConfig+0x186>
 800573a:	2301      	movs	r3, #1
 800573c:	e1d3      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 800573e:	4b3b      	ldr	r3, [pc, #236]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4937      	ldr	r1, [pc, #220]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]
 8005752:	e03a      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d020      	beq.n	800579e <HAL_RCC_OscConfig+0x1e6>
 800575c:	4b34      	ldr	r3, [pc, #208]	@ (8005830 <HAL_RCC_OscConfig+0x278>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f7ff f8e3 	bl	800492c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x1c4>
 800576a:	f7ff f8df 	bl	800492c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x1c4>
 8005778:	2303      	movs	r3, #3
 800577a:	e1b4      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 800577c:	4b2b      	ldr	r3, [pc, #172]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCC_OscConfig+0x1b2>
 8005788:	4b28      	ldr	r3, [pc, #160]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4925      	ldr	r1, [pc, #148]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]
 800579c:	e015      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
 800579e:	4b24      	ldr	r3, [pc, #144]	@ (8005830 <HAL_RCC_OscConfig+0x278>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f7ff f8c2 	bl	800492c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x206>
 80057ac:	f7ff f8be 	bl	800492c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x206>
 80057ba:	2303      	movs	r3, #3
 80057bc:	e193      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80057be:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x1f4>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d036      	beq.n	8005844 <HAL_RCC_OscConfig+0x28c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_RCC_OscConfig+0x254>
 80057de:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f7ff f8a2 	bl	800492c <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x246>
 80057ec:	f7ff f89e 	bl	800492c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x246>
 80057fa:	2303      	movs	r3, #3
 80057fc:	e173      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <HAL_RCC_OscConfig+0x274>)
 8005800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x234>
 800580a:	e01b      	b.n	8005844 <HAL_RCC_OscConfig+0x28c>
 800580c:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <HAL_RCC_OscConfig+0x27c>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	f7ff f88b 	bl	800492c <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]
 8005818:	e00e      	b.n	8005838 <HAL_RCC_OscConfig+0x280>
 800581a:	f7ff f887 	bl	800492c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d907      	bls.n	8005838 <HAL_RCC_OscConfig+0x280>
 8005828:	2303      	movs	r3, #3
 800582a:	e15c      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 800582c:	40023800 	.word	0x40023800
 8005830:	42470000 	.word	0x42470000
 8005834:	42470e80 	.word	0x42470e80
 8005838:	4b8a      	ldr	r3, [pc, #552]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 800583a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ea      	bne.n	800581a <HAL_RCC_OscConfig+0x262>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8097 	beq.w	8005980 <HAL_RCC_OscConfig+0x3c8>
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
 8005856:	4b83      	ldr	r3, [pc, #524]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10f      	bne.n	8005882 <HAL_RCC_OscConfig+0x2ca>
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	4b7f      	ldr	r3, [pc, #508]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005870:	6413      	str	r3, [r2, #64]	@ 0x40
 8005872:	4b7c      	ldr	r3, [pc, #496]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
 8005882:	4b79      	ldr	r3, [pc, #484]	@ (8005a68 <HAL_RCC_OscConfig+0x4b0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d118      	bne.n	80058c0 <HAL_RCC_OscConfig+0x308>
 800588e:	4b76      	ldr	r3, [pc, #472]	@ (8005a68 <HAL_RCC_OscConfig+0x4b0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a75      	ldr	r2, [pc, #468]	@ (8005a68 <HAL_RCC_OscConfig+0x4b0>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	f7ff f847 	bl	800492c <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x2fc>
 80058a2:	f7ff f843 	bl	800492c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x2fc>
 80058b0:	2303      	movs	r3, #3
 80058b2:	e118      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80058b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a68 <HAL_RCC_OscConfig+0x4b0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x2ea>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d106      	bne.n	80058d6 <HAL_RCC_OscConfig+0x31e>
 80058c8:	4b66      	ldr	r3, [pc, #408]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058cc:	4a65      	ldr	r2, [pc, #404]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d4:	e01c      	b.n	8005910 <HAL_RCC_OscConfig+0x358>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x340>
 80058de:	4b61      	ldr	r3, [pc, #388]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	4a60      	ldr	r2, [pc, #384]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0x358>
 80058f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fc:	4a59      	ldr	r2, [pc, #356]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	6713      	str	r3, [r2, #112]	@ 0x70
 8005904:	4b57      	ldr	r3, [pc, #348]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005908:	4a56      	ldr	r2, [pc, #344]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 800590a:	f023 0304 	bic.w	r3, r3, #4
 800590e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <HAL_RCC_OscConfig+0x38c>
 8005918:	f7ff f808 	bl	800492c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]
 800591e:	e00a      	b.n	8005936 <HAL_RCC_OscConfig+0x37e>
 8005920:	f7ff f804 	bl	800492c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x37e>
 8005932:	2303      	movs	r3, #3
 8005934:	e0d7      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005936:	4b4b      	ldr	r3, [pc, #300]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0ee      	beq.n	8005920 <HAL_RCC_OscConfig+0x368>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x3b6>
 8005944:	f7fe fff2 	bl	800492c <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]
 800594a:	e00a      	b.n	8005962 <HAL_RCC_OscConfig+0x3aa>
 800594c:	f7fe ffee 	bl	800492c <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x3aa>
 800595e:	2303      	movs	r3, #3
 8005960:	e0c1      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005962:	4b40      	ldr	r3, [pc, #256]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ee      	bne.n	800594c <HAL_RCC_OscConfig+0x394>
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <HAL_RCC_OscConfig+0x3c8>
 8005974:	4b3b      	ldr	r3, [pc, #236]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	4a3a      	ldr	r2, [pc, #232]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 800597a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800597e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80ad 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x52c>
 800598a:	4b36      	ldr	r3, [pc, #216]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b08      	cmp	r3, #8
 8005994:	d060      	beq.n	8005a58 <HAL_RCC_OscConfig+0x4a0>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d145      	bne.n	8005a2a <HAL_RCC_OscConfig+0x472>
 800599e:	4b33      	ldr	r3, [pc, #204]	@ (8005a6c <HAL_RCC_OscConfig+0x4b4>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f7fe ffc2 	bl	800492c <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x406>
 80059ac:	f7fe ffbe 	bl	800492c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x406>
 80059ba:	2303      	movs	r3, #3
 80059bc:	e093      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 80059be:	4b29      	ldr	r3, [pc, #164]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x3f4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	3b01      	subs	r3, #1
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	071b      	lsls	r3, r3, #28
 80059f6:	491b      	ldr	r1, [pc, #108]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]
 80059fc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_RCC_OscConfig+0x4b4>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f7fe ff93 	bl	800492c <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x464>
 8005a0a:	f7fe ff8f 	bl	800492c <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x464>
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e064      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005a1c:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x452>
 8005a28:	e05c      	b.n	8005ae4 <HAL_RCC_OscConfig+0x52c>
 8005a2a:	4b10      	ldr	r3, [pc, #64]	@ (8005a6c <HAL_RCC_OscConfig+0x4b4>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	f7fe ff7c 	bl	800492c <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x492>
 8005a38:	f7fe ff78 	bl	800492c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x492>
 8005a46:	2303      	movs	r3, #3
 8005a48:	e04d      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005a4a:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <HAL_RCC_OscConfig+0x4ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x480>
 8005a56:	e045      	b.n	8005ae4 <HAL_RCC_OscConfig+0x52c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_OscConfig+0x4b8>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e040      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40007000 	.word	0x40007000
 8005a6c:	42470060 	.word	0x42470060
 8005a70:	4b1f      	ldr	r3, [pc, #124]	@ (8005af0 <HAL_RCC_OscConfig+0x538>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d030      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x528>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d129      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x528>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d122      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x528>
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aa6:	0192      	lsls	r2, r2, #6
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d119      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x528>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d10f      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x528>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x528>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	071b      	lsls	r3, r3, #28
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x52c>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40023800 	.word	0x40023800

08005af4 <HAL_SPI_Init>:
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_SPI_Init+0x12>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e07b      	b.n	8005bfe <HAL_SPI_Init+0x10a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <HAL_SPI_Init+0x2c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b16:	d009      	beq.n	8005b2c <HAL_SPI_Init+0x38>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	61da      	str	r2, [r3, #28]
 8005b1e:	e005      	b.n	8005b2c <HAL_SPI_Init+0x38>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	611a      	str	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_SPI_Init+0x58>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fe fd14 	bl	8004574 <HAL_SPI_MspInit>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb0:	ea42 0103 	orr.w	r1, r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	f003 0104 	and.w	r1, r3, #4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	f003 0210 	and.w	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bec:	61da      	str	r2, [r3, #28]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_UART_Init>:
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Init+0x12>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e042      	b.n	8005c9e <HAL_UART_Init+0x98>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <HAL_UART_Init+0x2c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fe fce9 	bl	8004604 <HAL_UART_MspInit>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	@ 0x24
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fcda 	bl	8006604 <UART_SetConfig>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c5e:	611a      	str	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c6e:	615a      	str	r2, [r3, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UART_Receive_IT>:
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d112      	bne.n	8005ce6 <HAL_UART_Receive_IT+0x40>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UART_Receive_IT+0x26>
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_UART_Receive_IT+0x2a>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e00b      	b.n	8005ce8 <HAL_UART_Receive_IT+0x42>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fab9 	bl	8006254 <UART_Start_Receive_IT>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	e000      	b.n	8005ce8 <HAL_UART_Receive_IT+0x42>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_UART_IRQHandler>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b0ba      	sub	sp, #232	@ 0xe8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <HAL_UART_IRQHandler+0x66>
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_UART_IRQHandler+0x66>
 8005d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_IRQHandler+0x66>
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fb99 	bl	8006486 <UART_Receive_IT>
 8005d54:	e25b      	b.n	800620e <HAL_UART_IRQHandler+0x51e>
 8005d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80de 	beq.w	8005f1c <HAL_UART_IRQHandler+0x22c>
 8005d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <HAL_UART_IRQHandler+0x8a>
 8005d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80d1 	beq.w	8005f1c <HAL_UART_IRQHandler+0x22c>
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_UART_IRQHandler+0xae>
 8005d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_UART_IRQHandler+0xae>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f043 0201 	orr.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xd2>
 8005daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xd2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f043 0202 	orr.w	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_UART_IRQHandler+0xf6>
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0xf6>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	f043 0204 	orr.w	r2, r3, #4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	@ 0x44
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d011      	beq.n	8005e16 <HAL_UART_IRQHandler+0x126>
 8005df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <HAL_UART_IRQHandler+0x11a>
 8005dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_UART_IRQHandler+0x126>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0e:	f043 0208 	orr.w	r2, r3, #8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 81f2 	beq.w	8006204 <HAL_UART_IRQHandler+0x514>
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_UART_IRQHandler+0x14e>
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_UART_IRQHandler+0x14e>
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb24 	bl	8006486 <UART_Receive_IT>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e48:	2b40      	cmp	r3, #64	@ 0x40
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_UART_IRQHandler+0x17a>
 8005e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04f      	beq.n	8005f0a <HAL_UART_IRQHandler+0x21a>
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fa2c 	bl	80062c8 <UART_EndRxTransfer>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d141      	bne.n	8005f02 <HAL_UART_IRQHandler+0x212>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1d9      	bne.n	8005e7e <HAL_UART_IRQHandler+0x18e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d013      	beq.n	8005efa <HAL_UART_IRQHandler+0x20a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80060d0 <HAL_UART_IRQHandler+0x3e0>)
 8005ed8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fed5 	bl	8004c8e <HAL_DMA_Abort_IT>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <HAL_UART_IRQHandler+0x228>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
 8005ef8:	e00e      	b.n	8005f18 <HAL_UART_IRQHandler+0x228>
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f994 	bl	8006228 <HAL_UART_ErrorCallback>
 8005f00:	e00a      	b.n	8005f18 <HAL_UART_IRQHandler+0x228>
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f990 	bl	8006228 <HAL_UART_ErrorCallback>
 8005f08:	e006      	b.n	8005f18 <HAL_UART_IRQHandler+0x228>
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f98c 	bl	8006228 <HAL_UART_ErrorCallback>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f16:	e175      	b.n	8006204 <HAL_UART_IRQHandler+0x514>
 8005f18:	bf00      	nop
 8005f1a:	e173      	b.n	8006204 <HAL_UART_IRQHandler+0x514>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	f040 814f 	bne.w	80061c4 <HAL_UART_IRQHandler+0x4d4>
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 8148 	beq.w	80061c4 <HAL_UART_IRQHandler+0x4d4>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8141 	beq.w	80061c4 <HAL_UART_IRQHandler+0x4d4>
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	f040 80b6 	bne.w	80060d4 <HAL_UART_IRQHandler+0x3e4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8005f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8145 	beq.w	8006208 <HAL_UART_IRQHandler+0x518>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f86:	429a      	cmp	r2, r3
 8005f88:	f080 813e 	bcs.w	8006208 <HAL_UART_IRQHandler+0x518>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f92:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9e:	f000 8088 	beq.w	80060b2 <HAL_UART_IRQHandler+0x3c2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1d9      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x2b2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006012:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006016:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006018:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800601a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e1      	bne.n	8005fee <HAL_UART_IRQHandler+0x2fe>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	663b      	str	r3, [r7, #96]	@ 0x60
 8006032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800603a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800603c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3314      	adds	r3, #20
 800604a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800604e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006052:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006054:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	667b      	str	r3, [r7, #100]	@ 0x64
 800605c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e3      	bne.n	800602a <HAL_UART_IRQHandler+0x33a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006082:	f023 0310 	bic.w	r3, r3, #16
 8006086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006094:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006096:	657b      	str	r3, [r7, #84]	@ 0x54
 8006098:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800609a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e3      	bne.n	8006070 <HAL_UART_IRQHandler+0x380>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe fd7e 	bl	8004bae <HAL_DMA_Abort>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8b7 	bl	800623c <HAL_UARTEx_RxEventCallback>
 80060ce:	e09b      	b.n	8006208 <HAL_UART_IRQHandler+0x518>
 80060d0:	0800638f 	.word	0x0800638f
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 808e 	beq.w	800620c <HAL_UART_IRQHandler+0x51c>
 80060f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8089 	beq.w	800620c <HAL_UART_IRQHandler+0x51c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
 800610a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800611e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006120:	643b      	str	r3, [r7, #64]	@ 0x40
 8006122:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800612c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e3      	bne.n	80060fa <HAL_UART_IRQHandler+0x40a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006156:	633a      	str	r2, [r7, #48]	@ 0x30
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800615c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e3      	bne.n	8006132 <HAL_UART_IRQHandler+0x442>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0310 	bic.w	r3, r3, #16
 800618e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800619c:	61fa      	str	r2, [r7, #28]
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e3      	bne.n	8006178 <HAL_UART_IRQHandler+0x488>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80061b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f83d 	bl	800623c <HAL_UARTEx_RxEventCallback>
 80061c2:	e023      	b.n	800620c <HAL_UART_IRQHandler+0x51c>
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <HAL_UART_IRQHandler+0x4f4>
 80061d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_UART_IRQHandler+0x4f4>
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8ea 	bl	80063b6 <UART_Transmit_IT>
 80061e2:	e014      	b.n	800620e <HAL_UART_IRQHandler+0x51e>
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <HAL_UART_IRQHandler+0x51e>
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_UART_IRQHandler+0x51e>
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f92a 	bl	8006456 <UART_EndTransmit_IT>
 8006202:	e004      	b.n	800620e <HAL_UART_IRQHandler+0x51e>
 8006204:	bf00      	nop
 8006206:	e002      	b.n	800620e <HAL_UART_IRQHandler+0x51e>
 8006208:	bf00      	nop
 800620a:	e000      	b.n	800620e <HAL_UART_IRQHandler+0x51e>
 800620c:	bf00      	nop
 800620e:	37e8      	adds	r7, #232	@ 0xe8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_UART_TxCpltCallback>:
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_ErrorCallback>:
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UARTEx_RxEventCallback>:
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	807b      	strh	r3, [r7, #2]
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_Start_Receive_IT>:
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	629a      	str	r2, [r3, #40]	@ 0x28
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2222      	movs	r2, #34	@ 0x22
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <UART_Start_Receive_IT+0x46>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	615a      	str	r2, [r3, #20]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0220 	orr.w	r2, r2, #32
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_EndRxTransfer>:
 80062c8:	b480      	push	{r7}
 80062ca:	b095      	sub	sp, #84	@ 0x54
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e5      	bne.n	80062d0 <UART_EndRxTransfer+0x8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3314      	adds	r3, #20
 8006322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800632a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x3c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	d119      	bne.n	8006374 <UART_EndRxTransfer+0xac>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f023 0310 	bic.w	r3, r3, #16
 8006356:	647b      	str	r3, [r7, #68]	@ 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	330c      	adds	r3, #12
 800635e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006360:	61ba      	str	r2, [r7, #24]
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	6979      	ldr	r1, [r7, #20]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_EndRxTransfer+0x78>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	@ 0x30
 8006382:	bf00      	nop
 8006384:	3754      	adds	r7, #84	@ 0x54
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <UART_DMAAbortOnError>:
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	84da      	strh	r2, [r3, #38]	@ 0x26
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff ff3d 	bl	8006228 <HAL_UART_ErrorCallback>
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_Transmit_IT>:
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b21      	cmp	r3, #33	@ 0x21
 80063c8:	d13e      	bne.n	8006448 <UART_Transmit_IT+0x92>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d2:	d114      	bne.n	80063fe <UART_Transmit_IT+0x48>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d110      	bne.n	80063fe <UART_Transmit_IT+0x48>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	1c9a      	adds	r2, r3, #2
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	621a      	str	r2, [r3, #32]
 80063fc:	e008      	b.n	8006410 <UART_Transmit_IT+0x5a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6211      	str	r1, [r2, #32]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4619      	mov	r1, r3
 800641e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10f      	bne.n	8006444 <UART_Transmit_IT+0x8e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <UART_Transmit_IT+0x94>
 8006448:	2302      	movs	r3, #2
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <UART_EndTransmit_IT>:
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fecc 	bl	8006214 <HAL_UART_TxCpltCallback>
 800647c:	2300      	movs	r3, #0
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <UART_Receive_IT>:
 8006486:	b580      	push	{r7, lr}
 8006488:	b08c      	sub	sp, #48	@ 0x30
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b22      	cmp	r3, #34	@ 0x22
 8006498:	f040 80ae 	bne.w	80065f8 <UART_Receive_IT+0x172>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a4:	d117      	bne.n	80064d6 <UART_Receive_IT+0x50>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d113      	bne.n	80064d6 <UART_Receive_IT+0x50>
 80064ae:	2300      	movs	r3, #0
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	1c9a      	adds	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80064d4:	e026      	b.n	8006524 <UART_Receive_IT+0x9e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064dc:	2300      	movs	r3, #0
 80064de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d007      	beq.n	80064fa <UART_Receive_IT+0x74>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <UART_Receive_IT+0x82>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <UART_Receive_IT+0x82>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e008      	b.n	800651a <UART_Receive_IT+0x94>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006514:	b2da      	uxtb	r2, r3
 8006516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	@ 0x28
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29b      	uxth	r3, r3
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006534:	2b00      	cmp	r3, #0
 8006536:	d15d      	bne.n	80065f4 <UART_Receive_IT+0x16e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0220 	bic.w	r2, r2, #32
 8006546:	60da      	str	r2, [r3, #12]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	615a      	str	r2, [r3, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	635a      	str	r2, [r3, #52]	@ 0x34
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657a:	2b01      	cmp	r3, #1
 800657c:	d135      	bne.n	80065ea <UART_Receive_IT+0x164>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a4:	623a      	str	r2, [r7, #32]
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	69f9      	ldr	r1, [r7, #28]
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e5      	bne.n	8006584 <UART_Receive_IT+0xfe>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d10a      	bne.n	80065dc <UART_Receive_IT+0x156>
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fe2a 	bl	800623c <HAL_UARTEx_RxEventCallback>
 80065e8:	e002      	b.n	80065f0 <UART_Receive_IT+0x16a>
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fd fb82 	bl	8003cf4 <HAL_UART_RxCpltCallback>
 80065f0:	2300      	movs	r3, #0
 80065f2:	e002      	b.n	80065fa <UART_Receive_IT+0x174>
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <UART_Receive_IT+0x174>
 80065f8:	2302      	movs	r3, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	3730      	adds	r7, #48	@ 0x30
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <UART_SetConfig>:
 8006604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006608:	b0c0      	sub	sp, #256	@ 0x100
 800660a:	af00      	add	r7, sp, #0
 800660c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006620:	68d9      	ldr	r1, [r3, #12]
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	ea40 0301 	orr.w	r3, r0, r1
 800662c:	6113      	str	r3, [r2, #16]
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	431a      	orrs	r2, r3
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	431a      	orrs	r2, r3
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800665c:	f021 010c 	bic.w	r1, r1, #12
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800666a:	430b      	orrs	r3, r1
 800666c:	60d3      	str	r3, [r2, #12]
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667e:	6999      	ldr	r1, [r3, #24]
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	ea40 0301 	orr.w	r3, r0, r1
 800668a:	6153      	str	r3, [r2, #20]
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b8f      	ldr	r3, [pc, #572]	@ (80068d0 <UART_SetConfig+0x2cc>)
 8006694:	429a      	cmp	r2, r3
 8006696:	d005      	beq.n	80066a4 <UART_SetConfig+0xa0>
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b8d      	ldr	r3, [pc, #564]	@ (80068d4 <UART_SetConfig+0x2d0>)
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d104      	bne.n	80066ae <UART_SetConfig+0xaa>
 80066a4:	f7fe fdca 	bl	800523c <HAL_RCC_GetPCLK2Freq>
 80066a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066ac:	e003      	b.n	80066b6 <UART_SetConfig+0xb2>
 80066ae:	f7fe fdb1 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 80066b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c0:	f040 810c 	bne.w	80068dc <UART_SetConfig+0x2d8>
 80066c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066d6:	4622      	mov	r2, r4
 80066d8:	462b      	mov	r3, r5
 80066da:	1891      	adds	r1, r2, r2
 80066dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066de:	415b      	adcs	r3, r3
 80066e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066e6:	4621      	mov	r1, r4
 80066e8:	eb12 0801 	adds.w	r8, r2, r1
 80066ec:	4629      	mov	r1, r5
 80066ee:	eb43 0901 	adc.w	r9, r3, r1
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006706:	4690      	mov	r8, r2
 8006708:	4699      	mov	r9, r3
 800670a:	4623      	mov	r3, r4
 800670c:	eb18 0303 	adds.w	r3, r8, r3
 8006710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006714:	462b      	mov	r3, r5
 8006716:	eb49 0303 	adc.w	r3, r9, r3
 800671a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800672a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800672e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006732:	460b      	mov	r3, r1
 8006734:	18db      	adds	r3, r3, r3
 8006736:	653b      	str	r3, [r7, #80]	@ 0x50
 8006738:	4613      	mov	r3, r2
 800673a:	eb42 0303 	adc.w	r3, r2, r3
 800673e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006748:	f7f9 ff6a 	bl	8000620 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4b61      	ldr	r3, [pc, #388]	@ (80068d8 <UART_SetConfig+0x2d4>)
 8006752:	fba3 2302 	umull	r2, r3, r3, r2
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	011c      	lsls	r4, r3, #4
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006764:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	1891      	adds	r1, r2, r2
 8006772:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006774:	415b      	adcs	r3, r3
 8006776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800677c:	4641      	mov	r1, r8
 800677e:	eb12 0a01 	adds.w	sl, r2, r1
 8006782:	4649      	mov	r1, r9
 8006784:	eb43 0b01 	adc.w	fp, r3, r1
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679c:	4692      	mov	sl, r2
 800679e:	469b      	mov	fp, r3
 80067a0:	4643      	mov	r3, r8
 80067a2:	eb1a 0303 	adds.w	r3, sl, r3
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067aa:	464b      	mov	r3, r9
 80067ac:	eb4b 0303 	adc.w	r3, fp, r3
 80067b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067c8:	460b      	mov	r3, r1
 80067ca:	18db      	adds	r3, r3, r3
 80067cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ce:	4613      	mov	r3, r2
 80067d0:	eb42 0303 	adc.w	r3, r2, r3
 80067d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067de:	f7f9 ff1f 	bl	8000620 <__aeabi_uldivmod>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	4b3b      	ldr	r3, [pc, #236]	@ (80068d8 <UART_SetConfig+0x2d4>)
 80067ea:	fba3 2301 	umull	r2, r3, r3, r1
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2264      	movs	r2, #100	@ 0x64
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	1acb      	subs	r3, r1, r3
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067fe:	4b36      	ldr	r3, [pc, #216]	@ (80068d8 <UART_SetConfig+0x2d4>)
 8006800:	fba3 2302 	umull	r2, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800680c:	441c      	add	r4, r3
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006818:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800681c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	1891      	adds	r1, r2, r2
 8006826:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006828:	415b      	adcs	r3, r3
 800682a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800682c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006830:	4641      	mov	r1, r8
 8006832:	1851      	adds	r1, r2, r1
 8006834:	6339      	str	r1, [r7, #48]	@ 0x30
 8006836:	4649      	mov	r1, r9
 8006838:	414b      	adcs	r3, r1
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006848:	4659      	mov	r1, fp
 800684a:	00cb      	lsls	r3, r1, #3
 800684c:	4651      	mov	r1, sl
 800684e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006852:	4651      	mov	r1, sl
 8006854:	00ca      	lsls	r2, r1, #3
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	4603      	mov	r3, r0
 800685c:	4642      	mov	r2, r8
 800685e:	189b      	adds	r3, r3, r2
 8006860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006864:	464b      	mov	r3, r9
 8006866:	460a      	mov	r2, r1
 8006868:	eb42 0303 	adc.w	r3, r2, r3
 800686c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800687c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006884:	460b      	mov	r3, r1
 8006886:	18db      	adds	r3, r3, r3
 8006888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800688a:	4613      	mov	r3, r2
 800688c:	eb42 0303 	adc.w	r3, r2, r3
 8006890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800689a:	f7f9 fec1 	bl	8000620 <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4b0d      	ldr	r3, [pc, #52]	@ (80068d8 <UART_SetConfig+0x2d4>)
 80068a4:	fba3 1302 	umull	r1, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	2164      	movs	r1, #100	@ 0x64
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	3332      	adds	r3, #50	@ 0x32
 80068b6:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <UART_SetConfig+0x2d4>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f003 0207 	and.w	r2, r3, #7
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4422      	add	r2, r4
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	e106      	b.n	8006adc <UART_SetConfig+0x4d8>
 80068ce:	bf00      	nop
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	51eb851f 	.word	0x51eb851f
 80068dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068ee:	4642      	mov	r2, r8
 80068f0:	464b      	mov	r3, r9
 80068f2:	1891      	adds	r1, r2, r2
 80068f4:	6239      	str	r1, [r7, #32]
 80068f6:	415b      	adcs	r3, r3
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068fe:	4641      	mov	r1, r8
 8006900:	1854      	adds	r4, r2, r1
 8006902:	4649      	mov	r1, r9
 8006904:	eb43 0501 	adc.w	r5, r3, r1
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	00eb      	lsls	r3, r5, #3
 8006912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006916:	00e2      	lsls	r2, r4, #3
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	4643      	mov	r3, r8
 800691e:	18e3      	adds	r3, r4, r3
 8006920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006924:	464b      	mov	r3, r9
 8006926:	eb45 0303 	adc.w	r3, r5, r3
 800692a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800693a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800694a:	4629      	mov	r1, r5
 800694c:	008b      	lsls	r3, r1, #2
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006954:	4621      	mov	r1, r4
 8006956:	008a      	lsls	r2, r1, #2
 8006958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800695c:	f7f9 fe60 	bl	8000620 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4b60      	ldr	r3, [pc, #384]	@ (8006ae8 <UART_SetConfig+0x4e4>)
 8006966:	fba3 2302 	umull	r2, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	011c      	lsls	r4, r3, #4
 800696e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006972:	2200      	movs	r2, #0
 8006974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006978:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800697c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	1891      	adds	r1, r2, r2
 8006986:	61b9      	str	r1, [r7, #24]
 8006988:	415b      	adcs	r3, r3
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006990:	4641      	mov	r1, r8
 8006992:	1851      	adds	r1, r2, r1
 8006994:	6139      	str	r1, [r7, #16]
 8006996:	4649      	mov	r1, r9
 8006998:	414b      	adcs	r3, r1
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a8:	4659      	mov	r1, fp
 80069aa:	00cb      	lsls	r3, r1, #3
 80069ac:	4651      	mov	r1, sl
 80069ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b2:	4651      	mov	r1, sl
 80069b4:	00ca      	lsls	r2, r1, #3
 80069b6:	4610      	mov	r0, r2
 80069b8:	4619      	mov	r1, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	4642      	mov	r2, r8
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069c4:	464b      	mov	r3, r9
 80069c6:	460a      	mov	r2, r1
 80069c8:	eb42 0303 	adc.w	r3, r2, r3
 80069cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069e8:	4649      	mov	r1, r9
 80069ea:	008b      	lsls	r3, r1, #2
 80069ec:	4641      	mov	r1, r8
 80069ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f2:	4641      	mov	r1, r8
 80069f4:	008a      	lsls	r2, r1, #2
 80069f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069fa:	f7f9 fe11 	bl	8000620 <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4611      	mov	r1, r2
 8006a04:	4b38      	ldr	r3, [pc, #224]	@ (8006ae8 <UART_SetConfig+0x4e4>)
 8006a06:	fba3 2301 	umull	r2, r3, r3, r1
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2264      	movs	r2, #100	@ 0x64
 8006a0e:	fb02 f303 	mul.w	r3, r2, r3
 8006a12:	1acb      	subs	r3, r1, r3
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	3332      	adds	r3, #50	@ 0x32
 8006a18:	4a33      	ldr	r2, [pc, #204]	@ (8006ae8 <UART_SetConfig+0x4e4>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a24:	441c      	add	r4, r3
 8006a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a44:	4641      	mov	r1, r8
 8006a46:	1851      	adds	r1, r2, r1
 8006a48:	6039      	str	r1, [r7, #0]
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	414b      	adcs	r3, r1
 8006a4e:	607b      	str	r3, [r7, #4]
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	00cb      	lsls	r3, r1, #3
 8006a60:	4651      	mov	r1, sl
 8006a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a66:	4651      	mov	r1, sl
 8006a68:	00ca      	lsls	r2, r1, #3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4642      	mov	r2, r8
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a76:	464b      	mov	r3, r9
 8006a78:	460a      	mov	r2, r1
 8006a7a:	eb42 0303 	adc.w	r3, r2, r3
 8006a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a98:	4649      	mov	r1, r9
 8006a9a:	008b      	lsls	r3, r1, #2
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	008a      	lsls	r2, r1, #2
 8006aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006aaa:	f7f9 fdb9 	bl	8000620 <__aeabi_uldivmod>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <UART_SetConfig+0x4e4>)
 8006ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	2164      	movs	r1, #100	@ 0x64
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	3332      	adds	r3, #50	@ 0x32
 8006ac6:	4a08      	ldr	r2, [pc, #32]	@ (8006ae8 <UART_SetConfig+0x4e4>)
 8006ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	f003 020f 	and.w	r2, r3, #15
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4422      	add	r2, r4
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	bf00      	nop
 8006ade:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae8:	51eb851f 	.word	0x51eb851f

08006aec <memset>:
 8006aec:	4402      	add	r2, r0
 8006aee:	4603      	mov	r3, r0
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <__libc_init_array>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	4d0d      	ldr	r5, [pc, #52]	@ (8006b34 <__libc_init_array+0x38>)
 8006b00:	4c0d      	ldr	r4, [pc, #52]	@ (8006b38 <__libc_init_array+0x3c>)
 8006b02:	1b64      	subs	r4, r4, r5
 8006b04:	10a4      	asrs	r4, r4, #2
 8006b06:	2600      	movs	r6, #0
 8006b08:	42a6      	cmp	r6, r4
 8006b0a:	d109      	bne.n	8006b20 <__libc_init_array+0x24>
 8006b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b3c <__libc_init_array+0x40>)
 8006b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b40 <__libc_init_array+0x44>)
 8006b10:	f000 f818 	bl	8006b44 <_init>
 8006b14:	1b64      	subs	r4, r4, r5
 8006b16:	10a4      	asrs	r4, r4, #2
 8006b18:	2600      	movs	r6, #0
 8006b1a:	42a6      	cmp	r6, r4
 8006b1c:	d105      	bne.n	8006b2a <__libc_init_array+0x2e>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b24:	4798      	blx	r3
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7ee      	b.n	8006b08 <__libc_init_array+0xc>
 8006b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2e:	4798      	blx	r3
 8006b30:	3601      	adds	r6, #1
 8006b32:	e7f2      	b.n	8006b1a <__libc_init_array+0x1e>
 8006b34:	0802c37c 	.word	0x0802c37c
 8006b38:	0802c37c 	.word	0x0802c37c
 8006b3c:	0802c37c 	.word	0x0802c37c
 8006b40:	0802c380 	.word	0x0802c380

08006b44 <_init>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr

08006b50 <_fini>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr
