
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d340  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ca8  0800d510  0800d510  0000e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141b8  080141b8  0002caec  2**0
                  CONTENTS
  4 .ARM          00000008  080141b8  080141b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141c0  080141c0  0002caec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141c0  080141c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080141c4  080141c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00016aec  20000000  080141c8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063d8  20016aec  0802acb4  0002caec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001cec4  0802acb4  0002cec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002caec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bad  00000000  00000000  0002cb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313f  00000000  00000000  000426c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00045808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a2  00000000  00000000  00046c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025142  00000000  00000000  00047d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd8f  00000000  00000000  0006ce64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d75f5  00000000  00000000  00089bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001611e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c04  00000000  00000000  0016122c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00166e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20016aec 	.word	0x20016aec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d4f8 	.word	0x0800d4f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20016af0 	.word	0x20016af0
 800020c:	0800d4f8 	.word	0x0800d4f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2f>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000640:	bf24      	itt	cs
 8000642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800064a:	d90d      	bls.n	8000668 <__aeabi_d2f+0x30>
 800064c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000658:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800065c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000660:	bf08      	it	eq
 8000662:	f020 0001 	biceq.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800066c:	d121      	bne.n	80006b2 <__aeabi_d2f+0x7a>
 800066e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000672:	bfbc      	itt	lt
 8000674:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000678:	4770      	bxlt	lr
 800067a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000682:	f1c2 0218 	rsb	r2, r2, #24
 8000686:	f1c2 0c20 	rsb	ip, r2, #32
 800068a:	fa10 f30c 	lsls.w	r3, r0, ip
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	bf18      	it	ne
 8000694:	f040 0001 	orrne.w	r0, r0, #1
 8000698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800069c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006a4:	ea40 000c 	orr.w	r0, r0, ip
 80006a8:	fa23 f302 	lsr.w	r3, r3, r2
 80006ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006b0:	e7cc      	b.n	800064c <__aeabi_d2f+0x14>
 80006b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006b6:	d107      	bne.n	80006c8 <__aeabi_d2f+0x90>
 80006b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006bc:	bf1e      	ittt	ne
 80006be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006c6:	4770      	bxne	lr
 80006c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__aeabi_uldivmod>:
 80006d8:	b953      	cbnz	r3, 80006f0 <__aeabi_uldivmod+0x18>
 80006da:	b94a      	cbnz	r2, 80006f0 <__aeabi_uldivmod+0x18>
 80006dc:	2900      	cmp	r1, #0
 80006de:	bf08      	it	eq
 80006e0:	2800      	cmpeq	r0, #0
 80006e2:	bf1c      	itt	ne
 80006e4:	f04f 31ff 	movne.w	r1, #4294967295
 80006e8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ec:	f000 b96a 	b.w	80009c4 <__aeabi_idiv0>
 80006f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006f8:	f000 f806 	bl	8000708 <__udivmoddi4>
 80006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000704:	b004      	add	sp, #16
 8000706:	4770      	bx	lr

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <SELECT>:
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	2200      	movs	r2, #0
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <SELECT+0x18>)
 80009d2:	f006 f863 	bl	8006a9c <HAL_GPIO_WritePin>
 80009d6:	2001      	movs	r0, #1
 80009d8:	f005 fcf8 	bl	80063cc <HAL_Delay>
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020400 	.word	0x40020400

080009e4 <DESELECT>:
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	2201      	movs	r2, #1
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <DESELECT+0x18>)
 80009ee:	f006 f855 	bl	8006a9c <HAL_GPIO_WritePin>
 80009f2:	2001      	movs	r0, #1
 80009f4:	f005 fcea 	bl	80063cc <HAL_Delay>
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020400 	.word	0x40020400

08000a00 <SPI_TxByte>:
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	bf00      	nop
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <SPI_TxByte+0x30>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d1f8      	bne.n	8000a0c <SPI_TxByte+0xc>
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <SPI_TxByte+0x30>)
 8000a22:	f006 fe40 	bl	80076a6 <HAL_SPI_Transmit>
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20016b10 	.word	0x20016b10

08000a34 <SPI_TxBuffer>:
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
 8000a40:	bf00      	nop
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <SPI_TxBuffer+0x30>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d1f8      	bne.n	8000a42 <SPI_TxBuffer+0xe>
 8000a50:	887a      	ldrh	r2, [r7, #2]
 8000a52:	2364      	movs	r3, #100	@ 0x64
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <SPI_TxBuffer+0x30>)
 8000a58:	f006 fe25 	bl	80076a6 <HAL_SPI_Transmit>
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20016b10 	.word	0x20016b10

08000a68 <SPI_RxByte>:
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	23ff      	movs	r3, #255	@ 0xff
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	bf00      	nop
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <SPI_RxByte+0x34>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d1f8      	bne.n	8000a74 <SPI_RxByte+0xc>
 8000a82:	1dba      	adds	r2, r7, #6
 8000a84:	1df9      	adds	r1, r7, #7
 8000a86:	2364      	movs	r3, #100	@ 0x64
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SPI_RxByte+0x34>)
 8000a8e:	f006 ff4d 	bl	800792c <HAL_SPI_TransmitReceive>
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20016b10 	.word	0x20016b10

08000aa0 <SPI_RxBytePtr>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	f7ff ffde 	bl	8000a68 <SPI_RxByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SD_ReadyWait>:
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <SD_ReadyWait+0x30>)
 8000ac4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ac8:	801a      	strh	r2, [r3, #0]
 8000aca:	f7ff ffcd 	bl	8000a68 <SPI_RxByte>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2bff      	cmp	r3, #255	@ 0xff
 8000ad6:	d003      	beq.n	8000ae0 <SD_ReadyWait+0x24>
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SD_ReadyWait+0x30>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <SD_ReadyWait+0xe>
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20016b0a 	.word	0x20016b0a

08000af0 <SD_PowerOn>:
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	f7ff ff72 	bl	80009e4 <DESELECT>
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	e005      	b.n	8000b12 <SD_PowerOn+0x22>
 8000b06:	20ff      	movs	r0, #255	@ 0xff
 8000b08:	f7ff ff7a 	bl	8000a00 <SPI_TxByte>
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	ddf6      	ble.n	8000b06 <SD_PowerOn+0x16>
 8000b18:	f7ff ff56 	bl	80009c8 <SELECT>
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	703b      	strb	r3, [r7, #0]
 8000b20:	2300      	movs	r3, #0
 8000b22:	707b      	strb	r3, [r7, #1]
 8000b24:	2300      	movs	r3, #0
 8000b26:	70bb      	strb	r3, [r7, #2]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	70fb      	strb	r3, [r7, #3]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	713b      	strb	r3, [r7, #4]
 8000b30:	2395      	movs	r3, #149	@ 0x95
 8000b32:	717b      	strb	r3, [r7, #5]
 8000b34:	463b      	mov	r3, r7
 8000b36:	2106      	movs	r1, #6
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff7b 	bl	8000a34 <SPI_TxBuffer>
 8000b3e:	e002      	b.n	8000b46 <SD_PowerOn+0x56>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	f7ff ff8f 	bl	8000a68 <SPI_RxByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d002      	beq.n	8000b56 <SD_PowerOn+0x66>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f4      	bne.n	8000b40 <SD_PowerOn+0x50>
 8000b56:	f7ff ff45 	bl	80009e4 <DESELECT>
 8000b5a:	20ff      	movs	r0, #255	@ 0xff
 8000b5c:	f7ff ff50 	bl	8000a00 <SPI_TxByte>
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <SD_PowerOn+0x80>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20016b0d 	.word	0x20016b0d

08000b74 <SD_PowerOff>:
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <SD_PowerOff+0x14>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20016b0d 	.word	0x20016b0d

08000b8c <SD_CheckPower>:
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <SD_CheckPower+0x14>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20016b0d 	.word	0x20016b0d

08000ba4 <SD_RxDataBlock>:
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SD_RxDataBlock+0x58>)
 8000bb0:	22c8      	movs	r2, #200	@ 0xc8
 8000bb2:	801a      	strh	r2, [r3, #0]
 8000bb4:	f7ff ff58 	bl	8000a68 <SPI_RxByte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d103      	bne.n	8000bca <SD_RxDataBlock+0x26>
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <SD_RxDataBlock+0x58>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f4      	bne.n	8000bb4 <SD_RxDataBlock+0x10>
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bce:	d001      	beq.n	8000bd4 <SD_RxDataBlock+0x30>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e00f      	b.n	8000bf4 <SD_RxDataBlock+0x50>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff60 	bl	8000aa0 <SPI_RxBytePtr>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	1e5a      	subs	r2, r3, #1
 8000be4:	603a      	str	r2, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f4      	bne.n	8000bd4 <SD_RxDataBlock+0x30>
 8000bea:	f7ff ff3d 	bl	8000a68 <SPI_RxByte>
 8000bee:	f7ff ff3b 	bl	8000a68 <SPI_RxByte>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20016b08 	.word	0x20016b08

08000c00 <SD_TxDataBlock>:
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73bb      	strb	r3, [r7, #14]
 8000c10:	f7ff ff54 	bl	8000abc <SD_ReadyWait>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2bff      	cmp	r3, #255	@ 0xff
 8000c18:	d001      	beq.n	8000c1e <SD_TxDataBlock+0x1e>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e02f      	b.n	8000c7e <SD_TxDataBlock+0x7e>
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff feed 	bl	8000a00 <SPI_TxByte>
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2bfd      	cmp	r3, #253	@ 0xfd
 8000c2a:	d020      	beq.n	8000c6e <SD_TxDataBlock+0x6e>
 8000c2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff feff 	bl	8000a34 <SPI_TxBuffer>
 8000c36:	f7ff ff17 	bl	8000a68 <SPI_RxByte>
 8000c3a:	f7ff ff15 	bl	8000a68 <SPI_RxByte>
 8000c3e:	e00b      	b.n	8000c58 <SD_TxDataBlock+0x58>
 8000c40:	f7ff ff12 	bl	8000a68 <SPI_RxByte>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d006      	beq.n	8000c60 <SD_TxDataBlock+0x60>
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	3301      	adds	r3, #1
 8000c56:	73bb      	strb	r3, [r7, #14]
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	2b40      	cmp	r3, #64	@ 0x40
 8000c5c:	d9f0      	bls.n	8000c40 <SD_TxDataBlock+0x40>
 8000c5e:	e000      	b.n	8000c62 <SD_TxDataBlock+0x62>
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	f7ff ff00 	bl	8000a68 <SPI_RxByte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0fa      	beq.n	8000c64 <SD_TxDataBlock+0x64>
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	2b05      	cmp	r3, #5
 8000c76:	d101      	bne.n	8000c7c <SD_TxDataBlock+0x7c>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <SD_TxDataBlock+0x7e>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <SD_SendCmd>:
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	6039      	str	r1, [r7, #0]
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	f7ff ff13 	bl	8000abc <SD_ReadyWait>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2bff      	cmp	r3, #255	@ 0xff
 8000c9a:	d001      	beq.n	8000ca0 <SD_SendCmd+0x1a>
 8000c9c:	23ff      	movs	r3, #255	@ 0xff
 8000c9e:	e042      	b.n	8000d26 <SD_SendCmd+0xa0>
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff feac 	bl	8000a00 <SPI_TxByte>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	0e1b      	lsrs	r3, r3, #24
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fea6 	bl	8000a00 <SPI_TxByte>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fea0 	bl	8000a00 <SPI_TxByte>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe9a 	bl	8000a00 <SPI_TxByte>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe95 	bl	8000a00 <SPI_TxByte>
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b40      	cmp	r3, #64	@ 0x40
 8000cda:	d102      	bne.n	8000ce2 <SD_SendCmd+0x5c>
 8000cdc:	2395      	movs	r3, #149	@ 0x95
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e007      	b.n	8000cf2 <SD_SendCmd+0x6c>
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b48      	cmp	r3, #72	@ 0x48
 8000ce6:	d102      	bne.n	8000cee <SD_SendCmd+0x68>
 8000ce8:	2387      	movs	r3, #135	@ 0x87
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e001      	b.n	8000cf2 <SD_SendCmd+0x6c>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe83 	bl	8000a00 <SPI_TxByte>
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b4c      	cmp	r3, #76	@ 0x4c
 8000cfe:	d101      	bne.n	8000d04 <SD_SendCmd+0x7e>
 8000d00:	f7ff feb2 	bl	8000a68 <SPI_RxByte>
 8000d04:	230a      	movs	r3, #10
 8000d06:	73bb      	strb	r3, [r7, #14]
 8000d08:	f7ff feae 	bl	8000a68 <SPI_RxByte>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	737b      	strb	r3, [r7, #13]
 8000d10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da05      	bge.n	8000d24 <SD_SendCmd+0x9e>
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f1      	bne.n	8000d08 <SD_SendCmd+0x82>
 8000d24:	7b7b      	ldrb	r3, [r7, #13]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SD_disk_initialize>:
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SD_disk_initialize+0x14>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0d1      	b.n	8000ee8 <SD_disk_initialize+0x1b8>
 8000d44:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <SD_disk_initialize+0x2a>
 8000d52:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	e0c6      	b.n	8000ee8 <SD_disk_initialize+0x1b8>
 8000d5a:	f7ff fec9 	bl	8000af0 <SD_PowerOn>
 8000d5e:	f7ff fe33 	bl	80009c8 <SELECT>
 8000d62:	2300      	movs	r3, #0
 8000d64:	73bb      	strb	r3, [r7, #14]
 8000d66:	2100      	movs	r1, #0
 8000d68:	2040      	movs	r0, #64	@ 0x40
 8000d6a:	f7ff ff8c 	bl	8000c86 <SD_SendCmd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 80a1 	bne.w	8000eb8 <SD_disk_initialize+0x188>
 8000d76:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000d78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000d82:	2048      	movs	r0, #72	@ 0x48
 8000d84:	f7ff ff7f 	bl	8000c86 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d155      	bne.n	8000e3a <SD_disk_initialize+0x10a>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e00c      	b.n	8000dae <SD_disk_initialize+0x7e>
 8000d94:	7bfc      	ldrb	r4, [r7, #15]
 8000d96:	f7ff fe67 	bl	8000a68 <SPI_RxByte>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f104 0310 	add.w	r3, r4, #16
 8000da2:	443b      	add	r3, r7
 8000da4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d9ef      	bls.n	8000d94 <SD_disk_initialize+0x64>
 8000db4:	7abb      	ldrb	r3, [r7, #10]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d17e      	bne.n	8000eb8 <SD_disk_initialize+0x188>
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	2baa      	cmp	r3, #170	@ 0xaa
 8000dbe:	d17b      	bne.n	8000eb8 <SD_disk_initialize+0x188>
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2077      	movs	r0, #119	@ 0x77
 8000dc4:	f7ff ff5f 	bl	8000c86 <SD_SendCmd>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d807      	bhi.n	8000dde <SD_disk_initialize+0xae>
 8000dce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000dd2:	2069      	movs	r0, #105	@ 0x69
 8000dd4:	f7ff ff57 	bl	8000c86 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <SD_disk_initialize+0xb8>
 8000dde:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1ec      	bne.n	8000dc0 <SD_disk_initialize+0x90>
 8000de6:	e000      	b.n	8000dea <SD_disk_initialize+0xba>
 8000de8:	bf00      	nop
 8000dea:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d062      	beq.n	8000eb8 <SD_disk_initialize+0x188>
 8000df2:	2100      	movs	r1, #0
 8000df4:	207a      	movs	r0, #122	@ 0x7a
 8000df6:	f7ff ff46 	bl	8000c86 <SD_SendCmd>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d15b      	bne.n	8000eb8 <SD_disk_initialize+0x188>
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e00c      	b.n	8000e20 <SD_disk_initialize+0xf0>
 8000e06:	7bfc      	ldrb	r4, [r7, #15]
 8000e08:	f7ff fe2e 	bl	8000a68 <SPI_RxByte>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f104 0310 	add.w	r3, r4, #16
 8000e14:	443b      	add	r3, r7
 8000e16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d9ef      	bls.n	8000e06 <SD_disk_initialize+0xd6>
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SD_disk_initialize+0x104>
 8000e30:	230c      	movs	r3, #12
 8000e32:	e000      	b.n	8000e36 <SD_disk_initialize+0x106>
 8000e34:	2304      	movs	r3, #4
 8000e36:	73bb      	strb	r3, [r7, #14]
 8000e38:	e03e      	b.n	8000eb8 <SD_disk_initialize+0x188>
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2077      	movs	r0, #119	@ 0x77
 8000e3e:	f7ff ff22 	bl	8000c86 <SD_SendCmd>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d808      	bhi.n	8000e5a <SD_disk_initialize+0x12a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2069      	movs	r0, #105	@ 0x69
 8000e4c:	f7ff ff1b 	bl	8000c86 <SD_SendCmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d801      	bhi.n	8000e5a <SD_disk_initialize+0x12a>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e000      	b.n	8000e5c <SD_disk_initialize+0x12c>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73bb      	strb	r3, [r7, #14]
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d10e      	bne.n	8000e82 <SD_disk_initialize+0x152>
 8000e64:	2100      	movs	r1, #0
 8000e66:	2077      	movs	r0, #119	@ 0x77
 8000e68:	f7ff ff0d 	bl	8000c86 <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d80e      	bhi.n	8000e90 <SD_disk_initialize+0x160>
 8000e72:	2100      	movs	r1, #0
 8000e74:	2069      	movs	r0, #105	@ 0x69
 8000e76:	f7ff ff06 	bl	8000c86 <SD_SendCmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d107      	bne.n	8000e90 <SD_disk_initialize+0x160>
 8000e80:	e00c      	b.n	8000e9c <SD_disk_initialize+0x16c>
 8000e82:	2100      	movs	r1, #0
 8000e84:	2041      	movs	r0, #65	@ 0x41
 8000e86:	f7ff fefe 	bl	8000c86 <SD_SendCmd>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <SD_disk_initialize+0x16a>
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e2      	bne.n	8000e5e <SD_disk_initialize+0x12e>
 8000e98:	e000      	b.n	8000e9c <SD_disk_initialize+0x16c>
 8000e9a:	bf00      	nop
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <SD_disk_initialize+0x184>
 8000ea4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea8:	2050      	movs	r0, #80	@ 0x50
 8000eaa:	f7ff feec 	bl	8000c86 <SD_SendCmd>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SD_disk_initialize+0x188>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73bb      	strb	r3, [r7, #14]
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <SD_disk_initialize+0x1c8>)
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	7013      	strb	r3, [r2, #0]
 8000ebe:	f7ff fd91 	bl	80009e4 <DESELECT>
 8000ec2:	f7ff fdd1 	bl	8000a68 <SPI_RxByte>
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <SD_disk_initialize+0x1ae>
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e001      	b.n	8000ee2 <SD_disk_initialize+0x1b2>
 8000ede:	f7ff fe49 	bl	8000b74 <SD_PowerOff>
 8000ee2:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20016b08 	.word	0x20016b08
 8000ef8:	20016b0c 	.word	0x20016b0c

08000efc <SD_disk_status>:
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SD_disk_status+0x14>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e002      	b.n	8000f16 <SD_disk_status+0x1a>
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SD_disk_status+0x28>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <SD_disk_read>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <SD_disk_read+0x1c>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <SD_disk_read+0x20>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e051      	b.n	8000fec <SD_disk_read+0xc4>
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <SD_disk_read+0xcc>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SD_disk_read+0x32>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e048      	b.n	8000fec <SD_disk_read+0xc4>
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <SD_disk_read+0xd0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <SD_disk_read+0x44>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	f7ff fd2c 	bl	80009c8 <SELECT>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d111      	bne.n	8000f9a <SD_disk_read+0x72>
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2051      	movs	r0, #81	@ 0x51
 8000f7a:	f7ff fe84 	bl	8000c86 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d129      	bne.n	8000fd8 <SD_disk_read+0xb0>
 8000f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff fe0b 	bl	8000ba4 <SD_RxDataBlock>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <SD_disk_read+0xb0>
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	e01e      	b.n	8000fd8 <SD_disk_read+0xb0>
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	2052      	movs	r0, #82	@ 0x52
 8000f9e:	f7ff fe72 	bl	8000c86 <SD_SendCmd>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d117      	bne.n	8000fd8 <SD_disk_read+0xb0>
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fdf9 	bl	8000ba4 <SD_RxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00a      	beq.n	8000fce <SD_disk_read+0xa6>
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1ed      	bne.n	8000fa8 <SD_disk_read+0x80>
 8000fcc:	e000      	b.n	8000fd0 <SD_disk_read+0xa8>
 8000fce:	bf00      	nop
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	204c      	movs	r0, #76	@ 0x4c
 8000fd4:	f7ff fe57 	bl	8000c86 <SD_SendCmd>
 8000fd8:	f7ff fd04 	bl	80009e4 <DESELECT>
 8000fdc:	f7ff fd44 	bl	8000a68 <SPI_RxByte>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20016b0c 	.word	0x20016b0c

08000ffc <SD_disk_write>:
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <SD_disk_write+0x1c>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <SD_disk_write+0x20>
 8001018:	2304      	movs	r3, #4
 800101a:	e06b      	b.n	80010f4 <SD_disk_write+0xf8>
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <SD_disk_write+0x100>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SD_disk_write+0x32>
 800102a:	2303      	movs	r3, #3
 800102c:	e062      	b.n	80010f4 <SD_disk_write+0xf8>
 800102e:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <SD_disk_write+0x100>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SD_disk_write+0x44>
 800103c:	2302      	movs	r3, #2
 800103e:	e059      	b.n	80010f4 <SD_disk_write+0xf8>
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <SD_disk_write+0x104>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <SD_disk_write+0x56>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	f7ff fcb9 	bl	80009c8 <SELECT>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d110      	bne.n	800107e <SD_disk_write+0x82>
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	2058      	movs	r0, #88	@ 0x58
 8001060:	f7ff fe11 	bl	8000c86 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d13a      	bne.n	80010e0 <SD_disk_write+0xe4>
 800106a:	21fe      	movs	r1, #254	@ 0xfe
 800106c:	68b8      	ldr	r0, [r7, #8]
 800106e:	f7ff fdc7 	bl	8000c00 <SD_TxDataBlock>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d033      	beq.n	80010e0 <SD_disk_write+0xe4>
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	e030      	b.n	80010e0 <SD_disk_write+0xe4>
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <SD_disk_write+0x104>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <SD_disk_write+0x9e>
 800108a:	2100      	movs	r1, #0
 800108c:	2077      	movs	r0, #119	@ 0x77
 800108e:	f7ff fdfa 	bl	8000c86 <SD_SendCmd>
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	2057      	movs	r0, #87	@ 0x57
 8001096:	f7ff fdf6 	bl	8000c86 <SD_SendCmd>
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	2059      	movs	r0, #89	@ 0x59
 800109e:	f7ff fdf2 	bl	8000c86 <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11b      	bne.n	80010e0 <SD_disk_write+0xe4>
 80010a8:	21fc      	movs	r1, #252	@ 0xfc
 80010aa:	68b8      	ldr	r0, [r7, #8]
 80010ac:	f7ff fda8 	bl	8000c00 <SD_TxDataBlock>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <SD_disk_write+0xd0>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ee      	bne.n	80010a8 <SD_disk_write+0xac>
 80010ca:	e000      	b.n	80010ce <SD_disk_write+0xd2>
 80010cc:	bf00      	nop
 80010ce:	21fd      	movs	r1, #253	@ 0xfd
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd95 	bl	8000c00 <SD_TxDataBlock>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <SD_disk_write+0xe4>
 80010dc:	2301      	movs	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	f7ff fc80 	bl	80009e4 <DESELECT>
 80010e4:	f7ff fcc0 	bl	8000a68 <SPI_RxByte>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20016b0c 	.word	0x20016b0c

08001104 <SD_disk_ioctl>:
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	603a      	str	r2, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	460b      	mov	r3, r1
 8001112:	71bb      	strb	r3, [r7, #6]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SD_disk_ioctl+0x1e>
 800111e:	2304      	movs	r3, #4
 8001120:	e113      	b.n	800134a <SD_disk_ioctl+0x246>
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d124      	bne.n	8001178 <SD_disk_ioctl+0x74>
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d012      	beq.n	800115c <SD_disk_ioctl+0x58>
 8001136:	2b02      	cmp	r3, #2
 8001138:	dc1a      	bgt.n	8001170 <SD_disk_ioctl+0x6c>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <SD_disk_ioctl+0x40>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d006      	beq.n	8001150 <SD_disk_ioctl+0x4c>
 8001142:	e015      	b.n	8001170 <SD_disk_ioctl+0x6c>
 8001144:	f7ff fd16 	bl	8000b74 <SD_PowerOff>
 8001148:	2300      	movs	r3, #0
 800114a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800114e:	e0fa      	b.n	8001346 <SD_disk_ioctl+0x242>
 8001150:	f7ff fcce 	bl	8000af0 <SD_PowerOn>
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800115a:	e0f4      	b.n	8001346 <SD_disk_ioctl+0x242>
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	1c5c      	adds	r4, r3, #1
 8001160:	f7ff fd14 	bl	8000b8c <SD_CheckPower>
 8001164:	4603      	mov	r3, r0
 8001166:	7023      	strb	r3, [r4, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800116e:	e0ea      	b.n	8001346 <SD_disk_ioctl+0x242>
 8001170:	2304      	movs	r3, #4
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001176:	e0e6      	b.n	8001346 <SD_disk_ioctl+0x242>
 8001178:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <SD_disk_ioctl+0x250>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SD_disk_ioctl+0x86>
 8001186:	2303      	movs	r3, #3
 8001188:	e0df      	b.n	800134a <SD_disk_ioctl+0x246>
 800118a:	f7ff fc1d 	bl	80009c8 <SELECT>
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b0d      	cmp	r3, #13
 8001192:	f200 80c9 	bhi.w	8001328 <SD_disk_ioctl+0x224>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <SD_disk_ioctl+0x98>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	08001293 	.word	0x08001293
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	08001283 	.word	0x08001283
 80011a8:	08001329 	.word	0x08001329
 80011ac:	08001329 	.word	0x08001329
 80011b0:	08001329 	.word	0x08001329
 80011b4:	08001329 	.word	0x08001329
 80011b8:	08001329 	.word	0x08001329
 80011bc:	08001329 	.word	0x08001329
 80011c0:	08001329 	.word	0x08001329
 80011c4:	08001329 	.word	0x08001329
 80011c8:	080012a5 	.word	0x080012a5
 80011cc:	080012c9 	.word	0x080012c9
 80011d0:	080012ed 	.word	0x080012ed
 80011d4:	2100      	movs	r1, #0
 80011d6:	2049      	movs	r0, #73	@ 0x49
 80011d8:	f7ff fd55 	bl	8000c86 <SD_SendCmd>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80a6 	bne.w	8001330 <SD_disk_ioctl+0x22c>
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2110      	movs	r1, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fcda 	bl	8000ba4 <SD_RxDataBlock>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809c 	beq.w	8001330 <SD_disk_ioctl+0x22c>
 80011f8:	7b3b      	ldrb	r3, [r7, #12]
 80011fa:	099b      	lsrs	r3, r3, #6
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10d      	bne.n	800121e <SD_disk_ioctl+0x11a>
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	461a      	mov	r2, r3
 8001206:	7d3b      	ldrb	r3, [r7, #20]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	3301      	adds	r3, #1
 8001212:	83fb      	strh	r3, [r7, #30]
 8001214:	8bfb      	ldrh	r3, [r7, #30]
 8001216:	029a      	lsls	r2, r3, #10
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e02d      	b.n	800127a <SD_disk_ioctl+0x176>
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	09db      	lsrs	r3, r3, #7
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0306 	and.w	r3, r3, #6
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3302      	adds	r3, #2
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001246:	7d3b      	ldrb	r3, [r7, #20]
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	7cbb      	ldrb	r3, [r7, #18]
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	b29b      	uxth	r3, r3
 800125e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	83fb      	strh	r3, [r7, #30]
 800126c:	8bfa      	ldrh	r2, [r7, #30]
 800126e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001272:	3b09      	subs	r3, #9
 8001274:	409a      	lsls	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001280:	e056      	b.n	8001330 <SD_disk_ioctl+0x22c>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001288:	801a      	strh	r2, [r3, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001290:	e055      	b.n	800133e <SD_disk_ioctl+0x23a>
 8001292:	f7ff fc13 	bl	8000abc <SD_ReadyWait>
 8001296:	4603      	mov	r3, r0
 8001298:	2bff      	cmp	r3, #255	@ 0xff
 800129a:	d14b      	bne.n	8001334 <SD_disk_ioctl+0x230>
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012a2:	e047      	b.n	8001334 <SD_disk_ioctl+0x230>
 80012a4:	2100      	movs	r1, #0
 80012a6:	2049      	movs	r0, #73	@ 0x49
 80012a8:	f7ff fced 	bl	8000c86 <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d142      	bne.n	8001338 <SD_disk_ioctl+0x234>
 80012b2:	2110      	movs	r1, #16
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f7ff fc75 	bl	8000ba4 <SD_RxDataBlock>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03b      	beq.n	8001338 <SD_disk_ioctl+0x234>
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012c6:	e037      	b.n	8001338 <SD_disk_ioctl+0x234>
 80012c8:	2100      	movs	r1, #0
 80012ca:	204a      	movs	r0, #74	@ 0x4a
 80012cc:	f7ff fcdb 	bl	8000c86 <SD_SendCmd>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d132      	bne.n	800133c <SD_disk_ioctl+0x238>
 80012d6:	2110      	movs	r1, #16
 80012d8:	6a38      	ldr	r0, [r7, #32]
 80012da:	f7ff fc63 	bl	8000ba4 <SD_RxDataBlock>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02b      	beq.n	800133c <SD_disk_ioctl+0x238>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012ea:	e027      	b.n	800133c <SD_disk_ioctl+0x238>
 80012ec:	2100      	movs	r1, #0
 80012ee:	207a      	movs	r0, #122	@ 0x7a
 80012f0:	f7ff fcc9 	bl	8000c86 <SD_SendCmd>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <SD_disk_ioctl+0x224>
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001300:	e00b      	b.n	800131a <SD_disk_ioctl+0x216>
 8001302:	6a3c      	ldr	r4, [r7, #32]
 8001304:	1c63      	adds	r3, r4, #1
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	f7ff fbae 	bl	8000a68 <SPI_RxByte>
 800130c:	4603      	mov	r3, r0
 800130e:	7023      	strb	r3, [r4, #0]
 8001310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001314:	3301      	adds	r3, #1
 8001316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800131a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800131e:	2b03      	cmp	r3, #3
 8001320:	d9ef      	bls.n	8001302 <SD_disk_ioctl+0x1fe>
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001328:	2304      	movs	r3, #4
 800132a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800132e:	e006      	b.n	800133e <SD_disk_ioctl+0x23a>
 8001330:	bf00      	nop
 8001332:	e004      	b.n	800133e <SD_disk_ioctl+0x23a>
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <SD_disk_ioctl+0x23a>
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <SD_disk_ioctl+0x23a>
 800133c:	bf00      	nop
 800133e:	f7ff fb51 	bl	80009e4 <DESELECT>
 8001342:	f7ff fb91 	bl	8000a68 <SPI_RxByte>
 8001346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134a:	4618      	mov	r0, r3
 800134c:	372c      	adds	r7, #44	@ 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000

08001358 <LCD_Init>:
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
 800135c:	2201      	movs	r2, #1
 800135e:	2101      	movs	r1, #1
 8001360:	4878      	ldr	r0, [pc, #480]	@ (8001544 <LCD_Init+0x1ec>)
 8001362:	f005 fb9b 	bl	8006a9c <HAL_GPIO_WritePin>
 8001366:	2201      	movs	r2, #1
 8001368:	2113      	movs	r1, #19
 800136a:	4877      	ldr	r0, [pc, #476]	@ (8001548 <LCD_Init+0x1f0>)
 800136c:	f005 fb96 	bl	8006a9c <HAL_GPIO_WritePin>
 8001370:	2201      	movs	r2, #1
 8001372:	2102      	movs	r1, #2
 8001374:	4875      	ldr	r0, [pc, #468]	@ (800154c <LCD_Init+0x1f4>)
 8001376:	f005 fb91 	bl	8006a9c <HAL_GPIO_WritePin>
 800137a:	2005      	movs	r0, #5
 800137c:	f005 f826 	bl	80063cc <HAL_Delay>
 8001380:	2200      	movs	r2, #0
 8001382:	2102      	movs	r1, #2
 8001384:	4871      	ldr	r0, [pc, #452]	@ (800154c <LCD_Init+0x1f4>)
 8001386:	f005 fb89 	bl	8006a9c <HAL_GPIO_WritePin>
 800138a:	2014      	movs	r0, #20
 800138c:	f005 f81e 	bl	80063cc <HAL_Delay>
 8001390:	2201      	movs	r2, #1
 8001392:	2102      	movs	r1, #2
 8001394:	486d      	ldr	r0, [pc, #436]	@ (800154c <LCD_Init+0x1f4>)
 8001396:	f005 fb81 	bl	8006a9c <HAL_GPIO_WritePin>
 800139a:	2096      	movs	r0, #150	@ 0x96
 800139c:	f005 f816 	bl	80063cc <HAL_Delay>
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4867      	ldr	r0, [pc, #412]	@ (8001544 <LCD_Init+0x1ec>)
 80013a6:	f005 fb79 	bl	8006a9c <HAL_GPIO_WritePin>
 80013aa:	20e9      	movs	r0, #233	@ 0xe9
 80013ac:	f000 f8d0 	bl	8001550 <LCD_CMD>
 80013b0:	2020      	movs	r0, #32
 80013b2:	f000 f973 	bl	800169c <LCD_DATA>
 80013b6:	2011      	movs	r0, #17
 80013b8:	f000 f8ca 	bl	8001550 <LCD_CMD>
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f005 f805 	bl	80063cc <HAL_Delay>
 80013c2:	20d1      	movs	r0, #209	@ 0xd1
 80013c4:	f000 f8c4 	bl	8001550 <LCD_CMD>
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f967 	bl	800169c <LCD_DATA>
 80013ce:	2071      	movs	r0, #113	@ 0x71
 80013d0:	f000 f964 	bl	800169c <LCD_DATA>
 80013d4:	2019      	movs	r0, #25
 80013d6:	f000 f961 	bl	800169c <LCD_DATA>
 80013da:	20d0      	movs	r0, #208	@ 0xd0
 80013dc:	f000 f8b8 	bl	8001550 <LCD_CMD>
 80013e0:	2007      	movs	r0, #7
 80013e2:	f000 f95b 	bl	800169c <LCD_DATA>
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 f958 	bl	800169c <LCD_DATA>
 80013ec:	2008      	movs	r0, #8
 80013ee:	f000 f955 	bl	800169c <LCD_DATA>
 80013f2:	2036      	movs	r0, #54	@ 0x36
 80013f4:	f000 f8ac 	bl	8001550 <LCD_CMD>
 80013f8:	20e8      	movs	r0, #232	@ 0xe8
 80013fa:	f000 f94f 	bl	800169c <LCD_DATA>
 80013fe:	203a      	movs	r0, #58	@ 0x3a
 8001400:	f000 f8a6 	bl	8001550 <LCD_CMD>
 8001404:	2005      	movs	r0, #5
 8001406:	f000 f949 	bl	800169c <LCD_DATA>
 800140a:	20c1      	movs	r0, #193	@ 0xc1
 800140c:	f000 f8a0 	bl	8001550 <LCD_CMD>
 8001410:	2010      	movs	r0, #16
 8001412:	f000 f943 	bl	800169c <LCD_DATA>
 8001416:	2010      	movs	r0, #16
 8001418:	f000 f940 	bl	800169c <LCD_DATA>
 800141c:	2002      	movs	r0, #2
 800141e:	f000 f93d 	bl	800169c <LCD_DATA>
 8001422:	2002      	movs	r0, #2
 8001424:	f000 f93a 	bl	800169c <LCD_DATA>
 8001428:	20c0      	movs	r0, #192	@ 0xc0
 800142a:	f000 f891 	bl	8001550 <LCD_CMD>
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f934 	bl	800169c <LCD_DATA>
 8001434:	2035      	movs	r0, #53	@ 0x35
 8001436:	f000 f931 	bl	800169c <LCD_DATA>
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f92e 	bl	800169c <LCD_DATA>
 8001440:	2000      	movs	r0, #0
 8001442:	f000 f92b 	bl	800169c <LCD_DATA>
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f928 	bl	800169c <LCD_DATA>
 800144c:	2002      	movs	r0, #2
 800144e:	f000 f925 	bl	800169c <LCD_DATA>
 8001452:	20c5      	movs	r0, #197	@ 0xc5
 8001454:	f000 f87c 	bl	8001550 <LCD_CMD>
 8001458:	2004      	movs	r0, #4
 800145a:	f000 f91f 	bl	800169c <LCD_DATA>
 800145e:	20d2      	movs	r0, #210	@ 0xd2
 8001460:	f000 f876 	bl	8001550 <LCD_CMD>
 8001464:	2001      	movs	r0, #1
 8001466:	f000 f919 	bl	800169c <LCD_DATA>
 800146a:	2044      	movs	r0, #68	@ 0x44
 800146c:	f000 f916 	bl	800169c <LCD_DATA>
 8001470:	20c8      	movs	r0, #200	@ 0xc8
 8001472:	f000 f86d 	bl	8001550 <LCD_CMD>
 8001476:	2004      	movs	r0, #4
 8001478:	f000 f910 	bl	800169c <LCD_DATA>
 800147c:	2067      	movs	r0, #103	@ 0x67
 800147e:	f000 f90d 	bl	800169c <LCD_DATA>
 8001482:	2035      	movs	r0, #53	@ 0x35
 8001484:	f000 f90a 	bl	800169c <LCD_DATA>
 8001488:	2004      	movs	r0, #4
 800148a:	f000 f907 	bl	800169c <LCD_DATA>
 800148e:	2008      	movs	r0, #8
 8001490:	f000 f904 	bl	800169c <LCD_DATA>
 8001494:	2006      	movs	r0, #6
 8001496:	f000 f901 	bl	800169c <LCD_DATA>
 800149a:	2024      	movs	r0, #36	@ 0x24
 800149c:	f000 f8fe 	bl	800169c <LCD_DATA>
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 f8fb 	bl	800169c <LCD_DATA>
 80014a6:	2037      	movs	r0, #55	@ 0x37
 80014a8:	f000 f8f8 	bl	800169c <LCD_DATA>
 80014ac:	2040      	movs	r0, #64	@ 0x40
 80014ae:	f000 f8f5 	bl	800169c <LCD_DATA>
 80014b2:	2003      	movs	r0, #3
 80014b4:	f000 f8f2 	bl	800169c <LCD_DATA>
 80014b8:	2010      	movs	r0, #16
 80014ba:	f000 f8ef 	bl	800169c <LCD_DATA>
 80014be:	2008      	movs	r0, #8
 80014c0:	f000 f8ec 	bl	800169c <LCD_DATA>
 80014c4:	2080      	movs	r0, #128	@ 0x80
 80014c6:	f000 f8e9 	bl	800169c <LCD_DATA>
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f8e6 	bl	800169c <LCD_DATA>
 80014d0:	202a      	movs	r0, #42	@ 0x2a
 80014d2:	f000 f83d 	bl	8001550 <LCD_CMD>
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f8e0 	bl	800169c <LCD_DATA>
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f8dd 	bl	800169c <LCD_DATA>
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 f8da 	bl	800169c <LCD_DATA>
 80014e8:	20ef      	movs	r0, #239	@ 0xef
 80014ea:	f000 f8d7 	bl	800169c <LCD_DATA>
 80014ee:	202b      	movs	r0, #43	@ 0x2b
 80014f0:	f000 f82e 	bl	8001550 <LCD_CMD>
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f8d1 	bl	800169c <LCD_DATA>
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f8ce 	bl	800169c <LCD_DATA>
 8001500:	2001      	movs	r0, #1
 8001502:	f000 f8cb 	bl	800169c <LCD_DATA>
 8001506:	203f      	movs	r0, #63	@ 0x3f
 8001508:	f000 f8c8 	bl	800169c <LCD_DATA>
 800150c:	2029      	movs	r0, #41	@ 0x29
 800150e:	f000 f81f 	bl	8001550 <LCD_CMD>
 8001512:	202c      	movs	r0, #44	@ 0x2c
 8001514:	f000 f81c 	bl	8001550 <LCD_CMD>
 8001518:	2020      	movs	r0, #32
 800151a:	f000 f819 	bl	8001550 <LCD_CMD>
 800151e:	2078      	movs	r0, #120	@ 0x78
 8001520:	f004 ff54 	bl	80063cc <HAL_Delay>
 8001524:	2011      	movs	r0, #17
 8001526:	f000 f813 	bl	8001550 <LCD_CMD>
 800152a:	2078      	movs	r0, #120	@ 0x78
 800152c:	f004 ff4e 	bl	80063cc <HAL_Delay>
 8001530:	2029      	movs	r0, #41	@ 0x29
 8001532:	f000 f80d 	bl	8001550 <LCD_CMD>
 8001536:	2201      	movs	r2, #1
 8001538:	2101      	movs	r1, #1
 800153a:	4802      	ldr	r0, [pc, #8]	@ (8001544 <LCD_Init+0x1ec>)
 800153c:	f005 faae 	bl	8006a9c <HAL_GPIO_WritePin>
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020400 	.word	0x40020400
 8001548:	40020000 	.word	0x40020000
 800154c:	40020800 	.word	0x40020800

08001550 <LCD_CMD>:
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	484c      	ldr	r0, [pc, #304]	@ (8001690 <LCD_CMD+0x140>)
 8001560:	f005 fa9c 	bl	8006a9c <HAL_GPIO_WritePin>
 8001564:	2200      	movs	r2, #0
 8001566:	2102      	movs	r1, #2
 8001568:	4849      	ldr	r0, [pc, #292]	@ (8001690 <LCD_CMD+0x140>)
 800156a:	f005 fa97 	bl	8006a9c <HAL_GPIO_WritePin>
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <LCD_CMD+0x36>
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157e:	4844      	ldr	r0, [pc, #272]	@ (8001690 <LCD_CMD+0x140>)
 8001580:	f005 fa8c 	bl	8006a9c <HAL_GPIO_WritePin>
 8001584:	e005      	b.n	8001592 <LCD_CMD+0x42>
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158c:	4840      	ldr	r0, [pc, #256]	@ (8001690 <LCD_CMD+0x140>)
 800158e:	f005 fa85 	bl	8006a9c <HAL_GPIO_WritePin>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <LCD_CMD+0x58>
 800159c:	2201      	movs	r2, #1
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	483c      	ldr	r0, [pc, #240]	@ (8001694 <LCD_CMD+0x144>)
 80015a2:	f005 fa7b 	bl	8006a9c <HAL_GPIO_WritePin>
 80015a6:	e004      	b.n	80015b2 <LCD_CMD+0x62>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	4839      	ldr	r0, [pc, #228]	@ (8001694 <LCD_CMD+0x144>)
 80015ae:	f005 fa75 	bl	8006a9c <HAL_GPIO_WritePin>
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <LCD_CMD+0x7a>
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c2:	4833      	ldr	r0, [pc, #204]	@ (8001690 <LCD_CMD+0x140>)
 80015c4:	f005 fa6a 	bl	8006a9c <HAL_GPIO_WritePin>
 80015c8:	e005      	b.n	80015d6 <LCD_CMD+0x86>
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d0:	482f      	ldr	r0, [pc, #188]	@ (8001690 <LCD_CMD+0x140>)
 80015d2:	f005 fa63 	bl	8006a9c <HAL_GPIO_WritePin>
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <LCD_CMD+0x9c>
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	482c      	ldr	r0, [pc, #176]	@ (8001698 <LCD_CMD+0x148>)
 80015e6:	f005 fa59 	bl	8006a9c <HAL_GPIO_WritePin>
 80015ea:	e004      	b.n	80015f6 <LCD_CMD+0xa6>
 80015ec:	2200      	movs	r2, #0
 80015ee:	2108      	movs	r1, #8
 80015f0:	4829      	ldr	r0, [pc, #164]	@ (8001698 <LCD_CMD+0x148>)
 80015f2:	f005 fa53 	bl	8006a9c <HAL_GPIO_WritePin>
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <LCD_CMD+0xbc>
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	4824      	ldr	r0, [pc, #144]	@ (8001698 <LCD_CMD+0x148>)
 8001606:	f005 fa49 	bl	8006a9c <HAL_GPIO_WritePin>
 800160a:	e004      	b.n	8001616 <LCD_CMD+0xc6>
 800160c:	2200      	movs	r2, #0
 800160e:	2120      	movs	r1, #32
 8001610:	4821      	ldr	r0, [pc, #132]	@ (8001698 <LCD_CMD+0x148>)
 8001612:	f005 fa43 	bl	8006a9c <HAL_GPIO_WritePin>
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <LCD_CMD+0xdc>
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	481c      	ldr	r0, [pc, #112]	@ (8001698 <LCD_CMD+0x148>)
 8001626:	f005 fa39 	bl	8006a9c <HAL_GPIO_WritePin>
 800162a:	e004      	b.n	8001636 <LCD_CMD+0xe6>
 800162c:	2200      	movs	r2, #0
 800162e:	2110      	movs	r1, #16
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <LCD_CMD+0x148>)
 8001632:	f005 fa33 	bl	8006a9c <HAL_GPIO_WritePin>
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <LCD_CMD+0xfe>
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001646:	4814      	ldr	r0, [pc, #80]	@ (8001698 <LCD_CMD+0x148>)
 8001648:	f005 fa28 	bl	8006a9c <HAL_GPIO_WritePin>
 800164c:	e005      	b.n	800165a <LCD_CMD+0x10a>
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001654:	4810      	ldr	r0, [pc, #64]	@ (8001698 <LCD_CMD+0x148>)
 8001656:	f005 fa21 	bl	8006a9c <HAL_GPIO_WritePin>
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da06      	bge.n	8001670 <LCD_CMD+0x120>
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <LCD_CMD+0x140>)
 800166a:	f005 fa17 	bl	8006a9c <HAL_GPIO_WritePin>
 800166e:	e005      	b.n	800167c <LCD_CMD+0x12c>
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <LCD_CMD+0x140>)
 8001678:	f005 fa10 	bl	8006a9c <HAL_GPIO_WritePin>
 800167c:	2201      	movs	r2, #1
 800167e:	2102      	movs	r1, #2
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <LCD_CMD+0x140>)
 8001682:	f005 fa0b 	bl	8006a9c <HAL_GPIO_WritePin>
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000
 8001694:	40020800 	.word	0x40020800
 8001698:	40020400 	.word	0x40020400

0800169c <LCD_DATA>:
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	2201      	movs	r2, #1
 80016a8:	2110      	movs	r1, #16
 80016aa:	484c      	ldr	r0, [pc, #304]	@ (80017dc <LCD_DATA+0x140>)
 80016ac:	f005 f9f6 	bl	8006a9c <HAL_GPIO_WritePin>
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4849      	ldr	r0, [pc, #292]	@ (80017dc <LCD_DATA+0x140>)
 80016b6:	f005 f9f1 	bl	8006a9c <HAL_GPIO_WritePin>
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <LCD_DATA+0x36>
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ca:	4844      	ldr	r0, [pc, #272]	@ (80017dc <LCD_DATA+0x140>)
 80016cc:	f005 f9e6 	bl	8006a9c <HAL_GPIO_WritePin>
 80016d0:	e005      	b.n	80016de <LCD_DATA+0x42>
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d8:	4840      	ldr	r0, [pc, #256]	@ (80017dc <LCD_DATA+0x140>)
 80016da:	f005 f9df 	bl	8006a9c <HAL_GPIO_WritePin>
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <LCD_DATA+0x58>
 80016e8:	2201      	movs	r2, #1
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <LCD_DATA+0x144>)
 80016ee:	f005 f9d5 	bl	8006a9c <HAL_GPIO_WritePin>
 80016f2:	e004      	b.n	80016fe <LCD_DATA+0x62>
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	4839      	ldr	r0, [pc, #228]	@ (80017e0 <LCD_DATA+0x144>)
 80016fa:	f005 f9cf 	bl	8006a9c <HAL_GPIO_WritePin>
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <LCD_DATA+0x7a>
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800170e:	4833      	ldr	r0, [pc, #204]	@ (80017dc <LCD_DATA+0x140>)
 8001710:	f005 f9c4 	bl	8006a9c <HAL_GPIO_WritePin>
 8001714:	e005      	b.n	8001722 <LCD_DATA+0x86>
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800171c:	482f      	ldr	r0, [pc, #188]	@ (80017dc <LCD_DATA+0x140>)
 800171e:	f005 f9bd 	bl	8006a9c <HAL_GPIO_WritePin>
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <LCD_DATA+0x9c>
 800172c:	2201      	movs	r2, #1
 800172e:	2108      	movs	r1, #8
 8001730:	482c      	ldr	r0, [pc, #176]	@ (80017e4 <LCD_DATA+0x148>)
 8001732:	f005 f9b3 	bl	8006a9c <HAL_GPIO_WritePin>
 8001736:	e004      	b.n	8001742 <LCD_DATA+0xa6>
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	4829      	ldr	r0, [pc, #164]	@ (80017e4 <LCD_DATA+0x148>)
 800173e:	f005 f9ad 	bl	8006a9c <HAL_GPIO_WritePin>
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <LCD_DATA+0xbc>
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	4824      	ldr	r0, [pc, #144]	@ (80017e4 <LCD_DATA+0x148>)
 8001752:	f005 f9a3 	bl	8006a9c <HAL_GPIO_WritePin>
 8001756:	e004      	b.n	8001762 <LCD_DATA+0xc6>
 8001758:	2200      	movs	r2, #0
 800175a:	2120      	movs	r1, #32
 800175c:	4821      	ldr	r0, [pc, #132]	@ (80017e4 <LCD_DATA+0x148>)
 800175e:	f005 f99d 	bl	8006a9c <HAL_GPIO_WritePin>
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <LCD_DATA+0xdc>
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <LCD_DATA+0x148>)
 8001772:	f005 f993 	bl	8006a9c <HAL_GPIO_WritePin>
 8001776:	e004      	b.n	8001782 <LCD_DATA+0xe6>
 8001778:	2200      	movs	r2, #0
 800177a:	2110      	movs	r1, #16
 800177c:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <LCD_DATA+0x148>)
 800177e:	f005 f98d 	bl	8006a9c <HAL_GPIO_WritePin>
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <LCD_DATA+0xfe>
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <LCD_DATA+0x148>)
 8001794:	f005 f982 	bl	8006a9c <HAL_GPIO_WritePin>
 8001798:	e005      	b.n	80017a6 <LCD_DATA+0x10a>
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <LCD_DATA+0x148>)
 80017a2:	f005 f97b 	bl	8006a9c <HAL_GPIO_WritePin>
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da06      	bge.n	80017bc <LCD_DATA+0x120>
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <LCD_DATA+0x140>)
 80017b6:	f005 f971 	bl	8006a9c <HAL_GPIO_WritePin>
 80017ba:	e005      	b.n	80017c8 <LCD_DATA+0x12c>
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c2:	4806      	ldr	r0, [pc, #24]	@ (80017dc <LCD_DATA+0x140>)
 80017c4:	f005 f96a 	bl	8006a9c <HAL_GPIO_WritePin>
 80017c8:	2201      	movs	r2, #1
 80017ca:	2102      	movs	r1, #2
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <LCD_DATA+0x140>)
 80017ce:	f005 f965 	bl	8006a9c <HAL_GPIO_WritePin>
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020400 	.word	0x40020400

080017e8 <SetWindows>:
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	202a      	movs	r0, #42	@ 0x2a
 80017f8:	f7ff feaa 	bl	8001550 <LCD_CMD>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff4a 	bl	800169c <LCD_DATA>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff45 	bl	800169c <LCD_DATA>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff3f 	bl	800169c <LCD_DATA>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff3a 	bl	800169c <LCD_DATA>
 8001828:	202b      	movs	r0, #43	@ 0x2b
 800182a:	f7ff fe91 	bl	8001550 <LCD_CMD>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <LCD_DATA>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff2c 	bl	800169c <LCD_DATA>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff26 	bl	800169c <LCD_DATA>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff21 	bl	800169c <LCD_DATA>
 800185a:	202c      	movs	r0, #44	@ 0x2c
 800185c:	f7ff fe78 	bl	8001550 <LCD_CMD>
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <H_line>:
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	202c      	movs	r0, #44	@ 0x2c
 8001878:	f7ff fe6a 	bl	8001550 <LCD_CMD>
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <H_line+0x78>)
 8001882:	f005 f90b 	bl	8006a9c <HAL_GPIO_WritePin>
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	4816      	ldr	r0, [pc, #88]	@ (80018e4 <H_line+0x7c>)
 800188c:	f005 f906 	bl	8006a9c <HAL_GPIO_WritePin>
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff ffa2 	bl	80017e8 <SetWindows>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00d      	b.n	80018c6 <H_line+0x5e>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fef3 	bl	800169c <LCD_DATA>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff feee 	bl	800169c <LCD_DATA>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3ed      	bcc.n	80018aa <H_line+0x42>
 80018ce:	2201      	movs	r2, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <H_line+0x7c>)
 80018d4:	f005 f8e2 	bl	8006a9c <HAL_GPIO_WritePin>
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400

080018e8 <V_line>:
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	202c      	movs	r0, #44	@ 0x2c
 80018f8:	f7ff fe2a 	bl	8001550 <LCD_CMD>
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <V_line+0x78>)
 8001902:	f005 f8cb 	bl	8006a9c <HAL_GPIO_WritePin>
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	4816      	ldr	r0, [pc, #88]	@ (8001964 <V_line+0x7c>)
 800190c:	f005 f8c6 	bl	8006a9c <HAL_GPIO_WritePin>
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4413      	add	r3, r2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff ff62 	bl	80017e8 <SetWindows>
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00d      	b.n	8001946 <V_line+0x5e>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff feb3 	bl	800169c <LCD_DATA>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff feae 	bl	800169c <LCD_DATA>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d9ed      	bls.n	800192a <V_line+0x42>
 800194e:	2201      	movs	r2, #1
 8001950:	2101      	movs	r1, #1
 8001952:	4804      	ldr	r0, [pc, #16]	@ (8001964 <V_line+0x7c>)
 8001954:	f005 f8a2 	bl	8006a9c <HAL_GPIO_WritePin>
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400

08001968 <Rect>:
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff ff73 	bl	8001868 <H_line>
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	18d1      	adds	r1, r2, r3
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff6b 	bl	8001868 <H_line>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ffa5 	bl	80018e8 <V_line>
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	18d0      	adds	r0, r2, r3
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	f7ff ff9d 	bl	80018e8 <V_line>
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <FillRect>:
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	202c      	movs	r0, #44	@ 0x2c
 80019c8:	f7ff fdc2 	bl	8001550 <LCD_CMD>
 80019cc:	2201      	movs	r2, #1
 80019ce:	2110      	movs	r1, #16
 80019d0:	4824      	ldr	r0, [pc, #144]	@ (8001a64 <FillRect+0xac>)
 80019d2:	f005 f863 	bl	8006a9c <HAL_GPIO_WritePin>
 80019d6:	2200      	movs	r2, #0
 80019d8:	2101      	movs	r1, #1
 80019da:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <FillRect+0xb0>)
 80019dc:	f005 f85e 	bl	8006a9c <HAL_GPIO_WritePin>
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fef4 	bl	80017e8 <SetWindows>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	e01a      	b.n	8001a4a <FillRect+0x92>
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e010      	b.n	8001a3c <FillRect+0x84>
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe3b 	bl	800169c <LCD_DATA>
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe36 	bl	800169c <LCD_DATA>
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	3b02      	subs	r3, #2
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8ea      	bhi.n	8001a1a <FillRect+0x62>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	3301      	adds	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d8e0      	bhi.n	8001a14 <FillRect+0x5c>
 8001a52:	2201      	movs	r2, #1
 8001a54:	2101      	movs	r1, #1
 8001a56:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <FillRect+0xb0>)
 8001a58:	f005 f820 	bl	8006a9c <HAL_GPIO_WritePin>
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	@ 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400

08001a6c <LCD_Bitmap>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	202c      	movs	r0, #44	@ 0x2c
 8001a7c:	f7ff fd68 	bl	8001550 <LCD_CMD>
 8001a80:	2201      	movs	r2, #1
 8001a82:	2110      	movs	r1, #16
 8001a84:	4822      	ldr	r0, [pc, #136]	@ (8001b10 <LCD_Bitmap+0xa4>)
 8001a86:	f005 f809 	bl	8006a9c <HAL_GPIO_WritePin>
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4821      	ldr	r0, [pc, #132]	@ (8001b14 <LCD_Bitmap+0xa8>)
 8001a90:	f005 f804 	bl	8006a9c <HAL_GPIO_WritePin>
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fe9b 	bl	80017e8 <SetWindows>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e01e      	b.n	8001af6 <LCD_Bitmap+0x8a>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e014      	b.n	8001ae8 <LCD_Bitmap+0x7c>
 8001abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fde8 	bl	800169c <LCD_DATA>
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fde0 	bl	800169c <LCD_DATA>
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8e6      	bhi.n	8001abe <LCD_Bitmap+0x52>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8dc      	bhi.n	8001ab8 <LCD_Bitmap+0x4c>
 8001afe:	2201      	movs	r2, #1
 8001b00:	2101      	movs	r1, #1
 8001b02:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <LCD_Bitmap+0xa8>)
 8001b04:	f004 ffca 	bl	8006a9c <HAL_GPIO_WritePin>
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400

08001b18 <LCD_Sprite>:
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	202c      	movs	r0, #44	@ 0x2c
 8001b28:	f7ff fd12 	bl	8001550 <LCD_CMD>
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2110      	movs	r1, #16
 8001b30:	484d      	ldr	r0, [pc, #308]	@ (8001c68 <LCD_Sprite+0x150>)
 8001b32:	f004 ffb3 	bl	8006a9c <HAL_GPIO_WritePin>
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	484c      	ldr	r0, [pc, #304]	@ (8001c6c <LCD_Sprite+0x154>)
 8001b3c:	f004 ffae 	bl	8006a9c <HAL_GPIO_WritePin>
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f7ff fe44 	bl	80017e8 <SetWindows>
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <LCD_Sprite+0xd4>
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	e032      	b.n	8001be2 <LCD_Sprite+0xca>
 8001b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	fb03 f202 	mul.w	r2, r3, r2
 8001b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba0:	4413      	add	r3, r2
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba8:	e014      	b.n	8001bd4 <LCD_Sprite+0xbc>
 8001baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd72 	bl	800169c <LCD_DATA>
 8001bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fd6a 	bl	800169c <LCD_DATA>
 8001bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bca:	3b02      	subs	r3, #2
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbe6      	blt.n	8001baa <LCD_Sprite+0x92>
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	3301      	adds	r3, #1
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbc8      	blt.n	8001b7c <LCD_Sprite+0x64>
 8001bea:	e034      	b.n	8001c56 <LCD_Sprite+0x13e>
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	e02d      	b.n	8001c4e <LCD_Sprite+0x136>
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	fb03 f202 	mul.w	r2, r3, r2
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001c0a:	4413      	add	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	e014      	b.n	8001c40 <LCD_Sprite+0x128>
 8001c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd3c 	bl	800169c <LCD_DATA>
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	3301      	adds	r3, #1
 8001c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fd34 	bl	800169c <LCD_DATA>
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	3302      	adds	r3, #2
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbe6      	blt.n	8001c16 <LCD_Sprite+0xfe>
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbcd      	blt.n	8001bf2 <LCD_Sprite+0xda>
 8001c56:	2201      	movs	r2, #1
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <LCD_Sprite+0x154>)
 8001c5c:	f004 ff1e 	bl	8006a9c <HAL_GPIO_WritePin>
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	@ 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400

08001c70 <transmit_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void transmit_uart(char *string){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint8_t len=strlen(string);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7fe fac9 	bl	8000210 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, (uint8_t*)string, len, 200);
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	23c8      	movs	r3, #200	@ 0xc8
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <transmit_uart+0x28>)
 8001c8c:	f007 f80e 	bl	8008cac <HAL_UART_Transmit>
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20017c78 	.word	0x20017c78

08001c9c <CargarBitmaps_SD>:

// Función para leer una imagen desde la SD
int CargarBitmaps_SD(const char* filename) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ca8:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;
    // Montar SD
    fres = f_mount(&fs, "/", 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	4936      	ldr	r1, [pc, #216]	@ (8001d88 <CargarBitmaps_SD+0xec>)
 8001cb0:	4836      	ldr	r0, [pc, #216]	@ (8001d8c <CargarBitmaps_SD+0xf0>)
 8001cb2:	f00a fa49 	bl	800c148 <f_mount>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cbc:	f102 021f 	add.w	r2, r2, #31
 8001cc0:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK){
 8001cc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cc6:	f103 031f 	add.w	r3, r3, #31
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <CargarBitmaps_SD+0x3a>
    	transmit_uart("SD MONTADA\n");
 8001cd0:	482f      	ldr	r0, [pc, #188]	@ (8001d90 <CargarBitmaps_SD+0xf4>)
 8001cd2:	f7ff ffcd 	bl	8001c70 <transmit_uart>
    }

    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 8001cd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	3b14      	subs	r3, #20
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00a fa73 	bl	800c1d4 <f_open>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cf4:	f102 021f 	add.w	r2, r2, #31
 8001cf8:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8001cfa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cfe:	f103 031f 	add.w	r3, r3, #31
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <CargarBitmaps_SD+0x76>
       transmit_uart("Error al abrir el archivo en la SD\n");
 8001d08:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <CargarBitmaps_SD+0xf8>)
 8001d0a:	f7ff ffb1 	bl	8001c70 <transmit_uart>
        return 0;  // Error al abrir el archivo
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e035      	b.n	8001d7e <CargarBitmaps_SD+0xe2>
    }
    transmit_uart("Se abrio el archivo\n");
 8001d12:	4821      	ldr	r0, [pc, #132]	@ (8001d98 <CargarBitmaps_SD+0xfc>)
 8001d14:	f7ff ffac 	bl	8001c70 <transmit_uart>
    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, fragmento_imagen, 19200, &bytes_read);
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	3b18      	subs	r3, #24
 8001d1e:	f107 0020 	add.w	r0, r7, #32
 8001d22:	3814      	subs	r0, #20
 8001d24:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001d28:	491c      	ldr	r1, [pc, #112]	@ (8001d9c <CargarBitmaps_SD+0x100>)
 8001d2a:	f00a fc1b 	bl	800c564 <f_read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d34:	f102 021f 	add.w	r2, r2, #31
 8001d38:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 8001d3a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d3e:	f103 031f 	add.w	r3, r3, #31
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <CargarBitmaps_SD+0xb8>
 8001d48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d4c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <CargarBitmaps_SD+0xce>
       transmit_uart("Error al leer la imagen desde la SD\n");
 8001d54:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <CargarBitmaps_SD+0x104>)
 8001d56:	f7ff ff8b 	bl	8001c70 <transmit_uart>
        f_close(&fil);
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	3b14      	subs	r3, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00a fddc 	bl	800c91e <f_close>
        return 0;  // Error al leer el archivo
 8001d66:	2300      	movs	r3, #0
 8001d68:	e009      	b.n	8001d7e <CargarBitmaps_SD+0xe2>
    }

    // Cerrar el archivo
    f_close(&fil);
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	3b14      	subs	r3, #20
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00a fdd4 	bl	800c91e <f_close>
    transmit_uart("TERMINO DE CARGAR IMAGEN\n");
 8001d76:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <CargarBitmaps_SD+0x108>)
 8001d78:	f7ff ff7a 	bl	8001c70 <transmit_uart>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;  // Éxito
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0800d510 	.word	0x0800d510
 8001d8c:	20016b68 	.word	0x20016b68
 8001d90:	0800d514 	.word	0x0800d514
 8001d94:	0800d520 	.word	0x0800d520
 8001d98:	0800d544 	.word	0x0800d544
 8001d9c:	20017cc0 	.word	0x20017cc0
 8001da0:	0800d55c 	.word	0x0800d55c
 8001da4:	0800d584 	.word	0x0800d584

08001da8 <setPWM_Frequency>:

/*---------Sonido---------------------*/

// Función para cambiar la frecuencia del PWM (ajusta el periodo)
void setPWM_Frequency(uint32_t frequency) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if (estadoActual==DUO || estadoActual==SOLO){
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <setPWM_Frequency+0x50>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d004      	beq.n	8001dc4 <setPWM_Frequency+0x1c>
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <setPWM_Frequency+0x50>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d112      	bne.n	8001dea <setPWM_Frequency+0x42>
		uint32_t timer_clock = 1000000; // 1 MHz (depende de tu configuración)
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <setPWM_Frequency+0x54>)
 8001dc6:	60fb      	str	r3, [r7, #12]
		uint32_t period = (timer_clock / frequency) - 1;
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]

		// Cambiar el periodo (Auto-Reload Register)
		__HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <setPWM_Frequency+0x58>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <setPWM_Frequency+0x58>)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	60d3      	str	r3, [r2, #12]

		// Reiniciar el timer para aplicar el cambio de frecuencia
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <setPWM_Frequency+0x58>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20016a78 	.word	0x20016a78
 8001dfc:	000f4240 	.word	0x000f4240
 8001e00:	20017be8 	.word	0x20017be8

08001e04 <setPWM_DutyCycle>:

// Función para cambiar el duty cycle
void setPWM_DutyCycle(uint16_t dutyCycle) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
	if (estadoActual==DUO || estadoActual==SOLO){
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <setPWM_DutyCycle+0x34>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d004      	beq.n	8001e22 <setPWM_DutyCycle+0x1e>
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <setPWM_DutyCycle+0x34>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d103      	bne.n	8001e2a <setPWM_DutyCycle+0x26>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, dutyCycle);
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <setPWM_DutyCycle+0x38>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20016a78 	.word	0x20016a78
 8001e3c:	20017be8 	.word	0x20017be8

08001e40 <animation_e1_control>:

/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 3a90 	vmov	r3, s15
 8001e56:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e62:	ee17 3a90 	vmov	r3, s15
 8001e66:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d131      	bne.n	8001ed4 <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	dd1b      	ble.n	8001eae <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	dc13      	bgt.n	8001ea4 <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb81 	bl	8000588 <__aeabi_f2d>
 8001e86:	a316      	add	r3, pc, #88	@ (adr r3, 8001ee0 <animation_e1_control+0xa0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fa1e 	bl	80002cc <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fbce 	bl	8000638 <__aeabi_d2f>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 8001ea2:	e017      	b.n	8001ed4 <animation_e1_control+0x94>
				enemy->animationV=0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001eac:	e012      	b.n	8001ed4 <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb68 	bl	8000588 <__aeabi_f2d>
 8001eb8:	a309      	add	r3, pc, #36	@ (adr r3, 8001ee0 <animation_e1_control+0xa0>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe fa05 	bl	80002cc <__adddf3>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fbb5 	bl	8000638 <__aeabi_d2f>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	f3af 8000 	nop.w
 8001ee0:	9999999a 	.word	0x9999999a
 8001ee4:	3fb99999 	.word	0x3fb99999

08001ee8 <animation_e1>:


void animation_e1(enemy_type1* enemy){
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	@ 0x2c
 8001eec:	af06      	add	r7, sp, #24
 8001eee:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efa:	ee17 3a90 	vmov	r3, s15
 8001efe:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0a:	ee17 3a90 	vmov	r3, s15
 8001f0e:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f040 80a6 	bne.w	8002066 <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	f340 80a2 	ble.w	8002066 <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3b06      	subs	r3, #6
 8001f28:	4618      	mov	r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	3b09      	subs	r3, #9
 8001f30:	4619      	mov	r1, r3
 8001f32:	2300      	movs	r3, #0
 8001f34:	9304      	str	r3, [sp, #16]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9303      	str	r3, [sp, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	2310      	movs	r3, #16
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <animation_e1+0x188>)
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2313      	movs	r3, #19
 8001f48:	2210      	movs	r2, #16
 8001f4a:	f7ff fde5 	bl	8001b18 <LCD_Sprite>
		    if (DrawHitbox==1){
 8001f4e:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <animation_e1+0x18c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d113      	bne.n	8001f7e <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	1ad0      	subs	r0, r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	1ad1      	subs	r1, r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2400      	movs	r4, #0
 8001f78:	9400      	str	r4, [sp, #0]
 8001f7a:	f7ff fcf5 	bl	8001968 <Rect>
		    }
		    if (DrawHitbox==2){
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <animation_e1+0x18c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d12b      	bne.n	8001fde <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6998      	ldr	r0, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	2201      	movs	r2, #1
 8001f98:	f7ff fd0e 	bl	80019b8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69d8      	ldr	r0, [r3, #28]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	2201      	movs	r2, #1
 8001fae:	f7ff fd03 	bl	80019b8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a19      	ldr	r1, [r3, #32]
 8001fba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f7ff fcf8 	bl	80019b8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001fd0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f7ff fced 	bl	80019b8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <animation_e1+0x18c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d13f      	bne.n	8002066 <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	1ad0      	subs	r0, r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	1ad1      	subs	r1, r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2400      	movs	r4, #0
 8002008:	9400      	str	r4, [sp, #0]
 800200a:	f7ff fcad 	bl	8001968 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6998      	ldr	r0, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2301      	movs	r3, #1
 800201e:	2201      	movs	r2, #1
 8002020:	f7ff fcca 	bl	80019b8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69d8      	ldr	r0, [r3, #28]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	2201      	movs	r2, #1
 8002036:	f7ff fcbf 	bl	80019b8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a19      	ldr	r1, [r3, #32]
 8002042:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	2201      	movs	r2, #1
 800204c:	f7ff fcb4 	bl	80019b8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002058:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2301      	movs	r3, #1
 8002060:	2201      	movs	r2, #1
 8002062:	f7ff fca9 	bl	80019b8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	2000b88c 	.word	0x2000b88c
 8002074:	2001cb27 	.word	0x2001cb27

08002078 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af06      	add	r7, sp, #24
 800207e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800208a:	ee17 3a90 	vmov	r3, s15
 800208e:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d134      	bne.n	8002102 <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b0a      	cmp	r3, #10
 800209c:	dc29      	bgt.n	80020f2 <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3b06      	subs	r3, #6
 80020a4:	4618      	mov	r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	3b0c      	subs	r3, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	9304      	str	r3, [sp, #16]
 80020b2:	2300      	movs	r3, #0
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	230b      	movs	r3, #11
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <animation_e1_die+0xa0>)
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2319      	movs	r3, #25
 80020c4:	220e      	movs	r2, #14
 80020c6:	f7ff fd27 	bl	8001b18 <LCD_Sprite>
				enemy->animationDie+=0.2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa5a 	bl	8000588 <__aeabi_f2d>
 80020d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002110 <animation_e1_die+0x98>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f8f7 	bl	80002cc <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe faa7 	bl	8000638 <__aeabi_d2f>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 80020f0:	e007      	b.n	8002102 <animation_e1_die+0x8a>
					enemy->x=5000;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f8:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	605a      	str	r2, [r3, #4]
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	9999999a 	.word	0x9999999a
 8002114:	3fc99999 	.word	0x3fc99999
 8002118:	2000de8c 	.word	0x2000de8c

0800211c <initEnemy1>:
				}
			}
		}
}

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b08b      	sub	sp, #44	@ 0x2c
 8002120:	af06      	add	r7, sp, #24
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002146:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <initEnemy1+0x1d4>)
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a65      	ldr	r2, [pc, #404]	@ (80022f4 <initEnemy1+0x1d8>)
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	1ad2      	subs	r2, r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	441a      	add	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	441a      	add	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3b08      	subs	r3, #8
 80021a8:	4618      	mov	r0, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	3b09      	subs	r3, #9
 80021b0:	4619      	mov	r1, r3
 80021b2:	2300      	movs	r3, #0
 80021b4:	9304      	str	r3, [sp, #16]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9303      	str	r3, [sp, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	2310      	movs	r3, #16
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	4b4d      	ldr	r3, [pc, #308]	@ (80022f8 <initEnemy1+0x1dc>)
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2313      	movs	r3, #19
 80021c8:	2210      	movs	r2, #16
 80021ca:	f7ff fca5 	bl	8001b18 <LCD_Sprite>

    if (DrawHitbox==1){
 80021ce:	4b4b      	ldr	r3, [pc, #300]	@ (80022fc <initEnemy1+0x1e0>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d113      	bne.n	80021fe <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	1ad0      	subs	r0, r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	1ad1      	subs	r1, r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2400      	movs	r4, #0
 80021f8:	9400      	str	r4, [sp, #0]
 80021fa:	f7ff fbb5 	bl	8001968 <Rect>
    }
    if (DrawHitbox==2){
 80021fe:	4b3f      	ldr	r3, [pc, #252]	@ (80022fc <initEnemy1+0x1e0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d12b      	bne.n	800225e <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6998      	ldr	r0, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2301      	movs	r3, #1
 8002216:	2201      	movs	r2, #1
 8002218:	f7ff fbce 	bl	80019b8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	69d8      	ldr	r0, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2301      	movs	r3, #1
 800222c:	2201      	movs	r2, #1
 800222e:	f7ff fbc3 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a19      	ldr	r1, [r3, #32]
 800223a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	2201      	movs	r2, #1
 8002244:	f7ff fbb8 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002250:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2301      	movs	r3, #1
 8002258:	2201      	movs	r2, #1
 800225a:	f7ff fbad 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <initEnemy1+0x1e0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d13f      	bne.n	80022e6 <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	1ad0      	subs	r0, r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	1ad1      	subs	r1, r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2400      	movs	r4, #0
 8002288:	9400      	str	r4, [sp, #0]
 800228a:	f7ff fb6d 	bl	8001968 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6998      	ldr	r0, [r3, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	2201      	movs	r2, #1
 80022a0:	f7ff fb8a 	bl	80019b8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	69d8      	ldr	r0, [r3, #28]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	2201      	movs	r2, #1
 80022b6:	f7ff fb7f 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a19      	ldr	r1, [r3, #32]
 80022c2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2301      	movs	r3, #1
 80022ca:	2201      	movs	r2, #1
 80022cc:	f7ff fb74 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022d8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2301      	movs	r3, #1
 80022e0:	2201      	movs	r2, #1
 80022e2:	f7ff fb69 	bl	80019b8 <FillRect>
        }
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40a00000 	.word	0x40a00000
 80022f4:	41400000 	.word	0x41400000
 80022f8:	2000b88c 	.word	0x2000b88c
 80022fc:	2001cb27 	.word	0x2001cb27

08002300 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b01      	cmp	r3, #1
 8002314:	f040 8251 	bne.w	80027ba <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b03      	cmp	r3, #3
 800231e:	f200 824c 	bhi.w	80027ba <ColisionPlayer_e1+0x4ba>
 8002322:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <ColisionPlayer_e1+0x28>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002339 	.word	0x08002339
 800232c:	08002457 	.word	0x08002457
 8002330:	08002575 	.word	0x08002575
 8002334:	08002693 	.word	0x08002693
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 8002338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233a:	3b0c      	subs	r3, #12
 800233c:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	429a      	cmp	r2, r3
 8002346:	f0c0 8231 	bcc.w	80027ac <ColisionPlayer_e1+0x4ac>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	f200 822b 	bhi.w	80027ac <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	429a      	cmp	r2, r3
 8002360:	d323      	bcc.n	80023aa <ColisionPlayer_e1+0xaa>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	429a      	cmp	r2, r3
 800236c:	d81d      	bhi.n	80023aa <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	1d5a      	adds	r2, r3, #5
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2201      	movs	r2, #1
 800237c:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	1e5a      	subs	r2, r3, #1
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e208      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d323      	bcc.n	80023fe <ColisionPlayer_e1+0xfe>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d81d      	bhi.n	80023fe <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	1d5a      	adds	r2, r3, #5
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2201      	movs	r2, #1
 80023d0:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e1de      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	429a      	cmp	r2, r3
 8002408:	f0c0 81d0 	bcc.w	80027ac <ColisionPlayer_e1+0x4ac>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	f200 81c9 	bhi.w	80027ac <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	1d5a      	adds	r2, r3, #5
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2201      	movs	r2, #1
 8002428:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d106      	bne.n	8002452 <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002452:	2300      	movs	r3, #0
 8002454:	e1b2      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	f200 81a4 	bhi.w	80027b0 <ColisionPlayer_e1+0x4b0>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	429a      	cmp	r2, r3
 8002470:	f0c0 819e 	bcc.w	80027b0 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	429a      	cmp	r2, r3
 800247e:	d323      	bcc.n	80024c8 <ColisionPlayer_e1+0x1c8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	429a      	cmp	r2, r3
 800248a:	d81d      	bhi.n	80024c8 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1f5a      	subs	r2, r3, #5
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2201      	movs	r2, #1
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2200      	movs	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e179      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d323      	bcc.n	800251c <ColisionPlayer_e1+0x21c>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	429a      	cmp	r2, r3
 80024de:	d81d      	bhi.n	800251c <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1f5a      	subs	r2, r3, #5
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2201      	movs	r2, #1
 80024ee:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002518:	2300      	movs	r3, #0
 800251a:	e14f      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Up && player->y<=enemy->e1Down){
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	f0c0 8143 	bcc.w	80027b0 <ColisionPlayer_e1+0x4b0>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	429a      	cmp	r2, r3
 8002534:	f200 813c 	bhi.w	80027b0 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1f5a      	subs	r2, r3, #5
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2201      	movs	r2, #1
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2200      	movs	r2, #0
 8002566:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002570:	2300      	movs	r3, #0
 8002572:	e123      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	330c      	adds	r3, #12
 8002578:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	429a      	cmp	r2, r3
 8002582:	f200 8117 	bhi.w	80027b4 <ColisionPlayer_e1+0x4b4>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	429a      	cmp	r2, r3
 800258e:	f0c0 8111 	bcc.w	80027b4 <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	429a      	cmp	r2, r3
 800259c:	d323      	bcc.n	80025e6 <ColisionPlayer_e1+0x2e6>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d81d      	bhi.n	80025e6 <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	1f5a      	subs	r2, r3, #5
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2201      	movs	r2, #1
 80025b8:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e0ea      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d323      	bcc.n	800263a <ColisionPlayer_e1+0x33a>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d81d      	bhi.n	800263a <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	1f5a      	subs	r2, r3, #5
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2201      	movs	r2, #1
 800260c:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	1e5a      	subs	r2, r3, #1
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002636:	2300      	movs	r3, #0
 8002638:	e0c0      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	429a      	cmp	r2, r3
 8002644:	f0c0 80b6 	bcc.w	80027b4 <ColisionPlayer_e1+0x4b4>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	f200 80af 	bhi.w	80027b4 <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	1f5a      	subs	r2, r3, #5
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2201      	movs	r2, #1
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d106      	bne.n	800268e <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800268e:	2300      	movs	r3, #0
 8002690:	e094      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	3b0c      	subs	r3, #12
 8002696:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	429a      	cmp	r2, r3
 80026a0:	f0c0 808a 	bcc.w	80027b8 <ColisionPlayer_e1+0x4b8>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	f200 8084 	bhi.w	80027b8 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d323      	bcc.n	8002704 <ColisionPlayer_e1+0x404>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d81d      	bhi.n	8002704 <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	1d5a      	adds	r2, r3, #5
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2201      	movs	r2, #1
 80026d6:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002700:	2300      	movs	r3, #0
 8002702:	e05b      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	d323      	bcc.n	8002758 <ColisionPlayer_e1+0x458>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	429a      	cmp	r2, r3
 800271a:	d81d      	bhi.n	8002758 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1d5a      	adds	r2, r3, #5
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2201      	movs	r2, #1
 800272a:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002754:	2300      	movs	r3, #0
 8002756:	e031      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Up && player->y<=enemy->e1Down){
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d329      	bcc.n	80027b8 <ColisionPlayer_e1+0x4b8>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	429a      	cmp	r2, r3
 800276e:	d823      	bhi.n	80027b8 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1d5a      	adds	r2, r3, #5
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2201      	movs	r2, #1
 800277e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e007      	b.n	80027bc <ColisionPlayer_e1+0x4bc>
					break;
 80027ac:	bf00      	nop
 80027ae:	e004      	b.n	80027ba <ColisionPlayer_e1+0x4ba>
					break;
 80027b0:	bf00      	nop
 80027b2:	e002      	b.n	80027ba <ColisionPlayer_e1+0x4ba>
					break;
 80027b4:	bf00      	nop
 80027b6:	e000      	b.n	80027ba <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 80027b8:	bf00      	nop
			return 1;
			}
	}
	return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3724      	adds	r7, #36	@ 0x24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af06      	add	r7, sp, #24
 80027ce:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	1ad2      	subs	r2, r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	441a      	add	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	441a      	add	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3b08      	subs	r3, #8
 8002816:	4618      	mov	r0, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	3b0a      	subs	r3, #10
 800281e:	4619      	mov	r1, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9304      	str	r3, [sp, #16]
 8002824:	2300      	movs	r3, #0
 8002826:	9303      	str	r3, [sp, #12]
 8002828:	2304      	movs	r3, #4
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	2305      	movs	r3, #5
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	4b4a      	ldr	r3, [pc, #296]	@ (800295c <Hitbox_e2+0x194>)
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2314      	movs	r3, #20
 8002836:	2210      	movs	r2, #16
 8002838:	f7ff f96e 	bl	8001b18 <LCD_Sprite>

    if (DrawHitbox==1){
 800283c:	4b48      	ldr	r3, [pc, #288]	@ (8002960 <Hitbox_e2+0x198>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d113      	bne.n	800286c <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	1ad0      	subs	r0, r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	1ad1      	subs	r1, r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2400      	movs	r4, #0
 8002866:	9400      	str	r4, [sp, #0]
 8002868:	f7ff f87e 	bl	8001968 <Rect>
    }
    if (DrawHitbox==2){
 800286c:	4b3c      	ldr	r3, [pc, #240]	@ (8002960 <Hitbox_e2+0x198>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d12b      	bne.n	80028cc <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6998      	ldr	r0, [r3, #24]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	2201      	movs	r2, #1
 8002886:	f7ff f897 	bl	80019b8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69d8      	ldr	r0, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2301      	movs	r3, #1
 800289a:	2201      	movs	r2, #1
 800289c:	f7ff f88c 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a19      	ldr	r1, [r3, #32]
 80028a8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2301      	movs	r3, #1
 80028b0:	2201      	movs	r2, #1
 80028b2:	f7ff f881 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80028be:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2201      	movs	r2, #1
 80028c8:	f7ff f876 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 80028cc:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <Hitbox_e2+0x198>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d13f      	bne.n	8002954 <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	1ad0      	subs	r0, r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	1ad1      	subs	r1, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2400      	movs	r4, #0
 80028f6:	9400      	str	r4, [sp, #0]
 80028f8:	f7ff f836 	bl	8001968 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6998      	ldr	r0, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2301      	movs	r3, #1
 800290c:	2201      	movs	r2, #1
 800290e:	f7ff f853 	bl	80019b8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69d8      	ldr	r0, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2301      	movs	r3, #1
 8002922:	2201      	movs	r2, #1
 8002924:	f7ff f848 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a19      	ldr	r1, [r3, #32]
 8002930:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	2201      	movs	r2, #1
 800293a:	f7ff f83d 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002946:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	2201      	movs	r2, #1
 8002950:	f7ff f832 	bl	80019b8 <FillRect>
        }
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	200016e4 	.word	0x200016e4
 8002960:	2001cb27 	.word	0x2001cb27

08002964 <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <initEnemy2+0x6c>)
 80029a8:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <initEnemy2+0x70>)
 80029ae:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40


}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40400000 	.word	0x40400000
 80029d4:	40c00000 	.word	0x40c00000

080029d8 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8105 	bne.w	8002bf6 <moveE2+0x21e>
		int delay_s=enemy->delay;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80029f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f6:	ee17 3a90 	vmov	r3, s15
 80029fa:	61fb      	str	r3, [r7, #28]
		if (delay_s==100000){ //
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4a80      	ldr	r2, [pc, #512]	@ (8002c00 <moveE2+0x228>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	f040 80ef 	bne.w	8002be4 <moveE2+0x20c>
			switch(enemy->move){
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	f200 80f3 	bhi.w	8002bf6 <moveE2+0x21e>
 8002a10:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <moveE2+0x40>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a99 	.word	0x08002a99
 8002a20:	08002b09 	.word	0x08002b09
 8002a24:	08002b79 	.word	0x08002b79
			case 0: //Derecha
				int futureX_D=player->x+50;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3332      	adds	r3, #50	@ 0x32
 8002a2e:	60fb      	str	r3, [r7, #12]
				if (futureX_D>player->limitWidth-20){
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	f1a3 0214 	sub.w	r2, r3, #20
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d209      	bcs.n	8002a52 <moveE2+0x7a>
					enemy->move+=1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffc4 	bl	80029d8 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002a50:	e0d1      	b.n	8002bf6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1a3 0008 	sub.w	r0, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f1a3 010a 	sub.w	r1, r3, #10
 8002a62:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2314      	movs	r3, #20
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	f7fe ffa4 	bl	80019b8 <FillRect>
					enemy->x=futureX_D;
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fe99 	bl	80027c8 <Hitbox_e2>
				break;
 8002a96:	e0ae      	b.n	8002bf6 <moveE2+0x21e>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	3332      	adds	r3, #50	@ 0x32
 8002a9e:	613b      	str	r3, [r7, #16]
				if (futureY_A>player->limitHeight-20){
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	f1a3 0214 	sub.w	r2, r3, #20
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d209      	bcs.n	8002ac2 <moveE2+0xea>
					enemy->move+=1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff8c 	bl	80029d8 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002ac0:	e099      	b.n	8002bf6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1a3 0008 	sub.w	r0, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f1a3 010a 	sub.w	r1, r3, #10
 8002ad2:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2314      	movs	r3, #20
 8002ada:	2210      	movs	r2, #16
 8002adc:	f7fe ff6c 	bl	80019b8 <FillRect>
					enemy->y=futureY_A;
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fe61 	bl	80027c8 <Hitbox_e2>
				break;
 8002b06:	e076      	b.n	8002bf6 <moveE2+0x21e>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3b32      	subs	r3, #50	@ 0x32
 8002b0e:	617b      	str	r3, [r7, #20]
				if (futureX_I<player->limitWidth_i+20){
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	f103 0214 	add.w	r2, r3, #20
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d909      	bls.n	8002b32 <moveE2+0x15a>
						enemy->move+=1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff54 	bl	80029d8 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002b30:	e061      	b.n	8002bf6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1a3 0008 	sub.w	r0, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f1a3 010a 	sub.w	r1, r3, #10
 8002b42:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2314      	movs	r3, #20
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	f7fe ff34 	bl	80019b8 <FillRect>
					enemy->x=futureX_I;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fe29 	bl	80027c8 <Hitbox_e2>
				break;
 8002b76:	e03e      	b.n	8002bf6 <moveE2+0x21e>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	3b32      	subs	r3, #50	@ 0x32
 8002b7e:	61bb      	str	r3, [r7, #24]
				if (futureY_U>player->limitHeight+20){
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	f103 0214 	add.w	r2, r3, #20
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d209      	bcs.n	8002ba2 <moveE2+0x1ca>
					enemy->move+=1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff1c 	bl	80029d8 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002ba0:	e029      	b.n	8002bf6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1a3 0008 	sub.w	r0, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f1a3 010a 	sub.w	r1, r3, #10
 8002bb2:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2314      	movs	r3, #20
 8002bba:	2210      	movs	r2, #16
 8002bbc:	f7fe fefc 	bl	80019b8 <FillRect>
					enemy->y=futureY_U;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fdf3 	bl	80027c8 <Hitbox_e2>
				break;
 8002be2:	e008      	b.n	8002bf6 <moveE2+0x21e>
			}
		}else{
			if (delay_s==200000){ //
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <moveE2+0x22c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d104      	bne.n	8002bf6 <moveE2+0x21e>
				enemy->delay=0;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002bf4:	e7ff      	b.n	8002bf6 <moveE2+0x21e>
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	000186a0 	.word	0x000186a0
 8002c04:	00030d40 	.word	0x00030d40

08002c08 <E2_Appear>:
			}
		}
	}
}

void E2_Appear(enemy_type2* enemy){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af06      	add	r7, sp, #24
 8002c0e:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c1a:	ee17 3a90 	vmov	r3, s15
 8002c1e:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d12b      	bne.n	8002c80 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	dc28      	bgt.n	8002c80 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3b08      	subs	r3, #8
 8002c34:	4618      	mov	r0, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	3b0a      	subs	r3, #10
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9304      	str	r3, [sp, #16]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9303      	str	r3, [sp, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	9302      	str	r3, [sp, #8]
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <E2_Appear+0x88>)
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2314      	movs	r3, #20
 8002c54:	2210      	movs	r2, #16
 8002c56:	f7fe ff5f 	bl	8001b18 <LCD_Sprite>
			enemy->animationV+=0.05;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc92 	bl	8000588 <__aeabi_f2d>
 8002c64:	a308      	add	r3, pc, #32	@ (adr r3, 8002c88 <E2_Appear+0x80>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fb2f 	bl	80002cc <__adddf3>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd fcdf 	bl	8000638 <__aeabi_d2f>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	9999999a 	.word	0x9999999a
 8002c8c:	3fa99999 	.word	0x3fa99999
 8002c90:	200016e4 	.word	0x200016e4
 8002c94:	00000000 	.word	0x00000000

08002c98 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af06      	add	r7, sp, #24
 8002c9e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d13b      	bne.n	8002d20 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb2:	ee17 3a90 	vmov	r3, s15
 8002cb6:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d12f      	bne.n	8002d20 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	dc29      	bgt.n	8002d1a <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3b0e      	subs	r3, #14
 8002ccc:	4618      	mov	r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	3b0c      	subs	r3, #12
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9303      	str	r3, [sp, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	9302      	str	r3, [sp, #8]
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <E2_Hurt+0x98>)
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2319      	movs	r3, #25
 8002cec:	221c      	movs	r2, #28
 8002cee:	f7fe ff13 	bl	8001b18 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc46 	bl	8000588 <__aeabi_f2d>
 8002cfc:	a30a      	add	r3, pc, #40	@ (adr r3, 8002d28 <E2_Hurt+0x90>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd fae3 	bl	80002cc <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd fc93 	bl	8000638 <__aeabi_d2f>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002d18:	e002      	b.n	8002d20 <E2_Hurt+0x88>
					enemy->isHurt=0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	9999999a 	.word	0x9999999a
 8002d2c:	3fa99999 	.word	0x3fa99999
 8002d30:	20002364 	.word	0x20002364
 8002d34:	00000000 	.word	0x00000000

08002d38 <E2_Die>:
			}
		}
	}
}

void E2_Die(enemy_type2* enemy){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af06      	add	r7, sp, #24
 8002d3e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4a:	ee17 3a90 	vmov	r3, s15
 8002d4e:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d143      	bne.n	8002de0 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	dc29      	bgt.n	8002db2 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3b0c      	subs	r3, #12
 8002d64:	4618      	mov	r0, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9304      	str	r3, [sp, #16]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9303      	str	r3, [sp, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	9302      	str	r3, [sp, #8]
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <E2_Die+0xb8>)
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	2317      	movs	r3, #23
 8002d84:	221a      	movs	r2, #26
 8002d86:	f7fe fec7 	bl	8001b18 <LCD_Sprite>
					enemy->animationDie+=0.2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fbfa 	bl	8000588 <__aeabi_f2d>
 8002d94:	a314      	add	r3, pc, #80	@ (adr r3, 8002de8 <E2_Die+0xb0>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fa97 	bl	80002cc <__adddf3>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f7fd fc47 	bl	8000638 <__aeabi_d2f>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002db0:	e016      	b.n	8002de0 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1a3 000c 	sub.w	r0, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f1a3 010b 	sub.w	r1, r3, #11
 8002dc2:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2317      	movs	r3, #23
 8002dca:	221a      	movs	r2, #26
 8002dcc:	f7fe fdf4 	bl	80019b8 <FillRect>
						enemy->x=5000;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	605a      	str	r2, [r3, #4]
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	9999999a 	.word	0x9999999a
 8002dec:	3fc99999 	.word	0x3fc99999
 8002df0:	200033cc 	.word	0x200033cc

08002df4 <PlayerHit_E2>:
					}
				}
			}
}

void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	f040 80f0 	bne.w	8002fe8 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	f200 80eb 	bhi.w	8002fe8 <PlayerHit_E2+0x1f4>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <PlayerHit_E2+0x24>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002f0b 	.word	0x08002f0b
 8002e20:	08002e9b 	.word	0x08002e9b
 8002e24:	08002f73 	.word	0x08002f73
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	3b0f      	subs	r3, #15
 8002e2e:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	f0c0 80cf 	bcc.w	8002fda <PlayerHit_E2+0x1e6>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	f200 80c9 	bhi.w	8002fda <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	3b05      	subs	r3, #5
 8002e52:	429a      	cmp	r2, r3
 8002e54:	f0c0 80c1 	bcc.w	8002fda <PlayerHit_E2+0x1e6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	3305      	adds	r3, #5
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f200 80b9 	bhi.w	8002fda <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 80a8 	bne.w	8002fda <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002e98:	e09f      	b.n	8002fda <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	330f      	adds	r3, #15
 8002ea0:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f0c0 8098 	bcc.w	8002fde <PlayerHit_E2+0x1ea>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f200 8092 	bhi.w	8002fde <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	3b05      	subs	r3, #5
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	f0c0 808a 	bcc.w	8002fde <PlayerHit_E2+0x1ea>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	3305      	adds	r3, #5
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f200 8082 	bhi.w	8002fde <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	1e5a      	subs	r2, r3, #1
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d171      	bne.n	8002fde <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002f08:	e069      	b.n	8002fde <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d362      	bcc.n	8002fe2 <PlayerHit_E2+0x1ee>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d85d      	bhi.n	8002fe2 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	3b0f      	subs	r3, #15
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d356      	bcc.n	8002fe2 <PlayerHit_E2+0x1ee>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d84f      	bhi.n	8002fe2 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13f      	bne.n	8002fe2 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002f70:	e037      	b.n	8002fe2 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3b14      	subs	r3, #20
 8002f78:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d330      	bcc.n	8002fe6 <PlayerHit_E2+0x1f2>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d82b      	bhi.n	8002fe6 <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	3b0f      	subs	r3, #15
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d324      	bcc.n	8002fe6 <PlayerHit_E2+0x1f2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d81d      	bhi.n	8002fe6 <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002fd8:	e005      	b.n	8002fe6 <PlayerHit_E2+0x1f2>
			break;
 8002fda:	bf00      	nop
 8002fdc:	e004      	b.n	8002fe8 <PlayerHit_E2+0x1f4>
				break;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <PlayerHit_E2+0x1f4>
				break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <PlayerHit_E2+0x1f4>
							break;
 8002fe6:	bf00      	nop
						}
		}
	}
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <initEnemy3>:

/* Funciones Enemigo 3 -------------------------------------------------*/
void initEnemy3(enemy_type3* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health, player* player) {
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	601a      	str	r2, [r3, #0]
    enemy->y_eye=startY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]
    enemy->y = startY+20;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f103 0214 	add.w	r2, r3, #20
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	60da      	str	r2, [r3, #12]
    enemy->height = height;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	611a      	str	r2, [r3, #16]
    enemy->speed=5;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2205      	movs	r2, #5
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->Place=0;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	64da      	str	r2, [r3, #76]	@ 0x4c
    enemy->delay=0;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50
    enemy->delay_init=0;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54

    // Inicializar la vida y el estado
    enemy->health = health;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
    enemy->isAlive = 0;  // El enemigo comienza vivo
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationFire=0;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationEye=0;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->isMove=0;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	649a      	str	r2, [r3, #72]	@ 0x48

    //Limites
    enemy->limitwidth=player->limitWidth;
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	635a      	str	r2, [r3, #52]	@ 0x34
    enemy->limitwidth_i=player->limitWidth_i;
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->limitheight_i=18;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2212      	movs	r2, #18
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
    enemy->limitheight=220;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	22dc      	movs	r2, #220	@ 0xdc
 8003078:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <E3_Eye>:

void E3_Eye(enemy_type3* enemy){
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	@ 0x28
 800308c:	af06      	add	r7, sp, #24
 800308e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	2b00      	cmp	r3, #0
 8003096:	dd55      	ble.n	8003144 <E3_Eye+0xbc>
		if (enemy->isMove==0){
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309c:	2b00      	cmp	r3, #0
 800309e:	d160      	bne.n	8003162 <E3_Eye+0xda>
			enemy->y=enemy->y_eye+20;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f103 0214 	add.w	r2, r3, #20
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	605a      	str	r2, [r3, #4]
			int variableEye=enemy->animationEye;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80030b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b6:	ee17 3a90 	vmov	r3, s15
 80030ba:	60fb      	str	r3, [r7, #12]
			if (variableEye<7){
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	dc29      	bgt.n	8003116 <E3_Eye+0x8e>
				LCD_Sprite(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, E3_Eye16x17_7, 7, variableEye, 0, 0);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3b08      	subs	r3, #8
 80030c8:	4618      	mov	r0, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	3b08      	subs	r3, #8
 80030d0:	4619      	mov	r1, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9303      	str	r3, [sp, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	9302      	str	r3, [sp, #8]
 80030de:	2307      	movs	r3, #7
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <E3_Eye+0xf0>)
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2311      	movs	r3, #17
 80030e8:	2210      	movs	r2, #16
 80030ea:	f7fe fd15 	bl	8001b18 <LCD_Sprite>
				enemy->animationEye+=0.1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa48 	bl	8000588 <__aeabi_f2d>
 80030f8:	a31d      	add	r3, pc, #116	@ (adr r3, 8003170 <E3_Eye+0xe8>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f7fd f8e5 	bl	80002cc <__adddf3>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	f7fd fa95 	bl	8000638 <__aeabi_d2f>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	} else{
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
	}
}
 8003114:	e025      	b.n	8003162 <E3_Eye+0xda>
				FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1a3 0008 	sub.w	r0, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f1a3 0108 	sub.w	r1, r3, #8
 8003126:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2311      	movs	r3, #17
 800312e:	2210      	movs	r2, #16
 8003130:	f7fe fc42 	bl	80019b8 <FillRect>
				enemy->isMove=1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationFire=0;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003142:	e00e      	b.n	8003162 <E3_Eye+0xda>
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1a3 0008 	sub.w	r0, r3, #8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f1a3 0108 	sub.w	r1, r3, #8
 8003154:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2311      	movs	r3, #17
 800315c:	2210      	movs	r2, #16
 800315e:	f7fe fc2b 	bl	80019b8 <FillRect>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w
 8003170:	9999999a 	.word	0x9999999a
 8003174:	3fb99999 	.word	0x3fb99999
 8003178:	20000804 	.word	0x20000804

0800317c <E3_FireMove>:
			}
		}
	}
}

void E3_FireMove(enemy_type3* enemy,player* player){
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b08b      	sub	sp, #44	@ 0x2c
 8003180:	af06      	add	r7, sp, #24
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	if (enemy->health>0){
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	2b00      	cmp	r3, #0
 800318c:	f340 8102 	ble.w	8003394 <E3_FireMove+0x218>
		if (enemy->isMove==1){
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80fd 	bne.w	8003394 <E3_FireMove+0x218>
			int FutureY=enemy->y+enemy->speed;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4413      	add	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
			if (FutureY>=220){
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2bdb      	cmp	r3, #219	@ 0xdb
 80031aa:	dd23      	ble.n	80031f4 <E3_FireMove+0x78>
				enemy->isMove=0;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationEye=0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				enemy->health-=1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	1e5a      	subs	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44
				enemy->Place+=1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	64da      	str	r2, [r3, #76]	@ 0x4c
				enemy->delay=0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	651a      	str	r2, [r3, #80]	@ 0x50
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1a3 0008 	sub.w	r0, r3, #8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f1a3 0108 	sub.w	r1, r3, #8
 80031e4:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2310      	movs	r3, #16
 80031ec:	2210      	movs	r2, #16
 80031ee:	f7fe fbe3 	bl	80019b8 <FillRect>
				}
			}
		}

	}
}
 80031f2:	e0cf      	b.n	8003394 <E3_FireMove+0x218>
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1a3 0008 	sub.w	r0, r3, #8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f1a3 0108 	sub.w	r1, r3, #8
 8003204:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2310      	movs	r3, #16
 800320c:	2210      	movs	r2, #16
 800320e:	f7fe fbd3 	bl	80019b8 <FillRect>
				int animationFire=enemy->animationFire;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321c:	ee17 3a90 	vmov	r3, s15
 8003220:	60bb      	str	r3, [r7, #8]
				enemy->y=FutureY;
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	605a      	str	r2, [r3, #4]
				LCD_Sprite(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, E3_Fire16x16_4, 4, animationFire, 0, 0);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3b08      	subs	r3, #8
 800322e:	4618      	mov	r0, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	3b08      	subs	r3, #8
 8003236:	4619      	mov	r1, r3
 8003238:	2300      	movs	r3, #0
 800323a:	9304      	str	r3, [sp, #16]
 800323c:	2300      	movs	r3, #0
 800323e:	9303      	str	r3, [sp, #12]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	2304      	movs	r3, #4
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	4b54      	ldr	r3, [pc, #336]	@ (800339c <E3_FireMove+0x220>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2310      	movs	r3, #16
 800324e:	2210      	movs	r2, #16
 8003250:	f7fe fc62 	bl	8001b18 <LCD_Sprite>
				if (player->playerUp<=enemy->e1Down){ //player->playerUp>=enemy->e1Up &&
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	429a      	cmp	r2, r3
 800325e:	f200 8099 	bhi.w	8003394 <E3_FireMove+0x218>
					if((enemy->e1Left >= player->playerLeft-4 && enemy->e1Left <= player->playerRight+4)||(enemy->e1Right >= player->playerLeft-4 && enemy->e1Right <= player->playerRight+4)||(enemy->x >= player->playerLeft-4 && enemy->x <= player->playerRight+4)){
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326a:	3b04      	subs	r3, #4
 800326c:	429a      	cmp	r2, r3
 800326e:	d306      	bcc.n	800327e <E3_FireMove+0x102>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	3304      	adds	r3, #4
 800327a:	429a      	cmp	r2, r3
 800327c:	d91b      	bls.n	80032b6 <E3_FireMove+0x13a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	3b04      	subs	r3, #4
 8003288:	429a      	cmp	r2, r3
 800328a:	d306      	bcc.n	800329a <E3_FireMove+0x11e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	3304      	adds	r3, #4
 8003296:	429a      	cmp	r2, r3
 8003298:	d90d      	bls.n	80032b6 <E3_FireMove+0x13a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a2:	3b04      	subs	r3, #4
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d375      	bcc.n	8003394 <E3_FireMove+0x218>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	3304      	adds	r3, #4
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d86e      	bhi.n	8003394 <E3_FireMove+0x218>
						player->y=player->y+5;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	1d5a      	adds	r2, r3, #5
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	605a      	str	r2, [r3, #4]
						player->direction=0;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	621a      	str	r2, [r3, #32]
						player->IsDamage=1;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
						player->animationDamage=0;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	661a      	str	r2, [r3, #96]	@ 0x60
						player->life-=1;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	1e5a      	subs	r2, r3, #1
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	615a      	str	r2, [r3, #20]
						FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2)+1, player->width+1, player->height+1, 0xFE8B);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	1c58      	adds	r0, r3, #1
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	3301      	adds	r3, #1
 8003306:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800330a:	9400      	str	r4, [sp, #0]
 800330c:	f7fe fb54 	bl	80019b8 <FillRect>
						if (player->life==0){
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11f      	bne.n	8003358 <E3_FireMove+0x1dc>
							player->isAlive=0;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
							player->animationDie=0;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	669a      	str	r2, [r3, #104]	@ 0x68
						FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2)+1, player->width+1, player->height+1, 0xFE8B);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	1c58      	adds	r0, r3, #1
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	1c59      	adds	r1, r3, #1
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8003352:	9400      	str	r4, [sp, #0]
 8003354:	f7fe fb30 	bl	80019b8 <FillRect>
						FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1a3 0008 	sub.w	r0, r3, #8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f1a3 0108 	sub.w	r1, r3, #8
 8003368:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2310      	movs	r3, #16
 8003370:	2210      	movs	r2, #16
 8003372:	f7fe fb21 	bl	80019b8 <FillRect>
						enemy->isMove=0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	649a      	str	r2, [r3, #72]	@ 0x48
						enemy->animationEye=0;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->Place+=1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	64da      	str	r2, [r3, #76]	@ 0x4c
						enemy->delay=0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	20000004 	.word	0x20000004

080033a0 <E3_FireAnimation>:

void E3_FireAnimation(enemy_type3* enemy){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if (enemy->health>0 && enemy->isMove){
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	dd25      	ble.n	80033fc <E3_FireAnimation+0x5c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d021      	beq.n	80033fc <E3_FireAnimation+0x5c>
		enemy->animationFire+=0.2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f8e3 	bl	8000588 <__aeabi_f2d>
 80033c2:	a311      	add	r3, pc, #68	@ (adr r3, 8003408 <E3_FireAnimation+0x68>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f7fc ff80 	bl	80002cc <__adddf3>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fd f930 	bl	8000638 <__aeabi_d2f>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (enemy->animationFire>=4){
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80033e4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80033e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f0:	da00      	bge.n	80033f4 <E3_FireAnimation+0x54>
			enemy->animationFire=0;
		}
	}
}
 80033f2:	e003      	b.n	80033fc <E3_FireAnimation+0x5c>
			enemy->animationFire=0;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	f3af 8000 	nop.w
 8003408:	9999999a 	.word	0x9999999a
 800340c:	3fc99999 	.word	0x3fc99999

08003410 <E3_Hitbox>:

void E3_Hitbox(enemy_type3* enemy){
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b085      	sub	sp, #20
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	1ad2      	subs	r2, r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	441a      	add	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	441a      	add	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24

		if (DrawHitbox==1){
 8003458:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <E3_Hitbox+0x168>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d113      	bne.n	8003488 <E3_Hitbox+0x78>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	085b      	lsrs	r3, r3, #1
 800346a:	1ad0      	subs	r0, r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	1ad1      	subs	r1, r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2400      	movs	r4, #0
 8003482:	9400      	str	r4, [sp, #0]
 8003484:	f7fe fa70 	bl	8001968 <Rect>
	    }
	    if (DrawHitbox==2){
 8003488:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <E3_Hitbox+0x168>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d12b      	bne.n	80034e8 <E3_Hitbox+0xd8>
	    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6998      	ldr	r0, [r3, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2301      	movs	r3, #1
 80034a0:	2201      	movs	r2, #1
 80034a2:	f7fe fa89 	bl	80019b8 <FillRect>
	    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69d8      	ldr	r0, [r3, #28]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2301      	movs	r3, #1
 80034b6:	2201      	movs	r2, #1
 80034b8:	f7fe fa7e 	bl	80019b8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a19      	ldr	r1, [r3, #32]
 80034c4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2301      	movs	r3, #1
 80034cc:	2201      	movs	r2, #1
 80034ce:	f7fe fa73 	bl	80019b8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034da:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2301      	movs	r3, #1
 80034e2:	2201      	movs	r2, #1
 80034e4:	f7fe fa68 	bl	80019b8 <FillRect>
	    }
	    if (DrawHitbox==3){
 80034e8:	4b23      	ldr	r3, [pc, #140]	@ (8003578 <E3_Hitbox+0x168>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d13f      	bne.n	8003570 <E3_Hitbox+0x160>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	1ad0      	subs	r0, r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	1ad1      	subs	r1, r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2400      	movs	r4, #0
 8003512:	9400      	str	r4, [sp, #0]
 8003514:	f7fe fa28 	bl	8001968 <Rect>
			FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6998      	ldr	r0, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2301      	movs	r3, #1
 8003528:	2201      	movs	r2, #1
 800352a:	f7fe fa45 	bl	80019b8 <FillRect>
			FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69d8      	ldr	r0, [r3, #28]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2301      	movs	r3, #1
 800353e:	2201      	movs	r2, #1
 8003540:	f7fe fa3a 	bl	80019b8 <FillRect>
			FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a19      	ldr	r1, [r3, #32]
 800354c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2301      	movs	r3, #1
 8003554:	2201      	movs	r2, #1
 8003556:	f7fe fa2f 	bl	80019b8 <FillRect>
			FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003562:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2301      	movs	r3, #1
 800356a:	2201      	movs	r2, #1
 800356c:	f7fe fa24 	bl	80019b8 <FillRect>
	        }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bd90      	pop	{r4, r7, pc}
 8003578:	2001cb27 	.word	0x2001cb27

0800357c <E3_MoveX>:

void E3_MoveX(enemy_type3* enemy){
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	if (enemy->delay==0){
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003588:	2b00      	cmp	r3, #0
 800358a:	d167      	bne.n	800365c <E3_MoveX+0xe0>
	int FutureX;
	enemy->delay=1;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	651a      	str	r2, [r3, #80]	@ 0x50
	switch (enemy->Place){
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	2b04      	cmp	r3, #4
 8003598:	d860      	bhi.n	800365c <E3_MoveX+0xe0>
 800359a:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <E3_MoveX+0x24>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b5 	.word	0x080035b5
 80035a4:	080035dd 	.word	0x080035dd
 80035a8:	08003605 	.word	0x08003605
 80035ac:	0800362d 	.word	0x0800362d
 80035b0:	08003655 	.word	0x08003655
		case 0:
			FutureX=enemy->x+40;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3328      	adds	r3, #40	@ 0x28
 80035ba:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d806      	bhi.n	80035d4 <E3_MoveX+0x58>
				enemy->x=enemy->limitwidth_i+35;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80035d2:	e043      	b.n	800365c <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
			break;
 80035da:	e03f      	b.n	800365c <E3_MoveX+0xe0>

		case 1:
			FutureX=enemy->x-20;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3b14      	subs	r3, #20
 80035e2:	60fb      	str	r3, [r7, #12]
			if (FutureX<=enemy->limitwidth_i){
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d306      	bcc.n	80035fc <E3_MoveX+0x80>
				enemy->x=enemy->limitwidth-35;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f2:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80035fa:	e02f      	b.n	800365c <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
			break;
 8003602:	e02b      	b.n	800365c <E3_MoveX+0xe0>
		case 2:
			FutureX=enemy->x+50;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3332      	adds	r3, #50	@ 0x32
 800360a:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	429a      	cmp	r2, r3
 8003614:	d806      	bhi.n	8003624 <E3_MoveX+0xa8>
				enemy->x=enemy->limitwidth_i+50;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8003622:	e01b      	b.n	800365c <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
			break;
 800362a:	e017      	b.n	800365c <E3_MoveX+0xe0>
		case 3:
					FutureX=enemy->x-50;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3b32      	subs	r3, #50	@ 0x32
 8003632:	60fb      	str	r3, [r7, #12]
					if (FutureX<=enemy->limitwidth_i){
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	429a      	cmp	r2, r3
 800363c:	d306      	bcc.n	800364c <E3_MoveX+0xd0>
						enemy->x=enemy->limitwidth-35;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003642:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]

					} else{
						enemy->x=FutureX;
					}
					break;
 800364a:	e007      	b.n	800365c <E3_MoveX+0xe0>
						enemy->x=FutureX;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
					break;
 8003652:	e003      	b.n	800365c <E3_MoveX+0xe0>
		case 4:
			enemy->Place=0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
}
 800365a:	e7ff      	b.n	800365c <E3_MoveX+0xe0>
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <initPlayer>:

/* Funciones Jugador ---------------------------------------------------*/
 void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	@ 0x28
 800366c:	af06      	add	r7, sp, #24
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	601a      	str	r2, [r3, #0]
    player->y = startY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	611a      	str	r2, [r3, #16]
    player->life = life;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036bc:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a27      	ldr	r2, [pc, #156]	@ (8003764 <initPlayer+0xfc>)
 80036c8:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <initPlayer+0x100>)
 80036d4:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80036dc:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+2, player->y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3b07      	subs	r3, #7
 80036f0:	4618      	mov	r0, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	3b0f      	subs	r3, #15
 80036f8:	4619      	mov	r1, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	2300      	movs	r3, #0
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	2305      	movs	r3, #5
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	2306      	movs	r3, #6
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b18      	ldr	r3, [pc, #96]	@ (800376c <initPlayer+0x104>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2317      	movs	r3, #23
 8003710:	2212      	movs	r2, #18
 8003712:	f7fe fa01 	bl	8001b18 <LCD_Sprite>
    //FillRect(player->x , player->y, 1, 1, 0x000000);

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	1e5a      	subs	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	1e5a      	subs	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40e00000 	.word	0x40e00000
 8003768:	40400000 	.word	0x40400000
 800376c:	20007df4 	.word	0x20007df4

08003770 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	@ 0x28
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d851      	bhi.n	8003826 <playerCanMove+0xb6>
 8003782:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <playerCanMove+0x18>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	08003799 	.word	0x08003799
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037d9 	.word	0x080037d9
 8003794:	080037fb 	.word	0x080037fb
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b12      	cmp	r3, #18
 80037b0:	dc34      	bgt.n	800381c <playerCanMove+0xac>
			return 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e094      	b.n	80038e0 <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	441a      	add	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d825      	bhi.n	8003820 <playerCanMove+0xb0>
			return 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e083      	b.n	80038e0 <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d816      	bhi.n	8003824 <playerCanMove+0xb4>
			return 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e072      	b.n	80038e0 <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	1ad2      	subs	r2, r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	429a      	cmp	r2, r3
 8003816:	d306      	bcc.n	8003826 <playerCanMove+0xb6>
			return 0;
 8003818:	2300      	movs	r3, #0
 800381a:	e061      	b.n	80038e0 <playerCanMove+0x170>
		break;
 800381c:	bf00      	nop
 800381e:	e002      	b.n	8003826 <playerCanMove+0xb6>
		break;
 8003820:	bf00      	nop
 8003822:	e000      	b.n	8003826 <playerCanMove+0xb6>
		break;
 8003824:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	2b01      	cmp	r3, #1
 8003838:	d126      	bne.n	8003888 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4828      	ldr	r0, [pc, #160]	@ (80038e8 <playerCanMove+0x178>)
 8003846:	f7fe fd5b 	bl	8002300 <ColisionPlayer_e1>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <playerCanMove+0xe4>
    	return 0;
 8003850:	2300      	movs	r3, #0
 8003852:	e045      	b.n	80038e0 <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4823      	ldr	r0, [pc, #140]	@ (80038ec <playerCanMove+0x17c>)
 8003860:	f7fe fd4e 	bl	8002300 <ColisionPlayer_e1>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <playerCanMove+0xfe>
        	return 0;
 800386a:	2300      	movs	r3, #0
 800386c:	e038      	b.n	80038e0 <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	481d      	ldr	r0, [pc, #116]	@ (80038f0 <playerCanMove+0x180>)
 800387a:	f7fe fd41 	bl	8002300 <ColisionPlayer_e1>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <playerCanMove+0x118>
        	return 0;
 8003884:	2300      	movs	r3, #0
 8003886:	e02b      	b.n	80038e0 <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	2b02      	cmp	r3, #2
 800388e:	d126      	bne.n	80038de <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4816      	ldr	r0, [pc, #88]	@ (80038f4 <playerCanMove+0x184>)
 800389c:	f7fe fd30 	bl	8002300 <ColisionPlayer_e1>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <playerCanMove+0x13a>
       	return 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e01a      	b.n	80038e0 <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4810      	ldr	r0, [pc, #64]	@ (80038f8 <playerCanMove+0x188>)
 80038b6:	f7fe fd23 	bl	8002300 <ColisionPlayer_e1>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <playerCanMove+0x154>
           	return 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e00d      	b.n	80038e0 <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	480b      	ldr	r0, [pc, #44]	@ (80038fc <playerCanMove+0x18c>)
 80038d0:	f7fe fd16 	bl	8002300 <ColisionPlayer_e1>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <playerCanMove+0x16e>
           	return 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	2001c8b4 	.word	0x2001c8b4
 80038ec:	2001c8e8 	.word	0x2001c8e8
 80038f0:	2001c91c 	.word	0x2001c91c
 80038f4:	2001c950 	.word	0x2001c950
 80038f8:	2001c984 	.word	0x2001c984
 80038fc:	2001c9b8 	.word	0x2001c9b8

08003900 <HitboxPlayer>:

void HitboxPlayer(player* player){
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b085      	sub	sp, #20
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	1ad2      	subs	r2, r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	441a      	add	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	1ad2      	subs	r2, r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	441a      	add	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 8003948:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HitboxPlayer+0x168>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d113      	bne.n	8003978 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	1ad0      	subs	r0, r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	1ad1      	subs	r1, r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2400      	movs	r4, #0
 8003972:	9400      	str	r4, [sp, #0]
 8003974:	f7fd fff8 	bl	8001968 <Rect>
        }
    if (DrawHitbox==2){
 8003978:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HitboxPlayer+0x168>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d12b      	bne.n	80039d8 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2301      	movs	r3, #1
 8003990:	2201      	movs	r2, #1
 8003992:	f7fe f811 	bl	80019b8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2301      	movs	r3, #1
 80039a6:	2201      	movs	r2, #1
 80039a8:	f7fe f806 	bl	80019b8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80039b4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2301      	movs	r3, #1
 80039bc:	2201      	movs	r2, #1
 80039be:	f7fd fffb 	bl	80019b8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039ca:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2301      	movs	r3, #1
 80039d2:	2201      	movs	r2, #1
 80039d4:	f7fd fff0 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 80039d8:	4b23      	ldr	r3, [pc, #140]	@ (8003a68 <HitboxPlayer+0x168>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d13f      	bne.n	8003a60 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	1ad0      	subs	r0, r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	1ad1      	subs	r1, r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2400      	movs	r4, #0
 8003a02:	9400      	str	r4, [sp, #0]
 8003a04:	f7fd ffb0 	bl	8001968 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2301      	movs	r3, #1
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f7fd ffcd 	bl	80019b8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f7fd ffc2 	bl	80019b8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003a3c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2301      	movs	r3, #1
 8003a44:	2201      	movs	r2, #1
 8003a46:	f7fd ffb7 	bl	80019b8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a52:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f7fd ffac 	bl	80019b8 <FillRect>

        }
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd90      	pop	{r4, r7, pc}
 8003a68:	2001cb27 	.word	0x2001cb27

08003a6c <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 80d0 	bne.w	8003c20 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	f200 80cb 	bhi.w	8003c20 <PlayerHit+0x1b4>
 8003a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <PlayerHit+0x24>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003b5f 	.word	0x08003b5f
 8003a98:	08003b05 	.word	0x08003b05
 8003a9c:	08003bb9 	.word	0x08003bb9
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	3b0f      	subs	r3, #15
 8003aa6:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f0c0 80af 	bcc.w	8003c12 <PlayerHit+0x1a6>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	f200 80a9 	bhi.w	8003c12 <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	3b05      	subs	r3, #5
 8003aca:	429a      	cmp	r2, r3
 8003acc:	f0c0 80a1 	bcc.w	8003c12 <PlayerHit+0x1a6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	3305      	adds	r3, #5
 8003ada:	429a      	cmp	r2, r3
 8003adc:	f200 8099 	bhi.w	8003c12 <PlayerHit+0x1a6>
						enemy->health -= 1;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 808f 	bne.w	8003c12 <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 8003b02:	e086      	b.n	8003c12 <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	330f      	adds	r3, #15
 8003b0a:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d37f      	bcc.n	8003c16 <PlayerHit+0x1aa>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6a1a      	ldr	r2, [r3, #32]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d87a      	bhi.n	8003c16 <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	3b05      	subs	r3, #5
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d373      	bcc.n	8003c16 <PlayerHit+0x1aa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	3305      	adds	r3, #5
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d86c      	bhi.n	8003c16 <PlayerHit+0x1aa>
						enemy->health -= 1;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	1e5a      	subs	r2, r3, #1
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d163      	bne.n	8003c16 <PlayerHit+0x1aa>
							enemy->isAlive=0;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003b5c:	e05b      	b.n	8003c16 <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d354      	bcc.n	8003c1a <PlayerHit+0x1ae>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d84f      	bhi.n	8003c1a <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	3b0f      	subs	r3, #15
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d348      	bcc.n	8003c1a <PlayerHit+0x1ae>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	3314      	adds	r3, #20
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d841      	bhi.n	8003c1a <PlayerHit+0x1ae>
						enemy->health -= 1;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d138      	bne.n	8003c1a <PlayerHit+0x1ae>
							enemy->isAlive=0;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003bb6:	e030      	b.n	8003c1a <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3b14      	subs	r3, #20
 8003bbe:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d329      	bcc.n	8003c1e <PlayerHit+0x1b2>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d824      	bhi.n	8003c1e <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	3b0f      	subs	r3, #15
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d31d      	bcc.n	8003c1e <PlayerHit+0x1b2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	3314      	adds	r3, #20
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d816      	bhi.n	8003c1e <PlayerHit+0x1b2>
									enemy->health -= 1;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <PlayerHit+0x1b2>
										enemy->isAlive=0;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8003c10:	e005      	b.n	8003c1e <PlayerHit+0x1b2>
			break;
 8003c12:	bf00      	nop
 8003c14:	e004      	b.n	8003c20 <PlayerHit+0x1b4>
				break;
 8003c16:	bf00      	nop
 8003c18:	e002      	b.n	8003c20 <PlayerHit+0x1b4>
				break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <PlayerHit+0x1b4>
							break;
 8003c1e:	bf00      	nop
						}
		}
	}
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <PlayerAnimation>:

void PlayerAnimation(player* player){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af06      	add	r7, sp, #24
 8003c32:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d16f      	bne.n	8003d1c <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d117      	bne.n	8003c74 <PlayerAnimation+0x48>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3b08      	subs	r3, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	3b0d      	subs	r3, #13
 8003c52:	4619      	mov	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9304      	str	r3, [sp, #16]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9303      	str	r3, [sp, #12]
 8003c62:	9202      	str	r2, [sp, #8]
 8003c64:	230a      	movs	r3, #10
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	4b2e      	ldr	r3, [pc, #184]	@ (8003d24 <PlayerAnimation+0xf8>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	231a      	movs	r3, #26
 8003c6e:	2212      	movs	r2, #18
 8003c70:	f7fd ff52 	bl	8001b18 <LCD_Sprite>
		}
		if (player->direction==1){
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d117      	bne.n	8003cac <PlayerAnimation+0x80>
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3b0a      	subs	r3, #10
 8003c82:	4618      	mov	r0, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	3b0b      	subs	r3, #11
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c90:	461a      	mov	r2, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	2301      	movs	r3, #1
 8003c98:	9303      	str	r3, [sp, #12]
 8003c9a:	9202      	str	r2, [sp, #8]
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <PlayerAnimation+0xfc>)
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2317      	movs	r3, #23
 8003ca6:	2216      	movs	r2, #22
 8003ca8:	f7fd ff36 	bl	8001b18 <LCD_Sprite>
		}
		if (player->direction==2){
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d117      	bne.n	8003ce4 <PlayerAnimation+0xb8>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3b08      	subs	r3, #8
 8003cba:	4618      	mov	r0, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	3b0b      	subs	r3, #11
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	9202      	str	r2, [sp, #8]
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <PlayerAnimation+0x100>)
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2318      	movs	r3, #24
 8003cde:	2212      	movs	r2, #18
 8003ce0:	f7fd ff1a 	bl	8001b18 <LCD_Sprite>
			}
		if (player->direction==3){
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d117      	bne.n	8003d1c <PlayerAnimation+0xf0>

			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3b0a      	subs	r3, #10
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	3b0b      	subs	r3, #11
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	230a      	movs	r3, #10
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <PlayerAnimation+0xfc>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2317      	movs	r3, #23
 8003d16:	2216      	movs	r2, #22
 8003d18:	f7fd fefe 	bl	8001b18 <LCD_Sprite>
			}
	}
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20012428 	.word	0x20012428
 8003d28:	2000fca0 	.word	0x2000fca0
 8003d2c:	200148b8 	.word	0x200148b8

08003d30 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	@ 0x28
 8003d34:	af06      	add	r7, sp, #24
 8003d36:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d42:	ee17 3a90 	vmov	r3, s15
 8003d46:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 8082 	bne.w	8003e56 <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	dc7b      	bgt.n	8003e50 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d115      	bne.n	8003d8c <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3b08      	subs	r3, #8
 8003d66:	4618      	mov	r0, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	3b0b      	subs	r3, #11
 8003d6e:	4619      	mov	r1, r3
 8003d70:	2300      	movs	r3, #0
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9303      	str	r3, [sp, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <PlayerAttackAnimation+0x138>)
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2316      	movs	r3, #22
 8003d86:	2212      	movs	r2, #18
 8003d88:	f7fd fec6 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==1){
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d115      	bne.n	8003dc0 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);			}
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3b09      	subs	r3, #9
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	3b0b      	subs	r3, #11
 8003da2:	4619      	mov	r1, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	2301      	movs	r3, #1
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	2306      	movs	r3, #6
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <PlayerAttackAnimation+0x13c>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2316      	movs	r3, #22
 8003dba:	2214      	movs	r2, #20
 8003dbc:	f7fd feac 	bl	8001b18 <LCD_Sprite>
			if (player->direction==2){
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d115      	bne.n	8003df4 <PlayerAttackAnimation+0xc4>
				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3b08      	subs	r3, #8
 8003dce:	4618      	mov	r0, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	3b0b      	subs	r3, #11
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9303      	str	r3, [sp, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	9302      	str	r3, [sp, #8]
 8003de4:	2306      	movs	r3, #6
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	4b21      	ldr	r3, [pc, #132]	@ (8003e70 <PlayerAttackAnimation+0x140>)
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2317      	movs	r3, #23
 8003dee:	2212      	movs	r2, #18
 8003df0:	f7fd fe92 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==3){
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d115      	bne.n	8003e28 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3b09      	subs	r3, #9
 8003e02:	4618      	mov	r0, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	3b0b      	subs	r3, #11
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9304      	str	r3, [sp, #16]
 8003e10:	2300      	movs	r3, #0
 8003e12:	9303      	str	r3, [sp, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	9302      	str	r3, [sp, #8]
 8003e18:	2306      	movs	r3, #6
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <PlayerAttackAnimation+0x13c>)
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2316      	movs	r3, #22
 8003e22:	2214      	movs	r2, #20
 8003e24:	f7fd fe78 	bl	8001b18 <LCD_Sprite>
				}
			player->animationAttack+=0.2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc fbab 	bl	8000588 <__aeabi_f2d>
 8003e32:	a30b      	add	r3, pc, #44	@ (adr r3, 8003e60 <PlayerAttackAnimation+0x130>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc fa48 	bl	80002cc <__adddf3>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	f7fc fbf8 	bl	8000638 <__aeabi_d2f>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 8003e4e:	e002      	b.n	8003e56 <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	9999999a 	.word	0x9999999a
 8003e64:	3fc99999 	.word	0x3fc99999
 8003e68:	2000a5fc 	.word	0x2000a5fc
 8003e6c:	2000915c 	.word	0x2000915c
 8003e70:	20007df4 	.word	0x20007df4

08003e74 <PlayerAttackSound>:

void PlayerAttackSound(player* player){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	int variableAnimationAttackS=player->animationAttack;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e86:	ee17 3a90 	vmov	r3, s15
 8003e8a:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d145      	bne.n	8003f20 <PlayerAttackSound+0xac>
		if (variableAnimationAttackS<6){
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b05      	cmp	r3, #5
 8003e98:	dc42      	bgt.n	8003f20 <PlayerAttackSound+0xac>
			switch (variableAnimationAttackS){
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d83f      	bhi.n	8003f20 <PlayerAttackSound+0xac>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <PlayerAttackSound+0x34>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ec1 	.word	0x08003ec1
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ef1 	.word	0x08003ef1
 8003eb8:	08003f01 	.word	0x08003f01
 8003ebc:	08003f11 	.word	0x08003f11
			case 0:
		        setPWM_Frequency(1000); // Frecuencia de 1 kHz
 8003ec0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ec4:	f7fd ff70 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003ec8:	2032      	movs	r0, #50	@ 0x32
 8003eca:	f7fd ff9b 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8003ece:	e027      	b.n	8003f20 <PlayerAttackSound+0xac>
			case 1:
		        setPWM_Frequency(2000); // Frecuencia de 1 kHz
 8003ed0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003ed4:	f7fd ff68 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003ed8:	2032      	movs	r0, #50	@ 0x32
 8003eda:	f7fd ff93 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8003ede:	e01f      	b.n	8003f20 <PlayerAttackSound+0xac>
			case 2:
		        setPWM_Frequency(3000); // Frecuencia de 1 kHz
 8003ee0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003ee4:	f7fd ff60 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003ee8:	2032      	movs	r0, #50	@ 0x32
 8003eea:	f7fd ff8b 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8003eee:	e017      	b.n	8003f20 <PlayerAttackSound+0xac>
			case 3:
		        setPWM_Frequency(4000); // Frecuencia de 1 kHz
 8003ef0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003ef4:	f7fd ff58 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003ef8:	2032      	movs	r0, #50	@ 0x32
 8003efa:	f7fd ff83 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8003efe:	e00f      	b.n	8003f20 <PlayerAttackSound+0xac>
			case 4:
		        setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8003f00:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003f04:	f7fd ff50 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003f08:	2032      	movs	r0, #50	@ 0x32
 8003f0a:	f7fd ff7b 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8003f0e:	e007      	b.n	8003f20 <PlayerAttackSound+0xac>
			case 5:
		        setPWM_Frequency(6000); // Frecuencia de 1 kHz
 8003f10:	f241 7070 	movw	r0, #6000	@ 0x1770
 8003f14:	f7fd ff48 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(0);   // Duty cycle al 50%
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7fd ff73 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8003f1e:	bf00      	nop
			}

			}
	}
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af06      	add	r7, sp, #24
 8003f2e:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3a:	ee17 3a90 	vmov	r3, s15
 8003f3e:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	f040 8082 	bne.w	800404e <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	dc7b      	bgt.n	8004048 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d115      	bne.n	8003f84 <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b08      	subs	r3, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	3b0a      	subs	r3, #10
 8003f66:	4619      	mov	r1, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	9302      	str	r3, [sp, #8]
 8003f74:	2303      	movs	r3, #3
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	4b39      	ldr	r3, [pc, #228]	@ (8004060 <PlayerDamageAnimation+0x138>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2314      	movs	r3, #20
 8003f7e:	2212      	movs	r2, #18
 8003f80:	f7fd fdca 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==1){
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d115      	bne.n	8003fb8 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3b09      	subs	r3, #9
 8003f92:	4618      	mov	r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3b0a      	subs	r3, #10
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9304      	str	r3, [sp, #16]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	9303      	str	r3, [sp, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2303      	movs	r3, #3
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	4b2d      	ldr	r3, [pc, #180]	@ (8004064 <PlayerDamageAnimation+0x13c>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2315      	movs	r3, #21
 8003fb2:	2214      	movs	r2, #20
 8003fb4:	f7fd fdb0 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==2){
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d115      	bne.n	8003fec <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3b09      	subs	r3, #9
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	3b0a      	subs	r3, #10
 8003fce:	4619      	mov	r1, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	2303      	movs	r3, #3
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	4b21      	ldr	r3, [pc, #132]	@ (8004068 <PlayerDamageAnimation+0x140>)
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2315      	movs	r3, #21
 8003fe6:	2214      	movs	r2, #20
 8003fe8:	f7fd fd96 	bl	8001b18 <LCD_Sprite>
					}
			if (player->direction==3){
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d115      	bne.n	8004020 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3b09      	subs	r3, #9
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	3b0a      	subs	r3, #10
 8004002:	4619      	mov	r1, r3
 8004004:	2300      	movs	r3, #0
 8004006:	9304      	str	r3, [sp, #16]
 8004008:	2300      	movs	r3, #0
 800400a:	9303      	str	r3, [sp, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	2303      	movs	r3, #3
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	4b13      	ldr	r3, [pc, #76]	@ (8004064 <PlayerDamageAnimation+0x13c>)
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2315      	movs	r3, #21
 800401a:	2214      	movs	r2, #20
 800401c:	f7fd fd7c 	bl	8001b18 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc faaf 	bl	8000588 <__aeabi_f2d>
 800402a:	a30b      	add	r3, pc, #44	@ (adr r3, 8004058 <PlayerDamageAnimation+0x130>)
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f7fc f94c 	bl	80002cc <__adddf3>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fafc 	bl	8000638 <__aeabi_d2f>
 8004040:	4602      	mov	r2, r0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 8004046:	e002      	b.n	800404e <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	9999999a 	.word	0x9999999a
 800405c:	3fc99999 	.word	0x3fc99999
 8004060:	20004fd4 	.word	0x20004fd4
 8004064:	20005844 	.word	0x20005844
 8004068:	2000621c 	.word	0x2000621c

0800406c <PlayerDamageSound>:

void PlayerDamageSound(player* player){
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	int variableAnimationDamageS=player->animationDamage;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800407a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800407e:	ee17 3a90 	vmov	r3, s15
 8004082:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d127      	bne.n	80040dc <PlayerDamageSound+0x70>
		if (variableAnimationDamageS<3){
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b02      	cmp	r3, #2
 8004090:	dc24      	bgt.n	80040dc <PlayerDamageSound+0x70>
			switch (variableAnimationDamageS){
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d019      	beq.n	80040cc <PlayerDamageSound+0x60>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b02      	cmp	r3, #2
 800409c:	dc1e      	bgt.n	80040dc <PlayerDamageSound+0x70>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <PlayerDamageSound+0x40>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d008      	beq.n	80040bc <PlayerDamageSound+0x50>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
				break;
			}
			}
		}
}
 80040aa:	e017      	b.n	80040dc <PlayerDamageSound+0x70>
				setPWM_Frequency(5000); // Frecuencia de 1 kHz
 80040ac:	f241 3088 	movw	r0, #5000	@ 0x1388
 80040b0:	f7fd fe7a 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 80040b4:	2032      	movs	r0, #50	@ 0x32
 80040b6:	f7fd fea5 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80040ba:	e00f      	b.n	80040dc <PlayerDamageSound+0x70>
				setPWM_Frequency(8000); // Frecuencia de 1 kHz
 80040bc:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80040c0:	f7fd fe72 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 80040c4:	2032      	movs	r0, #50	@ 0x32
 80040c6:	f7fd fe9d 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80040ca:	e007      	b.n	80040dc <PlayerDamageSound+0x70>
				setPWM_Frequency(1000); // Frecuencia de 1 kHz
 80040cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80040d0:	f7fd fe6a 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
 80040d4:	2000      	movs	r0, #0
 80040d6:	f7fd fe95 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80040da:	bf00      	nop
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	0000      	movs	r0, r0
	...

080040e8 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b08b      	sub	sp, #44	@ 0x2c
 80040ec:	af06      	add	r7, sp, #24
 80040ee:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80040f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fa:	ee17 3a90 	vmov	r3, s15
 80040fe:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d143      	bne.n	8004190 <PlayerDieAnimation+0xa8>
		if (variableAnimationDie<4){
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b03      	cmp	r3, #3
 800410c:	dc40      	bgt.n	8004190 <PlayerDieAnimation+0xa8>
			FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2), player->width+1, player->height+1, 0xFE8B);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	1c58      	adds	r0, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	1ad1      	subs	r1, r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004138:	9400      	str	r4, [sp, #0]
 800413a:	f7fd fc3d 	bl	80019b8 <FillRect>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3b0b      	subs	r3, #11
 8004144:	4618      	mov	r0, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	3b0c      	subs	r3, #12
 800414c:	4619      	mov	r1, r3
 800414e:	2300      	movs	r3, #0
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	2300      	movs	r3, #0
 8004154:	9303      	str	r3, [sp, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	2304      	movs	r3, #4
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <PlayerDieAnimation+0xb8>)
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2318      	movs	r3, #24
 8004164:	2218      	movs	r2, #24
 8004166:	f7fd fcd7 	bl	8001b18 <LCD_Sprite>
			player->animationDie+=0.2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc fa0a 	bl	8000588 <__aeabi_f2d>
 8004174:	a308      	add	r3, pc, #32	@ (adr r3, 8004198 <PlayerDieAnimation+0xb0>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f8a7 	bl	80002cc <__adddf3>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f7fc fa57 	bl	8000638 <__aeabi_d2f>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bd90      	pop	{r4, r7, pc}
 8004198:	9999999a 	.word	0x9999999a
 800419c:	3fc99999 	.word	0x3fc99999
 80041a0:	20006bf4 	.word	0x20006bf4

080041a4 <PlayerDieSound>:

void PlayerDieSound(player* player){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	int variableAnimationDieS=player->animationDie;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80041b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041b6:	ee17 3a90 	vmov	r3, s15
 80041ba:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d131      	bne.n	8004228 <PlayerDieSound+0x84>
		if (variableAnimationDieS<4){
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	dc2e      	bgt.n	8004228 <PlayerDieSound+0x84>
			switch (variableAnimationDieS){
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d82b      	bhi.n	8004228 <PlayerDieSound+0x84>
 80041d0:	a201      	add	r2, pc, #4	@ (adr r2, 80041d8 <PlayerDieSound+0x34>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041f9 	.word	0x080041f9
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004219 	.word	0x08004219
			case 0:
				setPWM_Frequency(10000); // Frecuencia de 1 kHz
 80041e8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80041ec:	f7fd fddc 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 80041f0:	2032      	movs	r0, #50	@ 0x32
 80041f2:	f7fd fe07 	bl	8001e04 <setPWM_DutyCycle>
				break;
 80041f6:	e017      	b.n	8004228 <PlayerDieSound+0x84>
			case 1:
				setPWM_Frequency(5000); // Frecuencia de 1 kHz
 80041f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80041fc:	f7fd fdd4 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004200:	2032      	movs	r0, #50	@ 0x32
 8004202:	f7fd fdff 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004206:	e00f      	b.n	8004228 <PlayerDieSound+0x84>
			case 2:
				setPWM_Frequency(10000); // Frecuencia de 1 kHz
 8004208:	f242 7010 	movw	r0, #10000	@ 0x2710
 800420c:	f7fd fdcc 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004210:	2032      	movs	r0, #50	@ 0x32
 8004212:	f7fd fdf7 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004216:	e007      	b.n	8004228 <PlayerDieSound+0x84>
			case 3:
				setPWM_Frequency(1000); // Frecuencia de 1 kHz
 8004218:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800421c:	f7fd fdc4 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
 8004220:	2000      	movs	r0, #0
 8004222:	f7fd fdef 	bl	8001e04 <setPWM_DutyCycle>
				break;
 8004226:	bf00      	nop

			}
			}
		}
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <initLevelSolo>:

void initLevelSolo(void){
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b087      	sub	sp, #28
 8004234:	af06      	add	r7, sp, #24
	FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004236:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <initLevelSolo+0x13c>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b4c      	ldr	r3, [pc, #304]	@ (800436c <initLevelSolo+0x13c>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	1c58      	adds	r0, r3, #1
 8004244:	4b49      	ldr	r3, [pc, #292]	@ (800436c <initLevelSolo+0x13c>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4b48      	ldr	r3, [pc, #288]	@ (800436c <initLevelSolo+0x13c>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	4b46      	ldr	r3, [pc, #280]	@ (800436c <initLevelSolo+0x13c>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	4b44      	ldr	r3, [pc, #272]	@ (800436c <initLevelSolo+0x13c>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	3301      	adds	r3, #1
 800425e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004262:	9400      	str	r4, [sp, #0]
 8004264:	f7fd fba8 	bl	80019b8 <FillRect>
	if (IniciarLevel==1){
 8004268:	4b41      	ldr	r3, [pc, #260]	@ (8004370 <initLevelSolo+0x140>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d178      	bne.n	8004362 <initLevelSolo+0x132>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004270:	2312      	movs	r3, #18
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	23dc      	movs	r3, #220	@ 0xdc
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800427c:	9303      	str	r3, [sp, #12]
 800427e:	2303      	movs	r3, #3
 8004280:	9302      	str	r3, [sp, #8]
 8004282:	2305      	movs	r3, #5
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	231e      	movs	r3, #30
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2316      	movs	r3, #22
 800428c:	22c8      	movs	r2, #200	@ 0xc8
 800428e:	21a0      	movs	r1, #160	@ 0xa0
 8004290:	4836      	ldr	r0, [pc, #216]	@ (800436c <initLevelSolo+0x13c>)
 8004292:	f7ff f9e9 	bl	8003668 <initPlayer>
		initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004296:	2312      	movs	r3, #18
 8004298:	9305      	str	r3, [sp, #20]
 800429a:	23dc      	movs	r3, #220	@ 0xdc
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	2303      	movs	r3, #3
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	2305      	movs	r3, #5
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	231e      	movs	r3, #30
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2316      	movs	r3, #22
 80042b2:	22c8      	movs	r2, #200	@ 0xc8
 80042b4:	21a0      	movs	r1, #160	@ 0xa0
 80042b6:	482f      	ldr	r0, [pc, #188]	@ (8004374 <initLevelSolo+0x144>)
 80042b8:	f7ff f9d6 	bl	8003668 <initPlayer>
		p1.PlayerNum=1;
 80042bc:	4b2b      	ldr	r3, [pc, #172]	@ (800436c <initLevelSolo+0x13c>)
 80042be:	2201      	movs	r2, #1
 80042c0:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 80042c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004374 <initLevelSolo+0x144>)
 80042c4:	2202      	movs	r2, #2
 80042c6:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.isAlive=0;
 80042c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004374 <initLevelSolo+0x144>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]

		if (nivelActual1==NIVEL1){
 80042ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <initLevelSolo+0x148>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11e      	bne.n	8004316 <initLevelSolo+0xe6>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 80042d8:	2303      	movs	r3, #3
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	2313      	movs	r3, #19
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2310      	movs	r3, #16
 80042e2:	2250      	movs	r2, #80	@ 0x50
 80042e4:	2128      	movs	r1, #40	@ 0x28
 80042e6:	4825      	ldr	r0, [pc, #148]	@ (800437c <initLevelSolo+0x14c>)
 80042e8:	f7fd ff18 	bl	800211c <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 80042ec:	2303      	movs	r3, #3
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	2313      	movs	r3, #19
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2310      	movs	r3, #16
 80042f6:	2250      	movs	r2, #80	@ 0x50
 80042f8:	21a0      	movs	r1, #160	@ 0xa0
 80042fa:	4821      	ldr	r0, [pc, #132]	@ (8004380 <initLevelSolo+0x150>)
 80042fc:	f7fd ff0e 	bl	800211c <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8004300:	2303      	movs	r3, #3
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	2313      	movs	r3, #19
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2310      	movs	r3, #16
 800430a:	2250      	movs	r2, #80	@ 0x50
 800430c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004310:	481c      	ldr	r0, [pc, #112]	@ (8004384 <initLevelSolo+0x154>)
 8004312:	f7fd ff03 	bl	800211c <initEnemy1>

		  if (nivelActual1==NIVEL2){
 8004316:	4b18      	ldr	r3, [pc, #96]	@ (8004378 <initLevelSolo+0x148>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10c      	bne.n	800433a <initLevelSolo+0x10a>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 8004320:	2303      	movs	r3, #3
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	2314      	movs	r3, #20
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2310      	movs	r3, #16
 800432a:	2250      	movs	r2, #80	@ 0x50
 800432c:	21a0      	movs	r1, #160	@ 0xa0
 800432e:	4816      	ldr	r0, [pc, #88]	@ (8004388 <initLevelSolo+0x158>)
 8004330:	f7fe fb18 	bl	8002964 <initEnemy2>
			  IniciarLevel=0;
 8004334:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <initLevelSolo+0x140>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <initLevelSolo+0x148>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d10e      	bne.n	8004362 <initLevelSolo+0x132>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 8004344:	4b09      	ldr	r3, [pc, #36]	@ (800436c <initLevelSolo+0x13c>)
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	230f      	movs	r3, #15
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	230f      	movs	r3, #15
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	230f      	movs	r3, #15
 8004352:	221e      	movs	r2, #30
 8004354:	2150      	movs	r1, #80	@ 0x50
 8004356:	480d      	ldr	r0, [pc, #52]	@ (800438c <initLevelSolo+0x15c>)
 8004358:	f7fe fe4c 	bl	8002ff4 <initEnemy3>
			  IniciarLevel=0;
 800435c:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <initLevelSolo+0x140>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
		  	  }
		  }
}
 8004362:	bf00      	nop
 8004364:	3704      	adds	r7, #4
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	bf00      	nop
 800436c:	2001c7cc 	.word	0x2001c7cc
 8004370:	2001cb2c 	.word	0x2001cb2c
 8004374:	2001c840 	.word	0x2001c840
 8004378:	2001cb29 	.word	0x2001cb29
 800437c:	2001c8b4 	.word	0x2001c8b4
 8004380:	2001c8e8 	.word	0x2001c8e8
 8004384:	2001c91c 	.word	0x2001c91c
 8004388:	2001c9ec 	.word	0x2001c9ec
 800438c:	2001ca74 	.word	0x2001ca74

08004390 <initLevelP1>:

void initLevelP1(void){
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b087      	sub	sp, #28
 8004394:	af06      	add	r7, sp, #24
	FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <initLevelP1+0xf4>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b3a      	ldr	r3, [pc, #232]	@ (8004484 <initLevelP1+0xf4>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	1c58      	adds	r0, r3, #1
 80043a4:	4b37      	ldr	r3, [pc, #220]	@ (8004484 <initLevelP1+0xf4>)
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <initLevelP1+0xf4>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	1c59      	adds	r1, r3, #1
 80043b2:	4b34      	ldr	r3, [pc, #208]	@ (8004484 <initLevelP1+0xf4>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	4b32      	ldr	r3, [pc, #200]	@ (8004484 <initLevelP1+0xf4>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80043c2:	9400      	str	r4, [sp, #0]
 80043c4:	f7fd faf8 	bl	80019b8 <FillRect>
	if (IniciarLevel==1){
 80043c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004488 <initLevelP1+0xf8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d155      	bne.n	800447c <initLevelP1+0xec>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 80043d0:	2300      	movs	r3, #0
 80043d2:	22f0      	movs	r2, #240	@ 0xf0
 80043d4:	2100      	movs	r1, #0
 80043d6:	20a0      	movs	r0, #160	@ 0xa0
 80043d8:	f7fd fa86 	bl	80018e8 <V_line>
		initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 80043dc:	2312      	movs	r3, #18
 80043de:	9305      	str	r3, [sp, #20]
 80043e0:	23dc      	movs	r3, #220	@ 0xdc
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	23a0      	movs	r3, #160	@ 0xa0
 80043e6:	9303      	str	r3, [sp, #12]
 80043e8:	2303      	movs	r3, #3
 80043ea:	9302      	str	r3, [sp, #8]
 80043ec:	2305      	movs	r3, #5
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	231e      	movs	r3, #30
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2316      	movs	r3, #22
 80043f6:	22c8      	movs	r2, #200	@ 0xc8
 80043f8:	2150      	movs	r1, #80	@ 0x50
 80043fa:	4822      	ldr	r0, [pc, #136]	@ (8004484 <initLevelP1+0xf4>)
 80043fc:	f7ff f934 	bl	8003668 <initPlayer>
		p1.PlayerNum=1;
 8004400:	4b20      	ldr	r3, [pc, #128]	@ (8004484 <initLevelP1+0xf4>)
 8004402:	2201      	movs	r2, #1
 8004404:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 8004406:	4b21      	ldr	r3, [pc, #132]	@ (800448c <initLevelP1+0xfc>)
 8004408:	2202      	movs	r2, #2
 800440a:	671a      	str	r2, [r3, #112]	@ 0x70

		if (nivelActual1==NIVEL1){
 800440c:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <initLevelP1+0x100>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <initLevelP1+0xa0>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 80, 80, 16, 19, 3);
 8004416:	2303      	movs	r3, #3
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	2313      	movs	r3, #19
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	2310      	movs	r3, #16
 8004420:	2250      	movs	r2, #80	@ 0x50
 8004422:	2150      	movs	r1, #80	@ 0x50
 8004424:	481b      	ldr	r0, [pc, #108]	@ (8004494 <initLevelP1+0x104>)
 8004426:	f7fd fe79 	bl	800211c <initEnemy1>
			IniciarLevel=0;}
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <initLevelP1+0xf8>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

		  if (nivelActual1==NIVEL2){
 8004430:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <initLevelP1+0x100>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10c      	bne.n	8004454 <initLevelP1+0xc4>
			  initEnemy2(&e2_1, 80, 80, 16, 20, 3);
 800443a:	2303      	movs	r3, #3
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	2314      	movs	r3, #20
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2310      	movs	r3, #16
 8004444:	2250      	movs	r2, #80	@ 0x50
 8004446:	2150      	movs	r1, #80	@ 0x50
 8004448:	4813      	ldr	r0, [pc, #76]	@ (8004498 <initLevelP1+0x108>)
 800444a:	f7fe fa8b 	bl	8002964 <initEnemy2>
			  IniciarLevel=0;
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <initLevelP1+0xf8>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 8004454:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <initLevelP1+0x100>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d10e      	bne.n	800447c <initLevelP1+0xec>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 800445e:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <initLevelP1+0xf4>)
 8004460:	9302      	str	r3, [sp, #8]
 8004462:	230f      	movs	r3, #15
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	230f      	movs	r3, #15
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	230f      	movs	r3, #15
 800446c:	221e      	movs	r2, #30
 800446e:	2150      	movs	r1, #80	@ 0x50
 8004470:	480a      	ldr	r0, [pc, #40]	@ (800449c <initLevelP1+0x10c>)
 8004472:	f7fe fdbf 	bl	8002ff4 <initEnemy3>
			  IniciarLevel=0;
 8004476:	4b04      	ldr	r3, [pc, #16]	@ (8004488 <initLevelP1+0xf8>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
		  	  }
		  }

}
 800447c:	bf00      	nop
 800447e:	3704      	adds	r7, #4
 8004480:	46bd      	mov	sp, r7
 8004482:	bd90      	pop	{r4, r7, pc}
 8004484:	2001c7cc 	.word	0x2001c7cc
 8004488:	2001cb2c 	.word	0x2001cb2c
 800448c:	2001c840 	.word	0x2001c840
 8004490:	2001cb29 	.word	0x2001cb29
 8004494:	2001c8b4 	.word	0x2001c8b4
 8004498:	2001c9ec 	.word	0x2001c9ec
 800449c:	2001ca74 	.word	0x2001ca74

080044a0 <initLevelP2>:

void initLevelP2(void){
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af06      	add	r7, sp, #24
	FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80044a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004598 <initLevelP2+0xf8>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <initLevelP2+0xf8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	1c58      	adds	r0, r3, #1
 80044b4:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <initLevelP2+0xf8>)
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	4b37      	ldr	r3, [pc, #220]	@ (8004598 <initLevelP2+0xf8>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	1c59      	adds	r1, r3, #1
 80044c2:	4b35      	ldr	r3, [pc, #212]	@ (8004598 <initLevelP2+0xf8>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <initLevelP2+0xf8>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80044d2:	9400      	str	r4, [sp, #0]
 80044d4:	f7fd fa70 	bl	80019b8 <FillRect>
	if (IniciarLevel2==1){
 80044d8:	4b30      	ldr	r3, [pc, #192]	@ (800459c <initLevelP2+0xfc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d156      	bne.n	800458e <initLevelP2+0xee>
		//Inicializar Jugador 1
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 80044e0:	2300      	movs	r3, #0
 80044e2:	22f0      	movs	r2, #240	@ 0xf0
 80044e4:	2100      	movs	r1, #0
 80044e6:	20a0      	movs	r0, #160	@ 0xa0
 80044e8:	f7fd f9fe 	bl	80018e8 <V_line>
		initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 80044ec:	23a0      	movs	r3, #160	@ 0xa0
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	23dc      	movs	r3, #220	@ 0xdc
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80044f8:	9303      	str	r3, [sp, #12]
 80044fa:	2303      	movs	r3, #3
 80044fc:	9302      	str	r3, [sp, #8]
 80044fe:	2305      	movs	r3, #5
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	231e      	movs	r3, #30
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2316      	movs	r3, #22
 8004508:	22c8      	movs	r2, #200	@ 0xc8
 800450a:	21f0      	movs	r1, #240	@ 0xf0
 800450c:	4822      	ldr	r0, [pc, #136]	@ (8004598 <initLevelP2+0xf8>)
 800450e:	f7ff f8ab 	bl	8003668 <initPlayer>
		p1.PlayerNum=1;
 8004512:	4b23      	ldr	r3, [pc, #140]	@ (80045a0 <initLevelP2+0x100>)
 8004514:	2201      	movs	r2, #1
 8004516:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 8004518:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <initLevelP2+0xf8>)
 800451a:	2202      	movs	r2, #2
 800451c:	671a      	str	r2, [r3, #112]	@ 0x70

		 if (nivelActual2==NIVEL1){
 800451e:	4b21      	ldr	r3, [pc, #132]	@ (80045a4 <initLevelP2+0x104>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10c      	bne.n	8004542 <initLevelP2+0xa2>
			//Inicializar enemigo 1
			initEnemy1(&e1_4, 240, 120, 16, 19, 3);
 8004528:	2303      	movs	r3, #3
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	2313      	movs	r3, #19
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2310      	movs	r3, #16
 8004532:	2278      	movs	r2, #120	@ 0x78
 8004534:	21f0      	movs	r1, #240	@ 0xf0
 8004536:	481c      	ldr	r0, [pc, #112]	@ (80045a8 <initLevelP2+0x108>)
 8004538:	f7fd fdf0 	bl	800211c <initEnemy1>
			IniciarLevel2=0;
 800453c:	4b17      	ldr	r3, [pc, #92]	@ (800459c <initLevelP2+0xfc>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
			}

	     if (nivelActual2==NIVEL2){
 8004542:	4b18      	ldr	r3, [pc, #96]	@ (80045a4 <initLevelP2+0x104>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10c      	bne.n	8004566 <initLevelP2+0xc6>
			  initEnemy2(&e2_2, 240, 80, 16, 20, 3);
 800454c:	2303      	movs	r3, #3
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2314      	movs	r3, #20
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2310      	movs	r3, #16
 8004556:	2250      	movs	r2, #80	@ 0x50
 8004558:	21f0      	movs	r1, #240	@ 0xf0
 800455a:	4814      	ldr	r0, [pc, #80]	@ (80045ac <initLevelP2+0x10c>)
 800455c:	f7fe fa02 	bl	8002964 <initEnemy2>
			IniciarLevel2=0;
 8004560:	4b0e      	ldr	r3, [pc, #56]	@ (800459c <initLevelP2+0xfc>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
		  }

	     if (nivelActual2==NIVEL3){
 8004566:	4b0f      	ldr	r3, [pc, #60]	@ (80045a4 <initLevelP2+0x104>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d10e      	bne.n	800458e <initLevelP2+0xee>
		  initEnemy3(&e3_2, 240, 30, 15, 15, 15, &p2);
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <initLevelP2+0xf8>)
 8004572:	9302      	str	r3, [sp, #8]
 8004574:	230f      	movs	r3, #15
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	230f      	movs	r3, #15
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	230f      	movs	r3, #15
 800457e:	221e      	movs	r2, #30
 8004580:	21f0      	movs	r1, #240	@ 0xf0
 8004582:	480b      	ldr	r0, [pc, #44]	@ (80045b0 <initLevelP2+0x110>)
 8004584:	f7fe fd36 	bl	8002ff4 <initEnemy3>
		  IniciarLevel=0;
 8004588:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <initLevelP2+0x114>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
		  }
	  }

}
 800458e:	bf00      	nop
 8004590:	3704      	adds	r7, #4
 8004592:	46bd      	mov	sp, r7
 8004594:	bd90      	pop	{r4, r7, pc}
 8004596:	bf00      	nop
 8004598:	2001c840 	.word	0x2001c840
 800459c:	2001cb30 	.word	0x2001cb30
 80045a0:	2001c7cc 	.word	0x2001c7cc
 80045a4:	2001cb2a 	.word	0x2001cb2a
 80045a8:	2001c950 	.word	0x2001c950
 80045ac:	2001ca30 	.word	0x2001ca30
 80045b0:	2001cacc 	.word	0x2001cacc
 80045b4:	2001cb2c 	.word	0x2001cb2c

080045b8 <CargarMultiplesBitmaps>:

void CargarMultiplesBitmaps(char *baseName) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08c      	sub	sp, #48	@ 0x30
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
    char fileName[20];
    int y_offset = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 1; i <= 8; i++) {
 80045c4:	2301      	movs	r3, #1
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	e01d      	b.n	8004606 <CargarMultiplesBitmaps+0x4e>
        // Formateamos el nombre del archivo, agregando el número y "_h.bin"
        sprintf(fileName, "%s%d_h.bin", baseName, i);
 80045ca:	f107 000c 	add.w	r0, r7, #12
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4911      	ldr	r1, [pc, #68]	@ (8004618 <CargarMultiplesBitmaps+0x60>)
 80045d4:	f008 faf0 	bl	800cbb8 <siprintf>

        // Intentamos cargar el bitmap desde la tarjeta SD
        if (CargarBitmaps_SD(fileName)) {
 80045d8:	f107 030c 	add.w	r3, r7, #12
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fd fb5d 	bl	8001c9c <CargarBitmaps_SD>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <CargarMultiplesBitmaps+0x42>
            // Mostramos el bitmap en la posición correspondiente
            LCD_Bitmap(0, y_offset, 320, 30, fragmento_imagen);
 80045e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ea:	4b0c      	ldr	r3, [pc, #48]	@ (800461c <CargarMultiplesBitmaps+0x64>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	231e      	movs	r3, #30
 80045f0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fd fa39 	bl	8001a6c <LCD_Bitmap>
        }

        // Aumentamos el desplazamiento vertical para el siguiente bitmap
        y_offset += 30;
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	331e      	adds	r3, #30
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 1; i <= 8; i++) {
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	3301      	adds	r3, #1
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	2b08      	cmp	r3, #8
 800460a:	ddde      	ble.n	80045ca <CargarMultiplesBitmaps+0x12>
    }
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	3728      	adds	r7, #40	@ 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	0800d5a0 	.word	0x0800d5a0
 800461c:	20017cc0 	.word	0x20017cc0

08004620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004626:	f001 fe5f 	bl	80062e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800462a:	f000 fca9 	bl	8004f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800462e:	f000 feb1 	bl	8005394 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004632:	f000 fd11 	bl	8005058 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004636:	f000 fe83 	bl	8005340 <MX_USART2_UART_Init>
  MX_UART5_Init();
 800463a:	f000 fe57 	bl	80052ec <MX_UART5_Init>
  MX_FATFS_Init();
 800463e:	f005 fb3b 	bl	8009cb8 <MX_FATFS_Init>
  MX_TIM2_Init();
 8004642:	f000 fddd 	bl	8005200 <MX_TIM2_Init>
  MX_TIM1_Init();
 8004646:	f000 fd3d 	bl	80050c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 800464a:	f7fc fe85 	bl	8001358 <LCD_Init>

	//Cargar el fondo en 8 fragmentaciones
	CargarMultiplesBitmaps("mp");
 800464e:	48a7      	ldr	r0, [pc, #668]	@ (80048ec <main+0x2cc>)
 8004650:	f7ff ffb2 	bl	80045b8 <CargarMultiplesBitmaps>


	// Activar bandera interrupcion
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8004654:	2201      	movs	r2, #1
 8004656:	49a6      	ldr	r1, [pc, #664]	@ (80048f0 <main+0x2d0>)
 8004658:	48a6      	ldr	r0, [pc, #664]	@ (80048f4 <main+0x2d4>)
 800465a:	f004 fbb2 	bl	8008dc2 <HAL_UART_Receive_IT>

	// ESTADO DE INICIO DEL JUEGO
	estadoActual = MENU;
 800465e:	4ba6      	ldr	r3, [pc, #664]	@ (80048f8 <main+0x2d8>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
	nivelActual1 = NIVEL1;
 8004664:	4ba5      	ldr	r3, [pc, #660]	@ (80048fc <main+0x2dc>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
	nivelActual2 = NIVEL1;
 800466a:	4ba5      	ldr	r3, [pc, #660]	@ (8004900 <main+0x2e0>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
	modo = 0;
 8004670:	4ba4      	ldr	r3, [pc, #656]	@ (8004904 <main+0x2e4>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
    fase_p1=1;
 8004676:	4ba4      	ldr	r3, [pc, #656]	@ (8004908 <main+0x2e8>)
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
    fase_p2=1;
 800467c:	4ba3      	ldr	r3, [pc, #652]	@ (800490c <main+0x2ec>)
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]


  	if (estadoActual == SOLO){
 8004682:	4b9d      	ldr	r3, [pc, #628]	@ (80048f8 <main+0x2d8>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d172      	bne.n	8004772 <main+0x152>
	//Inicializar Jugador 1
	initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 800468c:	2312      	movs	r3, #18
 800468e:	9305      	str	r3, [sp, #20]
 8004690:	23dc      	movs	r3, #220	@ 0xdc
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004698:	9303      	str	r3, [sp, #12]
 800469a:	2303      	movs	r3, #3
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	2305      	movs	r3, #5
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	231e      	movs	r3, #30
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	2316      	movs	r3, #22
 80046a8:	22c8      	movs	r2, #200	@ 0xc8
 80046aa:	21a0      	movs	r1, #160	@ 0xa0
 80046ac:	4898      	ldr	r0, [pc, #608]	@ (8004910 <main+0x2f0>)
 80046ae:	f7fe ffdb 	bl	8003668 <initPlayer>
	initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80046b2:	2312      	movs	r3, #18
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	23dc      	movs	r3, #220	@ 0xdc
 80046b8:	9304      	str	r3, [sp, #16]
 80046ba:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	2303      	movs	r3, #3
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	2305      	movs	r3, #5
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	231e      	movs	r3, #30
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2316      	movs	r3, #22
 80046ce:	22c8      	movs	r2, #200	@ 0xc8
 80046d0:	21a0      	movs	r1, #160	@ 0xa0
 80046d2:	4890      	ldr	r0, [pc, #576]	@ (8004914 <main+0x2f4>)
 80046d4:	f7fe ffc8 	bl	8003668 <initPlayer>
	p1.PlayerNum=1;
 80046d8:	4b8d      	ldr	r3, [pc, #564]	@ (8004910 <main+0x2f0>)
 80046da:	2201      	movs	r2, #1
 80046dc:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 80046de:	4b8d      	ldr	r3, [pc, #564]	@ (8004914 <main+0x2f4>)
 80046e0:	2202      	movs	r2, #2
 80046e2:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.isAlive=0;
 80046e4:	4b8b      	ldr	r3, [pc, #556]	@ (8004914 <main+0x2f4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]

	if (nivelActual1==NIVEL1){
 80046ea:	4b84      	ldr	r3, [pc, #528]	@ (80048fc <main+0x2dc>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11e      	bne.n	8004732 <main+0x112>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 80046f4:	2303      	movs	r3, #3
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	2313      	movs	r3, #19
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2310      	movs	r3, #16
 80046fe:	2250      	movs	r2, #80	@ 0x50
 8004700:	2128      	movs	r1, #40	@ 0x28
 8004702:	4885      	ldr	r0, [pc, #532]	@ (8004918 <main+0x2f8>)
 8004704:	f7fd fd0a 	bl	800211c <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8004708:	2303      	movs	r3, #3
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	2313      	movs	r3, #19
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2310      	movs	r3, #16
 8004712:	2250      	movs	r2, #80	@ 0x50
 8004714:	21a0      	movs	r1, #160	@ 0xa0
 8004716:	4881      	ldr	r0, [pc, #516]	@ (800491c <main+0x2fc>)
 8004718:	f7fd fd00 	bl	800211c <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 800471c:	2303      	movs	r3, #3
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	2313      	movs	r3, #19
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2310      	movs	r3, #16
 8004726:	2250      	movs	r2, #80	@ 0x50
 8004728:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800472c:	487c      	ldr	r0, [pc, #496]	@ (8004920 <main+0x300>)
 800472e:	f7fd fcf5 	bl	800211c <initEnemy1>

	  if (nivelActual1==NIVEL2){
 8004732:	4b72      	ldr	r3, [pc, #456]	@ (80048fc <main+0x2dc>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d109      	bne.n	8004750 <main+0x130>
		  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 800473c:	2303      	movs	r3, #3
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	2314      	movs	r3, #20
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2310      	movs	r3, #16
 8004746:	2250      	movs	r2, #80	@ 0x50
 8004748:	21a0      	movs	r1, #160	@ 0xa0
 800474a:	4876      	ldr	r0, [pc, #472]	@ (8004924 <main+0x304>)
 800474c:	f7fe f90a 	bl	8002964 <initEnemy2>
		  }

	  if (nivelActual1==NIVEL3){
 8004750:	4b6a      	ldr	r3, [pc, #424]	@ (80048fc <main+0x2dc>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d10b      	bne.n	8004772 <main+0x152>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 800475a:	4b6d      	ldr	r3, [pc, #436]	@ (8004910 <main+0x2f0>)
 800475c:	9302      	str	r3, [sp, #8]
 800475e:	230f      	movs	r3, #15
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	230f      	movs	r3, #15
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	230f      	movs	r3, #15
 8004768:	221e      	movs	r2, #30
 800476a:	2150      	movs	r1, #80	@ 0x50
 800476c:	486e      	ldr	r0, [pc, #440]	@ (8004928 <main+0x308>)
 800476e:	f7fe fc41 	bl	8002ff4 <initEnemy3>
	  	  }
}
  if (estadoActual==DUO){
 8004772:	4b61      	ldr	r3, [pc, #388]	@ (80048f8 <main+0x2d8>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	f040 8095 	bne.w	80048a8 <main+0x288>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 800477e:	2300      	movs	r3, #0
 8004780:	22f0      	movs	r2, #240	@ 0xf0
 8004782:	2100      	movs	r1, #0
 8004784:	20a0      	movs	r0, #160	@ 0xa0
 8004786:	f7fd f8af 	bl	80018e8 <V_line>
	initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18); //80
 800478a:	2312      	movs	r3, #18
 800478c:	9305      	str	r3, [sp, #20]
 800478e:	23dc      	movs	r3, #220	@ 0xdc
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	23a0      	movs	r3, #160	@ 0xa0
 8004794:	9303      	str	r3, [sp, #12]
 8004796:	2303      	movs	r3, #3
 8004798:	9302      	str	r3, [sp, #8]
 800479a:	2305      	movs	r3, #5
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	231e      	movs	r3, #30
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2316      	movs	r3, #22
 80047a4:	22c8      	movs	r2, #200	@ 0xc8
 80047a6:	2150      	movs	r1, #80	@ 0x50
 80047a8:	4859      	ldr	r0, [pc, #356]	@ (8004910 <main+0x2f0>)
 80047aa:	f7fe ff5d 	bl	8003668 <initPlayer>
	initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160); //240
 80047ae:	23a0      	movs	r3, #160	@ 0xa0
 80047b0:	9305      	str	r3, [sp, #20]
 80047b2:	23dc      	movs	r3, #220	@ 0xdc
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	2303      	movs	r3, #3
 80047be:	9302      	str	r3, [sp, #8]
 80047c0:	2305      	movs	r3, #5
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	231e      	movs	r3, #30
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2316      	movs	r3, #22
 80047ca:	22c8      	movs	r2, #200	@ 0xc8
 80047cc:	21f0      	movs	r1, #240	@ 0xf0
 80047ce:	4851      	ldr	r0, [pc, #324]	@ (8004914 <main+0x2f4>)
 80047d0:	f7fe ff4a 	bl	8003668 <initPlayer>
	p1.PlayerNum=1;
 80047d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004910 <main+0x2f0>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 80047da:	4b4e      	ldr	r3, [pc, #312]	@ (8004914 <main+0x2f4>)
 80047dc:	2202      	movs	r2, #2
 80047de:	671a      	str	r2, [r3, #112]	@ 0x70

	if (nivelActual1==NIVEL1){
 80047e0:	4b46      	ldr	r3, [pc, #280]	@ (80048fc <main+0x2dc>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <main+0x1de>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 80, 80, 16, 19, 3);}
 80047ea:	2303      	movs	r3, #3
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	2313      	movs	r3, #19
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2310      	movs	r3, #16
 80047f4:	2250      	movs	r2, #80	@ 0x50
 80047f6:	2150      	movs	r1, #80	@ 0x50
 80047f8:	4847      	ldr	r0, [pc, #284]	@ (8004918 <main+0x2f8>)
 80047fa:	f7fd fc8f 	bl	800211c <initEnemy1>
	 if (nivelActual1==NIVEL2){
 80047fe:	4b3f      	ldr	r3, [pc, #252]	@ (80048fc <main+0x2dc>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d109      	bne.n	800481c <main+0x1fc>
		  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 8004808:	2303      	movs	r3, #3
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	2314      	movs	r3, #20
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2310      	movs	r3, #16
 8004812:	2250      	movs	r2, #80	@ 0x50
 8004814:	215a      	movs	r1, #90	@ 0x5a
 8004816:	4843      	ldr	r0, [pc, #268]	@ (8004924 <main+0x304>)
 8004818:	f7fe f8a4 	bl	8002964 <initEnemy2>
		  }
	  if (nivelActual1==NIVEL3){
 800481c:	4b37      	ldr	r3, [pc, #220]	@ (80048fc <main+0x2dc>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d10b      	bne.n	800483e <main+0x21e>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);}
 8004826:	4b3a      	ldr	r3, [pc, #232]	@ (8004910 <main+0x2f0>)
 8004828:	9302      	str	r3, [sp, #8]
 800482a:	230f      	movs	r3, #15
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	230f      	movs	r3, #15
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	230f      	movs	r3, #15
 8004834:	221e      	movs	r2, #30
 8004836:	2150      	movs	r1, #80	@ 0x50
 8004838:	483b      	ldr	r0, [pc, #236]	@ (8004928 <main+0x308>)
 800483a:	f7fe fbdb 	bl	8002ff4 <initEnemy3>
	  if (nivelActual2==NIVEL1){
 800483e:	4b30      	ldr	r3, [pc, #192]	@ (8004900 <main+0x2e0>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <main+0x23c>
		//Inicializar enemigo 1
		initEnemy1(&e1_4, 240, 120, 16, 19, 3);
 8004848:	2303      	movs	r3, #3
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	2313      	movs	r3, #19
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2310      	movs	r3, #16
 8004852:	2278      	movs	r2, #120	@ 0x78
 8004854:	21f0      	movs	r1, #240	@ 0xf0
 8004856:	4835      	ldr	r0, [pc, #212]	@ (800492c <main+0x30c>)
 8004858:	f7fd fc60 	bl	800211c <initEnemy1>
	    }
	  if (nivelActual2==NIVEL2){
 800485c:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <main+0x2e0>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d109      	bne.n	800487a <main+0x25a>
	  	  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 8004866:	2303      	movs	r3, #3
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	2314      	movs	r3, #20
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2310      	movs	r3, #16
 8004870:	2250      	movs	r2, #80	@ 0x50
 8004872:	21e6      	movs	r1, #230	@ 0xe6
 8004874:	482e      	ldr	r0, [pc, #184]	@ (8004930 <main+0x310>)
 8004876:	f7fe f875 	bl	8002964 <initEnemy2>
	  }
	  if (nivelActual2==NIVEL3){
 800487a:	4b21      	ldr	r3, [pc, #132]	@ (8004900 <main+0x2e0>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d10b      	bne.n	800489c <main+0x27c>
		  initEnemy3(&e3_2, 240, 30, 15, 15, 15, &p2);}
 8004884:	4b23      	ldr	r3, [pc, #140]	@ (8004914 <main+0x2f4>)
 8004886:	9302      	str	r3, [sp, #8]
 8004888:	230f      	movs	r3, #15
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	230f      	movs	r3, #15
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	230f      	movs	r3, #15
 8004892:	221e      	movs	r2, #30
 8004894:	21f0      	movs	r1, #240	@ 0xf0
 8004896:	4827      	ldr	r0, [pc, #156]	@ (8004934 <main+0x314>)
 8004898:	f7fe fbac 	bl	8002ff4 <initEnemy3>
	  HitboxPlayer(&p1);
 800489c:	481c      	ldr	r0, [pc, #112]	@ (8004910 <main+0x2f0>)
 800489e:	f7ff f82f 	bl	8003900 <HitboxPlayer>
	  HitboxPlayer(&p2);
 80048a2:	481c      	ldr	r0, [pc, #112]	@ (8004914 <main+0x2f4>)
 80048a4:	f7ff f82c 	bl	8003900 <HitboxPlayer>
	}

  // Iniciar PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80048a8:	210c      	movs	r1, #12
 80048aa:	4823      	ldr	r0, [pc, #140]	@ (8004938 <main+0x318>)
 80048ac:	f003 fb72 	bl	8007f94 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (repintarFondo) {
 80048b0:	4b22      	ldr	r3, [pc, #136]	@ (800493c <main+0x31c>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80af 	beq.w	8004a18 <main+0x3f8>
		switch (estadoActual) {
 80048ba:	4b0f      	ldr	r3, [pc, #60]	@ (80048f8 <main+0x2d8>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	f200 80a6 	bhi.w	8004a12 <main+0x3f2>
 80048c6:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <main+0x2ac>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048e5 	.word	0x080048e5
 80048d0:	08004941 	.word	0x08004941
 80048d4:	08004981 	.word	0x08004981
 80048d8:	08004a05 	.word	0x08004a05
 80048dc:	08004a13 	.word	0x08004a13
 80048e0:	08004a13 	.word	0x08004a13
			case MENU:
				CargarMultiplesBitmaps("mp");
 80048e4:	4801      	ldr	r0, [pc, #4]	@ (80048ec <main+0x2cc>)
 80048e6:	f7ff fe67 	bl	80045b8 <CargarMultiplesBitmaps>
				break;
 80048ea:	e092      	b.n	8004a12 <main+0x3f2>
 80048ec:	0800d5ac 	.word	0x0800d5ac
 80048f0:	2001c7c0 	.word	0x2001c7c0
 80048f4:	20017c78 	.word	0x20017c78
 80048f8:	20016a78 	.word	0x20016a78
 80048fc:	2001cb29 	.word	0x2001cb29
 8004900:	2001cb2a 	.word	0x2001cb2a
 8004904:	2001cb24 	.word	0x2001cb24
 8004908:	2001cb25 	.word	0x2001cb25
 800490c:	2001cb26 	.word	0x2001cb26
 8004910:	2001c7cc 	.word	0x2001c7cc
 8004914:	2001c840 	.word	0x2001c840
 8004918:	2001c8b4 	.word	0x2001c8b4
 800491c:	2001c8e8 	.word	0x2001c8e8
 8004920:	2001c91c 	.word	0x2001c91c
 8004924:	2001c9ec 	.word	0x2001c9ec
 8004928:	2001ca74 	.word	0x2001ca74
 800492c:	2001c950 	.word	0x2001c950
 8004930:	2001ca30 	.word	0x2001ca30
 8004934:	2001cacc 	.word	0x2001cacc
 8004938:	20017be8 	.word	0x20017be8
 800493c:	2001cb34 	.word	0x2001cb34
			case SOLO:
				CargarMultiplesBitmaps("fb");
 8004940:	4863      	ldr	r0, [pc, #396]	@ (8004ad0 <main+0x4b0>)
 8004942:	f7ff fe39 	bl	80045b8 <CargarMultiplesBitmaps>
				LCD_Sprite(p1.x - (20 / 2)+1, p1.y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, 0, 0, 0);
 8004946:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <main+0x4b4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3b09      	subs	r3, #9
 800494c:	4618      	mov	r0, r3
 800494e:	4b61      	ldr	r3, [pc, #388]	@ (8004ad4 <main+0x4b4>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	3b0a      	subs	r3, #10
 8004954:	4619      	mov	r1, r3
 8004956:	2300      	movs	r3, #0
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	2300      	movs	r3, #0
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	2300      	movs	r3, #0
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	2303      	movs	r3, #3
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	4b5c      	ldr	r3, [pc, #368]	@ (8004ad8 <main+0x4b8>)
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2315      	movs	r3, #21
 800496c:	2214      	movs	r2, #20
 800496e:	f7fd f8d3 	bl	8001b18 <LCD_Sprite>
				if (IniciarP1==1){
 8004972:	4b5a      	ldr	r3, [pc, #360]	@ (8004adc <main+0x4bc>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d148      	bne.n	8004a0c <main+0x3ec>
				initLevelSolo();}
 800497a:	f7ff fc59 	bl	8004230 <initLevelSolo>
				break;
 800497e:	e045      	b.n	8004a0c <main+0x3ec>
			case DUO:
				CargarMultiplesBitmaps("fb");
 8004980:	4853      	ldr	r0, [pc, #332]	@ (8004ad0 <main+0x4b0>)
 8004982:	f7ff fe19 	bl	80045b8 <CargarMultiplesBitmaps>
				V_line(160, 0, 240, 0x0000);
 8004986:	2300      	movs	r3, #0
 8004988:	22f0      	movs	r2, #240	@ 0xf0
 800498a:	2100      	movs	r1, #0
 800498c:	20a0      	movs	r0, #160	@ 0xa0
 800498e:	f7fc ffab 	bl	80018e8 <V_line>
				LCD_Sprite(p1.x - (20 / 2)+1, p1.y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, 0, 0, 0);
 8004992:	4b50      	ldr	r3, [pc, #320]	@ (8004ad4 <main+0x4b4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3b09      	subs	r3, #9
 8004998:	4618      	mov	r0, r3
 800499a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad4 <main+0x4b4>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	3b0a      	subs	r3, #10
 80049a0:	4619      	mov	r1, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	2300      	movs	r3, #0
 80049a8:	9303      	str	r3, [sp, #12]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	2303      	movs	r3, #3
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <main+0x4b8>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2315      	movs	r3, #21
 80049b8:	2214      	movs	r2, #20
 80049ba:	f7fd f8ad 	bl	8001b18 <LCD_Sprite>
				LCD_Sprite(p2.x - (20 / 2)+1, p2.y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, 0, 0, 0);
 80049be:	4b48      	ldr	r3, [pc, #288]	@ (8004ae0 <main+0x4c0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3b09      	subs	r3, #9
 80049c4:	4618      	mov	r0, r3
 80049c6:	4b46      	ldr	r3, [pc, #280]	@ (8004ae0 <main+0x4c0>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	3b0a      	subs	r3, #10
 80049cc:	4619      	mov	r1, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	2300      	movs	r3, #0
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9302      	str	r3, [sp, #8]
 80049da:	2303      	movs	r3, #3
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <main+0x4b8>)
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2315      	movs	r3, #21
 80049e4:	2214      	movs	r2, #20
 80049e6:	f7fd f897 	bl	8001b18 <LCD_Sprite>
				if (IniciarP1==1){
 80049ea:	4b3c      	ldr	r3, [pc, #240]	@ (8004adc <main+0x4bc>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <main+0x3d6>
					initLevelP1();}
 80049f2:	f7ff fccd 	bl	8004390 <initLevelP1>
				if (IniciarP2==1){
 80049f6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <main+0x4c4>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d108      	bne.n	8004a10 <main+0x3f0>
					initLevelP2();}
 80049fe:	f7ff fd4f 	bl	80044a0 <initLevelP2>
				break;
 8004a02:	e005      	b.n	8004a10 <main+0x3f0>
			case PAUSA:
				CargarMultiplesBitmaps("pausa");
 8004a04:	4838      	ldr	r0, [pc, #224]	@ (8004ae8 <main+0x4c8>)
 8004a06:	f7ff fdd7 	bl	80045b8 <CargarMultiplesBitmaps>
				break;
 8004a0a:	e002      	b.n	8004a12 <main+0x3f2>
				break;
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <main+0x3f2>
				break;
 8004a10:	bf00      	nop
				break;
			case WIN2:
				break;
			// Agrega más casos según tus estados.
		}
		repintarFondo = 0; // Fondo pintado, no es necesario repintar.
 8004a12:	4b36      	ldr	r3, [pc, #216]	@ (8004aec <main+0x4cc>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
	}
	if (pintarFondoPausa == 1) {
 8004a18:	4b35      	ldr	r3, [pc, #212]	@ (8004af0 <main+0x4d0>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <main+0x40c>
		// Pinta el fondo de PAUSA solo una vez
		CargarMultiplesBitmaps("pausa");  // Función que pinta el fondo de PAUSA
 8004a20:	4831      	ldr	r0, [pc, #196]	@ (8004ae8 <main+0x4c8>)
 8004a22:	f7ff fdc9 	bl	80045b8 <CargarMultiplesBitmaps>
		pintarFondoPausa = 0;  // Desactiva la bandera
 8004a26:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <main+0x4d0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
	}
	switch(estadoActual){
 8004a2c:	4b31      	ldr	r3, [pc, #196]	@ (8004af4 <main+0x4d4>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	f200 8284 	bhi.w	8004f40 <main+0x920>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <main+0x420>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a59 	.word	0x08004a59
 8004a44:	08004b0d 	.word	0x08004b0d
 8004a48:	08004c9b 	.word	0x08004c9b
 8004a4c:	08004f41 	.word	0x08004f41
 8004a50:	08004f31 	.word	0x08004f31
 8004a54:	08004f39 	.word	0x08004f39
	case MENU:
		// En funcion del estadoFuturo, se seleccionara que mostrar en la pantlla
		// (Para mostrar que opcion selecciono en le menuPrincipal)
		switch(estadoFuturo){
 8004a58:	4b27      	ldr	r3, [pc, #156]	@ (8004af8 <main+0x4d8>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d002      	beq.n	8004a68 <main+0x448>
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d011      	beq.n	8004a8a <main+0x46a>
 8004a66:	e021      	b.n	8004aac <main+0x48c>
		case SOLO:
			LCD_Bitmap(20, 180, 110, 30, play_solo_selected);
 8004a68:	4b24      	ldr	r3, [pc, #144]	@ (8004afc <main+0x4dc>)
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	231e      	movs	r3, #30
 8004a6e:	226e      	movs	r2, #110	@ 0x6e
 8004a70:	21b4      	movs	r1, #180	@ 0xb4
 8004a72:	2014      	movs	r0, #20
 8004a74:	f7fc fffa 	bl	8001a6c <LCD_Bitmap>
			LCD_Bitmap(190, 180, 110, 30, play_duo);
 8004a78:	4b21      	ldr	r3, [pc, #132]	@ (8004b00 <main+0x4e0>)
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	231e      	movs	r3, #30
 8004a7e:	226e      	movs	r2, #110	@ 0x6e
 8004a80:	21b4      	movs	r1, #180	@ 0xb4
 8004a82:	20be      	movs	r0, #190	@ 0xbe
 8004a84:	f7fc fff2 	bl	8001a6c <LCD_Bitmap>
			break;
 8004a88:	e021      	b.n	8004ace <main+0x4ae>
		case DUO:
			LCD_Bitmap(190, 180, 110, 30, play_duo_selected);
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <main+0x4e4>)
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	231e      	movs	r3, #30
 8004a90:	226e      	movs	r2, #110	@ 0x6e
 8004a92:	21b4      	movs	r1, #180	@ 0xb4
 8004a94:	20be      	movs	r0, #190	@ 0xbe
 8004a96:	f7fc ffe9 	bl	8001a6c <LCD_Bitmap>
			LCD_Bitmap(20, 180, 110, 30, play_solo);
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <main+0x4e8>)
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	231e      	movs	r3, #30
 8004aa0:	226e      	movs	r2, #110	@ 0x6e
 8004aa2:	21b4      	movs	r1, #180	@ 0xb4
 8004aa4:	2014      	movs	r0, #20
 8004aa6:	f7fc ffe1 	bl	8001a6c <LCD_Bitmap>
			break;
 8004aaa:	e010      	b.n	8004ace <main+0x4ae>
		default:
			LCD_Bitmap(20, 180, 110, 30, play_solo);
 8004aac:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <main+0x4e8>)
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	231e      	movs	r3, #30
 8004ab2:	226e      	movs	r2, #110	@ 0x6e
 8004ab4:	21b4      	movs	r1, #180	@ 0xb4
 8004ab6:	2014      	movs	r0, #20
 8004ab8:	f7fc ffd8 	bl	8001a6c <LCD_Bitmap>
			LCD_Bitmap(190, 180, 110, 30, play_duo);
 8004abc:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <main+0x4e0>)
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	231e      	movs	r3, #30
 8004ac2:	226e      	movs	r2, #110	@ 0x6e
 8004ac4:	21b4      	movs	r1, #180	@ 0xb4
 8004ac6:	20be      	movs	r0, #190	@ 0xbe
 8004ac8:	f7fc ffd0 	bl	8001a6c <LCD_Bitmap>
			break;
 8004acc:	bf00      	nop
		}
		break;
 8004ace:	e238      	b.n	8004f42 <main+0x922>
 8004ad0:	0800d5b0 	.word	0x0800d5b0
 8004ad4:	2001c7cc 	.word	0x2001c7cc
 8004ad8:	20005844 	.word	0x20005844
 8004adc:	2001cb36 	.word	0x2001cb36
 8004ae0:	2001c840 	.word	0x2001c840
 8004ae4:	2001cb37 	.word	0x2001cb37
 8004ae8:	0800d5b4 	.word	0x0800d5b4
 8004aec:	2001cb34 	.word	0x2001cb34
 8004af0:	2001cb35 	.word	0x2001cb35
 8004af4:	20016a78 	.word	0x20016a78
 8004af8:	2001cb28 	.word	0x2001cb28
 8004afc:	0801099c 	.word	0x0801099c
 8004b00:	0800efd4 	.word	0x0800efd4
 8004b04:	08012364 	.word	0x08012364
 8004b08:	0800d60c 	.word	0x0800d60c
	case SOLO:{
		if (nivelActual1==NIVEL1){
 8004b0c:	4b85      	ldr	r3, [pc, #532]	@ (8004d24 <main+0x704>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d158      	bne.n	8004bc8 <main+0x5a8>
				if(e1_1.isAlive==1){
 8004b16:	4b84      	ldr	r3, [pc, #528]	@ (8004d28 <main+0x708>)
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <main+0x50a>
					animation_e1(&e1_1);
 8004b1e:	4882      	ldr	r0, [pc, #520]	@ (8004d28 <main+0x708>)
 8004b20:	f7fd f9e2 	bl	8001ee8 <animation_e1>
					animation_e1_control(&e1_1);}
 8004b24:	4880      	ldr	r0, [pc, #512]	@ (8004d28 <main+0x708>)
 8004b26:	f7fd f98b 	bl	8001e40 <animation_e1_control>

				if(e1_2.isAlive==1){
 8004b2a:	4b80      	ldr	r3, [pc, #512]	@ (8004d2c <main+0x70c>)
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <main+0x51e>
					animation_e1(&e1_2);
 8004b32:	487e      	ldr	r0, [pc, #504]	@ (8004d2c <main+0x70c>)
 8004b34:	f7fd f9d8 	bl	8001ee8 <animation_e1>
					animation_e1_control(&e1_2);}
 8004b38:	487c      	ldr	r0, [pc, #496]	@ (8004d2c <main+0x70c>)
 8004b3a:	f7fd f981 	bl	8001e40 <animation_e1_control>

				if(e1_3.isAlive==1){
 8004b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d30 <main+0x710>)
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d105      	bne.n	8004b52 <main+0x532>
					animation_e1(&e1_3);
 8004b46:	487a      	ldr	r0, [pc, #488]	@ (8004d30 <main+0x710>)
 8004b48:	f7fd f9ce 	bl	8001ee8 <animation_e1>
					animation_e1_control(&e1_3);}
 8004b4c:	4878      	ldr	r0, [pc, #480]	@ (8004d30 <main+0x710>)
 8004b4e:	f7fd f977 	bl	8001e40 <animation_e1_control>

				animation_e1_die(&e1_1);
 8004b52:	4875      	ldr	r0, [pc, #468]	@ (8004d28 <main+0x708>)
 8004b54:	f7fd fa90 	bl	8002078 <animation_e1_die>
				animation_e1_die(&e1_2);
 8004b58:	4874      	ldr	r0, [pc, #464]	@ (8004d2c <main+0x70c>)
 8004b5a:	f7fd fa8d 	bl	8002078 <animation_e1_die>
				animation_e1_die(&e1_3);
 8004b5e:	4874      	ldr	r0, [pc, #464]	@ (8004d30 <main+0x710>)
 8004b60:	f7fd fa8a 	bl	8002078 <animation_e1_die>
				if (e1_1.isAlive==0&&e1_2.isAlive==0&&e1_3.isAlive==0 && e1_1.animationDie>=11 && e1_2.animationDie>=11 && e1_3.animationDie>=11){
 8004b64:	4b70      	ldr	r3, [pc, #448]	@ (8004d28 <main+0x708>)
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d12d      	bne.n	8004bc8 <main+0x5a8>
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d2c <main+0x70c>)
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d129      	bne.n	8004bc8 <main+0x5a8>
 8004b74:	4b6e      	ldr	r3, [pc, #440]	@ (8004d30 <main+0x710>)
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d125      	bne.n	8004bc8 <main+0x5a8>
 8004b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <main+0x708>)
 8004b7e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004b82:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8e:	db1b      	blt.n	8004bc8 <main+0x5a8>
 8004b90:	4b66      	ldr	r3, [pc, #408]	@ (8004d2c <main+0x70c>)
 8004b92:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004b96:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	db11      	blt.n	8004bc8 <main+0x5a8>
 8004ba4:	4b62      	ldr	r3, [pc, #392]	@ (8004d30 <main+0x710>)
 8004ba6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004baa:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	db07      	blt.n	8004bc8 <main+0x5a8>
					nivelActual1=NIVEL2;
 8004bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d24 <main+0x704>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004d34 <main+0x714>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
					initLevelSolo();
 8004bc4:	f7ff fb34 	bl	8004230 <initLevelSolo>
				}
			}

		if (nivelActual1==NIVEL2){
 8004bc8:	4b56      	ldr	r3, [pc, #344]	@ (8004d24 <main+0x704>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d130      	bne.n	8004c34 <main+0x614>
			if (e2_1.isAlive==1){
 8004bd2:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <main+0x718>)
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d113      	bne.n	8004c02 <main+0x5e2>
				moveE2(&e2_1, &p1);
 8004bda:	4958      	ldr	r1, [pc, #352]	@ (8004d3c <main+0x71c>)
 8004bdc:	4856      	ldr	r0, [pc, #344]	@ (8004d38 <main+0x718>)
 8004bde:	f7fd fefb 	bl	80029d8 <moveE2>
				e2_1.delay+=1; //1
 8004be2:	4b55      	ldr	r3, [pc, #340]	@ (8004d38 <main+0x718>)
 8004be4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bf0:	4b51      	ldr	r3, [pc, #324]	@ (8004d38 <main+0x718>)
 8004bf2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_1);
 8004bf6:	4850      	ldr	r0, [pc, #320]	@ (8004d38 <main+0x718>)
 8004bf8:	f7fe f806 	bl	8002c08 <E2_Appear>
				E2_Hurt(&e2_1);
 8004bfc:	484e      	ldr	r0, [pc, #312]	@ (8004d38 <main+0x718>)
 8004bfe:	f7fe f84b 	bl	8002c98 <E2_Hurt>

			}
			E2_Die(&e2_1);
 8004c02:	484d      	ldr	r0, [pc, #308]	@ (8004d38 <main+0x718>)
 8004c04:	f7fe f898 	bl	8002d38 <E2_Die>
			if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8004c08:	4b4b      	ldr	r3, [pc, #300]	@ (8004d38 <main+0x718>)
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d111      	bne.n	8004c34 <main+0x614>
 8004c10:	4b49      	ldr	r3, [pc, #292]	@ (8004d38 <main+0x718>)
 8004c12:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004c16:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	db07      	blt.n	8004c34 <main+0x614>
				nivelActual1=NIVEL3;
 8004c24:	4b3f      	ldr	r3, [pc, #252]	@ (8004d24 <main+0x704>)
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
				IniciarLevel=1;
 8004c2a:	4b42      	ldr	r3, [pc, #264]	@ (8004d34 <main+0x714>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
				initLevelSolo();
 8004c30:	f7ff fafe 	bl	8004230 <initLevelSolo>
			}
		}

		if (nivelActual1==NIVEL3){
 8004c34:	4b3b      	ldr	r3, [pc, #236]	@ (8004d24 <main+0x704>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d11a      	bne.n	8004c74 <main+0x654>
			if (e3_1.isAlive==1){
 8004c3e:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <main+0x720>)
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10f      	bne.n	8004c66 <main+0x646>
			E3_MoveX(&e3_1);
 8004c46:	483e      	ldr	r0, [pc, #248]	@ (8004d40 <main+0x720>)
 8004c48:	f7fe fc98 	bl	800357c <E3_MoveX>
			E3_Eye(&e3_1);
 8004c4c:	483c      	ldr	r0, [pc, #240]	@ (8004d40 <main+0x720>)
 8004c4e:	f7fe fa1b 	bl	8003088 <E3_Eye>
			E3_FireMove(&e3_1,&p1);
 8004c52:	493a      	ldr	r1, [pc, #232]	@ (8004d3c <main+0x71c>)
 8004c54:	483a      	ldr	r0, [pc, #232]	@ (8004d40 <main+0x720>)
 8004c56:	f7fe fa91 	bl	800317c <E3_FireMove>
			E3_Hitbox(&e3_1);
 8004c5a:	4839      	ldr	r0, [pc, #228]	@ (8004d40 <main+0x720>)
 8004c5c:	f7fe fbd8 	bl	8003410 <E3_Hitbox>
			E3_FireAnimation(&e3_1);
 8004c60:	4837      	ldr	r0, [pc, #220]	@ (8004d40 <main+0x720>)
 8004c62:	f7fe fb9d 	bl	80033a0 <E3_FireAnimation>
			}
			if (e3_1.isAlive==0){
 8004c66:	4b36      	ldr	r3, [pc, #216]	@ (8004d40 <main+0x720>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <main+0x654>
				estadoActual = WIN1;
 8004c6e:	4b35      	ldr	r3, [pc, #212]	@ (8004d44 <main+0x724>)
 8004c70:	2204      	movs	r2, #4
 8004c72:	701a      	strb	r2, [r3, #0]
			}
		}

		PlayerAttackAnimation(&p1);
 8004c74:	4831      	ldr	r0, [pc, #196]	@ (8004d3c <main+0x71c>)
 8004c76:	f7ff f85b 	bl	8003d30 <PlayerAttackAnimation>
		PlayerAttackSound(&p1);
 8004c7a:	4830      	ldr	r0, [pc, #192]	@ (8004d3c <main+0x71c>)
 8004c7c:	f7ff f8fa 	bl	8003e74 <PlayerAttackSound>
		PlayerDamageAnimation(&p1);
 8004c80:	482e      	ldr	r0, [pc, #184]	@ (8004d3c <main+0x71c>)
 8004c82:	f7ff f951 	bl	8003f28 <PlayerDamageAnimation>
		PlayerDamageSound(&p1);
 8004c86:	482d      	ldr	r0, [pc, #180]	@ (8004d3c <main+0x71c>)
 8004c88:	f7ff f9f0 	bl	800406c <PlayerDamageSound>
		PlayerDieAnimation(&p1);
 8004c8c:	482b      	ldr	r0, [pc, #172]	@ (8004d3c <main+0x71c>)
 8004c8e:	f7ff fa2b 	bl	80040e8 <PlayerDieAnimation>
		PlayerDieSound(&p1);
 8004c92:	482a      	ldr	r0, [pc, #168]	@ (8004d3c <main+0x71c>)
 8004c94:	f7ff fa86 	bl	80041a4 <PlayerDieSound>
		break;}
 8004c98:	e153      	b.n	8004f42 <main+0x922>

	case DUO:{
		if (nivelActual1==NIVEL1){
 8004c9a:	4b22      	ldr	r3, [pc, #136]	@ (8004d24 <main+0x704>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d122      	bne.n	8004cea <main+0x6ca>
			if(e1_1.isAlive==1){
 8004ca4:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <main+0x708>)
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <main+0x698>
				animation_e1(&e1_1);
 8004cac:	481e      	ldr	r0, [pc, #120]	@ (8004d28 <main+0x708>)
 8004cae:	f7fd f91b 	bl	8001ee8 <animation_e1>
				animation_e1_control(&e1_1);}
 8004cb2:	481d      	ldr	r0, [pc, #116]	@ (8004d28 <main+0x708>)
 8004cb4:	f7fd f8c4 	bl	8001e40 <animation_e1_control>
				animation_e1_die(&e1_1);
 8004cb8:	481b      	ldr	r0, [pc, #108]	@ (8004d28 <main+0x708>)
 8004cba:	f7fd f9dd 	bl	8002078 <animation_e1_die>

			if ( e1_1.isAlive==0&& e1_1.animationDie>=11 ){
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004d28 <main+0x708>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d111      	bne.n	8004cea <main+0x6ca>
 8004cc6:	4b18      	ldr	r3, [pc, #96]	@ (8004d28 <main+0x708>)
 8004cc8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004ccc:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd8:	db07      	blt.n	8004cea <main+0x6ca>
				nivelActual1=NIVEL2;
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <main+0x704>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
				IniciarLevel=1;
 8004ce0:	4b14      	ldr	r3, [pc, #80]	@ (8004d34 <main+0x714>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
				initLevelP1();
 8004ce6:	f7ff fb53 	bl	8004390 <initLevelP1>
			}
		}

		if (nivelActual1==NIVEL2){
 8004cea:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <main+0x704>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d159      	bne.n	8004da8 <main+0x788>
			if (e2_1.isAlive==1){
 8004cf4:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <main+0x718>)
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d139      	bne.n	8004d70 <main+0x750>
				moveE2(&e2_1, &p1);
 8004cfc:	490f      	ldr	r1, [pc, #60]	@ (8004d3c <main+0x71c>)
 8004cfe:	480e      	ldr	r0, [pc, #56]	@ (8004d38 <main+0x718>)
 8004d00:	f7fd fe6a 	bl	80029d8 <moveE2>
				if (nivelActual2!=NIVEL2){
 8004d04:	4b10      	ldr	r3, [pc, #64]	@ (8004d48 <main+0x728>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d020      	beq.n	8004d50 <main+0x730>
				e2_1.delay+=1000;}//0.5
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <main+0x718>)
 8004d10:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004d14:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004d4c <main+0x72c>
 8004d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <main+0x718>)
 8004d1e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8004d22:	e01f      	b.n	8004d64 <main+0x744>
 8004d24:	2001cb29 	.word	0x2001cb29
 8004d28:	2001c8b4 	.word	0x2001c8b4
 8004d2c:	2001c8e8 	.word	0x2001c8e8
 8004d30:	2001c91c 	.word	0x2001c91c
 8004d34:	2001cb2c 	.word	0x2001cb2c
 8004d38:	2001c9ec 	.word	0x2001c9ec
 8004d3c:	2001c7cc 	.word	0x2001c7cc
 8004d40:	2001ca74 	.word	0x2001ca74
 8004d44:	20016a78 	.word	0x20016a78
 8004d48:	2001cb2a 	.word	0x2001cb2a
 8004d4c:	447a0000 	.word	0x447a0000
				else{
					e2_1.delay+=1;
 8004d50:	4b7c      	ldr	r3, [pc, #496]	@ (8004f44 <main+0x924>)
 8004d52:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004d56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d5e:	4b79      	ldr	r3, [pc, #484]	@ (8004f44 <main+0x924>)
 8004d60:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				}
				E2_Appear(&e2_1);
 8004d64:	4877      	ldr	r0, [pc, #476]	@ (8004f44 <main+0x924>)
 8004d66:	f7fd ff4f 	bl	8002c08 <E2_Appear>
				E2_Hurt(&e2_1);
 8004d6a:	4876      	ldr	r0, [pc, #472]	@ (8004f44 <main+0x924>)
 8004d6c:	f7fd ff94 	bl	8002c98 <E2_Hurt>
			}
			E2_Die(&e2_1);
 8004d70:	4874      	ldr	r0, [pc, #464]	@ (8004f44 <main+0x924>)
 8004d72:	f7fd ffe1 	bl	8002d38 <E2_Die>
			if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8004d76:	4b73      	ldr	r3, [pc, #460]	@ (8004f44 <main+0x924>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d114      	bne.n	8004da8 <main+0x788>
 8004d7e:	4b71      	ldr	r3, [pc, #452]	@ (8004f44 <main+0x924>)
 8004d80:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004d84:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	db0a      	blt.n	8004da8 <main+0x788>
				e3_1.isAlive=1;
 8004d92:	4b6d      	ldr	r3, [pc, #436]	@ (8004f48 <main+0x928>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	615a      	str	r2, [r3, #20]
				nivelActual1=NIVEL3;
 8004d98:	4b6c      	ldr	r3, [pc, #432]	@ (8004f4c <main+0x92c>)
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	701a      	strb	r2, [r3, #0]
				IniciarLevel=1;
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004f50 <main+0x930>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
				initLevelP1();
 8004da4:	f7ff faf4 	bl	8004390 <initLevelP1>
			}
		}
		if (nivelActual1==NIVEL3){
 8004da8:	4b68      	ldr	r3, [pc, #416]	@ (8004f4c <main+0x92c>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d11a      	bne.n	8004de8 <main+0x7c8>
			if (e3_1.isAlive==1){
 8004db2:	4b65      	ldr	r3, [pc, #404]	@ (8004f48 <main+0x928>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10f      	bne.n	8004dda <main+0x7ba>
				E3_MoveX(&e3_1);
 8004dba:	4863      	ldr	r0, [pc, #396]	@ (8004f48 <main+0x928>)
 8004dbc:	f7fe fbde 	bl	800357c <E3_MoveX>
				E3_Eye(&e3_1);
 8004dc0:	4861      	ldr	r0, [pc, #388]	@ (8004f48 <main+0x928>)
 8004dc2:	f7fe f961 	bl	8003088 <E3_Eye>
				E3_FireMove(&e3_1,&p1);
 8004dc6:	4963      	ldr	r1, [pc, #396]	@ (8004f54 <main+0x934>)
 8004dc8:	485f      	ldr	r0, [pc, #380]	@ (8004f48 <main+0x928>)
 8004dca:	f7fe f9d7 	bl	800317c <E3_FireMove>
				E3_Hitbox(&e3_1);
 8004dce:	485e      	ldr	r0, [pc, #376]	@ (8004f48 <main+0x928>)
 8004dd0:	f7fe fb1e 	bl	8003410 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8004dd4:	485c      	ldr	r0, [pc, #368]	@ (8004f48 <main+0x928>)
 8004dd6:	f7fe fae3 	bl	80033a0 <E3_FireAnimation>
			}
			if (e3_1.isAlive==0){
 8004dda:	4b5b      	ldr	r3, [pc, #364]	@ (8004f48 <main+0x928>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <main+0x7c8>
				estadoActual = WIN1;
 8004de2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f58 <main+0x938>)
 8004de4:	2204      	movs	r2, #4
 8004de6:	701a      	strb	r2, [r3, #0]
			}
		}

		if (nivelActual2==NIVEL1){
 8004de8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f5c <main+0x93c>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d122      	bne.n	8004e38 <main+0x818>
			if(e1_4.isAlive==1){
 8004df2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f60 <main+0x940>)
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <main+0x7e6>
				animation_e1(&e1_4);
 8004dfa:	4859      	ldr	r0, [pc, #356]	@ (8004f60 <main+0x940>)
 8004dfc:	f7fd f874 	bl	8001ee8 <animation_e1>
				animation_e1_control(&e1_4);}
 8004e00:	4857      	ldr	r0, [pc, #348]	@ (8004f60 <main+0x940>)
 8004e02:	f7fd f81d 	bl	8001e40 <animation_e1_control>
				animation_e1_die(&e1_4);
 8004e06:	4856      	ldr	r0, [pc, #344]	@ (8004f60 <main+0x940>)
 8004e08:	f7fd f936 	bl	8002078 <animation_e1_die>

			if (e1_4.isAlive==0 && e1_4.animationDie>=11){
 8004e0c:	4b54      	ldr	r3, [pc, #336]	@ (8004f60 <main+0x940>)
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d111      	bne.n	8004e38 <main+0x818>
 8004e14:	4b52      	ldr	r3, [pc, #328]	@ (8004f60 <main+0x940>)
 8004e16:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004e1a:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	db07      	blt.n	8004e38 <main+0x818>
				nivelActual2=NIVEL2;
 8004e28:	4b4c      	ldr	r3, [pc, #304]	@ (8004f5c <main+0x93c>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
				IniciarLevel2=1;
 8004e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004f64 <main+0x944>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
				initLevelP2();
 8004e34:	f7ff fb34 	bl	80044a0 <initLevelP2>
			}
		}

		if (nivelActual2==NIVEL2){
 8004e38:	4b48      	ldr	r3, [pc, #288]	@ (8004f5c <main+0x93c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d143      	bne.n	8004eca <main+0x8aa>
			if (e2_2.isAlive==1){
 8004e42:	4b49      	ldr	r3, [pc, #292]	@ (8004f68 <main+0x948>)
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d123      	bne.n	8004e92 <main+0x872>
				moveE2(&e2_2, &p2);
 8004e4a:	4948      	ldr	r1, [pc, #288]	@ (8004f6c <main+0x94c>)
 8004e4c:	4846      	ldr	r0, [pc, #280]	@ (8004f68 <main+0x948>)
 8004e4e:	f7fd fdc3 	bl	80029d8 <moveE2>
				if (nivelActual1!=NIVEL2){
 8004e52:	4b3e      	ldr	r3, [pc, #248]	@ (8004f4c <main+0x92c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00a      	beq.n	8004e72 <main+0x852>
					e2_2.delay+=1000;
 8004e5c:	4b42      	ldr	r3, [pc, #264]	@ (8004f68 <main+0x948>)
 8004e5e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004e62:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8004f70 <main+0x950>
 8004e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f68 <main+0x948>)
 8004e6c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8004e70:	e009      	b.n	8004e86 <main+0x866>
				}else{
				e2_2.delay+=1;}
 8004e72:	4b3d      	ldr	r3, [pc, #244]	@ (8004f68 <main+0x948>)
 8004e74:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e80:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <main+0x948>)
 8004e82:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_2);
 8004e86:	4838      	ldr	r0, [pc, #224]	@ (8004f68 <main+0x948>)
 8004e88:	f7fd febe 	bl	8002c08 <E2_Appear>
				E2_Hurt(&e2_2);
 8004e8c:	4836      	ldr	r0, [pc, #216]	@ (8004f68 <main+0x948>)
 8004e8e:	f7fd ff03 	bl	8002c98 <E2_Hurt>
			}
			E2_Die(&e2_2);
 8004e92:	4835      	ldr	r0, [pc, #212]	@ (8004f68 <main+0x948>)
 8004e94:	f7fd ff50 	bl	8002d38 <E2_Die>
			if (e2_2.isAlive==0&&e2_2.animationDie>=6){
 8004e98:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <main+0x948>)
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d114      	bne.n	8004eca <main+0x8aa>
 8004ea0:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <main+0x948>)
 8004ea2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004ea6:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	db0a      	blt.n	8004eca <main+0x8aa>
				e3_2.isAlive=1;
 8004eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8004f74 <main+0x954>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	615a      	str	r2, [r3, #20]
				nivelActual2=NIVEL3;
 8004eba:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <main+0x93c>)
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	701a      	strb	r2, [r3, #0]
				IniciarLevel2=1;
 8004ec0:	4b28      	ldr	r3, [pc, #160]	@ (8004f64 <main+0x944>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
				initLevelP2();
 8004ec6:	f7ff faeb 	bl	80044a0 <initLevelP2>
			}
		}

		if (nivelActual2==NIVEL3){
 8004eca:	4b24      	ldr	r3, [pc, #144]	@ (8004f5c <main+0x93c>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d11a      	bne.n	8004f0a <main+0x8ea>
			if (e3_2.isAlive==1){
 8004ed4:	4b27      	ldr	r3, [pc, #156]	@ (8004f74 <main+0x954>)
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10f      	bne.n	8004efc <main+0x8dc>
				E3_MoveX(&e3_2);
 8004edc:	4825      	ldr	r0, [pc, #148]	@ (8004f74 <main+0x954>)
 8004ede:	f7fe fb4d 	bl	800357c <E3_MoveX>
				E3_Eye(&e3_2);
 8004ee2:	4824      	ldr	r0, [pc, #144]	@ (8004f74 <main+0x954>)
 8004ee4:	f7fe f8d0 	bl	8003088 <E3_Eye>
				E3_FireMove(&e3_2,&p2);
 8004ee8:	4920      	ldr	r1, [pc, #128]	@ (8004f6c <main+0x94c>)
 8004eea:	4822      	ldr	r0, [pc, #136]	@ (8004f74 <main+0x954>)
 8004eec:	f7fe f946 	bl	800317c <E3_FireMove>
				E3_Hitbox(&e3_2);
 8004ef0:	4820      	ldr	r0, [pc, #128]	@ (8004f74 <main+0x954>)
 8004ef2:	f7fe fa8d 	bl	8003410 <E3_Hitbox>
				E3_FireAnimation(&e3_2);
 8004ef6:	481f      	ldr	r0, [pc, #124]	@ (8004f74 <main+0x954>)
 8004ef8:	f7fe fa52 	bl	80033a0 <E3_FireAnimation>
			}
			if (e3_2.isAlive==0){
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <main+0x954>)
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <main+0x8ea>
				estadoActual = WIN2;
 8004f04:	4b14      	ldr	r3, [pc, #80]	@ (8004f58 <main+0x938>)
 8004f06:	2205      	movs	r2, #5
 8004f08:	701a      	strb	r2, [r3, #0]
			}
		}


		PlayerAttackAnimation(&p1);
 8004f0a:	4812      	ldr	r0, [pc, #72]	@ (8004f54 <main+0x934>)
 8004f0c:	f7fe ff10 	bl	8003d30 <PlayerAttackAnimation>
		PlayerDamageAnimation(&p1);
 8004f10:	4810      	ldr	r0, [pc, #64]	@ (8004f54 <main+0x934>)
 8004f12:	f7ff f809 	bl	8003f28 <PlayerDamageAnimation>
		PlayerDieAnimation(&p1);
 8004f16:	480f      	ldr	r0, [pc, #60]	@ (8004f54 <main+0x934>)
 8004f18:	f7ff f8e6 	bl	80040e8 <PlayerDieAnimation>

		PlayerAttackAnimation(&p2);
 8004f1c:	4813      	ldr	r0, [pc, #76]	@ (8004f6c <main+0x94c>)
 8004f1e:	f7fe ff07 	bl	8003d30 <PlayerAttackAnimation>
		PlayerDamageAnimation(&p2);
 8004f22:	4812      	ldr	r0, [pc, #72]	@ (8004f6c <main+0x94c>)
 8004f24:	f7ff f800 	bl	8003f28 <PlayerDamageAnimation>
		PlayerDieAnimation(&p2);
 8004f28:	4810      	ldr	r0, [pc, #64]	@ (8004f6c <main+0x94c>)
 8004f2a:	f7ff f8dd 	bl	80040e8 <PlayerDieAnimation>
		break;}
 8004f2e:	e008      	b.n	8004f42 <main+0x922>
	case PAUSA:
		//LCD_Bitmap(0, 0, 320, 240, pausa_menu);
		break;
	case WIN1:
		CargarMultiplesBitmaps("p1w");
 8004f30:	4811      	ldr	r0, [pc, #68]	@ (8004f78 <main+0x958>)
 8004f32:	f7ff fb41 	bl	80045b8 <CargarMultiplesBitmaps>
		break;
 8004f36:	e004      	b.n	8004f42 <main+0x922>
	case WIN2:
		CargarMultiplesBitmaps("p2w");
 8004f38:	4810      	ldr	r0, [pc, #64]	@ (8004f7c <main+0x95c>)
 8004f3a:	f7ff fb3d 	bl	80045b8 <CargarMultiplesBitmaps>
		break;
 8004f3e:	e000      	b.n	8004f42 <main+0x922>
	default:
		break;
 8004f40:	bf00      	nop
		if (repintarFondo) {
 8004f42:	e4b5      	b.n	80048b0 <main+0x290>
 8004f44:	2001c9ec 	.word	0x2001c9ec
 8004f48:	2001ca74 	.word	0x2001ca74
 8004f4c:	2001cb29 	.word	0x2001cb29
 8004f50:	2001cb2c 	.word	0x2001cb2c
 8004f54:	2001c7cc 	.word	0x2001c7cc
 8004f58:	20016a78 	.word	0x20016a78
 8004f5c:	2001cb2a 	.word	0x2001cb2a
 8004f60:	2001c950 	.word	0x2001c950
 8004f64:	2001cb30 	.word	0x2001cb30
 8004f68:	2001ca30 	.word	0x2001ca30
 8004f6c:	2001c840 	.word	0x2001c840
 8004f70:	447a0000 	.word	0x447a0000
 8004f74:	2001cacc 	.word	0x2001cacc
 8004f78:	0800d5bc 	.word	0x0800d5bc
 8004f7c:	0800d5c0 	.word	0x0800d5c0

08004f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b094      	sub	sp, #80	@ 0x50
 8004f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f86:	f107 031c 	add.w	r3, r7, #28
 8004f8a:	2234      	movs	r2, #52	@ 0x34
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f007 fe32 	bl	800cbf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f94:	f107 0308 	add.w	r3, r7, #8
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	609a      	str	r2, [r3, #8]
 8004fa0:	60da      	str	r2, [r3, #12]
 8004fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	4b29      	ldr	r3, [pc, #164]	@ (8005050 <SystemClock_Config+0xd0>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	4a28      	ldr	r2, [pc, #160]	@ (8005050 <SystemClock_Config+0xd0>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fb4:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <SystemClock_Config+0xd0>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <SystemClock_Config+0xd4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004fcc:	4a21      	ldr	r2, [pc, #132]	@ (8005054 <SystemClock_Config+0xd4>)
 8004fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <SystemClock_Config+0xd4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fe8:	2310      	movs	r3, #16
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fec:	2302      	movs	r3, #2
 8004fee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004ff8:	2350      	movs	r3, #80	@ 0x50
 8004ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005000:	2302      	movs	r3, #2
 8005002:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005004:	2302      	movs	r3, #2
 8005006:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005008:	f107 031c 	add.w	r3, r7, #28
 800500c:	4618      	mov	r0, r3
 800500e:	f002 f823 	bl	8007058 <HAL_RCC_OscConfig>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005018:	f000 fedc 	bl	8005dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800501c:	230f      	movs	r3, #15
 800501e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005020:	2302      	movs	r3, #2
 8005022:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800502c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800502e:	2300      	movs	r3, #0
 8005030:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	2102      	movs	r1, #2
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fd49 	bl	8006ad0 <HAL_RCC_ClockConfig>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8005044:	f000 fec6 	bl	8005dd4 <Error_Handler>
  }
}
 8005048:	bf00      	nop
 800504a:	3750      	adds	r7, #80	@ 0x50
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40023800 	.word	0x40023800
 8005054:	40007000 	.word	0x40007000

08005058 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <MX_SPI1_Init+0x64>)
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <MX_SPI1_Init+0x68>)
 8005060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <MX_SPI1_Init+0x64>)
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005072:	2200      	movs	r2, #0
 8005074:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800507c:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <MX_SPI1_Init+0x64>)
 800507e:	2200      	movs	r2, #0
 8005080:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005082:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005088:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <MX_SPI1_Init+0x64>)
 800508c:	2210      	movs	r2, #16
 800508e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005092:	2200      	movs	r2, #0
 8005094:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005098:	2200      	movs	r2, #0
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <MX_SPI1_Init+0x64>)
 800509e:	2200      	movs	r2, #0
 80050a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80050a2:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <MX_SPI1_Init+0x64>)
 80050a4:	220a      	movs	r2, #10
 80050a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80050a8:	4804      	ldr	r0, [pc, #16]	@ (80050bc <MX_SPI1_Init+0x64>)
 80050aa:	f002 fa73 	bl	8007594 <HAL_SPI_Init>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80050b4:	f000 fe8e 	bl	8005dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20016b10 	.word	0x20016b10
 80050c0:	40013000 	.word	0x40013000

080050c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b096      	sub	sp, #88	@ 0x58
 80050c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	609a      	str	r2, [r3, #8]
 80050ee:	60da      	str	r2, [r3, #12]
 80050f0:	611a      	str	r2, [r3, #16]
 80050f2:	615a      	str	r2, [r3, #20]
 80050f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	2220      	movs	r2, #32
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f007 fd7b 	bl	800cbf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <MX_TIM1_Init+0x134>)
 8005104:	4a3d      	ldr	r2, [pc, #244]	@ (80051fc <MX_TIM1_Init+0x138>)
 8005106:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8005108:	4b3b      	ldr	r3, [pc, #236]	@ (80051f8 <MX_TIM1_Init+0x134>)
 800510a:	224f      	movs	r2, #79	@ 0x4f
 800510c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510e:	4b3a      	ldr	r3, [pc, #232]	@ (80051f8 <MX_TIM1_Init+0x134>)
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005114:	4b38      	ldr	r3, [pc, #224]	@ (80051f8 <MX_TIM1_Init+0x134>)
 8005116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800511a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800511c:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <MX_TIM1_Init+0x134>)
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005122:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <MX_TIM1_Init+0x134>)
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005128:	4b33      	ldr	r3, [pc, #204]	@ (80051f8 <MX_TIM1_Init+0x134>)
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800512e:	4832      	ldr	r0, [pc, #200]	@ (80051f8 <MX_TIM1_Init+0x134>)
 8005130:	f002 fe88 	bl	8007e44 <HAL_TIM_Base_Init>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800513a:	f000 fe4b 	bl	8005dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800513e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005144:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005148:	4619      	mov	r1, r3
 800514a:	482b      	ldr	r0, [pc, #172]	@ (80051f8 <MX_TIM1_Init+0x134>)
 800514c:	f003 f8ac 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005156:	f000 fe3d 	bl	8005dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800515a:	4827      	ldr	r0, [pc, #156]	@ (80051f8 <MX_TIM1_Init+0x134>)
 800515c:	f002 fec1 	bl	8007ee2 <HAL_TIM_PWM_Init>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005166:	f000 fe35 	bl	8005dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800516a:	2300      	movs	r3, #0
 800516c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800516e:	2300      	movs	r3, #0
 8005170:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005176:	4619      	mov	r1, r3
 8005178:	481f      	ldr	r0, [pc, #124]	@ (80051f8 <MX_TIM1_Init+0x134>)
 800517a:	f003 fc79 	bl	8008a70 <HAL_TIMEx_MasterConfigSynchronization>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005184:	f000 fe26 	bl	8005dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005188:	2360      	movs	r3, #96	@ 0x60
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005190:	2300      	movs	r3, #0
 8005192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800519c:	2300      	movs	r3, #0
 800519e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80051a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051a4:	220c      	movs	r2, #12
 80051a6:	4619      	mov	r1, r3
 80051a8:	4813      	ldr	r0, [pc, #76]	@ (80051f8 <MX_TIM1_Init+0x134>)
 80051aa:	f002 ffbb 	bl	8008124 <HAL_TIM_PWM_ConfigChannel>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80051b4:	f000 fe0e 	bl	8005dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80051bc:	2300      	movs	r3, #0
 80051be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80051cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4807      	ldr	r0, [pc, #28]	@ (80051f8 <MX_TIM1_Init+0x134>)
 80051dc:	f003 fcc4 	bl	8008b68 <HAL_TIMEx_ConfigBreakDeadTime>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80051e6:	f000 fdf5 	bl	8005dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80051ea:	4803      	ldr	r0, [pc, #12]	@ (80051f8 <MX_TIM1_Init+0x134>)
 80051ec:	f000 fe9e 	bl	8005f2c <HAL_TIM_MspPostInit>

}
 80051f0:	bf00      	nop
 80051f2:	3758      	adds	r7, #88	@ 0x58
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20017ba0 	.word	0x20017ba0
 80051fc:	40010000 	.word	0x40010000

08005200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	@ 0x38
 8005204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	605a      	str	r2, [r3, #4]
 8005210:	609a      	str	r2, [r3, #8]
 8005212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005214:	f107 0320 	add.w	r3, r7, #32
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800521e:	1d3b      	adds	r3, r7, #4
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
 800522c:	615a      	str	r2, [r3, #20]
 800522e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005230:	4b2c      	ldr	r3, [pc, #176]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8005238:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 800523a:	224f      	movs	r2, #79	@ 0x4f
 800523c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800523e:	4b29      	ldr	r3, [pc, #164]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8005244:	4b27      	ldr	r3, [pc, #156]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005246:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <MX_TIM2_Init+0xe8>)
 8005248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800524a:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005250:	4b24      	ldr	r3, [pc, #144]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005252:	2200      	movs	r2, #0
 8005254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005256:	4823      	ldr	r0, [pc, #140]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005258:	f002 fdf4 	bl	8007e44 <HAL_TIM_Base_Init>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005262:	f000 fdb7 	bl	8005dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800526c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005270:	4619      	mov	r1, r3
 8005272:	481c      	ldr	r0, [pc, #112]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005274:	f003 f818 	bl	80082a8 <HAL_TIM_ConfigClockSource>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800527e:	f000 fda9 	bl	8005dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005282:	4818      	ldr	r0, [pc, #96]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 8005284:	f002 fe2d 	bl	8007ee2 <HAL_TIM_PWM_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800528e:	f000 fda1 	bl	8005dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005292:	2300      	movs	r3, #0
 8005294:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800529a:	f107 0320 	add.w	r3, r7, #32
 800529e:	4619      	mov	r1, r3
 80052a0:	4810      	ldr	r0, [pc, #64]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 80052a2:	f003 fbe5 	bl	8008a70 <HAL_TIMEx_MasterConfigSynchronization>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80052ac:	f000 fd92 	bl	8005dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052b0:	2360      	movs	r3, #96	@ 0x60
 80052b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	220c      	movs	r2, #12
 80052c4:	4619      	mov	r1, r3
 80052c6:	4807      	ldr	r0, [pc, #28]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 80052c8:	f002 ff2c 	bl	8008124 <HAL_TIM_PWM_ConfigChannel>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80052d2:	f000 fd7f 	bl	8005dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80052d6:	4803      	ldr	r0, [pc, #12]	@ (80052e4 <MX_TIM2_Init+0xe4>)
 80052d8:	f000 fe28 	bl	8005f2c <HAL_TIM_MspPostInit>

}
 80052dc:	bf00      	nop
 80052de:	3738      	adds	r7, #56	@ 0x38
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20017be8 	.word	0x20017be8
 80052e8:	000f4240 	.word	0x000f4240

080052ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80052f0:	4b11      	ldr	r3, [pc, #68]	@ (8005338 <MX_UART5_Init+0x4c>)
 80052f2:	4a12      	ldr	r2, [pc, #72]	@ (800533c <MX_UART5_Init+0x50>)
 80052f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80052f6:	4b10      	ldr	r3, [pc, #64]	@ (8005338 <MX_UART5_Init+0x4c>)
 80052f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80052fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005338 <MX_UART5_Init+0x4c>)
 8005300:	2200      	movs	r2, #0
 8005302:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005304:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <MX_UART5_Init+0x4c>)
 8005306:	2200      	movs	r2, #0
 8005308:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800530a:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <MX_UART5_Init+0x4c>)
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005310:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <MX_UART5_Init+0x4c>)
 8005312:	220c      	movs	r2, #12
 8005314:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005316:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <MX_UART5_Init+0x4c>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800531c:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <MX_UART5_Init+0x4c>)
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005322:	4805      	ldr	r0, [pc, #20]	@ (8005338 <MX_UART5_Init+0x4c>)
 8005324:	f003 fc72 	bl	8008c0c <HAL_UART_Init>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800532e:	f000 fd51 	bl	8005dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20017c30 	.word	0x20017c30
 800533c:	40005000 	.word	0x40005000

08005340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005344:	4b11      	ldr	r3, [pc, #68]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 8005346:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <MX_USART2_UART_Init+0x50>)
 8005348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 800534c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005352:	4b0e      	ldr	r3, [pc, #56]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 8005354:	2200      	movs	r2, #0
 8005356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005358:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 800535a:	2200      	movs	r2, #0
 800535c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800535e:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005364:	4b09      	ldr	r3, [pc, #36]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 8005366:	220c      	movs	r2, #12
 8005368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800536a:	4b08      	ldr	r3, [pc, #32]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 800536c:	2200      	movs	r2, #0
 800536e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 8005372:	2200      	movs	r2, #0
 8005374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005376:	4805      	ldr	r0, [pc, #20]	@ (800538c <MX_USART2_UART_Init+0x4c>)
 8005378:	f003 fc48 	bl	8008c0c <HAL_UART_Init>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005382:	f000 fd27 	bl	8005dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20017c78 	.word	0x20017c78
 8005390:	40004400 	.word	0x40004400

08005394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	@ 0x28
 8005398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539a:	f107 0314 	add.w	r3, r7, #20
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	60da      	str	r2, [r3, #12]
 80053a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	4b4c      	ldr	r3, [pc, #304]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	4a4b      	ldr	r2, [pc, #300]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053ba:	4b49      	ldr	r3, [pc, #292]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	4b45      	ldr	r3, [pc, #276]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	4a44      	ldr	r2, [pc, #272]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053d6:	4b42      	ldr	r3, [pc, #264]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	4b3e      	ldr	r3, [pc, #248]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	4a3d      	ldr	r2, [pc, #244]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053f2:	4b3b      	ldr	r3, [pc, #236]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	4b37      	ldr	r3, [pc, #220]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	4a36      	ldr	r2, [pc, #216]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	6313      	str	r3, [r2, #48]	@ 0x30
 800540e:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	603b      	str	r3, [r7, #0]
 800541e:	4b30      	ldr	r3, [pc, #192]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	4a2f      	ldr	r2, [pc, #188]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 8005424:	f043 0308 	orr.w	r3, r3, #8
 8005428:	6313      	str	r3, [r2, #48]	@ 0x30
 800542a:	4b2d      	ldr	r3, [pc, #180]	@ (80054e0 <MX_GPIO_Init+0x14c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8005436:	2200      	movs	r2, #0
 8005438:	2182      	movs	r1, #130	@ 0x82
 800543a:	482a      	ldr	r0, [pc, #168]	@ (80054e4 <MX_GPIO_Init+0x150>)
 800543c:	f001 fb2e 	bl	8006a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8005440:	2200      	movs	r2, #0
 8005442:	f240 7113 	movw	r1, #1811	@ 0x713
 8005446:	4828      	ldr	r0, [pc, #160]	@ (80054e8 <MX_GPIO_Init+0x154>)
 8005448:	f001 fb28 	bl	8006a9c <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800544c:	2200      	movs	r2, #0
 800544e:	f240 4139 	movw	r1, #1081	@ 0x439
 8005452:	4826      	ldr	r0, [pc, #152]	@ (80054ec <MX_GPIO_Init+0x158>)
 8005454:	f001 fb22 	bl	8006a9c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8005458:	2201      	movs	r2, #1
 800545a:	2140      	movs	r1, #64	@ 0x40
 800545c:	4823      	ldr	r0, [pc, #140]	@ (80054ec <MX_GPIO_Init+0x158>)
 800545e:	f001 fb1d 	bl	8006a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8005462:	2382      	movs	r3, #130	@ 0x82
 8005464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005466:	2301      	movs	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800546e:	2302      	movs	r3, #2
 8005470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	4619      	mov	r1, r3
 8005478:	481a      	ldr	r0, [pc, #104]	@ (80054e4 <MX_GPIO_Init+0x150>)
 800547a:	f001 f97b 	bl	8006774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800547e:	f240 7313 	movw	r3, #1811	@ 0x713
 8005482:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005484:	2301      	movs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800548c:	2302      	movs	r3, #2
 800548e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	4619      	mov	r1, r3
 8005496:	4814      	ldr	r0, [pc, #80]	@ (80054e8 <MX_GPIO_Init+0x154>)
 8005498:	f001 f96c 	bl	8006774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800549c:	f240 4339 	movw	r3, #1081	@ 0x439
 80054a0:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054aa:	2302      	movs	r3, #2
 80054ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ae:	f107 0314 	add.w	r3, r7, #20
 80054b2:	4619      	mov	r1, r3
 80054b4:	480d      	ldr	r0, [pc, #52]	@ (80054ec <MX_GPIO_Init+0x158>)
 80054b6:	f001 f95d 	bl	8006774 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80054ba:	2340      	movs	r3, #64	@ 0x40
 80054bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054be:	2301      	movs	r3, #1
 80054c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80054c6:	2301      	movs	r3, #1
 80054c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80054ca:	f107 0314 	add.w	r3, r7, #20
 80054ce:	4619      	mov	r1, r3
 80054d0:	4806      	ldr	r0, [pc, #24]	@ (80054ec <MX_GPIO_Init+0x158>)
 80054d2:	f001 f94f 	bl	8006774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054d6:	bf00      	nop
 80054d8:	3728      	adds	r7, #40	@ 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40020800 	.word	0x40020800
 80054e8:	40020000 	.word	0x40020000
 80054ec:	40020400 	.word	0x40020400

080054f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b089      	sub	sp, #36	@ 0x24
 80054f4:	af06      	add	r7, sp, #24
 80054f6:	6078      	str	r0, [r7, #4]
	if (modo==1){
 80054f8:	4b97      	ldr	r3, [pc, #604]	@ (8005758 <HAL_UART_RxCpltCallback+0x268>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d102      	bne.n	8005506 <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 8005500:	4896      	ldr	r0, [pc, #600]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005502:	f7fe f9fd 	bl	8003900 <HitboxPlayer>
	if (modo==2){
 8005506:	4b94      	ldr	r3, [pc, #592]	@ (8005758 <HAL_UART_RxCpltCallback+0x268>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d105      	bne.n	800551a <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 800550e:	4893      	ldr	r0, [pc, #588]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005510:	f7fe f9f6 	bl	8003900 <HitboxPlayer>
		HitboxPlayer(&p2);
 8005514:	4892      	ldr	r0, [pc, #584]	@ (8005760 <HAL_UART_RxCpltCallback+0x270>)
 8005516:	f7fe f9f3 	bl	8003900 <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 800551a:	4b92      	ldr	r3, [pc, #584]	@ (8005764 <HAL_UART_RxCpltCallback+0x274>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b64      	cmp	r3, #100	@ 0x64
 8005520:	d175      	bne.n	800560e <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8005522:	4b8e      	ldr	r3, [pc, #568]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	2b00      	cmp	r3, #0
 8005528:	d171      	bne.n	800560e <HAL_UART_RxCpltCallback+0x11e>
 800552a:	4b8c      	ldr	r3, [pc, #560]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d16d      	bne.n	800560e <HAL_UART_RxCpltCallback+0x11e>
 8005532:	4b8a      	ldr	r3, [pc, #552]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d169      	bne.n	800560e <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800553a:	4b88      	ldr	r3, [pc, #544]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b87      	ldr	r3, [pc, #540]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	1c58      	adds	r0, r3, #1
 8005548:	4b84      	ldr	r3, [pc, #528]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4b83      	ldr	r3, [pc, #524]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	4b81      	ldr	r3, [pc, #516]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	4b7f      	ldr	r3, [pc, #508]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005566:	9400      	str	r4, [sp, #0]
 8005568:	f7fc fa26 	bl	80019b8 <FillRect>
			p1.direction=2;
 800556c:	4b7b      	ldr	r3, [pc, #492]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800556e:	2202      	movs	r2, #2
 8005570:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8005572:	2100      	movs	r1, #0
 8005574:	4879      	ldr	r0, [pc, #484]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005576:	f7fe f8fb 	bl	8003770 <playerCanMove>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 8005580:	4b76      	ldr	r3, [pc, #472]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	4b75      	ldr	r3, [pc, #468]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	4413      	add	r3, r2
 800558a:	4a74      	ldr	r2, [pc, #464]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800558c:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 800558e:	4b73      	ldr	r3, [pc, #460]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	2b09      	cmp	r3, #9
 8005594:	d805      	bhi.n	80055a2 <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 8005596:	4b71      	ldr	r3, [pc, #452]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559a:	3301      	adds	r3, #1
 800559c:	4a6f      	ldr	r2, [pc, #444]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800559e:	6513      	str	r3, [r2, #80]	@ 0x50
 80055a0:	e002      	b.n	80055a8 <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 80055a2:	4b6e      	ldr	r3, [pc, #440]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 80055a8:	486c      	ldr	r0, [pc, #432]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055aa:	f7fe fb3f 	bl	8003c2c <PlayerAnimation>
 80055ae:	e02e      	b.n	800560e <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1,0xFE8B);
 80055b0:	4b6a      	ldr	r3, [pc, #424]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b69      	ldr	r3, [pc, #420]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	1c58      	adds	r0, r3, #1
 80055be:	4b67      	ldr	r3, [pc, #412]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b66      	ldr	r3, [pc, #408]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	4b63      	ldr	r3, [pc, #396]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	4b62      	ldr	r3, [pc, #392]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80055dc:	9400      	str	r4, [sp, #0]
 80055de:	f7fc f9eb 	bl	80019b8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 80055e2:	4b5e      	ldr	r3, [pc, #376]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3b08      	subs	r3, #8
 80055e8:	4618      	mov	r0, r3
 80055ea:	4b5c      	ldr	r3, [pc, #368]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	3b0c      	subs	r3, #12
 80055f0:	4619      	mov	r1, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	2300      	movs	r3, #0
 80055f8:	9303      	str	r3, [sp, #12]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9302      	str	r3, [sp, #8]
 80055fe:	230a      	movs	r3, #10
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	4b59      	ldr	r3, [pc, #356]	@ (8005768 <HAL_UART_RxCpltCallback+0x278>)
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	231a      	movs	r3, #26
 8005608:	2212      	movs	r2, #18
 800560a:	f7fc fa85 	bl	8001b18 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 800560e:	4b55      	ldr	r3, [pc, #340]	@ (8005764 <HAL_UART_RxCpltCallback+0x274>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b75      	cmp	r3, #117	@ 0x75
 8005614:	d15c      	bne.n	80056d0 <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8005616:	4b51      	ldr	r3, [pc, #324]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	2b00      	cmp	r3, #0
 800561c:	d158      	bne.n	80056d0 <HAL_UART_RxCpltCallback+0x1e0>
 800561e:	4b4f      	ldr	r3, [pc, #316]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d154      	bne.n	80056d0 <HAL_UART_RxCpltCallback+0x1e0>
 8005626:	4b4d      	ldr	r3, [pc, #308]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d150      	bne.n	80056d0 <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800562e:	4b4b      	ldr	r3, [pc, #300]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b4a      	ldr	r3, [pc, #296]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	1c58      	adds	r0, r3, #1
 800563c:	4b47      	ldr	r3, [pc, #284]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4b46      	ldr	r3, [pc, #280]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	1c59      	adds	r1, r3, #1
 800564a:	4b44      	ldr	r3, [pc, #272]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	4b42      	ldr	r3, [pc, #264]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	3301      	adds	r3, #1
 8005656:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800565a:	9400      	str	r4, [sp, #0]
 800565c:	f7fc f9ac 	bl	80019b8 <FillRect>
			p1.direction=0;
 8005660:	4b3e      	ldr	r3, [pc, #248]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005662:	2200      	movs	r2, #0
 8005664:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8005666:	2102      	movs	r1, #2
 8005668:	483c      	ldr	r0, [pc, #240]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800566a:	f7fe f881 	bl	8003770 <playerCanMove>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d017      	beq.n	80056a4 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8005674:	4b39      	ldr	r3, [pc, #228]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4b38      	ldr	r3, [pc, #224]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	4a37      	ldr	r2, [pc, #220]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005680:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8005682:	4b36      	ldr	r3, [pc, #216]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005686:	2b09      	cmp	r3, #9
 8005688:	d805      	bhi.n	8005696 <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 800568a:	4b34      	ldr	r3, [pc, #208]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	3301      	adds	r3, #1
 8005690:	4a32      	ldr	r2, [pc, #200]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005694:	e002      	b.n	800569c <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 8005696:	4b31      	ldr	r3, [pc, #196]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005698:	2200      	movs	r2, #0
 800569a:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 800569c:	482f      	ldr	r0, [pc, #188]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800569e:	f7fe fac5 	bl	8003c2c <PlayerAnimation>
 80056a2:	e015      	b.n	80056d0 <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 80056a4:	4b2d      	ldr	r3, [pc, #180]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3b08      	subs	r3, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	4b2b      	ldr	r3, [pc, #172]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	3b0d      	subs	r3, #13
 80056b2:	4619      	mov	r1, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	2300      	movs	r3, #0
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	2300      	movs	r3, #0
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	230a      	movs	r3, #10
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	4b29      	ldr	r3, [pc, #164]	@ (800576c <HAL_UART_RxCpltCallback+0x27c>)
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	231a      	movs	r3, #26
 80056ca:	2212      	movs	r2, #18
 80056cc:	f7fc fa24 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 80056d0:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <HAL_UART_RxCpltCallback+0x274>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b72      	cmp	r3, #114	@ 0x72
 80056d6:	d168      	bne.n	80057aa <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80056d8:	4b20      	ldr	r3, [pc, #128]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d164      	bne.n	80057aa <HAL_UART_RxCpltCallback+0x2ba>
 80056e0:	4b1e      	ldr	r3, [pc, #120]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d160      	bne.n	80057aa <HAL_UART_RxCpltCallback+0x2ba>
 80056e8:	4b1c      	ldr	r3, [pc, #112]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d15c      	bne.n	80057aa <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80056f0:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b19      	ldr	r3, [pc, #100]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	1c58      	adds	r0, r3, #1
 80056fe:	4b17      	ldr	r3, [pc, #92]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	4b16      	ldr	r3, [pc, #88]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	4b13      	ldr	r3, [pc, #76]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	4b12      	ldr	r3, [pc, #72]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800571c:	9400      	str	r4, [sp, #0]
 800571e:	f7fc f94b 	bl	80019b8 <FillRect>
			p1.direction=1;
 8005722:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005724:	2201      	movs	r2, #1
 8005726:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8005728:	2101      	movs	r1, #1
 800572a:	480c      	ldr	r0, [pc, #48]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800572c:	f7fe f820 	bl	8003770 <playerCanMove>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d023      	beq.n	800577e <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 8005736:	4b09      	ldr	r3, [pc, #36]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b08      	ldr	r3, [pc, #32]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	4413      	add	r3, r2
 8005740:	4a06      	ldr	r2, [pc, #24]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005742:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005748:	2b09      	cmp	r3, #9
 800574a:	d811      	bhi.n	8005770 <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 800574c:	4b03      	ldr	r3, [pc, #12]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 800574e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005750:	3301      	adds	r3, #1
 8005752:	4a02      	ldr	r2, [pc, #8]	@ (800575c <HAL_UART_RxCpltCallback+0x26c>)
 8005754:	6493      	str	r3, [r2, #72]	@ 0x48
 8005756:	e00e      	b.n	8005776 <HAL_UART_RxCpltCallback+0x286>
 8005758:	2001cb24 	.word	0x2001cb24
 800575c:	2001c7cc 	.word	0x2001c7cc
 8005760:	2001c840 	.word	0x2001c840
 8005764:	2001c7c0 	.word	0x2001c7c0
 8005768:	200148b8 	.word	0x200148b8
 800576c:	20012428 	.word	0x20012428
						} else{
						  p1.animationWalkRight=0;
 8005770:	4b86      	ldr	r3, [pc, #536]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005772:	2200      	movs	r2, #0
 8005774:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 8005776:	4885      	ldr	r0, [pc, #532]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005778:	f7fe fa58 	bl	8003c2c <PlayerAnimation>
 800577c:	e015      	b.n	80057aa <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 800577e:	4b83      	ldr	r3, [pc, #524]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b0a      	subs	r3, #10
 8005784:	4618      	mov	r0, r3
 8005786:	4b81      	ldr	r3, [pc, #516]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	3b0b      	subs	r3, #11
 800578c:	4619      	mov	r1, r3
 800578e:	2300      	movs	r3, #0
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	2301      	movs	r3, #1
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	2300      	movs	r3, #0
 8005798:	9302      	str	r3, [sp, #8]
 800579a:	230a      	movs	r3, #10
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	4b7c      	ldr	r3, [pc, #496]	@ (8005990 <HAL_UART_RxCpltCallback+0x4a0>)
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2317      	movs	r3, #23
 80057a4:	2216      	movs	r2, #22
 80057a6:	f7fc f9b7 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 80057aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005994 <HAL_UART_RxCpltCallback+0x4a4>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b6c      	cmp	r3, #108	@ 0x6c
 80057b0:	d15c      	bne.n	800586c <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80057b2:	4b76      	ldr	r3, [pc, #472]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d158      	bne.n	800586c <HAL_UART_RxCpltCallback+0x37c>
 80057ba:	4b74      	ldr	r3, [pc, #464]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d154      	bne.n	800586c <HAL_UART_RxCpltCallback+0x37c>
 80057c2:	4b72      	ldr	r3, [pc, #456]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d150      	bne.n	800586c <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80057ca:	4b70      	ldr	r3, [pc, #448]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b6f      	ldr	r3, [pc, #444]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	1c58      	adds	r0, r3, #1
 80057d8:	4b6c      	ldr	r3, [pc, #432]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	4b6b      	ldr	r3, [pc, #428]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	4b69      	ldr	r3, [pc, #420]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	4b67      	ldr	r3, [pc, #412]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	3301      	adds	r3, #1
 80057f2:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80057f6:	9400      	str	r4, [sp, #0]
 80057f8:	f7fc f8de 	bl	80019b8 <FillRect>
			p1.direction=3;
 80057fc:	4b63      	ldr	r3, [pc, #396]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80057fe:	2203      	movs	r2, #3
 8005800:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 8005802:	2103      	movs	r1, #3
 8005804:	4861      	ldr	r0, [pc, #388]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005806:	f7fd ffb3 	bl	8003770 <playerCanMove>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d017      	beq.n	8005840 <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 8005810:	4b5e      	ldr	r3, [pc, #376]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b5d      	ldr	r3, [pc, #372]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a5c      	ldr	r2, [pc, #368]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 800581c:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 800581e:	4b5b      	ldr	r3, [pc, #364]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	2b09      	cmp	r3, #9
 8005824:	d805      	bhi.n	8005832 <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 8005826:	4b59      	ldr	r3, [pc, #356]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	3301      	adds	r3, #1
 800582c:	4a57      	ldr	r2, [pc, #348]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 800582e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005830:	e002      	b.n	8005838 <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 8005832:	4b56      	ldr	r3, [pc, #344]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005834:	2200      	movs	r2, #0
 8005836:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 8005838:	4854      	ldr	r0, [pc, #336]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 800583a:	f7fe f9f7 	bl	8003c2c <PlayerAnimation>
 800583e:	e015      	b.n	800586c <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8005840:	4b52      	ldr	r3, [pc, #328]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3b0a      	subs	r3, #10
 8005846:	4618      	mov	r0, r3
 8005848:	4b50      	ldr	r3, [pc, #320]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	3b0b      	subs	r3, #11
 800584e:	4619      	mov	r1, r3
 8005850:	2300      	movs	r3, #0
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	2300      	movs	r3, #0
 8005856:	9303      	str	r3, [sp, #12]
 8005858:	2300      	movs	r3, #0
 800585a:	9302      	str	r3, [sp, #8]
 800585c:	230a      	movs	r3, #10
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	4b4b      	ldr	r3, [pc, #300]	@ (8005990 <HAL_UART_RxCpltCallback+0x4a0>)
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2317      	movs	r3, #23
 8005866:	2216      	movs	r2, #22
 8005868:	f7fc f956 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 800586c:	4b49      	ldr	r3, [pc, #292]	@ (8005994 <HAL_UART_RxCpltCallback+0x4a4>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b62      	cmp	r3, #98	@ 0x62
 8005872:	d140      	bne.n	80058f6 <HAL_UART_RxCpltCallback+0x406>
		 if (estadoActual == MENU ) {
 8005874:	4b48      	ldr	r3, [pc, #288]	@ (8005998 <HAL_UART_RxCpltCallback+0x4a8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10e      	bne.n	800589c <HAL_UART_RxCpltCallback+0x3ac>
			 // IMPRIMIR SPRITE DE UN JUGADOR
			 estadoFuturo = SOLO;
 800587e:	4b47      	ldr	r3, [pc, #284]	@ (800599c <HAL_UART_RxCpltCallback+0x4ac>)
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
			 IniciarLevel=1;
 8005884:	4b46      	ldr	r3, [pc, #280]	@ (80059a0 <HAL_UART_RxCpltCallback+0x4b0>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
			 IniciarP1=1;
 800588a:	4b46      	ldr	r3, [pc, #280]	@ (80059a4 <HAL_UART_RxCpltCallback+0x4b4>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
			IniciarLevel2=1;
 8005890:	4b45      	ldr	r3, [pc, #276]	@ (80059a8 <HAL_UART_RxCpltCallback+0x4b8>)
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]
			IniciarP2=1;
 8005896:	4b45      	ldr	r3, [pc, #276]	@ (80059ac <HAL_UART_RxCpltCallback+0x4bc>)
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
		 }
		 if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1 && (estadoActual==SOLO||estadoActual==DUO)){
 800589c:	4b3b      	ldr	r3, [pc, #236]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d128      	bne.n	80058f6 <HAL_UART_RxCpltCallback+0x406>
 80058a4:	4b39      	ldr	r3, [pc, #228]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d124      	bne.n	80058f6 <HAL_UART_RxCpltCallback+0x406>
 80058ac:	4b37      	ldr	r3, [pc, #220]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d120      	bne.n	80058f6 <HAL_UART_RxCpltCallback+0x406>
 80058b4:	4b38      	ldr	r3, [pc, #224]	@ (8005998 <HAL_UART_RxCpltCallback+0x4a8>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d004      	beq.n	80058c8 <HAL_UART_RxCpltCallback+0x3d8>
 80058be:	4b36      	ldr	r3, [pc, #216]	@ (8005998 <HAL_UART_RxCpltCallback+0x4a8>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d116      	bne.n	80058f6 <HAL_UART_RxCpltCallback+0x406>
					p1.IsAttack=1;
 80058c8:	4b30      	ldr	r3, [pc, #192]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	655a      	str	r2, [r3, #84]	@ 0x54
					p1.animationAttack=0;
 80058ce:	4b2f      	ldr	r3, [pc, #188]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	659a      	str	r2, [r3, #88]	@ 0x58
					PlayerHit(&p1, &e1_1);
 80058d6:	4936      	ldr	r1, [pc, #216]	@ (80059b0 <HAL_UART_RxCpltCallback+0x4c0>)
 80058d8:	482c      	ldr	r0, [pc, #176]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058da:	f7fe f8c7 	bl	8003a6c <PlayerHit>
					PlayerHit(&p1, &e1_2);
 80058de:	4935      	ldr	r1, [pc, #212]	@ (80059b4 <HAL_UART_RxCpltCallback+0x4c4>)
 80058e0:	482a      	ldr	r0, [pc, #168]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058e2:	f7fe f8c3 	bl	8003a6c <PlayerHit>
					PlayerHit(&p1, &e1_3);
 80058e6:	4934      	ldr	r1, [pc, #208]	@ (80059b8 <HAL_UART_RxCpltCallback+0x4c8>)
 80058e8:	4828      	ldr	r0, [pc, #160]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058ea:	f7fe f8bf 	bl	8003a6c <PlayerHit>
					PlayerHit_E2(&p1, &e2_1);}
 80058ee:	4933      	ldr	r1, [pc, #204]	@ (80059bc <HAL_UART_RxCpltCallback+0x4cc>)
 80058f0:	4826      	ldr	r0, [pc, #152]	@ (800598c <HAL_UART_RxCpltCallback+0x49c>)
 80058f2:	f7fd fa7f 	bl	8002df4 <PlayerHit_E2>
	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 80058f6:	4b27      	ldr	r3, [pc, #156]	@ (8005994 <HAL_UART_RxCpltCallback+0x4a4>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b31      	cmp	r3, #49	@ 0x31
 80058fc:	d178      	bne.n	80059f0 <HAL_UART_RxCpltCallback+0x500>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80058fe:	4b30      	ldr	r3, [pc, #192]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005902:	2b00      	cmp	r3, #0
 8005904:	d174      	bne.n	80059f0 <HAL_UART_RxCpltCallback+0x500>
 8005906:	4b2e      	ldr	r3, [pc, #184]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d170      	bne.n	80059f0 <HAL_UART_RxCpltCallback+0x500>
 800590e:	4b2c      	ldr	r3, [pc, #176]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d16c      	bne.n	80059f0 <HAL_UART_RxCpltCallback+0x500>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005916:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	1c58      	adds	r0, r3, #1
 8005924:	4b26      	ldr	r3, [pc, #152]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	4b23      	ldr	r3, [pc, #140]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	4b21      	ldr	r3, [pc, #132]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005942:	9400      	str	r4, [sp, #0]
 8005944:	f7fc f838 	bl	80019b8 <FillRect>
				p2.direction=0;
 8005948:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800594a:	2200      	movs	r2, #0
 800594c:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 800594e:	2102      	movs	r1, #2
 8005950:	481b      	ldr	r0, [pc, #108]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005952:	f7fd ff0d 	bl	8003770 <playerCanMove>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d033      	beq.n	80059c4 <HAL_UART_RxCpltCallback+0x4d4>
					p2.y=p2.y-p2.speed;
 800595c:	4b18      	ldr	r3, [pc, #96]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4b17      	ldr	r3, [pc, #92]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	4a16      	ldr	r2, [pc, #88]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005968:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 800596a:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800596c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596e:	2b09      	cmp	r3, #9
 8005970:	d805      	bhi.n	800597e <HAL_UART_RxCpltCallback+0x48e>
							p2.animationWalkUp+=1;
 8005972:	4b13      	ldr	r3, [pc, #76]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005976:	3301      	adds	r3, #1
 8005978:	4a11      	ldr	r2, [pc, #68]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 800597a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800597c:	e002      	b.n	8005984 <HAL_UART_RxCpltCallback+0x494>
							} else{
							  p2.animationWalkUp=0;
 800597e:	4b10      	ldr	r3, [pc, #64]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005980:	2200      	movs	r2, #0
 8005982:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 8005984:	480e      	ldr	r0, [pc, #56]	@ (80059c0 <HAL_UART_RxCpltCallback+0x4d0>)
 8005986:	f7fe f951 	bl	8003c2c <PlayerAnimation>
 800598a:	e031      	b.n	80059f0 <HAL_UART_RxCpltCallback+0x500>
 800598c:	2001c7cc 	.word	0x2001c7cc
 8005990:	2000fca0 	.word	0x2000fca0
 8005994:	2001c7c0 	.word	0x2001c7c0
 8005998:	20016a78 	.word	0x20016a78
 800599c:	2001cb28 	.word	0x2001cb28
 80059a0:	2001cb2c 	.word	0x2001cb2c
 80059a4:	2001cb36 	.word	0x2001cb36
 80059a8:	2001cb30 	.word	0x2001cb30
 80059ac:	2001cb37 	.word	0x2001cb37
 80059b0:	2001c8b4 	.word	0x2001c8b4
 80059b4:	2001c8e8 	.word	0x2001c8e8
 80059b8:	2001c91c 	.word	0x2001c91c
 80059bc:	2001c9ec 	.word	0x2001c9ec
 80059c0:	2001c840 	.word	0x2001c840
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 80059c4:	4b9a      	ldr	r3, [pc, #616]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3b08      	subs	r3, #8
 80059ca:	4618      	mov	r0, r3
 80059cc:	4b98      	ldr	r3, [pc, #608]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	3b0d      	subs	r3, #13
 80059d2:	4619      	mov	r1, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	2300      	movs	r3, #0
 80059da:	9303      	str	r3, [sp, #12]
 80059dc:	2300      	movs	r3, #0
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	230a      	movs	r3, #10
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	4b93      	ldr	r3, [pc, #588]	@ (8005c34 <HAL_UART_RxCpltCallback+0x744>)
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	231a      	movs	r3, #26
 80059ea:	2212      	movs	r2, #18
 80059ec:	f7fc f894 	bl	8001b18 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 80059f0:	4b91      	ldr	r3, [pc, #580]	@ (8005c38 <HAL_UART_RxCpltCallback+0x748>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b32      	cmp	r3, #50	@ 0x32
 80059f6:	d15c      	bne.n	8005ab2 <HAL_UART_RxCpltCallback+0x5c2>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80059f8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 80059fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d158      	bne.n	8005ab2 <HAL_UART_RxCpltCallback+0x5c2>
 8005a00:	4b8b      	ldr	r3, [pc, #556]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d154      	bne.n	8005ab2 <HAL_UART_RxCpltCallback+0x5c2>
 8005a08:	4b89      	ldr	r3, [pc, #548]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d150      	bne.n	8005ab2 <HAL_UART_RxCpltCallback+0x5c2>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005a10:	4b87      	ldr	r3, [pc, #540]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b86      	ldr	r3, [pc, #536]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	1c58      	adds	r0, r3, #1
 8005a1e:	4b84      	ldr	r3, [pc, #528]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b83      	ldr	r3, [pc, #524]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	1c59      	adds	r1, r3, #1
 8005a2c:	4b80      	ldr	r3, [pc, #512]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	4b7f      	ldr	r3, [pc, #508]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005a3c:	9400      	str	r4, [sp, #0]
 8005a3e:	f7fb ffbb 	bl	80019b8 <FillRect>
			p2.direction=1;
 8005a42:	4b7b      	ldr	r3, [pc, #492]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4879      	ldr	r0, [pc, #484]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a4c:	f7fd fe90 	bl	8003770 <playerCanMove>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d017      	beq.n	8005a86 <HAL_UART_RxCpltCallback+0x596>
				p2.x=p2.x+p2.speed;
 8005a56:	4b76      	ldr	r3, [pc, #472]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b75      	ldr	r3, [pc, #468]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	4413      	add	r3, r2
 8005a60:	4a73      	ldr	r2, [pc, #460]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a62:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 8005a64:	4b72      	ldr	r3, [pc, #456]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d805      	bhi.n	8005a78 <HAL_UART_RxCpltCallback+0x588>
						p2.animationWalkRight+=1;
 8005a6c:	4b70      	ldr	r3, [pc, #448]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a6f      	ldr	r2, [pc, #444]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a74:	6493      	str	r3, [r2, #72]	@ 0x48
 8005a76:	e002      	b.n	8005a7e <HAL_UART_RxCpltCallback+0x58e>
						} else{
						  p2.animationWalkRight=0;
 8005a78:	4b6d      	ldr	r3, [pc, #436]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 8005a7e:	486c      	ldr	r0, [pc, #432]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a80:	f7fe f8d4 	bl	8003c2c <PlayerAnimation>
 8005a84:	e015      	b.n	8005ab2 <HAL_UART_RxCpltCallback+0x5c2>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8005a86:	4b6a      	ldr	r3, [pc, #424]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3b0a      	subs	r3, #10
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	4b68      	ldr	r3, [pc, #416]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	3b0b      	subs	r3, #11
 8005a94:	4619      	mov	r1, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9302      	str	r3, [sp, #8]
 8005aa2:	230a      	movs	r3, #10
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	4b65      	ldr	r3, [pc, #404]	@ (8005c3c <HAL_UART_RxCpltCallback+0x74c>)
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2317      	movs	r3, #23
 8005aac:	2216      	movs	r2, #22
 8005aae:	f7fc f833 	bl	8001b18 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 8005ab2:	4b61      	ldr	r3, [pc, #388]	@ (8005c38 <HAL_UART_RxCpltCallback+0x748>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b33      	cmp	r3, #51	@ 0x33
 8005ab8:	d175      	bne.n	8005ba6 <HAL_UART_RxCpltCallback+0x6b6>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005aba:	4b5d      	ldr	r3, [pc, #372]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d171      	bne.n	8005ba6 <HAL_UART_RxCpltCallback+0x6b6>
 8005ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d16d      	bne.n	8005ba6 <HAL_UART_RxCpltCallback+0x6b6>
 8005aca:	4b59      	ldr	r3, [pc, #356]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d169      	bne.n	8005ba6 <HAL_UART_RxCpltCallback+0x6b6>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005ad2:	4b57      	ldr	r3, [pc, #348]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b56      	ldr	r3, [pc, #344]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	1c58      	adds	r0, r3, #1
 8005ae0:	4b53      	ldr	r3, [pc, #332]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4b52      	ldr	r3, [pc, #328]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	1c59      	adds	r1, r3, #1
 8005aee:	4b50      	ldr	r3, [pc, #320]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	4b4e      	ldr	r3, [pc, #312]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005afe:	9400      	str	r4, [sp, #0]
 8005b00:	f7fb ff5a 	bl	80019b8 <FillRect>
			p2.direction=2;
 8005b04:	4b4a      	ldr	r3, [pc, #296]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b06:	2202      	movs	r2, #2
 8005b08:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4848      	ldr	r0, [pc, #288]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b0e:	f7fd fe2f 	bl	8003770 <playerCanMove>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d017      	beq.n	8005b48 <HAL_UART_RxCpltCallback+0x658>
		    p2.y=p2.y+p2.speed;
 8005b18:	4b45      	ldr	r3, [pc, #276]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	4b44      	ldr	r3, [pc, #272]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	4a43      	ldr	r2, [pc, #268]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b24:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 8005b26:	4b42      	ldr	r3, [pc, #264]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	2b09      	cmp	r3, #9
 8005b2c:	d805      	bhi.n	8005b3a <HAL_UART_RxCpltCallback+0x64a>
		    		p2.animationWalkDown+=1;
 8005b2e:	4b40      	ldr	r3, [pc, #256]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a3e      	ldr	r2, [pc, #248]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b38:	e002      	b.n	8005b40 <HAL_UART_RxCpltCallback+0x650>
		    			} else{
		    				p2.animationWalkDown=0;
 8005b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 8005b40:	483b      	ldr	r0, [pc, #236]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b42:	f7fe f873 	bl	8003c2c <PlayerAnimation>
 8005b46:	e02e      	b.n	8005ba6 <HAL_UART_RxCpltCallback+0x6b6>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005b48:	4b39      	ldr	r3, [pc, #228]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b38      	ldr	r3, [pc, #224]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	1c58      	adds	r0, r3, #1
 8005b56:	4b36      	ldr	r3, [pc, #216]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	4b32      	ldr	r3, [pc, #200]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	4b31      	ldr	r3, [pc, #196]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005b74:	9400      	str	r4, [sp, #0]
 8005b76:	f7fb ff1f 	bl	80019b8 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3b08      	subs	r3, #8
 8005b80:	4618      	mov	r0, r3
 8005b82:	4b2b      	ldr	r3, [pc, #172]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	3b0c      	subs	r3, #12
 8005b88:	4619      	mov	r1, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9303      	str	r3, [sp, #12]
 8005b92:	2300      	movs	r3, #0
 8005b94:	9302      	str	r3, [sp, #8]
 8005b96:	230a      	movs	r3, #10
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	4b29      	ldr	r3, [pc, #164]	@ (8005c40 <HAL_UART_RxCpltCallback+0x750>)
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	231a      	movs	r3, #26
 8005ba0:	2212      	movs	r2, #18
 8005ba2:	f7fb ffb9 	bl	8001b18 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 8005ba6:	4b24      	ldr	r3, [pc, #144]	@ (8005c38 <HAL_UART_RxCpltCallback+0x748>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b34      	cmp	r3, #52	@ 0x34
 8005bac:	d167      	bne.n	8005c7e <HAL_UART_RxCpltCallback+0x78e>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005bae:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d163      	bne.n	8005c7e <HAL_UART_RxCpltCallback+0x78e>
 8005bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d15f      	bne.n	8005c7e <HAL_UART_RxCpltCallback+0x78e>
 8005bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d15b      	bne.n	8005c7e <HAL_UART_RxCpltCallback+0x78e>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b19      	ldr	r3, [pc, #100]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	1c58      	adds	r0, r3, #1
 8005bd4:	4b16      	ldr	r3, [pc, #88]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005bf2:	9400      	str	r4, [sp, #0]
 8005bf4:	f7fb fee0 	bl	80019b8 <FillRect>
			p2.direction=3;
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 8005bfe:	2103      	movs	r1, #3
 8005c00:	480b      	ldr	r0, [pc, #44]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c02:	f7fd fdb5 	bl	8003770 <playerCanMove>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d022      	beq.n	8005c52 <HAL_UART_RxCpltCallback+0x762>
				p2.x=p2.x-p2.speed;
 8005c0c:	4b08      	ldr	r3, [pc, #32]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b07      	ldr	r3, [pc, #28]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	4a06      	ldr	r2, [pc, #24]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c18:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 8005c1a:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d810      	bhi.n	8005c44 <HAL_UART_RxCpltCallback+0x754>
						p2.animationWalkLeft+=1;
 8005c22:	4b03      	ldr	r3, [pc, #12]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a01      	ldr	r2, [pc, #4]	@ (8005c30 <HAL_UART_RxCpltCallback+0x740>)
 8005c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c2c:	e00d      	b.n	8005c4a <HAL_UART_RxCpltCallback+0x75a>
 8005c2e:	bf00      	nop
 8005c30:	2001c840 	.word	0x2001c840
 8005c34:	20012428 	.word	0x20012428
 8005c38:	2001c7c0 	.word	0x2001c7c0
 8005c3c:	2000fca0 	.word	0x2000fca0
 8005c40:	200148b8 	.word	0x200148b8
						} else{
						  p2.animationWalkLeft=0;
 8005c44:	4b52      	ldr	r3, [pc, #328]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 8005c4a:	4851      	ldr	r0, [pc, #324]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005c4c:	f7fd ffee 	bl	8003c2c <PlayerAnimation>
 8005c50:	e015      	b.n	8005c7e <HAL_UART_RxCpltCallback+0x78e>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8005c52:	4b4f      	ldr	r3, [pc, #316]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3b0a      	subs	r3, #10
 8005c58:	4618      	mov	r0, r3
 8005c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	3b0b      	subs	r3, #11
 8005c60:	4619      	mov	r1, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9303      	str	r3, [sp, #12]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9302      	str	r3, [sp, #8]
 8005c6e:	230a      	movs	r3, #10
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	4b48      	ldr	r3, [pc, #288]	@ (8005d94 <HAL_UART_RxCpltCallback+0x8a4>)
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	2317      	movs	r3, #23
 8005c78:	2216      	movs	r2, #22
 8005c7a:	f7fb ff4d 	bl	8001b18 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 8005c7e:	4b46      	ldr	r3, [pc, #280]	@ (8005d98 <HAL_UART_RxCpltCallback+0x8a8>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b35      	cmp	r3, #53	@ 0x35
 8005c84:	d13b      	bne.n	8005cfe <HAL_UART_RxCpltCallback+0x80e>
		if (estadoActual == MENU ) {
 8005c86:	4b45      	ldr	r3, [pc, #276]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10e      	bne.n	8005cae <HAL_UART_RxCpltCallback+0x7be>
					 // IMPRIMIR SPRITE DE DOS JUGADORES
			estadoFuturo = DUO;
 8005c90:	4b43      	ldr	r3, [pc, #268]	@ (8005da0 <HAL_UART_RxCpltCallback+0x8b0>)
 8005c92:	2202      	movs	r2, #2
 8005c94:	701a      	strb	r2, [r3, #0]
			IniciarLevel=1;
 8005c96:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <HAL_UART_RxCpltCallback+0x8b4>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
			IniciarLevel2=1;
 8005c9c:	4b42      	ldr	r3, [pc, #264]	@ (8005da8 <HAL_UART_RxCpltCallback+0x8b8>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
			IniciarP1=1;
 8005ca2:	4b42      	ldr	r3, [pc, #264]	@ (8005dac <HAL_UART_RxCpltCallback+0x8bc>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
			IniciarP2=1;
 8005ca8:	4b41      	ldr	r3, [pc, #260]	@ (8005db0 <HAL_UART_RxCpltCallback+0x8c0>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
		}

		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1 && estadoActual==DUO){
 8005cae:	4b38      	ldr	r3, [pc, #224]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d123      	bne.n	8005cfe <HAL_UART_RxCpltCallback+0x80e>
 8005cb6:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11f      	bne.n	8005cfe <HAL_UART_RxCpltCallback+0x80e>
 8005cbe:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d11b      	bne.n	8005cfe <HAL_UART_RxCpltCallback+0x80e>
 8005cc6:	4b35      	ldr	r3, [pc, #212]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d116      	bne.n	8005cfe <HAL_UART_RxCpltCallback+0x80e>
			p2.IsAttack=1;
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	655a      	str	r2, [r3, #84]	@ 0x54
			p2.animationAttack=0;
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	659a      	str	r2, [r3, #88]	@ 0x58
			PlayerHit(&p2, &e1_4);
 8005cde:	4935      	ldr	r1, [pc, #212]	@ (8005db4 <HAL_UART_RxCpltCallback+0x8c4>)
 8005ce0:	482b      	ldr	r0, [pc, #172]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005ce2:	f7fd fec3 	bl	8003a6c <PlayerHit>
			PlayerHit(&p2, &e1_5);
 8005ce6:	4934      	ldr	r1, [pc, #208]	@ (8005db8 <HAL_UART_RxCpltCallback+0x8c8>)
 8005ce8:	4829      	ldr	r0, [pc, #164]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cea:	f7fd febf 	bl	8003a6c <PlayerHit>
			PlayerHit(&p2, &e1_6);
 8005cee:	4933      	ldr	r1, [pc, #204]	@ (8005dbc <HAL_UART_RxCpltCallback+0x8cc>)
 8005cf0:	4827      	ldr	r0, [pc, #156]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cf2:	f7fd febb 	bl	8003a6c <PlayerHit>
			PlayerHit_E2(&p2, &e2_2);}
 8005cf6:	4932      	ldr	r1, [pc, #200]	@ (8005dc0 <HAL_UART_RxCpltCallback+0x8d0>)
 8005cf8:	4825      	ldr	r0, [pc, #148]	@ (8005d90 <HAL_UART_RxCpltCallback+0x8a0>)
 8005cfa:	f7fd f87b 	bl	8002df4 <PlayerHit_E2>

	}

	if (buffer[0] == '6') {
 8005cfe:	4b26      	ldr	r3, [pc, #152]	@ (8005d98 <HAL_UART_RxCpltCallback+0x8a8>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b36      	cmp	r3, #54	@ 0x36
 8005d04:	d13b      	bne.n	8005d7e <HAL_UART_RxCpltCallback+0x88e>
		if (estadoActual == MENU) {
 8005d06:	4b25      	ldr	r3, [pc, #148]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d108      	bne.n	8005d22 <HAL_UART_RxCpltCallback+0x832>
			// Al presionar 6 desde el menú, confirma el cambio al estado seleccionado (SOLO o DUO)
			estadoActual = estadoFuturo;
 8005d10:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <HAL_UART_RxCpltCallback+0x8b0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	4b21      	ldr	r3, [pc, #132]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d18:	701a      	strb	r2, [r3, #0]
			repintarFondo = 1;
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc4 <HAL_UART_RxCpltCallback+0x8d4>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e02d      	b.n	8005d7e <HAL_UART_RxCpltCallback+0x88e>
		} else if (estadoActual == SOLO || estadoActual == DUO) {
 8005d22:	4b1e      	ldr	r3, [pc, #120]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d004      	beq.n	8005d36 <HAL_UART_RxCpltCallback+0x846>
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d116      	bne.n	8005d64 <HAL_UART_RxCpltCallback+0x874>
			// Si ya estamos en SOLO o DUO, cambiamos a PAUSA
			if (estadoActual != PAUSA) {
 8005d36:	4b19      	ldr	r3, [pc, #100]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d01e      	beq.n	8005d7e <HAL_UART_RxCpltCallback+0x88e>
				estadoAnterior = estadoActual;  // Guarda el estado actual (SOLO o DUO)
 8005d40:	4b16      	ldr	r3, [pc, #88]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4b20      	ldr	r3, [pc, #128]	@ (8005dc8 <HAL_UART_RxCpltCallback+0x8d8>)
 8005d48:	701a      	strb	r2, [r3, #0]
				pintarFondoPausa = 1;
 8005d4a:	4b20      	ldr	r3, [pc, #128]	@ (8005dcc <HAL_UART_RxCpltCallback+0x8dc>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
				estadoActual = PAUSA;
 8005d50:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d52:	2203      	movs	r2, #3
 8005d54:	701a      	strb	r2, [r3, #0]
				IniciarP1=0;
 8005d56:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <HAL_UART_RxCpltCallback+0x8bc>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
				IniciarP2=0;// Cambia a PAUSA
 8005d5c:	4b14      	ldr	r3, [pc, #80]	@ (8005db0 <HAL_UART_RxCpltCallback+0x8c0>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
			if (estadoActual != PAUSA) {
 8005d62:	e00c      	b.n	8005d7e <HAL_UART_RxCpltCallback+0x88e>
			}
		} else if (estadoActual == PAUSA) {
 8005d64:	4b0d      	ldr	r3, [pc, #52]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d107      	bne.n	8005d7e <HAL_UART_RxCpltCallback+0x88e>
			// Si estamos en PAUSA, volvemos al estado anterior
			estadoActual = estadoAnterior;     // Restauramos el estado SOLO o DUO
 8005d6e:	4b16      	ldr	r3, [pc, #88]	@ (8005dc8 <HAL_UART_RxCpltCallback+0x8d8>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <HAL_UART_RxCpltCallback+0x8ac>)
 8005d76:	701a      	strb	r2, [r3, #0]
			repintarFondo = 1;                 // Indicamos que el fondo necesita repintarse
 8005d78:	4b12      	ldr	r3, [pc, #72]	@ (8005dc4 <HAL_UART_RxCpltCallback+0x8d4>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
		}
	}

	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4905      	ldr	r1, [pc, #20]	@ (8005d98 <HAL_UART_RxCpltCallback+0x8a8>)
 8005d82:	4813      	ldr	r0, [pc, #76]	@ (8005dd0 <HAL_UART_RxCpltCallback+0x8e0>)
 8005d84:	f003 f81d 	bl	8008dc2 <HAL_UART_Receive_IT>
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd90      	pop	{r4, r7, pc}
 8005d90:	2001c840 	.word	0x2001c840
 8005d94:	2000fca0 	.word	0x2000fca0
 8005d98:	2001c7c0 	.word	0x2001c7c0
 8005d9c:	20016a78 	.word	0x20016a78
 8005da0:	2001cb28 	.word	0x2001cb28
 8005da4:	2001cb2c 	.word	0x2001cb2c
 8005da8:	2001cb30 	.word	0x2001cb30
 8005dac:	2001cb36 	.word	0x2001cb36
 8005db0:	2001cb37 	.word	0x2001cb37
 8005db4:	2001c950 	.word	0x2001c950
 8005db8:	2001c984 	.word	0x2001c984
 8005dbc:	2001c9b8 	.word	0x2001c9b8
 8005dc0:	2001ca30 	.word	0x2001ca30
 8005dc4:	2001cb34 	.word	0x2001cb34
 8005dc8:	20016a79 	.word	0x20016a79
 8005dcc:	2001cb35 	.word	0x2001cb35
 8005dd0:	20017c78 	.word	0x20017c78

08005dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005dd8:	b672      	cpsid	i
}
 8005dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <Error_Handler+0x8>

08005de0 <HAL_MspInit>:
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <HAL_MspInit+0x4c>)
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	4a0f      	ldr	r2, [pc, #60]	@ (8005e2c <HAL_MspInit+0x4c>)
 8005df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005df6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e2c <HAL_MspInit+0x4c>)
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2300      	movs	r3, #0
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4b09      	ldr	r3, [pc, #36]	@ (8005e2c <HAL_MspInit+0x4c>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	4a08      	ldr	r2, [pc, #32]	@ (8005e2c <HAL_MspInit+0x4c>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e12:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <HAL_MspInit+0x4c>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800

08005e30 <HAL_SPI_MspInit>:
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	@ 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	f107 0314 	add.w	r3, r7, #20
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a19      	ldr	r2, [pc, #100]	@ (8005eb4 <HAL_SPI_MspInit+0x84>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d12b      	bne.n	8005eaa <HAL_SPI_MspInit+0x7a>
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	4b18      	ldr	r3, [pc, #96]	@ (8005eb8 <HAL_SPI_MspInit+0x88>)
 8005e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5a:	4a17      	ldr	r2, [pc, #92]	@ (8005eb8 <HAL_SPI_MspInit+0x88>)
 8005e5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <HAL_SPI_MspInit+0x88>)
 8005e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	4b11      	ldr	r3, [pc, #68]	@ (8005eb8 <HAL_SPI_MspInit+0x88>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	4a10      	ldr	r2, [pc, #64]	@ (8005eb8 <HAL_SPI_MspInit+0x88>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <HAL_SPI_MspInit+0x88>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	23e0      	movs	r3, #224	@ 0xe0
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	2302      	movs	r3, #2
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	2303      	movs	r3, #3
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	2305      	movs	r3, #5
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4805      	ldr	r0, [pc, #20]	@ (8005ebc <HAL_SPI_MspInit+0x8c>)
 8005ea6:	f000 fc65 	bl	8006774 <HAL_GPIO_Init>
 8005eaa:	bf00      	nop
 8005eac:	3728      	adds	r7, #40	@ 0x28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40013000 	.word	0x40013000
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40020000 	.word	0x40020000

08005ec0 <HAL_TIM_Base_MspInit>:
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <HAL_TIM_Base_MspInit+0x64>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_Base_MspInit+0x30>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4b14      	ldr	r3, [pc, #80]	@ (8005f28 <HAL_TIM_Base_MspInit+0x68>)
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	4a13      	ldr	r2, [pc, #76]	@ (8005f28 <HAL_TIM_Base_MspInit+0x68>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ee2:	4b11      	ldr	r3, [pc, #68]	@ (8005f28 <HAL_TIM_Base_MspInit+0x68>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	e012      	b.n	8005f16 <HAL_TIM_Base_MspInit+0x56>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef8:	d10d      	bne.n	8005f16 <HAL_TIM_Base_MspInit+0x56>
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <HAL_TIM_Base_MspInit+0x68>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	4a09      	ldr	r2, [pc, #36]	@ (8005f28 <HAL_TIM_Base_MspInit+0x68>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f0a:	4b07      	ldr	r3, [pc, #28]	@ (8005f28 <HAL_TIM_Base_MspInit+0x68>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40023800 	.word	0x40023800

08005f2c <HAL_TIM_MspPostInit>:
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	f107 0314 	add.w	r3, r7, #20
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	611a      	str	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a24      	ldr	r2, [pc, #144]	@ (8005fdc <HAL_TIM_MspPostInit+0xb0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d11f      	bne.n	8005f8e <HAL_TIM_MspPostInit+0x62>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	4b23      	ldr	r3, [pc, #140]	@ (8005fe0 <HAL_TIM_MspPostInit+0xb4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	4a22      	ldr	r2, [pc, #136]	@ (8005fe0 <HAL_TIM_MspPostInit+0xb4>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f5e:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <HAL_TIM_MspPostInit+0xb4>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	2302      	movs	r3, #2
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	4619      	mov	r1, r3
 8005f86:	4817      	ldr	r0, [pc, #92]	@ (8005fe4 <HAL_TIM_MspPostInit+0xb8>)
 8005f88:	f000 fbf4 	bl	8006774 <HAL_GPIO_Init>
 8005f8c:	e022      	b.n	8005fd4 <HAL_TIM_MspPostInit+0xa8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f96:	d11d      	bne.n	8005fd4 <HAL_TIM_MspPostInit+0xa8>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <HAL_TIM_MspPostInit+0xb4>)
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8005fe0 <HAL_TIM_MspPostInit+0xb4>)
 8005fa2:	f043 0302 	orr.w	r3, r3, #2
 8005fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <HAL_TIM_MspPostInit+0xb4>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc8:	f107 0314 	add.w	r3, r7, #20
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4806      	ldr	r0, [pc, #24]	@ (8005fe8 <HAL_TIM_MspPostInit+0xbc>)
 8005fd0:	f000 fbd0 	bl	8006774 <HAL_GPIO_Init>
 8005fd4:	bf00      	nop
 8005fd6:	3728      	adds	r7, #40	@ 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40020000 	.word	0x40020000
 8005fe8:	40020400 	.word	0x40020400

08005fec <HAL_UART_MspInit>:
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	@ 0x30
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	f107 031c 	add.w	r3, r7, #28
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	611a      	str	r2, [r3, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a49      	ldr	r2, [pc, #292]	@ (8006130 <HAL_UART_MspInit+0x144>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d153      	bne.n	80060b6 <HAL_UART_MspInit+0xca>
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	4b48      	ldr	r3, [pc, #288]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	4a47      	ldr	r2, [pc, #284]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006018:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800601c:	6413      	str	r3, [r2, #64]	@ 0x40
 800601e:	4b45      	ldr	r3, [pc, #276]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	4b41      	ldr	r3, [pc, #260]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006032:	4a40      	ldr	r2, [pc, #256]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6313      	str	r3, [r2, #48]	@ 0x30
 800603a:	4b3e      	ldr	r3, [pc, #248]	@ (8006134 <HAL_UART_MspInit+0x148>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	4b3a      	ldr	r3, [pc, #232]	@ (8006134 <HAL_UART_MspInit+0x148>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	4a39      	ldr	r2, [pc, #228]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006050:	f043 0308 	orr.w	r3, r3, #8
 8006054:	6313      	str	r3, [r2, #48]	@ 0x30
 8006056:	4b37      	ldr	r3, [pc, #220]	@ (8006134 <HAL_UART_MspInit+0x148>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	2302      	movs	r3, #2
 800606a:	623b      	str	r3, [r7, #32]
 800606c:	2300      	movs	r3, #0
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006070:	2303      	movs	r3, #3
 8006072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006074:	2308      	movs	r3, #8
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006078:	f107 031c 	add.w	r3, r7, #28
 800607c:	4619      	mov	r1, r3
 800607e:	482e      	ldr	r0, [pc, #184]	@ (8006138 <HAL_UART_MspInit+0x14c>)
 8006080:	f000 fb78 	bl	8006774 <HAL_GPIO_Init>
 8006084:	2304      	movs	r3, #4
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	2302      	movs	r3, #2
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006090:	2303      	movs	r3, #3
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006094:	2308      	movs	r3, #8
 8006096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006098:	f107 031c 	add.w	r3, r7, #28
 800609c:	4619      	mov	r1, r3
 800609e:	4827      	ldr	r0, [pc, #156]	@ (800613c <HAL_UART_MspInit+0x150>)
 80060a0:	f000 fb68 	bl	8006774 <HAL_GPIO_Init>
 80060a4:	2200      	movs	r2, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	2035      	movs	r0, #53	@ 0x35
 80060aa:	f000 fa8e 	bl	80065ca <HAL_NVIC_SetPriority>
 80060ae:	2035      	movs	r0, #53	@ 0x35
 80060b0:	f000 faa7 	bl	8006602 <HAL_NVIC_EnableIRQ>
 80060b4:	e038      	b.n	8006128 <HAL_UART_MspInit+0x13c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	@ (8006140 <HAL_UART_MspInit+0x154>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d133      	bne.n	8006128 <HAL_UART_MspInit+0x13c>
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006134 <HAL_UART_MspInit+0x148>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006134 <HAL_UART_MspInit+0x148>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80060d0:	4b18      	ldr	r3, [pc, #96]	@ (8006134 <HAL_UART_MspInit+0x148>)
 80060d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2300      	movs	r3, #0
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	4b14      	ldr	r3, [pc, #80]	@ (8006134 <HAL_UART_MspInit+0x148>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	4a13      	ldr	r2, [pc, #76]	@ (8006134 <HAL_UART_MspInit+0x148>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ec:	4b11      	ldr	r3, [pc, #68]	@ (8006134 <HAL_UART_MspInit+0x148>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	230c      	movs	r3, #12
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	2302      	movs	r3, #2
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	2300      	movs	r3, #0
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
 8006104:	2303      	movs	r3, #3
 8006106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006108:	2307      	movs	r3, #7
 800610a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610c:	f107 031c 	add.w	r3, r7, #28
 8006110:	4619      	mov	r1, r3
 8006112:	480c      	ldr	r0, [pc, #48]	@ (8006144 <HAL_UART_MspInit+0x158>)
 8006114:	f000 fb2e 	bl	8006774 <HAL_GPIO_Init>
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	2026      	movs	r0, #38	@ 0x26
 800611e:	f000 fa54 	bl	80065ca <HAL_NVIC_SetPriority>
 8006122:	2026      	movs	r0, #38	@ 0x26
 8006124:	f000 fa6d 	bl	8006602 <HAL_NVIC_EnableIRQ>
 8006128:	bf00      	nop
 800612a:	3730      	adds	r7, #48	@ 0x30
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40005000 	.word	0x40005000
 8006134:	40023800 	.word	0x40023800
 8006138:	40020800 	.word	0x40020800
 800613c:	40020c00 	.word	0x40020c00
 8006140:	40004400 	.word	0x40004400
 8006144:	40020000 	.word	0x40020000

08006148 <NMI_Handler>:
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <NMI_Handler+0x4>

08006150 <HardFault_Handler>:
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <HardFault_Handler+0x4>

08006158 <MemManage_Handler>:
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <MemManage_Handler+0x4>

08006160 <BusFault_Handler>:
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <BusFault_Handler+0x4>

08006168 <UsageFault_Handler>:
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <UsageFault_Handler+0x4>

08006170 <SVC_Handler>:
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <DebugMon_Handler>:
 800617e:	b480      	push	{r7}
 8006180:	af00      	add	r7, sp, #0
 8006182:	bf00      	nop
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <PendSV_Handler>:
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
 8006190:	bf00      	nop
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <SysTick_Handler>:
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <SysTick_Handler+0x38>)
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <SysTick_Handler+0x18>
 80061a8:	4b0a      	ldr	r3, [pc, #40]	@ (80061d4 <SysTick_Handler+0x38>)
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <SysTick_Handler+0x38>)
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	4b08      	ldr	r3, [pc, #32]	@ (80061d8 <SysTick_Handler+0x3c>)
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <SysTick_Handler+0x2c>
 80061bc:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <SysTick_Handler+0x3c>)
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <SysTick_Handler+0x3c>)
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	f000 f8e0 	bl	800638c <HAL_IncTick>
 80061cc:	f000 fa33 	bl	8006636 <HAL_SYSTICK_IRQHandler>
 80061d0:	bf00      	nop
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20016b08 	.word	0x20016b08
 80061d8:	20016b0a 	.word	0x20016b0a

080061dc <USART2_IRQHandler>:
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4802      	ldr	r0, [pc, #8]	@ (80061ec <USART2_IRQHandler+0x10>)
 80061e2:	f002 fe13 	bl	8008e0c <HAL_UART_IRQHandler>
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20017c78 	.word	0x20017c78

080061f0 <UART5_IRQHandler>:
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	4802      	ldr	r0, [pc, #8]	@ (8006200 <UART5_IRQHandler+0x10>)
 80061f6:	f002 fe09 	bl	8008e0c <HAL_UART_IRQHandler>
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20017c30 	.word	0x20017c30

08006204 <_sbrk>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	4a14      	ldr	r2, [pc, #80]	@ (8006260 <_sbrk+0x5c>)
 800620e:	4b15      	ldr	r3, [pc, #84]	@ (8006264 <_sbrk+0x60>)
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	4b13      	ldr	r3, [pc, #76]	@ (8006268 <_sbrk+0x64>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <_sbrk+0x22>
 8006220:	4b11      	ldr	r3, [pc, #68]	@ (8006268 <_sbrk+0x64>)
 8006222:	4a12      	ldr	r2, [pc, #72]	@ (800626c <_sbrk+0x68>)
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <_sbrk+0x64>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d207      	bcs.n	8006244 <_sbrk+0x40>
 8006234:	f006 fce8 	bl	800cc08 <__errno>
 8006238:	4603      	mov	r3, r0
 800623a:	220c      	movs	r2, #12
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	e009      	b.n	8006258 <_sbrk+0x54>
 8006244:	4b08      	ldr	r3, [pc, #32]	@ (8006268 <_sbrk+0x64>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <_sbrk+0x64>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	4a05      	ldr	r2, [pc, #20]	@ (8006268 <_sbrk+0x64>)
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20020000 	.word	0x20020000
 8006264:	00000400 	.word	0x00000400
 8006268:	2001cb38 	.word	0x2001cb38
 800626c:	2001cec8 	.word	0x2001cec8

08006270 <SystemInit>:
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
 8006274:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <SystemInit+0x20>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627a:	4a05      	ldr	r2, [pc, #20]	@ (8006290 <SystemInit+0x20>)
 800627c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000ed00 	.word	0xe000ed00

08006294 <Reset_Handler>:
 8006294:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062cc <LoopFillZerobss+0xe>
 8006298:	f7ff ffea 	bl	8006270 <SystemInit>
 800629c:	480c      	ldr	r0, [pc, #48]	@ (80062d0 <LoopFillZerobss+0x12>)
 800629e:	490d      	ldr	r1, [pc, #52]	@ (80062d4 <LoopFillZerobss+0x16>)
 80062a0:	4a0d      	ldr	r2, [pc, #52]	@ (80062d8 <LoopFillZerobss+0x1a>)
 80062a2:	2300      	movs	r3, #0
 80062a4:	e002      	b.n	80062ac <LoopCopyDataInit>

080062a6 <CopyDataInit>:
 80062a6:	58d4      	ldr	r4, [r2, r3]
 80062a8:	50c4      	str	r4, [r0, r3]
 80062aa:	3304      	adds	r3, #4

080062ac <LoopCopyDataInit>:
 80062ac:	18c4      	adds	r4, r0, r3
 80062ae:	428c      	cmp	r4, r1
 80062b0:	d3f9      	bcc.n	80062a6 <CopyDataInit>
 80062b2:	4a0a      	ldr	r2, [pc, #40]	@ (80062dc <LoopFillZerobss+0x1e>)
 80062b4:	4c0a      	ldr	r4, [pc, #40]	@ (80062e0 <LoopFillZerobss+0x22>)
 80062b6:	2300      	movs	r3, #0
 80062b8:	e001      	b.n	80062be <LoopFillZerobss>

080062ba <FillZerobss>:
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	3204      	adds	r2, #4

080062be <LoopFillZerobss>:
 80062be:	42a2      	cmp	r2, r4
 80062c0:	d3fb      	bcc.n	80062ba <FillZerobss>
 80062c2:	f006 fca7 	bl	800cc14 <__libc_init_array>
 80062c6:	f7fe f9ab 	bl	8004620 <main>
 80062ca:	4770      	bx	lr
 80062cc:	20020000 	.word	0x20020000
 80062d0:	20000000 	.word	0x20000000
 80062d4:	20016aec 	.word	0x20016aec
 80062d8:	080141c8 	.word	0x080141c8
 80062dc:	20016aec 	.word	0x20016aec
 80062e0:	2001cec4 	.word	0x2001cec4

080062e4 <ADC_IRQHandler>:
 80062e4:	e7fe      	b.n	80062e4 <ADC_IRQHandler>
	...

080062e8 <HAL_Init>:
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006328 <HAL_Init+0x40>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006328 <HAL_Init+0x40>)
 80062f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <HAL_Init+0x40>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006328 <HAL_Init+0x40>)
 80062fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4b08      	ldr	r3, [pc, #32]	@ (8006328 <HAL_Init+0x40>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a07      	ldr	r2, [pc, #28]	@ (8006328 <HAL_Init+0x40>)
 800630a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	2003      	movs	r0, #3
 8006312:	f000 f94f 	bl	80065b4 <HAL_NVIC_SetPriorityGrouping>
 8006316:	200f      	movs	r0, #15
 8006318:	f000 f808 	bl	800632c <HAL_InitTick>
 800631c:	f7ff fd60 	bl	8005de0 <HAL_MspInit>
 8006320:	2300      	movs	r3, #0
 8006322:	4618      	mov	r0, r3
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40023c00 	.word	0x40023c00

0800632c <HAL_InitTick>:
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <HAL_InitTick+0x54>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <HAL_InitTick+0x58>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	4619      	mov	r1, r3
 800633e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006342:	fbb3 f3f1 	udiv	r3, r3, r1
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f967 	bl	800661e <HAL_SYSTICK_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_InitTick+0x2e>
 8006356:	2301      	movs	r3, #1
 8006358:	e00e      	b.n	8006378 <HAL_InitTick+0x4c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b0f      	cmp	r3, #15
 800635e:	d80a      	bhi.n	8006376 <HAL_InitTick+0x4a>
 8006360:	2200      	movs	r2, #0
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	f000 f92f 	bl	80065ca <HAL_NVIC_SetPriority>
 800636c:	4a06      	ldr	r2, [pc, #24]	@ (8006388 <HAL_InitTick+0x5c>)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	e000      	b.n	8006378 <HAL_InitTick+0x4c>
 8006376:	2301      	movs	r3, #1
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20016a7c 	.word	0x20016a7c
 8006384:	20016a84 	.word	0x20016a84
 8006388:	20016a80 	.word	0x20016a80

0800638c <HAL_IncTick>:
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <HAL_IncTick+0x20>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <HAL_IncTick+0x24>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4413      	add	r3, r2
 800639c:	4a04      	ldr	r2, [pc, #16]	@ (80063b0 <HAL_IncTick+0x24>)
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20016a84 	.word	0x20016a84
 80063b0:	2001cb3c 	.word	0x2001cb3c

080063b4 <HAL_GetTick>:
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	4b03      	ldr	r3, [pc, #12]	@ (80063c8 <HAL_GetTick+0x14>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	2001cb3c 	.word	0x2001cb3c

080063cc <HAL_Delay>:
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	f7ff ffee 	bl	80063b4 <HAL_GetTick>
 80063d8:	60b8      	str	r0, [r7, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d005      	beq.n	80063f2 <HAL_Delay+0x26>
 80063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <HAL_Delay+0x44>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	bf00      	nop
 80063f4:	f7ff ffde 	bl	80063b4 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	429a      	cmp	r2, r3
 8006402:	d8f7      	bhi.n	80063f4 <HAL_Delay+0x28>
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20016a84 	.word	0x20016a84

08006414 <__NVIC_SetPriorityGrouping>:
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <__NVIC_SetPriorityGrouping+0x44>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006430:	4013      	ands	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	4a04      	ldr	r2, [pc, #16]	@ (8006458 <__NVIC_SetPriorityGrouping+0x44>)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	60d3      	str	r3, [r2, #12]
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	e000ed00 	.word	0xe000ed00

0800645c <__NVIC_GetPriorityGrouping>:
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
 8006460:	4b04      	ldr	r3, [pc, #16]	@ (8006474 <__NVIC_GetPriorityGrouping+0x18>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	4618      	mov	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	e000ed00 	.word	0xe000ed00

08006478 <__NVIC_EnableIRQ>:
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	2b00      	cmp	r3, #0
 8006488:	db0b      	blt.n	80064a2 <__NVIC_EnableIRQ+0x2a>
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	f003 021f 	and.w	r2, r3, #31
 8006490:	4907      	ldr	r1, [pc, #28]	@ (80064b0 <__NVIC_EnableIRQ+0x38>)
 8006492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2001      	movs	r0, #1
 800649a:	fa00 f202 	lsl.w	r2, r0, r2
 800649e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000e100 	.word	0xe000e100

080064b4 <__NVIC_SetPriority>:
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
 80064c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db0a      	blt.n	80064de <__NVIC_SetPriority+0x2a>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	490c      	ldr	r1, [pc, #48]	@ (8006500 <__NVIC_SetPriority+0x4c>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	0112      	lsls	r2, r2, #4
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	440b      	add	r3, r1
 80064d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80064dc:	e00a      	b.n	80064f4 <__NVIC_SetPriority+0x40>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4908      	ldr	r1, [pc, #32]	@ (8006504 <__NVIC_SetPriority+0x50>)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3b04      	subs	r3, #4
 80064ec:	0112      	lsls	r2, r2, #4
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	440b      	add	r3, r1
 80064f2:	761a      	strb	r2, [r3, #24]
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	e000e100 	.word	0xe000e100
 8006504:	e000ed00 	.word	0xe000ed00

08006508 <NVIC_EncodePriority>:
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	@ 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f1c3 0307 	rsb	r3, r3, #7
 8006522:	2b04      	cmp	r3, #4
 8006524:	bf28      	it	cs
 8006526:	2304      	movcs	r3, #4
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3304      	adds	r3, #4
 800652e:	2b06      	cmp	r3, #6
 8006530:	d902      	bls.n	8006538 <NVIC_EncodePriority+0x30>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3b03      	subs	r3, #3
 8006536:	e000      	b.n	800653a <NVIC_EncodePriority+0x32>
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 32ff 	mov.w	r2, #4294967295
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43da      	mvns	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	401a      	ands	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	409a      	lsls	r2, r3
 8006550:	f04f 31ff 	mov.w	r1, #4294967295
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	fa01 f303 	lsl.w	r3, r1, r3
 800655a:	43d9      	mvns	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	400b      	ands	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	4618      	mov	r0, r3
 8006564:	3724      	adds	r7, #36	@ 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <SysTick_Config>:
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3b01      	subs	r3, #1
 800657c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006580:	d301      	bcc.n	8006586 <SysTick_Config+0x16>
 8006582:	2301      	movs	r3, #1
 8006584:	e00f      	b.n	80065a6 <SysTick_Config+0x36>
 8006586:	4a0a      	ldr	r2, [pc, #40]	@ (80065b0 <SysTick_Config+0x40>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3b01      	subs	r3, #1
 800658c:	6053      	str	r3, [r2, #4]
 800658e:	210f      	movs	r1, #15
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	f7ff ff8e 	bl	80064b4 <__NVIC_SetPriority>
 8006598:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <SysTick_Config+0x40>)
 800659a:	2200      	movs	r2, #0
 800659c:	609a      	str	r2, [r3, #8]
 800659e:	4b04      	ldr	r3, [pc, #16]	@ (80065b0 <SysTick_Config+0x40>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000e010 	.word	0xe000e010

080065b4 <HAL_NVIC_SetPriorityGrouping>:
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff ff29 	bl	8006414 <__NVIC_SetPriorityGrouping>
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_NVIC_SetPriority>:
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	4603      	mov	r3, r0
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	f7ff ff3e 	bl	800645c <__NVIC_GetPriorityGrouping>
 80065e0:	6178      	str	r0, [r7, #20]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f7ff ff8e 	bl	8006508 <NVIC_EncodePriority>
 80065ec:	4602      	mov	r2, r0
 80065ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff ff5d 	bl	80064b4 <__NVIC_SetPriority>
 80065fa:	bf00      	nop
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_NVIC_EnableIRQ>:
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	4603      	mov	r3, r0
 800660a:	71fb      	strb	r3, [r7, #7]
 800660c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff ff31 	bl	8006478 <__NVIC_EnableIRQ>
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_SYSTICK_Config>:
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ffa2 	bl	8006570 <SysTick_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_SYSTICK_IRQHandler>:
 8006636:	b580      	push	{r7, lr}
 8006638:	af00      	add	r7, sp, #0
 800663a:	f000 f802 	bl	8006642 <HAL_SYSTICK_Callback>
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_SYSTICK_Callback>:
 8006642:	b480      	push	{r7}
 8006644:	af00      	add	r7, sp, #0
 8006646:	bf00      	nop
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_DMA_Abort>:
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	f7ff fea9 	bl	80063b4 <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d008      	beq.n	8006682 <HAL_DMA_Abort+0x32>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2280      	movs	r2, #128	@ 0x80
 8006674:	655a      	str	r2, [r3, #84]	@ 0x54
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800667e:	2301      	movs	r3, #1
 8006680:	e052      	b.n	8006728 <HAL_DMA_Abort+0xd8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0216 	bic.w	r2, r2, #22
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066a0:	615a      	str	r2, [r3, #20]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <HAL_DMA_Abort+0x62>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <HAL_DMA_Abort+0x72>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0208 	bic.w	r2, r2, #8
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e013      	b.n	80066fc <HAL_DMA_Abort+0xac>
 80066d4:	f7ff fe6e 	bl	80063b4 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d90c      	bls.n	80066fc <HAL_DMA_Abort+0xac>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2203      	movs	r2, #3
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80066f8:	2303      	movs	r3, #3
 80066fa:	e015      	b.n	8006728 <HAL_DMA_Abort+0xd8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e4      	bne.n	80066d4 <HAL_DMA_Abort+0x84>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670e:	223f      	movs	r2, #63	@ 0x3f
 8006710:	409a      	lsls	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	609a      	str	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8006726:	2300      	movs	r3, #0
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_DMA_Abort_IT>:
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d004      	beq.n	800674e <HAL_DMA_Abort_IT+0x1e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2280      	movs	r2, #128	@ 0x80
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
 800674a:	2301      	movs	r3, #1
 800674c:	e00c      	b.n	8006768 <HAL_DMA_Abort_IT+0x38>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2205      	movs	r2, #5
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	2300      	movs	r3, #0
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_GPIO_Init>:
 8006774:	b480      	push	{r7}
 8006776:	b089      	sub	sp, #36	@ 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	2300      	movs	r3, #0
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	e165      	b.n	8006a5c <HAL_GPIO_Init+0x2e8>
 8006790:	2201      	movs	r2, #1
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4013      	ands	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	f040 8154 	bne.w	8006a56 <HAL_GPIO_Init+0x2e2>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d005      	beq.n	80067c6 <HAL_GPIO_Init+0x52>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d130      	bne.n	8006828 <HAL_GPIO_Init+0xb4>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	2203      	movs	r2, #3
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	43db      	mvns	r3, r3
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	4013      	ands	r3, r2
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	609a      	str	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	2201      	movs	r2, #1
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	4013      	ands	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 0201 	and.w	r2, r3, #1
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4313      	orrs	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	2b03      	cmp	r3, #3
 8006832:	d017      	beq.n	8006864 <HAL_GPIO_Init+0xf0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	2203      	movs	r2, #3
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	4313      	orrs	r3, r2
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	60da      	str	r2, [r3, #12]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d123      	bne.n	80068b8 <HAL_GPIO_Init+0x144>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	08da      	lsrs	r2, r3, #3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3208      	adds	r2, #8
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	220f      	movs	r2, #15
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	43db      	mvns	r3, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4013      	ands	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	08da      	lsrs	r2, r3, #3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3208      	adds	r2, #8
 80068b2:	69b9      	ldr	r1, [r7, #24]
 80068b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	2203      	movs	r2, #3
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	43db      	mvns	r3, r3
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	4013      	ands	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 0203 	and.w	r2, r3, #3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80ae 	beq.w	8006a56 <HAL_GPIO_Init+0x2e2>
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4b5d      	ldr	r3, [pc, #372]	@ (8006a74 <HAL_GPIO_Init+0x300>)
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	4a5c      	ldr	r2, [pc, #368]	@ (8006a74 <HAL_GPIO_Init+0x300>)
 8006904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006908:	6453      	str	r3, [r2, #68]	@ 0x44
 800690a:	4b5a      	ldr	r3, [pc, #360]	@ (8006a74 <HAL_GPIO_Init+0x300>)
 800690c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a58      	ldr	r2, [pc, #352]	@ (8006a78 <HAL_GPIO_Init+0x304>)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	089b      	lsrs	r3, r3, #2
 800691c:	3302      	adds	r3, #2
 800691e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	220f      	movs	r2, #15
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43db      	mvns	r3, r3
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	4013      	ands	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a4f      	ldr	r2, [pc, #316]	@ (8006a7c <HAL_GPIO_Init+0x308>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d025      	beq.n	800698e <HAL_GPIO_Init+0x21a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a4e      	ldr	r2, [pc, #312]	@ (8006a80 <HAL_GPIO_Init+0x30c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01f      	beq.n	800698a <HAL_GPIO_Init+0x216>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a4d      	ldr	r2, [pc, #308]	@ (8006a84 <HAL_GPIO_Init+0x310>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d019      	beq.n	8006986 <HAL_GPIO_Init+0x212>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a4c      	ldr	r2, [pc, #304]	@ (8006a88 <HAL_GPIO_Init+0x314>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_GPIO_Init+0x20e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a4b      	ldr	r2, [pc, #300]	@ (8006a8c <HAL_GPIO_Init+0x318>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00d      	beq.n	800697e <HAL_GPIO_Init+0x20a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a4a      	ldr	r2, [pc, #296]	@ (8006a90 <HAL_GPIO_Init+0x31c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <HAL_GPIO_Init+0x206>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a49      	ldr	r2, [pc, #292]	@ (8006a94 <HAL_GPIO_Init+0x320>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <HAL_GPIO_Init+0x202>
 8006972:	2306      	movs	r3, #6
 8006974:	e00c      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 8006976:	2307      	movs	r3, #7
 8006978:	e00a      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 800697a:	2305      	movs	r3, #5
 800697c:	e008      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 800697e:	2304      	movs	r3, #4
 8006980:	e006      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 8006982:	2303      	movs	r3, #3
 8006984:	e004      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 8006986:	2302      	movs	r3, #2
 8006988:	e002      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_GPIO_Init+0x21c>
 800698e:	2300      	movs	r3, #0
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	f002 0203 	and.w	r2, r2, #3
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	4093      	lsls	r3, r2
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4313      	orrs	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	4935      	ldr	r1, [pc, #212]	@ (8006a78 <HAL_GPIO_Init+0x304>)
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	089b      	lsrs	r3, r3, #2
 80069a6:	3302      	adds	r3, #2
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80069ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	43db      	mvns	r3, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4013      	ands	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_GPIO_Init+0x25e>
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	4a31      	ldr	r2, [pc, #196]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	6093      	str	r3, [r2, #8]
 80069d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	4013      	ands	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_GPIO_Init+0x288>
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	4a26      	ldr	r2, [pc, #152]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	60d3      	str	r3, [r2, #12]
 8006a02:	4b25      	ldr	r3, [pc, #148]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_GPIO_Init+0x2b2>
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	6053      	str	r3, [r2, #4]
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_GPIO_Init+0x2dc>
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	4a11      	ldr	r2, [pc, #68]	@ (8006a98 <HAL_GPIO_Init+0x324>)
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	f67f ae96 	bls.w	8006790 <HAL_GPIO_Init+0x1c>
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	3724      	adds	r7, #36	@ 0x24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40013800 	.word	0x40013800
 8006a7c:	40020000 	.word	0x40020000
 8006a80:	40020400 	.word	0x40020400
 8006a84:	40020800 	.word	0x40020800
 8006a88:	40020c00 	.word	0x40020c00
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	40021400 	.word	0x40021400
 8006a94:	40021800 	.word	0x40021800
 8006a98:	40013c00 	.word	0x40013c00

08006a9c <HAL_GPIO_WritePin>:
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	807b      	strh	r3, [r7, #2]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	707b      	strb	r3, [r7, #1]
 8006aac:	787b      	ldrb	r3, [r7, #1]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_GPIO_WritePin+0x1e>
 8006ab2:	887a      	ldrh	r2, [r7, #2]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	619a      	str	r2, [r3, #24]
 8006ab8:	e003      	b.n	8006ac2 <HAL_GPIO_WritePin+0x26>
 8006aba:	887b      	ldrh	r3, [r7, #2]
 8006abc:	041a      	lsls	r2, r3, #16
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	619a      	str	r2, [r3, #24]
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <HAL_RCC_ClockConfig>:
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x14>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0cc      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006ae4:	4b68      	ldr	r3, [pc, #416]	@ (8006c88 <HAL_RCC_ClockConfig+0x1b8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d90c      	bls.n	8006b0c <HAL_RCC_ClockConfig+0x3c>
 8006af2:	4b65      	ldr	r3, [pc, #404]	@ (8006c88 <HAL_RCC_ClockConfig+0x1b8>)
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	4b63      	ldr	r3, [pc, #396]	@ (8006c88 <HAL_RCC_ClockConfig+0x1b8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d001      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x3c>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0b8      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d020      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x8a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x60>
 8006b24:	4b59      	ldr	r3, [pc, #356]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	4a58      	ldr	r2, [pc, #352]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b2e:	6093      	str	r3, [r2, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x78>
 8006b3c:	4b53      	ldr	r3, [pc, #332]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	4a52      	ldr	r2, [pc, #328]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b46:	6093      	str	r3, [r2, #8]
 8006b48:	4b50      	ldr	r3, [pc, #320]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	494d      	ldr	r1, [pc, #308]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	608b      	str	r3, [r1, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d044      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x120>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xae>
 8006b6e:	4b47      	ldr	r3, [pc, #284]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d119      	bne.n	8006bae <HAL_RCC_ClockConfig+0xde>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e07f      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d003      	beq.n	8006b8e <HAL_RCC_ClockConfig+0xbe>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xce>
 8006b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <HAL_RCC_ClockConfig+0xde>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e06f      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_RCC_ClockConfig+0xde>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e067      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006bae:	4b37      	ldr	r3, [pc, #220]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f023 0203 	bic.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4934      	ldr	r1, [pc, #208]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]
 8006bc0:	f7ff fbf8 	bl	80063b4 <HAL_GetTick>
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_ClockConfig+0x10e>
 8006bc8:	f7ff fbf4 	bl	80063b4 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_ClockConfig+0x10e>
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e04f      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006bde:	4b2b      	ldr	r3, [pc, #172]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 020c 	and.w	r2, r3, #12
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d1eb      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0xf8>
 8006bf0:	4b25      	ldr	r3, [pc, #148]	@ (8006c88 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d20c      	bcs.n	8006c18 <HAL_RCC_ClockConfig+0x148>
 8006bfe:	4b22      	ldr	r3, [pc, #136]	@ (8006c88 <HAL_RCC_ClockConfig+0x1b8>)
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	4b20      	ldr	r3, [pc, #128]	@ (8006c88 <HAL_RCC_ClockConfig+0x1b8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d001      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x148>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e032      	b.n	8006c7e <HAL_RCC_ClockConfig+0x1ae>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x166>
 8006c24:	4b19      	ldr	r3, [pc, #100]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4916      	ldr	r1, [pc, #88]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	608b      	str	r3, [r1, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x186>
 8006c42:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	490e      	ldr	r1, [pc, #56]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	608b      	str	r3, [r1, #8]
 8006c56:	f000 f855 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c8c <HAL_RCC_ClockConfig+0x1bc>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	091b      	lsrs	r3, r3, #4
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	490a      	ldr	r1, [pc, #40]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c0>)
 8006c68:	5ccb      	ldrb	r3, [r1, r3]
 8006c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6e:	4a09      	ldr	r2, [pc, #36]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c4>)
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <HAL_RCC_ClockConfig+0x1c8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fb58 	bl	800632c <HAL_InitTick>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40023c00 	.word	0x40023c00
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	08013d2c 	.word	0x08013d2c
 8006c94:	20016a7c 	.word	0x20016a7c
 8006c98:	20016a80 	.word	0x20016a80

08006c9c <HAL_RCC_GetHCLKFreq>:
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4b03      	ldr	r3, [pc, #12]	@ (8006cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20016a7c 	.word	0x20016a7c

08006cb4 <HAL_RCC_GetPCLK1Freq>:
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	f7ff fff0 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	0a9b      	lsrs	r3, r3, #10
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	4903      	ldr	r1, [pc, #12]	@ (8006cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cca:	5ccb      	ldrb	r3, [r1, r3]
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	08013d3c 	.word	0x08013d3c

08006cdc <HAL_RCC_GetPCLK2Freq>:
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	f7ff ffdc 	bl	8006c9c <HAL_RCC_GetHCLKFreq>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	0b5b      	lsrs	r3, r3, #13
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	4903      	ldr	r1, [pc, #12]	@ (8006d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cf2:	5ccb      	ldrb	r3, [r1, r3]
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	08013d3c 	.word	0x08013d3c

08006d04 <HAL_RCC_GetSysClockFreq>:
 8006d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d08:	b0a6      	sub	sp, #152	@ 0x98
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d24:	2300      	movs	r3, #0
 8006d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d2a:	4bc8      	ldr	r3, [pc, #800]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	f200 817e 	bhi.w	8007034 <HAL_RCC_GetSysClockFreq+0x330>
 8006d38:	a201      	add	r2, pc, #4	@ (adr r2, 8006d40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d75 	.word	0x08006d75
 8006d44:	08007035 	.word	0x08007035
 8006d48:	08007035 	.word	0x08007035
 8006d4c:	08007035 	.word	0x08007035
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	08007035 	.word	0x08007035
 8006d58:	08007035 	.word	0x08007035
 8006d5c:	08007035 	.word	0x08007035
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08007035 	.word	0x08007035
 8006d68:	08007035 	.word	0x08007035
 8006d6c:	08007035 	.word	0x08007035
 8006d70:	08006eef 	.word	0x08006eef
 8006d74:	4bb6      	ldr	r3, [pc, #728]	@ (8007050 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d7a:	e15f      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x338>
 8006d7c:	4bb5      	ldr	r3, [pc, #724]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x350>)
 8006d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d82:	e15b      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x338>
 8006d84:	4bb1      	ldr	r3, [pc, #708]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006d90:	4bae      	ldr	r3, [pc, #696]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d031      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0xfc>
 8006d9c:	4bab      	ldr	r3, [pc, #684]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	099b      	lsrs	r3, r3, #6
 8006da2:	2200      	movs	r2, #0
 8006da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006da8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dae:	663b      	str	r3, [r7, #96]	@ 0x60
 8006db0:	2300      	movs	r3, #0
 8006db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006db4:	4ba7      	ldr	r3, [pc, #668]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x350>)
 8006db6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006dba:	462a      	mov	r2, r5
 8006dbc:	fb03 f202 	mul.w	r2, r3, r2
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	4413      	add	r3, r2
 8006dca:	4aa2      	ldr	r2, [pc, #648]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x350>)
 8006dcc:	4621      	mov	r1, r4
 8006dce:	fba1 1202 	umull	r1, r2, r1, r2
 8006dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006dd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006dda:	4413      	add	r3, r2
 8006ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006de2:	2200      	movs	r2, #0
 8006de4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006de6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006de8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006dec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006df0:	f7f9 fc72 	bl	80006d8 <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4613      	mov	r3, r2
 8006dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dfe:	e064      	b.n	8006eca <HAL_RCC_GetSysClockFreq+0x1c6>
 8006e00:	4b92      	ldr	r3, [pc, #584]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	099b      	lsrs	r3, r3, #6
 8006e06:	2200      	movs	r2, #0
 8006e08:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e14:	2300      	movs	r3, #0
 8006e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	462b      	mov	r3, r5
 8006e20:	f04f 0000 	mov.w	r0, #0
 8006e24:	f04f 0100 	mov.w	r1, #0
 8006e28:	0159      	lsls	r1, r3, #5
 8006e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e2e:	0150      	lsls	r0, r2, #5
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4621      	mov	r1, r4
 8006e36:	1a51      	subs	r1, r2, r1
 8006e38:	6139      	str	r1, [r7, #16]
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e4e:	4659      	mov	r1, fp
 8006e50:	018b      	lsls	r3, r1, #6
 8006e52:	4651      	mov	r1, sl
 8006e54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e58:	4651      	mov	r1, sl
 8006e5a:	018a      	lsls	r2, r1, #6
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	ebb2 0801 	subs.w	r8, r2, r1
 8006e62:	4659      	mov	r1, fp
 8006e64:	eb63 0901 	sbc.w	r9, r3, r1
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e7c:	4690      	mov	r8, r2
 8006e7e:	4699      	mov	r9, r3
 8006e80:	4623      	mov	r3, r4
 8006e82:	eb18 0303 	adds.w	r3, r8, r3
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	462b      	mov	r3, r5
 8006e8a:	eb49 0303 	adc.w	r3, r9, r3
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	028b      	lsls	r3, r1, #10
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	028a      	lsls	r2, r1, #10
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006eb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ebc:	f7f9 fc0c 	bl	80006d8 <__aeabi_uldivmod>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eca:	4b60      	ldr	r3, [pc, #384]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006edc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eec:	e0a6      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x338>
 8006eee:	4b57      	ldr	r3, [pc, #348]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006efa:	4b54      	ldr	r3, [pc, #336]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d02a      	beq.n	8006f5c <HAL_RCC_GetSysClockFreq+0x258>
 8006f06:	4b51      	ldr	r3, [pc, #324]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x350>)
 8006f1c:	fb03 f201 	mul.w	r2, r3, r1
 8006f20:	2300      	movs	r3, #0
 8006f22:	fb00 f303 	mul.w	r3, r0, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	4a4a      	ldr	r2, [pc, #296]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x350>)
 8006f2a:	fba0 1202 	umull	r1, r2, r0, r2
 8006f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f30:	460a      	mov	r2, r1
 8006f32:	673a      	str	r2, [r7, #112]	@ 0x70
 8006f34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006f36:	4413      	add	r3, r2
 8006f38:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f3e:	2200      	movs	r2, #0
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f42:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006f48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006f4c:	f7f9 fbc4 	bl	80006d8 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4613      	mov	r3, r2
 8006f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f5a:	e05b      	b.n	8007014 <HAL_RCC_GetSysClockFreq+0x310>
 8006f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	099b      	lsrs	r3, r3, #6
 8006f62:	2200      	movs	r2, #0
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	623b      	str	r3, [r7, #32]
 8006f70:	2300      	movs	r3, #0
 8006f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f04f 0000 	mov.w	r0, #0
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	0159      	lsls	r1, r3, #5
 8006f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f8a:	0150      	lsls	r0, r2, #5
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4641      	mov	r1, r8
 8006f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	00eb      	lsls	r3, r5, #3
 8006fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc6:	00e2      	lsls	r2, r4, #3
 8006fc8:	4614      	mov	r4, r2
 8006fca:	461d      	mov	r5, r3
 8006fcc:	4643      	mov	r3, r8
 8006fce:	18e3      	adds	r3, r4, r3
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	eb45 0303 	adc.w	r3, r5, r3
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	028b      	lsls	r3, r1, #10
 8006fea:	4621      	mov	r1, r4
 8006fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	028a      	lsls	r2, r1, #10
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	61fa      	str	r2, [r7, #28]
 8007002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007006:	f7f9 fb67 	bl	80006d8 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4613      	mov	r3, r2
 8007010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007014:	4b0d      	ldr	r3, [pc, #52]	@ (800704c <HAL_RCC_GetSysClockFreq+0x348>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	0f1b      	lsrs	r3, r3, #28
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007022:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007032:	e003      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x338>
 8007034:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800703a:	bf00      	nop
 800703c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007040:	4618      	mov	r0, r3
 8007042:	3798      	adds	r7, #152	@ 0x98
 8007044:	46bd      	mov	sp, r7
 8007046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704a:	bf00      	nop
 800704c:	40023800 	.word	0x40023800
 8007050:	00f42400 	.word	0x00f42400
 8007054:	017d7840 	.word	0x017d7840

08007058 <HAL_RCC_OscConfig>:
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_RCC_OscConfig+0x12>
 8007066:	2301      	movs	r3, #1
 8007068:	e28d      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8083 	beq.w	800717e <HAL_RCC_OscConfig+0x126>
 8007078:	4b94      	ldr	r3, [pc, #592]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b04      	cmp	r3, #4
 8007082:	d019      	beq.n	80070b8 <HAL_RCC_OscConfig+0x60>
 8007084:	4b91      	ldr	r3, [pc, #580]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b08      	cmp	r3, #8
 800708e:	d106      	bne.n	800709e <HAL_RCC_OscConfig+0x46>
 8007090:	4b8e      	ldr	r3, [pc, #568]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800709c:	d00c      	beq.n	80070b8 <HAL_RCC_OscConfig+0x60>
 800709e:	4b8b      	ldr	r3, [pc, #556]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 030c 	and.w	r3, r3, #12
 80070a6:	2b0c      	cmp	r3, #12
 80070a8:	d112      	bne.n	80070d0 <HAL_RCC_OscConfig+0x78>
 80070aa:	4b88      	ldr	r3, [pc, #544]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070b6:	d10b      	bne.n	80070d0 <HAL_RCC_OscConfig+0x78>
 80070b8:	4b84      	ldr	r3, [pc, #528]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d05b      	beq.n	800717c <HAL_RCC_OscConfig+0x124>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d157      	bne.n	800717c <HAL_RCC_OscConfig+0x124>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e25a      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d8:	d106      	bne.n	80070e8 <HAL_RCC_OscConfig+0x90>
 80070da:	4b7c      	ldr	r3, [pc, #496]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a7b      	ldr	r2, [pc, #492]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e01d      	b.n	8007124 <HAL_RCC_OscConfig+0xcc>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0xb4>
 80070f2:	4b76      	ldr	r3, [pc, #472]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a75      	ldr	r2, [pc, #468]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80070f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b73      	ldr	r3, [pc, #460]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a72      	ldr	r2, [pc, #456]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e00b      	b.n	8007124 <HAL_RCC_OscConfig+0xcc>
 800710c:	4b6f      	ldr	r3, [pc, #444]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a6e      	ldr	r2, [pc, #440]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	4b6c      	ldr	r3, [pc, #432]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a6b      	ldr	r2, [pc, #428]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800711e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <HAL_RCC_OscConfig+0xfc>
 800712c:	f7ff f942 	bl	80063b4 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0xee>
 8007134:	f7ff f93e 	bl	80063b4 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b64      	cmp	r3, #100	@ 0x64
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0xee>
 8007142:	2303      	movs	r3, #3
 8007144:	e21f      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 8007146:	4b61      	ldr	r3, [pc, #388]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0xdc>
 8007152:	e014      	b.n	800717e <HAL_RCC_OscConfig+0x126>
 8007154:	f7ff f92e 	bl	80063b4 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x116>
 800715c:	f7ff f92a 	bl	80063b4 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	@ 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x116>
 800716a:	2303      	movs	r3, #3
 800716c:	e20b      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 800716e:	4b57      	ldr	r3, [pc, #348]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x104>
 800717a:	e000      	b.n	800717e <HAL_RCC_OscConfig+0x126>
 800717c:	bf00      	nop
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d06f      	beq.n	800726a <HAL_RCC_OscConfig+0x212>
 800718a:	4b50      	ldr	r3, [pc, #320]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
 8007192:	2b00      	cmp	r3, #0
 8007194:	d017      	beq.n	80071c6 <HAL_RCC_OscConfig+0x16e>
 8007196:	4b4d      	ldr	r3, [pc, #308]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d105      	bne.n	80071ae <HAL_RCC_OscConfig+0x156>
 80071a2:	4b4a      	ldr	r3, [pc, #296]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_RCC_OscConfig+0x16e>
 80071ae:	4b47      	ldr	r3, [pc, #284]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b0c      	cmp	r3, #12
 80071b8:	d11c      	bne.n	80071f4 <HAL_RCC_OscConfig+0x19c>
 80071ba:	4b44      	ldr	r3, [pc, #272]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d116      	bne.n	80071f4 <HAL_RCC_OscConfig+0x19c>
 80071c6:	4b41      	ldr	r3, [pc, #260]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_RCC_OscConfig+0x186>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d001      	beq.n	80071de <HAL_RCC_OscConfig+0x186>
 80071da:	2301      	movs	r3, #1
 80071dc:	e1d3      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 80071de:	4b3b      	ldr	r3, [pc, #236]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4937      	ldr	r1, [pc, #220]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	600b      	str	r3, [r1, #0]
 80071f2:	e03a      	b.n	800726a <HAL_RCC_OscConfig+0x212>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d020      	beq.n	800723e <HAL_RCC_OscConfig+0x1e6>
 80071fc:	4b34      	ldr	r3, [pc, #208]	@ (80072d0 <HAL_RCC_OscConfig+0x278>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	f7ff f8d7 	bl	80063b4 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]
 8007208:	e008      	b.n	800721c <HAL_RCC_OscConfig+0x1c4>
 800720a:	f7ff f8d3 	bl	80063b4 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x1c4>
 8007218:	2303      	movs	r3, #3
 800721a:	e1b4      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 800721c:	4b2b      	ldr	r3, [pc, #172]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f0      	beq.n	800720a <HAL_RCC_OscConfig+0x1b2>
 8007228:	4b28      	ldr	r3, [pc, #160]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	4925      	ldr	r1, [pc, #148]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007238:	4313      	orrs	r3, r2
 800723a:	600b      	str	r3, [r1, #0]
 800723c:	e015      	b.n	800726a <HAL_RCC_OscConfig+0x212>
 800723e:	4b24      	ldr	r3, [pc, #144]	@ (80072d0 <HAL_RCC_OscConfig+0x278>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f7ff f8b6 	bl	80063b4 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x206>
 800724c:	f7ff f8b2 	bl	80063b4 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x206>
 800725a:	2303      	movs	r3, #3
 800725c:	e193      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 800725e:	4b1b      	ldr	r3, [pc, #108]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0x1f4>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d036      	beq.n	80072e4 <HAL_RCC_OscConfig+0x28c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d016      	beq.n	80072ac <HAL_RCC_OscConfig+0x254>
 800727e:	4b15      	ldr	r3, [pc, #84]	@ (80072d4 <HAL_RCC_OscConfig+0x27c>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f7ff f896 	bl	80063b4 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x246>
 800728c:	f7ff f892 	bl	80063b4 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x246>
 800729a:	2303      	movs	r3, #3
 800729c:	e173      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 800729e:	4b0b      	ldr	r3, [pc, #44]	@ (80072cc <HAL_RCC_OscConfig+0x274>)
 80072a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0x234>
 80072aa:	e01b      	b.n	80072e4 <HAL_RCC_OscConfig+0x28c>
 80072ac:	4b09      	ldr	r3, [pc, #36]	@ (80072d4 <HAL_RCC_OscConfig+0x27c>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	f7ff f87f 	bl	80063b4 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]
 80072b8:	e00e      	b.n	80072d8 <HAL_RCC_OscConfig+0x280>
 80072ba:	f7ff f87b 	bl	80063b4 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d907      	bls.n	80072d8 <HAL_RCC_OscConfig+0x280>
 80072c8:	2303      	movs	r3, #3
 80072ca:	e15c      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 80072cc:	40023800 	.word	0x40023800
 80072d0:	42470000 	.word	0x42470000
 80072d4:	42470e80 	.word	0x42470e80
 80072d8:	4b8a      	ldr	r3, [pc, #552]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80072da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1ea      	bne.n	80072ba <HAL_RCC_OscConfig+0x262>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8097 	beq.w	8007420 <HAL_RCC_OscConfig+0x3c8>
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	4b83      	ldr	r3, [pc, #524]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10f      	bne.n	8007322 <HAL_RCC_OscConfig+0x2ca>
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	4b7f      	ldr	r3, [pc, #508]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	4a7e      	ldr	r2, [pc, #504]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007310:	6413      	str	r3, [r2, #64]	@ 0x40
 8007312:	4b7c      	ldr	r3, [pc, #496]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
 8007322:	4b79      	ldr	r3, [pc, #484]	@ (8007508 <HAL_RCC_OscConfig+0x4b0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732a:	2b00      	cmp	r3, #0
 800732c:	d118      	bne.n	8007360 <HAL_RCC_OscConfig+0x308>
 800732e:	4b76      	ldr	r3, [pc, #472]	@ (8007508 <HAL_RCC_OscConfig+0x4b0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a75      	ldr	r2, [pc, #468]	@ (8007508 <HAL_RCC_OscConfig+0x4b0>)
 8007334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	f7ff f83b 	bl	80063b4 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x2fc>
 8007342:	f7ff f837 	bl	80063b4 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x2fc>
 8007350:	2303      	movs	r3, #3
 8007352:	e118      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 8007354:	4b6c      	ldr	r3, [pc, #432]	@ (8007508 <HAL_RCC_OscConfig+0x4b0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f0      	beq.n	8007342 <HAL_RCC_OscConfig+0x2ea>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d106      	bne.n	8007376 <HAL_RCC_OscConfig+0x31e>
 8007368:	4b66      	ldr	r3, [pc, #408]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800736a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736c:	4a65      	ldr	r2, [pc, #404]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	6713      	str	r3, [r2, #112]	@ 0x70
 8007374:	e01c      	b.n	80073b0 <HAL_RCC_OscConfig+0x358>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b05      	cmp	r3, #5
 800737c:	d10c      	bne.n	8007398 <HAL_RCC_OscConfig+0x340>
 800737e:	4b61      	ldr	r3, [pc, #388]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007382:	4a60      	ldr	r2, [pc, #384]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007384:	f043 0304 	orr.w	r3, r3, #4
 8007388:	6713      	str	r3, [r2, #112]	@ 0x70
 800738a:	4b5e      	ldr	r3, [pc, #376]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738e:	4a5d      	ldr	r2, [pc, #372]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	6713      	str	r3, [r2, #112]	@ 0x70
 8007396:	e00b      	b.n	80073b0 <HAL_RCC_OscConfig+0x358>
 8007398:	4b5a      	ldr	r3, [pc, #360]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800739a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739c:	4a59      	ldr	r2, [pc, #356]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800739e:	f023 0301 	bic.w	r3, r3, #1
 80073a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a4:	4b57      	ldr	r3, [pc, #348]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a8:	4a56      	ldr	r2, [pc, #344]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80073aa:	f023 0304 	bic.w	r3, r3, #4
 80073ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d015      	beq.n	80073e4 <HAL_RCC_OscConfig+0x38c>
 80073b8:	f7fe fffc 	bl	80063b4 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]
 80073be:	e00a      	b.n	80073d6 <HAL_RCC_OscConfig+0x37e>
 80073c0:	f7fe fff8 	bl	80063b4 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x37e>
 80073d2:	2303      	movs	r3, #3
 80073d4:	e0d7      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 80073d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0ee      	beq.n	80073c0 <HAL_RCC_OscConfig+0x368>
 80073e2:	e014      	b.n	800740e <HAL_RCC_OscConfig+0x3b6>
 80073e4:	f7fe ffe6 	bl	80063b4 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]
 80073ea:	e00a      	b.n	8007402 <HAL_RCC_OscConfig+0x3aa>
 80073ec:	f7fe ffe2 	bl	80063b4 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x3aa>
 80073fe:	2303      	movs	r3, #3
 8007400:	e0c1      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 8007402:	4b40      	ldr	r3, [pc, #256]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1ee      	bne.n	80073ec <HAL_RCC_OscConfig+0x394>
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d105      	bne.n	8007420 <HAL_RCC_OscConfig+0x3c8>
 8007414:	4b3b      	ldr	r3, [pc, #236]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	4a3a      	ldr	r2, [pc, #232]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800741a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800741e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80ad 	beq.w	8007584 <HAL_RCC_OscConfig+0x52c>
 800742a:	4b36      	ldr	r3, [pc, #216]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 030c 	and.w	r3, r3, #12
 8007432:	2b08      	cmp	r3, #8
 8007434:	d060      	beq.n	80074f8 <HAL_RCC_OscConfig+0x4a0>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d145      	bne.n	80074ca <HAL_RCC_OscConfig+0x472>
 800743e:	4b33      	ldr	r3, [pc, #204]	@ (800750c <HAL_RCC_OscConfig+0x4b4>)
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	f7fe ffb6 	bl	80063b4 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x406>
 800744c:	f7fe ffb2 	bl	80063b4 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x406>
 800745a:	2303      	movs	r3, #3
 800745c:	e093      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 800745e:	4b29      	ldr	r3, [pc, #164]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0x3f4>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	019b      	lsls	r3, r3, #6
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	3b01      	subs	r3, #1
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007494:	071b      	lsls	r3, r3, #28
 8007496:	491b      	ldr	r1, [pc, #108]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 8007498:	4313      	orrs	r3, r2
 800749a:	604b      	str	r3, [r1, #4]
 800749c:	4b1b      	ldr	r3, [pc, #108]	@ (800750c <HAL_RCC_OscConfig+0x4b4>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f7fe ff87 	bl	80063b4 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x464>
 80074aa:	f7fe ff83 	bl	80063b4 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x464>
 80074b8:	2303      	movs	r3, #3
 80074ba:	e064      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 80074bc:	4b11      	ldr	r3, [pc, #68]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x452>
 80074c8:	e05c      	b.n	8007584 <HAL_RCC_OscConfig+0x52c>
 80074ca:	4b10      	ldr	r3, [pc, #64]	@ (800750c <HAL_RCC_OscConfig+0x4b4>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f7fe ff70 	bl	80063b4 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x492>
 80074d8:	f7fe ff6c 	bl	80063b4 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x492>
 80074e6:	2303      	movs	r3, #3
 80074e8:	e04d      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 80074ea:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <HAL_RCC_OscConfig+0x4ac>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f0      	bne.n	80074d8 <HAL_RCC_OscConfig+0x480>
 80074f6:	e045      	b.n	8007584 <HAL_RCC_OscConfig+0x52c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d107      	bne.n	8007510 <HAL_RCC_OscConfig+0x4b8>
 8007500:	2301      	movs	r3, #1
 8007502:	e040      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 8007504:	40023800 	.word	0x40023800
 8007508:	40007000 	.word	0x40007000
 800750c:	42470060 	.word	0x42470060
 8007510:	4b1f      	ldr	r3, [pc, #124]	@ (8007590 <HAL_RCC_OscConfig+0x538>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d030      	beq.n	8007580 <HAL_RCC_OscConfig+0x528>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	429a      	cmp	r2, r3
 800752a:	d129      	bne.n	8007580 <HAL_RCC_OscConfig+0x528>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	429a      	cmp	r2, r3
 8007538:	d122      	bne.n	8007580 <HAL_RCC_OscConfig+0x528>
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007540:	4013      	ands	r3, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007546:	0192      	lsls	r2, r2, #6
 8007548:	4293      	cmp	r3, r2
 800754a:	d119      	bne.n	8007580 <HAL_RCC_OscConfig+0x528>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	3b01      	subs	r3, #1
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	429a      	cmp	r2, r3
 800755e:	d10f      	bne.n	8007580 <HAL_RCC_OscConfig+0x528>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	061b      	lsls	r3, r3, #24
 800756c:	429a      	cmp	r2, r3
 800756e:	d107      	bne.n	8007580 <HAL_RCC_OscConfig+0x528>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757a:	071b      	lsls	r3, r3, #28
 800757c:	429a      	cmp	r2, r3
 800757e:	d001      	beq.n	8007584 <HAL_RCC_OscConfig+0x52c>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <HAL_RCC_OscConfig+0x52e>
 8007584:	2300      	movs	r3, #0
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40023800 	.word	0x40023800

08007594 <HAL_SPI_Init>:
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_SPI_Init+0x12>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e07b      	b.n	800769e <HAL_SPI_Init+0x10a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d108      	bne.n	80075c0 <HAL_SPI_Init+0x2c>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075b6:	d009      	beq.n	80075cc <HAL_SPI_Init+0x38>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	61da      	str	r2, [r3, #28]
 80075be:	e005      	b.n	80075cc <HAL_SPI_Init+0x38>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	611a      	str	r2, [r3, #16]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	615a      	str	r2, [r3, #20]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_SPI_Init+0x58>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fe fc22 	bl	8005e30 <HAL_SPI_MspInit>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007650:	ea42 0103 	orr.w	r1, r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	f003 0104 	and.w	r1, r3, #4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	f003 0210 	and.w	r2, r3, #16
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800768c:	61da      	str	r2, [r3, #28]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	655a      	str	r2, [r3, #84]	@ 0x54
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800769c:	2300      	movs	r3, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_SPI_Transmit>:
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b088      	sub	sp, #32
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	603b      	str	r3, [r7, #0]
 80076b2:	4613      	mov	r3, r2
 80076b4:	80fb      	strh	r3, [r7, #6]
 80076b6:	2300      	movs	r3, #0
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_SPI_Transmit+0x22>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e12d      	b.n	8007924 <HAL_SPI_Transmit+0x27e>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80076d0:	f7fe fe70 	bl	80063b4 <HAL_GetTick>
 80076d4:	61b8      	str	r0, [r7, #24]
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	82fb      	strh	r3, [r7, #22]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d002      	beq.n	80076ec <HAL_SPI_Transmit+0x46>
 80076e6:	2302      	movs	r3, #2
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e116      	b.n	800791a <HAL_SPI_Transmit+0x274>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_SPI_Transmit+0x52>
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <HAL_SPI_Transmit+0x58>
 80076f8:	2301      	movs	r3, #1
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e10d      	b.n	800791a <HAL_SPI_Transmit+0x274>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2203      	movs	r2, #3
 8007702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	655a      	str	r2, [r3, #84]	@ 0x54
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	631a      	str	r2, [r3, #48]	@ 0x30
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	869a      	strh	r2, [r3, #52]	@ 0x34
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	645a      	str	r2, [r3, #68]	@ 0x44
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	641a      	str	r2, [r3, #64]	@ 0x40
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007744:	d10f      	bne.n	8007766 <HAL_SPI_Transmit+0xc0>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007770:	2b40      	cmp	r3, #64	@ 0x40
 8007772:	d007      	beq.n	8007784 <HAL_SPI_Transmit+0xde>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800778c:	d14f      	bne.n	800782e <HAL_SPI_Transmit+0x188>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_SPI_Transmit+0xf6>
 8007796:	8afb      	ldrh	r3, [r7, #22]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d142      	bne.n	8007822 <HAL_SPI_Transmit+0x17c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60da      	str	r2, [r3, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077c0:	e02f      	b.n	8007822 <HAL_SPI_Transmit+0x17c>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d112      	bne.n	80077f6 <HAL_SPI_Transmit+0x150>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d4:	881a      	ldrh	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60da      	str	r2, [r3, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	1c9a      	adds	r2, r3, #2
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077f4:	e015      	b.n	8007822 <HAL_SPI_Transmit+0x17c>
 80077f6:	f7fe fddd 	bl	80063b4 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d803      	bhi.n	800780e <HAL_SPI_Transmit+0x168>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d102      	bne.n	8007814 <HAL_SPI_Transmit+0x16e>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <HAL_SPI_Transmit+0x17c>
 8007814:	2303      	movs	r3, #3
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007820:	e07b      	b.n	800791a <HAL_SPI_Transmit+0x274>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1ca      	bne.n	80077c2 <HAL_SPI_Transmit+0x11c>
 800782c:	e050      	b.n	80078d0 <HAL_SPI_Transmit+0x22a>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_SPI_Transmit+0x196>
 8007836:	8afb      	ldrh	r3, [r7, #22]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d144      	bne.n	80078c6 <HAL_SPI_Transmit+0x220>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	631a      	str	r2, [r3, #48]	@ 0x30
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007862:	e030      	b.n	80078c6 <HAL_SPI_Transmit+0x220>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d113      	bne.n	800789a <HAL_SPI_Transmit+0x1f4>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	7812      	ldrb	r2, [r2, #0]
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	631a      	str	r2, [r3, #48]	@ 0x30
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007898:	e015      	b.n	80078c6 <HAL_SPI_Transmit+0x220>
 800789a:	f7fe fd8b 	bl	80063b4 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d803      	bhi.n	80078b2 <HAL_SPI_Transmit+0x20c>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d102      	bne.n	80078b8 <HAL_SPI_Transmit+0x212>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <HAL_SPI_Transmit+0x220>
 80078b8:	2303      	movs	r3, #3
 80078ba:	77fb      	strb	r3, [r7, #31]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80078c4:	e029      	b.n	800791a <HAL_SPI_Transmit+0x274>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1c9      	bne.n	8007864 <HAL_SPI_Transmit+0x1be>
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fa61 	bl	8007d9c <SPI_EndRxTxTransaction>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_SPI_Transmit+0x240>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2220      	movs	r2, #32
 80078e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <HAL_SPI_Transmit+0x25e>
 80078ee:	2300      	movs	r3, #0
 80078f0:	613b      	str	r3, [r7, #16]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_SPI_Transmit+0x26c>
 800790c:	2301      	movs	r3, #1
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e003      	b.n	800791a <HAL_SPI_Transmit+0x274>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007922:	7ffb      	ldrb	r3, [r7, #31]
 8007924:	4618      	mov	r0, r3
 8007926:	3720      	adds	r7, #32
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_SPI_TransmitReceive>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	@ 0x30
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	807b      	strh	r3, [r7, #2]
 800793a:	2301      	movs	r3, #1
 800793c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800793e:	2300      	movs	r3, #0
 8007940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x26>
 800794e:	2302      	movs	r3, #2
 8007950:	e198      	b.n	8007c84 <HAL_SPI_TransmitReceive+0x358>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800795a:	f7fe fd2b 	bl	80063b4 <HAL_GetTick>
 800795e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	887b      	ldrh	r3, [r7, #2]
 8007972:	837b      	strh	r3, [r7, #26]
 8007974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007978:	2b01      	cmp	r3, #1
 800797a:	d00f      	beq.n	800799c <HAL_SPI_TransmitReceive+0x70>
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007982:	d107      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x68>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x68>
 800798c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007990:	2b04      	cmp	r3, #4
 8007992:	d003      	beq.n	800799c <HAL_SPI_TransmitReceive+0x70>
 8007994:	2302      	movs	r3, #2
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799a:	e16d      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x34c>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x82>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x82>
 80079a8:	887b      	ldrh	r3, [r7, #2]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x8a>
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b4:	e160      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x34c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d003      	beq.n	80079ca <HAL_SPI_TransmitReceive+0x9e>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2205      	movs	r2, #5
 80079c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	887a      	ldrh	r2, [r7, #2]
 80079da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	887a      	ldrh	r2, [r7, #2]
 80079e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	887a      	ldrh	r2, [r7, #2]
 80079ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	887a      	ldrh	r2, [r7, #2]
 80079f2:	869a      	strh	r2, [r3, #52]	@ 0x34
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0a:	2b40      	cmp	r3, #64	@ 0x40
 8007a0c:	d007      	beq.n	8007a1e <HAL_SPI_TransmitReceive+0xf2>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a26:	d17c      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x1f6>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_SPI_TransmitReceive+0x10a>
 8007a30:	8b7b      	ldrh	r3, [r7, #26]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d16a      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x1e0>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	881a      	ldrh	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a46:	1c9a      	adds	r2, r3, #2
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a5a:	e057      	b.n	8007b0c <HAL_SPI_TransmitReceive+0x1e0>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d11b      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x176>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d016      	beq.n	8007aa2 <HAL_SPI_TransmitReceive+0x176>
 8007a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d113      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x176>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7e:	881a      	ldrh	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8a:	1c9a      	adds	r2, r3, #2
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d119      	bne.n	8007ae4 <HAL_SPI_TransmitReceive+0x1b8>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d014      	beq.n	8007ae4 <HAL_SPI_TransmitReceive+0x1b8>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	b292      	uxth	r2, r2
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007acc:	1c9a      	adds	r2, r3, #2
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ae4:	f7fe fc66 	bl	80063b4 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d80b      	bhi.n	8007b0c <HAL_SPI_TransmitReceive+0x1e0>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afa:	d007      	beq.n	8007b0c <HAL_SPI_TransmitReceive+0x1e0>
 8007afc:	2303      	movs	r3, #3
 8007afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007b0a:	e0b5      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x34c>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1a2      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x130>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d19d      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x130>
 8007b20:	e080      	b.n	8007c24 <HAL_SPI_TransmitReceive+0x2f8>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_SPI_TransmitReceive+0x204>
 8007b2a:	8b7b      	ldrh	r3, [r7, #26]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d16f      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x2e4>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	330c      	adds	r3, #12
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b56:	e05b      	b.n	8007c10 <HAL_SPI_TransmitReceive+0x2e4>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d11c      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x274>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d017      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x274>
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d114      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x274>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	7812      	ldrb	r2, [r2, #0]
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d119      	bne.n	8007be2 <HAL_SPI_TransmitReceive+0x2b6>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d014      	beq.n	8007be2 <HAL_SPI_TransmitReceive+0x2b6>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bde:	2301      	movs	r3, #1
 8007be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007be2:	f7fe fbe7 	bl	80063b4 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d803      	bhi.n	8007bfa <HAL_SPI_TransmitReceive+0x2ce>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d102      	bne.n	8007c00 <HAL_SPI_TransmitReceive+0x2d4>
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d107      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x2e4>
 8007c00:	2303      	movs	r3, #3
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007c0e:	e033      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x34c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d19e      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x22c>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d199      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x22c>
 8007c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f8b7 	bl	8007d9c <SPI_EndRxTxTransaction>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x316>
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c40:	e01a      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x34c>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <HAL_SPI_TransmitReceive+0x334>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_SPI_TransmitReceive+0x344>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6e:	e003      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x34c>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007c80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c84:	4618      	mov	r0, r3
 8007c86:	3730      	adds	r7, #48	@ 0x30
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <SPI_WaitFlagStateUntilTimeout>:
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	71fb      	strb	r3, [r7, #7]
 8007c9c:	f7fe fb8a 	bl	80063b4 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4413      	add	r3, r2
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	f7fe fb82 	bl	80063b4 <HAL_GetTick>
 8007cb0:	61b8      	str	r0, [r7, #24]
 8007cb2:	4b39      	ldr	r3, [pc, #228]	@ (8007d98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	015b      	lsls	r3, r3, #5
 8007cb8:	0d1b      	lsrs	r3, r3, #20
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e054      	b.n	8007d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cca:	d050      	beq.n	8007d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007ccc:	f7fe fb72 	bl	80063b4 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d902      	bls.n	8007ce2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d13d      	bne.n	8007d5e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cfa:	d111      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d04:	d004      	beq.n	8007d10 <SPI_WaitFlagStateUntilTimeout+0x84>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0e:	d107      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d28:	d10f      	bne.n	8007d4a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e017      	b.n	8007d8e <SPI_WaitFlagStateUntilTimeout+0x102>
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8007d64:	2300      	movs	r3, #0
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4013      	ands	r3, r2
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d19b      	bne.n	8007cc4 <SPI_WaitFlagStateUntilTimeout+0x38>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20016a7c 	.word	0x20016a7c

08007d9c <SPI_EndRxTxTransaction>:
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2201      	movs	r2, #1
 8007db0:	2102      	movs	r1, #2
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff ff6a 	bl	8007c8c <SPI_WaitFlagStateUntilTimeout>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <SPI_EndRxTxTransaction+0x32>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc2:	f043 0220 	orr.w	r2, r3, #32
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e032      	b.n	8007e34 <SPI_EndRxTxTransaction+0x98>
 8007dce:	4b1b      	ldr	r3, [pc, #108]	@ (8007e3c <SPI_EndRxTxTransaction+0xa0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007e40 <SPI_EndRxTxTransaction+0xa4>)
 8007dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd8:	0d5b      	lsrs	r3, r3, #21
 8007dda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007dde:	fb02 f303 	mul.w	r3, r2, r3
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dec:	d112      	bne.n	8007e14 <SPI_EndRxTxTransaction+0x78>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2200      	movs	r2, #0
 8007df6:	2180      	movs	r1, #128	@ 0x80
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff ff47 	bl	8007c8c <SPI_WaitFlagStateUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d016      	beq.n	8007e32 <SPI_EndRxTxTransaction+0x96>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007e10:	2303      	movs	r3, #3
 8007e12:	e00f      	b.n	8007e34 <SPI_EndRxTxTransaction+0x98>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <SPI_EndRxTxTransaction+0x94>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2a:	2b80      	cmp	r3, #128	@ 0x80
 8007e2c:	d0f2      	beq.n	8007e14 <SPI_EndRxTxTransaction+0x78>
 8007e2e:	e000      	b.n	8007e32 <SPI_EndRxTxTransaction+0x96>
 8007e30:	bf00      	nop
 8007e32:	2300      	movs	r3, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20016a7c 	.word	0x20016a7c
 8007e40:	165e9f81 	.word	0x165e9f81

08007e44 <HAL_TIM_Base_Init>:
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_TIM_Base_Init+0x12>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e041      	b.n	8007eda <HAL_TIM_Base_Init+0x96>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_TIM_Base_Init+0x2c>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fe f828 	bl	8005ec0 <HAL_TIM_Base_MspInit>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f000 fad8 	bl	8008438 <TIM_Base_SetConfig>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_TIM_PWM_Init>:
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_TIM_PWM_Init+0x12>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e041      	b.n	8007f78 <HAL_TIM_PWM_Init+0x96>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <HAL_TIM_PWM_Init+0x2c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f839 	bl	8007f80 <HAL_TIM_PWM_MspInit>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f000 fa89 	bl	8008438 <TIM_Base_SetConfig>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f76:	2300      	movs	r3, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_TIM_PWM_MspInit>:
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_TIM_PWM_Start>:
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <HAL_TIM_PWM_Start+0x24>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	bf14      	ite	ne
 8007fb0:	2301      	movne	r3, #1
 8007fb2:	2300      	moveq	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	e022      	b.n	8007ffe <HAL_TIM_PWM_Start+0x6a>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d109      	bne.n	8007fd2 <HAL_TIM_PWM_Start+0x3e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	bf14      	ite	ne
 8007fca:	2301      	movne	r3, #1
 8007fcc:	2300      	moveq	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	e015      	b.n	8007ffe <HAL_TIM_PWM_Start+0x6a>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d109      	bne.n	8007fec <HAL_TIM_PWM_Start+0x58>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	bf14      	ite	ne
 8007fe4:	2301      	movne	r3, #1
 8007fe6:	2300      	moveq	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	e008      	b.n	8007ffe <HAL_TIM_PWM_Start+0x6a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <HAL_TIM_PWM_Start+0x72>
 8008002:	2301      	movs	r3, #1
 8008004:	e07c      	b.n	8008100 <HAL_TIM_PWM_Start+0x16c>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <HAL_TIM_PWM_Start+0x82>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008014:	e013      	b.n	800803e <HAL_TIM_PWM_Start+0xaa>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b04      	cmp	r3, #4
 800801a:	d104      	bne.n	8008026 <HAL_TIM_PWM_Start+0x92>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008024:	e00b      	b.n	800803e <HAL_TIM_PWM_Start+0xaa>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b08      	cmp	r3, #8
 800802a:	d104      	bne.n	8008036 <HAL_TIM_PWM_Start+0xa2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008034:	e003      	b.n	800803e <HAL_TIM_PWM_Start+0xaa>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2201      	movs	r2, #1
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fcec 	bl	8008a24 <TIM_CCxChannelCmd>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a2d      	ldr	r2, [pc, #180]	@ (8008108 <HAL_TIM_PWM_Start+0x174>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <HAL_TIM_PWM_Start+0xcc>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a2c      	ldr	r2, [pc, #176]	@ (800810c <HAL_TIM_PWM_Start+0x178>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d101      	bne.n	8008064 <HAL_TIM_PWM_Start+0xd0>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <HAL_TIM_PWM_Start+0xd2>
 8008064:	2300      	movs	r3, #0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_TIM_PWM_Start+0xe6>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008078:	645a      	str	r2, [r3, #68]	@ 0x44
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a22      	ldr	r2, [pc, #136]	@ (8008108 <HAL_TIM_PWM_Start+0x174>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d022      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800808c:	d01d      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1f      	ldr	r2, [pc, #124]	@ (8008110 <HAL_TIM_PWM_Start+0x17c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1d      	ldr	r2, [pc, #116]	@ (8008114 <HAL_TIM_PWM_Start+0x180>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d013      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008118 <HAL_TIM_PWM_Start+0x184>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00e      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a16      	ldr	r2, [pc, #88]	@ (800810c <HAL_TIM_PWM_Start+0x178>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d009      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a18      	ldr	r2, [pc, #96]	@ (800811c <HAL_TIM_PWM_Start+0x188>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d004      	beq.n	80080ca <HAL_TIM_PWM_Start+0x136>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a16      	ldr	r2, [pc, #88]	@ (8008120 <HAL_TIM_PWM_Start+0x18c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d111      	bne.n	80080ee <HAL_TIM_PWM_Start+0x15a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b06      	cmp	r3, #6
 80080da:	d010      	beq.n	80080fe <HAL_TIM_PWM_Start+0x16a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e007      	b.n	80080fe <HAL_TIM_PWM_Start+0x16a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800
 8008118:	40000c00 	.word	0x40000c00
 800811c:	40014000 	.word	0x40014000
 8008120:	40001800 	.word	0x40001800

08008124 <HAL_TIM_PWM_ConfigChannel>:
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	2300      	movs	r3, #0
 8008132:	75fb      	strb	r3, [r7, #23]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800813e:	2302      	movs	r3, #2
 8008140:	e0ae      	b.n	80082a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b0c      	cmp	r3, #12
 800814e:	f200 809f 	bhi.w	8008290 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008152:	a201      	add	r2, pc, #4	@ (adr r2, 8008158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	0800818d 	.word	0x0800818d
 800815c:	08008291 	.word	0x08008291
 8008160:	08008291 	.word	0x08008291
 8008164:	08008291 	.word	0x08008291
 8008168:	080081cd 	.word	0x080081cd
 800816c:	08008291 	.word	0x08008291
 8008170:	08008291 	.word	0x08008291
 8008174:	08008291 	.word	0x08008291
 8008178:	0800820f 	.word	0x0800820f
 800817c:	08008291 	.word	0x08008291
 8008180:	08008291 	.word	0x08008291
 8008184:	08008291 	.word	0x08008291
 8008188:	0800824f 	.word	0x0800824f
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f9fc 	bl	8008590 <TIM_OC1_SetConfig>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0208 	orr.w	r2, r2, #8
 80081a6:	619a      	str	r2, [r3, #24]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0204 	bic.w	r2, r2, #4
 80081b6:	619a      	str	r2, [r3, #24]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6999      	ldr	r1, [r3, #24]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	619a      	str	r2, [r3, #24]
 80081ca:	e064      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fa4c 	bl	8008670 <TIM_OC2_SetConfig>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081e6:	619a      	str	r2, [r3, #24]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081f6:	619a      	str	r2, [r3, #24]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	021a      	lsls	r2, r3, #8
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	619a      	str	r2, [r3, #24]
 800820c:	e043      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 faa1 	bl	800875c <TIM_OC3_SetConfig>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0208 	orr.w	r2, r2, #8
 8008228:	61da      	str	r2, [r3, #28]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0204 	bic.w	r2, r2, #4
 8008238:	61da      	str	r2, [r3, #28]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69d9      	ldr	r1, [r3, #28]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	61da      	str	r2, [r3, #28]
 800824c:	e023      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 faf5 	bl	8008844 <TIM_OC4_SetConfig>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008268:	61da      	str	r2, [r3, #28]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008278:	61da      	str	r2, [r3, #28]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	021a      	lsls	r2, r3, #8
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	61da      	str	r2, [r3, #28]
 800828e:	e002      	b.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
 8008294:	bf00      	nop
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_TIM_ConfigClockSource>:
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIM_ConfigClockSource+0x1c>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0b4      	b.n	800842e <HAL_TIM_ConfigClockSource+0x186>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082e2:	60bb      	str	r3, [r7, #8]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ea:	60bb      	str	r3, [r7, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	609a      	str	r2, [r3, #8]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fc:	d03e      	beq.n	800837c <HAL_TIM_ConfigClockSource+0xd4>
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008302:	f200 8087 	bhi.w	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830a:	f000 8086 	beq.w	800841a <HAL_TIM_ConfigClockSource+0x172>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008312:	d87f      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008314:	2b70      	cmp	r3, #112	@ 0x70
 8008316:	d01a      	beq.n	800834e <HAL_TIM_ConfigClockSource+0xa6>
 8008318:	2b70      	cmp	r3, #112	@ 0x70
 800831a:	d87b      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b60      	cmp	r3, #96	@ 0x60
 800831e:	d050      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008320:	2b60      	cmp	r3, #96	@ 0x60
 8008322:	d877      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b50      	cmp	r3, #80	@ 0x50
 8008326:	d03c      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008328:	2b50      	cmp	r3, #80	@ 0x50
 800832a:	d873      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b40      	cmp	r3, #64	@ 0x40
 800832e:	d058      	beq.n	80083e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008330:	2b40      	cmp	r3, #64	@ 0x40
 8008332:	d86f      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b30      	cmp	r3, #48	@ 0x30
 8008336:	d064      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008338:	2b30      	cmp	r3, #48	@ 0x30
 800833a:	d86b      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b20      	cmp	r3, #32
 800833e:	d060      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008340:	2b20      	cmp	r3, #32
 8008342:	d867      	bhi.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b00      	cmp	r3, #0
 8008346:	d05c      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 8008348:	2b10      	cmp	r3, #16
 800834a:	d05a      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0x15a>
 800834c:	e062      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x16c>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6899      	ldr	r1, [r3, #8]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f000 fb41 	bl	80089e4 <TIM_ETR_SetConfig>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	609a      	str	r2, [r3, #8]
 800837a:	e04f      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	6899      	ldr	r1, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f000 fb2a 	bl	80089e4 <TIM_ETR_SetConfig>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	e03c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6859      	ldr	r1, [r3, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f000 fa9e 	bl	80088f0 <TIM_TI1_ConfigInputStage>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2150      	movs	r1, #80	@ 0x50
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 faf7 	bl	80089ae <TIM_ITRx_SetConfig>
 80083c0:	e02c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6859      	ldr	r1, [r3, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f000 fabd 	bl	800894e <TIM_TI2_ConfigInputStage>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2160      	movs	r1, #96	@ 0x60
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fae7 	bl	80089ae <TIM_ITRx_SetConfig>
 80083e0:	e01c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6859      	ldr	r1, [r3, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f000 fa7e 	bl	80088f0 <TIM_TI1_ConfigInputStage>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2140      	movs	r1, #64	@ 0x40
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fad7 	bl	80089ae <TIM_ITRx_SetConfig>
 8008400:	e00c      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f000 face 	bl	80089ae <TIM_ITRx_SetConfig>
 8008412:	e003      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e000      	b.n	800841c <HAL_TIM_ConfigClockSource+0x174>
 800841a:	bf00      	nop
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <TIM_Base_SetConfig>:
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a46      	ldr	r2, [pc, #280]	@ (8008564 <TIM_Base_SetConfig+0x12c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a43      	ldr	r2, [pc, #268]	@ (8008568 <TIM_Base_SetConfig+0x130>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a42      	ldr	r2, [pc, #264]	@ (800856c <TIM_Base_SetConfig+0x134>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a41      	ldr	r2, [pc, #260]	@ (8008570 <TIM_Base_SetConfig+0x138>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a40      	ldr	r2, [pc, #256]	@ (8008574 <TIM_Base_SetConfig+0x13c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d108      	bne.n	800848a <TIM_Base_SetConfig+0x52>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a35      	ldr	r2, [pc, #212]	@ (8008564 <TIM_Base_SetConfig+0x12c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d02b      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008498:	d027      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a32      	ldr	r2, [pc, #200]	@ (8008568 <TIM_Base_SetConfig+0x130>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d023      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a31      	ldr	r2, [pc, #196]	@ (800856c <TIM_Base_SetConfig+0x134>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01f      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a30      	ldr	r2, [pc, #192]	@ (8008570 <TIM_Base_SetConfig+0x138>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d01b      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008574 <TIM_Base_SetConfig+0x13c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d017      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008578 <TIM_Base_SetConfig+0x140>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a2d      	ldr	r2, [pc, #180]	@ (800857c <TIM_Base_SetConfig+0x144>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00f      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008580 <TIM_Base_SetConfig+0x148>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00b      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008584 <TIM_Base_SetConfig+0x14c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d007      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008588 <TIM_Base_SetConfig+0x150>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d003      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a29      	ldr	r2, [pc, #164]	@ (800858c <TIM_Base_SetConfig+0x154>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d108      	bne.n	80084fc <TIM_Base_SetConfig+0xc4>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a10      	ldr	r2, [pc, #64]	@ (8008564 <TIM_Base_SetConfig+0x12c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d003      	beq.n	8008530 <TIM_Base_SetConfig+0xf8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a12      	ldr	r2, [pc, #72]	@ (8008574 <TIM_Base_SetConfig+0x13c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d103      	bne.n	8008538 <TIM_Base_SetConfig+0x100>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	615a      	str	r2, [r3, #20]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b01      	cmp	r3, #1
 8008548:	d105      	bne.n	8008556 <TIM_Base_SetConfig+0x11e>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f023 0201 	bic.w	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40010000 	.word	0x40010000
 8008568:	40000400 	.word	0x40000400
 800856c:	40000800 	.word	0x40000800
 8008570:	40000c00 	.word	0x40000c00
 8008574:	40010400 	.word	0x40010400
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800
 8008584:	40001800 	.word	0x40001800
 8008588:	40001c00 	.word	0x40001c00
 800858c:	40002000 	.word	0x40002000

08008590 <TIM_OC1_SetConfig>:
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	f023 0201 	bic.w	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	621a      	str	r2, [r3, #32]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f023 0302 	bic.w	r3, r3, #2
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a20      	ldr	r2, [pc, #128]	@ (8008668 <TIM_OC1_SetConfig+0xd8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_OC1_SetConfig+0x64>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a1f      	ldr	r2, [pc, #124]	@ (800866c <TIM_OC1_SetConfig+0xdc>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d10c      	bne.n	800860e <TIM_OC1_SetConfig+0x7e>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f023 0308 	bic.w	r3, r3, #8
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f023 0304 	bic.w	r3, r3, #4
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a15      	ldr	r2, [pc, #84]	@ (8008668 <TIM_OC1_SetConfig+0xd8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d003      	beq.n	800861e <TIM_OC1_SetConfig+0x8e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a14      	ldr	r2, [pc, #80]	@ (800866c <TIM_OC1_SetConfig+0xdc>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d111      	bne.n	8008642 <TIM_OC1_SetConfig+0xb2>
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	605a      	str	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	619a      	str	r2, [r3, #24]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	635a      	str	r2, [r3, #52]	@ 0x34
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	621a      	str	r2, [r3, #32]
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	40010000 	.word	0x40010000
 800866c:	40010400 	.word	0x40010400

08008670 <TIM_OC2_SetConfig>:
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f023 0210 	bic.w	r2, r3, #16
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	621a      	str	r2, [r3, #32]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	021b      	lsls	r3, r3, #8
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f023 0320 	bic.w	r3, r3, #32
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <TIM_OC2_SetConfig+0xe4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d003      	beq.n	80086d8 <TIM_OC2_SetConfig+0x68>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a21      	ldr	r2, [pc, #132]	@ (8008758 <TIM_OC2_SetConfig+0xe8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d10d      	bne.n	80086f4 <TIM_OC2_SetConfig+0x84>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a17      	ldr	r2, [pc, #92]	@ (8008754 <TIM_OC2_SetConfig+0xe4>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_OC2_SetConfig+0x94>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a16      	ldr	r2, [pc, #88]	@ (8008758 <TIM_OC2_SetConfig+0xe8>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d113      	bne.n	800872c <TIM_OC2_SetConfig+0xbc>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	619a      	str	r2, [r3, #24]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	621a      	str	r2, [r3, #32]
 8008746:	bf00      	nop
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40010000 	.word	0x40010000
 8008758:	40010400 	.word	0x40010400

0800875c <TIM_OC3_SetConfig>:
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	621a      	str	r2, [r3, #32]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a21      	ldr	r2, [pc, #132]	@ (800883c <TIM_OC3_SetConfig+0xe0>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d003      	beq.n	80087c2 <TIM_OC3_SetConfig+0x66>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a20      	ldr	r2, [pc, #128]	@ (8008840 <TIM_OC3_SetConfig+0xe4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d10d      	bne.n	80087de <TIM_OC3_SetConfig+0x82>
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	021b      	lsls	r3, r3, #8
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a16      	ldr	r2, [pc, #88]	@ (800883c <TIM_OC3_SetConfig+0xe0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d003      	beq.n	80087ee <TIM_OC3_SetConfig+0x92>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a15      	ldr	r2, [pc, #84]	@ (8008840 <TIM_OC3_SetConfig+0xe4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d113      	bne.n	8008816 <TIM_OC3_SetConfig+0xba>
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	605a      	str	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	61da      	str	r2, [r3, #28]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	63da      	str	r2, [r3, #60]	@ 0x3c
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	621a      	str	r2, [r3, #32]
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	40010000 	.word	0x40010000
 8008840:	40010400 	.word	0x40010400

08008844 <TIM_OC4_SetConfig>:
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	621a      	str	r2, [r3, #32]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	021b      	lsls	r3, r3, #8
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	031b      	lsls	r3, r3, #12
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a12      	ldr	r2, [pc, #72]	@ (80088e8 <TIM_OC4_SetConfig+0xa4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_OC4_SetConfig+0x68>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a11      	ldr	r2, [pc, #68]	@ (80088ec <TIM_OC4_SetConfig+0xa8>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d109      	bne.n	80088c0 <TIM_OC4_SetConfig+0x7c>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	019b      	lsls	r3, r3, #6
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	605a      	str	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	61da      	str	r2, [r3, #28]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	621a      	str	r2, [r3, #32]
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40010400 	.word	0x40010400

080088f0 <TIM_TI1_ConfigInputStage>:
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f023 0201 	bic.w	r2, r3, #1
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	621a      	str	r2, [r3, #32]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4313      	orrs	r3, r2
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f023 030a 	bic.w	r3, r3, #10
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	619a      	str	r2, [r3, #24]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	621a      	str	r2, [r3, #32]
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <TIM_TI2_ConfigInputStage>:
 800894e:	b480      	push	{r7}
 8008950:	b087      	sub	sp, #28
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	f023 0210 	bic.w	r2, r3, #16
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	621a      	str	r2, [r3, #32]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	613b      	str	r3, [r7, #16]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	031b      	lsls	r3, r3, #12
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	011b      	lsls	r3, r3, #4
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	619a      	str	r2, [r3, #24]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	621a      	str	r2, [r3, #32]
 80089a2:	bf00      	nop
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <TIM_ITRx_SetConfig>:
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f043 0307 	orr.w	r3, r3, #7
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	609a      	str	r2, [r3, #8]
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <TIM_ETR_SetConfig>:
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	021a      	lsls	r2, r3, #8
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	609a      	str	r2, [r3, #8]
 8008a18:	bf00      	nop
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <TIM_CCxChannelCmd>:
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	2201      	movs	r2, #1
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6a1a      	ldr	r2, [r3, #32]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	43db      	mvns	r3, r3
 8008a46:	401a      	ands	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	621a      	str	r2, [r3, #32]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	fa01 f303 	lsl.w	r3, r1, r3
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	621a      	str	r2, [r3, #32]
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <HAL_TIMEx_MasterConfigSynchronization>:
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e05a      	b.n	8008b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	605a      	str	r2, [r3, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a21      	ldr	r2, [pc, #132]	@ (8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d022      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad4:	d01d      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a1d      	ldr	r2, [pc, #116]	@ (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d018      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d013      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a1a      	ldr	r2, [pc, #104]	@ (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00e      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a18      	ldr	r2, [pc, #96]	@ (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d009      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a17      	ldr	r2, [pc, #92]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d004      	beq.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d10c      	bne.n	8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60bb      	str	r3, [r7, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40000400 	.word	0x40000400
 8008b54:	40000800 	.word	0x40000800
 8008b58:	40000c00 	.word	0x40000c00
 8008b5c:	40010400 	.word	0x40010400
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40001800 	.word	0x40001800

08008b68 <HAL_TIMEx_ConfigBreakDeadTime>:
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e03d      	b.n	8008c00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	645a      	str	r2, [r3, #68]	@ 0x44
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_UART_Init>:
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_UART_Init+0x12>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e042      	b.n	8008ca4 <HAL_UART_Init+0x98>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <HAL_UART_Init+0x2c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fd f9da 	bl	8005fec <HAL_UART_MspInit>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2224      	movs	r2, #36	@ 0x24
 8008c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c4e:	60da      	str	r2, [r3, #12]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fdbd 	bl	80097d0 <UART_SetConfig>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691a      	ldr	r2, [r3, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c64:	611a      	str	r2, [r3, #16]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	695a      	ldr	r2, [r3, #20]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c74:	615a      	str	r2, [r3, #20]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_UART_Transmit>:
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08a      	sub	sp, #40	@ 0x28
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	80fb      	strh	r3, [r7, #6]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b20      	cmp	r3, #32
 8008cca:	d175      	bne.n	8008db8 <HAL_UART_Transmit+0x10c>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <HAL_UART_Transmit+0x2c>
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_UART_Transmit+0x30>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e06e      	b.n	8008dba <HAL_UART_Transmit+0x10e>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	645a      	str	r2, [r3, #68]	@ 0x44
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2221      	movs	r2, #33	@ 0x21
 8008ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cea:	f7fd fb63 	bl	80063b4 <HAL_GetTick>
 8008cee:	6178      	str	r0, [r7, #20]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	88fa      	ldrh	r2, [r7, #6]
 8008cf4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	88fa      	ldrh	r2, [r7, #6]
 8008cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d04:	d108      	bne.n	8008d18 <HAL_UART_Transmit+0x6c>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <HAL_UART_Transmit+0x6c>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	61fb      	str	r3, [r7, #28]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	e003      	b.n	8008d20 <HAL_UART_Transmit+0x74>
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	61fb      	str	r3, [r7, #28]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61bb      	str	r3, [r7, #24]
 8008d20:	e02e      	b.n	8008d80 <HAL_UART_Transmit+0xd4>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2180      	movs	r1, #128	@ 0x80
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fb1f 	bl	8009370 <UART_WaitOnFlagUntilTimeout>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <HAL_UART_Transmit+0x98>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d40:	2303      	movs	r3, #3
 8008d42:	e03a      	b.n	8008dba <HAL_UART_Transmit+0x10e>
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10b      	bne.n	8008d62 <HAL_UART_Transmit+0xb6>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e007      	b.n	8008d72 <HAL_UART_Transmit+0xc6>
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1cb      	bne.n	8008d22 <HAL_UART_Transmit+0x76>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2200      	movs	r2, #0
 8008d92:	2140      	movs	r1, #64	@ 0x40
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 faeb 	bl	8009370 <UART_WaitOnFlagUntilTimeout>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_UART_Transmit+0x100>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008da8:	2303      	movs	r3, #3
 8008daa:	e006      	b.n	8008dba <HAL_UART_Transmit+0x10e>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008db4:	2300      	movs	r3, #0
 8008db6:	e000      	b.n	8008dba <HAL_UART_Transmit+0x10e>
 8008db8:	2302      	movs	r3, #2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_UART_Receive_IT>:
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	80fb      	strh	r3, [r7, #6]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b20      	cmp	r3, #32
 8008dda:	d112      	bne.n	8008e02 <HAL_UART_Receive_IT+0x40>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_UART_Receive_IT+0x26>
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_UART_Receive_IT+0x2a>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e00b      	b.n	8008e04 <HAL_UART_Receive_IT+0x42>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	461a      	mov	r2, r3
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fb12 	bl	8009422 <UART_Start_Receive_IT>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	e000      	b.n	8008e04 <HAL_UART_Receive_IT+0x42>
 8008e02:	2302      	movs	r3, #2
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_UART_IRQHandler>:
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b0ba      	sub	sp, #232	@ 0xe8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e32:	2300      	movs	r3, #0
 8008e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10f      	bne.n	8008e72 <HAL_UART_IRQHandler+0x66>
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <HAL_UART_IRQHandler+0x66>
 8008e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_UART_IRQHandler+0x66>
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fbf2 	bl	8009654 <UART_Receive_IT>
 8008e70:	e25b      	b.n	800932a <HAL_UART_IRQHandler+0x51e>
 8008e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 80de 	beq.w	8009038 <HAL_UART_IRQHandler+0x22c>
 8008e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <HAL_UART_IRQHandler+0x8a>
 8008e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80d1 	beq.w	8009038 <HAL_UART_IRQHandler+0x22c>
 8008e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <HAL_UART_IRQHandler+0xae>
 8008ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d005      	beq.n	8008eba <HAL_UART_IRQHandler+0xae>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb2:	f043 0201 	orr.w	r2, r3, #1
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8008eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <HAL_UART_IRQHandler+0xd2>
 8008ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <HAL_UART_IRQHandler+0xd2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	f043 0202 	orr.w	r2, r3, #2
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	645a      	str	r2, [r3, #68]	@ 0x44
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <HAL_UART_IRQHandler+0xf6>
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <HAL_UART_IRQHandler+0xf6>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008efa:	f043 0204 	orr.w	r2, r3, #4
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	645a      	str	r2, [r3, #68]	@ 0x44
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d011      	beq.n	8008f32 <HAL_UART_IRQHandler+0x126>
 8008f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d105      	bne.n	8008f26 <HAL_UART_IRQHandler+0x11a>
 8008f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d005      	beq.n	8008f32 <HAL_UART_IRQHandler+0x126>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2a:	f043 0208 	orr.w	r2, r3, #8
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	645a      	str	r2, [r3, #68]	@ 0x44
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 81f2 	beq.w	8009320 <HAL_UART_IRQHandler+0x514>
 8008f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_UART_IRQHandler+0x14e>
 8008f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <HAL_UART_IRQHandler+0x14e>
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fb7d 	bl	8009654 <UART_Receive_IT>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b40      	cmp	r3, #64	@ 0x40
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <HAL_UART_IRQHandler+0x17a>
 8008f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d04f      	beq.n	8009026 <HAL_UART_IRQHandler+0x21a>
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa85 	bl	8009496 <UART_EndRxTransfer>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d141      	bne.n	800901e <HAL_UART_IRQHandler+0x212>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3314      	adds	r3, #20
 8008fa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3314      	adds	r3, #20
 8008fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1d9      	bne.n	8008f9a <HAL_UART_IRQHandler+0x18e>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d013      	beq.n	8009016 <HAL_UART_IRQHandler+0x20a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80091ec <HAL_UART_IRQHandler+0x3e0>)
 8008ff4:	651a      	str	r2, [r3, #80]	@ 0x50
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fd fb98 	bl	8006730 <HAL_DMA_Abort_IT>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <HAL_UART_IRQHandler+0x228>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	e00e      	b.n	8009034 <HAL_UART_IRQHandler+0x228>
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f994 	bl	8009344 <HAL_UART_ErrorCallback>
 800901c:	e00a      	b.n	8009034 <HAL_UART_IRQHandler+0x228>
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f990 	bl	8009344 <HAL_UART_ErrorCallback>
 8009024:	e006      	b.n	8009034 <HAL_UART_IRQHandler+0x228>
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f98c 	bl	8009344 <HAL_UART_ErrorCallback>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	645a      	str	r2, [r3, #68]	@ 0x44
 8009032:	e175      	b.n	8009320 <HAL_UART_IRQHandler+0x514>
 8009034:	bf00      	nop
 8009036:	e173      	b.n	8009320 <HAL_UART_IRQHandler+0x514>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903c:	2b01      	cmp	r3, #1
 800903e:	f040 814f 	bne.w	80092e0 <HAL_UART_IRQHandler+0x4d4>
 8009042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009046:	f003 0310 	and.w	r3, r3, #16
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8148 	beq.w	80092e0 <HAL_UART_IRQHandler+0x4d4>
 8009050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8141 	beq.w	80092e0 <HAL_UART_IRQHandler+0x4d4>
 800905e:	2300      	movs	r3, #0
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60bb      	str	r3, [r7, #8]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907e:	2b40      	cmp	r3, #64	@ 0x40
 8009080:	f040 80b6 	bne.w	80091f0 <HAL_UART_IRQHandler+0x3e4>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8009090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8145 	beq.w	8009324 <HAL_UART_IRQHandler+0x518>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800909e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090a2:	429a      	cmp	r2, r3
 80090a4:	f080 813e 	bcs.w	8009324 <HAL_UART_IRQHandler+0x518>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ba:	f000 8088 	beq.w	80091ce <HAL_UART_IRQHandler+0x3c2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	330c      	adds	r3, #12
 80090c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1d9      	bne.n	80090be <HAL_UART_IRQHandler+0x2b2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3314      	adds	r3, #20
 8009110:	677b      	str	r3, [r7, #116]	@ 0x74
 8009112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	673b      	str	r3, [r7, #112]	@ 0x70
 800911a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800911c:	f023 0301 	bic.w	r3, r3, #1
 8009120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3314      	adds	r3, #20
 800912a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800912e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009132:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009134:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e1      	bne.n	800910a <HAL_UART_IRQHandler+0x2fe>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3314      	adds	r3, #20
 800914c:	663b      	str	r3, [r7, #96]	@ 0x60
 800914e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800915c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3314      	adds	r3, #20
 8009166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800916a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800916c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800916e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009170:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	667b      	str	r3, [r7, #100]	@ 0x64
 8009178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e3      	bne.n	8009146 <HAL_UART_IRQHandler+0x33a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	631a      	str	r2, [r3, #48]	@ 0x30
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800919c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800919e:	f023 0310 	bic.w	r3, r3, #16
 80091a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80091b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80091be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e3      	bne.n	800918c <HAL_UART_IRQHandler+0x380>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fd fa41 	bl	8006650 <HAL_DMA_Abort>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2202      	movs	r2, #2
 80091d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f8b7 	bl	8009358 <HAL_UARTEx_RxEventCallback>
 80091ea:	e09b      	b.n	8009324 <HAL_UART_IRQHandler+0x518>
 80091ec:	0800955d 	.word	0x0800955d
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009204:	b29b      	uxth	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 808e 	beq.w	8009328 <HAL_UART_IRQHandler+0x51c>
 800920c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 8089 	beq.w	8009328 <HAL_UART_IRQHandler+0x51c>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	330c      	adds	r3, #12
 800921c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800922c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800923a:	647a      	str	r2, [r7, #68]	@ 0x44
 800923c:	643b      	str	r3, [r7, #64]	@ 0x40
 800923e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e3      	bne.n	8009216 <HAL_UART_IRQHandler+0x40a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3314      	adds	r3, #20
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	623b      	str	r3, [r7, #32]
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3314      	adds	r3, #20
 800926e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009272:	633a      	str	r2, [r7, #48]	@ 0x30
 8009274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e3      	bne.n	800924e <HAL_UART_IRQHandler+0x442>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	631a      	str	r2, [r3, #48]	@ 0x30
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330c      	adds	r3, #12
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0310 	bic.w	r3, r3, #16
 80092aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80092b8:	61fa      	str	r2, [r7, #28]
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	69b9      	ldr	r1, [r7, #24]
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e3      	bne.n	8009294 <HAL_UART_IRQHandler+0x488>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80092d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f83d 	bl	8009358 <HAL_UARTEx_RxEventCallback>
 80092de:	e023      	b.n	8009328 <HAL_UART_IRQHandler+0x51c>
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <HAL_UART_IRQHandler+0x4f4>
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <HAL_UART_IRQHandler+0x4f4>
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f943 	bl	8009584 <UART_Transmit_IT>
 80092fe:	e014      	b.n	800932a <HAL_UART_IRQHandler+0x51e>
 8009300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <HAL_UART_IRQHandler+0x51e>
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d008      	beq.n	800932a <HAL_UART_IRQHandler+0x51e>
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f983 	bl	8009624 <UART_EndTransmit_IT>
 800931e:	e004      	b.n	800932a <HAL_UART_IRQHandler+0x51e>
 8009320:	bf00      	nop
 8009322:	e002      	b.n	800932a <HAL_UART_IRQHandler+0x51e>
 8009324:	bf00      	nop
 8009326:	e000      	b.n	800932a <HAL_UART_IRQHandler+0x51e>
 8009328:	bf00      	nop
 800932a:	37e8      	adds	r7, #232	@ 0xe8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_UART_TxCpltCallback>:
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_UART_ErrorCallback>:
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_UARTEx_RxEventCallback>:
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	807b      	strh	r3, [r7, #2]
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <UART_WaitOnFlagUntilTimeout>:
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	4613      	mov	r3, r2
 800937e:	71fb      	strb	r3, [r7, #7]
 8009380:	e03b      	b.n	80093fa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d037      	beq.n	80093fa <UART_WaitOnFlagUntilTimeout+0x8a>
 800938a:	f7fd f813 	bl	80063b4 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	6a3a      	ldr	r2, [r7, #32]
 8009396:	429a      	cmp	r2, r3
 8009398:	d302      	bcc.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <UART_WaitOnFlagUntilTimeout+0x34>
 80093a0:	2303      	movs	r3, #3
 80093a2:	e03a      	b.n	800941a <UART_WaitOnFlagUntilTimeout+0xaa>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d023      	beq.n	80093fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b80      	cmp	r3, #128	@ 0x80
 80093b6:	d020      	beq.n	80093fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b40      	cmp	r3, #64	@ 0x40
 80093bc:	d01d      	beq.n	80093fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0308 	and.w	r3, r3, #8
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d116      	bne.n	80093fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f857 	bl	8009496 <UART_EndRxTransfer>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2208      	movs	r2, #8
 80093ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093f6:	2301      	movs	r3, #1
 80093f8:	e00f      	b.n	800941a <UART_WaitOnFlagUntilTimeout+0xaa>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	4013      	ands	r3, r2
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	429a      	cmp	r2, r3
 8009408:	bf0c      	ite	eq
 800940a:	2301      	moveq	r3, #1
 800940c:	2300      	movne	r3, #0
 800940e:	b2db      	uxtb	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	429a      	cmp	r2, r3
 8009416:	d0b4      	beq.n	8009382 <UART_WaitOnFlagUntilTimeout+0x12>
 8009418:	2300      	movs	r3, #0
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <UART_Start_Receive_IT>:
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	4613      	mov	r3, r2
 800942e:	80fb      	strh	r3, [r7, #6]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	629a      	str	r2, [r3, #40]	@ 0x28
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	88fa      	ldrh	r2, [r7, #6]
 800943a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	88fa      	ldrh	r2, [r7, #6]
 8009440:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	645a      	str	r2, [r3, #68]	@ 0x44
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2222      	movs	r2, #34	@ 0x22
 800944c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <UART_Start_Receive_IT+0x46>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009466:	60da      	str	r2, [r3, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	695a      	ldr	r2, [r3, #20]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	615a      	str	r2, [r3, #20]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0220 	orr.w	r2, r2, #32
 8009486:	60da      	str	r2, [r3, #12]
 8009488:	2300      	movs	r3, #0
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <UART_EndRxTransfer>:
 8009496:	b480      	push	{r7}
 8009498:	b095      	sub	sp, #84	@ 0x54
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	330c      	adds	r3, #12
 80094a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	330c      	adds	r3, #12
 80094bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094be:	643a      	str	r2, [r7, #64]	@ 0x40
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e5      	bne.n	800949e <UART_EndRxTransfer+0x8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3314      	adds	r3, #20
 80094d8:	623b      	str	r3, [r7, #32]
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f023 0301 	bic.w	r3, r3, #1
 80094e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3314      	adds	r3, #20
 80094f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e5      	bne.n	80094d2 <UART_EndRxTransfer+0x3c>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950a:	2b01      	cmp	r3, #1
 800950c:	d119      	bne.n	8009542 <UART_EndRxTransfer+0xac>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	330c      	adds	r3, #12
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	60bb      	str	r3, [r7, #8]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	f023 0310 	bic.w	r3, r3, #16
 8009524:	647b      	str	r3, [r7, #68]	@ 0x44
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800952e:	61ba      	str	r2, [r7, #24]
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	6979      	ldr	r1, [r7, #20]
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e5      	bne.n	800950e <UART_EndRxTransfer+0x78>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009550:	bf00      	nop
 8009552:	3754      	adds	r7, #84	@ 0x54
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_DMAAbortOnError>:
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	84da      	strh	r2, [r3, #38]	@ 0x26
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff fee4 	bl	8009344 <HAL_UART_ErrorCallback>
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <UART_Transmit_IT>:
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b21      	cmp	r3, #33	@ 0x21
 8009596:	d13e      	bne.n	8009616 <UART_Transmit_IT+0x92>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095a0:	d114      	bne.n	80095cc <UART_Transmit_IT+0x48>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d110      	bne.n	80095cc <UART_Transmit_IT+0x48>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	1c9a      	adds	r2, r3, #2
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	621a      	str	r2, [r3, #32]
 80095ca:	e008      	b.n	80095de <UART_Transmit_IT+0x5a>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	1c59      	adds	r1, r3, #1
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6211      	str	r1, [r2, #32]
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4619      	mov	r1, r3
 80095ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10f      	bne.n	8009612 <UART_Transmit_IT+0x8e>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009600:	60da      	str	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009610:	60da      	str	r2, [r3, #12]
 8009612:	2300      	movs	r3, #0
 8009614:	e000      	b.n	8009618 <UART_Transmit_IT+0x94>
 8009616:	2302      	movs	r3, #2
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <UART_EndTransmit_IT>:
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800963a:	60da      	str	r2, [r3, #12]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fe73 	bl	8009330 <HAL_UART_TxCpltCallback>
 800964a:	2300      	movs	r3, #0
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <UART_Receive_IT>:
 8009654:	b580      	push	{r7, lr}
 8009656:	b08c      	sub	sp, #48	@ 0x30
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b22      	cmp	r3, #34	@ 0x22
 8009666:	f040 80ae 	bne.w	80097c6 <UART_Receive_IT+0x172>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009672:	d117      	bne.n	80096a4 <UART_Receive_IT+0x50>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d113      	bne.n	80096a4 <UART_Receive_IT+0x50>
 800967c:	2300      	movs	r3, #0
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	b29b      	uxth	r3, r3
 800968e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009692:	b29a      	uxth	r2, r3
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969c:	1c9a      	adds	r2, r3, #2
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80096a2:	e026      	b.n	80096f2 <UART_Receive_IT+0x9e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096aa:	2300      	movs	r3, #0
 80096ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	d007      	beq.n	80096c8 <UART_Receive_IT+0x74>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <UART_Receive_IT+0x82>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <UART_Receive_IT+0x82>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e008      	b.n	80096e8 <UART_Receive_IT+0x94>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	4619      	mov	r1, r3
 8009700:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009702:	2b00      	cmp	r3, #0
 8009704:	d15d      	bne.n	80097c2 <UART_Receive_IT+0x16e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0220 	bic.w	r2, r2, #32
 8009714:	60da      	str	r2, [r3, #12]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009724:	60da      	str	r2, [r3, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	695a      	ldr	r2, [r3, #20]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	615a      	str	r2, [r3, #20]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	635a      	str	r2, [r3, #52]	@ 0x34
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009748:	2b01      	cmp	r3, #1
 800974a:	d135      	bne.n	80097b8 <UART_Receive_IT+0x164>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	631a      	str	r2, [r3, #48]	@ 0x30
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	330c      	adds	r3, #12
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	613b      	str	r3, [r7, #16]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f023 0310 	bic.w	r3, r3, #16
 8009768:	627b      	str	r3, [r7, #36]	@ 0x24
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009772:	623a      	str	r2, [r7, #32]
 8009774:	61fb      	str	r3, [r7, #28]
 8009776:	69f9      	ldr	r1, [r7, #28]
 8009778:	6a3a      	ldr	r2, [r7, #32]
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	61bb      	str	r3, [r7, #24]
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e5      	bne.n	8009752 <UART_Receive_IT+0xfe>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0310 	and.w	r3, r3, #16
 8009790:	2b10      	cmp	r3, #16
 8009792:	d10a      	bne.n	80097aa <UART_Receive_IT+0x156>
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff fdd1 	bl	8009358 <HAL_UARTEx_RxEventCallback>
 80097b6:	e002      	b.n	80097be <UART_Receive_IT+0x16a>
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fb fe99 	bl	80054f0 <HAL_UART_RxCpltCallback>
 80097be:	2300      	movs	r3, #0
 80097c0:	e002      	b.n	80097c8 <UART_Receive_IT+0x174>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e000      	b.n	80097c8 <UART_Receive_IT+0x174>
 80097c6:	2302      	movs	r3, #2
 80097c8:	4618      	mov	r0, r3
 80097ca:	3730      	adds	r7, #48	@ 0x30
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <UART_SetConfig>:
 80097d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097d4:	b0c0      	sub	sp, #256	@ 0x100
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80097dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80097e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ec:	68d9      	ldr	r1, [r3, #12]
 80097ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	ea40 0301 	orr.w	r3, r0, r1
 80097f8:	6113      	str	r3, [r2, #16]
 80097fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	431a      	orrs	r2, r3
 8009808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	431a      	orrs	r2, r3
 8009810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	4313      	orrs	r3, r2
 8009818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009828:	f021 010c 	bic.w	r1, r1, #12
 800982c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009836:	430b      	orrs	r3, r1
 8009838:	60d3      	str	r3, [r2, #12]
 800983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984a:	6999      	ldr	r1, [r3, #24]
 800984c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	ea40 0301 	orr.w	r3, r0, r1
 8009856:	6153      	str	r3, [r2, #20]
 8009858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b8f      	ldr	r3, [pc, #572]	@ (8009a9c <UART_SetConfig+0x2cc>)
 8009860:	429a      	cmp	r2, r3
 8009862:	d005      	beq.n	8009870 <UART_SetConfig+0xa0>
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	4b8d      	ldr	r3, [pc, #564]	@ (8009aa0 <UART_SetConfig+0x2d0>)
 800986c:	429a      	cmp	r2, r3
 800986e:	d104      	bne.n	800987a <UART_SetConfig+0xaa>
 8009870:	f7fd fa34 	bl	8006cdc <HAL_RCC_GetPCLK2Freq>
 8009874:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009878:	e003      	b.n	8009882 <UART_SetConfig+0xb2>
 800987a:	f7fd fa1b 	bl	8006cb4 <HAL_RCC_GetPCLK1Freq>
 800987e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800988c:	f040 810c 	bne.w	8009aa8 <UART_SetConfig+0x2d8>
 8009890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009894:	2200      	movs	r2, #0
 8009896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800989a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800989e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80098a2:	4622      	mov	r2, r4
 80098a4:	462b      	mov	r3, r5
 80098a6:	1891      	adds	r1, r2, r2
 80098a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80098aa:	415b      	adcs	r3, r3
 80098ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098b2:	4621      	mov	r1, r4
 80098b4:	eb12 0801 	adds.w	r8, r2, r1
 80098b8:	4629      	mov	r1, r5
 80098ba:	eb43 0901 	adc.w	r9, r3, r1
 80098be:	f04f 0200 	mov.w	r2, #0
 80098c2:	f04f 0300 	mov.w	r3, #0
 80098c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098d2:	4690      	mov	r8, r2
 80098d4:	4699      	mov	r9, r3
 80098d6:	4623      	mov	r3, r4
 80098d8:	eb18 0303 	adds.w	r3, r8, r3
 80098dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098e0:	462b      	mov	r3, r5
 80098e2:	eb49 0303 	adc.w	r3, r9, r3
 80098e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80098fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80098fe:	460b      	mov	r3, r1
 8009900:	18db      	adds	r3, r3, r3
 8009902:	653b      	str	r3, [r7, #80]	@ 0x50
 8009904:	4613      	mov	r3, r2
 8009906:	eb42 0303 	adc.w	r3, r2, r3
 800990a:	657b      	str	r3, [r7, #84]	@ 0x54
 800990c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009914:	f7f6 fee0 	bl	80006d8 <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4b61      	ldr	r3, [pc, #388]	@ (8009aa4 <UART_SetConfig+0x2d4>)
 800991e:	fba3 2302 	umull	r2, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	011c      	lsls	r4, r3, #4
 8009926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800992a:	2200      	movs	r2, #0
 800992c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009930:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	1891      	adds	r1, r2, r2
 800993e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009940:	415b      	adcs	r3, r3
 8009942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009948:	4641      	mov	r1, r8
 800994a:	eb12 0a01 	adds.w	sl, r2, r1
 800994e:	4649      	mov	r1, r9
 8009950:	eb43 0b01 	adc.w	fp, r3, r1
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009968:	4692      	mov	sl, r2
 800996a:	469b      	mov	fp, r3
 800996c:	4643      	mov	r3, r8
 800996e:	eb1a 0303 	adds.w	r3, sl, r3
 8009972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009976:	464b      	mov	r3, r9
 8009978:	eb4b 0303 	adc.w	r3, fp, r3
 800997c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800998c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009994:	460b      	mov	r3, r1
 8009996:	18db      	adds	r3, r3, r3
 8009998:	643b      	str	r3, [r7, #64]	@ 0x40
 800999a:	4613      	mov	r3, r2
 800999c:	eb42 0303 	adc.w	r3, r2, r3
 80099a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80099a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80099a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80099aa:	f7f6 fe95 	bl	80006d8 <__aeabi_uldivmod>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	4b3b      	ldr	r3, [pc, #236]	@ (8009aa4 <UART_SetConfig+0x2d4>)
 80099b6:	fba3 2301 	umull	r2, r3, r3, r1
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	2264      	movs	r2, #100	@ 0x64
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	1acb      	subs	r3, r1, r3
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80099ca:	4b36      	ldr	r3, [pc, #216]	@ (8009aa4 <UART_SetConfig+0x2d4>)
 80099cc:	fba3 2302 	umull	r2, r3, r3, r2
 80099d0:	095b      	lsrs	r3, r3, #5
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80099d8:	441c      	add	r4, r3
 80099da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80099e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80099ec:	4642      	mov	r2, r8
 80099ee:	464b      	mov	r3, r9
 80099f0:	1891      	adds	r1, r2, r2
 80099f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80099f4:	415b      	adcs	r3, r3
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80099fc:	4641      	mov	r1, r8
 80099fe:	1851      	adds	r1, r2, r1
 8009a00:	6339      	str	r1, [r7, #48]	@ 0x30
 8009a02:	4649      	mov	r1, r9
 8009a04:	414b      	adcs	r3, r1
 8009a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009a14:	4659      	mov	r1, fp
 8009a16:	00cb      	lsls	r3, r1, #3
 8009a18:	4651      	mov	r1, sl
 8009a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a1e:	4651      	mov	r1, sl
 8009a20:	00ca      	lsls	r2, r1, #3
 8009a22:	4610      	mov	r0, r2
 8009a24:	4619      	mov	r1, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	4642      	mov	r2, r8
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a30:	464b      	mov	r3, r9
 8009a32:	460a      	mov	r2, r1
 8009a34:	eb42 0303 	adc.w	r3, r2, r3
 8009a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a50:	460b      	mov	r3, r1
 8009a52:	18db      	adds	r3, r3, r3
 8009a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a56:	4613      	mov	r3, r2
 8009a58:	eb42 0303 	adc.w	r3, r2, r3
 8009a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009a66:	f7f6 fe37 	bl	80006d8 <__aeabi_uldivmod>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa4 <UART_SetConfig+0x2d4>)
 8009a70:	fba3 1302 	umull	r1, r3, r3, r2
 8009a74:	095b      	lsrs	r3, r3, #5
 8009a76:	2164      	movs	r1, #100	@ 0x64
 8009a78:	fb01 f303 	mul.w	r3, r1, r3
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	3332      	adds	r3, #50	@ 0x32
 8009a82:	4a08      	ldr	r2, [pc, #32]	@ (8009aa4 <UART_SetConfig+0x2d4>)
 8009a84:	fba2 2303 	umull	r2, r3, r2, r3
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	f003 0207 	and.w	r2, r3, #7
 8009a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4422      	add	r2, r4
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	e106      	b.n	8009ca8 <UART_SetConfig+0x4d8>
 8009a9a:	bf00      	nop
 8009a9c:	40011000 	.word	0x40011000
 8009aa0:	40011400 	.word	0x40011400
 8009aa4:	51eb851f 	.word	0x51eb851f
 8009aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009aba:	4642      	mov	r2, r8
 8009abc:	464b      	mov	r3, r9
 8009abe:	1891      	adds	r1, r2, r2
 8009ac0:	6239      	str	r1, [r7, #32]
 8009ac2:	415b      	adcs	r3, r3
 8009ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009aca:	4641      	mov	r1, r8
 8009acc:	1854      	adds	r4, r2, r1
 8009ace:	4649      	mov	r1, r9
 8009ad0:	eb43 0501 	adc.w	r5, r3, r1
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	00eb      	lsls	r3, r5, #3
 8009ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ae2:	00e2      	lsls	r2, r4, #3
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	4643      	mov	r3, r8
 8009aea:	18e3      	adds	r3, r4, r3
 8009aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009af0:	464b      	mov	r3, r9
 8009af2:	eb45 0303 	adc.w	r3, r5, r3
 8009af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009b16:	4629      	mov	r1, r5
 8009b18:	008b      	lsls	r3, r1, #2
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b20:	4621      	mov	r1, r4
 8009b22:	008a      	lsls	r2, r1, #2
 8009b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009b28:	f7f6 fdd6 	bl	80006d8 <__aeabi_uldivmod>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4b60      	ldr	r3, [pc, #384]	@ (8009cb4 <UART_SetConfig+0x4e4>)
 8009b32:	fba3 2302 	umull	r2, r3, r3, r2
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	011c      	lsls	r4, r3, #4
 8009b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	464b      	mov	r3, r9
 8009b50:	1891      	adds	r1, r2, r2
 8009b52:	61b9      	str	r1, [r7, #24]
 8009b54:	415b      	adcs	r3, r3
 8009b56:	61fb      	str	r3, [r7, #28]
 8009b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b5c:	4641      	mov	r1, r8
 8009b5e:	1851      	adds	r1, r2, r1
 8009b60:	6139      	str	r1, [r7, #16]
 8009b62:	4649      	mov	r1, r9
 8009b64:	414b      	adcs	r3, r1
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	f04f 0200 	mov.w	r2, #0
 8009b6c:	f04f 0300 	mov.w	r3, #0
 8009b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b74:	4659      	mov	r1, fp
 8009b76:	00cb      	lsls	r3, r1, #3
 8009b78:	4651      	mov	r1, sl
 8009b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b7e:	4651      	mov	r1, sl
 8009b80:	00ca      	lsls	r2, r1, #3
 8009b82:	4610      	mov	r0, r2
 8009b84:	4619      	mov	r1, r3
 8009b86:	4603      	mov	r3, r0
 8009b88:	4642      	mov	r2, r8
 8009b8a:	189b      	adds	r3, r3, r2
 8009b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b90:	464b      	mov	r3, r9
 8009b92:	460a      	mov	r2, r1
 8009b94:	eb42 0303 	adc.w	r3, r2, r3
 8009b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ba6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	008b      	lsls	r3, r1, #2
 8009bb8:	4641      	mov	r1, r8
 8009bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	008a      	lsls	r2, r1, #2
 8009bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009bc6:	f7f6 fd87 	bl	80006d8 <__aeabi_uldivmod>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4b38      	ldr	r3, [pc, #224]	@ (8009cb4 <UART_SetConfig+0x4e4>)
 8009bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	2264      	movs	r2, #100	@ 0x64
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	1acb      	subs	r3, r1, r3
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	3332      	adds	r3, #50	@ 0x32
 8009be4:	4a33      	ldr	r2, [pc, #204]	@ (8009cb4 <UART_SetConfig+0x4e4>)
 8009be6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bea:	095b      	lsrs	r3, r3, #5
 8009bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bf0:	441c      	add	r4, r3
 8009bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8009bfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009c00:	4642      	mov	r2, r8
 8009c02:	464b      	mov	r3, r9
 8009c04:	1891      	adds	r1, r2, r2
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	415b      	adcs	r3, r3
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c10:	4641      	mov	r1, r8
 8009c12:	1851      	adds	r1, r2, r1
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	4649      	mov	r1, r9
 8009c18:	414b      	adcs	r3, r1
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c28:	4659      	mov	r1, fp
 8009c2a:	00cb      	lsls	r3, r1, #3
 8009c2c:	4651      	mov	r1, sl
 8009c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c32:	4651      	mov	r1, sl
 8009c34:	00ca      	lsls	r2, r1, #3
 8009c36:	4610      	mov	r0, r2
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	189b      	adds	r3, r3, r2
 8009c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c42:	464b      	mov	r3, r9
 8009c44:	460a      	mov	r2, r1
 8009c46:	eb42 0303 	adc.w	r3, r2, r3
 8009c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c56:	667a      	str	r2, [r7, #100]	@ 0x64
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009c64:	4649      	mov	r1, r9
 8009c66:	008b      	lsls	r3, r1, #2
 8009c68:	4641      	mov	r1, r8
 8009c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c6e:	4641      	mov	r1, r8
 8009c70:	008a      	lsls	r2, r1, #2
 8009c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c76:	f7f6 fd2f 	bl	80006d8 <__aeabi_uldivmod>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb4 <UART_SetConfig+0x4e4>)
 8009c80:	fba3 1302 	umull	r1, r3, r3, r2
 8009c84:	095b      	lsrs	r3, r3, #5
 8009c86:	2164      	movs	r1, #100	@ 0x64
 8009c88:	fb01 f303 	mul.w	r3, r1, r3
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	011b      	lsls	r3, r3, #4
 8009c90:	3332      	adds	r3, #50	@ 0x32
 8009c92:	4a08      	ldr	r2, [pc, #32]	@ (8009cb4 <UART_SetConfig+0x4e4>)
 8009c94:	fba2 2303 	umull	r2, r3, r2, r3
 8009c98:	095b      	lsrs	r3, r3, #5
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4422      	add	r2, r4
 8009ca6:	609a      	str	r2, [r3, #8]
 8009ca8:	bf00      	nop
 8009caa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cb4:	51eb851f 	.word	0x51eb851f

08009cb8 <MX_FATFS_Init>:
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	4904      	ldr	r1, [pc, #16]	@ (8009cd0 <MX_FATFS_Init+0x18>)
 8009cbe:	4805      	ldr	r0, [pc, #20]	@ (8009cd4 <MX_FATFS_Init+0x1c>)
 8009cc0:	f002 fea4 	bl	800ca0c <FATFS_LinkDriver>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4b03      	ldr	r3, [pc, #12]	@ (8009cd8 <MX_FATFS_Init+0x20>)
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	bf00      	nop
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	2001cb44 	.word	0x2001cb44
 8009cd4:	20016a88 	.word	0x20016a88
 8009cd8:	2001cb40 	.word	0x2001cb40

08009cdc <get_fattime>:
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USER_initialize>:
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	71fb      	strb	r3, [r7, #7]
 8009cf6:	79fb      	ldrb	r3, [r7, #7]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f7 f819 	bl	8000d30 <SD_disk_initialize>
 8009cfe:	bf00      	nop
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USER_status>:
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f7 f8f1 	bl	8000efc <SD_disk_status>
 8009d1a:	bf00      	nop
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USER_read>:
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]
 8009d34:	7bf8      	ldrb	r0, [r7, #15]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	f7f7 f8f4 	bl	8000f28 <SD_disk_read>
 8009d40:	bf00      	nop
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USER_write>:
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
 8009d5a:	7bf8      	ldrb	r0, [r7, #15]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	f7f7 f94b 	bl	8000ffc <SD_disk_write>
 8009d66:	bf00      	nop
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USER_ioctl>:
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	603a      	str	r2, [r7, #0]
 8009d7a:	71fb      	strb	r3, [r7, #7]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	71bb      	strb	r3, [r7, #6]
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	79b9      	ldrb	r1, [r7, #6]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7f7 f9bc 	bl	8001104 <SD_disk_ioctl>
 8009d8c:	bf00      	nop
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <disk_status>:
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	71fb      	strb	r3, [r7, #7]
 8009da2:	79fb      	ldrb	r3, [r7, #7]
 8009da4:	4a08      	ldr	r2, [pc, #32]	@ (8009dc8 <disk_status+0x30>)
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	79fa      	ldrb	r2, [r7, #7]
 8009db0:	4905      	ldr	r1, [pc, #20]	@ (8009dc8 <disk_status+0x30>)
 8009db2:	440a      	add	r2, r1
 8009db4:	7a12      	ldrb	r2, [r2, #8]
 8009db6:	4610      	mov	r0, r2
 8009db8:	4798      	blx	r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	2001cd70 	.word	0x2001cd70

08009dcc <disk_initialize>:
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8009e18 <disk_initialize+0x4c>)
 8009dde:	5cd3      	ldrb	r3, [r2, r3]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d114      	bne.n	8009e0e <disk_initialize+0x42>
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	4a0c      	ldr	r2, [pc, #48]	@ (8009e18 <disk_initialize+0x4c>)
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	79fa      	ldrb	r2, [r7, #7]
 8009df2:	4909      	ldr	r1, [pc, #36]	@ (8009e18 <disk_initialize+0x4c>)
 8009df4:	440a      	add	r2, r1
 8009df6:	7a12      	ldrb	r2, [r2, #8]
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d103      	bne.n	8009e0e <disk_initialize+0x42>
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	4a03      	ldr	r2, [pc, #12]	@ (8009e18 <disk_initialize+0x4c>)
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	54d1      	strb	r1, [r2, r3]
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	2001cd70 	.word	0x2001cd70

08009e1c <disk_read>:
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
 8009e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e58 <disk_read+0x3c>)
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	689c      	ldr	r4, [r3, #8]
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	4a07      	ldr	r2, [pc, #28]	@ (8009e58 <disk_read+0x3c>)
 8009e3c:	4413      	add	r3, r2
 8009e3e:	7a18      	ldrb	r0, [r3, #8]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	47a0      	blx	r4
 8009e48:	4603      	mov	r3, r0
 8009e4a:	75fb      	strb	r3, [r7, #23]
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd90      	pop	{r4, r7, pc}
 8009e56:	bf00      	nop
 8009e58:	2001cd70 	.word	0x2001cd70

08009e5c <disk_write>:
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e98 <disk_write+0x3c>)
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	68dc      	ldr	r4, [r3, #12]
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	4a07      	ldr	r2, [pc, #28]	@ (8009e98 <disk_write+0x3c>)
 8009e7c:	4413      	add	r3, r2
 8009e7e:	7a18      	ldrb	r0, [r3, #8]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	47a0      	blx	r4
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd90      	pop	{r4, r7, pc}
 8009e96:	bf00      	nop
 8009e98:	2001cd70 	.word	0x2001cd70

08009e9c <disk_ioctl>:
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	603a      	str	r2, [r7, #0]
 8009ea6:	71fb      	strb	r3, [r7, #7]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	71bb      	strb	r3, [r7, #6]
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	4a09      	ldr	r2, [pc, #36]	@ (8009ed4 <disk_ioctl+0x38>)
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	79fa      	ldrb	r2, [r7, #7]
 8009eba:	4906      	ldr	r1, [pc, #24]	@ (8009ed4 <disk_ioctl+0x38>)
 8009ebc:	440a      	add	r2, r1
 8009ebe:	7a10      	ldrb	r0, [r2, #8]
 8009ec0:	79b9      	ldrb	r1, [r7, #6]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	2001cd70 	.word	0x2001cd70

08009ed8 <ld_word>:
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	81fb      	strh	r3, [r7, #14]
 8009ee8:	89fb      	ldrh	r3, [r7, #14]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	b21a      	sxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b21b      	sxth	r3, r3
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	b21b      	sxth	r3, r3
 8009ef8:	81fb      	strh	r3, [r7, #14]
 8009efa:	89fb      	ldrh	r3, [r7, #14]
 8009efc:	4618      	mov	r0, r3
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <ld_dword>:
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3303      	adds	r3, #3
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	021b      	lsls	r3, r3, #8
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	3202      	adds	r2, #2
 8009f20:	7812      	ldrb	r2, [r2, #0]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	7812      	ldrb	r2, [r2, #0]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7812      	ldrb	r2, [r2, #0]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <st_word>:
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	460b      	mov	r3, r1
 8009f58:	807b      	strh	r3, [r7, #2]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	887a      	ldrh	r2, [r7, #2]
 8009f62:	b2d2      	uxtb	r2, r2
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	887b      	ldrh	r3, [r7, #2]
 8009f68:	0a1b      	lsrs	r3, r3, #8
 8009f6a:	807b      	strh	r3, [r7, #2]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	887a      	ldrh	r2, [r7, #2]
 8009f74:	b2d2      	uxtb	r2, r2
 8009f76:	701a      	strb	r2, [r3, #0]
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <st_dword>:
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	0a1b      	lsrs	r3, r3, #8
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	701a      	strb	r2, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	603b      	str	r3, [r7, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	b2d2      	uxtb	r2, r2
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <mem_cpy>:
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00d      	beq.n	800a012 <mem_cpy+0x36>
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	1c53      	adds	r3, r2, #1
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	1c59      	adds	r1, r3, #1
 800a000:	6179      	str	r1, [r7, #20]
 800a002:	7812      	ldrb	r2, [r2, #0]
 800a004:	701a      	strb	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3b01      	subs	r3, #1
 800a00a:	607b      	str	r3, [r7, #4]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1f1      	bne.n	8009ff6 <mem_cpy+0x1a>
 800a012:	bf00      	nop
 800a014:	371c      	adds	r7, #28
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <mem_set>:
 800a01e:	b480      	push	{r7}
 800a020:	b087      	sub	sp, #28
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	617a      	str	r2, [r7, #20]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	b2d2      	uxtb	r2, r2
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1f3      	bne.n	800a02e <mem_set+0x10>
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	371c      	adds	r7, #28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <mem_cmp>:
 800a054:	b480      	push	{r7}
 800a056:	b089      	sub	sp, #36	@ 0x24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	61bb      	str	r3, [r7, #24]
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	61fa      	str	r2, [r7, #28]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	4619      	mov	r1, r3
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	61ba      	str	r2, [r7, #24]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	1acb      	subs	r3, r1, r3
 800a080:	617b      	str	r3, [r7, #20]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3b01      	subs	r3, #1
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <mem_cmp+0x40>
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0eb      	beq.n	800a06c <mem_cmp+0x18>
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	4618      	mov	r0, r3
 800a098:	3724      	adds	r7, #36	@ 0x24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <chk_chr>:
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
 800a0ac:	e002      	b.n	800a0b4 <chk_chr+0x12>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	607b      	str	r3, [r7, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <chk_chr+0x26>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d1f2      	bne.n	800a0ae <chk_chr+0xc>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <chk_lock>:
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60bb      	str	r3, [r7, #8]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	60fb      	str	r3, [r7, #12]
 800a0ea:	e029      	b.n	800a140 <chk_lock+0x68>
 800a0ec:	4a27      	ldr	r2, [pc, #156]	@ (800a18c <chk_lock+0xb4>)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	4413      	add	r3, r2
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01d      	beq.n	800a136 <chk_lock+0x5e>
 800a0fa:	4a24      	ldr	r2, [pc, #144]	@ (800a18c <chk_lock+0xb4>)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	4413      	add	r3, r2
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d116      	bne.n	800a13a <chk_lock+0x62>
 800a10c:	4a1f      	ldr	r2, [pc, #124]	@ (800a18c <chk_lock+0xb4>)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	4413      	add	r3, r2
 800a114:	3304      	adds	r3, #4
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d10c      	bne.n	800a13a <chk_lock+0x62>
 800a120:	4a1a      	ldr	r2, [pc, #104]	@ (800a18c <chk_lock+0xb4>)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	4413      	add	r3, r2
 800a128:	3308      	adds	r3, #8
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	429a      	cmp	r2, r3
 800a132:	d102      	bne.n	800a13a <chk_lock+0x62>
 800a134:	e007      	b.n	800a146 <chk_lock+0x6e>
 800a136:	2301      	movs	r3, #1
 800a138:	60bb      	str	r3, [r7, #8]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3301      	adds	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d9d2      	bls.n	800a0ec <chk_lock+0x14>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d109      	bne.n	800a160 <chk_lock+0x88>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <chk_lock+0x80>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d101      	bne.n	800a15c <chk_lock+0x84>
 800a158:	2300      	movs	r3, #0
 800a15a:	e010      	b.n	800a17e <chk_lock+0xa6>
 800a15c:	2312      	movs	r3, #18
 800a15e:	e00e      	b.n	800a17e <chk_lock+0xa6>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d108      	bne.n	800a178 <chk_lock+0xa0>
 800a166:	4a09      	ldr	r2, [pc, #36]	@ (800a18c <chk_lock+0xb4>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	4413      	add	r3, r2
 800a16e:	330c      	adds	r3, #12
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a176:	d101      	bne.n	800a17c <chk_lock+0xa4>
 800a178:	2310      	movs	r3, #16
 800a17a:	e000      	b.n	800a17e <chk_lock+0xa6>
 800a17c:	2300      	movs	r3, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	2001cb50 	.word	0x2001cb50

0800a190 <enq_lock>:
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	2300      	movs	r3, #0
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	e002      	b.n	800a1a2 <enq_lock+0x12>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d806      	bhi.n	800a1b6 <enq_lock+0x26>
 800a1a8:	4a09      	ldr	r2, [pc, #36]	@ (800a1d0 <enq_lock+0x40>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	4413      	add	r3, r2
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1f2      	bne.n	800a19c <enq_lock+0xc>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	2001cb50 	.word	0x2001cb50

0800a1d4 <inc_lock>:
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	e01f      	b.n	800a224 <inc_lock+0x50>
 800a1e4:	4a41      	ldr	r2, [pc, #260]	@ (800a2ec <inc_lock+0x118>)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	4413      	add	r3, r2
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d113      	bne.n	800a21e <inc_lock+0x4a>
 800a1f6:	4a3d      	ldr	r2, [pc, #244]	@ (800a2ec <inc_lock+0x118>)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3304      	adds	r3, #4
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	d109      	bne.n	800a21e <inc_lock+0x4a>
 800a20a:	4a38      	ldr	r2, [pc, #224]	@ (800a2ec <inc_lock+0x118>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	4413      	add	r3, r2
 800a212:	3308      	adds	r3, #8
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d006      	beq.n	800a22c <inc_lock+0x58>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3301      	adds	r3, #1
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d9dc      	bls.n	800a1e4 <inc_lock+0x10>
 800a22a:	e000      	b.n	800a22e <inc_lock+0x5a>
 800a22c:	bf00      	nop
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d132      	bne.n	800a29a <inc_lock+0xc6>
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e002      	b.n	800a240 <inc_lock+0x6c>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3301      	adds	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d806      	bhi.n	800a254 <inc_lock+0x80>
 800a246:	4a29      	ldr	r2, [pc, #164]	@ (800a2ec <inc_lock+0x118>)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1f2      	bne.n	800a23a <inc_lock+0x66>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d101      	bne.n	800a25e <inc_lock+0x8a>
 800a25a:	2300      	movs	r3, #0
 800a25c:	e040      	b.n	800a2e0 <inc_lock+0x10c>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4922      	ldr	r1, [pc, #136]	@ (800a2ec <inc_lock+0x118>)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	440b      	add	r3, r1
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	491e      	ldr	r1, [pc, #120]	@ (800a2ec <inc_lock+0x118>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	440b      	add	r3, r1
 800a278:	3304      	adds	r3, #4
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	695a      	ldr	r2, [r3, #20]
 800a280:	491a      	ldr	r1, [pc, #104]	@ (800a2ec <inc_lock+0x118>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	440b      	add	r3, r1
 800a288:	3308      	adds	r3, #8
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	4a17      	ldr	r2, [pc, #92]	@ (800a2ec <inc_lock+0x118>)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	4413      	add	r3, r2
 800a294:	330c      	adds	r3, #12
 800a296:	2200      	movs	r2, #0
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d009      	beq.n	800a2b4 <inc_lock+0xe0>
 800a2a0:	4a12      	ldr	r2, [pc, #72]	@ (800a2ec <inc_lock+0x118>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	4413      	add	r3, r2
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <inc_lock+0xe0>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e015      	b.n	800a2e0 <inc_lock+0x10c>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d108      	bne.n	800a2cc <inc_lock+0xf8>
 800a2ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a2ec <inc_lock+0x118>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	4413      	add	r3, r2
 800a2c2:	330c      	adds	r3, #12
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	e001      	b.n	800a2d0 <inc_lock+0xfc>
 800a2cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2d0:	4906      	ldr	r1, [pc, #24]	@ (800a2ec <inc_lock+0x118>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	440b      	add	r3, r1
 800a2d8:	330c      	adds	r3, #12
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	2001cb50 	.word	0x2001cb50

0800a2f0 <dec_lock>:
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d825      	bhi.n	800a350 <dec_lock+0x60>
 800a304:	4a17      	ldr	r2, [pc, #92]	@ (800a364 <dec_lock+0x74>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	4413      	add	r3, r2
 800a30c:	330c      	adds	r3, #12
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	81fb      	strh	r3, [r7, #14]
 800a312:	89fb      	ldrh	r3, [r7, #14]
 800a314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a318:	d101      	bne.n	800a31e <dec_lock+0x2e>
 800a31a:	2300      	movs	r3, #0
 800a31c:	81fb      	strh	r3, [r7, #14]
 800a31e:	89fb      	ldrh	r3, [r7, #14]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <dec_lock+0x3a>
 800a324:	89fb      	ldrh	r3, [r7, #14]
 800a326:	3b01      	subs	r3, #1
 800a328:	81fb      	strh	r3, [r7, #14]
 800a32a:	4a0e      	ldr	r2, [pc, #56]	@ (800a364 <dec_lock+0x74>)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	011b      	lsls	r3, r3, #4
 800a330:	4413      	add	r3, r2
 800a332:	330c      	adds	r3, #12
 800a334:	89fa      	ldrh	r2, [r7, #14]
 800a336:	801a      	strh	r2, [r3, #0]
 800a338:	89fb      	ldrh	r3, [r7, #14]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d105      	bne.n	800a34a <dec_lock+0x5a>
 800a33e:	4a09      	ldr	r2, [pc, #36]	@ (800a364 <dec_lock+0x74>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	011b      	lsls	r3, r3, #4
 800a344:	4413      	add	r3, r2
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	2300      	movs	r3, #0
 800a34c:	737b      	strb	r3, [r7, #13]
 800a34e:	e001      	b.n	800a354 <dec_lock+0x64>
 800a350:	2302      	movs	r3, #2
 800a352:	737b      	strb	r3, [r7, #13]
 800a354:	7b7b      	ldrb	r3, [r7, #13]
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	2001cb50 	.word	0x2001cb50

0800a368 <clear_lock>:
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	e010      	b.n	800a398 <clear_lock+0x30>
 800a376:	4a0d      	ldr	r2, [pc, #52]	@ (800a3ac <clear_lock+0x44>)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	4413      	add	r3, r2
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d105      	bne.n	800a392 <clear_lock+0x2a>
 800a386:	4a09      	ldr	r2, [pc, #36]	@ (800a3ac <clear_lock+0x44>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	4413      	add	r3, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d9eb      	bls.n	800a376 <clear_lock+0xe>
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	2001cb50 	.word	0x2001cb50

0800a3b0 <sync_window>:
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	78db      	ldrb	r3, [r3, #3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d034      	beq.n	800a42e <sync_window+0x7e>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7858      	ldrb	r0, [r3, #1]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	f7ff fd40 	bl	8009e5c <disk_write>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <sync_window+0x38>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	e022      	b.n	800a42e <sync_window+0x7e>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	70da      	strb	r2, [r3, #3]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	1ad2      	subs	r2, r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d217      	bcs.n	800a42e <sync_window+0x7e>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	789b      	ldrb	r3, [r3, #2]
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	e010      	b.n	800a428 <sync_window+0x78>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4413      	add	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7858      	ldrb	r0, [r3, #1]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a41a:	2301      	movs	r3, #1
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	f7ff fd1d 	bl	8009e5c <disk_write>
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3b01      	subs	r3, #1
 800a426:	613b      	str	r3, [r7, #16]
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d8eb      	bhi.n	800a406 <sync_window+0x56>
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <move_window>:
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d01b      	beq.n	800a488 <move_window+0x50>
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ffad 	bl	800a3b0 <sync_window>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d113      	bne.n	800a488 <move_window+0x50>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	7858      	ldrb	r0, [r3, #1]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a46a:	2301      	movs	r3, #1
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	f7ff fcd5 	bl	8009e1c <disk_read>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <move_window+0x4a>
 800a478:	f04f 33ff 	mov.w	r3, #4294967295
 800a47c:	603b      	str	r3, [r7, #0]
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	635a      	str	r2, [r3, #52]	@ 0x34
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <sync_fs>:
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ff87 	bl	800a3b0 <sync_window>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d159      	bne.n	800a560 <sync_fs+0xcc>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d149      	bne.n	800a548 <sync_fs+0xb4>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	791b      	ldrb	r3, [r3, #4]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d145      	bne.n	800a548 <sync_fs+0xb4>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	899b      	ldrh	r3, [r3, #12]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	f7ff fda8 	bl	800a01e <mem_set>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3338      	adds	r3, #56	@ 0x38
 800a4d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a4d6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fd37 	bl	8009f4e <st_word>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3338      	adds	r3, #56	@ 0x38
 800a4e4:	4921      	ldr	r1, [pc, #132]	@ (800a56c <sync_fs+0xd8>)
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff fd4c 	bl	8009f84 <st_dword>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3338      	adds	r3, #56	@ 0x38
 800a4f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a4f4:	491e      	ldr	r1, [pc, #120]	@ (800a570 <sync_fs+0xdc>)
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fd44 	bl	8009f84 <st_dword>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	3338      	adds	r3, #56	@ 0x38
 800a500:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	4619      	mov	r1, r3
 800a50a:	4610      	mov	r0, r2
 800a50c:	f7ff fd3a 	bl	8009f84 <st_dword>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3338      	adds	r3, #56	@ 0x38
 800a514:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7ff fd30 	bl	8009f84 <st_dword>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7858      	ldrb	r0, [r3, #1]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a53c:	2301      	movs	r3, #1
 800a53e:	f7ff fc8d 	bl	8009e5c <disk_write>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	711a      	strb	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	2200      	movs	r2, #0
 800a54e:	2100      	movs	r1, #0
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff fca3 	bl	8009e9c <disk_ioctl>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <sync_fs+0xcc>
 800a55c:	2301      	movs	r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	41615252 	.word	0x41615252
 800a570:	61417272 	.word	0x61417272

0800a574 <clust2sect>:
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	3b02      	subs	r3, #2
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	3b02      	subs	r3, #2
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d301      	bcc.n	800a594 <clust2sect+0x20>
 800a590:	2300      	movs	r3, #0
 800a592:	e008      	b.n	800a5a6 <clust2sect+0x32>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	895b      	ldrh	r3, [r3, #10]
 800a598:	461a      	mov	r2, r3
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	fb03 f202 	mul.w	r2, r3, r2
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a4:	4413      	add	r3, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <get_fat>:
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b086      	sub	sp, #24
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d904      	bls.n	800a5d2 <get_fat+0x20>
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d302      	bcc.n	800a5d8 <get_fat+0x26>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e0ba      	b.n	800a74e <get_fat+0x19c>
 800a5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	f000 8082 	beq.w	800a6ec <get_fat+0x13a>
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	f300 80a6 	bgt.w	800a73a <get_fat+0x188>
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d002      	beq.n	800a5f8 <get_fat+0x46>
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d055      	beq.n	800a6a2 <get_fat+0xf0>
 800a5f6:	e0a0      	b.n	800a73a <get_fat+0x188>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	085b      	lsrs	r3, r3, #1
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	899b      	ldrh	r3, [r3, #12]
 800a60e:	4619      	mov	r1, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	fbb3 f3f1 	udiv	r3, r3, r1
 800a616:	4413      	add	r3, r2
 800a618:	4619      	mov	r1, r3
 800a61a:	6938      	ldr	r0, [r7, #16]
 800a61c:	f7ff ff0c 	bl	800a438 <move_window>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	f040 808c 	bne.w	800a740 <get_fat+0x18e>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	60fa      	str	r2, [r7, #12]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	8992      	ldrh	r2, [r2, #12]
 800a632:	fbb3 f1f2 	udiv	r1, r3, r2
 800a636:	fb01 f202 	mul.w	r2, r1, r2
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	4413      	add	r3, r2
 800a640:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a644:	60bb      	str	r3, [r7, #8]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	899b      	ldrh	r3, [r3, #12]
 800a64e:	4619      	mov	r1, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	fbb3 f3f1 	udiv	r3, r3, r1
 800a656:	4413      	add	r3, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	6938      	ldr	r0, [r7, #16]
 800a65c:	f7ff feec 	bl	800a438 <move_window>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d16e      	bne.n	800a744 <get_fat+0x192>
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	461a      	mov	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a672:	fb01 f202 	mul.w	r2, r1, r2
 800a676:	1a9b      	subs	r3, r3, r2
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4413      	add	r3, r2
 800a67c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a680:	021b      	lsls	r3, r3, #8
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	4313      	orrs	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <get_fat+0xe6>
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	091b      	lsrs	r3, r3, #4
 800a696:	e002      	b.n	800a69e <get_fat+0xec>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	e055      	b.n	800a74e <get_fat+0x19c>
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	899b      	ldrh	r3, [r3, #12]
 800a6aa:	085b      	lsrs	r3, r3, #1
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6938      	ldr	r0, [r7, #16]
 800a6bc:	f7ff febc 	bl	800a438 <move_window>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d140      	bne.n	800a748 <get_fat+0x196>
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	8992      	ldrh	r2, [r2, #12]
 800a6d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6d8:	fb00 f202 	mul.w	r2, r0, r2
 800a6dc:	1a9b      	subs	r3, r3, r2
 800a6de:	440b      	add	r3, r1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fbf9 	bl	8009ed8 <ld_word>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	e030      	b.n	800a74e <get_fat+0x19c>
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	899b      	ldrh	r3, [r3, #12]
 800a6f4:	089b      	lsrs	r3, r3, #2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a700:	4413      	add	r3, r2
 800a702:	4619      	mov	r1, r3
 800a704:	6938      	ldr	r0, [r7, #16]
 800a706:	f7ff fe97 	bl	800a438 <move_window>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d11d      	bne.n	800a74c <get_fat+0x19a>
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	8992      	ldrh	r2, [r2, #12]
 800a71e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a722:	fb00 f202 	mul.w	r2, r0, r2
 800a726:	1a9b      	subs	r3, r3, r2
 800a728:	440b      	add	r3, r1
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff fbec 	bl	8009f08 <ld_dword>
 800a730:	4603      	mov	r3, r0
 800a732:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	e009      	b.n	800a74e <get_fat+0x19c>
 800a73a:	2301      	movs	r3, #1
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	e006      	b.n	800a74e <get_fat+0x19c>
 800a740:	bf00      	nop
 800a742:	e004      	b.n	800a74e <get_fat+0x19c>
 800a744:	bf00      	nop
 800a746:	e002      	b.n	800a74e <get_fat+0x19c>
 800a748:	bf00      	nop
 800a74a:	e000      	b.n	800a74e <get_fat+0x19c>
 800a74c:	bf00      	nop
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	4618      	mov	r0, r3
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <put_fat>:
 800a758:	b590      	push	{r4, r7, lr}
 800a75a:	b089      	sub	sp, #36	@ 0x24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	2302      	movs	r3, #2
 800a766:	77fb      	strb	r3, [r7, #31]
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	f240 8109 	bls.w	800a982 <put_fat+0x22a>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	429a      	cmp	r2, r3
 800a778:	f080 8103 	bcs.w	800a982 <put_fat+0x22a>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b03      	cmp	r3, #3
 800a782:	f000 80b6 	beq.w	800a8f2 <put_fat+0x19a>
 800a786:	2b03      	cmp	r3, #3
 800a788:	f300 80fb 	bgt.w	800a982 <put_fat+0x22a>
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d003      	beq.n	800a798 <put_fat+0x40>
 800a790:	2b02      	cmp	r3, #2
 800a792:	f000 8083 	beq.w	800a89c <put_fat+0x144>
 800a796:	e0f4      	b.n	800a982 <put_fat+0x22a>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	61bb      	str	r3, [r7, #24]
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	085b      	lsrs	r3, r3, #1
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	61bb      	str	r3, [r7, #24]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	899b      	ldrh	r3, [r3, #12]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7b6:	4413      	add	r3, r2
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff fe3c 	bl	800a438 <move_window>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	77fb      	strb	r3, [r7, #31]
 800a7c4:	7ffb      	ldrb	r3, [r7, #31]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f040 80d4 	bne.w	800a974 <put_fat+0x21c>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	1c5a      	adds	r2, r3, #1
 800a7d6:	61ba      	str	r2, [r7, #24]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	8992      	ldrh	r2, [r2, #12]
 800a7dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7e0:	fb00 f202 	mul.w	r2, r0, r2
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00d      	beq.n	800a810 <put_fat+0xb8>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	b25b      	sxtb	r3, r3
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	b25a      	sxtb	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	b25b      	sxtb	r3, r3
 800a808:	4313      	orrs	r3, r2
 800a80a:	b25b      	sxtb	r3, r3
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	e001      	b.n	800a814 <put_fat+0xbc>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	7013      	strb	r3, [r2, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2201      	movs	r2, #1
 800a81c:	70da      	strb	r2, [r3, #3]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	899b      	ldrh	r3, [r3, #12]
 800a826:	4619      	mov	r1, r3
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a82e:	4413      	add	r3, r2
 800a830:	4619      	mov	r1, r3
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7ff fe00 	bl	800a438 <move_window>
 800a838:	4603      	mov	r3, r0
 800a83a:	77fb      	strb	r3, [r7, #31]
 800a83c:	7ffb      	ldrb	r3, [r7, #31]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 809a 	bne.w	800a978 <put_fat+0x220>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	899b      	ldrh	r3, [r3, #12]
 800a84e:	461a      	mov	r2, r3
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	fbb3 f0f2 	udiv	r0, r3, r2
 800a856:	fb00 f202 	mul.w	r2, r0, r2
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	440b      	add	r3, r1
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <put_fat+0x11a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	091b      	lsrs	r3, r3, #4
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	e00e      	b.n	800a890 <put_fat+0x138>
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	b25b      	sxtb	r3, r3
 800a878:	f023 030f 	bic.w	r3, r3, #15
 800a87c:	b25a      	sxtb	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	0a1b      	lsrs	r3, r3, #8
 800a882:	b25b      	sxtb	r3, r3
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	b25b      	sxtb	r3, r3
 800a88a:	4313      	orrs	r3, r2
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	7013      	strb	r3, [r2, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2201      	movs	r2, #1
 800a898:	70da      	strb	r2, [r3, #3]
 800a89a:	e072      	b.n	800a982 <put_fat+0x22a>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	899b      	ldrh	r3, [r3, #12]
 800a8a4:	085b      	lsrs	r3, r3, #1
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8b0:	4413      	add	r3, r2
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f7ff fdbf 	bl	800a438 <move_window>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	77fb      	strb	r3, [r7, #31]
 800a8be:	7ffb      	ldrb	r3, [r7, #31]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d15b      	bne.n	800a97c <put_fat+0x224>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	8992      	ldrh	r2, [r2, #12]
 800a8d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8d6:	fb00 f202 	mul.w	r2, r0, r2
 800a8da:	1a9b      	subs	r3, r3, r2
 800a8dc:	440b      	add	r3, r1
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	b292      	uxth	r2, r2
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff fb32 	bl	8009f4e <st_word>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	70da      	strb	r2, [r3, #3]
 800a8f0:	e047      	b.n	800a982 <put_fat+0x22a>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	899b      	ldrh	r3, [r3, #12]
 800a8fa:	089b      	lsrs	r3, r3, #2
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4619      	mov	r1, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	fbb3 f3f1 	udiv	r3, r3, r1
 800a906:	4413      	add	r3, r2
 800a908:	4619      	mov	r1, r3
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff fd94 	bl	800a438 <move_window>
 800a910:	4603      	mov	r3, r0
 800a912:	77fb      	strb	r3, [r7, #31]
 800a914:	7ffb      	ldrb	r3, [r7, #31]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d132      	bne.n	800a980 <put_fat+0x228>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	8992      	ldrh	r2, [r2, #12]
 800a92e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a932:	fb00 f202 	mul.w	r2, r0, r2
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	440b      	add	r3, r1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff fae4 	bl	8009f08 <ld_dword>
 800a940:	4603      	mov	r3, r0
 800a942:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a946:	4323      	orrs	r3, r4
 800a948:	607b      	str	r3, [r7, #4]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	8992      	ldrh	r2, [r2, #12]
 800a958:	fbb3 f0f2 	udiv	r0, r3, r2
 800a95c:	fb00 f202 	mul.w	r2, r0, r2
 800a960:	1a9b      	subs	r3, r3, r2
 800a962:	440b      	add	r3, r1
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff fb0c 	bl	8009f84 <st_dword>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2201      	movs	r2, #1
 800a970:	70da      	strb	r2, [r3, #3]
 800a972:	e006      	b.n	800a982 <put_fat+0x22a>
 800a974:	bf00      	nop
 800a976:	e004      	b.n	800a982 <put_fat+0x22a>
 800a978:	bf00      	nop
 800a97a:	e002      	b.n	800a982 <put_fat+0x22a>
 800a97c:	bf00      	nop
 800a97e:	e000      	b.n	800a982 <put_fat+0x22a>
 800a980:	bf00      	nop
 800a982:	7ffb      	ldrb	r3, [r7, #31]
 800a984:	4618      	mov	r0, r3
 800a986:	3724      	adds	r7, #36	@ 0x24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd90      	pop	{r4, r7, pc}

0800a98c <remove_chain>:
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	2300      	movs	r3, #0
 800a99a:	77fb      	strb	r3, [r7, #31]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	61bb      	str	r3, [r7, #24]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d904      	bls.n	800a9b2 <remove_chain+0x26>
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d301      	bcc.n	800a9b6 <remove_chain+0x2a>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	e04b      	b.n	800aa4e <remove_chain+0xc2>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00c      	beq.n	800a9d6 <remove_chain+0x4a>
 800a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	69b8      	ldr	r0, [r7, #24]
 800a9c4:	f7ff fec8 	bl	800a758 <put_fat>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	77fb      	strb	r3, [r7, #31]
 800a9cc:	7ffb      	ldrb	r3, [r7, #31]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <remove_chain+0x4a>
 800a9d2:	7ffb      	ldrb	r3, [r7, #31]
 800a9d4:	e03b      	b.n	800aa4e <remove_chain+0xc2>
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff fdea 	bl	800a5b2 <get_fat>
 800a9de:	6178      	str	r0, [r7, #20]
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d031      	beq.n	800aa4a <remove_chain+0xbe>
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d101      	bne.n	800a9f0 <remove_chain+0x64>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	e02e      	b.n	800aa4e <remove_chain+0xc2>
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d101      	bne.n	800a9fc <remove_chain+0x70>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e028      	b.n	800aa4e <remove_chain+0xc2>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	69b8      	ldr	r0, [r7, #24]
 800aa02:	f7ff fea9 	bl	800a758 <put_fat>
 800aa06:	4603      	mov	r3, r0
 800aa08:	77fb      	strb	r3, [r7, #31]
 800aa0a:	7ffb      	ldrb	r3, [r7, #31]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <remove_chain+0x88>
 800aa10:	7ffb      	ldrb	r3, [r7, #31]
 800aa12:	e01c      	b.n	800aa4e <remove_chain+0xc2>
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	69db      	ldr	r3, [r3, #28]
 800aa1c:	3b02      	subs	r3, #2
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d20b      	bcs.n	800aa3a <remove_chain+0xae>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	619a      	str	r2, [r3, #24]
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	791b      	ldrb	r3, [r3, #4]
 800aa30:	f043 0301 	orr.w	r3, r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	711a      	strb	r2, [r3, #4]
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	60bb      	str	r3, [r7, #8]
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d3c6      	bcc.n	800a9d6 <remove_chain+0x4a>
 800aa48:	e000      	b.n	800aa4c <remove_chain+0xc0>
 800aa4a:	bf00      	nop
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3720      	adds	r7, #32
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <create_chain>:
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10d      	bne.n	800aa88 <create_chain+0x32>
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	61bb      	str	r3, [r7, #24]
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <create_chain+0x2c>
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	69ba      	ldr	r2, [r7, #24]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d31b      	bcc.n	800aaba <create_chain+0x64>
 800aa82:	2301      	movs	r3, #1
 800aa84:	61bb      	str	r3, [r7, #24]
 800aa86:	e018      	b.n	800aaba <create_chain+0x64>
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff fd91 	bl	800a5b2 <get_fat>
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d801      	bhi.n	800aa9c <create_chain+0x46>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e070      	b.n	800ab7e <create_chain+0x128>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa2:	d101      	bne.n	800aaa8 <create_chain+0x52>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	e06a      	b.n	800ab7e <create_chain+0x128>
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d201      	bcs.n	800aab6 <create_chain+0x60>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	e063      	b.n	800ab7e <create_chain+0x128>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	61bb      	str	r3, [r7, #24]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	61fb      	str	r3, [r7, #28]
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	3301      	adds	r3, #1
 800aac2:	61fb      	str	r3, [r7, #28]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	69fa      	ldr	r2, [r7, #28]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d307      	bcc.n	800aade <create_chain+0x88>
 800aace:	2302      	movs	r3, #2
 800aad0:	61fb      	str	r3, [r7, #28]
 800aad2:	69fa      	ldr	r2, [r7, #28]
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d901      	bls.n	800aade <create_chain+0x88>
 800aada:	2300      	movs	r3, #0
 800aadc:	e04f      	b.n	800ab7e <create_chain+0x128>
 800aade:	69f9      	ldr	r1, [r7, #28]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff fd66 	bl	800a5b2 <get_fat>
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <create_chain+0xb6>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d003      	beq.n	800aafc <create_chain+0xa6>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafa:	d101      	bne.n	800ab00 <create_chain+0xaa>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	e03e      	b.n	800ab7e <create_chain+0x128>
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d1da      	bne.n	800aabe <create_chain+0x68>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e038      	b.n	800ab7e <create_chain+0x128>
 800ab0c:	bf00      	nop
 800ab0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab12:	69f9      	ldr	r1, [r7, #28]
 800ab14:	6938      	ldr	r0, [r7, #16]
 800ab16:	f7ff fe1f 	bl	800a758 <put_fat>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d109      	bne.n	800ab38 <create_chain+0xe2>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d006      	beq.n	800ab38 <create_chain+0xe2>
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6938      	ldr	r0, [r7, #16]
 800ab30:	f7ff fe12 	bl	800a758 <put_fat>
 800ab34:	4603      	mov	r3, r0
 800ab36:	75fb      	strb	r3, [r7, #23]
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d116      	bne.n	800ab6c <create_chain+0x116>
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	69fa      	ldr	r2, [r7, #28]
 800ab42:	615a      	str	r2, [r3, #20]
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	699a      	ldr	r2, [r3, #24]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	3b02      	subs	r3, #2
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d804      	bhi.n	800ab5c <create_chain+0x106>
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	619a      	str	r2, [r3, #24]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	791b      	ldrb	r3, [r3, #4]
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	711a      	strb	r2, [r3, #4]
 800ab6a:	e007      	b.n	800ab7c <create_chain+0x126>
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d102      	bne.n	800ab78 <create_chain+0x122>
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	e000      	b.n	800ab7a <create_chain+0x124>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <clmt_clust>:
 800ab86:	b480      	push	{r7}
 800ab88:	b087      	sub	sp, #28
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	613b      	str	r3, [r7, #16]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	899b      	ldrh	r3, [r3, #12]
 800aba2:	461a      	mov	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	8952      	ldrh	r2, [r2, #10]
 800abae:	fbb3 f3f2 	udiv	r3, r3, r2
 800abb2:	617b      	str	r3, [r7, #20]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	613a      	str	r2, [r7, #16]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60bb      	str	r3, [r7, #8]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <clmt_clust+0x42>
 800abc4:	2300      	movs	r3, #0
 800abc6:	e010      	b.n	800abea <clmt_clust+0x64>
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d307      	bcc.n	800abe0 <clmt_clust+0x5a>
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	3304      	adds	r3, #4
 800abdc:	613b      	str	r3, [r7, #16]
 800abde:	e7e9      	b.n	800abb4 <clmt_clust+0x2e>
 800abe0:	bf00      	nop
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	4413      	add	r3, r2
 800abea:	4618      	mov	r0, r3
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <dir_sdi>:
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b086      	sub	sp, #24
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac0c:	d204      	bcs.n	800ac18 <dir_sdi+0x22>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	f003 031f 	and.w	r3, r3, #31
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <dir_sdi+0x26>
 800ac18:	2302      	movs	r3, #2
 800ac1a:	e071      	b.n	800ad00 <dir_sdi+0x10a>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	615a      	str	r2, [r3, #20]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <dir_sdi+0x46>
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d902      	bls.n	800ac3c <dir_sdi+0x46>
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10c      	bne.n	800ac5c <dir_sdi+0x66>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	095b      	lsrs	r3, r3, #5
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	8912      	ldrh	r2, [r2, #8]
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d301      	bcc.n	800ac52 <dir_sdi+0x5c>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e056      	b.n	800ad00 <dir_sdi+0x10a>
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	61da      	str	r2, [r3, #28]
 800ac5a:	e02d      	b.n	800acb8 <dir_sdi+0xc2>
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	895b      	ldrh	r3, [r3, #10]
 800ac60:	461a      	mov	r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	899b      	ldrh	r3, [r3, #12]
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	e019      	b.n	800aca2 <dir_sdi+0xac>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6979      	ldr	r1, [r7, #20]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff fc9d 	bl	800a5b2 <get_fat>
 800ac78:	6178      	str	r0, [r7, #20]
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac80:	d101      	bne.n	800ac86 <dir_sdi+0x90>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e03c      	b.n	800ad00 <dir_sdi+0x10a>
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d904      	bls.n	800ac96 <dir_sdi+0xa0>
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d301      	bcc.n	800ac9a <dir_sdi+0xa4>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e032      	b.n	800ad00 <dir_sdi+0x10a>
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	603b      	str	r3, [r7, #0]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d2e1      	bcs.n	800ac6e <dir_sdi+0x78>
 800acaa:	6979      	ldr	r1, [r7, #20]
 800acac:	6938      	ldr	r0, [r7, #16]
 800acae:	f7ff fc61 	bl	800a574 <clust2sect>
 800acb2:	4602      	mov	r2, r0
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	61da      	str	r2, [r3, #28]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	619a      	str	r2, [r3, #24]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <dir_sdi+0xd4>
 800acc6:	2302      	movs	r3, #2
 800acc8:	e01a      	b.n	800ad00 <dir_sdi+0x10a>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	69da      	ldr	r2, [r3, #28]
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	899b      	ldrh	r3, [r3, #12]
 800acd2:	4619      	mov	r1, r3
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800acda:	441a      	add	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	61da      	str	r2, [r3, #28]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	899b      	ldrh	r3, [r3, #12]
 800acea:	461a      	mov	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	fbb3 f0f2 	udiv	r0, r3, r2
 800acf2:	fb00 f202 	mul.w	r2, r0, r2
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	18ca      	adds	r2, r1, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	621a      	str	r2, [r3, #32]
 800acfe:	2300      	movs	r3, #0
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <dir_next>:
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	3320      	adds	r3, #32
 800ad1e:	60bb      	str	r3, [r7, #8]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <dir_next+0x28>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad2e:	d301      	bcc.n	800ad34 <dir_next+0x2c>
 800ad30:	2304      	movs	r3, #4
 800ad32:	e0bb      	b.n	800aeac <dir_next+0x1a4>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	899b      	ldrh	r3, [r3, #12]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad40:	fb01 f202 	mul.w	r2, r1, r2
 800ad44:	1a9b      	subs	r3, r3, r2
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 809d 	bne.w	800ae86 <dir_next+0x17e>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	61da      	str	r2, [r3, #28]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10b      	bne.n	800ad76 <dir_next+0x6e>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	095b      	lsrs	r3, r3, #5
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	8912      	ldrh	r2, [r2, #8]
 800ad66:	4293      	cmp	r3, r2
 800ad68:	f0c0 808d 	bcc.w	800ae86 <dir_next+0x17e>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	61da      	str	r2, [r3, #28]
 800ad72:	2304      	movs	r3, #4
 800ad74:	e09a      	b.n	800aeac <dir_next+0x1a4>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	899b      	ldrh	r3, [r3, #12]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	8952      	ldrh	r2, [r2, #10]
 800ad86:	3a01      	subs	r2, #1
 800ad88:	4013      	ands	r3, r2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d17b      	bne.n	800ae86 <dir_next+0x17e>
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7ff fc0b 	bl	800a5b2 <get_fat>
 800ad9c:	6178      	str	r0, [r7, #20]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d801      	bhi.n	800ada8 <dir_next+0xa0>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e081      	b.n	800aeac <dir_next+0x1a4>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d101      	bne.n	800adb4 <dir_next+0xac>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e07b      	b.n	800aeac <dir_next+0x1a4>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	69db      	ldr	r3, [r3, #28]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d359      	bcc.n	800ae72 <dir_next+0x16a>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <dir_next+0xc6>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	61da      	str	r2, [r3, #28]
 800adca:	2304      	movs	r3, #4
 800adcc:	e06e      	b.n	800aeac <dir_next+0x1a4>
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7ff fe3d 	bl	800aa56 <create_chain>
 800addc:	6178      	str	r0, [r7, #20]
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <dir_next+0xe0>
 800ade4:	2307      	movs	r3, #7
 800ade6:	e061      	b.n	800aeac <dir_next+0x1a4>
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <dir_next+0xea>
 800adee:	2302      	movs	r3, #2
 800adf0:	e05c      	b.n	800aeac <dir_next+0x1a4>
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d101      	bne.n	800adfe <dir_next+0xf6>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e056      	b.n	800aeac <dir_next+0x1a4>
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7ff fad6 	bl	800a3b0 <sync_window>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <dir_next+0x106>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e04e      	b.n	800aeac <dir_next+0x1a4>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	899b      	ldrh	r3, [r3, #12]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	f7ff f8ff 	bl	800a01e <mem_set>
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
 800ae24:	6979      	ldr	r1, [r7, #20]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff fba4 	bl	800a574 <clust2sect>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae32:	e012      	b.n	800ae5a <dir_next+0x152>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	70da      	strb	r2, [r3, #3]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7ff fab8 	bl	800a3b0 <sync_window>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <dir_next+0x142>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e030      	b.n	800aeac <dir_next+0x1a4>
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	613b      	str	r3, [r7, #16]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	895b      	ldrh	r3, [r3, #10]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d3e6      	bcc.n	800ae34 <dir_next+0x12c>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	1ad2      	subs	r2, r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	619a      	str	r2, [r3, #24]
 800ae78:	6979      	ldr	r1, [r7, #20]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff fb7a 	bl	800a574 <clust2sect>
 800ae80:	4602      	mov	r2, r0
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	61da      	str	r2, [r3, #28]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	615a      	str	r2, [r3, #20]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	899b      	ldrh	r3, [r3, #12]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae9e:	fb00 f202 	mul.w	r2, r0, r2
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	18ca      	adds	r2, r1, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	621a      	str	r2, [r3, #32]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <dir_alloc>:
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff fe95 	bl	800abf6 <dir_sdi>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d12b      	bne.n	800af2e <dir_alloc+0x7a>
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	4619      	mov	r1, r3
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7ff faa9 	bl	800a438 <move_window>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75fb      	strb	r3, [r7, #23]
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d11d      	bne.n	800af2c <dir_alloc+0x78>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2be5      	cmp	r3, #229	@ 0xe5
 800aef8:	d004      	beq.n	800af04 <dir_alloc+0x50>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d107      	bne.n	800af14 <dir_alloc+0x60>
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	3301      	adds	r3, #1
 800af08:	613b      	str	r3, [r7, #16]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d102      	bne.n	800af18 <dir_alloc+0x64>
 800af12:	e00c      	b.n	800af2e <dir_alloc+0x7a>
 800af14:	2300      	movs	r3, #0
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	2101      	movs	r1, #1
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fef4 	bl	800ad08 <dir_next>
 800af20:	4603      	mov	r3, r0
 800af22:	75fb      	strb	r3, [r7, #23]
 800af24:	7dfb      	ldrb	r3, [r7, #23]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0d7      	beq.n	800aeda <dir_alloc+0x26>
 800af2a:	e000      	b.n	800af2e <dir_alloc+0x7a>
 800af2c:	bf00      	nop
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b04      	cmp	r3, #4
 800af32:	d101      	bne.n	800af38 <dir_alloc+0x84>
 800af34:	2307      	movs	r3, #7
 800af36:	75fb      	strb	r3, [r7, #23]
 800af38:	7dfb      	ldrb	r3, [r7, #23]
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <ld_clust>:
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	331a      	adds	r3, #26
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe ffc1 	bl	8009ed8 <ld_word>
 800af56:	4603      	mov	r3, r0
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d109      	bne.n	800af76 <ld_clust+0x34>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	3314      	adds	r3, #20
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe ffb6 	bl	8009ed8 <ld_word>
 800af6c:	4603      	mov	r3, r0
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <st_clust>:
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	331a      	adds	r3, #26
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	b292      	uxth	r2, r2
 800af94:	4611      	mov	r1, r2
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe ffd9 	bl	8009f4e <st_word>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d109      	bne.n	800afb8 <st_clust+0x38>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f103 0214 	add.w	r2, r3, #20
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	0c1b      	lsrs	r3, r3, #16
 800afae:	b29b      	uxth	r3, r3
 800afb0:	4619      	mov	r1, r3
 800afb2:	4610      	mov	r0, r2
 800afb4:	f7fe ffcb 	bl	8009f4e <st_word>
 800afb8:	bf00      	nop
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <cmp_lfn>:
 800afc0:	b590      	push	{r4, r7, lr}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	331a      	adds	r3, #26
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe ff82 	bl	8009ed8 <ld_word>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <cmp_lfn+0x1e>
 800afda:	2300      	movs	r3, #0
 800afdc:	e059      	b.n	800b092 <cmp_lfn+0xd2>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afe6:	1e5a      	subs	r2, r3, #1
 800afe8:	4613      	mov	r3, r2
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	2301      	movs	r3, #1
 800aff6:	81fb      	strh	r3, [r7, #14]
 800aff8:	2300      	movs	r3, #0
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	e033      	b.n	800b066 <cmp_lfn+0xa6>
 800affe:	4a27      	ldr	r2, [pc, #156]	@ (800b09c <cmp_lfn+0xdc>)
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	4413      	add	r3, r2
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	4413      	add	r3, r2
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe ff63 	bl	8009ed8 <ld_word>
 800b012:	4603      	mov	r3, r0
 800b014:	81bb      	strh	r3, [r7, #12]
 800b016:	89fb      	ldrh	r3, [r7, #14]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d01a      	beq.n	800b052 <cmp_lfn+0x92>
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b020:	d812      	bhi.n	800b048 <cmp_lfn+0x88>
 800b022:	89bb      	ldrh	r3, [r7, #12]
 800b024:	4618      	mov	r0, r3
 800b026:	f001 fd3d 	bl	800caa4 <ff_wtoupper>
 800b02a:	4603      	mov	r3, r0
 800b02c:	461c      	mov	r4, r3
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	617a      	str	r2, [r7, #20]
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	4413      	add	r3, r2
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 fd31 	bl	800caa4 <ff_wtoupper>
 800b042:	4603      	mov	r3, r0
 800b044:	429c      	cmp	r4, r3
 800b046:	d001      	beq.n	800b04c <cmp_lfn+0x8c>
 800b048:	2300      	movs	r3, #0
 800b04a:	e022      	b.n	800b092 <cmp_lfn+0xd2>
 800b04c:	89bb      	ldrh	r3, [r7, #12]
 800b04e:	81fb      	strh	r3, [r7, #14]
 800b050:	e006      	b.n	800b060 <cmp_lfn+0xa0>
 800b052:	89bb      	ldrh	r3, [r7, #12]
 800b054:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b058:	4293      	cmp	r3, r2
 800b05a:	d001      	beq.n	800b060 <cmp_lfn+0xa0>
 800b05c:	2300      	movs	r3, #0
 800b05e:	e018      	b.n	800b092 <cmp_lfn+0xd2>
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	3301      	adds	r3, #1
 800b064:	613b      	str	r3, [r7, #16]
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b0c      	cmp	r3, #12
 800b06a:	d9c8      	bls.n	800affe <cmp_lfn+0x3e>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <cmp_lfn+0xd0>
 800b078:	89fb      	ldrh	r3, [r7, #14]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d008      	beq.n	800b090 <cmp_lfn+0xd0>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	4413      	add	r3, r2
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <cmp_lfn+0xd0>
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <cmp_lfn+0xd2>
 800b090:	2301      	movs	r3, #1
 800b092:	4618      	mov	r0, r3
 800b094:	371c      	adds	r7, #28
 800b096:	46bd      	mov	sp, r7
 800b098:	bd90      	pop	{r4, r7, pc}
 800b09a:	bf00      	nop
 800b09c:	08013dc4 	.word	0x08013dc4

0800b0a0 <put_lfn>:
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	71fb      	strb	r3, [r7, #7]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	71bb      	strb	r3, [r7, #6]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	330d      	adds	r3, #13
 800b0ba:	79ba      	ldrb	r2, [r7, #6]
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	330b      	adds	r3, #11
 800b0c2:	220f      	movs	r2, #15
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	331a      	adds	r3, #26
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe ff3a 	bl	8009f4e <st_word>
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	1e5a      	subs	r2, r3, #1
 800b0de:	4613      	mov	r3, r2
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	61fb      	str	r3, [r7, #28]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	82fb      	strh	r3, [r7, #22]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61bb      	str	r3, [r7, #24]
 800b0f2:	8afb      	ldrh	r3, [r7, #22]
 800b0f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d007      	beq.n	800b10c <put_lfn+0x6c>
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	61fa      	str	r2, [r7, #28]
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	82fb      	strh	r3, [r7, #22]
 800b10c:	4a17      	ldr	r2, [pc, #92]	@ (800b16c <put_lfn+0xcc>)
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	4413      	add	r3, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	4413      	add	r3, r2
 800b11a:	8afa      	ldrh	r2, [r7, #22]
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe ff15 	bl	8009f4e <st_word>
 800b124:	8afb      	ldrh	r3, [r7, #22]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <put_lfn+0x90>
 800b12a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b12e:	82fb      	strh	r3, [r7, #22]
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	3301      	adds	r3, #1
 800b134:	61bb      	str	r3, [r7, #24]
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b0c      	cmp	r3, #12
 800b13a:	d9da      	bls.n	800b0f2 <put_lfn+0x52>
 800b13c:	8afb      	ldrh	r3, [r7, #22]
 800b13e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b142:	4293      	cmp	r3, r2
 800b144:	d006      	beq.n	800b154 <put_lfn+0xb4>
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <put_lfn+0xbc>
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b15a:	71fb      	strb	r3, [r7, #7]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	79fa      	ldrb	r2, [r7, #7]
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	bf00      	nop
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08013dc4 	.word	0x08013dc4

0800b170 <gen_numname>:
 800b170:	b580      	push	{r7, lr}
 800b172:	b08c      	sub	sp, #48	@ 0x30
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
 800b17e:	220b      	movs	r2, #11
 800b180:	68b9      	ldr	r1, [r7, #8]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7fe ff2a 	bl	8009fdc <mem_cpy>
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d92b      	bls.n	800b1e6 <gen_numname+0x76>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	61fb      	str	r3, [r7, #28]
 800b192:	e022      	b.n	800b1da <gen_numname+0x6a>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	1c9a      	adds	r2, r3, #2
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	881b      	ldrh	r3, [r3, #0]
 800b19c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b19e:	2300      	movs	r3, #0
 800b1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1a2:	e017      	b.n	800b1d4 <gen_numname+0x64>
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	005a      	lsls	r2, r3, #1
 800b1a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	4413      	add	r3, r2
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1b4:	085b      	lsrs	r3, r3, #1
 800b1b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d005      	beq.n	800b1ce <gen_numname+0x5e>
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b1c8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d6:	2b0f      	cmp	r3, #15
 800b1d8:	d9e4      	bls.n	800b1a4 <gen_numname+0x34>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	881b      	ldrh	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1d8      	bne.n	800b194 <gen_numname+0x24>
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	603b      	str	r3, [r7, #0]
 800b1e6:	2307      	movs	r3, #7
 800b1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	f003 030f 	and.w	r3, r3, #15
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	3330      	adds	r3, #48	@ 0x30
 800b1f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1fe:	2b39      	cmp	r3, #57	@ 0x39
 800b200:	d904      	bls.n	800b20c <gen_numname+0x9c>
 800b202:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b206:	3307      	adds	r3, #7
 800b208:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	1e5a      	subs	r2, r3, #1
 800b210:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b212:	3330      	adds	r3, #48	@ 0x30
 800b214:	443b      	add	r3, r7
 800b216:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b21a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	091b      	lsrs	r3, r3, #4
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1df      	bne.n	800b1ea <gen_numname+0x7a>
 800b22a:	f107 0214 	add.w	r2, r7, #20
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	4413      	add	r3, r2
 800b232:	227e      	movs	r2, #126	@ 0x7e
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	2300      	movs	r3, #0
 800b238:	627b      	str	r3, [r7, #36]	@ 0x24
 800b23a:	e002      	b.n	800b242 <gen_numname+0xd2>
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	3301      	adds	r3, #1
 800b240:	627b      	str	r3, [r7, #36]	@ 0x24
 800b242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	429a      	cmp	r2, r3
 800b248:	d205      	bcs.n	800b256 <gen_numname+0xe6>
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24e:	4413      	add	r3, r2
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b20      	cmp	r3, #32
 800b254:	d1f2      	bne.n	800b23c <gen_numname+0xcc>
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	2b07      	cmp	r3, #7
 800b25a:	d807      	bhi.n	800b26c <gen_numname+0xfc>
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b262:	3330      	adds	r3, #48	@ 0x30
 800b264:	443b      	add	r3, r7
 800b266:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b26a:	e000      	b.n	800b26e <gen_numname+0xfe>
 800b26c:	2120      	movs	r1, #32
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	627a      	str	r2, [r7, #36]	@ 0x24
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	4413      	add	r3, r2
 800b278:	460a      	mov	r2, r1
 800b27a:	701a      	strb	r2, [r3, #0]
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	2b07      	cmp	r3, #7
 800b280:	d9e9      	bls.n	800b256 <gen_numname+0xe6>
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	3730      	adds	r7, #48	@ 0x30
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <sum_sfn>:
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	2300      	movs	r3, #0
 800b296:	73fb      	strb	r3, [r7, #15]
 800b298:	230b      	movs	r3, #11
 800b29a:	60bb      	str	r3, [r7, #8]
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	0852      	lsrs	r2, r2, #1
 800b2a2:	01db      	lsls	r3, r3, #7
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	1c59      	adds	r1, r3, #1
 800b2ac:	6079      	str	r1, [r7, #4]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	73fb      	strb	r3, [r7, #15]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1ed      	bne.n	800b29c <sum_sfn+0x10>
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <dir_find>:
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	2100      	movs	r1, #0
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff fc89 	bl	800abf6 <dir_sdi>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	75fb      	strb	r3, [r7, #23]
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <dir_find+0x24>
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	e0a9      	b.n	800b446 <dir_find+0x178>
 800b2f2:	23ff      	movs	r3, #255	@ 0xff
 800b2f4:	753b      	strb	r3, [r7, #20]
 800b2f6:	7d3b      	ldrb	r3, [r7, #20]
 800b2f8:	757b      	strb	r3, [r7, #21]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	631a      	str	r2, [r3, #48]	@ 0x30
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	4619      	mov	r1, r3
 800b308:	6938      	ldr	r0, [r7, #16]
 800b30a:	f7ff f895 	bl	800a438 <move_window>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f040 8090 	bne.w	800b43a <dir_find+0x16c>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	75bb      	strb	r3, [r7, #22]
 800b322:	7dbb      	ldrb	r3, [r7, #22]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <dir_find+0x60>
 800b328:	2304      	movs	r3, #4
 800b32a:	75fb      	strb	r3, [r7, #23]
 800b32c:	e08a      	b.n	800b444 <dir_find+0x176>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	330b      	adds	r3, #11
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b33a:	73fb      	strb	r3, [r7, #15]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7bfa      	ldrb	r2, [r7, #15]
 800b340:	719a      	strb	r2, [r3, #6]
 800b342:	7dbb      	ldrb	r3, [r7, #22]
 800b344:	2be5      	cmp	r3, #229	@ 0xe5
 800b346:	d007      	beq.n	800b358 <dir_find+0x8a>
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	f003 0308 	and.w	r3, r3, #8
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d009      	beq.n	800b366 <dir_find+0x98>
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	2b0f      	cmp	r3, #15
 800b356:	d006      	beq.n	800b366 <dir_find+0x98>
 800b358:	23ff      	movs	r3, #255	@ 0xff
 800b35a:	757b      	strb	r3, [r7, #21]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f04f 32ff 	mov.w	r2, #4294967295
 800b362:	631a      	str	r2, [r3, #48]	@ 0x30
 800b364:	e05e      	b.n	800b424 <dir_find+0x156>
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	2b0f      	cmp	r3, #15
 800b36a:	d136      	bne.n	800b3da <dir_find+0x10c>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b376:	2b00      	cmp	r3, #0
 800b378:	d154      	bne.n	800b424 <dir_find+0x156>
 800b37a:	7dbb      	ldrb	r3, [r7, #22]
 800b37c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00d      	beq.n	800b3a0 <dir_find+0xd2>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	7b5b      	ldrb	r3, [r3, #13]
 800b38a:	753b      	strb	r3, [r7, #20]
 800b38c:	7dbb      	ldrb	r3, [r7, #22]
 800b38e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b392:	75bb      	strb	r3, [r7, #22]
 800b394:	7dbb      	ldrb	r3, [r7, #22]
 800b396:	757b      	strb	r3, [r7, #21]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	695a      	ldr	r2, [r3, #20]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3a0:	7dba      	ldrb	r2, [r7, #22]
 800b3a2:	7d7b      	ldrb	r3, [r7, #21]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d115      	bne.n	800b3d4 <dir_find+0x106>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	330d      	adds	r3, #13
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	7d3a      	ldrb	r2, [r7, #20]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d10e      	bne.n	800b3d4 <dir_find+0x106>
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7ff fdfd 	bl	800afc0 <cmp_lfn>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <dir_find+0x106>
 800b3cc:	7d7b      	ldrb	r3, [r7, #21]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	e000      	b.n	800b3d6 <dir_find+0x108>
 800b3d4:	23ff      	movs	r3, #255	@ 0xff
 800b3d6:	757b      	strb	r3, [r7, #21]
 800b3d8:	e024      	b.n	800b424 <dir_find+0x156>
 800b3da:	7d7b      	ldrb	r3, [r7, #21]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d109      	bne.n	800b3f4 <dir_find+0x126>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff ff51 	bl	800b28c <sum_sfn>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	7d3b      	ldrb	r3, [r7, #20]
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d024      	beq.n	800b43e <dir_find+0x170>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <dir_find+0x14a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a18      	ldr	r0, [r3, #32]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3324      	adds	r3, #36	@ 0x24
 800b40a:	220b      	movs	r2, #11
 800b40c:	4619      	mov	r1, r3
 800b40e:	f7fe fe21 	bl	800a054 <mem_cmp>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d014      	beq.n	800b442 <dir_find+0x174>
 800b418:	23ff      	movs	r3, #255	@ 0xff
 800b41a:	757b      	strb	r3, [r7, #21]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f04f 32ff 	mov.w	r2, #4294967295
 800b422:	631a      	str	r2, [r3, #48]	@ 0x30
 800b424:	2100      	movs	r1, #0
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7ff fc6e 	bl	800ad08 <dir_next>
 800b42c:	4603      	mov	r3, r0
 800b42e:	75fb      	strb	r3, [r7, #23]
 800b430:	7dfb      	ldrb	r3, [r7, #23]
 800b432:	2b00      	cmp	r3, #0
 800b434:	f43f af65 	beq.w	800b302 <dir_find+0x34>
 800b438:	e004      	b.n	800b444 <dir_find+0x176>
 800b43a:	bf00      	nop
 800b43c:	e002      	b.n	800b444 <dir_find+0x176>
 800b43e:	bf00      	nop
 800b440:	e000      	b.n	800b444 <dir_find+0x176>
 800b442:	bf00      	nop
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <dir_register>:
 800b450:	b580      	push	{r7, lr}
 800b452:	b08c      	sub	sp, #48	@ 0x30
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	61fb      	str	r3, [r7, #28]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b464:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <dir_register+0x20>
 800b46c:	2306      	movs	r3, #6
 800b46e:	e0e0      	b.n	800b632 <dir_register+0x1e2>
 800b470:	2300      	movs	r3, #0
 800b472:	627b      	str	r3, [r7, #36]	@ 0x24
 800b474:	e002      	b.n	800b47c <dir_register+0x2c>
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	3301      	adds	r3, #1
 800b47a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	691a      	ldr	r2, [r3, #16]
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	4413      	add	r3, r2
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1f4      	bne.n	800b476 <dir_register+0x26>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b492:	f107 030c 	add.w	r3, r7, #12
 800b496:	220c      	movs	r2, #12
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe fd9f 	bl	8009fdc <mem_cpy>
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d032      	beq.n	800b50e <dir_register+0xbe>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2240      	movs	r2, #64	@ 0x40
 800b4ac:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4b4:	e016      	b.n	800b4e4 <dir_register+0x94>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	691a      	ldr	r2, [r3, #16]
 800b4c0:	f107 010c 	add.w	r1, r7, #12
 800b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c6:	f7ff fe53 	bl	800b170 <gen_numname>
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff feff 	bl	800b2ce <dir_find>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d106      	bne.n	800b4ec <dir_register+0x9c>
 800b4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e6:	2b63      	cmp	r3, #99	@ 0x63
 800b4e8:	d9e5      	bls.n	800b4b6 <dir_register+0x66>
 800b4ea:	e000      	b.n	800b4ee <dir_register+0x9e>
 800b4ec:	bf00      	nop
 800b4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f0:	2b64      	cmp	r3, #100	@ 0x64
 800b4f2:	d101      	bne.n	800b4f8 <dir_register+0xa8>
 800b4f4:	2307      	movs	r3, #7
 800b4f6:	e09c      	b.n	800b632 <dir_register+0x1e2>
 800b4f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	d002      	beq.n	800b506 <dir_register+0xb6>
 800b500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b504:	e095      	b.n	800b632 <dir_register+0x1e2>
 800b506:	7dfa      	ldrb	r2, [r7, #23]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <dir_register+0xd8>
 800b518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51a:	330c      	adds	r3, #12
 800b51c:	4a47      	ldr	r2, [pc, #284]	@ (800b63c <dir_register+0x1ec>)
 800b51e:	fba2 2303 	umull	r2, r3, r2, r3
 800b522:	089b      	lsrs	r3, r3, #2
 800b524:	3301      	adds	r3, #1
 800b526:	e000      	b.n	800b52a <dir_register+0xda>
 800b528:	2301      	movs	r3, #1
 800b52a:	623b      	str	r3, [r7, #32]
 800b52c:	6a39      	ldr	r1, [r7, #32]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff fcc0 	bl	800aeb4 <dir_alloc>
 800b534:	4603      	mov	r3, r0
 800b536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b53a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d148      	bne.n	800b5d4 <dir_register+0x184>
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	3b01      	subs	r3, #1
 800b546:	623b      	str	r3, [r7, #32]
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d042      	beq.n	800b5d4 <dir_register+0x184>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	695a      	ldr	r2, [r3, #20]
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	015b      	lsls	r3, r3, #5
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff fb4b 	bl	800abf6 <dir_sdi>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d132      	bne.n	800b5d4 <dir_register+0x184>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3324      	adds	r3, #36	@ 0x24
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fe8a 	bl	800b28c <sum_sfn>
 800b578:	4603      	mov	r3, r0
 800b57a:	76fb      	strb	r3, [r7, #27]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	4619      	mov	r1, r3
 800b582:	69f8      	ldr	r0, [r7, #28]
 800b584:	f7fe ff58 	bl	800a438 <move_window>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b58e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b592:	2b00      	cmp	r3, #0
 800b594:	d11d      	bne.n	800b5d2 <dir_register+0x182>
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	6918      	ldr	r0, [r3, #16]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a19      	ldr	r1, [r3, #32]
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	7efb      	ldrb	r3, [r7, #27]
 800b5a4:	f7ff fd7c 	bl	800b0a0 <put_lfn>
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	70da      	strb	r2, [r3, #3]
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff fba9 	bl	800ad08 <dir_next>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d107      	bne.n	800b5d4 <dir_register+0x184>
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	623b      	str	r3, [r7, #32]
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1d5      	bne.n	800b57c <dir_register+0x12c>
 800b5d0:	e000      	b.n	800b5d4 <dir_register+0x184>
 800b5d2:	bf00      	nop
 800b5d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d128      	bne.n	800b62e <dir_register+0x1de>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	69f8      	ldr	r0, [r7, #28]
 800b5e4:	f7fe ff28 	bl	800a438 <move_window>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b5ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d11b      	bne.n	800b62e <dir_register+0x1de>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe fd0d 	bl	800a01e <mem_set>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a18      	ldr	r0, [r3, #32]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3324      	adds	r3, #36	@ 0x24
 800b60c:	220b      	movs	r2, #11
 800b60e:	4619      	mov	r1, r3
 800b610:	f7fe fce4 	bl	8009fdc <mem_cpy>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	330c      	adds	r3, #12
 800b620:	f002 0218 	and.w	r2, r2, #24
 800b624:	b2d2      	uxtb	r2, r2
 800b626:	701a      	strb	r2, [r3, #0]
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	2201      	movs	r2, #1
 800b62c:	70da      	strb	r2, [r3, #3]
 800b62e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b632:	4618      	mov	r0, r3
 800b634:	3730      	adds	r7, #48	@ 0x30
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b640 <create_name>:
 800b640:	b580      	push	{r7, lr}
 800b642:	b08a      	sub	sp, #40	@ 0x28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	61bb      	str	r3, [r7, #24]
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	61ba      	str	r2, [r7, #24]
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	4413      	add	r3, r2
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b66e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b670:	2b1f      	cmp	r3, #31
 800b672:	d940      	bls.n	800b6f6 <create_name+0xb6>
 800b674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b676:	2b2f      	cmp	r3, #47	@ 0x2f
 800b678:	d006      	beq.n	800b688 <create_name+0x48>
 800b67a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b67c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b67e:	d110      	bne.n	800b6a2 <create_name+0x62>
 800b680:	e002      	b.n	800b688 <create_name+0x48>
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	3301      	adds	r3, #1
 800b686:	61bb      	str	r3, [r7, #24]
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b2f      	cmp	r3, #47	@ 0x2f
 800b692:	d0f6      	beq.n	800b682 <create_name+0x42>
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	4413      	add	r3, r2
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b69e:	d0f0      	beq.n	800b682 <create_name+0x42>
 800b6a0:	e02a      	b.n	800b6f8 <create_name+0xb8>
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2bfe      	cmp	r3, #254	@ 0xfe
 800b6a6:	d901      	bls.n	800b6ac <create_name+0x6c>
 800b6a8:	2306      	movs	r3, #6
 800b6aa:	e17d      	b.n	800b9a8 <create_name+0x368>
 800b6ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b6b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f001 f9b8 	bl	800ca2c <ff_convert>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b6c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <create_name+0x8a>
 800b6c6:	2306      	movs	r3, #6
 800b6c8:	e16e      	b.n	800b9a8 <create_name+0x368>
 800b6ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6ce:	d809      	bhi.n	800b6e4 <create_name+0xa4>
 800b6d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	488d      	ldr	r0, [pc, #564]	@ (800b90c <create_name+0x2cc>)
 800b6d6:	f7fe fce4 	bl	800a0a2 <chk_chr>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <create_name+0xa4>
 800b6e0:	2306      	movs	r3, #6
 800b6e2:	e161      	b.n	800b9a8 <create_name+0x368>
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	617a      	str	r2, [r7, #20]
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	e7b4      	b.n	800b660 <create_name+0x20>
 800b6f6:	bf00      	nop
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	441a      	add	r2, r3
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b704:	2b1f      	cmp	r3, #31
 800b706:	d801      	bhi.n	800b70c <create_name+0xcc>
 800b708:	2304      	movs	r3, #4
 800b70a:	e000      	b.n	800b70e <create_name+0xce>
 800b70c:	2300      	movs	r3, #0
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b712:	e011      	b.n	800b738 <create_name+0xf8>
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b71a:	3b01      	subs	r3, #1
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	4413      	add	r3, r2
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b728:	2b20      	cmp	r3, #32
 800b72a:	d002      	beq.n	800b732 <create_name+0xf2>
 800b72c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b72e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b730:	d106      	bne.n	800b740 <create_name+0x100>
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	3b01      	subs	r3, #1
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ea      	bne.n	800b714 <create_name+0xd4>
 800b73e:	e000      	b.n	800b742 <create_name+0x102>
 800b740:	bf00      	nop
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	4413      	add	r3, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	801a      	strh	r2, [r3, #0]
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <create_name+0x118>
 800b754:	2306      	movs	r3, #6
 800b756:	e127      	b.n	800b9a8 <create_name+0x368>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3324      	adds	r3, #36	@ 0x24
 800b75c:	220b      	movs	r2, #11
 800b75e:	2120      	movs	r1, #32
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fc5c 	bl	800a01e <mem_set>
 800b766:	2300      	movs	r3, #0
 800b768:	61bb      	str	r3, [r7, #24]
 800b76a:	e002      	b.n	800b772 <create_name+0x132>
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	3301      	adds	r3, #1
 800b770:	61bb      	str	r3, [r7, #24]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4413      	add	r3, r2
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	2b20      	cmp	r3, #32
 800b77e:	d0f5      	beq.n	800b76c <create_name+0x12c>
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4413      	add	r3, r2
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b78c:	d0ee      	beq.n	800b76c <create_name+0x12c>
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d009      	beq.n	800b7a8 <create_name+0x168>
 800b794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b798:	f043 0303 	orr.w	r3, r3, #3
 800b79c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b7a0:	e002      	b.n	800b7a8 <create_name+0x168>
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d009      	beq.n	800b7c2 <create_name+0x182>
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	005b      	lsls	r3, r3, #1
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7c0:	d1ef      	bne.n	800b7a2 <create_name+0x162>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	623b      	str	r3, [r7, #32]
 800b7cc:	2308      	movs	r3, #8
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	61ba      	str	r2, [r7, #24]
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b7e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 8090 	beq.w	800b908 <create_name+0x2c8>
 800b7e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	d006      	beq.n	800b7fc <create_name+0x1bc>
 800b7ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7f2:	d10a      	bne.n	800b80a <create_name+0x1ca>
 800b7f4:	69ba      	ldr	r2, [r7, #24]
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d006      	beq.n	800b80a <create_name+0x1ca>
 800b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b800:	f043 0303 	orr.w	r3, r3, #3
 800b804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b808:	e07d      	b.n	800b906 <create_name+0x2c6>
 800b80a:	6a3a      	ldr	r2, [r7, #32]
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d203      	bcs.n	800b81a <create_name+0x1da>
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	429a      	cmp	r2, r3
 800b818:	d123      	bne.n	800b862 <create_name+0x222>
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	2b0b      	cmp	r3, #11
 800b81e:	d106      	bne.n	800b82e <create_name+0x1ee>
 800b820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b824:	f043 0303 	orr.w	r3, r3, #3
 800b828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b82c:	e075      	b.n	800b91a <create_name+0x2da>
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	429a      	cmp	r2, r3
 800b834:	d005      	beq.n	800b842 <create_name+0x202>
 800b836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b83a:	f043 0303 	orr.w	r3, r3, #3
 800b83e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	429a      	cmp	r2, r3
 800b848:	d866      	bhi.n	800b918 <create_name+0x2d8>
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	61bb      	str	r3, [r7, #24]
 800b84e:	2308      	movs	r3, #8
 800b850:	623b      	str	r3, [r7, #32]
 800b852:	230b      	movs	r3, #11
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b860:	e051      	b.n	800b906 <create_name+0x2c6>
 800b862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b864:	2b7f      	cmp	r3, #127	@ 0x7f
 800b866:	d914      	bls.n	800b892 <create_name+0x252>
 800b868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 f8dd 	bl	800ca2c <ff_convert>
 800b872:	4603      	mov	r3, r0
 800b874:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <create_name+0x246>
 800b87c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b87e:	3b80      	subs	r3, #128	@ 0x80
 800b880:	4a23      	ldr	r2, [pc, #140]	@ (800b910 <create_name+0x2d0>)
 800b882:	5cd3      	ldrb	r3, [r2, r3]
 800b884:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b88a:	f043 0302 	orr.w	r3, r3, #2
 800b88e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	d007      	beq.n	800b8a8 <create_name+0x268>
 800b898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b89a:	4619      	mov	r1, r3
 800b89c:	481d      	ldr	r0, [pc, #116]	@ (800b914 <create_name+0x2d4>)
 800b89e:	f7fe fc00 	bl	800a0a2 <chk_chr>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d008      	beq.n	800b8ba <create_name+0x27a>
 800b8a8:	235f      	movs	r3, #95	@ 0x5f
 800b8aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8b0:	f043 0303 	orr.w	r3, r3, #3
 800b8b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b8b8:	e01b      	b.n	800b8f2 <create_name+0x2b2>
 800b8ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8bc:	2b40      	cmp	r3, #64	@ 0x40
 800b8be:	d909      	bls.n	800b8d4 <create_name+0x294>
 800b8c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8c2:	2b5a      	cmp	r3, #90	@ 0x5a
 800b8c4:	d806      	bhi.n	800b8d4 <create_name+0x294>
 800b8c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b8ca:	f043 0302 	orr.w	r3, r3, #2
 800b8ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b8d2:	e00e      	b.n	800b8f2 <create_name+0x2b2>
 800b8d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8d6:	2b60      	cmp	r3, #96	@ 0x60
 800b8d8:	d90b      	bls.n	800b8f2 <create_name+0x2b2>
 800b8da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8dc:	2b7a      	cmp	r3, #122	@ 0x7a
 800b8de:	d808      	bhi.n	800b8f2 <create_name+0x2b2>
 800b8e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b8e4:	f043 0301 	orr.w	r3, r3, #1
 800b8e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b8ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8ee:	3b20      	subs	r3, #32
 800b8f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	623a      	str	r2, [r7, #32]
 800b8f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b8fa:	b2d1      	uxtb	r1, r2
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	4413      	add	r3, r2
 800b900:	460a      	mov	r2, r1
 800b902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b906:	e763      	b.n	800b7d0 <create_name+0x190>
 800b908:	bf00      	nop
 800b90a:	e006      	b.n	800b91a <create_name+0x2da>
 800b90c:	0800d5c4 	.word	0x0800d5c4
 800b910:	08013d44 	.word	0x08013d44
 800b914:	0800d5d0 	.word	0x0800d5d0
 800b918:	bf00      	nop
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b920:	2be5      	cmp	r3, #229	@ 0xe5
 800b922:	d103      	bne.n	800b92c <create_name+0x2ec>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2205      	movs	r2, #5
 800b928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	2b08      	cmp	r3, #8
 800b930:	d104      	bne.n	800b93c <create_name+0x2fc>
 800b932:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b93c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b940:	f003 030c 	and.w	r3, r3, #12
 800b944:	2b0c      	cmp	r3, #12
 800b946:	d005      	beq.n	800b954 <create_name+0x314>
 800b948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b94c:	f003 0303 	and.w	r3, r3, #3
 800b950:	2b03      	cmp	r3, #3
 800b952:	d105      	bne.n	800b960 <create_name+0x320>
 800b954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b958:	f043 0302 	orr.w	r3, r3, #2
 800b95c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b964:	f003 0302 	and.w	r3, r3, #2
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d117      	bne.n	800b99c <create_name+0x35c>
 800b96c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b970:	f003 0303 	and.w	r3, r3, #3
 800b974:	2b01      	cmp	r3, #1
 800b976:	d105      	bne.n	800b984 <create_name+0x344>
 800b978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b97c:	f043 0310 	orr.w	r3, r3, #16
 800b980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b984:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b988:	f003 030c 	and.w	r3, r3, #12
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d105      	bne.n	800b99c <create_name+0x35c>
 800b990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b994:	f043 0308 	orr.w	r3, r3, #8
 800b998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b9a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3728      	adds	r7, #40	@ 0x28
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <follow_path>:
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	613b      	str	r3, [r7, #16]
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	e002      	b.n	800b9cc <follow_path+0x1c>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9d2:	d0f8      	beq.n	800b9c6 <follow_path+0x16>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9da:	d0f4      	beq.n	800b9c6 <follow_path+0x16>
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	609a      	str	r2, [r3, #8]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	2b1f      	cmp	r3, #31
 800b9e8:	d80a      	bhi.n	800ba00 <follow_path+0x50>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2280      	movs	r2, #128	@ 0x80
 800b9ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff f8fe 	bl	800abf6 <dir_sdi>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	75fb      	strb	r3, [r7, #23]
 800b9fe:	e048      	b.n	800ba92 <follow_path+0xe2>
 800ba00:	463b      	mov	r3, r7
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fe1b 	bl	800b640 <create_name>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75fb      	strb	r3, [r7, #23]
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d139      	bne.n	800ba88 <follow_path+0xd8>
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff fc5a 	bl	800b2ce <dir_find>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75fb      	strb	r3, [r7, #23]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba24:	72fb      	strb	r3, [r7, #11]
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00a      	beq.n	800ba42 <follow_path+0x92>
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	d12c      	bne.n	800ba8c <follow_path+0xdc>
 800ba32:	7afb      	ldrb	r3, [r7, #11]
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d127      	bne.n	800ba8c <follow_path+0xdc>
 800ba3c:	2305      	movs	r3, #5
 800ba3e:	75fb      	strb	r3, [r7, #23]
 800ba40:	e024      	b.n	800ba8c <follow_path+0xdc>
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d121      	bne.n	800ba90 <follow_path+0xe0>
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	799b      	ldrb	r3, [r3, #6]
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <follow_path+0xae>
 800ba58:	2305      	movs	r3, #5
 800ba5a:	75fb      	strb	r3, [r7, #23]
 800ba5c:	e019      	b.n	800ba92 <follow_path+0xe2>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	8992      	ldrh	r2, [r2, #12]
 800ba6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba70:	fb00 f202 	mul.w	r2, r0, r2
 800ba74:	1a9b      	subs	r3, r3, r2
 800ba76:	440b      	add	r3, r1
 800ba78:	4619      	mov	r1, r3
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f7ff fa61 	bl	800af42 <ld_clust>
 800ba80:	4602      	mov	r2, r0
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	609a      	str	r2, [r3, #8]
 800ba86:	e7bb      	b.n	800ba00 <follow_path+0x50>
 800ba88:	bf00      	nop
 800ba8a:	e002      	b.n	800ba92 <follow_path+0xe2>
 800ba8c:	bf00      	nop
 800ba8e:	e000      	b.n	800ba92 <follow_path+0xe2>
 800ba90:	bf00      	nop
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	4618      	mov	r0, r3
 800ba96:	3718      	adds	r7, #24
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <get_ldnumber>:
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d031      	beq.n	800bb16 <get_ldnumber+0x7a>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	617b      	str	r3, [r7, #20]
 800bab8:	e002      	b.n	800bac0 <get_ldnumber+0x24>
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	3301      	adds	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b1f      	cmp	r3, #31
 800bac6:	d903      	bls.n	800bad0 <get_ldnumber+0x34>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b3a      	cmp	r3, #58	@ 0x3a
 800bace:	d1f4      	bne.n	800baba <get_ldnumber+0x1e>
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bad6:	d11c      	bne.n	800bb12 <get_ldnumber+0x76>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	60fa      	str	r2, [r7, #12]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	3b30      	subs	r3, #48	@ 0x30
 800bae8:	60bb      	str	r3, [r7, #8]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	2b09      	cmp	r3, #9
 800baee:	d80e      	bhi.n	800bb0e <get_ldnumber+0x72>
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d10a      	bne.n	800bb0e <get_ldnumber+0x72>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d107      	bne.n	800bb0e <get_ldnumber+0x72>
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	613b      	str	r3, [r7, #16]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	3301      	adds	r3, #1
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	e002      	b.n	800bb18 <get_ldnumber+0x7c>
 800bb12:	2300      	movs	r3, #0
 800bb14:	613b      	str	r3, [r7, #16]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	371c      	adds	r7, #28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <check_fs>:
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	70da      	strb	r2, [r3, #3]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3a:	635a      	str	r2, [r3, #52]	@ 0x34
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7fe fc7a 	bl	800a438 <move_window>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <check_fs+0x2a>
 800bb4a:	2304      	movs	r3, #4
 800bb4c:	e038      	b.n	800bbc0 <check_fs+0x9c>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3338      	adds	r3, #56	@ 0x38
 800bb52:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe f9be 	bl	8009ed8 <ld_word>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d001      	beq.n	800bb6c <check_fs+0x48>
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e029      	b.n	800bbc0 <check_fs+0x9c>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bb72:	2be9      	cmp	r3, #233	@ 0xe9
 800bb74:	d009      	beq.n	800bb8a <check_fs+0x66>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bb7c:	2beb      	cmp	r3, #235	@ 0xeb
 800bb7e:	d11e      	bne.n	800bbbe <check_fs+0x9a>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bb86:	2b90      	cmp	r3, #144	@ 0x90
 800bb88:	d119      	bne.n	800bbbe <check_fs+0x9a>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3338      	adds	r3, #56	@ 0x38
 800bb8e:	3336      	adds	r3, #54	@ 0x36
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe f9b9 	bl	8009f08 <ld_dword>
 800bb96:	4603      	mov	r3, r0
 800bb98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bb9c:	4a0a      	ldr	r2, [pc, #40]	@ (800bbc8 <check_fs+0xa4>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d101      	bne.n	800bba6 <check_fs+0x82>
 800bba2:	2300      	movs	r3, #0
 800bba4:	e00c      	b.n	800bbc0 <check_fs+0x9c>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3338      	adds	r3, #56	@ 0x38
 800bbaa:	3352      	adds	r3, #82	@ 0x52
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe f9ab 	bl	8009f08 <ld_dword>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	4a05      	ldr	r2, [pc, #20]	@ (800bbcc <check_fs+0xa8>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d101      	bne.n	800bbbe <check_fs+0x9a>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e000      	b.n	800bbc0 <check_fs+0x9c>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	00544146 	.word	0x00544146
 800bbcc:	33544146 	.word	0x33544146

0800bbd0 <find_volume>:
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b096      	sub	sp, #88	@ 0x58
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff ff59 	bl	800ba9c <get_ldnumber>
 800bbea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800bbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	da01      	bge.n	800bbf6 <find_volume+0x26>
 800bbf2:	230b      	movs	r3, #11
 800bbf4:	e265      	b.n	800c0c2 <find_volume+0x4f2>
 800bbf6:	4a9f      	ldr	r2, [pc, #636]	@ (800be74 <find_volume+0x2a4>)
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <find_volume+0x3a>
 800bc06:	230c      	movs	r3, #12
 800bc08:	e25b      	b.n	800c0c2 <find_volume+0x4f2>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	79fb      	ldrb	r3, [r7, #7]
 800bc12:	f023 0301 	bic.w	r3, r3, #1
 800bc16:	71fb      	strb	r3, [r7, #7]
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d01a      	beq.n	800bc56 <find_volume+0x86>
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	785b      	ldrb	r3, [r3, #1]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe f8b7 	bl	8009d98 <disk_status>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10c      	bne.n	800bc56 <find_volume+0x86>
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <find_volume+0x82>
 800bc42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc46:	f003 0304 	and.w	r3, r3, #4
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <find_volume+0x82>
 800bc4e:	230a      	movs	r3, #10
 800bc50:	e237      	b.n	800c0c2 <find_volume+0x4f2>
 800bc52:	2300      	movs	r3, #0
 800bc54:	e235      	b.n	800c0c2 <find_volume+0x4f2>
 800bc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc58:	2200      	movs	r2, #0
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc62:	705a      	strb	r2, [r3, #1]
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	785b      	ldrb	r3, [r3, #1]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe f8af 	bl	8009dcc <disk_initialize>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d001      	beq.n	800bc84 <find_volume+0xb4>
 800bc80:	2303      	movs	r3, #3
 800bc82:	e21e      	b.n	800c0c2 <find_volume+0x4f2>
 800bc84:	79fb      	ldrb	r3, [r7, #7]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d007      	beq.n	800bc9a <find_volume+0xca>
 800bc8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <find_volume+0xca>
 800bc96:	230a      	movs	r3, #10
 800bc98:	e213      	b.n	800c0c2 <find_volume+0x4f2>
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	7858      	ldrb	r0, [r3, #1]
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca0:	330c      	adds	r3, #12
 800bca2:	461a      	mov	r2, r3
 800bca4:	2102      	movs	r1, #2
 800bca6:	f7fe f8f9 	bl	8009e9c <disk_ioctl>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <find_volume+0xe4>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e206      	b.n	800c0c2 <find_volume+0x4f2>
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb6:	899b      	ldrh	r3, [r3, #12]
 800bcb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcbc:	d80d      	bhi.n	800bcda <find_volume+0x10a>
 800bcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc0:	899b      	ldrh	r3, [r3, #12]
 800bcc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcc6:	d308      	bcc.n	800bcda <find_volume+0x10a>
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcca:	899b      	ldrh	r3, [r3, #12]
 800bccc:	461a      	mov	r2, r3
 800bcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd0:	899b      	ldrh	r3, [r3, #12]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <find_volume+0x10e>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e1f1      	b.n	800c0c2 <find_volume+0x4f2>
 800bcde:	2300      	movs	r3, #0
 800bce0:	653b      	str	r3, [r7, #80]	@ 0x50
 800bce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bce4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bce6:	f7ff ff1d 	bl	800bb24 <check_fs>
 800bcea:	4603      	mov	r3, r0
 800bcec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800bcf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d149      	bne.n	800bd8c <find_volume+0x1bc>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcfc:	e01e      	b.n	800bd3c <find_volume+0x16c>
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd00:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bd04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bd0c:	4413      	add	r3, r2
 800bd0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd12:	3304      	adds	r3, #4
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d006      	beq.n	800bd28 <find_volume+0x158>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe f8f2 	bl	8009f08 <ld_dword>
 800bd24:	4602      	mov	r2, r0
 800bd26:	e000      	b.n	800bd2a <find_volume+0x15a>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	3358      	adds	r3, #88	@ 0x58
 800bd30:	443b      	add	r3, r7
 800bd32:	f843 2c44 	str.w	r2, [r3, #-68]
 800bd36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd38:	3301      	adds	r3, #1
 800bd3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d9dd      	bls.n	800bcfe <find_volume+0x12e>
 800bd42:	2300      	movs	r3, #0
 800bd44:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <find_volume+0x182>
 800bd4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	3358      	adds	r3, #88	@ 0x58
 800bd58:	443b      	add	r3, r7
 800bd5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bd5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d005      	beq.n	800bd72 <find_volume+0x1a2>
 800bd66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd6a:	f7ff fedb 	bl	800bb24 <check_fs>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	e000      	b.n	800bd74 <find_volume+0x1a4>
 800bd72:	2303      	movs	r3, #3
 800bd74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800bd78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d905      	bls.n	800bd8c <find_volume+0x1bc>
 800bd80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd82:	3301      	adds	r3, #1
 800bd84:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d9e2      	bls.n	800bd52 <find_volume+0x182>
 800bd8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd90:	2b04      	cmp	r3, #4
 800bd92:	d101      	bne.n	800bd98 <find_volume+0x1c8>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e194      	b.n	800c0c2 <find_volume+0x4f2>
 800bd98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d901      	bls.n	800bda4 <find_volume+0x1d4>
 800bda0:	230d      	movs	r3, #13
 800bda2:	e18e      	b.n	800c0c2 <find_volume+0x4f2>
 800bda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda6:	3338      	adds	r3, #56	@ 0x38
 800bda8:	330b      	adds	r3, #11
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe f894 	bl	8009ed8 <ld_word>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb6:	899b      	ldrh	r3, [r3, #12]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d001      	beq.n	800bdc0 <find_volume+0x1f0>
 800bdbc:	230d      	movs	r3, #13
 800bdbe:	e180      	b.n	800c0c2 <find_volume+0x4f2>
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc2:	3338      	adds	r3, #56	@ 0x38
 800bdc4:	3316      	adds	r3, #22
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe f886 	bl	8009ed8 <ld_word>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <find_volume+0x214>
 800bdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd8:	3338      	adds	r3, #56	@ 0x38
 800bdda:	3324      	adds	r3, #36	@ 0x24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe f893 	bl	8009f08 <ld_dword>
 800bde2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800bde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bde8:	621a      	str	r2, [r3, #32]
 800bdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdec:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf2:	709a      	strb	r2, [r3, #2]
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf6:	789b      	ldrb	r3, [r3, #2]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d005      	beq.n	800be08 <find_volume+0x238>
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdfe:	789b      	ldrb	r3, [r3, #2]
 800be00:	2b02      	cmp	r3, #2
 800be02:	d001      	beq.n	800be08 <find_volume+0x238>
 800be04:	230d      	movs	r3, #13
 800be06:	e15c      	b.n	800c0c2 <find_volume+0x4f2>
 800be08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0a:	789b      	ldrb	r3, [r3, #2]
 800be0c:	461a      	mov	r2, r3
 800be0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be10:	fb02 f303 	mul.w	r3, r2, r3
 800be14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be1c:	461a      	mov	r2, r3
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	815a      	strh	r2, [r3, #10]
 800be22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be24:	895b      	ldrh	r3, [r3, #10]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <find_volume+0x26c>
 800be2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2c:	895b      	ldrh	r3, [r3, #10]
 800be2e:	461a      	mov	r2, r3
 800be30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be32:	895b      	ldrh	r3, [r3, #10]
 800be34:	3b01      	subs	r3, #1
 800be36:	4013      	ands	r3, r2
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <find_volume+0x270>
 800be3c:	230d      	movs	r3, #13
 800be3e:	e140      	b.n	800c0c2 <find_volume+0x4f2>
 800be40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be42:	3338      	adds	r3, #56	@ 0x38
 800be44:	3311      	adds	r3, #17
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe f846 	bl	8009ed8 <ld_word>
 800be4c:	4603      	mov	r3, r0
 800be4e:	461a      	mov	r2, r3
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	811a      	strh	r2, [r3, #8]
 800be54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be56:	891b      	ldrh	r3, [r3, #8]
 800be58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be5a:	8992      	ldrh	r2, [r2, #12]
 800be5c:	0952      	lsrs	r2, r2, #5
 800be5e:	b292      	uxth	r2, r2
 800be60:	fbb3 f1f2 	udiv	r1, r3, r2
 800be64:	fb01 f202 	mul.w	r2, r1, r2
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <find_volume+0x2a8>
 800be70:	230d      	movs	r3, #13
 800be72:	e126      	b.n	800c0c2 <find_volume+0x4f2>
 800be74:	2001cb48 	.word	0x2001cb48
 800be78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be7a:	3338      	adds	r3, #56	@ 0x38
 800be7c:	3313      	adds	r3, #19
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fe f82a 	bl	8009ed8 <ld_word>
 800be84:	4603      	mov	r3, r0
 800be86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <find_volume+0x2cc>
 800be8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be90:	3338      	adds	r3, #56	@ 0x38
 800be92:	3320      	adds	r3, #32
 800be94:	4618      	mov	r0, r3
 800be96:	f7fe f837 	bl	8009f08 <ld_dword>
 800be9a:	64b8      	str	r0, [r7, #72]	@ 0x48
 800be9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9e:	3338      	adds	r3, #56	@ 0x38
 800bea0:	330e      	adds	r3, #14
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fe f818 	bl	8009ed8 <ld_word>
 800bea8:	4603      	mov	r3, r0
 800beaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800beac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <find_volume+0x2e6>
 800beb2:	230d      	movs	r3, #13
 800beb4:	e105      	b.n	800c0c2 <find_volume+0x4f2>
 800beb6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800beb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beba:	4413      	add	r3, r2
 800bebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bebe:	8911      	ldrh	r1, [r2, #8]
 800bec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bec2:	8992      	ldrh	r2, [r2, #12]
 800bec4:	0952      	lsrs	r2, r2, #5
 800bec6:	b292      	uxth	r2, r2
 800bec8:	fbb1 f2f2 	udiv	r2, r1, r2
 800becc:	b292      	uxth	r2, r2
 800bece:	4413      	add	r3, r2
 800bed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d201      	bcs.n	800bede <find_volume+0x30e>
 800beda:	230d      	movs	r3, #13
 800bedc:	e0f1      	b.n	800c0c2 <find_volume+0x4f2>
 800bede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bee6:	8952      	ldrh	r2, [r2, #10]
 800bee8:	fbb3 f3f2 	udiv	r3, r3, r2
 800beec:	627b      	str	r3, [r7, #36]	@ 0x24
 800beee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <find_volume+0x328>
 800bef4:	230d      	movs	r3, #13
 800bef6:	e0e4      	b.n	800c0c2 <find_volume+0x4f2>
 800bef8:	2303      	movs	r3, #3
 800befa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800befe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf00:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d802      	bhi.n	800bf0e <find_volume+0x33e>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf10:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d802      	bhi.n	800bf1e <find_volume+0x34e>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf20:	1c9a      	adds	r2, r3, #2
 800bf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf24:	61da      	str	r2, [r3, #28]
 800bf26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf2a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf2c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bf2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf30:	441a      	add	r2, r3
 800bf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf34:	629a      	str	r2, [r3, #40]	@ 0x28
 800bf36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3a:	441a      	add	r2, r3
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d11e      	bne.n	800bf86 <find_volume+0x3b6>
 800bf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4a:	3338      	adds	r3, #56	@ 0x38
 800bf4c:	332a      	adds	r3, #42	@ 0x2a
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fd ffc2 	bl	8009ed8 <ld_word>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <find_volume+0x38e>
 800bf5a:	230d      	movs	r3, #13
 800bf5c:	e0b1      	b.n	800c0c2 <find_volume+0x4f2>
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf60:	891b      	ldrh	r3, [r3, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <find_volume+0x39a>
 800bf66:	230d      	movs	r3, #13
 800bf68:	e0ab      	b.n	800c0c2 <find_volume+0x4f2>
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6c:	3338      	adds	r3, #56	@ 0x38
 800bf6e:	332c      	adds	r3, #44	@ 0x2c
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fd ffc9 	bl	8009f08 <ld_dword>
 800bf76:	4602      	mov	r2, r0
 800bf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf84:	e01f      	b.n	800bfc6 <find_volume+0x3f6>
 800bf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf88:	891b      	ldrh	r3, [r3, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <find_volume+0x3c2>
 800bf8e:	230d      	movs	r3, #13
 800bf90:	e097      	b.n	800c0c2 <find_volume+0x4f2>
 800bf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf98:	441a      	add	r2, r3
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d103      	bne.n	800bfae <find_volume+0x3de>
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	e00a      	b.n	800bfc4 <find_volume+0x3f4>
 800bfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb0:	69da      	ldr	r2, [r3, #28]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	4413      	add	r3, r2
 800bfb8:	085a      	lsrs	r2, r3, #1
 800bfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	4413      	add	r3, r2
 800bfc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc8:	6a1a      	ldr	r2, [r3, #32]
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	899b      	ldrh	r3, [r3, #12]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfd2:	440b      	add	r3, r1
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bfd8:	8989      	ldrh	r1, [r1, #12]
 800bfda:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d201      	bcs.n	800bfe6 <find_volume+0x416>
 800bfe2:	230d      	movs	r3, #13
 800bfe4:	e06d      	b.n	800c0c2 <find_volume+0x4f2>
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfec:	619a      	str	r2, [r3, #24]
 800bfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff4:	615a      	str	r2, [r3, #20]
 800bff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff8:	2280      	movs	r2, #128	@ 0x80
 800bffa:	711a      	strb	r2, [r3, #4]
 800bffc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c000:	2b03      	cmp	r3, #3
 800c002:	d149      	bne.n	800c098 <find_volume+0x4c8>
 800c004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c006:	3338      	adds	r3, #56	@ 0x38
 800c008:	3330      	adds	r3, #48	@ 0x30
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fd ff64 	bl	8009ed8 <ld_word>
 800c010:	4603      	mov	r3, r0
 800c012:	2b01      	cmp	r3, #1
 800c014:	d140      	bne.n	800c098 <find_volume+0x4c8>
 800c016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c018:	3301      	adds	r3, #1
 800c01a:	4619      	mov	r1, r3
 800c01c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c01e:	f7fe fa0b 	bl	800a438 <move_window>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d137      	bne.n	800c098 <find_volume+0x4c8>
 800c028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02a:	2200      	movs	r2, #0
 800c02c:	711a      	strb	r2, [r3, #4]
 800c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c030:	3338      	adds	r3, #56	@ 0x38
 800c032:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c036:	4618      	mov	r0, r3
 800c038:	f7fd ff4e 	bl	8009ed8 <ld_word>
 800c03c:	4603      	mov	r3, r0
 800c03e:	461a      	mov	r2, r3
 800c040:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c044:	429a      	cmp	r2, r3
 800c046:	d127      	bne.n	800c098 <find_volume+0x4c8>
 800c048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c04a:	3338      	adds	r3, #56	@ 0x38
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fd ff5b 	bl	8009f08 <ld_dword>
 800c052:	4603      	mov	r3, r0
 800c054:	4a1d      	ldr	r2, [pc, #116]	@ (800c0cc <find_volume+0x4fc>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d11e      	bne.n	800c098 <find_volume+0x4c8>
 800c05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05c:	3338      	adds	r3, #56	@ 0x38
 800c05e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c062:	4618      	mov	r0, r3
 800c064:	f7fd ff50 	bl	8009f08 <ld_dword>
 800c068:	4603      	mov	r3, r0
 800c06a:	4a19      	ldr	r2, [pc, #100]	@ (800c0d0 <find_volume+0x500>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d113      	bne.n	800c098 <find_volume+0x4c8>
 800c070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c072:	3338      	adds	r3, #56	@ 0x38
 800c074:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fd ff45 	bl	8009f08 <ld_dword>
 800c07e:	4602      	mov	r2, r0
 800c080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c082:	619a      	str	r2, [r3, #24]
 800c084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c086:	3338      	adds	r3, #56	@ 0x38
 800c088:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fd ff3b 	bl	8009f08 <ld_dword>
 800c092:	4602      	mov	r2, r0
 800c094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c096:	615a      	str	r2, [r3, #20]
 800c098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c09e:	701a      	strb	r2, [r3, #0]
 800c0a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d4 <find_volume+0x504>)
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d4 <find_volume+0x504>)
 800c0aa:	801a      	strh	r2, [r3, #0]
 800c0ac:	4b09      	ldr	r3, [pc, #36]	@ (800c0d4 <find_volume+0x504>)
 800c0ae:	881a      	ldrh	r2, [r3, #0]
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b2:	80da      	strh	r2, [r3, #6]
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b6:	4a08      	ldr	r2, [pc, #32]	@ (800c0d8 <find_volume+0x508>)
 800c0b8:	611a      	str	r2, [r3, #16]
 800c0ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c0bc:	f7fe f954 	bl	800a368 <clear_lock>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3758      	adds	r7, #88	@ 0x58
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	41615252 	.word	0x41615252
 800c0d0:	61417272 	.word	0x61417272
 800c0d4:	2001cb4c 	.word	0x2001cb4c
 800c0d8:	2001cb70 	.word	0x2001cb70

0800c0dc <validate>:
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
 800c0e6:	2309      	movs	r3, #9
 800c0e8:	73fb      	strb	r3, [r7, #15]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d01c      	beq.n	800c12a <validate+0x4e>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d018      	beq.n	800c12a <validate+0x4e>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d013      	beq.n	800c12a <validate+0x4e>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	889a      	ldrh	r2, [r3, #4]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	88db      	ldrh	r3, [r3, #6]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d10c      	bne.n	800c12a <validate+0x4e>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	785b      	ldrb	r3, [r3, #1]
 800c116:	4618      	mov	r0, r3
 800c118:	f7fd fe3e 	bl	8009d98 <disk_status>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <validate+0x4e>
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <validate+0x5a>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	e000      	b.n	800c138 <validate+0x5c>
 800c136:	2300      	movs	r3, #0
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <f_mount>:
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	4613      	mov	r3, r2
 800c154:	71fb      	strb	r3, [r7, #7]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	f107 0310 	add.w	r3, r7, #16
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fc9c 	bl	800ba9c <get_ldnumber>
 800c164:	61f8      	str	r0, [r7, #28]
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	da01      	bge.n	800c170 <f_mount+0x28>
 800c16c:	230b      	movs	r3, #11
 800c16e:	e02b      	b.n	800c1c8 <f_mount+0x80>
 800c170:	4a17      	ldr	r2, [pc, #92]	@ (800c1d0 <f_mount+0x88>)
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c178:	61bb      	str	r3, [r7, #24]
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d005      	beq.n	800c18c <f_mount+0x44>
 800c180:	69b8      	ldr	r0, [r7, #24]
 800c182:	f7fe f8f1 	bl	800a368 <clear_lock>
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	2200      	movs	r2, #0
 800c18a:	701a      	strb	r2, [r3, #0]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <f_mount+0x50>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	701a      	strb	r2, [r3, #0]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	490d      	ldr	r1, [pc, #52]	@ (800c1d0 <f_mount+0x88>)
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <f_mount+0x66>
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d001      	beq.n	800c1b2 <f_mount+0x6a>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e00a      	b.n	800c1c8 <f_mount+0x80>
 800c1b2:	f107 010c 	add.w	r1, r7, #12
 800c1b6:	f107 0308 	add.w	r3, r7, #8
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff fd07 	bl	800bbd0 <find_volume>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	75fb      	strb	r3, [r7, #23]
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	2001cb48 	.word	0x2001cb48

0800c1d4 <f_open>:
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b09a      	sub	sp, #104	@ 0x68
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	71fb      	strb	r3, [r7, #7]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <f_open+0x18>
 800c1e8:	2309      	movs	r3, #9
 800c1ea:	e1b7      	b.n	800c55c <f_open+0x388>
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1f2:	71fb      	strb	r3, [r7, #7]
 800c1f4:	79fa      	ldrb	r2, [r7, #7]
 800c1f6:	f107 0114 	add.w	r1, r7, #20
 800c1fa:	f107 0308 	add.w	r3, r7, #8
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff fce6 	bl	800bbd0 <find_volume>
 800c204:	4603      	mov	r3, r0
 800c206:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c20a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f040 819b 	bne.w	800c54a <f_open+0x376>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	61bb      	str	r3, [r7, #24]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	f107 0318 	add.w	r3, r7, #24
 800c21e:	4611      	mov	r1, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fbc5 	bl	800b9b0 <follow_path>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c22c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c230:	2b00      	cmp	r3, #0
 800c232:	d118      	bne.n	800c266 <f_open+0x92>
 800c234:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c238:	b25b      	sxtb	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da03      	bge.n	800c246 <f_open+0x72>
 800c23e:	2306      	movs	r3, #6
 800c240:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c244:	e00f      	b.n	800c266 <f_open+0x92>
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	bf8c      	ite	hi
 800c24c:	2301      	movhi	r3, #1
 800c24e:	2300      	movls	r3, #0
 800c250:	b2db      	uxtb	r3, r3
 800c252:	461a      	mov	r2, r3
 800c254:	f107 0318 	add.w	r3, r7, #24
 800c258:	4611      	mov	r1, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fd ff3c 	bl	800a0d8 <chk_lock>
 800c260:	4603      	mov	r3, r0
 800c262:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c266:	79fb      	ldrb	r3, [r7, #7]
 800c268:	f003 031c 	and.w	r3, r3, #28
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d07f      	beq.n	800c370 <f_open+0x19c>
 800c270:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c274:	2b00      	cmp	r3, #0
 800c276:	d017      	beq.n	800c2a8 <f_open+0xd4>
 800c278:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d10e      	bne.n	800c29e <f_open+0xca>
 800c280:	f7fd ff86 	bl	800a190 <enq_lock>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d006      	beq.n	800c298 <f_open+0xc4>
 800c28a:	f107 0318 	add.w	r3, r7, #24
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff f8de 	bl	800b450 <dir_register>
 800c294:	4603      	mov	r3, r0
 800c296:	e000      	b.n	800c29a <f_open+0xc6>
 800c298:	2312      	movs	r3, #18
 800c29a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	f043 0308 	orr.w	r3, r3, #8
 800c2a4:	71fb      	strb	r3, [r7, #7]
 800c2a6:	e010      	b.n	800c2ca <f_open+0xf6>
 800c2a8:	7fbb      	ldrb	r3, [r7, #30]
 800c2aa:	f003 0311 	and.w	r3, r3, #17
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <f_open+0xe6>
 800c2b2:	2307      	movs	r3, #7
 800c2b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c2b8:	e007      	b.n	800c2ca <f_open+0xf6>
 800c2ba:	79fb      	ldrb	r3, [r7, #7]
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <f_open+0xf6>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c2ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d168      	bne.n	800c3a4 <f_open+0x1d0>
 800c2d2:	79fb      	ldrb	r3, [r7, #7]
 800c2d4:	f003 0308 	and.w	r3, r3, #8
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d063      	beq.n	800c3a4 <f_open+0x1d0>
 800c2dc:	f7fd fcfe 	bl	8009cdc <get_fattime>
 800c2e0:	65b8      	str	r0, [r7, #88]	@ 0x58
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	330e      	adds	r3, #14
 800c2e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fd fe4b 	bl	8009f84 <st_dword>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f0:	3316      	adds	r3, #22
 800c2f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fd fe45 	bl	8009f84 <st_dword>
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fc:	330b      	adds	r3, #11
 800c2fe:	2220      	movs	r2, #32
 800c300:	701a      	strb	r2, [r3, #0]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c306:	4611      	mov	r1, r2
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fe fe1a 	bl	800af42 <ld_clust>
 800c30e:	6578      	str	r0, [r7, #84]	@ 0x54
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c314:	2200      	movs	r2, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe fe32 	bl	800af80 <st_clust>
 800c31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31e:	331c      	adds	r3, #28
 800c320:	2100      	movs	r1, #0
 800c322:	4618      	mov	r0, r3
 800c324:	f7fd fe2e 	bl	8009f84 <st_dword>
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2201      	movs	r2, #1
 800c32c:	70da      	strb	r2, [r3, #3]
 800c32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c330:	2b00      	cmp	r3, #0
 800c332:	d037      	beq.n	800c3a4 <f_open+0x1d0>
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c33a:	f107 0318 	add.w	r3, r7, #24
 800c33e:	2200      	movs	r2, #0
 800c340:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fb22 	bl	800a98c <remove_chain>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c34e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c352:	2b00      	cmp	r3, #0
 800c354:	d126      	bne.n	800c3a4 <f_open+0x1d0>
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe f86c 	bl	800a438 <move_window>
 800c360:	4603      	mov	r3, r0
 800c362:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c36a:	3a01      	subs	r2, #1
 800c36c:	615a      	str	r2, [r3, #20]
 800c36e:	e019      	b.n	800c3a4 <f_open+0x1d0>
 800c370:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c374:	2b00      	cmp	r3, #0
 800c376:	d115      	bne.n	800c3a4 <f_open+0x1d0>
 800c378:	7fbb      	ldrb	r3, [r7, #30]
 800c37a:	f003 0310 	and.w	r3, r3, #16
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <f_open+0x1b6>
 800c382:	2304      	movs	r3, #4
 800c384:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c388:	e00c      	b.n	800c3a4 <f_open+0x1d0>
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	f003 0302 	and.w	r3, r3, #2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <f_open+0x1d0>
 800c394:	7fbb      	ldrb	r3, [r7, #30]
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <f_open+0x1d0>
 800c39e:	2307      	movs	r3, #7
 800c3a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c3a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d126      	bne.n	800c3fa <f_open+0x226>
 800c3ac:	79fb      	ldrb	r3, [r7, #7]
 800c3ae:	f003 0308 	and.w	r3, r3, #8
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <f_open+0x1ea>
 800c3b6:	79fb      	ldrb	r3, [r7, #7]
 800c3b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3bc:	71fb      	strb	r3, [r7, #7]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c3c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	629a      	str	r2, [r3, #40]	@ 0x28
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	bf8c      	ite	hi
 800c3d2:	2301      	movhi	r3, #1
 800c3d4:	2300      	movls	r3, #0
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	461a      	mov	r2, r3
 800c3da:	f107 0318 	add.w	r3, r7, #24
 800c3de:	4611      	mov	r1, r2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fd fef7 	bl	800a1d4 <inc_lock>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	611a      	str	r2, [r3, #16]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <f_open+0x226>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c3fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f040 80a3 	bne.w	800c54a <f_open+0x376>
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fe fd99 	bl	800af42 <ld_clust>
 800c410:	4602      	mov	r2, r0
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	609a      	str	r2, [r3, #8]
 800c416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c418:	331c      	adds	r3, #28
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fd fd74 	bl	8009f08 <ld_dword>
 800c420:	4602      	mov	r2, r0
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	60da      	str	r2, [r3, #12]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	88da      	ldrh	r2, [r3, #6]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	809a      	strh	r2, [r3, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	79fa      	ldrb	r2, [r7, #7]
 800c43e:	751a      	strb	r2, [r3, #20]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	755a      	strb	r2, [r3, #21]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	621a      	str	r2, [r3, #32]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2200      	movs	r2, #0
 800c450:	619a      	str	r2, [r3, #24]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3330      	adds	r3, #48	@ 0x30
 800c456:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c45a:	2100      	movs	r1, #0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fd fdde 	bl	800a01e <mem_set>
 800c462:	79fb      	ldrb	r3, [r7, #7]
 800c464:	f003 0320 	and.w	r3, r3, #32
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d06e      	beq.n	800c54a <f_open+0x376>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d06a      	beq.n	800c54a <f_open+0x376>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	619a      	str	r2, [r3, #24]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	895b      	ldrh	r3, [r3, #10]
 800c480:	461a      	mov	r2, r3
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	899b      	ldrh	r3, [r3, #12]
 800c486:	fb02 f303 	mul.w	r3, r2, r3
 800c48a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	663b      	str	r3, [r7, #96]	@ 0x60
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c498:	e016      	b.n	800c4c8 <f_open+0x2f4>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fe f887 	bl	800a5b2 <get_fat>
 800c4a4:	6638      	str	r0, [r7, #96]	@ 0x60
 800c4a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d802      	bhi.n	800c4b2 <f_open+0x2de>
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c4b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b8:	d102      	bne.n	800c4c0 <f_open+0x2ec>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c4c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c4c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d103      	bne.n	800c4d8 <f_open+0x304>
 800c4d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d8e0      	bhi.n	800c49a <f_open+0x2c6>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4dc:	61da      	str	r2, [r3, #28]
 800c4de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d131      	bne.n	800c54a <f_open+0x376>
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	899b      	ldrh	r3, [r3, #12]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4f2:	fb01 f202 	mul.w	r2, r1, r2
 800c4f6:	1a9b      	subs	r3, r3, r2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d026      	beq.n	800c54a <f_open+0x376>
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe f837 	bl	800a574 <clust2sect>
 800c506:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d103      	bne.n	800c516 <f_open+0x342>
 800c50e:	2302      	movs	r3, #2
 800c510:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c514:	e019      	b.n	800c54a <f_open+0x376>
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	899b      	ldrh	r3, [r3, #12]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c51e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c524:	441a      	add	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	621a      	str	r2, [r3, #32]
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	7858      	ldrb	r0, [r3, #1]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6a1a      	ldr	r2, [r3, #32]
 800c538:	2301      	movs	r3, #1
 800c53a:	f7fd fc6f 	bl	8009e1c <disk_read>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <f_open+0x376>
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c54a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <f_open+0x384>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c55c:	4618      	mov	r0, r3
 800c55e:	3768      	adds	r7, #104	@ 0x68
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <f_read>:
 800c564:	b580      	push	{r7, lr}
 800c566:	b08e      	sub	sp, #56	@ 0x38
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	627b      	str	r3, [r7, #36]	@ 0x24
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f107 0214 	add.w	r2, r7, #20
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff fda9 	bl	800c0dc <validate>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c590:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c594:	2b00      	cmp	r3, #0
 800c596:	d107      	bne.n	800c5a8 <f_read+0x44>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	7d5b      	ldrb	r3, [r3, #21]
 800c59c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c5a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <f_read+0x4a>
 800c5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5ac:	e135      	b.n	800c81a <f_read+0x2b6>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	7d1b      	ldrb	r3, [r3, #20]
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <f_read+0x5a>
 800c5ba:	2307      	movs	r3, #7
 800c5bc:	e12d      	b.n	800c81a <f_read+0x2b6>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	623b      	str	r3, [r7, #32]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	f240 811e 	bls.w	800c810 <f_read+0x2ac>
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	607b      	str	r3, [r7, #4]
 800c5d8:	e11a      	b.n	800c810 <f_read+0x2ac>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	8992      	ldrh	r2, [r2, #12]
 800c5e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5e6:	fb01 f202 	mul.w	r2, r1, r2
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f040 80d5 	bne.w	800c79c <f_read+0x238>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	699b      	ldr	r3, [r3, #24]
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	8992      	ldrh	r2, [r2, #12]
 800c5fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	8952      	ldrh	r2, [r2, #10]
 800c602:	3a01      	subs	r2, #1
 800c604:	4013      	ands	r3, r2
 800c606:	61fb      	str	r3, [r7, #28]
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d12f      	bne.n	800c66e <f_read+0x10a>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <f_read+0xba>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c61c:	e013      	b.n	800c646 <f_read+0xe2>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d007      	beq.n	800c636 <f_read+0xd2>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7fe faaa 	bl	800ab86 <clmt_clust>
 800c632:	6338      	str	r0, [r7, #48]	@ 0x30
 800c634:	e007      	b.n	800c646 <f_read+0xe2>
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	69db      	ldr	r3, [r3, #28]
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fd ffb7 	bl	800a5b2 <get_fat>
 800c644:	6338      	str	r0, [r7, #48]	@ 0x30
 800c646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d804      	bhi.n	800c656 <f_read+0xf2>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2202      	movs	r2, #2
 800c650:	755a      	strb	r2, [r3, #21]
 800c652:	2302      	movs	r3, #2
 800c654:	e0e1      	b.n	800c81a <f_read+0x2b6>
 800c656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65c:	d104      	bne.n	800c668 <f_read+0x104>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	755a      	strb	r2, [r3, #21]
 800c664:	2301      	movs	r3, #1
 800c666:	e0d8      	b.n	800c81a <f_read+0x2b6>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c66c:	61da      	str	r2, [r3, #28]
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	69db      	ldr	r3, [r3, #28]
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f7fd ff7c 	bl	800a574 <clust2sect>
 800c67c:	61b8      	str	r0, [r7, #24]
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <f_read+0x12a>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2202      	movs	r2, #2
 800c688:	755a      	strb	r2, [r3, #21]
 800c68a:	2302      	movs	r3, #2
 800c68c:	e0c5      	b.n	800c81a <f_read+0x2b6>
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	4413      	add	r3, r2
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	899b      	ldrh	r3, [r3, #12]
 800c69a:	461a      	mov	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d041      	beq.n	800c72e <f_read+0x1ca>
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ae:	4413      	add	r3, r2
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	8952      	ldrh	r2, [r2, #10]
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d905      	bls.n	800c6c4 <f_read+0x160>
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	895b      	ldrh	r3, [r3, #10]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	7858      	ldrb	r0, [r3, #1]
 800c6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6ce:	f7fd fba5 	bl	8009e1c <disk_read>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <f_read+0x17e>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	755a      	strb	r2, [r3, #21]
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e09b      	b.n	800c81a <f_read+0x2b6>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	7d1b      	ldrb	r3, [r3, #20]
 800c6e6:	b25b      	sxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	da18      	bge.n	800c71e <f_read+0x1ba>
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6a1a      	ldr	r2, [r3, #32]
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d911      	bls.n	800c71e <f_read+0x1ba>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6a1a      	ldr	r2, [r3, #32]
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	8992      	ldrh	r2, [r2, #12]
 800c706:	fb02 f303 	mul.w	r3, r2, r3
 800c70a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c70c:	18d0      	adds	r0, r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	461a      	mov	r2, r3
 800c71a:	f7fd fc5f 	bl	8009fdc <mem_cpy>
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	899b      	ldrh	r3, [r3, #12]
 800c722:	461a      	mov	r2, r3
 800c724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c726:	fb02 f303 	mul.w	r3, r2, r3
 800c72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c72c:	e05c      	b.n	800c7e8 <f_read+0x284>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	69ba      	ldr	r2, [r7, #24]
 800c734:	429a      	cmp	r2, r3
 800c736:	d02e      	beq.n	800c796 <f_read+0x232>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	7d1b      	ldrb	r3, [r3, #20]
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da18      	bge.n	800c774 <f_read+0x210>
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	7858      	ldrb	r0, [r3, #1]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	2301      	movs	r3, #1
 800c752:	f7fd fb83 	bl	8009e5c <disk_write>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d004      	beq.n	800c766 <f_read+0x202>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2201      	movs	r2, #1
 800c760:	755a      	strb	r2, [r3, #21]
 800c762:	2301      	movs	r3, #1
 800c764:	e059      	b.n	800c81a <f_read+0x2b6>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	7d1b      	ldrb	r3, [r3, #20]
 800c76a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	751a      	strb	r2, [r3, #20]
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	7858      	ldrb	r0, [r3, #1]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c77e:	2301      	movs	r3, #1
 800c780:	69ba      	ldr	r2, [r7, #24]
 800c782:	f7fd fb4b 	bl	8009e1c <disk_read>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d004      	beq.n	800c796 <f_read+0x232>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2201      	movs	r2, #1
 800c790:	755a      	strb	r2, [r3, #21]
 800c792:	2301      	movs	r3, #1
 800c794:	e041      	b.n	800c81a <f_read+0x2b6>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	621a      	str	r2, [r3, #32]
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	899b      	ldrh	r3, [r3, #12]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	8992      	ldrh	r2, [r2, #12]
 800c7aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7ae:	fb01 f202 	mul.w	r2, r1, r2
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	1ac3      	subs	r3, r0, r3
 800c7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d901      	bls.n	800c7c4 <f_read+0x260>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	699b      	ldr	r3, [r3, #24]
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	8992      	ldrh	r2, [r2, #12]
 800c7d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7d6:	fb00 f202 	mul.w	r2, r0, r2
 800c7da:	1a9b      	subs	r3, r3, r2
 800c7dc:	440b      	add	r3, r1
 800c7de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7e4:	f7fd fbfa 	bl	8009fdc <mem_cpy>
 800c7e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ec:	4413      	add	r3, r2
 800c7ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	699a      	ldr	r2, [r3, #24]
 800c7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f6:	441a      	add	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	619a      	str	r2, [r3, #24]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c802:	441a      	add	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f47f aee1 	bne.w	800c5da <f_read+0x76>
 800c818:	2300      	movs	r3, #0
 800c81a:	4618      	mov	r0, r3
 800c81c:	3738      	adds	r7, #56	@ 0x38
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <f_sync>:
 800c822:	b580      	push	{r7, lr}
 800c824:	b086      	sub	sp, #24
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f107 0208 	add.w	r2, r7, #8
 800c830:	4611      	mov	r1, r2
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fc52 	bl	800c0dc <validate>
 800c838:	4603      	mov	r3, r0
 800c83a:	75fb      	strb	r3, [r7, #23]
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d168      	bne.n	800c914 <f_sync+0xf2>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	7d1b      	ldrb	r3, [r3, #20]
 800c846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d062      	beq.n	800c914 <f_sync+0xf2>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	7d1b      	ldrb	r3, [r3, #20]
 800c852:	b25b      	sxtb	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	da15      	bge.n	800c884 <f_sync+0x62>
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	7858      	ldrb	r0, [r3, #1]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1a      	ldr	r2, [r3, #32]
 800c866:	2301      	movs	r3, #1
 800c868:	f7fd faf8 	bl	8009e5c <disk_write>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <f_sync+0x54>
 800c872:	2301      	movs	r3, #1
 800c874:	e04f      	b.n	800c916 <f_sync+0xf4>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7d1b      	ldrb	r3, [r3, #20]
 800c87a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	751a      	strb	r2, [r3, #20]
 800c884:	f7fd fa2a 	bl	8009cdc <get_fattime>
 800c888:	6138      	str	r0, [r7, #16]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c890:	4619      	mov	r1, r3
 800c892:	4610      	mov	r0, r2
 800c894:	f7fd fdd0 	bl	800a438 <move_window>
 800c898:	4603      	mov	r3, r0
 800c89a:	75fb      	strb	r3, [r7, #23]
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d138      	bne.n	800c914 <f_sync+0xf2>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	330b      	adds	r3, #11
 800c8ac:	781a      	ldrb	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	330b      	adds	r3, #11
 800c8b2:	f042 0220 	orr.w	r2, r2, #32
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	68f9      	ldr	r1, [r7, #12]
 800c8c6:	f7fe fb5b 	bl	800af80 <st_clust>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f103 021c 	add.w	r2, r3, #28
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7fd fb54 	bl	8009f84 <st_dword>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3316      	adds	r3, #22
 800c8e0:	6939      	ldr	r1, [r7, #16]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fd fb4e 	bl	8009f84 <st_dword>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3312      	adds	r3, #18
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fd fb2d 	bl	8009f4e <st_word>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	70da      	strb	r2, [r3, #3]
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd fdc9 	bl	800a494 <sync_fs>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7d1b      	ldrb	r3, [r3, #20]
 800c90a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	751a      	strb	r2, [r3, #20]
 800c914:	7dfb      	ldrb	r3, [r7, #23]
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <f_close>:
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff ff7b 	bl	800c822 <f_sync>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73fb      	strb	r3, [r7, #15]
 800c930:	7bfb      	ldrb	r3, [r7, #15]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d118      	bne.n	800c968 <f_close+0x4a>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f107 0208 	add.w	r2, r7, #8
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fbcc 	bl	800c0dc <validate>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10c      	bne.n	800c968 <f_close+0x4a>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	4618      	mov	r0, r3
 800c954:	f7fd fccc 	bl	800a2f0 <dec_lock>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d102      	bne.n	800c968 <f_close+0x4a>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	601a      	str	r2, [r3, #0]
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <FATFS_LinkDriverEx>:
 800c974:	b480      	push	{r7}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	71fb      	strb	r3, [r7, #7]
 800c982:	2301      	movs	r3, #1
 800c984:	75fb      	strb	r3, [r7, #23]
 800c986:	2300      	movs	r3, #0
 800c988:	75bb      	strb	r3, [r7, #22]
 800c98a:	4b1f      	ldr	r3, [pc, #124]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c98c:	7a5b      	ldrb	r3, [r3, #9]
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d131      	bne.n	800c9f8 <FATFS_LinkDriverEx+0x84>
 800c994:	4b1c      	ldr	r3, [pc, #112]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c996:	7a5b      	ldrb	r3, [r3, #9]
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	461a      	mov	r2, r3
 800c99c:	4b1a      	ldr	r3, [pc, #104]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c99e:	2100      	movs	r1, #0
 800c9a0:	5499      	strb	r1, [r3, r2]
 800c9a2:	4b19      	ldr	r3, [pc, #100]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c9a4:	7a5b      	ldrb	r3, [r3, #9]
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	4a17      	ldr	r2, [pc, #92]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4413      	add	r3, r2
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	605a      	str	r2, [r3, #4]
 800c9b2:	4b15      	ldr	r3, [pc, #84]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c9b4:	7a5b      	ldrb	r3, [r3, #9]
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	4b13      	ldr	r3, [pc, #76]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c9bc:	4413      	add	r3, r2
 800c9be:	79fa      	ldrb	r2, [r7, #7]
 800c9c0:	721a      	strb	r2, [r3, #8]
 800c9c2:	4b11      	ldr	r3, [pc, #68]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c9c4:	7a5b      	ldrb	r3, [r3, #9]
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	b2d1      	uxtb	r1, r2
 800c9cc:	4a0e      	ldr	r2, [pc, #56]	@ (800ca08 <FATFS_LinkDriverEx+0x94>)
 800c9ce:	7251      	strb	r1, [r2, #9]
 800c9d0:	75bb      	strb	r3, [r7, #22]
 800c9d2:	7dbb      	ldrb	r3, [r7, #22]
 800c9d4:	3330      	adds	r3, #48	@ 0x30
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	223a      	movs	r2, #58	@ 0x3a
 800c9e2:	701a      	strb	r2, [r3, #0]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	3302      	adds	r3, #2
 800c9e8:	222f      	movs	r2, #47	@ 0x2f
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	3303      	adds	r3, #3
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	701a      	strb	r2, [r3, #0]
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	75fb      	strb	r3, [r7, #23]
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	371c      	adds	r7, #28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	2001cd70 	.word	0x2001cd70

0800ca0c <FATFS_LinkDriver>:
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff ffaa 	bl	800c974 <FATFS_LinkDriverEx>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <ff_convert>:
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	6039      	str	r1, [r7, #0]
 800ca36:	80fb      	strh	r3, [r7, #6]
 800ca38:	88fb      	ldrh	r3, [r7, #6]
 800ca3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca3c:	d802      	bhi.n	800ca44 <ff_convert+0x18>
 800ca3e:	88fb      	ldrh	r3, [r7, #6]
 800ca40:	81fb      	strh	r3, [r7, #14]
 800ca42:	e025      	b.n	800ca90 <ff_convert+0x64>
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00b      	beq.n	800ca62 <ff_convert+0x36>
 800ca4a:	88fb      	ldrh	r3, [r7, #6]
 800ca4c:	2bff      	cmp	r3, #255	@ 0xff
 800ca4e:	d805      	bhi.n	800ca5c <ff_convert+0x30>
 800ca50:	88fb      	ldrh	r3, [r7, #6]
 800ca52:	3b80      	subs	r3, #128	@ 0x80
 800ca54:	4a12      	ldr	r2, [pc, #72]	@ (800caa0 <ff_convert+0x74>)
 800ca56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca5a:	e000      	b.n	800ca5e <ff_convert+0x32>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	81fb      	strh	r3, [r7, #14]
 800ca60:	e016      	b.n	800ca90 <ff_convert+0x64>
 800ca62:	2300      	movs	r3, #0
 800ca64:	81fb      	strh	r3, [r7, #14]
 800ca66:	e009      	b.n	800ca7c <ff_convert+0x50>
 800ca68:	89fb      	ldrh	r3, [r7, #14]
 800ca6a:	4a0d      	ldr	r2, [pc, #52]	@ (800caa0 <ff_convert+0x74>)
 800ca6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca70:	88fa      	ldrh	r2, [r7, #6]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d006      	beq.n	800ca84 <ff_convert+0x58>
 800ca76:	89fb      	ldrh	r3, [r7, #14]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	81fb      	strh	r3, [r7, #14]
 800ca7c:	89fb      	ldrh	r3, [r7, #14]
 800ca7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca80:	d9f2      	bls.n	800ca68 <ff_convert+0x3c>
 800ca82:	e000      	b.n	800ca86 <ff_convert+0x5a>
 800ca84:	bf00      	nop
 800ca86:	89fb      	ldrh	r3, [r7, #14]
 800ca88:	3380      	adds	r3, #128	@ 0x80
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	81fb      	strh	r3, [r7, #14]
 800ca90:	89fb      	ldrh	r3, [r7, #14]
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	08013dd4 	.word	0x08013dd4

0800caa4 <ff_wtoupper>:
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	80fb      	strh	r3, [r7, #6]
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cab4:	d201      	bcs.n	800caba <ff_wtoupper+0x16>
 800cab6:	4b3e      	ldr	r3, [pc, #248]	@ (800cbb0 <ff_wtoupper+0x10c>)
 800cab8:	e000      	b.n	800cabc <ff_wtoupper+0x18>
 800caba:	4b3e      	ldr	r3, [pc, #248]	@ (800cbb4 <ff_wtoupper+0x110>)
 800cabc:	617b      	str	r3, [r7, #20]
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	1c9a      	adds	r2, r3, #2
 800cac2:	617a      	str	r2, [r7, #20]
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	827b      	strh	r3, [r7, #18]
 800cac8:	8a7b      	ldrh	r3, [r7, #18]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d068      	beq.n	800cba0 <ff_wtoupper+0xfc>
 800cace:	88fa      	ldrh	r2, [r7, #6]
 800cad0:	8a7b      	ldrh	r3, [r7, #18]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d364      	bcc.n	800cba0 <ff_wtoupper+0xfc>
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	1c9a      	adds	r2, r3, #2
 800cada:	617a      	str	r2, [r7, #20]
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	823b      	strh	r3, [r7, #16]
 800cae0:	8a3b      	ldrh	r3, [r7, #16]
 800cae2:	0a1b      	lsrs	r3, r3, #8
 800cae4:	81fb      	strh	r3, [r7, #14]
 800cae6:	8a3b      	ldrh	r3, [r7, #16]
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	823b      	strh	r3, [r7, #16]
 800caec:	88fa      	ldrh	r2, [r7, #6]
 800caee:	8a79      	ldrh	r1, [r7, #18]
 800caf0:	8a3b      	ldrh	r3, [r7, #16]
 800caf2:	440b      	add	r3, r1
 800caf4:	429a      	cmp	r2, r3
 800caf6:	da49      	bge.n	800cb8c <ff_wtoupper+0xe8>
 800caf8:	89fb      	ldrh	r3, [r7, #14]
 800cafa:	2b08      	cmp	r3, #8
 800cafc:	d84f      	bhi.n	800cb9e <ff_wtoupper+0xfa>
 800cafe:	a201      	add	r2, pc, #4	@ (adr r2, 800cb04 <ff_wtoupper+0x60>)
 800cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb3b 	.word	0x0800cb3b
 800cb0c:	0800cb51 	.word	0x0800cb51
 800cb10:	0800cb59 	.word	0x0800cb59
 800cb14:	0800cb61 	.word	0x0800cb61
 800cb18:	0800cb69 	.word	0x0800cb69
 800cb1c:	0800cb71 	.word	0x0800cb71
 800cb20:	0800cb79 	.word	0x0800cb79
 800cb24:	0800cb81 	.word	0x0800cb81
 800cb28:	88fa      	ldrh	r2, [r7, #6]
 800cb2a:	8a7b      	ldrh	r3, [r7, #18]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4413      	add	r3, r2
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	80fb      	strh	r3, [r7, #6]
 800cb38:	e027      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb3a:	88fa      	ldrh	r2, [r7, #6]
 800cb3c:	8a7b      	ldrh	r3, [r7, #18]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	88fa      	ldrh	r2, [r7, #6]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	80fb      	strh	r3, [r7, #6]
 800cb4e:	e01c      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb50:	88fb      	ldrh	r3, [r7, #6]
 800cb52:	3b10      	subs	r3, #16
 800cb54:	80fb      	strh	r3, [r7, #6]
 800cb56:	e018      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	3b20      	subs	r3, #32
 800cb5c:	80fb      	strh	r3, [r7, #6]
 800cb5e:	e014      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb60:	88fb      	ldrh	r3, [r7, #6]
 800cb62:	3b30      	subs	r3, #48	@ 0x30
 800cb64:	80fb      	strh	r3, [r7, #6]
 800cb66:	e010      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb68:	88fb      	ldrh	r3, [r7, #6]
 800cb6a:	3b1a      	subs	r3, #26
 800cb6c:	80fb      	strh	r3, [r7, #6]
 800cb6e:	e00c      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb70:	88fb      	ldrh	r3, [r7, #6]
 800cb72:	3308      	adds	r3, #8
 800cb74:	80fb      	strh	r3, [r7, #6]
 800cb76:	e008      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb78:	88fb      	ldrh	r3, [r7, #6]
 800cb7a:	3b50      	subs	r3, #80	@ 0x50
 800cb7c:	80fb      	strh	r3, [r7, #6]
 800cb7e:	e004      	b.n	800cb8a <ff_wtoupper+0xe6>
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800cb86:	80fb      	strh	r3, [r7, #6]
 800cb88:	bf00      	nop
 800cb8a:	e008      	b.n	800cb9e <ff_wtoupper+0xfa>
 800cb8c:	89fb      	ldrh	r3, [r7, #14]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d195      	bne.n	800cabe <ff_wtoupper+0x1a>
 800cb92:	8a3b      	ldrh	r3, [r7, #16]
 800cb94:	005b      	lsls	r3, r3, #1
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4413      	add	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]
 800cb9c:	e78f      	b.n	800cabe <ff_wtoupper+0x1a>
 800cb9e:	bf00      	nop
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	4618      	mov	r0, r3
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	08013ed4 	.word	0x08013ed4
 800cbb4:	080140c8 	.word	0x080140c8

0800cbb8 <siprintf>:
 800cbb8:	b40e      	push	{r1, r2, r3}
 800cbba:	b500      	push	{lr}
 800cbbc:	b09c      	sub	sp, #112	@ 0x70
 800cbbe:	ab1d      	add	r3, sp, #116	@ 0x74
 800cbc0:	9002      	str	r0, [sp, #8]
 800cbc2:	9006      	str	r0, [sp, #24]
 800cbc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cbc8:	4809      	ldr	r0, [pc, #36]	@ (800cbf0 <siprintf+0x38>)
 800cbca:	9107      	str	r1, [sp, #28]
 800cbcc:	9104      	str	r1, [sp, #16]
 800cbce:	4909      	ldr	r1, [pc, #36]	@ (800cbf4 <siprintf+0x3c>)
 800cbd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd4:	9105      	str	r1, [sp, #20]
 800cbd6:	6800      	ldr	r0, [r0, #0]
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	a902      	add	r1, sp, #8
 800cbdc:	f000 f994 	bl	800cf08 <_svfiprintf_r>
 800cbe0:	9b02      	ldr	r3, [sp, #8]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	b01c      	add	sp, #112	@ 0x70
 800cbe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbec:	b003      	add	sp, #12
 800cbee:	4770      	bx	lr
 800cbf0:	20016a9c 	.word	0x20016a9c
 800cbf4:	ffff0208 	.word	0xffff0208

0800cbf8 <memset>:
 800cbf8:	4402      	add	r2, r0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d100      	bne.n	800cc02 <memset+0xa>
 800cc00:	4770      	bx	lr
 800cc02:	f803 1b01 	strb.w	r1, [r3], #1
 800cc06:	e7f9      	b.n	800cbfc <memset+0x4>

0800cc08 <__errno>:
 800cc08:	4b01      	ldr	r3, [pc, #4]	@ (800cc10 <__errno+0x8>)
 800cc0a:	6818      	ldr	r0, [r3, #0]
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	20016a9c 	.word	0x20016a9c

0800cc14 <__libc_init_array>:
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	4d0d      	ldr	r5, [pc, #52]	@ (800cc4c <__libc_init_array+0x38>)
 800cc18:	4c0d      	ldr	r4, [pc, #52]	@ (800cc50 <__libc_init_array+0x3c>)
 800cc1a:	1b64      	subs	r4, r4, r5
 800cc1c:	10a4      	asrs	r4, r4, #2
 800cc1e:	2600      	movs	r6, #0
 800cc20:	42a6      	cmp	r6, r4
 800cc22:	d109      	bne.n	800cc38 <__libc_init_array+0x24>
 800cc24:	4d0b      	ldr	r5, [pc, #44]	@ (800cc54 <__libc_init_array+0x40>)
 800cc26:	4c0c      	ldr	r4, [pc, #48]	@ (800cc58 <__libc_init_array+0x44>)
 800cc28:	f000 fc66 	bl	800d4f8 <_init>
 800cc2c:	1b64      	subs	r4, r4, r5
 800cc2e:	10a4      	asrs	r4, r4, #2
 800cc30:	2600      	movs	r6, #0
 800cc32:	42a6      	cmp	r6, r4
 800cc34:	d105      	bne.n	800cc42 <__libc_init_array+0x2e>
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
 800cc38:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc3c:	4798      	blx	r3
 800cc3e:	3601      	adds	r6, #1
 800cc40:	e7ee      	b.n	800cc20 <__libc_init_array+0xc>
 800cc42:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc46:	4798      	blx	r3
 800cc48:	3601      	adds	r6, #1
 800cc4a:	e7f2      	b.n	800cc32 <__libc_init_array+0x1e>
 800cc4c:	080141c0 	.word	0x080141c0
 800cc50:	080141c0 	.word	0x080141c0
 800cc54:	080141c0 	.word	0x080141c0
 800cc58:	080141c4 	.word	0x080141c4

0800cc5c <__retarget_lock_acquire_recursive>:
 800cc5c:	4770      	bx	lr

0800cc5e <__retarget_lock_release_recursive>:
 800cc5e:	4770      	bx	lr

0800cc60 <_free_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4605      	mov	r5, r0
 800cc64:	2900      	cmp	r1, #0
 800cc66:	d041      	beq.n	800ccec <_free_r+0x8c>
 800cc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc6c:	1f0c      	subs	r4, r1, #4
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	bfb8      	it	lt
 800cc72:	18e4      	addlt	r4, r4, r3
 800cc74:	f000 f8e0 	bl	800ce38 <__malloc_lock>
 800cc78:	4a1d      	ldr	r2, [pc, #116]	@ (800ccf0 <_free_r+0x90>)
 800cc7a:	6813      	ldr	r3, [r2, #0]
 800cc7c:	b933      	cbnz	r3, 800cc8c <_free_r+0x2c>
 800cc7e:	6063      	str	r3, [r4, #4]
 800cc80:	6014      	str	r4, [r2, #0]
 800cc82:	4628      	mov	r0, r5
 800cc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc88:	f000 b8dc 	b.w	800ce44 <__malloc_unlock>
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	d908      	bls.n	800cca2 <_free_r+0x42>
 800cc90:	6820      	ldr	r0, [r4, #0]
 800cc92:	1821      	adds	r1, r4, r0
 800cc94:	428b      	cmp	r3, r1
 800cc96:	bf01      	itttt	eq
 800cc98:	6819      	ldreq	r1, [r3, #0]
 800cc9a:	685b      	ldreq	r3, [r3, #4]
 800cc9c:	1809      	addeq	r1, r1, r0
 800cc9e:	6021      	streq	r1, [r4, #0]
 800cca0:	e7ed      	b.n	800cc7e <_free_r+0x1e>
 800cca2:	461a      	mov	r2, r3
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	b10b      	cbz	r3, 800ccac <_free_r+0x4c>
 800cca8:	42a3      	cmp	r3, r4
 800ccaa:	d9fa      	bls.n	800cca2 <_free_r+0x42>
 800ccac:	6811      	ldr	r1, [r2, #0]
 800ccae:	1850      	adds	r0, r2, r1
 800ccb0:	42a0      	cmp	r0, r4
 800ccb2:	d10b      	bne.n	800cccc <_free_r+0x6c>
 800ccb4:	6820      	ldr	r0, [r4, #0]
 800ccb6:	4401      	add	r1, r0
 800ccb8:	1850      	adds	r0, r2, r1
 800ccba:	4283      	cmp	r3, r0
 800ccbc:	6011      	str	r1, [r2, #0]
 800ccbe:	d1e0      	bne.n	800cc82 <_free_r+0x22>
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	6053      	str	r3, [r2, #4]
 800ccc6:	4408      	add	r0, r1
 800ccc8:	6010      	str	r0, [r2, #0]
 800ccca:	e7da      	b.n	800cc82 <_free_r+0x22>
 800cccc:	d902      	bls.n	800ccd4 <_free_r+0x74>
 800ccce:	230c      	movs	r3, #12
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	e7d6      	b.n	800cc82 <_free_r+0x22>
 800ccd4:	6820      	ldr	r0, [r4, #0]
 800ccd6:	1821      	adds	r1, r4, r0
 800ccd8:	428b      	cmp	r3, r1
 800ccda:	bf04      	itt	eq
 800ccdc:	6819      	ldreq	r1, [r3, #0]
 800ccde:	685b      	ldreq	r3, [r3, #4]
 800cce0:	6063      	str	r3, [r4, #4]
 800cce2:	bf04      	itt	eq
 800cce4:	1809      	addeq	r1, r1, r0
 800cce6:	6021      	streq	r1, [r4, #0]
 800cce8:	6054      	str	r4, [r2, #4]
 800ccea:	e7ca      	b.n	800cc82 <_free_r+0x22>
 800ccec:	bd38      	pop	{r3, r4, r5, pc}
 800ccee:	bf00      	nop
 800ccf0:	2001cec0 	.word	0x2001cec0

0800ccf4 <sbrk_aligned>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4e0f      	ldr	r6, [pc, #60]	@ (800cd34 <sbrk_aligned+0x40>)
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	6831      	ldr	r1, [r6, #0]
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	b911      	cbnz	r1, 800cd06 <sbrk_aligned+0x12>
 800cd00:	f000 fba6 	bl	800d450 <_sbrk_r>
 800cd04:	6030      	str	r0, [r6, #0]
 800cd06:	4621      	mov	r1, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f000 fba1 	bl	800d450 <_sbrk_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d103      	bne.n	800cd1a <sbrk_aligned+0x26>
 800cd12:	f04f 34ff 	mov.w	r4, #4294967295
 800cd16:	4620      	mov	r0, r4
 800cd18:	bd70      	pop	{r4, r5, r6, pc}
 800cd1a:	1cc4      	adds	r4, r0, #3
 800cd1c:	f024 0403 	bic.w	r4, r4, #3
 800cd20:	42a0      	cmp	r0, r4
 800cd22:	d0f8      	beq.n	800cd16 <sbrk_aligned+0x22>
 800cd24:	1a21      	subs	r1, r4, r0
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 fb92 	bl	800d450 <_sbrk_r>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d1f2      	bne.n	800cd16 <sbrk_aligned+0x22>
 800cd30:	e7ef      	b.n	800cd12 <sbrk_aligned+0x1e>
 800cd32:	bf00      	nop
 800cd34:	2001cebc 	.word	0x2001cebc

0800cd38 <_malloc_r>:
 800cd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	1ccd      	adds	r5, r1, #3
 800cd3e:	f025 0503 	bic.w	r5, r5, #3
 800cd42:	3508      	adds	r5, #8
 800cd44:	2d0c      	cmp	r5, #12
 800cd46:	bf38      	it	cc
 800cd48:	250c      	movcc	r5, #12
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	db01      	blt.n	800cd54 <_malloc_r+0x1c>
 800cd50:	42a9      	cmp	r1, r5
 800cd52:	d904      	bls.n	800cd5e <_malloc_r+0x26>
 800cd54:	230c      	movs	r3, #12
 800cd56:	6033      	str	r3, [r6, #0]
 800cd58:	2000      	movs	r0, #0
 800cd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce34 <_malloc_r+0xfc>
 800cd62:	f000 f869 	bl	800ce38 <__malloc_lock>
 800cd66:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6a:	461c      	mov	r4, r3
 800cd6c:	bb44      	cbnz	r4, 800cdc0 <_malloc_r+0x88>
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7ff ffbf 	bl	800ccf4 <sbrk_aligned>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	4604      	mov	r4, r0
 800cd7a:	d158      	bne.n	800ce2e <_malloc_r+0xf6>
 800cd7c:	f8d8 4000 	ldr.w	r4, [r8]
 800cd80:	4627      	mov	r7, r4
 800cd82:	2f00      	cmp	r7, #0
 800cd84:	d143      	bne.n	800ce0e <_malloc_r+0xd6>
 800cd86:	2c00      	cmp	r4, #0
 800cd88:	d04b      	beq.n	800ce22 <_malloc_r+0xea>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4630      	mov	r0, r6
 800cd90:	eb04 0903 	add.w	r9, r4, r3
 800cd94:	f000 fb5c 	bl	800d450 <_sbrk_r>
 800cd98:	4581      	cmp	r9, r0
 800cd9a:	d142      	bne.n	800ce22 <_malloc_r+0xea>
 800cd9c:	6821      	ldr	r1, [r4, #0]
 800cd9e:	1a6d      	subs	r5, r5, r1
 800cda0:	4629      	mov	r1, r5
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7ff ffa6 	bl	800ccf4 <sbrk_aligned>
 800cda8:	3001      	adds	r0, #1
 800cdaa:	d03a      	beq.n	800ce22 <_malloc_r+0xea>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	442b      	add	r3, r5
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	bb62      	cbnz	r2, 800ce14 <_malloc_r+0xdc>
 800cdba:	f8c8 7000 	str.w	r7, [r8]
 800cdbe:	e00f      	b.n	800cde0 <_malloc_r+0xa8>
 800cdc0:	6822      	ldr	r2, [r4, #0]
 800cdc2:	1b52      	subs	r2, r2, r5
 800cdc4:	d420      	bmi.n	800ce08 <_malloc_r+0xd0>
 800cdc6:	2a0b      	cmp	r2, #11
 800cdc8:	d917      	bls.n	800cdfa <_malloc_r+0xc2>
 800cdca:	1961      	adds	r1, r4, r5
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	6025      	str	r5, [r4, #0]
 800cdd0:	bf18      	it	ne
 800cdd2:	6059      	strne	r1, [r3, #4]
 800cdd4:	6863      	ldr	r3, [r4, #4]
 800cdd6:	bf08      	it	eq
 800cdd8:	f8c8 1000 	streq.w	r1, [r8]
 800cddc:	5162      	str	r2, [r4, r5]
 800cdde:	604b      	str	r3, [r1, #4]
 800cde0:	4630      	mov	r0, r6
 800cde2:	f000 f82f 	bl	800ce44 <__malloc_unlock>
 800cde6:	f104 000b 	add.w	r0, r4, #11
 800cdea:	1d23      	adds	r3, r4, #4
 800cdec:	f020 0007 	bic.w	r0, r0, #7
 800cdf0:	1ac2      	subs	r2, r0, r3
 800cdf2:	bf1c      	itt	ne
 800cdf4:	1a1b      	subne	r3, r3, r0
 800cdf6:	50a3      	strne	r3, [r4, r2]
 800cdf8:	e7af      	b.n	800cd5a <_malloc_r+0x22>
 800cdfa:	6862      	ldr	r2, [r4, #4]
 800cdfc:	42a3      	cmp	r3, r4
 800cdfe:	bf0c      	ite	eq
 800ce00:	f8c8 2000 	streq.w	r2, [r8]
 800ce04:	605a      	strne	r2, [r3, #4]
 800ce06:	e7eb      	b.n	800cde0 <_malloc_r+0xa8>
 800ce08:	4623      	mov	r3, r4
 800ce0a:	6864      	ldr	r4, [r4, #4]
 800ce0c:	e7ae      	b.n	800cd6c <_malloc_r+0x34>
 800ce0e:	463c      	mov	r4, r7
 800ce10:	687f      	ldr	r7, [r7, #4]
 800ce12:	e7b6      	b.n	800cd82 <_malloc_r+0x4a>
 800ce14:	461a      	mov	r2, r3
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	42a3      	cmp	r3, r4
 800ce1a:	d1fb      	bne.n	800ce14 <_malloc_r+0xdc>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	6053      	str	r3, [r2, #4]
 800ce20:	e7de      	b.n	800cde0 <_malloc_r+0xa8>
 800ce22:	230c      	movs	r3, #12
 800ce24:	6033      	str	r3, [r6, #0]
 800ce26:	4630      	mov	r0, r6
 800ce28:	f000 f80c 	bl	800ce44 <__malloc_unlock>
 800ce2c:	e794      	b.n	800cd58 <_malloc_r+0x20>
 800ce2e:	6005      	str	r5, [r0, #0]
 800ce30:	e7d6      	b.n	800cde0 <_malloc_r+0xa8>
 800ce32:	bf00      	nop
 800ce34:	2001cec0 	.word	0x2001cec0

0800ce38 <__malloc_lock>:
 800ce38:	4801      	ldr	r0, [pc, #4]	@ (800ce40 <__malloc_lock+0x8>)
 800ce3a:	f7ff bf0f 	b.w	800cc5c <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	2001ceb8 	.word	0x2001ceb8

0800ce44 <__malloc_unlock>:
 800ce44:	4801      	ldr	r0, [pc, #4]	@ (800ce4c <__malloc_unlock+0x8>)
 800ce46:	f7ff bf0a 	b.w	800cc5e <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	2001ceb8 	.word	0x2001ceb8

0800ce50 <__ssputs_r>:
 800ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	688e      	ldr	r6, [r1, #8]
 800ce56:	461f      	mov	r7, r3
 800ce58:	42be      	cmp	r6, r7
 800ce5a:	680b      	ldr	r3, [r1, #0]
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	4690      	mov	r8, r2
 800ce62:	d82d      	bhi.n	800cec0 <__ssputs_r+0x70>
 800ce64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce6c:	d026      	beq.n	800cebc <__ssputs_r+0x6c>
 800ce6e:	6965      	ldr	r5, [r4, #20]
 800ce70:	6909      	ldr	r1, [r1, #16]
 800ce72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce76:	eba3 0901 	sub.w	r9, r3, r1
 800ce7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce7e:	1c7b      	adds	r3, r7, #1
 800ce80:	444b      	add	r3, r9
 800ce82:	106d      	asrs	r5, r5, #1
 800ce84:	429d      	cmp	r5, r3
 800ce86:	bf38      	it	cc
 800ce88:	461d      	movcc	r5, r3
 800ce8a:	0553      	lsls	r3, r2, #21
 800ce8c:	d527      	bpl.n	800cede <__ssputs_r+0x8e>
 800ce8e:	4629      	mov	r1, r5
 800ce90:	f7ff ff52 	bl	800cd38 <_malloc_r>
 800ce94:	4606      	mov	r6, r0
 800ce96:	b360      	cbz	r0, 800cef2 <__ssputs_r+0xa2>
 800ce98:	6921      	ldr	r1, [r4, #16]
 800ce9a:	464a      	mov	r2, r9
 800ce9c:	f000 fae8 	bl	800d470 <memcpy>
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceaa:	81a3      	strh	r3, [r4, #12]
 800ceac:	6126      	str	r6, [r4, #16]
 800ceae:	6165      	str	r5, [r4, #20]
 800ceb0:	444e      	add	r6, r9
 800ceb2:	eba5 0509 	sub.w	r5, r5, r9
 800ceb6:	6026      	str	r6, [r4, #0]
 800ceb8:	60a5      	str	r5, [r4, #8]
 800ceba:	463e      	mov	r6, r7
 800cebc:	42be      	cmp	r6, r7
 800cebe:	d900      	bls.n	800cec2 <__ssputs_r+0x72>
 800cec0:	463e      	mov	r6, r7
 800cec2:	6820      	ldr	r0, [r4, #0]
 800cec4:	4632      	mov	r2, r6
 800cec6:	4641      	mov	r1, r8
 800cec8:	f000 faa8 	bl	800d41c <memmove>
 800cecc:	68a3      	ldr	r3, [r4, #8]
 800cece:	1b9b      	subs	r3, r3, r6
 800ced0:	60a3      	str	r3, [r4, #8]
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	4433      	add	r3, r6
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	2000      	movs	r0, #0
 800ceda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cede:	462a      	mov	r2, r5
 800cee0:	f000 fad4 	bl	800d48c <_realloc_r>
 800cee4:	4606      	mov	r6, r0
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d1e0      	bne.n	800ceac <__ssputs_r+0x5c>
 800ceea:	6921      	ldr	r1, [r4, #16]
 800ceec:	4650      	mov	r0, sl
 800ceee:	f7ff feb7 	bl	800cc60 <_free_r>
 800cef2:	230c      	movs	r3, #12
 800cef4:	f8ca 3000 	str.w	r3, [sl]
 800cef8:	89a3      	ldrh	r3, [r4, #12]
 800cefa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cefe:	81a3      	strh	r3, [r4, #12]
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	e7e9      	b.n	800ceda <__ssputs_r+0x8a>
	...

0800cf08 <_svfiprintf_r>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	4698      	mov	r8, r3
 800cf0e:	898b      	ldrh	r3, [r1, #12]
 800cf10:	061b      	lsls	r3, r3, #24
 800cf12:	b09d      	sub	sp, #116	@ 0x74
 800cf14:	4607      	mov	r7, r0
 800cf16:	460d      	mov	r5, r1
 800cf18:	4614      	mov	r4, r2
 800cf1a:	d510      	bpl.n	800cf3e <_svfiprintf_r+0x36>
 800cf1c:	690b      	ldr	r3, [r1, #16]
 800cf1e:	b973      	cbnz	r3, 800cf3e <_svfiprintf_r+0x36>
 800cf20:	2140      	movs	r1, #64	@ 0x40
 800cf22:	f7ff ff09 	bl	800cd38 <_malloc_r>
 800cf26:	6028      	str	r0, [r5, #0]
 800cf28:	6128      	str	r0, [r5, #16]
 800cf2a:	b930      	cbnz	r0, 800cf3a <_svfiprintf_r+0x32>
 800cf2c:	230c      	movs	r3, #12
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	f04f 30ff 	mov.w	r0, #4294967295
 800cf34:	b01d      	add	sp, #116	@ 0x74
 800cf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3a:	2340      	movs	r3, #64	@ 0x40
 800cf3c:	616b      	str	r3, [r5, #20]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf42:	2320      	movs	r3, #32
 800cf44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf48:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf4c:	2330      	movs	r3, #48	@ 0x30
 800cf4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0ec <_svfiprintf_r+0x1e4>
 800cf52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf56:	f04f 0901 	mov.w	r9, #1
 800cf5a:	4623      	mov	r3, r4
 800cf5c:	469a      	mov	sl, r3
 800cf5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf62:	b10a      	cbz	r2, 800cf68 <_svfiprintf_r+0x60>
 800cf64:	2a25      	cmp	r2, #37	@ 0x25
 800cf66:	d1f9      	bne.n	800cf5c <_svfiprintf_r+0x54>
 800cf68:	ebba 0b04 	subs.w	fp, sl, r4
 800cf6c:	d00b      	beq.n	800cf86 <_svfiprintf_r+0x7e>
 800cf6e:	465b      	mov	r3, fp
 800cf70:	4622      	mov	r2, r4
 800cf72:	4629      	mov	r1, r5
 800cf74:	4638      	mov	r0, r7
 800cf76:	f7ff ff6b 	bl	800ce50 <__ssputs_r>
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	f000 80a7 	beq.w	800d0ce <_svfiprintf_r+0x1c6>
 800cf80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf82:	445a      	add	r2, fp
 800cf84:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf86:	f89a 3000 	ldrb.w	r3, [sl]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f000 809f 	beq.w	800d0ce <_svfiprintf_r+0x1c6>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f04f 32ff 	mov.w	r2, #4294967295
 800cf96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf9a:	f10a 0a01 	add.w	sl, sl, #1
 800cf9e:	9304      	str	r3, [sp, #16]
 800cfa0:	9307      	str	r3, [sp, #28]
 800cfa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfa6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfa8:	4654      	mov	r4, sl
 800cfaa:	2205      	movs	r2, #5
 800cfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb0:	484e      	ldr	r0, [pc, #312]	@ (800d0ec <_svfiprintf_r+0x1e4>)
 800cfb2:	f7f3 f935 	bl	8000220 <memchr>
 800cfb6:	9a04      	ldr	r2, [sp, #16]
 800cfb8:	b9d8      	cbnz	r0, 800cff2 <_svfiprintf_r+0xea>
 800cfba:	06d0      	lsls	r0, r2, #27
 800cfbc:	bf44      	itt	mi
 800cfbe:	2320      	movmi	r3, #32
 800cfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfc4:	0711      	lsls	r1, r2, #28
 800cfc6:	bf44      	itt	mi
 800cfc8:	232b      	movmi	r3, #43	@ 0x2b
 800cfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfce:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfd4:	d015      	beq.n	800d002 <_svfiprintf_r+0xfa>
 800cfd6:	9a07      	ldr	r2, [sp, #28]
 800cfd8:	4654      	mov	r4, sl
 800cfda:	2000      	movs	r0, #0
 800cfdc:	f04f 0c0a 	mov.w	ip, #10
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfe6:	3b30      	subs	r3, #48	@ 0x30
 800cfe8:	2b09      	cmp	r3, #9
 800cfea:	d94b      	bls.n	800d084 <_svfiprintf_r+0x17c>
 800cfec:	b1b0      	cbz	r0, 800d01c <_svfiprintf_r+0x114>
 800cfee:	9207      	str	r2, [sp, #28]
 800cff0:	e014      	b.n	800d01c <_svfiprintf_r+0x114>
 800cff2:	eba0 0308 	sub.w	r3, r0, r8
 800cff6:	fa09 f303 	lsl.w	r3, r9, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	46a2      	mov	sl, r4
 800d000:	e7d2      	b.n	800cfa8 <_svfiprintf_r+0xa0>
 800d002:	9b03      	ldr	r3, [sp, #12]
 800d004:	1d19      	adds	r1, r3, #4
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	9103      	str	r1, [sp, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	bfbb      	ittet	lt
 800d00e:	425b      	neglt	r3, r3
 800d010:	f042 0202 	orrlt.w	r2, r2, #2
 800d014:	9307      	strge	r3, [sp, #28]
 800d016:	9307      	strlt	r3, [sp, #28]
 800d018:	bfb8      	it	lt
 800d01a:	9204      	strlt	r2, [sp, #16]
 800d01c:	7823      	ldrb	r3, [r4, #0]
 800d01e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d020:	d10a      	bne.n	800d038 <_svfiprintf_r+0x130>
 800d022:	7863      	ldrb	r3, [r4, #1]
 800d024:	2b2a      	cmp	r3, #42	@ 0x2a
 800d026:	d132      	bne.n	800d08e <_svfiprintf_r+0x186>
 800d028:	9b03      	ldr	r3, [sp, #12]
 800d02a:	1d1a      	adds	r2, r3, #4
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	9203      	str	r2, [sp, #12]
 800d030:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d034:	3402      	adds	r4, #2
 800d036:	9305      	str	r3, [sp, #20]
 800d038:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0fc <_svfiprintf_r+0x1f4>
 800d03c:	7821      	ldrb	r1, [r4, #0]
 800d03e:	2203      	movs	r2, #3
 800d040:	4650      	mov	r0, sl
 800d042:	f7f3 f8ed 	bl	8000220 <memchr>
 800d046:	b138      	cbz	r0, 800d058 <_svfiprintf_r+0x150>
 800d048:	9b04      	ldr	r3, [sp, #16]
 800d04a:	eba0 000a 	sub.w	r0, r0, sl
 800d04e:	2240      	movs	r2, #64	@ 0x40
 800d050:	4082      	lsls	r2, r0
 800d052:	4313      	orrs	r3, r2
 800d054:	3401      	adds	r4, #1
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05c:	4824      	ldr	r0, [pc, #144]	@ (800d0f0 <_svfiprintf_r+0x1e8>)
 800d05e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d062:	2206      	movs	r2, #6
 800d064:	f7f3 f8dc 	bl	8000220 <memchr>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d036      	beq.n	800d0da <_svfiprintf_r+0x1d2>
 800d06c:	4b21      	ldr	r3, [pc, #132]	@ (800d0f4 <_svfiprintf_r+0x1ec>)
 800d06e:	bb1b      	cbnz	r3, 800d0b8 <_svfiprintf_r+0x1b0>
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	3307      	adds	r3, #7
 800d074:	f023 0307 	bic.w	r3, r3, #7
 800d078:	3308      	adds	r3, #8
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07e:	4433      	add	r3, r6
 800d080:	9309      	str	r3, [sp, #36]	@ 0x24
 800d082:	e76a      	b.n	800cf5a <_svfiprintf_r+0x52>
 800d084:	fb0c 3202 	mla	r2, ip, r2, r3
 800d088:	460c      	mov	r4, r1
 800d08a:	2001      	movs	r0, #1
 800d08c:	e7a8      	b.n	800cfe0 <_svfiprintf_r+0xd8>
 800d08e:	2300      	movs	r3, #0
 800d090:	3401      	adds	r4, #1
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	4619      	mov	r1, r3
 800d096:	f04f 0c0a 	mov.w	ip, #10
 800d09a:	4620      	mov	r0, r4
 800d09c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a0:	3a30      	subs	r2, #48	@ 0x30
 800d0a2:	2a09      	cmp	r2, #9
 800d0a4:	d903      	bls.n	800d0ae <_svfiprintf_r+0x1a6>
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d0c6      	beq.n	800d038 <_svfiprintf_r+0x130>
 800d0aa:	9105      	str	r1, [sp, #20]
 800d0ac:	e7c4      	b.n	800d038 <_svfiprintf_r+0x130>
 800d0ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e7f0      	b.n	800d09a <_svfiprintf_r+0x192>
 800d0b8:	ab03      	add	r3, sp, #12
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f8 <_svfiprintf_r+0x1f0>)
 800d0c0:	a904      	add	r1, sp, #16
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f3af 8000 	nop.w
 800d0c8:	1c42      	adds	r2, r0, #1
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	d1d6      	bne.n	800d07c <_svfiprintf_r+0x174>
 800d0ce:	89ab      	ldrh	r3, [r5, #12]
 800d0d0:	065b      	lsls	r3, r3, #25
 800d0d2:	f53f af2d 	bmi.w	800cf30 <_svfiprintf_r+0x28>
 800d0d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0d8:	e72c      	b.n	800cf34 <_svfiprintf_r+0x2c>
 800d0da:	ab03      	add	r3, sp, #12
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	462a      	mov	r2, r5
 800d0e0:	4b05      	ldr	r3, [pc, #20]	@ (800d0f8 <_svfiprintf_r+0x1f0>)
 800d0e2:	a904      	add	r1, sp, #16
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f000 f879 	bl	800d1dc <_printf_i>
 800d0ea:	e7ed      	b.n	800d0c8 <_svfiprintf_r+0x1c0>
 800d0ec:	08014184 	.word	0x08014184
 800d0f0:	0801418e 	.word	0x0801418e
 800d0f4:	00000000 	.word	0x00000000
 800d0f8:	0800ce51 	.word	0x0800ce51
 800d0fc:	0801418a 	.word	0x0801418a

0800d100 <_printf_common>:
 800d100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	4616      	mov	r6, r2
 800d106:	4698      	mov	r8, r3
 800d108:	688a      	ldr	r2, [r1, #8]
 800d10a:	690b      	ldr	r3, [r1, #16]
 800d10c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d110:	4293      	cmp	r3, r2
 800d112:	bfb8      	it	lt
 800d114:	4613      	movlt	r3, r2
 800d116:	6033      	str	r3, [r6, #0]
 800d118:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d11c:	4607      	mov	r7, r0
 800d11e:	460c      	mov	r4, r1
 800d120:	b10a      	cbz	r2, 800d126 <_printf_common+0x26>
 800d122:	3301      	adds	r3, #1
 800d124:	6033      	str	r3, [r6, #0]
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	0699      	lsls	r1, r3, #26
 800d12a:	bf42      	ittt	mi
 800d12c:	6833      	ldrmi	r3, [r6, #0]
 800d12e:	3302      	addmi	r3, #2
 800d130:	6033      	strmi	r3, [r6, #0]
 800d132:	6825      	ldr	r5, [r4, #0]
 800d134:	f015 0506 	ands.w	r5, r5, #6
 800d138:	d106      	bne.n	800d148 <_printf_common+0x48>
 800d13a:	f104 0a19 	add.w	sl, r4, #25
 800d13e:	68e3      	ldr	r3, [r4, #12]
 800d140:	6832      	ldr	r2, [r6, #0]
 800d142:	1a9b      	subs	r3, r3, r2
 800d144:	42ab      	cmp	r3, r5
 800d146:	dc26      	bgt.n	800d196 <_printf_common+0x96>
 800d148:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d14c:	6822      	ldr	r2, [r4, #0]
 800d14e:	3b00      	subs	r3, #0
 800d150:	bf18      	it	ne
 800d152:	2301      	movne	r3, #1
 800d154:	0692      	lsls	r2, r2, #26
 800d156:	d42b      	bmi.n	800d1b0 <_printf_common+0xb0>
 800d158:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d15c:	4641      	mov	r1, r8
 800d15e:	4638      	mov	r0, r7
 800d160:	47c8      	blx	r9
 800d162:	3001      	adds	r0, #1
 800d164:	d01e      	beq.n	800d1a4 <_printf_common+0xa4>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	6922      	ldr	r2, [r4, #16]
 800d16a:	f003 0306 	and.w	r3, r3, #6
 800d16e:	2b04      	cmp	r3, #4
 800d170:	bf02      	ittt	eq
 800d172:	68e5      	ldreq	r5, [r4, #12]
 800d174:	6833      	ldreq	r3, [r6, #0]
 800d176:	1aed      	subeq	r5, r5, r3
 800d178:	68a3      	ldr	r3, [r4, #8]
 800d17a:	bf0c      	ite	eq
 800d17c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d180:	2500      	movne	r5, #0
 800d182:	4293      	cmp	r3, r2
 800d184:	bfc4      	itt	gt
 800d186:	1a9b      	subgt	r3, r3, r2
 800d188:	18ed      	addgt	r5, r5, r3
 800d18a:	2600      	movs	r6, #0
 800d18c:	341a      	adds	r4, #26
 800d18e:	42b5      	cmp	r5, r6
 800d190:	d11a      	bne.n	800d1c8 <_printf_common+0xc8>
 800d192:	2000      	movs	r0, #0
 800d194:	e008      	b.n	800d1a8 <_printf_common+0xa8>
 800d196:	2301      	movs	r3, #1
 800d198:	4652      	mov	r2, sl
 800d19a:	4641      	mov	r1, r8
 800d19c:	4638      	mov	r0, r7
 800d19e:	47c8      	blx	r9
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d103      	bne.n	800d1ac <_printf_common+0xac>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ac:	3501      	adds	r5, #1
 800d1ae:	e7c6      	b.n	800d13e <_printf_common+0x3e>
 800d1b0:	18e1      	adds	r1, r4, r3
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	2030      	movs	r0, #48	@ 0x30
 800d1b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1ba:	4422      	add	r2, r4
 800d1bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1c4:	3302      	adds	r3, #2
 800d1c6:	e7c7      	b.n	800d158 <_printf_common+0x58>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	4641      	mov	r1, r8
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	47c8      	blx	r9
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	d0e6      	beq.n	800d1a4 <_printf_common+0xa4>
 800d1d6:	3601      	adds	r6, #1
 800d1d8:	e7d9      	b.n	800d18e <_printf_common+0x8e>
	...

0800d1dc <_printf_i>:
 800d1dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e0:	7e0f      	ldrb	r7, [r1, #24]
 800d1e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1e4:	2f78      	cmp	r7, #120	@ 0x78
 800d1e6:	4691      	mov	r9, r2
 800d1e8:	4680      	mov	r8, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	469a      	mov	sl, r3
 800d1ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d1f2:	d807      	bhi.n	800d204 <_printf_i+0x28>
 800d1f4:	2f62      	cmp	r7, #98	@ 0x62
 800d1f6:	d80a      	bhi.n	800d20e <_printf_i+0x32>
 800d1f8:	2f00      	cmp	r7, #0
 800d1fa:	f000 80d2 	beq.w	800d3a2 <_printf_i+0x1c6>
 800d1fe:	2f58      	cmp	r7, #88	@ 0x58
 800d200:	f000 80b9 	beq.w	800d376 <_printf_i+0x19a>
 800d204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d208:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d20c:	e03a      	b.n	800d284 <_printf_i+0xa8>
 800d20e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d212:	2b15      	cmp	r3, #21
 800d214:	d8f6      	bhi.n	800d204 <_printf_i+0x28>
 800d216:	a101      	add	r1, pc, #4	@ (adr r1, 800d21c <_printf_i+0x40>)
 800d218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d21c:	0800d275 	.word	0x0800d275
 800d220:	0800d289 	.word	0x0800d289
 800d224:	0800d205 	.word	0x0800d205
 800d228:	0800d205 	.word	0x0800d205
 800d22c:	0800d205 	.word	0x0800d205
 800d230:	0800d205 	.word	0x0800d205
 800d234:	0800d289 	.word	0x0800d289
 800d238:	0800d205 	.word	0x0800d205
 800d23c:	0800d205 	.word	0x0800d205
 800d240:	0800d205 	.word	0x0800d205
 800d244:	0800d205 	.word	0x0800d205
 800d248:	0800d389 	.word	0x0800d389
 800d24c:	0800d2b3 	.word	0x0800d2b3
 800d250:	0800d343 	.word	0x0800d343
 800d254:	0800d205 	.word	0x0800d205
 800d258:	0800d205 	.word	0x0800d205
 800d25c:	0800d3ab 	.word	0x0800d3ab
 800d260:	0800d205 	.word	0x0800d205
 800d264:	0800d2b3 	.word	0x0800d2b3
 800d268:	0800d205 	.word	0x0800d205
 800d26c:	0800d205 	.word	0x0800d205
 800d270:	0800d34b 	.word	0x0800d34b
 800d274:	6833      	ldr	r3, [r6, #0]
 800d276:	1d1a      	adds	r2, r3, #4
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6032      	str	r2, [r6, #0]
 800d27c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d280:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d284:	2301      	movs	r3, #1
 800d286:	e09d      	b.n	800d3c4 <_printf_i+0x1e8>
 800d288:	6833      	ldr	r3, [r6, #0]
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	1d19      	adds	r1, r3, #4
 800d28e:	6031      	str	r1, [r6, #0]
 800d290:	0606      	lsls	r6, r0, #24
 800d292:	d501      	bpl.n	800d298 <_printf_i+0xbc>
 800d294:	681d      	ldr	r5, [r3, #0]
 800d296:	e003      	b.n	800d2a0 <_printf_i+0xc4>
 800d298:	0645      	lsls	r5, r0, #25
 800d29a:	d5fb      	bpl.n	800d294 <_printf_i+0xb8>
 800d29c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2a0:	2d00      	cmp	r5, #0
 800d2a2:	da03      	bge.n	800d2ac <_printf_i+0xd0>
 800d2a4:	232d      	movs	r3, #45	@ 0x2d
 800d2a6:	426d      	negs	r5, r5
 800d2a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2ac:	4859      	ldr	r0, [pc, #356]	@ (800d414 <_printf_i+0x238>)
 800d2ae:	230a      	movs	r3, #10
 800d2b0:	e011      	b.n	800d2d6 <_printf_i+0xfa>
 800d2b2:	6821      	ldr	r1, [r4, #0]
 800d2b4:	6833      	ldr	r3, [r6, #0]
 800d2b6:	0608      	lsls	r0, r1, #24
 800d2b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2bc:	d402      	bmi.n	800d2c4 <_printf_i+0xe8>
 800d2be:	0649      	lsls	r1, r1, #25
 800d2c0:	bf48      	it	mi
 800d2c2:	b2ad      	uxthmi	r5, r5
 800d2c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2c6:	4853      	ldr	r0, [pc, #332]	@ (800d414 <_printf_i+0x238>)
 800d2c8:	6033      	str	r3, [r6, #0]
 800d2ca:	bf14      	ite	ne
 800d2cc:	230a      	movne	r3, #10
 800d2ce:	2308      	moveq	r3, #8
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d2d6:	6866      	ldr	r6, [r4, #4]
 800d2d8:	60a6      	str	r6, [r4, #8]
 800d2da:	2e00      	cmp	r6, #0
 800d2dc:	bfa2      	ittt	ge
 800d2de:	6821      	ldrge	r1, [r4, #0]
 800d2e0:	f021 0104 	bicge.w	r1, r1, #4
 800d2e4:	6021      	strge	r1, [r4, #0]
 800d2e6:	b90d      	cbnz	r5, 800d2ec <_printf_i+0x110>
 800d2e8:	2e00      	cmp	r6, #0
 800d2ea:	d04b      	beq.n	800d384 <_printf_i+0x1a8>
 800d2ec:	4616      	mov	r6, r2
 800d2ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2f2:	fb03 5711 	mls	r7, r3, r1, r5
 800d2f6:	5dc7      	ldrb	r7, [r0, r7]
 800d2f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2fc:	462f      	mov	r7, r5
 800d2fe:	42bb      	cmp	r3, r7
 800d300:	460d      	mov	r5, r1
 800d302:	d9f4      	bls.n	800d2ee <_printf_i+0x112>
 800d304:	2b08      	cmp	r3, #8
 800d306:	d10b      	bne.n	800d320 <_printf_i+0x144>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	07df      	lsls	r7, r3, #31
 800d30c:	d508      	bpl.n	800d320 <_printf_i+0x144>
 800d30e:	6923      	ldr	r3, [r4, #16]
 800d310:	6861      	ldr	r1, [r4, #4]
 800d312:	4299      	cmp	r1, r3
 800d314:	bfde      	ittt	le
 800d316:	2330      	movle	r3, #48	@ 0x30
 800d318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d31c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d320:	1b92      	subs	r2, r2, r6
 800d322:	6122      	str	r2, [r4, #16]
 800d324:	f8cd a000 	str.w	sl, [sp]
 800d328:	464b      	mov	r3, r9
 800d32a:	aa03      	add	r2, sp, #12
 800d32c:	4621      	mov	r1, r4
 800d32e:	4640      	mov	r0, r8
 800d330:	f7ff fee6 	bl	800d100 <_printf_common>
 800d334:	3001      	adds	r0, #1
 800d336:	d14a      	bne.n	800d3ce <_printf_i+0x1f2>
 800d338:	f04f 30ff 	mov.w	r0, #4294967295
 800d33c:	b004      	add	sp, #16
 800d33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	f043 0320 	orr.w	r3, r3, #32
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	4833      	ldr	r0, [pc, #204]	@ (800d418 <_printf_i+0x23c>)
 800d34c:	2778      	movs	r7, #120	@ 0x78
 800d34e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	6831      	ldr	r1, [r6, #0]
 800d356:	061f      	lsls	r7, r3, #24
 800d358:	f851 5b04 	ldr.w	r5, [r1], #4
 800d35c:	d402      	bmi.n	800d364 <_printf_i+0x188>
 800d35e:	065f      	lsls	r7, r3, #25
 800d360:	bf48      	it	mi
 800d362:	b2ad      	uxthmi	r5, r5
 800d364:	6031      	str	r1, [r6, #0]
 800d366:	07d9      	lsls	r1, r3, #31
 800d368:	bf44      	itt	mi
 800d36a:	f043 0320 	orrmi.w	r3, r3, #32
 800d36e:	6023      	strmi	r3, [r4, #0]
 800d370:	b11d      	cbz	r5, 800d37a <_printf_i+0x19e>
 800d372:	2310      	movs	r3, #16
 800d374:	e7ac      	b.n	800d2d0 <_printf_i+0xf4>
 800d376:	4827      	ldr	r0, [pc, #156]	@ (800d414 <_printf_i+0x238>)
 800d378:	e7e9      	b.n	800d34e <_printf_i+0x172>
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	f023 0320 	bic.w	r3, r3, #32
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	e7f6      	b.n	800d372 <_printf_i+0x196>
 800d384:	4616      	mov	r6, r2
 800d386:	e7bd      	b.n	800d304 <_printf_i+0x128>
 800d388:	6833      	ldr	r3, [r6, #0]
 800d38a:	6825      	ldr	r5, [r4, #0]
 800d38c:	6961      	ldr	r1, [r4, #20]
 800d38e:	1d18      	adds	r0, r3, #4
 800d390:	6030      	str	r0, [r6, #0]
 800d392:	062e      	lsls	r6, r5, #24
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	d501      	bpl.n	800d39c <_printf_i+0x1c0>
 800d398:	6019      	str	r1, [r3, #0]
 800d39a:	e002      	b.n	800d3a2 <_printf_i+0x1c6>
 800d39c:	0668      	lsls	r0, r5, #25
 800d39e:	d5fb      	bpl.n	800d398 <_printf_i+0x1bc>
 800d3a0:	8019      	strh	r1, [r3, #0]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6123      	str	r3, [r4, #16]
 800d3a6:	4616      	mov	r6, r2
 800d3a8:	e7bc      	b.n	800d324 <_printf_i+0x148>
 800d3aa:	6833      	ldr	r3, [r6, #0]
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	6032      	str	r2, [r6, #0]
 800d3b0:	681e      	ldr	r6, [r3, #0]
 800d3b2:	6862      	ldr	r2, [r4, #4]
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7f2 ff32 	bl	8000220 <memchr>
 800d3bc:	b108      	cbz	r0, 800d3c2 <_printf_i+0x1e6>
 800d3be:	1b80      	subs	r0, r0, r6
 800d3c0:	6060      	str	r0, [r4, #4]
 800d3c2:	6863      	ldr	r3, [r4, #4]
 800d3c4:	6123      	str	r3, [r4, #16]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3cc:	e7aa      	b.n	800d324 <_printf_i+0x148>
 800d3ce:	6923      	ldr	r3, [r4, #16]
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	47d0      	blx	sl
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d0ad      	beq.n	800d338 <_printf_i+0x15c>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	079b      	lsls	r3, r3, #30
 800d3e0:	d413      	bmi.n	800d40a <_printf_i+0x22e>
 800d3e2:	68e0      	ldr	r0, [r4, #12]
 800d3e4:	9b03      	ldr	r3, [sp, #12]
 800d3e6:	4298      	cmp	r0, r3
 800d3e8:	bfb8      	it	lt
 800d3ea:	4618      	movlt	r0, r3
 800d3ec:	e7a6      	b.n	800d33c <_printf_i+0x160>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	4649      	mov	r1, r9
 800d3f4:	4640      	mov	r0, r8
 800d3f6:	47d0      	blx	sl
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	d09d      	beq.n	800d338 <_printf_i+0x15c>
 800d3fc:	3501      	adds	r5, #1
 800d3fe:	68e3      	ldr	r3, [r4, #12]
 800d400:	9903      	ldr	r1, [sp, #12]
 800d402:	1a5b      	subs	r3, r3, r1
 800d404:	42ab      	cmp	r3, r5
 800d406:	dcf2      	bgt.n	800d3ee <_printf_i+0x212>
 800d408:	e7eb      	b.n	800d3e2 <_printf_i+0x206>
 800d40a:	2500      	movs	r5, #0
 800d40c:	f104 0619 	add.w	r6, r4, #25
 800d410:	e7f5      	b.n	800d3fe <_printf_i+0x222>
 800d412:	bf00      	nop
 800d414:	08014195 	.word	0x08014195
 800d418:	080141a6 	.word	0x080141a6

0800d41c <memmove>:
 800d41c:	4288      	cmp	r0, r1
 800d41e:	b510      	push	{r4, lr}
 800d420:	eb01 0402 	add.w	r4, r1, r2
 800d424:	d902      	bls.n	800d42c <memmove+0x10>
 800d426:	4284      	cmp	r4, r0
 800d428:	4623      	mov	r3, r4
 800d42a:	d807      	bhi.n	800d43c <memmove+0x20>
 800d42c:	1e43      	subs	r3, r0, #1
 800d42e:	42a1      	cmp	r1, r4
 800d430:	d008      	beq.n	800d444 <memmove+0x28>
 800d432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d43a:	e7f8      	b.n	800d42e <memmove+0x12>
 800d43c:	4402      	add	r2, r0
 800d43e:	4601      	mov	r1, r0
 800d440:	428a      	cmp	r2, r1
 800d442:	d100      	bne.n	800d446 <memmove+0x2a>
 800d444:	bd10      	pop	{r4, pc}
 800d446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d44a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d44e:	e7f7      	b.n	800d440 <memmove+0x24>

0800d450 <_sbrk_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d06      	ldr	r5, [pc, #24]	@ (800d46c <_sbrk_r+0x1c>)
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	602b      	str	r3, [r5, #0]
 800d45c:	f7f8 fed2 	bl	8006204 <_sbrk>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_sbrk_r+0x1a>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	b103      	cbz	r3, 800d46a <_sbrk_r+0x1a>
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	2001ceb4 	.word	0x2001ceb4

0800d470 <memcpy>:
 800d470:	440a      	add	r2, r1
 800d472:	4291      	cmp	r1, r2
 800d474:	f100 33ff 	add.w	r3, r0, #4294967295
 800d478:	d100      	bne.n	800d47c <memcpy+0xc>
 800d47a:	4770      	bx	lr
 800d47c:	b510      	push	{r4, lr}
 800d47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d482:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d486:	4291      	cmp	r1, r2
 800d488:	d1f9      	bne.n	800d47e <memcpy+0xe>
 800d48a:	bd10      	pop	{r4, pc}

0800d48c <_realloc_r>:
 800d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d490:	4680      	mov	r8, r0
 800d492:	4615      	mov	r5, r2
 800d494:	460c      	mov	r4, r1
 800d496:	b921      	cbnz	r1, 800d4a2 <_realloc_r+0x16>
 800d498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d49c:	4611      	mov	r1, r2
 800d49e:	f7ff bc4b 	b.w	800cd38 <_malloc_r>
 800d4a2:	b92a      	cbnz	r2, 800d4b0 <_realloc_r+0x24>
 800d4a4:	f7ff fbdc 	bl	800cc60 <_free_r>
 800d4a8:	2400      	movs	r4, #0
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b0:	f000 f81a 	bl	800d4e8 <_malloc_usable_size_r>
 800d4b4:	4285      	cmp	r5, r0
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	d802      	bhi.n	800d4c0 <_realloc_r+0x34>
 800d4ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4be:	d8f4      	bhi.n	800d4aa <_realloc_r+0x1e>
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	f7ff fc38 	bl	800cd38 <_malloc_r>
 800d4c8:	4607      	mov	r7, r0
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d0ec      	beq.n	800d4a8 <_realloc_r+0x1c>
 800d4ce:	42b5      	cmp	r5, r6
 800d4d0:	462a      	mov	r2, r5
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	bf28      	it	cs
 800d4d6:	4632      	movcs	r2, r6
 800d4d8:	f7ff ffca 	bl	800d470 <memcpy>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f7ff fbbe 	bl	800cc60 <_free_r>
 800d4e4:	463c      	mov	r4, r7
 800d4e6:	e7e0      	b.n	800d4aa <_realloc_r+0x1e>

0800d4e8 <_malloc_usable_size_r>:
 800d4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ec:	1f18      	subs	r0, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bfbc      	itt	lt
 800d4f2:	580b      	ldrlt	r3, [r1, r0]
 800d4f4:	18c0      	addlt	r0, r0, r3
 800d4f6:	4770      	bx	lr

0800d4f8 <_init>:
 800d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fa:	bf00      	nop
 800d4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fe:	bc08      	pop	{r3}
 800d500:	469e      	mov	lr, r3
 800d502:	4770      	bx	lr

0800d504 <_fini>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	bf00      	nop
 800d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50a:	bc08      	pop	{r3}
 800d50c:	469e      	mov	lr, r3
 800d50e:	4770      	bx	lr
