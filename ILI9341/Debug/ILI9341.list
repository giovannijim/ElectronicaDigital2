
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c68  08004c68  00012e7c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c68  08004c68  00005c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c70  08004c70  00012e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c70  08004c70  00005c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c74  08004c74  00005c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000ce7c  20000000  08004c78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000ce7c  08011af4  00012e7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d07c  08011af4  0001307c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012e7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b938  00000000  00000000  00012eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d62  00000000  00000000  0001e7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00020548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  00020f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020739  00000000  00000000  00021726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4e8  00000000  00000000  00041e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfa2  00000000  00000000  0004f347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b2e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  0011b32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0011dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000ce7c 	.word	0x2000ce7c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004c38 	.word	0x08004c38

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000ce80 	.word	0x2000ce80
 8000204:	08004c38 	.word	0x08004c38

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f002 fbe9 	bl	80030f0 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f002 fbe4 	bl	80030f0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f002 fbdf 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f002 f880 	bl	8002a38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f002 fbd7 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000942:	2014      	movs	r0, #20
 8000944:	f002 f878 	bl	8002a38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f002 fbcf 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f002 f870 	bl	8002a38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f002 fbc7 	bl	80030f0 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x20);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f002 f85f 	bl	8002a38 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x71);
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x19);
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x07);
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x10);
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x01);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x44);
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x67);
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x06);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x24);
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x37);
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x40);
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x03);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x80);
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x3F);
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0xE0);
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f001 ffae 	bl	8002a38 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f001 ffa8 	bl	8002a38 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f002 fafc 	bl	80030f0 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f002 faea 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f002 fae5 	bl	80030f0 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f002 fada 	bl	80030f0 <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f002 fad3 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f002 fac9 	bl	80030f0 <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f002 fac3 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f002 fab8 	bl	80030f0 <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f002 fab1 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f002 faa7 	bl	80030f0 <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f002 faa1 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f002 fa97 	bl	80030f0 <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f002 fa91 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f002 fa87 	bl	80030f0 <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f002 fa81 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f002 fa76 	bl	80030f0 <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f002 fa6f 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f002 fa65 	bl	80030f0 <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f002 fa5e 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f002 fa59 	bl	80030f0 <HAL_GPIO_WritePin>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f002 fa44 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f002 fa3f 	bl	80030f0 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f002 fa34 	bl	80030f0 <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f002 fa2d 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f002 fa23 	bl	80030f0 <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f002 fa1d 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f002 fa12 	bl	80030f0 <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f002 fa0b 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f002 fa01 	bl	80030f0 <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f002 f9fb 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f002 f9f1 	bl	80030f0 <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f002 f9eb 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f002 f9e1 	bl	80030f0 <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f002 f9db 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f002 f9d0 	bl	80030f0 <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f002 f9c9 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f002 f9bf 	bl	80030f0 <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f002 f9b8 	bl	80030f0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f002 f9b3 	bl	80030f0 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y1);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f002 f95c 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f002 f957 	bl	80030f0 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f002 f92d 	bl	80030f0 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <H_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <H_line+0x78>)
 8000ec2:	f002 f915 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <H_line+0x7c>)
 8000ecc:	f002 f910 	bl	80030f0 <HAL_GPIO_WritePin>
	l = l + x;
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff5e 	bl	8000da0 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00d      	b.n	8000f06 <H_line+0x5e>
		LCD_DATA(c >> 8);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feaf 	bl	8000c54 <LCD_DATA>
		LCD_DATA(c);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feaa 	bl	8000c54 <LCD_DATA>
	for (i = 0; i < l; i++) {
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3ed      	bcc.n	8000eea <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <H_line+0x7c>)
 8000f14:	f002 f8ec 	bl	80030f0 <HAL_GPIO_WritePin>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400

08000f28 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000f36:	202c      	movs	r0, #44	@ 0x2c
 8000f38:	f7ff fde6 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <V_line+0x78>)
 8000f42:	f002 f8d5 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <V_line+0x7c>)
 8000f4c:	f002 f8d0 	bl	80030f0 <HAL_GPIO_WritePin>
	l = l + y;
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ff1e 	bl	8000da0 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00d      	b.n	8000f86 <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe6f 	bl	8000c54 <LCD_DATA>
		LCD_DATA(c);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe6a 	bl	8000c54 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d9ed      	bls.n	8000f6a <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <V_line+0x7c>)
 8000f94:	f002 f8ac 	bl	80030f0 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Rect>:
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	H_line(x, y, w, c);
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff73 	bl	8000ea8 <H_line>
	H_line(x, y + h, w, c);
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	18d1      	adds	r1, r2, r3
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ff6b 	bl	8000ea8 <H_line>
	V_line(x, y, h, c);
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ffa5 	bl	8000f28 <V_line>
	V_line(x + w, y, h, c);
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f7ff ff9d 	bl	8000f28 <V_line>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001006:	202c      	movs	r0, #44	@ 0x2c
 8001008:	f7ff fd7e 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <FillRect+0xac>)
 8001012:	f002 f86d 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <FillRect+0xb0>)
 800101c:	f002 f868 	bl	80030f0 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3b01      	subs	r3, #1
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff feb0 	bl	8000da0 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e01a      	b.n	800108a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e010      	b.n	800107c <FillRect+0x84>
			LCD_DATA(c >> 8);
 800105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdf7 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8001066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fdf2 	bl	8000c54 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	3b02      	subs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8ea      	bhi.n	800105a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	3301      	adds	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8e0      	bhi.n	8001054 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <FillRect+0xb0>)
 8001098:	f002 f82a 	bl	80030f0 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <LCD_Sprite>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80010ba:	202c      	movs	r0, #44	@ 0x2c
 80010bc:	f7ff fd24 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	484d      	ldr	r0, [pc, #308]	@ (80011fc <LCD_Sprite+0x150>)
 80010c6:	f002 f813 	bl	80030f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	484c      	ldr	r0, [pc, #304]	@ (8001200 <LCD_Sprite+0x154>)
 80010d0:	f002 f80e 	bl	80030f0 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f7ff fe56 	bl	8000da0 <SetWindows>
	int k = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	613b      	str	r3, [r7, #16]
	if (flip) {
 8001102:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001106:	2b00      	cmp	r3, #0
 8001108:	d03a      	beq.n	8001180 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800110e:	e032      	b.n	8001176 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8001110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	fb03 f202 	mul.w	r2, r3, r2
 8001118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001134:	4413      	add	r3, r2
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
 800113c:	e014      	b.n	8001168 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 800113e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd84 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 800114c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114e:	3301      	adds	r3, #1
 8001150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd7c 	bl	8000c54 <LCD_DATA>
				k = k - 2;
 800115c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115e:	3b02      	subs	r3, #2
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	3301      	adds	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
 8001168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbe6      	blt.n	800113e <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001172:	3301      	adds	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbc8      	blt.n	8001110 <LCD_Sprite+0x64>
 800117e:	e034      	b.n	80011ea <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	e02d      	b.n	80011e2 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	fb03 f202 	mul.w	r2, r3, r2
 800118e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	4413      	add	r3, r2
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	e014      	b.n	80011d4 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 80011aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd4e 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 80011b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ba:	3301      	adds	r3, #1
 80011bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fd46 	bl	8000c54 <LCD_DATA>
				k = k + 2;
 80011c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ca:	3302      	adds	r3, #2
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbe6      	blt.n	80011aa <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	3301      	adds	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	6a3a      	ldr	r2, [r7, #32]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbcd      	blt.n	8001186 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2101      	movs	r1, #1
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <LCD_Sprite+0x154>)
 80011f0:	f001 ff7e 	bl	80030f0 <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	00000000 	.word	0x00000000

08001208 <animation_e1_control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Funciones Enemigo tipo 1
void animation_e1_control(enemy_type1* enemy){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 3a90 	vmov	r3, s15
 800122e:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d131      	bne.n	800129c <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b04      	cmp	r3, #4
 800123c:	dd1b      	ble.n	8001276 <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	dc13      	bgt.n	800126c <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f941 	bl	80004d0 <__aeabi_f2d>
 800124e:	a316      	add	r3, pc, #88	@ (adr r3, 80012a8 <animation_e1_control+0xa0>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7fe ffde 	bl	8000214 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff f98e 	bl	8000580 <__aeabi_d2f>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 800126a:	e017      	b.n	800129c <animation_e1_control+0x94>
				enemy->animationV=0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001274:	e012      	b.n	800129c <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f928 	bl	80004d0 <__aeabi_f2d>
 8001280:	a309      	add	r3, pc, #36	@ (adr r3, 80012a8 <animation_e1_control+0xa0>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7fe ffc5 	bl	8000214 <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff f975 	bl	8000580 <__aeabi_d2f>
 8001296:	4602      	mov	r2, r0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	9999999a 	.word	0x9999999a
 80012ac:	3fb99999 	.word	0x3fb99999

080012b0 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b08b      	sub	sp, #44	@ 0x2c
 80012b4:	af06      	add	r7, sp, #24
 80012b6:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c2:	ee17 3a90 	vmov	r3, s15
 80012c6:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d2:	ee17 3a90 	vmov	r3, s15
 80012d6:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	f040 80a6 	bne.w	800142e <animation_e1+0x17e>
		if (variableAnimationDV>4){
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	f340 80a2 	ble.w	800142e <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3b06      	subs	r3, #6
 80012f0:	4618      	mov	r0, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	3b09      	subs	r3, #9
 80012f8:	4619      	mov	r1, r3
 80012fa:	2300      	movs	r3, #0
 80012fc:	9304      	str	r3, [sp, #16]
 80012fe:	2300      	movs	r3, #0
 8001300:	9303      	str	r3, [sp, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2310      	movs	r3, #16
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	4b4b      	ldr	r3, [pc, #300]	@ (8001438 <animation_e1+0x188>)
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2313      	movs	r3, #19
 8001310:	2210      	movs	r2, #16
 8001312:	f7ff fecb 	bl	80010ac <LCD_Sprite>
		    if (DrawHitbox==1){
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <animation_e1+0x18c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d113      	bne.n	8001346 <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	085b      	lsrs	r3, r3, #1
 8001328:	1ad0      	subs	r0, r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	1ad1      	subs	r1, r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2400      	movs	r4, #0
 8001340:	9400      	str	r4, [sp, #0]
 8001342:	f7ff fe31 	bl	8000fa8 <Rect>
		    }
		    if (DrawHitbox==2){
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <animation_e1+0x18c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d12b      	bne.n	80013a6 <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6998      	ldr	r0, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2201      	movs	r2, #1
 8001360:	f7ff fe4a 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69d8      	ldr	r0, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	2201      	movs	r2, #1
 8001376:	f7ff fe3f 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a19      	ldr	r1, [r3, #32]
 8001382:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	2201      	movs	r2, #1
 800138c:	f7ff fe34 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001398:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	2201      	movs	r2, #1
 80013a2:	f7ff fe29 	bl	8000ff8 <FillRect>
		    }
		    if (DrawHitbox==3){
 80013a6:	4b25      	ldr	r3, [pc, #148]	@ (800143c <animation_e1+0x18c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d13f      	bne.n	800142e <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	1ad0      	subs	r0, r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	1ad1      	subs	r1, r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2400      	movs	r4, #0
 80013d0:	9400      	str	r4, [sp, #0]
 80013d2:	f7ff fde9 	bl	8000fa8 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6998      	ldr	r0, [r3, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6859      	ldr	r1, [r3, #4]
 80013de:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	2201      	movs	r2, #1
 80013e8:	f7ff fe06 	bl	8000ff8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69d8      	ldr	r0, [r3, #28]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2201      	movs	r2, #1
 80013fe:	f7ff fdfb 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a19      	ldr	r1, [r3, #32]
 800140a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2301      	movs	r3, #1
 8001412:	2201      	movs	r2, #1
 8001414:	f7ff fdf0 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001420:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	2201      	movs	r2, #1
 800142a:	f7ff fde5 	bl	8000ff8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	20003a98 	.word	0x20003a98
 800143c:	2000d076 	.word	0x2000d076

08001440 <initEnemy1>:


void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af06      	add	r7, sp, #24
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a3a      	ldr	r2, [r7, #32]
 8001464:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800146a:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4a63      	ldr	r2, [pc, #396]	@ (800160c <initEnemy1+0x1cc>)
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	441a      	add	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	1ad2      	subs	r2, r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	441a      	add	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3b08      	subs	r3, #8
 80014c6:	4618      	mov	r0, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	3b09      	subs	r3, #9
 80014ce:	4619      	mov	r1, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9303      	str	r3, [sp, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2310      	movs	r3, #16
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <initEnemy1+0x1d0>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2313      	movs	r3, #19
 80014e6:	2210      	movs	r2, #16
 80014e8:	f7ff fde0 	bl	80010ac <LCD_Sprite>

    if (DrawHitbox==1){
 80014ec:	4b49      	ldr	r3, [pc, #292]	@ (8001614 <initEnemy1+0x1d4>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d113      	bne.n	800151c <initEnemy1+0xdc>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	1ad0      	subs	r0, r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	1ad1      	subs	r1, r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2400      	movs	r4, #0
 8001516:	9400      	str	r4, [sp, #0]
 8001518:	f7ff fd46 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 800151c:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <initEnemy1+0x1d4>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d12b      	bne.n	800157c <initEnemy1+0x13c>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6998      	ldr	r0, [r3, #24]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	2201      	movs	r2, #1
 8001536:	f7ff fd5f 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	69d8      	ldr	r0, [r3, #28]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6859      	ldr	r1, [r3, #4]
 8001542:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	2201      	movs	r2, #1
 800154c:	f7ff fd54 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a19      	ldr	r1, [r3, #32]
 8001558:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	2201      	movs	r2, #1
 8001562:	f7ff fd49 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800156e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	2201      	movs	r2, #1
 8001578:	f7ff fd3e 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==2){
 800157c:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <initEnemy1+0x1d4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d13f      	bne.n	8001604 <initEnemy1+0x1c4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	1ad0      	subs	r0, r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	1ad1      	subs	r1, r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2400      	movs	r4, #0
 80015a6:	9400      	str	r4, [sp, #0]
 80015a8:	f7ff fcfe 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6998      	ldr	r0, [r3, #24]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd1b 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	69d8      	ldr	r0, [r3, #28]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	2201      	movs	r2, #1
 80015d4:	f7ff fd10 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a19      	ldr	r1, [r3, #32]
 80015e0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	2201      	movs	r2, #1
 80015ea:	f7ff fd05 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80015f6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	2201      	movs	r2, #1
 8001600:	f7ff fcfa 	bl	8000ff8 <FillRect>
        }



}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40a00000 	.word	0x40a00000
 8001610:	20003a98 	.word	0x20003a98
 8001614:	2000d076 	.word	0x2000d076

08001618 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int futureX, int futureY){
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af02      	add	r7, sp, #8
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	    switch (direction) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b03      	cmp	r3, #3
 800162a:	f200 811a 	bhi.w	8001862 <ColisionPlayer_e1+0x24a>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <ColisionPlayer_e1+0x1c>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001645 	.word	0x08001645
 8001638:	080016cd 	.word	0x080016cd
 800163c:	08001755 	.word	0x08001755
 8001640:	080017d5 	.word	0x080017d5
	        case 0: // Movimiento hacia abajo
	        	if (futureY >= enemy->e1Up && futureY<=enemy->e1Down && ((player->playerRight >= enemy->e1Left && player->playerRight <= enemy->e1Right)||(player->playerLeft <= enemy->e1Right && player->playerLeft >= enemy->e1Left))){
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	429a      	cmp	r2, r3
 800164c:	f200 8102 	bhi.w	8001854 <ColisionPlayer_e1+0x23c>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	429a      	cmp	r2, r3
 8001658:	f0c0 80fc 	bcc.w	8001854 <ColisionPlayer_e1+0x23c>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	429a      	cmp	r2, r3
 8001666:	d305      	bcc.n	8001674 <ColisionPlayer_e1+0x5c>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	429a      	cmp	r2, r3
 8001672:	d90d      	bls.n	8001690 <ColisionPlayer_e1+0x78>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	429a      	cmp	r2, r3
 800167e:	f200 80e9 	bhi.w	8001854 <ColisionPlayer_e1+0x23c>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	429a      	cmp	r2, r3
 800168c:	f0c0 80e2 	bcc.w	8001854 <ColisionPlayer_e1+0x23c>
	        		player->y -= player->speed;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	605a      	str	r2, [r3, #4]
	        		FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	1ad0      	subs	r0, r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	1ad1      	subs	r1, r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f44f 047f 	mov.w	r4, #16711680	@ 0xff0000
 80016c2:	9400      	str	r4, [sp, #0]
 80016c4:	f7ff fc98 	bl	8000ff8 <FillRect>
	        		return 0;  // Colisión con el enemigo
 80016c8:	2300      	movs	r3, #0
 80016ca:	e0ca      	b.n	8001862 <ColisionPlayer_e1+0x24a>
	        		}
	        	break;
	        case 1: //Movimiento hacia derecha
	        	if (futureX >= enemy->e1Left && futureX <= enemy->e1Right && ((player->playerUp<=enemy->e1Down && player->playerUp >= enemy->e1Up)||(player->playerDown<=enemy->e1Down && player->playerDown >= enemy->e1Up))){
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	f200 80c0 	bhi.w	8001858 <ColisionPlayer_e1+0x240>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	f0c0 80ba 	bcc.w	8001858 <ColisionPlayer_e1+0x240>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d805      	bhi.n	80016fc <ColisionPlayer_e1+0xe4>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d20d      	bcs.n	8001718 <ColisionPlayer_e1+0x100>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	429a      	cmp	r2, r3
 8001706:	f200 80a7 	bhi.w	8001858 <ColisionPlayer_e1+0x240>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	429a      	cmp	r2, r3
 8001714:	f0c0 80a0 	bcc.w	8001858 <ColisionPlayer_e1+0x240>
	        		player->x -=player->speed;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	601a      	str	r2, [r3, #0]
	        		FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	1ad0      	subs	r0, r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	1ad1      	subs	r1, r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f44f 047f 	mov.w	r4, #16711680	@ 0xff0000
 800174a:	9400      	str	r4, [sp, #0]
 800174c:	f7ff fc54 	bl	8000ff8 <FillRect>
	        		return 0;
 8001750:	2300      	movs	r3, #0
 8001752:	e086      	b.n	8001862 <ColisionPlayer_e1+0x24a>
	        		}
	        	break;
	        case 2: //Movimiento hacia arriba
	        	if (futureY <= enemy->e1Down && futureY>=enemy->e1Up && ((player->playerRight >= enemy->e1Left && player->playerRight <= enemy->e1Right)||(player->playerLeft <= enemy->e1Right && player->playerLeft >= enemy->e1Left))){
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	429a      	cmp	r2, r3
 800175c:	d37e      	bcc.n	800185c <ColisionPlayer_e1+0x244>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	429a      	cmp	r2, r3
 8001766:	d879      	bhi.n	800185c <ColisionPlayer_e1+0x244>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	429a      	cmp	r2, r3
 8001772:	d305      	bcc.n	8001780 <ColisionPlayer_e1+0x168>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	429a      	cmp	r2, r3
 800177e:	d90b      	bls.n	8001798 <ColisionPlayer_e1+0x180>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	429a      	cmp	r2, r3
 800178a:	d867      	bhi.n	800185c <ColisionPlayer_e1+0x244>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	429a      	cmp	r2, r3
 8001796:	d361      	bcc.n	800185c <ColisionPlayer_e1+0x244>
					player->y += player->speed;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	441a      	add	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	605a      	str	r2, [r3, #4]
					FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	1ad0      	subs	r0, r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	1ad1      	subs	r1, r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f44f 047f 	mov.w	r4, #16711680	@ 0xff0000
 80017ca:	9400      	str	r4, [sp, #0]
 80017cc:	f7ff fc14 	bl	8000ff8 <FillRect>
					return 0;  // Colisión con el enemigo
 80017d0:	2300      	movs	r3, #0
 80017d2:	e046      	b.n	8001862 <ColisionPlayer_e1+0x24a>
					}
	        	break;
	        case 3: //Movimiento hacia izquierda
	        	if (futureX <= enemy->e1Right && futureX >= enemy->e1Left && ((player->playerUp<=enemy->e1Down && player->playerUp >= enemy->e1Up)||(player->playerDown<=enemy->e1Down && player->playerDown >= enemy->e1Up))){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d340      	bcc.n	8001860 <ColisionPlayer_e1+0x248>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d83b      	bhi.n	8001860 <ColisionPlayer_e1+0x248>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d805      	bhi.n	8001800 <ColisionPlayer_e1+0x1e8>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d20b      	bcs.n	8001818 <ColisionPlayer_e1+0x200>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	429a      	cmp	r2, r3
 800180a:	d829      	bhi.n	8001860 <ColisionPlayer_e1+0x248>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	d323      	bcc.n	8001860 <ColisionPlayer_e1+0x248>
					player->x +=player->speed;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	441a      	add	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	601a      	str	r2, [r3, #0]
					FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	1ad0      	subs	r0, r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	1ad1      	subs	r1, r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f44f 047f 	mov.w	r4, #16711680	@ 0xff0000
 800184a:	9400      	str	r4, [sp, #0]
 800184c:	f7ff fbd4 	bl	8000ff8 <FillRect>
					return 0;
 8001850:	2300      	movs	r3, #0
 8001852:	e006      	b.n	8001862 <ColisionPlayer_e1+0x24a>
	        	break;
 8001854:	bf00      	nop
 8001856:	e004      	b.n	8001862 <ColisionPlayer_e1+0x24a>
	        	break;
 8001858:	bf00      	nop
 800185a:	e002      	b.n	8001862 <ColisionPlayer_e1+0x24a>
	        	break;
 800185c:	bf00      	nop
 800185e:	e000      	b.n	8001862 <ColisionPlayer_e1+0x24a>
					}
	        	break;
 8001860:	bf00      	nop
		return 1;
	    }
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop

0800186c <initPlayer>:

//Funciones Player
void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af06      	add	r7, sp, #24
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	611a      	str	r2, [r3, #16]
    player->life = life;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a3a      	ldr	r2, [r7, #32]
 800189c:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2202      	movs	r2, #2
 80018ae:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitHeight = limitHeight;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	651a      	str	r2, [r3, #80]	@ 0x50
    player->animationAttack=7;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4a23      	ldr	r2, [pc, #140]	@ (8001954 <initPlayer+0xe8>)
 80018c6:	655a      	str	r2, [r3, #84]	@ 0x54

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+1, player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3b08      	subs	r3, #8
 80018ce:	4618      	mov	r0, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	3b0b      	subs	r3, #11
 80018d6:	4619      	mov	r1, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	2300      	movs	r3, #0
 80018de:	9303      	str	r3, [sp, #12]
 80018e0:	2305      	movs	r3, #5
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	2306      	movs	r3, #6
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <initPlayer+0xec>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2317      	movs	r3, #23
 80018ee:	2212      	movs	r2, #18
 80018f0:	f7ff fbdc 	bl	80010ac <LCD_Sprite>
    FillRect(player->x , player->y, 1, 1, 0x000000);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	2201      	movs	r2, #1
 8001904:	f7ff fb78 	bl	8000ff8 <FillRect>

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerRight=(player->x+(player->width / 2)-1);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerUp=player->y-(player->height / 2);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	1ad2      	subs	r2, r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	635a      	str	r2, [r3, #52]	@ 0x34
    player->playerDown=(player->y+(player->height / 2)-1);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
    FillRect(player->playerRight , player->y, 1, 1, 0x0420); //Derecha
    FillRect(player->x , player->playerUp, 1, 1, 0xFFFFFF); //Arriba
    FillRect(player->x , player->playerDown, 1, 1, 0x0420); //Abajo*/


}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40e00000 	.word	0x40e00000
 8001958:	20000000 	.word	0x20000000

0800195c <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60bb      	str	r3, [r7, #8]

    // Calcular las nuevas coordenadas dependiendo de la dirección
    switch (direction) {
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d823      	bhi.n	80019c0 <playerCanMove+0x64>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <playerCanMove+0x24>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019a9 	.word	0x080019a9
 800198c:	080019b5 	.word	0x080019b5
        case 0:  // Abajo
            futureY += player->speed;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4413      	add	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
            break;
 800199a:	e011      	b.n	80019c0 <playerCanMove+0x64>
        case 1:  // Derecha
            futureX += player->speed;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
            break;
 80019a6:	e00b      	b.n	80019c0 <playerCanMove+0x64>
        case 2:  // Arriba
            futureY -= player->speed;
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	60bb      	str	r3, [r7, #8]
            break;
 80019b2:	e005      	b.n	80019c0 <playerCanMove+0x64>
        case 3:  // Izquierda
            futureX -= player->speed;
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	60fb      	str	r3, [r7, #12]
            break;
 80019be:	bf00      	nop
    }

    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	481f      	ldr	r0, [pc, #124]	@ (8001a48 <playerCanMove+0xec>)
 80019cc:	f7ff fe24 	bl	8001618 <ColisionPlayer_e1>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <playerCanMove+0x7e>
    	return 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e032      	b.n	8001a40 <playerCanMove+0xe4>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4819      	ldr	r0, [pc, #100]	@ (8001a4c <playerCanMove+0xf0>)
 80019e6:	f7ff fe17 	bl	8001618 <ColisionPlayer_e1>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <playerCanMove+0x98>
        	return 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e025      	b.n	8001a40 <playerCanMove+0xe4>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4814      	ldr	r0, [pc, #80]	@ (8001a50 <playerCanMove+0xf4>)
 8001a00:	f7ff fe0a 	bl	8001618 <ColisionPlayer_e1>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <playerCanMove+0xb2>
        	return 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e018      	b.n	8001a40 <playerCanMove+0xe4>
        }

    // Verificar colisiones con los bordes en base a la posición futura
    if (futureX <= 0) {
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	dc01      	bgt.n	8001a18 <playerCanMove+0xbc>
        return 0;  // Colisión con el borde izquierdo
 8001a14:	2300      	movs	r3, #0
 8001a16:	e013      	b.n	8001a40 <playerCanMove+0xe4>
    }
    if (futureX >= player->limitWidth) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d801      	bhi.n	8001a26 <playerCanMove+0xca>
        return 0;  // Colisión con el borde derecho
 8001a22:	2300      	movs	r3, #0
 8001a24:	e00c      	b.n	8001a40 <playerCanMove+0xe4>
    }
    if (futureY  <= 0) {
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dc01      	bgt.n	8001a30 <playerCanMove+0xd4>
        return 0;  // Colisión con el borde superior
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e007      	b.n	8001a40 <playerCanMove+0xe4>
    }
    if (futureY>= player->limitHeight) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d801      	bhi.n	8001a3e <playerCanMove+0xe2>
        return 0;  // Colisión con el borde inferior
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <playerCanMove+0xe4>
    }
    // No hay colisiones, se puede mover
    return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000cfe4 	.word	0x2000cfe4
 8001a4c:	2000d014 	.word	0x2000d014
 8001a50:	2000d044 	.word	0x2000d044

08001a54 <HitboxPlayer>:

void HitboxPlayer(player* player){
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerRight=(player->x+(player->width / 2)); //-1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	441a      	add	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerUp=player->y-(player->height / 2);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34
    player->playerDown=(player->y+(player->height / 2)); //-1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	441a      	add	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	631a      	str	r2, [r3, #48]	@ 0x30

    if (DrawHitbox==1){
 8001a9c:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <HitboxPlayer+0x168>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d113      	bne.n	8001acc <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	1ad0      	subs	r0, r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	1ad1      	subs	r1, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2400      	movs	r4, #0
 8001ac6:	9400      	str	r4, [sp, #0]
 8001ac8:	f7ff fa6e 	bl	8000fa8 <Rect>
        }
    if (DrawHitbox==2){
 8001acc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <HitboxPlayer+0x168>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d12b      	bne.n	8001b2c <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f7ff fa87 	bl	8000ff8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	2201      	movs	r2, #1
 8001afc:	f7ff fa7c 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b08:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2201      	movs	r2, #1
 8001b12:	f7ff fa71 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b1e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2301      	movs	r3, #1
 8001b26:	2201      	movs	r2, #1
 8001b28:	f7ff fa66 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8001b2c:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HitboxPlayer+0x168>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d13f      	bne.n	8001bb4 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	1ad0      	subs	r0, r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	1ad1      	subs	r1, r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2400      	movs	r4, #0
 8001b56:	9400      	str	r4, [sp, #0]
 8001b58:	f7ff fa26 	bl	8000fa8 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f7ff fa43 	bl	8000ff8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2201      	movs	r2, #1
 8001b84:	f7ff fa38 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b90:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f7ff fa2d 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ba6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f7ff fa22 	bl	8000ff8 <FillRect>

        }
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	2000d076 	.word	0x2000d076

08001bc0 <PlayerAnimation>:
						}
		}
	}
}

void PlayerAnimation(player* player){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af06      	add	r7, sp, #24
 8001bc6:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d16f      	bne.n	8001cb0 <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d117      	bne.n	8001c08 <PlayerAnimation+0x48>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8001bd8:	4b37      	ldr	r3, [pc, #220]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	4b35      	ldr	r3, [pc, #212]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	3b0d      	subs	r3, #13
 8001be6:	4619      	mov	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bec:	461a      	mov	r2, r3
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9304      	str	r3, [sp, #16]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9303      	str	r3, [sp, #12]
 8001bf6:	9202      	str	r2, [sp, #8]
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <PlayerAnimation+0xfc>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	231a      	movs	r3, #26
 8001c02:	2212      	movs	r2, #18
 8001c04:	f7ff fa52 	bl	80010ac <LCD_Sprite>
		}
		if (player->direction==1){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d117      	bne.n	8001c40 <PlayerAnimation+0x80>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3b0a      	subs	r3, #10
 8001c16:	4618      	mov	r0, r3
 8001c18:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	3b0b      	subs	r3, #11
 8001c1e:	4619      	mov	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	461a      	mov	r2, r3
 8001c26:	2300      	movs	r3, #0
 8001c28:	9304      	str	r3, [sp, #16]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	9202      	str	r2, [sp, #8]
 8001c30:	230a      	movs	r3, #10
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <PlayerAnimation+0x100>)
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2317      	movs	r3, #23
 8001c3a:	2216      	movs	r2, #22
 8001c3c:	f7ff fa36 	bl	80010ac <LCD_Sprite>
		}
		if (player->direction==2){
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d117      	bne.n	8001c78 <PlayerAnimation+0xb8>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3b08      	subs	r3, #8
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	3b0b      	subs	r3, #11
 8001c56:	4619      	mov	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9304      	str	r3, [sp, #16]
 8001c62:	2300      	movs	r3, #0
 8001c64:	9303      	str	r3, [sp, #12]
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	230a      	movs	r3, #10
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <PlayerAnimation+0x104>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2318      	movs	r3, #24
 8001c72:	2212      	movs	r2, #18
 8001c74:	f7ff fa1a 	bl	80010ac <LCD_Sprite>
			}
		if (player->direction==3){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d117      	bne.n	8001cb0 <PlayerAnimation+0xf0>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b0a      	subs	r3, #10
 8001c86:	4618      	mov	r0, r3
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <PlayerAnimation+0xf8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	3b0b      	subs	r3, #11
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	461a      	mov	r2, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	9304      	str	r3, [sp, #16]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9303      	str	r3, [sp, #12]
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	230a      	movs	r3, #10
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <PlayerAnimation+0x100>)
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2317      	movs	r3, #23
 8001caa:	2216      	movs	r2, #22
 8001cac:	f7ff f9fe 	bl	80010ac <LCD_Sprite>
			}
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000cf8c 	.word	0x2000cf8c
 8001cbc:	20008820 	.word	0x20008820
 8001cc0:	20006098 	.word	0x20006098
 8001cc4:	2000acb0 	.word	0x2000acb0

08001cc8 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af06      	add	r7, sp, #24
 8001cce:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cda:	ee17 3a90 	vmov	r3, s15
 8001cde:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	f040 8082 	bne.w	8001dee <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	dc7b      	bgt.n	8001de8 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d115      	bne.n	8001d24 <PlayerAttackAnimation+0x5c>

				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8001cf8:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b08      	subs	r3, #8
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	3b0b      	subs	r3, #11
 8001d06:	4619      	mov	r1, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9304      	str	r3, [sp, #16]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9303      	str	r3, [sp, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2306      	movs	r3, #6
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	4b3a      	ldr	r3, [pc, #232]	@ (8001e04 <PlayerAttackAnimation+0x13c>)
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2316      	movs	r3, #22
 8001d1e:	2212      	movs	r2, #18
 8001d20:	f7ff f9c4 	bl	80010ac <LCD_Sprite>
			}
			if (player->direction==1){
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d115      	bne.n	8001d58 <PlayerAttackAnimation+0x90>

				LCD_Sprite(p1.x - (20 / 2)+1, p1.y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);
 8001d2c:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3b09      	subs	r3, #9
 8001d32:	4618      	mov	r0, r3
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	3b0b      	subs	r3, #11
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9304      	str	r3, [sp, #16]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2306      	movs	r3, #6
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <PlayerAttackAnimation+0x140>)
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2316      	movs	r3, #22
 8001d52:	2214      	movs	r2, #20
 8001d54:	f7ff f9aa 	bl	80010ac <LCD_Sprite>
			}
			if (player->direction==2){
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d115      	bne.n	8001d8c <PlayerAttackAnimation+0xc4>

				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b08      	subs	r3, #8
 8001d66:	4618      	mov	r0, r3
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	3b0b      	subs	r3, #11
 8001d6e:	4619      	mov	r1, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	2300      	movs	r3, #0
 8001d76:	9303      	str	r3, [sp, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <PlayerAttackAnimation+0x144>)
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2317      	movs	r3, #23
 8001d86:	2212      	movs	r2, #18
 8001d88:	f7ff f990 	bl	80010ac <LCD_Sprite>
					}
			if (player->direction==3){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d115      	bne.n	8001dc0 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(p1.x - (20 / 2)+1, p1.y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3b09      	subs	r3, #9
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <PlayerAttackAnimation+0x138>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	3b0b      	subs	r3, #11
 8001da2:	4619      	mov	r1, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	9304      	str	r3, [sp, #16]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9303      	str	r3, [sp, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2306      	movs	r3, #6
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <PlayerAttackAnimation+0x140>)
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2316      	movs	r3, #22
 8001dba:	2214      	movs	r2, #20
 8001dbc:	f7ff f976 	bl	80010ac <LCD_Sprite>
					}
			player->animationAttack+=0.2;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb83 	bl	80004d0 <__aeabi_f2d>
 8001dca:	a30b      	add	r3, pc, #44	@ (adr r3, 8001df8 <PlayerAttackAnimation+0x130>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fa20 	bl	8000214 <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fbd0 	bl	8000580 <__aeabi_d2f>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	@ 0x54
			}else{
				player->IsAttack=0;
			}
		}
}
 8001de6:	e002      	b.n	8001dee <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	3fc99999 	.word	0x3fc99999
 8001e00:	2000cf8c 	.word	0x2000cf8c
 8001e04:	20002808 	.word	0x20002808
 8001e08:	20001368 	.word	0x20001368
 8001e0c:	20000000 	.word	0x20000000

08001e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8001e16:	f000 fd9d 	bl	8002954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1a:	f000 f887 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e1e:	f000 f97b 	bl	8002118 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e22:	f000 f8ef 	bl	8002004 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e26:	f000 f94d 	bl	80020c4 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8001e2a:	f000 f921 	bl	8002070 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8001e2e:	f7fe fd6f 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7fe fff4 	bl	8000e20 <LCD_Clear>

	//Fondo
	FillRect(0, 0, 319, 239, 0xFFFF);
 8001e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	23ef      	movs	r3, #239	@ 0xef
 8001e40:	f240 123f 	movw	r2, #319	@ 0x13f
 8001e44:	2100      	movs	r1, #0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff f8d6 	bl	8000ff8 <FillRect>
	//LCD_Bitmap(0, 0, 320, 240, fondo);

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	  // Activar bandera interrupcion
	  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	492f      	ldr	r1, [pc, #188]	@ (8001f0c <main+0xfc>)
 8001e50:	482f      	ldr	r0, [pc, #188]	@ (8001f10 <main+0x100>)
 8001e52:	f001 ffa2 	bl	8003d9a <HAL_UART_Receive_IT>
	  modo=1;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <main+0x104>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
	  if (modo==1){
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <main+0x104>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d132      	bne.n	8001eca <main+0xba>

		fase_p1=1;
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <main+0x108>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]

	    //Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 320, 240);
 8001e6a:	23f0      	movs	r3, #240	@ 0xf0
 8001e6c:	9304      	str	r3, [sp, #16]
 8001e6e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001e72:	9303      	str	r3, [sp, #12]
 8001e74:	2303      	movs	r3, #3
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2305      	movs	r3, #5
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	231e      	movs	r3, #30
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2316      	movs	r3, #22
 8001e82:	22c8      	movs	r2, #200	@ 0xc8
 8001e84:	21a0      	movs	r1, #160	@ 0xa0
 8001e86:	4825      	ldr	r0, [pc, #148]	@ (8001f1c <main+0x10c>)
 8001e88:	f7ff fcf0 	bl	800186c <initPlayer>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2313      	movs	r3, #19
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2310      	movs	r3, #16
 8001e96:	2250      	movs	r2, #80	@ 0x50
 8001e98:	2128      	movs	r1, #40	@ 0x28
 8001e9a:	4821      	ldr	r0, [pc, #132]	@ (8001f20 <main+0x110>)
 8001e9c:	f7ff fad0 	bl	8001440 <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2313      	movs	r3, #19
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	2250      	movs	r2, #80	@ 0x50
 8001eac:	21a0      	movs	r1, #160	@ 0xa0
 8001eae:	481d      	ldr	r0, [pc, #116]	@ (8001f24 <main+0x114>)
 8001eb0:	f7ff fac6 	bl	8001440 <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2313      	movs	r3, #19
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	2250      	movs	r2, #80	@ 0x50
 8001ec0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001ec4:	4818      	ldr	r0, [pc, #96]	@ (8001f28 <main+0x118>)
 8001ec6:	f7ff fabb 	bl	8001440 <initEnemy1>

	  if (modo==2){
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <main+0x104>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d105      	bne.n	8001ede <main+0xce>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	22f0      	movs	r2, #240	@ 0xf0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	20a0      	movs	r0, #160	@ 0xa0
 8001eda:	f7ff f825 	bl	8000f28 <V_line>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		animation_e1(&e1_1);
 8001ede:	4810      	ldr	r0, [pc, #64]	@ (8001f20 <main+0x110>)
 8001ee0:	f7ff f9e6 	bl	80012b0 <animation_e1>
		animation_e1_control(&e1_1);
 8001ee4:	480e      	ldr	r0, [pc, #56]	@ (8001f20 <main+0x110>)
 8001ee6:	f7ff f98f 	bl	8001208 <animation_e1_control>
		animation_e1(&e1_2);
 8001eea:	480e      	ldr	r0, [pc, #56]	@ (8001f24 <main+0x114>)
 8001eec:	f7ff f9e0 	bl	80012b0 <animation_e1>
		animation_e1_control(&e1_2);
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <main+0x114>)
 8001ef2:	f7ff f989 	bl	8001208 <animation_e1_control>
		animation_e1(&e1_3);
 8001ef6:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <main+0x118>)
 8001ef8:	f7ff f9da 	bl	80012b0 <animation_e1>
		animation_e1_control(&e1_3);
 8001efc:	480a      	ldr	r0, [pc, #40]	@ (8001f28 <main+0x118>)
 8001efe:	f7ff f983 	bl	8001208 <animation_e1_control>
		PlayerAttackAnimation(&p1);
 8001f02:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <main+0x10c>)
 8001f04:	f7ff fee0 	bl	8001cc8 <PlayerAttackAnimation>
		animation_e1(&e1_1);
 8001f08:	bf00      	nop
 8001f0a:	e7e8      	b.n	8001ede <main+0xce>
 8001f0c:	2000cf80 	.word	0x2000cf80
 8001f10:	2000cf38 	.word	0x2000cf38
 8001f14:	2000d074 	.word	0x2000d074
 8001f18:	2000d075 	.word	0x2000d075
 8001f1c:	2000cf8c 	.word	0x2000cf8c
 8001f20:	2000cfe4 	.word	0x2000cfe4
 8001f24:	2000d014 	.word	0x2000d014
 8001f28:	2000d044 	.word	0x2000d044

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b094      	sub	sp, #80	@ 0x50
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	2234      	movs	r2, #52	@ 0x34
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fe50 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <SystemClock_Config+0xd0>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	4a28      	ldr	r2, [pc, #160]	@ (8001ffc <SystemClock_Config+0xd0>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f60:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <SystemClock_Config+0xd0>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <SystemClock_Config+0xd4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f78:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <SystemClock_Config+0xd4>)
 8001f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <SystemClock_Config+0xd4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f94:	2310      	movs	r3, #16
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001fa4:	2350      	movs	r3, #80	@ 0x50
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fb77 	bl	80036ac <HAL_RCC_OscConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001fc4:	f000 fb22 	bl	800260c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	230f      	movs	r3, #15
 8001fca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 f89d 	bl	8003124 <HAL_RCC_ClockConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ff0:	f000 fb0c 	bl	800260c <Error_Handler>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3750      	adds	r7, #80	@ 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000

08002004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <MX_SPI1_Init+0x64>)
 800200a:	4a18      	ldr	r2, [pc, #96]	@ (800206c <MX_SPI1_Init+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002010:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <MX_SPI1_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <MX_SPI1_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <MX_SPI1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <MX_SPI1_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002050:	220a      	movs	r2, #10
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MX_SPI1_Init+0x64>)
 8002056:	f001 fdc7 	bl	8003be8 <HAL_SPI_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002060:	f000 fad4 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000ce98 	.word	0x2000ce98
 800206c:	40013000 	.word	0x40013000

08002070 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <MX_UART5_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <MX_UART5_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <MX_UART5_Init+0x4c>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <MX_UART5_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <MX_UART5_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <MX_UART5_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <MX_UART5_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <MX_UART5_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <MX_UART5_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	@ (80020bc <MX_UART5_Init+0x4c>)
 80020a8:	f001 fe27 	bl	8003cfa <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80020b2:	f000 faab 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000cef0 	.word	0x2000cef0
 80020c0:	40005000 	.word	0x40005000

080020c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <MX_USART2_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_USART2_UART_Init+0x4c>)
 80020fc:	f001 fdfd 	bl	8003cfa <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f000 fa81 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000cf38 	.word	0x2000cf38
 8002114:	40004400 	.word	0x40004400

08002118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <MX_GPIO_Init+0x124>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a41      	ldr	r2, [pc, #260]	@ (800223c <MX_GPIO_Init+0x124>)
 8002138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <MX_GPIO_Init+0x124>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <MX_GPIO_Init+0x124>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a3a      	ldr	r2, [pc, #232]	@ (800223c <MX_GPIO_Init+0x124>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <MX_GPIO_Init+0x124>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b34      	ldr	r3, [pc, #208]	@ (800223c <MX_GPIO_Init+0x124>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a33      	ldr	r2, [pc, #204]	@ (800223c <MX_GPIO_Init+0x124>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b31      	ldr	r3, [pc, #196]	@ (800223c <MX_GPIO_Init+0x124>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <MX_GPIO_Init+0x124>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a2c      	ldr	r2, [pc, #176]	@ (800223c <MX_GPIO_Init+0x124>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <MX_GPIO_Init+0x124>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <MX_GPIO_Init+0x124>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a25      	ldr	r2, [pc, #148]	@ (800223c <MX_GPIO_Init+0x124>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <MX_GPIO_Init+0x124>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2182      	movs	r1, #130	@ 0x82
 80021be:	4820      	ldr	r0, [pc, #128]	@ (8002240 <MX_GPIO_Init+0x128>)
 80021c0:	f000 ff96 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80021c4:	2200      	movs	r2, #0
 80021c6:	f240 7113 	movw	r1, #1811	@ 0x713
 80021ca:	481e      	ldr	r0, [pc, #120]	@ (8002244 <MX_GPIO_Init+0x12c>)
 80021cc:	f000 ff90 	bl	80030f0 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80021d0:	2200      	movs	r2, #0
 80021d2:	f240 4179 	movw	r1, #1145	@ 0x479
 80021d6:	481c      	ldr	r0, [pc, #112]	@ (8002248 <MX_GPIO_Init+0x130>)
 80021d8:	f000 ff8a 	bl	80030f0 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 80021dc:	2382      	movs	r3, #130	@ 0x82
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e8:	2302      	movs	r3, #2
 80021ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4813      	ldr	r0, [pc, #76]	@ (8002240 <MX_GPIO_Init+0x128>)
 80021f4:	f000 fde8 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80021f8:	f240 7313 	movw	r3, #1811	@ 0x713
 80021fc:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <MX_GPIO_Init+0x12c>)
 8002212:	f000 fdd9 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8002216:	f240 4379 	movw	r3, #1145	@ 0x479
 800221a:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	4806      	ldr	r0, [pc, #24]	@ (8002248 <MX_GPIO_Init+0x130>)
 8002230:	f000 fdca 	bl	8002dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	@ 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	40020800 	.word	0x40020800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400

0800224c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af06      	add	r7, sp, #24
 8002252:	6078      	str	r0, [r7, #4]
	if(buffer[0] == 'd'){
 8002254:	4b93      	ldr	r3, [pc, #588]	@ (80024a4 <HAL_UART_RxCpltCallback+0x258>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b64      	cmp	r3, #100	@ 0x64
 800225a:	d168      	bne.n	800232e <HAL_UART_RxCpltCallback+0xe2>
		if (p1.IsAttack==0){
 800225c:	4b92      	ldr	r3, [pc, #584]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800225e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002260:	2b00      	cmp	r3, #0
 8002262:	d164      	bne.n	800232e <HAL_UART_RxCpltCallback+0xe2>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8002264:	4b90      	ldr	r3, [pc, #576]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b8f      	ldr	r3, [pc, #572]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	1c58      	adds	r0, r3, #1
 8002272:	4b8d      	ldr	r3, [pc, #564]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4b8c      	ldr	r3, [pc, #560]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	4b89      	ldr	r3, [pc, #548]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	4b88      	ldr	r3, [pc, #544]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8002290:	9400      	str	r4, [sp, #0]
 8002292:	f7fe feb1 	bl	8000ff8 <FillRect>
		p1.direction=2;
 8002296:	4b84      	ldr	r3, [pc, #528]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002298:	2202      	movs	r2, #2
 800229a:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 800229c:	2100      	movs	r1, #0
 800229e:	4882      	ldr	r0, [pc, #520]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022a0:	f7ff fb5c 	bl	800195c <playerCanMove>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d021      	beq.n	80022ee <HAL_UART_RxCpltCallback+0xa2>
		    p1.y=p1.y+p1.speed;
 80022aa:	4b7f      	ldr	r3, [pc, #508]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4b7e      	ldr	r3, [pc, #504]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a7c      	ldr	r2, [pc, #496]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022b6:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 80022b8:	4b7b      	ldr	r3, [pc, #492]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022bc:	2b09      	cmp	r3, #9
 80022be:	d805      	bhi.n	80022cc <HAL_UART_RxCpltCallback+0x80>
		    		p1.animationWalkDown+=1;
 80022c0:	4b79      	ldr	r3, [pc, #484]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a78      	ldr	r2, [pc, #480]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	e002      	b.n	80022d2 <HAL_UART_RxCpltCallback+0x86>
		    			} else{
		    				p1.animationWalkDown=0;
 80022cc:	4b76      	ldr	r3, [pc, #472]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		    			}
		    PlayerAnimation(&p1);
 80022d2:	4875      	ldr	r0, [pc, #468]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022d4:	f7ff fc74 	bl	8001bc0 <PlayerAnimation>
		    FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80022d8:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	4b72      	ldr	r3, [pc, #456]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	2201      	movs	r2, #1
 80022e8:	f7fe fe86 	bl	8000ff8 <FillRect>
 80022ec:	e01f      	b.n	800232e <HAL_UART_RxCpltCallback+0xe2>
		} else {
			LCD_Sprite(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 80022ee:	4b6e      	ldr	r3, [pc, #440]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3b09      	subs	r3, #9
 80022f4:	4618      	mov	r0, r3
 80022f6:	4b6c      	ldr	r3, [pc, #432]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	3b0d      	subs	r3, #13
 80022fc:	4619      	mov	r1, r3
 80022fe:	2300      	movs	r3, #0
 8002300:	9304      	str	r3, [sp, #16]
 8002302:	2300      	movs	r3, #0
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	2300      	movs	r3, #0
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	230a      	movs	r3, #10
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	4b67      	ldr	r3, [pc, #412]	@ (80024ac <HAL_UART_RxCpltCallback+0x260>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	231a      	movs	r3, #26
 8002314:	2212      	movs	r2, #18
 8002316:	f7fe fec9 	bl	80010ac <LCD_Sprite>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 800231a:	4b63      	ldr	r3, [pc, #396]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	4b62      	ldr	r3, [pc, #392]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2301      	movs	r3, #1
 8002328:	2201      	movs	r2, #1
 800232a:	f7fe fe65 	bl	8000ff8 <FillRect>
		}
	}
}
	if(buffer[0] == 'u'){
 800232e:	4b5d      	ldr	r3, [pc, #372]	@ (80024a4 <HAL_UART_RxCpltCallback+0x258>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b75      	cmp	r3, #117	@ 0x75
 8002334:	d168      	bne.n	8002408 <HAL_UART_RxCpltCallback+0x1bc>
		if (p1.IsAttack==0){
 8002336:	4b5c      	ldr	r3, [pc, #368]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d164      	bne.n	8002408 <HAL_UART_RxCpltCallback+0x1bc>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 800233e:	4b5a      	ldr	r3, [pc, #360]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	1c58      	adds	r0, r3, #1
 800234c:	4b56      	ldr	r3, [pc, #344]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4b55      	ldr	r3, [pc, #340]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	1c59      	adds	r1, r3, #1
 800235a:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	f7fe fe44 	bl	8000ff8 <FillRect>
			p1.direction=0;
 8002370:	4b4d      	ldr	r3, [pc, #308]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002372:	2200      	movs	r2, #0
 8002374:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8002376:	2102      	movs	r1, #2
 8002378:	484b      	ldr	r0, [pc, #300]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800237a:	f7ff faef 	bl	800195c <playerCanMove>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d021      	beq.n	80023c8 <HAL_UART_RxCpltCallback+0x17c>
				p1.y=p1.y-p1.speed;
 8002384:	4b48      	ldr	r3, [pc, #288]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	4a46      	ldr	r2, [pc, #280]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002390:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8002392:	4b45      	ldr	r3, [pc, #276]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002396:	2b09      	cmp	r3, #9
 8002398:	d805      	bhi.n	80023a6 <HAL_UART_RxCpltCallback+0x15a>
						p1.animationWalkUp+=1;
 800239a:	4b43      	ldr	r3, [pc, #268]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800239c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239e:	3301      	adds	r3, #1
 80023a0:	4a41      	ldr	r2, [pc, #260]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023a2:	6493      	str	r3, [r2, #72]	@ 0x48
 80023a4:	e002      	b.n	80023ac <HAL_UART_RxCpltCallback+0x160>
						} else{
						  p1.animationWalkUp=0;
 80023a6:	4b40      	ldr	r3, [pc, #256]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 80023ac:	483e      	ldr	r0, [pc, #248]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023ae:	f7ff fc07 	bl	8001bc0 <PlayerAnimation>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	4b3c      	ldr	r3, [pc, #240]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2301      	movs	r3, #1
 80023c0:	2201      	movs	r2, #1
 80023c2:	f7fe fe19 	bl	8000ff8 <FillRect>
 80023c6:	e01f      	b.n	8002408 <HAL_UART_RxCpltCallback+0x1bc>

			} else {
				LCD_Sprite(p1.x - (18 / 2), p1.y - (26 / 2), 19, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 80023c8:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3b09      	subs	r3, #9
 80023ce:	4618      	mov	r0, r3
 80023d0:	4b35      	ldr	r3, [pc, #212]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	3b0d      	subs	r3, #13
 80023d6:	4619      	mov	r1, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	9304      	str	r3, [sp, #16]
 80023dc:	2300      	movs	r3, #0
 80023de:	9303      	str	r3, [sp, #12]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	230a      	movs	r3, #10
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	4b31      	ldr	r3, [pc, #196]	@ (80024b0 <HAL_UART_RxCpltCallback+0x264>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	231a      	movs	r3, #26
 80023ee:	2213      	movs	r2, #19
 80023f0:	f7fe fe5c 	bl	80010ac <LCD_Sprite>
				FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2301      	movs	r3, #1
 8002402:	2201      	movs	r2, #1
 8002404:	f7fe fdf8 	bl	8000ff8 <FillRect>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 8002408:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <HAL_UART_RxCpltCallback+0x258>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b72      	cmp	r3, #114	@ 0x72
 800240e:	d171      	bne.n	80024f4 <HAL_UART_RxCpltCallback+0x2a8>
		if (p1.IsAttack==0){
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002414:	2b00      	cmp	r3, #0
 8002416:	d16d      	bne.n	80024f4 <HAL_UART_RxCpltCallback+0x2a8>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8002418:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	1c58      	adds	r0, r3, #1
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8002444:	9400      	str	r4, [sp, #0]
 8002446:	f7fe fdd7 	bl	8000ff8 <FillRect>
			p1.direction=1;
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800244c:	2201      	movs	r2, #1
 800244e:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8002450:	2101      	movs	r1, #1
 8002452:	4815      	ldr	r0, [pc, #84]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002454:	f7ff fa82 	bl	800195c <playerCanMove>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d02a      	beq.n	80024b4 <HAL_UART_RxCpltCallback+0x268>
				p1.x=p1.x+p1.speed;
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	4413      	add	r3, r2
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800246a:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002470:	2b09      	cmp	r3, #9
 8002472:	d805      	bhi.n	8002480 <HAL_UART_RxCpltCallback+0x234>
						p1.animationWalkRight+=1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002478:	3301      	adds	r3, #1
 800247a:	4a0b      	ldr	r2, [pc, #44]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	e002      	b.n	8002486 <HAL_UART_RxCpltCallback+0x23a>
						} else{
						  p1.animationWalkRight=0;
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			PlayerAnimation(&p1);
 8002486:	4808      	ldr	r0, [pc, #32]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002488:	f7ff fb9a 	bl	8001bc0 <PlayerAnimation>
			FillRect(p1.x , p1.y, 1, 1, 0x000000);
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_UART_RxCpltCallback+0x25c>)
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	2300      	movs	r3, #0
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2301      	movs	r3, #1
 800249a:	2201      	movs	r2, #1
 800249c:	f7fe fdac 	bl	8000ff8 <FillRect>
 80024a0:	e028      	b.n	80024f4 <HAL_UART_RxCpltCallback+0x2a8>
 80024a2:	bf00      	nop
 80024a4:	2000cf80 	.word	0x2000cf80
 80024a8:	2000cf8c 	.word	0x2000cf8c
 80024ac:	2000acb0 	.word	0x2000acb0
 80024b0:	20008820 	.word	0x20008820
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 80024b4:	4b51      	ldr	r3, [pc, #324]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3b0b      	subs	r3, #11
 80024ba:	4618      	mov	r0, r3
 80024bc:	4b4f      	ldr	r3, [pc, #316]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	3b0b      	subs	r3, #11
 80024c2:	4619      	mov	r1, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9304      	str	r3, [sp, #16]
 80024c8:	2301      	movs	r3, #1
 80024ca:	9303      	str	r3, [sp, #12]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	230a      	movs	r3, #10
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <HAL_UART_RxCpltCallback+0x3b4>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2317      	movs	r3, #23
 80024da:	2216      	movs	r2, #22
 80024dc:	f7fe fde6 	bl	80010ac <LCD_Sprite>
				FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80024e0:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	4b45      	ldr	r3, [pc, #276]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	2201      	movs	r2, #1
 80024f0:	f7fe fd82 	bl	8000ff8 <FillRect>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 80024f4:	4b43      	ldr	r3, [pc, #268]	@ (8002604 <HAL_UART_RxCpltCallback+0x3b8>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b6c      	cmp	r3, #108	@ 0x6c
 80024fa:	d168      	bne.n	80025ce <HAL_UART_RxCpltCallback+0x382>
		if (p1.IsAttack==0){
 80024fc:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80024fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002500:	2b00      	cmp	r3, #0
 8002502:	d164      	bne.n	80025ce <HAL_UART_RxCpltCallback+0x382>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8002504:	4b3d      	ldr	r3, [pc, #244]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b3c      	ldr	r3, [pc, #240]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	1c58      	adds	r0, r3, #1
 8002512:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	4b35      	ldr	r3, [pc, #212]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	3301      	adds	r3, #1
 800252c:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8002530:	9400      	str	r4, [sp, #0]
 8002532:	f7fe fd61 	bl	8000ff8 <FillRect>
			p1.direction=3;
 8002536:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002538:	2203      	movs	r2, #3
 800253a:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 800253c:	2103      	movs	r1, #3
 800253e:	482f      	ldr	r0, [pc, #188]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002540:	f7ff fa0c 	bl	800195c <playerCanMove>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d021      	beq.n	800258e <HAL_UART_RxCpltCallback+0x342>
				p1.x=p1.x-p1.speed;
 800254a:	4b2c      	ldr	r3, [pc, #176]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	4a29      	ldr	r2, [pc, #164]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002556:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 8002558:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	2b09      	cmp	r3, #9
 800255e:	d805      	bhi.n	800256c <HAL_UART_RxCpltCallback+0x320>
						p1.animationWalkLeft+=1;
 8002560:	4b26      	ldr	r3, [pc, #152]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	3301      	adds	r3, #1
 8002566:	4a25      	ldr	r2, [pc, #148]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	e002      	b.n	8002572 <HAL_UART_RxCpltCallback+0x326>
						} else{
						  p1.animationWalkLeft=0;
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
						  }
			 PlayerAnimation(&p1);
 8002572:	4822      	ldr	r0, [pc, #136]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002574:	f7ff fb24 	bl	8001bc0 <PlayerAnimation>
			 FillRect(p1.x , p1.y, 1, 1, 0x000000);
 8002578:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2301      	movs	r3, #1
 8002586:	2201      	movs	r2, #1
 8002588:	f7fe fd36 	bl	8000ff8 <FillRect>
 800258c:	e01f      	b.n	80025ce <HAL_UART_RxCpltCallback+0x382>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 800258e:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3b0b      	subs	r3, #11
 8002594:	4618      	mov	r0, r3
 8002596:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	3b0b      	subs	r3, #11
 800259c:	4619      	mov	r1, r3
 800259e:	2300      	movs	r3, #0
 80025a0:	9304      	str	r3, [sp, #16]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	230a      	movs	r3, #10
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <HAL_UART_RxCpltCallback+0x3b4>)
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2317      	movs	r3, #23
 80025b4:	2216      	movs	r2, #22
 80025b6:	f7fe fd79 	bl	80010ac <LCD_Sprite>
				FillRect(p1.x , p1.y, 1, 1, 0x000000);
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	2201      	movs	r2, #1
 80025ca:	f7fe fd15 	bl	8000ff8 <FillRect>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <HAL_UART_RxCpltCallback+0x3b8>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b62      	cmp	r3, #98	@ 0x62
 80025d4:	d106      	bne.n	80025e4 <HAL_UART_RxCpltCallback+0x398>
		p1.IsAttack=1;
 80025d6:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80025d8:	2201      	movs	r2, #1
 80025da:	651a      	str	r2, [r3, #80]	@ 0x50
		p1.animationAttack=0;
 80025dc:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54
		//if (fase_p1==1){
		//PlayerHit(&p1, &e1_2);
		//}
	}
	HitboxPlayer(&p1);
 80025e4:	4805      	ldr	r0, [pc, #20]	@ (80025fc <HAL_UART_RxCpltCallback+0x3b0>)
 80025e6:	f7ff fa35 	bl	8001a54 <HitboxPlayer>
	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80025ea:	2201      	movs	r2, #1
 80025ec:	4905      	ldr	r1, [pc, #20]	@ (8002604 <HAL_UART_RxCpltCallback+0x3b8>)
 80025ee:	4806      	ldr	r0, [pc, #24]	@ (8002608 <HAL_UART_RxCpltCallback+0x3bc>)
 80025f0:	f001 fbd3 	bl	8003d9a <HAL_UART_Receive_IT>
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	2000cf8c 	.word	0x2000cf8c
 8002600:	20006098 	.word	0x20006098
 8002604:	2000cf80 	.word	0x2000cf80
 8002608:	2000cf38 	.word	0x2000cf38

0800260c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002610:	b672      	cpsid	i
}
 8002612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <Error_Handler+0x8>

08002618 <HAL_MspInit>:
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_MspInit+0x4c>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_MspInit+0x4c>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_MspInit+0x4c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_MspInit+0x4c>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_MspInit+0x4c>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_MspInit+0x4c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_SPI_MspInit>:
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a19      	ldr	r2, [pc, #100]	@ (80026ec <HAL_SPI_MspInit+0x84>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12b      	bne.n	80026e2 <HAL_SPI_MspInit+0x7a>
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <HAL_SPI_MspInit+0x88>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <HAL_SPI_MspInit+0x88>)
 8002694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002698:	6453      	str	r3, [r2, #68]	@ 0x44
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_SPI_MspInit+0x88>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_SPI_MspInit+0x88>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <HAL_SPI_MspInit+0x88>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_SPI_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	23e0      	movs	r3, #224	@ 0xe0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	2303      	movs	r3, #3
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	2305      	movs	r3, #5
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_SPI_MspInit+0x8c>)
 80026de:	f000 fb73 	bl	8002dc8 <HAL_GPIO_Init>
 80026e2:	bf00      	nop
 80026e4:	3728      	adds	r7, #40	@ 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40013000 	.word	0x40013000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <HAL_UART_MspInit>:
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	@ 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a49      	ldr	r2, [pc, #292]	@ (800283c <HAL_UART_MspInit+0x144>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d153      	bne.n	80027c2 <HAL_UART_MspInit+0xca>
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	4b48      	ldr	r3, [pc, #288]	@ (8002840 <HAL_UART_MspInit+0x148>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	4a47      	ldr	r2, [pc, #284]	@ (8002840 <HAL_UART_MspInit+0x148>)
 8002724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002728:	6413      	str	r3, [r2, #64]	@ 0x40
 800272a:	4b45      	ldr	r3, [pc, #276]	@ (8002840 <HAL_UART_MspInit+0x148>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b41      	ldr	r3, [pc, #260]	@ (8002840 <HAL_UART_MspInit+0x148>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a40      	ldr	r2, [pc, #256]	@ (8002840 <HAL_UART_MspInit+0x148>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <HAL_UART_MspInit+0x148>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b3a      	ldr	r3, [pc, #232]	@ (8002840 <HAL_UART_MspInit+0x148>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a39      	ldr	r2, [pc, #228]	@ (8002840 <HAL_UART_MspInit+0x148>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b37      	ldr	r3, [pc, #220]	@ (8002840 <HAL_UART_MspInit+0x148>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
 800277c:	2303      	movs	r3, #3
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002780:	2308      	movs	r3, #8
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	482e      	ldr	r0, [pc, #184]	@ (8002844 <HAL_UART_MspInit+0x14c>)
 800278c:	f000 fb1c 	bl	8002dc8 <HAL_GPIO_Init>
 8002790:	2304      	movs	r3, #4
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	2302      	movs	r3, #2
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
 800279c:	2303      	movs	r3, #3
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027a0:	2308      	movs	r3, #8
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	4827      	ldr	r0, [pc, #156]	@ (8002848 <HAL_UART_MspInit+0x150>)
 80027ac:	f000 fb0c 	bl	8002dc8 <HAL_GPIO_Init>
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	2035      	movs	r0, #53	@ 0x35
 80027b6:	f000 fa3e 	bl	8002c36 <HAL_NVIC_SetPriority>
 80027ba:	2035      	movs	r0, #53	@ 0x35
 80027bc:	f000 fa57 	bl	8002c6e <HAL_NVIC_EnableIRQ>
 80027c0:	e038      	b.n	8002834 <HAL_UART_MspInit+0x13c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_UART_MspInit+0x154>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d133      	bne.n	8002834 <HAL_UART_MspInit+0x13c>
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_UART_MspInit+0x148>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_UART_MspInit+0x148>)
 80027d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027da:	6413      	str	r3, [r2, #64]	@ 0x40
 80027dc:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <HAL_UART_MspInit+0x148>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	4b14      	ldr	r3, [pc, #80]	@ (8002840 <HAL_UART_MspInit+0x148>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	4a13      	ldr	r2, [pc, #76]	@ (8002840 <HAL_UART_MspInit+0x148>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_UART_MspInit+0x148>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	230c      	movs	r3, #12
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002810:	2303      	movs	r3, #3
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002814:	2307      	movs	r3, #7
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	480c      	ldr	r0, [pc, #48]	@ (8002850 <HAL_UART_MspInit+0x158>)
 8002820:	f000 fad2 	bl	8002dc8 <HAL_GPIO_Init>
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	2026      	movs	r0, #38	@ 0x26
 800282a:	f000 fa04 	bl	8002c36 <HAL_NVIC_SetPriority>
 800282e:	2026      	movs	r0, #38	@ 0x26
 8002830:	f000 fa1d 	bl	8002c6e <HAL_NVIC_EnableIRQ>
 8002834:	bf00      	nop
 8002836:	3730      	adds	r7, #48	@ 0x30
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40005000 	.word	0x40005000
 8002840:	40023800 	.word	0x40023800
 8002844:	40020800 	.word	0x40020800
 8002848:	40020c00 	.word	0x40020c00
 800284c:	40004400 	.word	0x40004400
 8002850:	40020000 	.word	0x40020000

08002854 <NMI_Handler>:
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <NMI_Handler+0x4>

0800285c <HardFault_Handler>:
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <HardFault_Handler+0x4>

08002864 <MemManage_Handler>:
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <MemManage_Handler+0x4>

0800286c <BusFault_Handler>:
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <UsageFault_Handler+0x4>

0800287c <SVC_Handler>:
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <DebugMon_Handler>:
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <PendSV_Handler>:
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <SysTick_Handler>:
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	f000 f8a5 	bl	80029f8 <HAL_IncTick>
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <USART2_IRQHandler>:
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <USART2_IRQHandler+0x10>)
 80028ba:	f001 fa93 	bl	8003de4 <HAL_UART_IRQHandler>
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000cf38 	.word	0x2000cf38

080028c8 <UART5_IRQHandler>:
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <UART5_IRQHandler+0x10>)
 80028ce:	f001 fa89 	bl	8003de4 <HAL_UART_IRQHandler>
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000cef0 	.word	0x2000cef0

080028dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <SystemInit+0x20>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <SystemInit+0x20>)
 80028e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002938 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002904:	f7ff ffea 	bl	80028dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002908:	480c      	ldr	r0, [pc, #48]	@ (800293c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800290a:	490d      	ldr	r1, [pc, #52]	@ (8002940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002920:	4c0a      	ldr	r4, [pc, #40]	@ (800294c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800292e:	f002 f95f 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7ff fa6d 	bl	8001e10 <main>
  bx  lr    
 8002936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002940:	2000ce7c 	.word	0x2000ce7c
  ldr r2, =_sidata
 8002944:	08004c78 	.word	0x08004c78
  ldr r2, =_sbss
 8002948:	2000ce7c 	.word	0x2000ce7c
  ldr r4, =_ebss
 800294c:	2000d07c 	.word	0x2000d07c

08002950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <HAL_Init+0x40>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_Init+0x40>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800296e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	@ (8002994 <HAL_Init+0x40>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 f94f 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	200f      	movs	r0, #15
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fe46 	bl	8002618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f967 	bl	8002c8a <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 f92f 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	@ (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	2000ce70 	.word	0x2000ce70
 80029f0:	2000ce78 	.word	0x2000ce78
 80029f4:	2000ce74 	.word	0x2000ce74

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	2000ce78 	.word	0x2000ce78
 8002a1c:	2000d078 	.word	0x2000d078

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	2000d078 	.word	0x2000d078

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000ce78 	.word	0x2000ce78

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	@ (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	@ (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff8e 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff29 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff3e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff8e 	bl	8002b74 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5d 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff31 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7ff feb6 	bl	8002a20 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d008      	beq.n	8002cd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2280      	movs	r2, #128	@ 0x80
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e052      	b.n	8002d7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0216 	bic.w	r2, r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_DMA_Abort+0x62>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0208 	bic.w	r2, r2, #8
 8002d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d24:	e013      	b.n	8002d4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d26:	f7ff fe7b 	bl	8002a20 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d90c      	bls.n	8002d4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e015      	b.n	8002d7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e4      	bne.n	8002d26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	223f      	movs	r2, #63	@ 0x3f
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e00c      	b.n	8002dba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2205      	movs	r2, #5
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e165      	b.n	80030b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8154 	bne.w	80030aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d005      	beq.n	8002e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d130      	bne.n	8002e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e50:	2201      	movs	r2, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 0201 	and.w	r2, r3, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d017      	beq.n	8002eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d123      	bne.n	8002f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	69b9      	ldr	r1, [r7, #24]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80ae 	beq.w	80030aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b5d      	ldr	r3, [pc, #372]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a5c      	ldr	r2, [pc, #368]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6a:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4f      	ldr	r2, [pc, #316]	@ (80030d0 <HAL_GPIO_Init+0x308>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d025      	beq.n	8002fe2 <HAL_GPIO_Init+0x21a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4e      	ldr	r2, [pc, #312]	@ (80030d4 <HAL_GPIO_Init+0x30c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <HAL_GPIO_Init+0x216>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80030d8 <HAL_GPIO_Init+0x310>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x212>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80030dc <HAL_GPIO_Init+0x314>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80030e0 <HAL_GPIO_Init+0x318>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x20a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80030e4 <HAL_GPIO_Init+0x31c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x206>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a49      	ldr	r2, [pc, #292]	@ (80030e8 <HAL_GPIO_Init+0x320>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x202>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e00c      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e00a      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fce:	2305      	movs	r3, #5
 8002fd0:	e008      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e004      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f002 0203 	and.w	r2, r2, #3
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	4093      	lsls	r3, r2
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff4:	4935      	ldr	r1, [pc, #212]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b3a      	ldr	r3, [pc, #232]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a31      	ldr	r2, [pc, #196]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b2f      	ldr	r3, [pc, #188]	@ (80030ec <HAL_GPIO_Init+0x324>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_GPIO_Init+0x324>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a4:	4a11      	ldr	r2, [pc, #68]	@ (80030ec <HAL_GPIO_Init+0x324>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3301      	adds	r3, #1
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f67f ae96 	bls.w	8002de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40021400 	.word	0x40021400
 80030e8:	40021800 	.word	0x40021800
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800310c:	e003      	b.n	8003116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0cc      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b68      	ldr	r3, [pc, #416]	@ (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d90c      	bls.n	8003160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b65      	ldr	r3, [pc, #404]	@ (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	@ (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a58      	ldr	r2, [pc, #352]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a52      	ldr	r2, [pc, #328]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800319a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d044      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d119      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b3f      	ldr	r3, [pc, #252]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e06f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3b      	ldr	r3, [pc, #236]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e067      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b37      	ldr	r3, [pc, #220]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4934      	ldr	r1, [pc, #208]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7ff fc04 	bl	8002a20 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7ff fc00 	bl	8002a20 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e04f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2b      	ldr	r3, [pc, #172]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d20c      	bcs.n	800326c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f855 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490a      	ldr	r1, [pc, #40]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fb64 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08004c50 	.word	0x08004c50
 80032e8:	2000ce70 	.word	0x2000ce70
 80032ec:	2000ce74 	.word	0x2000ce74

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	2000ce70 	.word	0x2000ce70

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08004c60 	.word	0x08004c60

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	@ (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08004c60 	.word	0x08004c60

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b0a6      	sub	sp, #152	@ 0x98
 800335e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337e:	4bc8      	ldr	r3, [pc, #800]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b0c      	cmp	r3, #12
 8003388:	f200 817e 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x330>
 800338c:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <HAL_RCC_GetSysClockFreq+0x3c>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033c9 	.word	0x080033c9
 8003398:	08003689 	.word	0x08003689
 800339c:	08003689 	.word	0x08003689
 80033a0:	08003689 	.word	0x08003689
 80033a4:	080033d1 	.word	0x080033d1
 80033a8:	08003689 	.word	0x08003689
 80033ac:	08003689 	.word	0x08003689
 80033b0:	08003689 	.word	0x08003689
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	08003689 	.word	0x08003689
 80033bc:	08003689 	.word	0x08003689
 80033c0:	08003689 	.word	0x08003689
 80033c4:	08003543 	.word	0x08003543
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4bb6      	ldr	r3, [pc, #728]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80033ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80033ce:	e15f      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4bb5      	ldr	r3, [pc, #724]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x350>)
 80033d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80033d6:	e15b      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d8:	4bb1      	ldr	r3, [pc, #708]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e4:	4bae      	ldr	r3, [pc, #696]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d031      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f0:	4bab      	ldr	r3, [pc, #684]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	2200      	movs	r2, #0
 80033f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	663b      	str	r3, [r7, #96]	@ 0x60
 8003404:	2300      	movs	r3, #0
 8003406:	667b      	str	r3, [r7, #100]	@ 0x64
 8003408:	4ba7      	ldr	r3, [pc, #668]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800340a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800340e:	462a      	mov	r2, r5
 8003410:	fb03 f202 	mul.w	r2, r3, r2
 8003414:	2300      	movs	r3, #0
 8003416:	4621      	mov	r1, r4
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	4aa2      	ldr	r2, [pc, #648]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003420:	4621      	mov	r1, r4
 8003422:	fba1 1202 	umull	r1, r2, r1, r2
 8003426:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003428:	460a      	mov	r2, r1
 800342a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800342c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800342e:	4413      	add	r3, r2
 8003430:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003436:	2200      	movs	r2, #0
 8003438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800343a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800343c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003440:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003444:	f7fd f8ec 	bl	8000620 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003452:	e064      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003454:	4b92      	ldr	r3, [pc, #584]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	2200      	movs	r2, #0
 800345c:	653b      	str	r3, [r7, #80]	@ 0x50
 800345e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003468:	2300      	movs	r3, #0
 800346a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800346c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003470:	4622      	mov	r2, r4
 8003472:	462b      	mov	r3, r5
 8003474:	f04f 0000 	mov.w	r0, #0
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	0159      	lsls	r1, r3, #5
 800347e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003482:	0150      	lsls	r0, r2, #5
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4621      	mov	r1, r4
 800348a:	1a51      	subs	r1, r2, r1
 800348c:	6139      	str	r1, [r7, #16]
 800348e:	4629      	mov	r1, r5
 8003490:	eb63 0301 	sbc.w	r3, r3, r1
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a2:	4659      	mov	r1, fp
 80034a4:	018b      	lsls	r3, r1, #6
 80034a6:	4651      	mov	r1, sl
 80034a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ac:	4651      	mov	r1, sl
 80034ae:	018a      	lsls	r2, r1, #6
 80034b0:	4651      	mov	r1, sl
 80034b2:	ebb2 0801 	subs.w	r8, r2, r1
 80034b6:	4659      	mov	r1, fp
 80034b8:	eb63 0901 	sbc.w	r9, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d0:	4690      	mov	r8, r2
 80034d2:	4699      	mov	r9, r3
 80034d4:	4623      	mov	r3, r4
 80034d6:	eb18 0303 	adds.w	r3, r8, r3
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	462b      	mov	r3, r5
 80034de:	eb49 0303 	adc.w	r3, r9, r3
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034f0:	4629      	mov	r1, r5
 80034f2:	028b      	lsls	r3, r1, #10
 80034f4:	4621      	mov	r1, r4
 80034f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034fa:	4621      	mov	r1, r4
 80034fc:	028a      	lsls	r2, r1, #10
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003506:	2200      	movs	r2, #0
 8003508:	643b      	str	r3, [r7, #64]	@ 0x40
 800350a:	647a      	str	r2, [r7, #68]	@ 0x44
 800350c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003510:	f7fd f886 	bl	8000620 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800351e:	4b60      	ldr	r3, [pc, #384]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	3301      	adds	r3, #1
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8003530:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003534:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003540:	e0a6      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003542:	4b57      	ldr	r3, [pc, #348]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800354a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354e:	4b54      	ldr	r3, [pc, #336]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02a      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b51      	ldr	r3, [pc, #324]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	2200      	movs	r2, #0
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003564:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800356c:	2100      	movs	r1, #0
 800356e:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003570:	fb03 f201 	mul.w	r2, r3, r1
 8003574:	2300      	movs	r3, #0
 8003576:	fb00 f303 	mul.w	r3, r0, r3
 800357a:	4413      	add	r3, r2
 800357c:	4a4a      	ldr	r2, [pc, #296]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800357e:	fba0 1202 	umull	r1, r2, r0, r2
 8003582:	677a      	str	r2, [r7, #116]	@ 0x74
 8003584:	460a      	mov	r2, r1
 8003586:	673a      	str	r2, [r7, #112]	@ 0x70
 8003588:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800358a:	4413      	add	r3, r2
 800358c:	677b      	str	r3, [r7, #116]	@ 0x74
 800358e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003592:	2200      	movs	r2, #0
 8003594:	633b      	str	r3, [r7, #48]	@ 0x30
 8003596:	637a      	str	r2, [r7, #52]	@ 0x34
 8003598:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800359c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80035a0:	f7fd f83e 	bl	8000620 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035ae:	e05b      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b0:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	2200      	movs	r2, #0
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	0159      	lsls	r1, r3, #5
 80035da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035de:	0150      	lsls	r0, r2, #5
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4641      	mov	r1, r8
 80035e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ea:	4649      	mov	r1, r9
 80035ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003604:	ebb2 040a 	subs.w	r4, r2, sl
 8003608:	eb63 050b 	sbc.w	r5, r3, fp
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	00eb      	lsls	r3, r5, #3
 8003616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361a:	00e2      	lsls	r2, r4, #3
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	4643      	mov	r3, r8
 8003622:	18e3      	adds	r3, r4, r3
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	464b      	mov	r3, r9
 8003628:	eb45 0303 	adc.w	r3, r5, r3
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003650:	2200      	movs	r2, #0
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	61fa      	str	r2, [r7, #28]
 8003656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365a:	f7fc ffe1 	bl	8000620 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4613      	mov	r3, r2
 8003664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800367a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003686:	e003      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800368a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003694:	4618      	mov	r0, r3
 8003696:	3798      	adds	r7, #152	@ 0x98
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	017d7840 	.word	0x017d7840

080036ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e28d      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8083 	beq.w	80037d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036cc:	4b94      	ldr	r3, [pc, #592]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d019      	beq.n	800370c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d8:	4b91      	ldr	r3, [pc, #580]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f0:	d00c      	beq.n	800370c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b88      	ldr	r3, [pc, #544]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b84      	ldr	r3, [pc, #528]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d05b      	beq.n	80037d0 <HAL_RCC_OscConfig+0x124>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d157      	bne.n	80037d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e25a      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x90>
 800372e:	4b7c      	ldr	r3, [pc, #496]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7b      	ldr	r2, [pc, #492]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0xcc>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0xb4>
 8003746:	4b76      	ldr	r3, [pc, #472]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a72      	ldr	r2, [pc, #456]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0xcc>
 8003760:	4b6f      	ldr	r3, [pc, #444]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6e      	ldr	r2, [pc, #440]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b6c      	ldr	r3, [pc, #432]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6b      	ldr	r2, [pc, #428]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7ff f94e 	bl	8002a20 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003788:	f7ff f94a 	bl	8002a20 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	@ 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e21f      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b61      	ldr	r3, [pc, #388]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0xdc>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7ff f93a 	bl	8002a20 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7ff f936 	bl	8002a20 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e20b      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	4b57      	ldr	r3, [pc, #348]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x104>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d06f      	beq.n	80038be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037de:	4b50      	ldr	r3, [pc, #320]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d105      	bne.n	8003802 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b47      	ldr	r3, [pc, #284]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b44      	ldr	r3, [pc, #272]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x186>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1d3      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4937      	ldr	r1, [pc, #220]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <HAL_RCC_OscConfig+0x278>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7ff f8e3 	bl	8002a20 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385e:	f7ff f8df 	bl	8002a20 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1b4      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2b      	ldr	r3, [pc, #172]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4925      	ldr	r1, [pc, #148]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b24      	ldr	r3, [pc, #144]	@ (8003924 <HAL_RCC_OscConfig+0x278>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7ff f8c2 	bl	8002a20 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7ff f8be 	bl	8002a20 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e193      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d036      	beq.n	8003938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7ff f8a2 	bl	8002a20 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e0:	f7ff f89e 	bl	8002a20 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e173      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <HAL_RCC_OscConfig+0x274>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x234>
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <HAL_RCC_OscConfig+0x27c>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7ff f88b 	bl	8002a20 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	e00e      	b.n	800392c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7ff f887 	bl	8002a20 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d907      	bls.n	800392c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e15c      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
 8003920:	40023800 	.word	0x40023800
 8003924:	42470000 	.word	0x42470000
 8003928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ea      	bne.n	800390e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8097 	beq.w	8003a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b83      	ldr	r3, [pc, #524]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	@ 0x40
 8003966:	4b7c      	ldr	r3, [pc, #496]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b79      	ldr	r3, [pc, #484]	@ (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b76      	ldr	r3, [pc, #472]	@ (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	@ (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7ff f847 	bl	8002a20 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7ff f843 	bl	8002a20 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e118      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b5c <HAL_RCC_OscConfig+0x4b0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x31e>
 80039bc:	4b66      	ldr	r3, [pc, #408]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	4a65      	ldr	r2, [pc, #404]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c8:	e01c      	b.n	8003a04 <HAL_RCC_OscConfig+0x358>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x340>
 80039d2:	4b61      	ldr	r3, [pc, #388]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	4a60      	ldr	r2, [pc, #384]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039de:	4b5e      	ldr	r3, [pc, #376]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e2:	4a5d      	ldr	r2, [pc, #372]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0x358>
 80039ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f0:	4a59      	ldr	r2, [pc, #356]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f8:	4b57      	ldr	r3, [pc, #348]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fc:	4a56      	ldr	r2, [pc, #344]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7ff f808 	bl	8002a20 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7ff f804 	bl	8002a20 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0d7      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ee      	beq.n	8003a14 <HAL_RCC_OscConfig+0x368>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fff2 	bl	8002a20 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe ffee 	bl	8002a20 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0c1      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	4b40      	ldr	r3, [pc, #256]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ee      	bne.n	8003a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a68:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80ad 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7e:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d060      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d145      	bne.n	8003b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b33      	ldr	r3, [pc, #204]	@ (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe ffc2 	bl	8002a20 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe ffbe 	bl	8002a20 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e093      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	4b29      	ldr	r3, [pc, #164]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	491b      	ldr	r1, [pc, #108]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe ff93 	bl	8002a20 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe ff8f 	bl	8002a20 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e064      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x452>
 8003b1c:	e05c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <HAL_RCC_OscConfig+0x4b4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe ff7c 	bl	8002a20 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe ff78 	bl	8002a20 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e04d      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x480>
 8003b4a:	e045      	b.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e040      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1f      	ldr	r3, [pc, #124]	@ (8003be4 <HAL_RCC_OscConfig+0x538>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d030      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d129      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d122      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d119      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800

08003be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07b      	b.n	8003cf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0a:	d009      	beq.n	8003c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61da      	str	r2, [r3, #28]
 8003c12:	e005      	b.n	8003c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fe fd14 	bl	8002668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0104 	and.w	r1, r3, #4
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	f003 0210 	and.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ce0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e042      	b.n	8003d92 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fe fce9 	bl	80026f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2224      	movs	r2, #36	@ 0x24
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fcda 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d112      	bne.n	8003dda <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_UART_Receive_IT+0x26>
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e00b      	b.n	8003ddc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fab9 	bl	8004348 <UART_Start_Receive_IT>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	e000      	b.n	8003ddc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b0ba      	sub	sp, #232	@ 0xe8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10f      	bne.n	8003e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_UART_IRQHandler+0x66>
 8003e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fb99 	bl	800457a <UART_Receive_IT>
      return;
 8003e48:	e25b      	b.n	8004302 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80de 	beq.w	8004010 <HAL_UART_IRQHandler+0x22c>
 8003e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80d1 	beq.w	8004010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <HAL_UART_IRQHandler+0xae>
 8003e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_UART_IRQHandler+0xd2>
 8003e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f043 0202 	orr.w	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HAL_UART_IRQHandler+0xf6>
 8003ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	f043 0204 	orr.w	r2, r3, #4
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <HAL_UART_IRQHandler+0x126>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f043 0208 	orr.w	r2, r3, #8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 81f2 	beq.w	80042f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_UART_IRQHandler+0x14e>
 8003f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb24 	bl	800457a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3c:	2b40      	cmp	r3, #64	@ 0x40
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HAL_UART_IRQHandler+0x17a>
 8003f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d04f      	beq.n	8003ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa2c 	bl	80043bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6e:	2b40      	cmp	r3, #64	@ 0x40
 8003f70:	d141      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3314      	adds	r3, #20
 8003f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1d9      	bne.n	8003f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d013      	beq.n	8003fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	4a7e      	ldr	r2, [pc, #504]	@ (80041c4 <HAL_UART_IRQHandler+0x3e0>)
 8003fcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fed5 	bl	8002d82 <HAL_DMA_Abort_IT>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e00e      	b.n	800400c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f994 	bl	800431c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	e00a      	b.n	800400c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f990 	bl	800431c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	e006      	b.n	800400c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f98c 	bl	800431c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800400a:	e175      	b.n	80042f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	bf00      	nop
    return;
 800400e:	e173      	b.n	80042f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 814f 	bne.w	80042b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8148 	beq.w	80042b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8141 	beq.w	80042b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004056:	2b40      	cmp	r3, #64	@ 0x40
 8004058:	f040 80b6 	bne.w	80041c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8145 	beq.w	80042fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800407a:	429a      	cmp	r2, r3
 800407c:	f080 813e 	bcs.w	80042fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004086:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004092:	f000 8088 	beq.w	80041a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1d9      	bne.n	8004096 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3314      	adds	r3, #20
 80040e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004106:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800410a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800410e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e1      	bne.n	80040e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3314      	adds	r3, #20
 8004124:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800412e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004142:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004148:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e3      	bne.n	800411e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004176:	f023 0310 	bic.w	r3, r3, #16
 800417a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004188:	65ba      	str	r2, [r7, #88]	@ 0x58
 800418a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800418e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fd7e 	bl	8002ca2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8b7 	bl	8004330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041c2:	e09b      	b.n	80042fc <HAL_UART_IRQHandler+0x518>
 80041c4:	08004483 	.word	0x08004483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 808e 	beq.w	8004300 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8089 	beq.w	8004300 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004204:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004212:	647a      	str	r2, [r7, #68]	@ 0x44
 8004214:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004218:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e3      	bne.n	80041ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	623b      	str	r3, [r7, #32]
   return(result);
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800424a:	633a      	str	r2, [r7, #48]	@ 0x30
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e3      	bne.n	8004226 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	60fb      	str	r3, [r7, #12]
   return(result);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0310 	bic.w	r3, r3, #16
 8004282:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004290:	61fa      	str	r2, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69b9      	ldr	r1, [r7, #24]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	617b      	str	r3, [r7, #20]
   return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e3      	bne.n	800426c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f83d 	bl	8004330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b6:	e023      	b.n	8004300 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_UART_IRQHandler+0x4f4>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8ea 	bl	80044aa <UART_Transmit_IT>
    return;
 80042d6:	e014      	b.n	8004302 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <HAL_UART_IRQHandler+0x51e>
 80042e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f92a 	bl	800454a <UART_EndTransmit_IT>
    return;
 80042f6:	e004      	b.n	8004302 <HAL_UART_IRQHandler+0x51e>
    return;
 80042f8:	bf00      	nop
 80042fa:	e002      	b.n	8004302 <HAL_UART_IRQHandler+0x51e>
      return;
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <HAL_UART_IRQHandler+0x51e>
      return;
 8004300:	bf00      	nop
  }
}
 8004302:	37e8      	adds	r7, #232	@ 0xe8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2222      	movs	r2, #34	@ 0x22
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800438c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0220 	orr.w	r2, r2, #32
 80043ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b095      	sub	sp, #84	@ 0x54
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80043e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	61fb      	str	r3, [r7, #28]
   return(result);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800441e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	d119      	bne.n	8004468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	60bb      	str	r3, [r7, #8]
   return(result);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f023 0310 	bic.w	r3, r3, #16
 800444a:	647b      	str	r3, [r7, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004454:	61ba      	str	r2, [r7, #24]
 8004456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6979      	ldr	r1, [r7, #20]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	613b      	str	r3, [r7, #16]
   return(result);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e5      	bne.n	8004434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004476:	bf00      	nop
 8004478:	3754      	adds	r7, #84	@ 0x54
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff3d 	bl	800431c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b21      	cmp	r3, #33	@ 0x21
 80044bc:	d13e      	bne.n	800453c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d114      	bne.n	80044f2 <UART_Transmit_IT+0x48>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d110      	bne.n	80044f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	621a      	str	r2, [r3, #32]
 80044f0:	e008      	b.n	8004504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6211      	str	r1, [r2, #32]
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fecc 	bl	8004308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b08c      	sub	sp, #48	@ 0x30
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b22      	cmp	r3, #34	@ 0x22
 800458c:	f040 80ae 	bne.w	80046ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004598:	d117      	bne.n	80045ca <UART_Receive_IT+0x50>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d113      	bne.n	80045ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	1c9a      	adds	r2, r3, #2
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045c8:	e026      	b.n	8004618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045dc:	d007      	beq.n	80045ee <UART_Receive_IT+0x74>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <UART_Receive_IT+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	e008      	b.n	800460e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004608:	b2da      	uxtb	r2, r3
 800460a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4619      	mov	r1, r3
 8004626:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004628:	2b00      	cmp	r3, #0
 800462a:	d15d      	bne.n	80046e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0220 	bic.w	r2, r2, #32
 800463a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800464a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	2b01      	cmp	r3, #1
 8004670:	d135      	bne.n	80046de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	613b      	str	r3, [r7, #16]
   return(result);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	623a      	str	r2, [r7, #32]
 800469a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	69f9      	ldr	r1, [r7, #28]
 800469e:	6a3a      	ldr	r2, [r7, #32]
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d10a      	bne.n	80046d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fe2a 	bl	8004330 <HAL_UARTEx_RxEventCallback>
 80046dc:	e002      	b.n	80046e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fd fdb4 	bl	800224c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e002      	b.n	80046ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e000      	b.n	80046ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3730      	adds	r7, #48	@ 0x30
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b0c0      	sub	sp, #256	@ 0x100
 80046fe:	af00      	add	r7, sp, #0
 8004700:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	68d9      	ldr	r1, [r3, #12]
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	ea40 0301 	orr.w	r3, r0, r1
 8004720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004750:	f021 010c 	bic.w	r1, r1, #12
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800475e:	430b      	orrs	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004772:	6999      	ldr	r1, [r3, #24]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	ea40 0301 	orr.w	r3, r0, r1
 800477e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8f      	ldr	r3, [pc, #572]	@ (80049c4 <UART_SetConfig+0x2cc>)
 8004788:	429a      	cmp	r2, r3
 800478a:	d005      	beq.n	8004798 <UART_SetConfig+0xa0>
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b8d      	ldr	r3, [pc, #564]	@ (80049c8 <UART_SetConfig+0x2d0>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d104      	bne.n	80047a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe fdca 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 800479c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047a0:	e003      	b.n	80047aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a2:	f7fe fdb1 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80047a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047b4:	f040 810c 	bne.w	80049d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	1891      	adds	r1, r2, r2
 80047d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047d2:	415b      	adcs	r3, r3
 80047d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047da:	4621      	mov	r1, r4
 80047dc:	eb12 0801 	adds.w	r8, r2, r1
 80047e0:	4629      	mov	r1, r5
 80047e2:	eb43 0901 	adc.w	r9, r3, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fa:	4690      	mov	r8, r2
 80047fc:	4699      	mov	r9, r3
 80047fe:	4623      	mov	r3, r4
 8004800:	eb18 0303 	adds.w	r3, r8, r3
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004808:	462b      	mov	r3, r5
 800480a:	eb49 0303 	adc.w	r3, r9, r3
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800481e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004826:	460b      	mov	r3, r1
 8004828:	18db      	adds	r3, r3, r3
 800482a:	653b      	str	r3, [r7, #80]	@ 0x50
 800482c:	4613      	mov	r3, r2
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	657b      	str	r3, [r7, #84]	@ 0x54
 8004834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800483c:	f7fb fef0 	bl	8000620 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b61      	ldr	r3, [pc, #388]	@ (80049cc <UART_SetConfig+0x2d4>)
 8004846:	fba3 2302 	umull	r2, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	011c      	lsls	r4, r3, #4
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004858:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800485c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004868:	415b      	adcs	r3, r3
 800486a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800486c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004870:	4641      	mov	r1, r8
 8004872:	eb12 0a01 	adds.w	sl, r2, r1
 8004876:	4649      	mov	r1, r9
 8004878:	eb43 0b01 	adc.w	fp, r3, r1
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800488c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004890:	4692      	mov	sl, r2
 8004892:	469b      	mov	fp, r3
 8004894:	4643      	mov	r3, r8
 8004896:	eb1a 0303 	adds.w	r3, sl, r3
 800489a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800489e:	464b      	mov	r3, r9
 80048a0:	eb4b 0303 	adc.w	r3, fp, r3
 80048a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048bc:	460b      	mov	r3, r1
 80048be:	18db      	adds	r3, r3, r3
 80048c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048c2:	4613      	mov	r3, r2
 80048c4:	eb42 0303 	adc.w	r3, r2, r3
 80048c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048d2:	f7fb fea5 	bl	8000620 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	4b3b      	ldr	r3, [pc, #236]	@ (80049cc <UART_SetConfig+0x2d4>)
 80048de:	fba3 2301 	umull	r2, r3, r3, r1
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2264      	movs	r2, #100	@ 0x64
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	1acb      	subs	r3, r1, r3
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048f2:	4b36      	ldr	r3, [pc, #216]	@ (80049cc <UART_SetConfig+0x2d4>)
 80048f4:	fba3 2302 	umull	r2, r3, r3, r2
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004900:	441c      	add	r4, r3
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800490c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800491c:	415b      	adcs	r3, r3
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6339      	str	r1, [r7, #48]	@ 0x30
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004970:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004978:	460b      	mov	r3, r1
 800497a:	18db      	adds	r3, r3, r3
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800497e:	4613      	mov	r3, r2
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800498a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800498e:	f7fb fe47 	bl	8000620 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <UART_SetConfig+0x2d4>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	@ 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	3332      	adds	r3, #50	@ 0x32
 80049aa:	4a08      	ldr	r2, [pc, #32]	@ (80049cc <UART_SetConfig+0x2d4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 0207 	and.w	r2, r3, #7
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4422      	add	r2, r4
 80049be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049c0:	e106      	b.n	8004bd0 <UART_SetConfig+0x4d8>
 80049c2:	bf00      	nop
 80049c4:	40011000 	.word	0x40011000
 80049c8:	40011400 	.word	0x40011400
 80049cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049e2:	4642      	mov	r2, r8
 80049e4:	464b      	mov	r3, r9
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	6239      	str	r1, [r7, #32]
 80049ea:	415b      	adcs	r3, r3
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049f2:	4641      	mov	r1, r8
 80049f4:	1854      	adds	r4, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb43 0501 	adc.w	r5, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	00eb      	lsls	r3, r5, #3
 8004a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0a:	00e2      	lsls	r2, r4, #3
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	18e3      	adds	r3, r4, r3
 8004a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a18:	464b      	mov	r3, r9
 8004a1a:	eb45 0303 	adc.w	r3, r5, r3
 8004a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a3e:	4629      	mov	r1, r5
 8004a40:	008b      	lsls	r3, r1, #2
 8004a42:	4621      	mov	r1, r4
 8004a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a48:	4621      	mov	r1, r4
 8004a4a:	008a      	lsls	r2, r1, #2
 8004a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a50:	f7fb fde6 	bl	8000620 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b60      	ldr	r3, [pc, #384]	@ (8004bdc <UART_SetConfig+0x4e4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	011c      	lsls	r4, r3, #4
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	61b9      	str	r1, [r7, #24]
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a84:	4641      	mov	r1, r8
 8004a86:	1851      	adds	r1, r2, r1
 8004a88:	6139      	str	r1, [r7, #16]
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ace:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004adc:	4649      	mov	r1, r9
 8004ade:	008b      	lsls	r3, r1, #2
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	008a      	lsls	r2, r1, #2
 8004aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004aee:	f7fb fd97 	bl	8000620 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <UART_SetConfig+0x4e4>)
 8004afa:	fba3 2301 	umull	r2, r3, r3, r1
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2264      	movs	r2, #100	@ 0x64
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	1acb      	subs	r3, r1, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	@ 0x32
 8004b0c:	4a33      	ldr	r2, [pc, #204]	@ (8004bdc <UART_SetConfig+0x4e4>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b18:	441c      	add	r4, r3
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b22:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	415b      	adcs	r3, r3
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b38:	4641      	mov	r1, r8
 8004b3a:	1851      	adds	r1, r2, r1
 8004b3c:	6039      	str	r1, [r7, #0]
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b50:	4659      	mov	r1, fp
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4642      	mov	r2, r8
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	eb42 0303 	adc.w	r3, r2, r3
 8004b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	008b      	lsls	r3, r1, #2
 8004b90:	4641      	mov	r1, r8
 8004b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b96:	4641      	mov	r1, r8
 8004b98:	008a      	lsls	r2, r1, #2
 8004b9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b9e:	f7fb fd3f 	bl	8000620 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <UART_SetConfig+0x4e4>)
 8004ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	2164      	movs	r1, #100	@ 0x64
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	3332      	adds	r3, #50	@ 0x32
 8004bba:	4a08      	ldr	r2, [pc, #32]	@ (8004bdc <UART_SetConfig+0x4e4>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	f003 020f 	and.w	r2, r3, #15
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4422      	add	r2, r4
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bdc:	51eb851f 	.word	0x51eb851f

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	@ (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	@ (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 f818 	bl	8004c38 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	08004c70 	.word	0x08004c70
 8004c2c:	08004c70 	.word	0x08004c70
 8004c30:	08004c70 	.word	0x08004c70
 8004c34:	08004c74 	.word	0x08004c74

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
