
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003548  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003724  08003724  00005018  2**0
                  CONTENTS
  4 .ARM          00000008  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800372c  0800372c  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800372c  0800372c  0000472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003730  08003730  00004730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003734  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000018  0800374c  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800374c  000050f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b1  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d50  00000000  00000000  000101f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00011f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000785  00000000  00000000  00012908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002072f  00000000  00000000  0001308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caef  00000000  00000000  000337bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbc2b  00000000  00000000  000402ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  0010bf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036f4 	.word	0x080036f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	080036f4 	.word	0x080036f4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2101      	movs	r1, #1
 80004fc:	4878      	ldr	r0, [pc, #480]	@ (80006e0 <LCD_Init+0x1ec>)
 80004fe:	f001 fb55 	bl	8001bac <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8000502:	2201      	movs	r2, #1
 8000504:	2113      	movs	r1, #19
 8000506:	4877      	ldr	r0, [pc, #476]	@ (80006e4 <LCD_Init+0x1f0>)
 8000508:	f001 fb50 	bl	8001bac <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2102      	movs	r1, #2
 8000510:	4875      	ldr	r0, [pc, #468]	@ (80006e8 <LCD_Init+0x1f4>)
 8000512:	f001 fb4b 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000516:	2005      	movs	r0, #5
 8000518:	f000 ffec 	bl	80014f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	4871      	ldr	r0, [pc, #452]	@ (80006e8 <LCD_Init+0x1f4>)
 8000522:	f001 fb43 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000526:	2014      	movs	r0, #20
 8000528:	f000 ffe4 	bl	80014f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2102      	movs	r1, #2
 8000530:	486d      	ldr	r0, [pc, #436]	@ (80006e8 <LCD_Init+0x1f4>)
 8000532:	f001 fb3b 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000536:	2096      	movs	r0, #150	@ 0x96
 8000538:	f000 ffdc 	bl	80014f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2101      	movs	r1, #1
 8000540:	4867      	ldr	r0, [pc, #412]	@ (80006e0 <LCD_Init+0x1ec>)
 8000542:	f001 fb33 	bl	8001bac <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000546:	20e9      	movs	r0, #233	@ 0xe9
 8000548:	f000 f8d0 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x20);
 800054c:	2020      	movs	r0, #32
 800054e:	f000 f973 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 8000552:	2011      	movs	r0, #17
 8000554:	f000 f8ca 	bl	80006ec <LCD_CMD>
	HAL_Delay(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f000 ffcb 	bl	80014f4 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800055e:	20d1      	movs	r0, #209	@ 0xd1
 8000560:	f000 f8c4 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f967 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x71);
 800056a:	2071      	movs	r0, #113	@ 0x71
 800056c:	f000 f964 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x19);
 8000570:	2019      	movs	r0, #25
 8000572:	f000 f961 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000576:	20d0      	movs	r0, #208	@ 0xd0
 8000578:	f000 f8b8 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x07);
 800057c:	2007      	movs	r0, #7
 800057e:	f000 f95b 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 8000582:	2001      	movs	r0, #1
 8000584:	f000 f958 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x08);
 8000588:	2008      	movs	r0, #8
 800058a:	f000 f955 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800058e:	2036      	movs	r0, #54	@ 0x36
 8000590:	f000 f8ac 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000594:	20e8      	movs	r0, #232	@ 0xe8
 8000596:	f000 f94f 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 800059a:	203a      	movs	r0, #58	@ 0x3a
 800059c:	f000 f8a6 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 f949 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005a6:	20c1      	movs	r0, #193	@ 0xc1
 80005a8:	f000 f8a0 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x10);
 80005ac:	2010      	movs	r0, #16
 80005ae:	f000 f943 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x10);
 80005b2:	2010      	movs	r0, #16
 80005b4:	f000 f940 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x02);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f000 f93d 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x02);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 f93a 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80005c4:	20c0      	movs	r0, #192	@ 0xc0
 80005c6:	f000 f891 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f934 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x35);
 80005d0:	2035      	movs	r0, #53	@ 0x35
 80005d2:	f000 f931 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f92e 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f92b 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 f928 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x02);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f000 f925 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80005ee:	20c5      	movs	r0, #197	@ 0xc5
 80005f0:	f000 f87c 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80005f4:	2004      	movs	r0, #4
 80005f6:	f000 f91f 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80005fa:	20d2      	movs	r0, #210	@ 0xd2
 80005fc:	f000 f876 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x01);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 f919 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x44);
 8000606:	2044      	movs	r0, #68	@ 0x44
 8000608:	f000 f916 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 800060c:	20c8      	movs	r0, #200	@ 0xc8
 800060e:	f000 f86d 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x04);
 8000612:	2004      	movs	r0, #4
 8000614:	f000 f910 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x67);
 8000618:	2067      	movs	r0, #103	@ 0x67
 800061a:	f000 f90d 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x35);
 800061e:	2035      	movs	r0, #53	@ 0x35
 8000620:	f000 f90a 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x04);
 8000624:	2004      	movs	r0, #4
 8000626:	f000 f907 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x08);
 800062a:	2008      	movs	r0, #8
 800062c:	f000 f904 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x06);
 8000630:	2006      	movs	r0, #6
 8000632:	f000 f901 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x24);
 8000636:	2024      	movs	r0, #36	@ 0x24
 8000638:	f000 f8fe 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f8fb 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x37);
 8000642:	2037      	movs	r0, #55	@ 0x37
 8000644:	f000 f8f8 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x40);
 8000648:	2040      	movs	r0, #64	@ 0x40
 800064a:	f000 f8f5 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x03);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f8f2 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x10);
 8000654:	2010      	movs	r0, #16
 8000656:	f000 f8ef 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x08);
 800065a:	2008      	movs	r0, #8
 800065c:	f000 f8ec 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x80);
 8000660:	2080      	movs	r0, #128	@ 0x80
 8000662:	f000 f8e9 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f8e6 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 800066c:	202a      	movs	r0, #42	@ 0x2a
 800066e:	f000 f83d 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f8e0 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f8dd 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f8da 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x3F);
 8000684:	203f      	movs	r0, #63	@ 0x3f
 8000686:	f000 f8d7 	bl	8000838 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800068a:	202b      	movs	r0, #43	@ 0x2b
 800068c:	f000 f82e 	bl	80006ec <LCD_CMD>
	LCD_DATA(0x00);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f8d1 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f8ce 	bl	8000838 <LCD_DATA>
	LCD_DATA(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f8cb 	bl	8000838 <LCD_DATA>
	LCD_DATA(0xE0);
 80006a2:	20e0      	movs	r0, #224	@ 0xe0
 80006a4:	f000 f8c8 	bl	8000838 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006a8:	2029      	movs	r0, #41	@ 0x29
 80006aa:	f000 f81f 	bl	80006ec <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006ae:	202c      	movs	r0, #44	@ 0x2c
 80006b0:	f000 f81c 	bl	80006ec <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006b4:	2020      	movs	r0, #32
 80006b6:	f000 f819 	bl	80006ec <LCD_CMD>
	HAL_Delay(120);
 80006ba:	2078      	movs	r0, #120	@ 0x78
 80006bc:	f000 ff1a 	bl	80014f4 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006c0:	2011      	movs	r0, #17
 80006c2:	f000 f813 	bl	80006ec <LCD_CMD>
	HAL_Delay(120);
 80006c6:	2078      	movs	r0, #120	@ 0x78
 80006c8:	f000 ff14 	bl	80014f4 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80006cc:	2029      	movs	r0, #41	@ 0x29
 80006ce:	f000 f80d 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <LCD_Init+0x1ec>)
 80006d8:	f001 fa68 	bl	8001bac <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020800 	.word	0x40020800

080006ec <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	484c      	ldr	r0, [pc, #304]	@ (800082c <LCD_CMD+0x140>)
 80006fc:	f001 fa56 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2102      	movs	r1, #2
 8000704:	4849      	ldr	r0, [pc, #292]	@ (800082c <LCD_CMD+0x140>)
 8000706:	f001 fa51 	bl	8001bac <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071a:	4844      	ldr	r0, [pc, #272]	@ (800082c <LCD_CMD+0x140>)
 800071c:	f001 fa46 	bl	8001bac <HAL_GPIO_WritePin>
 8000720:	e005      	b.n	800072e <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000728:	4840      	ldr	r0, [pc, #256]	@ (800082c <LCD_CMD+0x140>)
 800072a:	f001 fa3f 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d005      	beq.n	8000744 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	@ 0x80
 800073c:	483c      	ldr	r0, [pc, #240]	@ (8000830 <LCD_CMD+0x144>)
 800073e:	f001 fa35 	bl	8001bac <HAL_GPIO_WritePin>
 8000742:	e004      	b.n	800074e <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2180      	movs	r1, #128	@ 0x80
 8000748:	4839      	ldr	r0, [pc, #228]	@ (8000830 <LCD_CMD+0x144>)
 800074a:	f001 fa2f 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	2b00      	cmp	r3, #0
 8000756:	d006      	beq.n	8000766 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075e:	4833      	ldr	r0, [pc, #204]	@ (800082c <LCD_CMD+0x140>)
 8000760:	f001 fa24 	bl	8001bac <HAL_GPIO_WritePin>
 8000764:	e005      	b.n	8000772 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076c:	482f      	ldr	r0, [pc, #188]	@ (800082c <LCD_CMD+0x140>)
 800076e:	f001 fa1d 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d005      	beq.n	8000788 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	482c      	ldr	r0, [pc, #176]	@ (8000834 <LCD_CMD+0x148>)
 8000782:	f001 fa13 	bl	8001bac <HAL_GPIO_WritePin>
 8000786:	e004      	b.n	8000792 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4829      	ldr	r0, [pc, #164]	@ (8000834 <LCD_CMD+0x148>)
 800078e:	f001 fa0d 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2120      	movs	r1, #32
 80007a0:	4824      	ldr	r0, [pc, #144]	@ (8000834 <LCD_CMD+0x148>)
 80007a2:	f001 fa03 	bl	8001bac <HAL_GPIO_WritePin>
 80007a6:	e004      	b.n	80007b2 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2120      	movs	r1, #32
 80007ac:	4821      	ldr	r0, [pc, #132]	@ (8000834 <LCD_CMD+0x148>)
 80007ae:	f001 f9fd 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	481c      	ldr	r0, [pc, #112]	@ (8000834 <LCD_CMD+0x148>)
 80007c2:	f001 f9f3 	bl	8001bac <HAL_GPIO_WritePin>
 80007c6:	e004      	b.n	80007d2 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2110      	movs	r1, #16
 80007cc:	4819      	ldr	r0, [pc, #100]	@ (8000834 <LCD_CMD+0x148>)
 80007ce:	f001 f9ed 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d006      	beq.n	80007ea <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e2:	4814      	ldr	r0, [pc, #80]	@ (8000834 <LCD_CMD+0x148>)
 80007e4:	f001 f9e2 	bl	8001bac <HAL_GPIO_WritePin>
 80007e8:	e005      	b.n	80007f6 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f0:	4810      	ldr	r0, [pc, #64]	@ (8000834 <LCD_CMD+0x148>)
 80007f2:	f001 f9db 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da06      	bge.n	800080c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <LCD_CMD+0x140>)
 8000806:	f001 f9d1 	bl	8001bac <HAL_GPIO_WritePin>
 800080a:	e005      	b.n	8000818 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <LCD_CMD+0x140>)
 8000814:	f001 f9ca 	bl	8001bac <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2102      	movs	r1, #2
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <LCD_CMD+0x140>)
 800081e:	f001 f9c5 	bl	8001bac <HAL_GPIO_WritePin>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020000 	.word	0x40020000
 8000830:	40020800 	.word	0x40020800
 8000834:	40020400 	.word	0x40020400

08000838 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2110      	movs	r1, #16
 8000846:	484c      	ldr	r0, [pc, #304]	@ (8000978 <LCD_DATA+0x140>)
 8000848:	f001 f9b0 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2102      	movs	r1, #2
 8000850:	4849      	ldr	r0, [pc, #292]	@ (8000978 <LCD_DATA+0x140>)
 8000852:	f001 f9ab 	bl	8001bac <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d006      	beq.n	800086e <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000866:	4844      	ldr	r0, [pc, #272]	@ (8000978 <LCD_DATA+0x140>)
 8000868:	f001 f9a0 	bl	8001bac <HAL_GPIO_WritePin>
 800086c:	e005      	b.n	800087a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	4840      	ldr	r0, [pc, #256]	@ (8000978 <LCD_DATA+0x140>)
 8000876:	f001 f999 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d005      	beq.n	8000890 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	483c      	ldr	r0, [pc, #240]	@ (800097c <LCD_DATA+0x144>)
 800088a:	f001 f98f 	bl	8001bac <HAL_GPIO_WritePin>
 800088e:	e004      	b.n	800089a <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	4839      	ldr	r0, [pc, #228]	@ (800097c <LCD_DATA+0x144>)
 8000896:	f001 f989 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d006      	beq.n	80008b2 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008aa:	4833      	ldr	r0, [pc, #204]	@ (8000978 <LCD_DATA+0x140>)
 80008ac:	f001 f97e 	bl	8001bac <HAL_GPIO_WritePin>
 80008b0:	e005      	b.n	80008be <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b8:	482f      	ldr	r0, [pc, #188]	@ (8000978 <LCD_DATA+0x140>)
 80008ba:	f001 f977 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d005      	beq.n	80008d4 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2108      	movs	r1, #8
 80008cc:	482c      	ldr	r0, [pc, #176]	@ (8000980 <LCD_DATA+0x148>)
 80008ce:	f001 f96d 	bl	8001bac <HAL_GPIO_WritePin>
 80008d2:	e004      	b.n	80008de <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2108      	movs	r1, #8
 80008d8:	4829      	ldr	r0, [pc, #164]	@ (8000980 <LCD_DATA+0x148>)
 80008da:	f001 f967 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2120      	movs	r1, #32
 80008ec:	4824      	ldr	r0, [pc, #144]	@ (8000980 <LCD_DATA+0x148>)
 80008ee:	f001 f95d 	bl	8001bac <HAL_GPIO_WritePin>
 80008f2:	e004      	b.n	80008fe <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2120      	movs	r1, #32
 80008f8:	4821      	ldr	r0, [pc, #132]	@ (8000980 <LCD_DATA+0x148>)
 80008fa:	f001 f957 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 0320 	and.w	r3, r3, #32
 8000904:	2b00      	cmp	r3, #0
 8000906:	d005      	beq.n	8000914 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	481c      	ldr	r0, [pc, #112]	@ (8000980 <LCD_DATA+0x148>)
 800090e:	f001 f94d 	bl	8001bac <HAL_GPIO_WritePin>
 8000912:	e004      	b.n	800091e <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	4819      	ldr	r0, [pc, #100]	@ (8000980 <LCD_DATA+0x148>)
 800091a:	f001 f947 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <LCD_DATA+0x148>)
 8000930:	f001 f93c 	bl	8001bac <HAL_GPIO_WritePin>
 8000934:	e005      	b.n	8000942 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800093c:	4810      	ldr	r0, [pc, #64]	@ (8000980 <LCD_DATA+0x148>)
 800093e:	f001 f935 	bl	8001bac <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	da06      	bge.n	8000958 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <LCD_DATA+0x140>)
 8000952:	f001 f92b 	bl	8001bac <HAL_GPIO_WritePin>
 8000956:	e005      	b.n	8000964 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095e:	4806      	ldr	r0, [pc, #24]	@ (8000978 <LCD_DATA+0x140>)
 8000960:	f001 f924 	bl	8001bac <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2102      	movs	r1, #2
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <LCD_DATA+0x140>)
 800096a:	f001 f91f 	bl	8001bac <HAL_GPIO_WritePin>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020400 	.word	0x40020400

08000984 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000992:	202a      	movs	r0, #42	@ 0x2a
 8000994:	f7ff feaa 	bl	80006ec <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff4a 	bl	8000838 <LCD_DATA>
	LCD_DATA(x1);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff45 	bl	8000838 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff3f 	bl	8000838 <LCD_DATA>
	LCD_DATA(x2);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff3a 	bl	8000838 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 80009c4:	202b      	movs	r0, #43	@ 0x2b
 80009c6:	f7ff fe91 	bl	80006ec <LCD_CMD>
	LCD_DATA(y1 >> 8);
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff31 	bl	8000838 <LCD_DATA>
	LCD_DATA(y1);
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff2c 	bl	8000838 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff26 	bl	8000838 <LCD_DATA>
	LCD_DATA(y2);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff21 	bl	8000838 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 80009f6:	202c      	movs	r0, #44	@ 0x2c
 80009f8:	f7ff fe78 	bl	80006ec <LCD_CMD>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a0c:	202c      	movs	r0, #44	@ 0x2c
 8000a0e:	f7ff fe6d 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <LCD_Clear+0x80>)
 8000a18:	f001 f8c8 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <LCD_Clear+0x84>)
 8000a22:	f001 f8c3 	bl	8001bac <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a26:	23ef      	movs	r3, #239	@ 0xef
 8000a28:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ffa8 	bl	8000984 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e016      	b.n	8000a68 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	e00d      	b.n	8000a5c <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fef6 	bl	8000838 <LCD_DATA>
			LCD_DATA(c);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fef1 	bl	8000838 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2bef      	cmp	r3, #239	@ 0xef
 8000a60:	d9ee      	bls.n	8000a40 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a6e:	d3e4      	bcc.n	8000a3a <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2101      	movs	r1, #1
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <LCD_Clear+0x84>)
 8000a76:	f001 f899 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400

08000a8c <V_line>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000a9a:	202c      	movs	r0, #44	@ 0x2c
 8000a9c:	f7ff fe26 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	4817      	ldr	r0, [pc, #92]	@ (8000b04 <V_line+0x78>)
 8000aa6:	f001 f881 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	4816      	ldr	r0, [pc, #88]	@ (8000b08 <V_line+0x7c>)
 8000ab0:	f001 f87c 	bl	8001bac <HAL_GPIO_WritePin>
	l = l + y;
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff ff5e 	bl	8000984 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00d      	b.n	8000aea <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff feaf 	bl	8000838 <LCD_DATA>
		LCD_DATA(c);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff feaa 	bl	8000838 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d9ed      	bls.n	8000ace <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <V_line+0x7c>)
 8000af8:	f001 f858 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400

08000b0c <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b1a:	202c      	movs	r0, #44	@ 0x2c
 8000b1c:	f7ff fde6 	bl	80006ec <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	4824      	ldr	r0, [pc, #144]	@ (8000bb8 <FillRect+0xac>)
 8000b26:	f001 f841 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4823      	ldr	r0, [pc, #140]	@ (8000bbc <FillRect+0xb0>)
 8000b30:	f001 f83c 	bl	8001bac <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff ff18 	bl	8000984 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	fb02 f303 	mul.w	r3, r2, r3
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
 8000b66:	e01a      	b.n	8000b9e <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	e010      	b.n	8000b90 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe5f 	bl	8000838 <LCD_DATA>
			LCD_DATA(c);
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fe5a 	bl	8000838 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	3b02      	subs	r3, #2
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8ea      	bhi.n	8000b6e <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	6a3b      	ldr	r3, [r7, #32]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d8e0      	bhi.n	8000b68 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <FillRect+0xb0>)
 8000bac:	f000 fffe 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <P1_erasePath>:
	position_e1[1]+=20;
	HAL_Delay(100);
	position_e1[1]-=40;

}*/
void P1_erasePath(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af02      	add	r7, sp, #8
	if (position_p1[2]==8){
 8000bc6:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <P1_erasePath+0x9c>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d10d      	bne.n	8000bea <P1_erasePath+0x2a>
		FillRect(position_p1[0]-20, position_p1[1], 20, 20, 0xFFFF);
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <P1_erasePath+0x9c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3b14      	subs	r3, #20
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <P1_erasePath+0x9c>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2314      	movs	r3, #20
 8000be4:	2214      	movs	r2, #20
 8000be6:	f7ff ff91 	bl	8000b0c <FillRect>
	}
	if (position_p1[2]==2){
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <P1_erasePath+0x9c>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d10d      	bne.n	8000c0e <P1_erasePath+0x4e>
		FillRect(position_p1[0]+20, position_p1[1], 20, 20, 0xFFFF);
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <P1_erasePath+0x9c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <P1_erasePath+0x9c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2314      	movs	r3, #20
 8000c08:	2214      	movs	r2, #20
 8000c0a:	f7ff ff7f 	bl	8000b0c <FillRect>
	}
	if (position_p1[2]==6){
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <P1_erasePath+0x9c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d10d      	bne.n	8000c32 <P1_erasePath+0x72>
		FillRect(position_p1[0], position_p1[1]-20, 20, 20, 0xFFFF);
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <P1_erasePath+0x9c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <P1_erasePath+0x9c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	3b14      	subs	r3, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2314      	movs	r3, #20
 8000c2c:	2214      	movs	r2, #20
 8000c2e:	f7ff ff6d 	bl	8000b0c <FillRect>
	}
	if (position_p1[2]==4){
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <P1_erasePath+0x9c>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d10d      	bne.n	8000c56 <P1_erasePath+0x96>
		FillRect(position_p1[0], position_p1[1]+20, 20, 20, 0xFFFF);
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <P1_erasePath+0x9c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <P1_erasePath+0x9c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	3314      	adds	r3, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2314      	movs	r3, #20
 8000c50:	2214      	movs	r2, #20
 8000c52:	f7ff ff5b 	bl	8000b0c <FillRect>
	}
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000

08000c60 <init_enemigo>:
//Enemigo tipo 1
	//Iniciar enemigo
	void init_enemigo(enemigo_c1 *enemigo, unsigned int x, unsigned int y, unsigned int vida) {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
		enemigo->x = x;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	601a      	str	r2, [r3, #0]
		enemigo->y = y;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	605a      	str	r2, [r3, #4]
		enemigo->v = vida;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	609a      	str	r2, [r3, #8]
		enemigo->eliminado = 0; // Inicialmente no está eliminado
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
	}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <dibujar_enemigo>:
	//Dibujar enemigo
	void dibujar_enemigo(enemigo_c1 *enemigo, unsigned int color) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af02      	add	r7, sp, #8
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	    FillRect(enemigo->x, enemigo->y, 20, 20, color);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6859      	ldr	r1, [r3, #4]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2314      	movs	r3, #20
 8000caa:	2214      	movs	r2, #20
 8000cac:	f7ff ff2e 	bl	8000b0c <FillRect>
	}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <verificar_vida>:

	//Validar vida enemigo
	void verificar_vida(enemigo_c1 *enemigo, unsigned int color_fondo) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	    if (enemigo->v == 0 && enemigo->eliminado == 0) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10a      	bne.n	8000ce0 <verificar_vida+0x28>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d106      	bne.n	8000ce0 <verificar_vida+0x28>
	        // Dibuja el cuadrado del color de fondo solo una vez
	        dibujar_enemigo(enemigo, color_fondo);
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffdc 	bl	8000c92 <dibujar_enemigo>
	        enemigo->eliminado = 1;  // Marca al enemigo como eliminado
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
	    }
	}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <verificar_golpe>:
	//Validar si se golpeo un enemigo del tipo 1
	void verificar_golpe(enemigo_c1 *enemigo, unsigned int *position_p1) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	    if (position_p1[2] == 8) {  // Jugador mirando hacia la derecha
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	3308      	adds	r3, #8
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d10b      	bne.n	8000d14 <verificar_golpe+0x2c>
	        if (enemigo->x == position_p1[0] + 20) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3314      	adds	r3, #20
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d104      	bne.n	8000d14 <verificar_golpe+0x2c>
	            enemigo->v -= 1;  // Resta un punto de vida
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
	        }
	    }

	    if (position_p1[2] == 2) {  // Jugador mirando hacia la izquierda
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	3308      	adds	r3, #8
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d10b      	bne.n	8000d36 <verificar_golpe+0x4e>
	        if (enemigo->x == position_p1[0] - 20) {
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3b14      	subs	r3, #20
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d104      	bne.n	8000d36 <verificar_golpe+0x4e>
	            enemigo->v -= 1;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	609a      	str	r2, [r3, #8]
	        }
	    }

	    if (position_p1[2] == 6) {  // Jugador mirando hacia abajo
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	3308      	adds	r3, #8
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d10c      	bne.n	8000d5a <verificar_golpe+0x72>
	        if (enemigo->y == position_p1[1] + 20) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3314      	adds	r3, #20
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d104      	bne.n	8000d5a <verificar_golpe+0x72>
	            enemigo->v -= 1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	609a      	str	r2, [r3, #8]
	        }
	    }

	    if (position_p1[2] == 4) {  // Jugador mirando hacia arriba
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d10c      	bne.n	8000d7e <verificar_golpe+0x96>
	        if (enemigo->y == position_p1[1] - 20) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3b14      	subs	r3, #20
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d104      	bne.n	8000d7e <verificar_golpe+0x96>
	            enemigo->v -= 1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
	        }
	    }
	}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f000 fb3d 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f849 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 f913 	bl	8000fc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d9e:	f000 f8b1 	bl	8000f04 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000da2:	f000 f8e5 	bl	8000f70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8000da6:	f7ff fba5 	bl	80004f4 <LCD_Init>
	LCD_Clear(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fe2a 	bl	8000a04 <LCD_Clear>

	//Fondo
	FillRect(0, 0, 319, 239, 0xFFFF);
 8000db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	23ef      	movs	r3, #239	@ 0xef
 8000db8:	f240 123f 	movw	r2, #319	@ 0x13f
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fea4 	bl	8000b0c <FillRect>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	22f0      	movs	r2, #240	@ 0xf0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	20a0      	movs	r0, #160	@ 0xa0
 8000dcc:	f7ff fe5e 	bl	8000a8c <V_line>
	//FillRect(0, 0, 319, 206, 0x1911);

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	  // Activar bandera interrupcion
	  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4912      	ldr	r1, [pc, #72]	@ (8000e1c <main+0x90>)
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <main+0x94>)
 8000dd6:	f001 fd3e 	bl	8002856 <HAL_UART_Receive_IT>

	  //Enemigo 1
	  init_enemigo(&e1, 20, 20, 3);
 8000dda:	2303      	movs	r3, #3
 8000ddc:	2214      	movs	r2, #20
 8000dde:	2114      	movs	r1, #20
 8000de0:	4810      	ldr	r0, [pc, #64]	@ (8000e24 <main+0x98>)
 8000de2:	f7ff ff3d 	bl	8000c60 <init_enemigo>
	  dibujar_enemigo(&e1, 0x07E0);
 8000de6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000dea:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <main+0x98>)
 8000dec:	f7ff ff51 	bl	8000c92 <dibujar_enemigo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Jugador 1
		FillRect(position_p1[0], position_p1[1], 20, 20, 0xF800);
 8000df0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <main+0x9c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <main+0x9c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2314      	movs	r3, #20
 8000e04:	2214      	movs	r2, #20
 8000e06:	f7ff fe81 	bl	8000b0c <FillRect>
		P1_erasePath();
 8000e0a:	f7ff fed9 	bl	8000bc0 <P1_erasePath>

		//Enemigo 1
		verificar_vida(&e1, 0xFFFF);
 8000e0e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e12:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <main+0x98>)
 8000e14:	f7ff ff50 	bl	8000cb8 <verificar_vida>
		FillRect(position_p1[0], position_p1[1], 20, 20, 0xF800);
 8000e18:	bf00      	nop
 8000e1a:	e7e9      	b.n	8000df0 <main+0x64>
 8000e1c:	200000d4 	.word	0x200000d4
 8000e20:	2000008c 	.word	0x2000008c
 8000e24:	200000e0 	.word	0x200000e0
 8000e28:	20000000 	.word	0x20000000

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	@ 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2234      	movs	r2, #52	@ 0x34
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fc2e 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e78:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	2310      	movs	r3, #16
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ea4:	2350      	movs	r3, #80	@ 0x50
 8000ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f955 	bl	8002168 <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ec4:	f000 f968 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fe7b 	bl	8001be0 <HAL_RCC_ClockConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ef0:	f000 f952 	bl	8001198 <Error_Handler>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3750      	adds	r7, #80	@ 0x50
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f001 fba5 	bl	80026a4 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f91a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000034 	.word	0x20000034
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <MX_USART2_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f001 fc05 	bl	80027b6 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f8f1 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000008c 	.word	0x2000008c
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b3b      	ldr	r3, [pc, #236]	@ (80010cc <MX_GPIO_Init+0x108>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80010cc <MX_GPIO_Init+0x108>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b38      	ldr	r3, [pc, #224]	@ (80010cc <MX_GPIO_Init+0x108>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <MX_GPIO_Init+0x108>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a33      	ldr	r2, [pc, #204]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <MX_GPIO_Init+0x108>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a25      	ldr	r2, [pc, #148]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <MX_GPIO_Init+0x108>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2182      	movs	r1, #130	@ 0x82
 800104e:	4820      	ldr	r0, [pc, #128]	@ (80010d0 <MX_GPIO_Init+0x10c>)
 8001050:	f000 fdac 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	f240 7113 	movw	r1, #1811	@ 0x713
 800105a:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <MX_GPIO_Init+0x110>)
 800105c:	f000 fda6 	bl	8001bac <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001060:	2200      	movs	r2, #0
 8001062:	f240 4179 	movw	r1, #1145	@ 0x479
 8001066:	481c      	ldr	r0, [pc, #112]	@ (80010d8 <MX_GPIO_Init+0x114>)
 8001068:	f000 fda0 	bl	8001bac <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 800106c:	2382      	movs	r3, #130	@ 0x82
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <MX_GPIO_Init+0x10c>)
 8001084:	f000 fbfe 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001088:	f240 7313 	movw	r3, #1811	@ 0x713
 800108c:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	2302      	movs	r3, #2
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <MX_GPIO_Init+0x110>)
 80010a2:	f000 fbef 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80010a6:	f240 4379 	movw	r3, #1145	@ 0x479
 80010aa:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <MX_GPIO_Init+0x114>)
 80010c0:	f000 fbe0 	bl	8001884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400

080010dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if(buffer[0] == 'u'){
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <HAL_UART_RxCpltCallback+0xac>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b75      	cmp	r3, #117	@ 0x75
 80010ea:	d10b      	bne.n	8001104 <HAL_UART_RxCpltCallback+0x28>
		if (position_p1[0]<140){
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b8b      	cmp	r3, #139	@ 0x8b
 80010f2:	dc07      	bgt.n	8001104 <HAL_UART_RxCpltCallback+0x28>
		position_p1[0]+=20;
 80010f4:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3314      	adds	r3, #20
 80010fa:	4a24      	ldr	r2, [pc, #144]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 80010fc:	6013      	str	r3, [r2, #0]
		position_p1[2]=8;}
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001100:	2208      	movs	r2, #8
 8001102:	609a      	str	r2, [r3, #8]
	}
	if(buffer[0] == 'd'){
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <HAL_UART_RxCpltCallback+0xac>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b64      	cmp	r3, #100	@ 0x64
 800110a:	d10b      	bne.n	8001124 <HAL_UART_RxCpltCallback+0x48>
		if (position_p1[0]>0){
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd07      	ble.n	8001124 <HAL_UART_RxCpltCallback+0x48>
		position_p1[0]-=20;
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3b14      	subs	r3, #20
 800111a:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800111c:	6013      	str	r3, [r2, #0]
		position_p1[2]=2;}
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001120:	2202      	movs	r2, #2
 8001122:	609a      	str	r2, [r3, #8]
	}
	if(buffer[0] == 'r'){
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_UART_RxCpltCallback+0xac>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b72      	cmp	r3, #114	@ 0x72
 800112a:	d10b      	bne.n	8001144 <HAL_UART_RxCpltCallback+0x68>
		if (position_p1[1]<220){
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2bdb      	cmp	r3, #219	@ 0xdb
 8001132:	dc07      	bgt.n	8001144 <HAL_UART_RxCpltCallback+0x68>
		position_p1[1]+=20;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	3314      	adds	r3, #20
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800113c:	6053      	str	r3, [r2, #4]
		position_p1[2]=6;}
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001140:	2206      	movs	r2, #6
 8001142:	609a      	str	r2, [r3, #8]
	}
	if(buffer[0] == 'l'){
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_UART_RxCpltCallback+0xac>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b6c      	cmp	r3, #108	@ 0x6c
 800114a:	d10b      	bne.n	8001164 <HAL_UART_RxCpltCallback+0x88>
		if(position_p1[1]>0){
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	dd07      	ble.n	8001164 <HAL_UART_RxCpltCallback+0x88>
		position_p1[1]-=20;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	3b14      	subs	r3, #20
 800115a:	4a0c      	ldr	r2, [pc, #48]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800115c:	6053      	str	r3, [r2, #4]
		position_p1[2]=4;}
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 8001160:	2204      	movs	r2, #4
 8001162:	609a      	str	r2, [r3, #8]
	}
	if (buffer[0]=='b'){
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_UART_RxCpltCallback+0xac>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b62      	cmp	r3, #98	@ 0x62
 800116a:	d103      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x98>
	    verificar_golpe(&e1, position_p1);
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <HAL_UART_RxCpltCallback+0xb0>)
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <HAL_UART_RxCpltCallback+0xb4>)
 8001170:	f7ff fdba 	bl	8000ce8 <verificar_golpe>
	    //verificar_golpe(&e2, position_p1);
	    //verificar_golpe(&e3, position_p1);
	}
	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	4904      	ldr	r1, [pc, #16]	@ (8001188 <HAL_UART_RxCpltCallback+0xac>)
 8001178:	4806      	ldr	r0, [pc, #24]	@ (8001194 <HAL_UART_RxCpltCallback+0xb8>)
 800117a:	f001 fb6c 	bl	8002856 <HAL_UART_Receive_IT>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000d4 	.word	0x200000d4
 800118c:	20000000 	.word	0x20000000
 8001190:	200000e0 	.word	0x200000e0
 8001194:	2000008c 	.word	0x2000008c

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_Handler+0x8>

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <HAL_SPI_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12b      	bne.n	800126e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800124e:	23e0      	movs	r3, #224	@ 0xe0
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125e:	2305      	movs	r3, #5
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_SPI_MspInit+0x8c>)
 800126a:	f000 fb0b 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	@ 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40013000 	.word	0x40013000
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <HAL_UART_MspInit+0x94>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d133      	bne.n	800130e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_UART_MspInit+0x98>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <HAL_UART_MspInit+0x98>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_UART_MspInit+0x98>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_UART_MspInit+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a14      	ldr	r2, [pc, #80]	@ (800131c <HAL_UART_MspInit+0x98>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_UART_MspInit+0x98>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012de:	230c      	movs	r3, #12
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ee:	2307      	movs	r3, #7
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <HAL_UART_MspInit+0x9c>)
 80012fa:	f000 fac3 	bl	8001884 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2026      	movs	r0, #38	@ 0x26
 8001304:	f000 f9f5 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001308:	2026      	movs	r0, #38	@ 0x26
 800130a:	f000 fa0e 	bl	800172a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	@ 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f89b 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <USART2_IRQHandler+0x10>)
 800138a:	f001 fa89 	bl	80028a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000008c 	.word	0x2000008c

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013c0:	f7ff ffea 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	@ (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f002 f95f 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fccd 	bl	8000d8c <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001400:	08003734 	.word	0x08003734
  ldr r2, =_sbss
 8001404:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001408:	200000f4 	.word	0x200000f4

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f94f 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff feae 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f967 	bl	8001746 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f92f 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	20000014 	.word	0x20000014
 80014b0:	20000010 	.word	0x20000010

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000014 	.word	0x20000014
 80014d8:	200000f0 	.word	0x200000f0

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200000f0 	.word	0x200000f0

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000014 	.word	0x20000014

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	@ (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	@ (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	@ (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff feb6 	bl	80014dc <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e052      	b.n	8001836 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0216 	bic.w	r2, r2, #22
 800179e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <HAL_DMA_Abort+0x62>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0208 	bic.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e0:	e013      	b.n	800180a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017e2:	f7ff fe7b 	bl	80014dc <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d90c      	bls.n	800180a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2220      	movs	r2, #32
 80017f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2203      	movs	r2, #3
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e015      	b.n	8001836 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e4      	bne.n	80017e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181c:	223f      	movs	r2, #63	@ 0x3f
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d004      	beq.n	800185c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2280      	movs	r2, #128	@ 0x80
 8001856:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e00c      	b.n	8001876 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2205      	movs	r2, #5
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e165      	b.n	8001b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8154 	bne.w	8001b66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80ae 	beq.w	8001b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b84 <HAL_GPIO_Init+0x300>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a5c      	ldr	r2, [pc, #368]	@ (8001b84 <HAL_GPIO_Init+0x300>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b84 <HAL_GPIO_Init+0x300>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a58      	ldr	r2, [pc, #352]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b8c <HAL_GPIO_Init+0x308>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d025      	beq.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4e      	ldr	r2, [pc, #312]	@ (8001b90 <HAL_GPIO_Init+0x30c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01f      	beq.n	8001a9a <HAL_GPIO_Init+0x216>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b94 <HAL_GPIO_Init+0x310>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x212>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	@ (8001b98 <HAL_GPIO_Init+0x314>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x20e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b9c <HAL_GPIO_Init+0x318>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x20a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba0 <HAL_GPIO_Init+0x31c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x206>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ba4 <HAL_GPIO_Init+0x320>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x202>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e00c      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e00a      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x21c>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae2:	4a31      	ldr	r2, [pc, #196]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b60:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f ae96 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0cc      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b68      	ldr	r3, [pc, #416]	@ (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d90c      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b65      	ldr	r3, [pc, #404]	@ (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b63      	ldr	r3, [pc, #396]	@ (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b8      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b59      	ldr	r3, [pc, #356]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a58      	ldr	r2, [pc, #352]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c4c:	4b53      	ldr	r3, [pc, #332]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a52      	ldr	r2, [pc, #328]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b50      	ldr	r3, [pc, #320]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	494d      	ldr	r1, [pc, #308]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d044      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d119      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e067      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b37      	ldr	r3, [pc, #220]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4934      	ldr	r1, [pc, #208]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff fc04 	bl	80014dc <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff fc00 	bl	80014dc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e04f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d20c      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e032      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4916      	ldr	r1, [pc, #88]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	490e      	ldr	r1, [pc, #56]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d66:	f000 f855 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	490a      	ldr	r1, [pc, #40]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	5ccb      	ldrb	r3, [r1, r3]
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fb64 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	0800370c 	.word	0x0800370c
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	20000010 	.word	0x20000010

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2000000c 	.word	0x2000000c

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	0800371c 	.word	0x0800371c

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffdc 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	@ (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	0800371c 	.word	0x0800371c

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e18:	b0a6      	sub	sp, #152	@ 0x98
 8001e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3a:	4bc8      	ldr	r3, [pc, #800]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	f200 817e 	bhi.w	8002144 <HAL_RCC_GetSysClockFreq+0x330>
 8001e48:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e85 	.word	0x08001e85
 8001e54:	08002145 	.word	0x08002145
 8001e58:	08002145 	.word	0x08002145
 8001e5c:	08002145 	.word	0x08002145
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08002145 	.word	0x08002145
 8001e68:	08002145 	.word	0x08002145
 8001e6c:	08002145 	.word	0x08002145
 8001e70:	08001e95 	.word	0x08001e95
 8001e74:	08002145 	.word	0x08002145
 8001e78:	08002145 	.word	0x08002145
 8001e7c:	08002145 	.word	0x08002145
 8001e80:	08001fff 	.word	0x08001fff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4bb6      	ldr	r3, [pc, #728]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001e8a:	e15f      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4bb5      	ldr	r3, [pc, #724]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e92:	e15b      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e94:	4bb1      	ldr	r3, [pc, #708]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea0:	4bae      	ldr	r3, [pc, #696]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d031      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eac:	4bab      	ldr	r3, [pc, #684]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001eb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ec4:	4ba7      	ldr	r3, [pc, #668]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ec6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eca:	462a      	mov	r2, r5
 8001ecc:	fb03 f202 	mul.w	r2, r3, r2
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	4aa2      	ldr	r2, [pc, #648]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x350>)
 8001edc:	4621      	mov	r1, r4
 8001ede:	fba1 1202 	umull	r1, r2, r1, r2
 8001ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001ee8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001eea:	4413      	add	r3, r2
 8001eec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ef6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ef8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001efc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001f00:	f7fe f980 	bl	8000204 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f0e:	e064      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b92      	ldr	r3, [pc, #584]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	2200      	movs	r2, #0
 8001f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f1a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f24:	2300      	movs	r3, #0
 8001f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f28:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	462b      	mov	r3, r5
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	0159      	lsls	r1, r3, #5
 8001f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3e:	0150      	lsls	r0, r2, #5
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4621      	mov	r1, r4
 8001f46:	1a51      	subs	r1, r2, r1
 8001f48:	6139      	str	r1, [r7, #16]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f5e:	4659      	mov	r1, fp
 8001f60:	018b      	lsls	r3, r1, #6
 8001f62:	4651      	mov	r1, sl
 8001f64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f68:	4651      	mov	r1, sl
 8001f6a:	018a      	lsls	r2, r1, #6
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	ebb2 0801 	subs.w	r8, r2, r1
 8001f72:	4659      	mov	r1, fp
 8001f74:	eb63 0901 	sbc.w	r9, r3, r1
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	4699      	mov	r9, r3
 8001f90:	4623      	mov	r3, r4
 8001f92:	eb18 0303 	adds.w	r3, r8, r3
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	462b      	mov	r3, r5
 8001f9a:	eb49 0303 	adc.w	r3, r9, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fac:	4629      	mov	r1, r5
 8001fae:	028b      	lsls	r3, r1, #10
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	028a      	lsls	r2, r1, #10
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8001fc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fcc:	f7fe f91a 	bl	8000204 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fda:	4b60      	ldr	r3, [pc, #384]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001fec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001ffc:	e0a6      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ffe:	4b57      	ldr	r3, [pc, #348]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200a:	4b54      	ldr	r3, [pc, #336]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d02a      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002016:	4b51      	ldr	r3, [pc, #324]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	099b      	lsrs	r3, r3, #6
 800201c:	2200      	movs	r2, #0
 800201e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002024:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002028:	2100      	movs	r1, #0
 800202a:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x350>)
 800202c:	fb03 f201 	mul.w	r2, r3, r1
 8002030:	2300      	movs	r3, #0
 8002032:	fb00 f303 	mul.w	r3, r0, r3
 8002036:	4413      	add	r3, r2
 8002038:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x350>)
 800203a:	fba0 1202 	umull	r1, r2, r0, r2
 800203e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002040:	460a      	mov	r2, r1
 8002042:	673a      	str	r2, [r7, #112]	@ 0x70
 8002044:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002046:	4413      	add	r3, r2
 8002048:	677b      	str	r3, [r7, #116]	@ 0x74
 800204a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800204e:	2200      	movs	r2, #0
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
 8002052:	637a      	str	r2, [r7, #52]	@ 0x34
 8002054:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002058:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800205c:	f7fe f8d2 	bl	8000204 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4613      	mov	r3, r2
 8002066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800206a:	e05b      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206c:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	2200      	movs	r2, #0
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
 8002084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002088:	4642      	mov	r2, r8
 800208a:	464b      	mov	r3, r9
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	0159      	lsls	r1, r3, #5
 8002096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209a:	0150      	lsls	r0, r2, #5
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4641      	mov	r1, r8
 80020a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80020a6:	4649      	mov	r1, r9
 80020a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c0:	ebb2 040a 	subs.w	r4, r2, sl
 80020c4:	eb63 050b 	sbc.w	r5, r3, fp
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	00eb      	lsls	r3, r5, #3
 80020d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020d6:	00e2      	lsls	r2, r4, #3
 80020d8:	4614      	mov	r4, r2
 80020da:	461d      	mov	r5, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	18e3      	adds	r3, r4, r3
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	464b      	mov	r3, r9
 80020e4:	eb45 0303 	adc.w	r3, r5, r3
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020f6:	4629      	mov	r1, r5
 80020f8:	028b      	lsls	r3, r1, #10
 80020fa:	4621      	mov	r1, r4
 80020fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002100:	4621      	mov	r1, r4
 8002102:	028a      	lsls	r2, r1, #10
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800210c:	2200      	movs	r2, #0
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	61fa      	str	r2, [r7, #28]
 8002112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002116:	f7fe f875 	bl	8000204 <__aeabi_uldivmod>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4613      	mov	r3, r2
 8002120:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_RCC_GetSysClockFreq+0x348>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0f1b      	lsrs	r3, r3, #28
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8002132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002142:	e003      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800214a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002150:	4618      	mov	r0, r3
 8002152:	3798      	adds	r7, #152	@ 0x98
 8002154:	46bd      	mov	sp, r7
 8002156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	00f42400 	.word	0x00f42400
 8002164:	017d7840 	.word	0x017d7840

08002168 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e28d      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8083 	beq.w	800228e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002188:	4b94      	ldr	r3, [pc, #592]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b04      	cmp	r3, #4
 8002192:	d019      	beq.n	80021c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002194:	4b91      	ldr	r3, [pc, #580]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800219c:	2b08      	cmp	r3, #8
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021a0:	4b8e      	ldr	r3, [pc, #568]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ac:	d00c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b8b      	ldr	r3, [pc, #556]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b84      	ldr	r3, [pc, #528]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x124>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e25a      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x90>
 80021ea:	4b7c      	ldr	r3, [pc, #496]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7b      	ldr	r2, [pc, #492]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xcc>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xb4>
 8002202:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b73      	ldr	r3, [pc, #460]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a72      	ldr	r2, [pc, #456]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xcc>
 800221c:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6e      	ldr	r2, [pc, #440]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b6c      	ldr	r3, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff f94e 	bl	80014dc <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff f94a 	bl	80014dc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e21f      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b61      	ldr	r3, [pc, #388]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xdc>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f93a 	bl	80014dc <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff f936 	bl	80014dc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	@ 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e20b      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b57      	ldr	r3, [pc, #348]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x104>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06f      	beq.n	800237a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800229a:	4b50      	ldr	r3, [pc, #320]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d017      	beq.n	80022d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022a6:	4b4d      	ldr	r3, [pc, #308]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b44      	ldr	r3, [pc, #272]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x186>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1d3      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4937      	ldr	r1, [pc, #220]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_RCC_OscConfig+0x278>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7ff f8e3 	bl	80014dc <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231a:	f7ff f8df 	bl	80014dc <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1b4      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4925      	ldr	r1, [pc, #148]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_OscConfig+0x278>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff f8c2 	bl	80014dc <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235c:	f7ff f8be 	bl	80014dc <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e193      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d036      	beq.n	80023f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7ff f8a2 	bl	80014dc <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239c:	f7ff f89e 	bl	80014dc <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e173      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_OscConfig+0x274>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x234>
 80023ba:	e01b      	b.n	80023f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x27c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7ff f88b 	bl	80014dc <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	e00e      	b.n	80023e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ca:	f7ff f887 	bl	80014dc <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d907      	bls.n	80023e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e15c      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
 80023e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ea      	bne.n	80023ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8097 	beq.w	8002530 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b83      	ldr	r3, [pc, #524]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b7f      	ldr	r3, [pc, #508]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a7e      	ldr	r2, [pc, #504]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b7c      	ldr	r3, [pc, #496]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b79      	ldr	r3, [pc, #484]	@ (8002618 <HAL_RCC_OscConfig+0x4b0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d118      	bne.n	8002470 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	4b76      	ldr	r3, [pc, #472]	@ (8002618 <HAL_RCC_OscConfig+0x4b0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a75      	ldr	r2, [pc, #468]	@ (8002618 <HAL_RCC_OscConfig+0x4b0>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7ff f847 	bl	80014dc <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7ff f843 	bl	80014dc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e118      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b6c      	ldr	r3, [pc, #432]	@ (8002618 <HAL_RCC_OscConfig+0x4b0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x31e>
 8002478:	4b66      	ldr	r3, [pc, #408]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a65      	ldr	r2, [pc, #404]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
 8002484:	e01c      	b.n	80024c0 <HAL_RCC_OscConfig+0x358>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x340>
 800248e:	4b61      	ldr	r3, [pc, #388]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a60      	ldr	r2, [pc, #384]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	4b5e      	ldr	r3, [pc, #376]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a5d      	ldr	r2, [pc, #372]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x358>
 80024a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a59      	ldr	r2, [pc, #356]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b4:	4b57      	ldr	r3, [pc, #348]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b8:	4a56      	ldr	r2, [pc, #344]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7ff f808 	bl	80014dc <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7ff f804 	bl	80014dc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0d7      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ee      	beq.n	80024d0 <HAL_RCC_OscConfig+0x368>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe fff2 	bl	80014dc <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe ffee 	bl	80014dc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0c1      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	4b40      	ldr	r3, [pc, #256]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ee      	bne.n	80024fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a3a      	ldr	r2, [pc, #232]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80ad 	beq.w	8002694 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253a:	4b36      	ldr	r3, [pc, #216]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d060      	beq.n	8002608 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d145      	bne.n	80025da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b33      	ldr	r3, [pc, #204]	@ (800261c <HAL_RCC_OscConfig+0x4b4>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe ffc2 	bl	80014dc <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe ffbe 	bl	80014dc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e093      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	3b01      	subs	r3, #1
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	071b      	lsls	r3, r3, #28
 80025a6:	491b      	ldr	r1, [pc, #108]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_RCC_OscConfig+0x4b4>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe ff93 	bl	80014dc <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe ff8f 	bl	80014dc <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e064      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025cc:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x452>
 80025d8:	e05c      	b.n	8002694 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b10      	ldr	r3, [pc, #64]	@ (800261c <HAL_RCC_OscConfig+0x4b4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe ff7c 	bl	80014dc <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe ff78 	bl	80014dc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04d      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x480>
 8002606:	e045      	b.n	8002694 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e040      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000
 800261c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002620:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <HAL_RCC_OscConfig+0x538>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d030      	beq.n	8002690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d129      	bne.n	8002690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d122      	bne.n	8002690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002658:	4293      	cmp	r3, r2
 800265a:	d119      	bne.n	8002690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	3b01      	subs	r3, #1
 800266a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d10f      	bne.n	8002690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07b      	b.n	80027ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026c6:	d009      	beq.n	80026dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
 80026ce:	e005      	b.n	80026dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fd7c 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002760:	ea42 0103 	orr.w	r1, r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0104 	and.w	r1, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	f003 0210 	and.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800279c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e042      	b.n	800284e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fd51 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2224      	movs	r2, #36	@ 0x24
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fcda 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800280e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800281e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	4613      	mov	r3, r2
 8002862:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	d112      	bne.n	8002896 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_UART_Receive_IT+0x26>
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e00b      	b.n	8002898 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	461a      	mov	r2, r3
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fab9 	bl	8002e04 <UART_Start_Receive_IT>
 8002892:	4603      	mov	r3, r0
 8002894:	e000      	b.n	8002898 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0ba      	sub	sp, #232	@ 0xe8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10f      	bne.n	8002906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_UART_IRQHandler+0x66>
 80028f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fb99 	bl	8003036 <UART_Receive_IT>
      return;
 8002904:	e25b      	b.n	8002dbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80de 	beq.w	8002acc <HAL_UART_IRQHandler+0x22c>
 8002910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002920:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80d1 	beq.w	8002acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_UART_IRQHandler+0xae>
 8002936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_UART_IRQHandler+0xd2>
 800295a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f043 0202 	orr.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_UART_IRQHandler+0xf6>
 800297e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d011      	beq.n	80029c6 <HAL_UART_IRQHandler+0x126>
 80029a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f043 0208 	orr.w	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 81f2 	beq.w	8002db4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_UART_IRQHandler+0x14e>
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb24 	bl	8003036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f8:	2b40      	cmp	r3, #64	@ 0x40
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <HAL_UART_IRQHandler+0x17a>
 8002a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04f      	beq.n	8002aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa2c 	bl	8002e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d141      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3314      	adds	r3, #20
 8002a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1d9      	bne.n	8002a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d013      	beq.n	8002aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	4a7e      	ldr	r2, [pc, #504]	@ (8002c80 <HAL_UART_IRQHandler+0x3e0>)
 8002a88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fed5 	bl	800183e <HAL_DMA_Abort_IT>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa8:	e00e      	b.n	8002ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f994 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e00a      	b.n	8002ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f990 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e006      	b.n	8002ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f98c 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ac6:	e175      	b.n	8002db4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	bf00      	nop
    return;
 8002aca:	e173      	b.n	8002db4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 814f 	bne.w	8002d74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8148 	beq.w	8002d74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8141 	beq.w	8002d74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b12:	2b40      	cmp	r3, #64	@ 0x40
 8002b14:	f040 80b6 	bne.w	8002c84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8145 	beq.w	8002db8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b36:	429a      	cmp	r2, r3
 8002b38:	f080 813e 	bcs.w	8002db8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4e:	f000 8088 	beq.w	8002c62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	330c      	adds	r3, #12
 8002b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1d9      	bne.n	8002b52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e1      	bne.n	8002b9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e3      	bne.n	8002bda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c32:	f023 0310 	bic.w	r3, r3, #16
 8002c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c46:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e3      	bne.n	8002c20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fd7e 	bl	800175e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f8b7 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c7e:	e09b      	b.n	8002db8 <HAL_UART_IRQHandler+0x518>
 8002c80:	08002f3f 	.word	0x08002f3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 808e 	beq.w	8002dbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8089 	beq.w	8002dbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cce:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e3      	bne.n	8002caa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d06:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e3      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0310 	bic.w	r3, r3, #16
 8002d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d4c:	61fa      	str	r2, [r7, #28]
 8002d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	69b9      	ldr	r1, [r7, #24]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	617b      	str	r3, [r7, #20]
   return(result);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e3      	bne.n	8002d28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f83d 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d72:	e023      	b.n	8002dbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_UART_IRQHandler+0x4f4>
 8002d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8ea 	bl	8002f66 <UART_Transmit_IT>
    return;
 8002d92:	e014      	b.n	8002dbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <HAL_UART_IRQHandler+0x51e>
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f92a 	bl	8003006 <UART_EndTransmit_IT>
    return;
 8002db2:	e004      	b.n	8002dbe <HAL_UART_IRQHandler+0x51e>
    return;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002dbc:	bf00      	nop
  }
}
 8002dbe:	37e8      	adds	r7, #232	@ 0xe8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	@ 0x22
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0220 	orr.w	r2, r2, #32
 8002e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b095      	sub	sp, #84	@ 0x54
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ea0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3314      	adds	r3, #20
 8002eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d119      	bne.n	8002f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f023 0310 	bic.w	r3, r3, #16
 8002f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f10:	61ba      	str	r2, [r7, #24]
 8002f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6979      	ldr	r1, [r7, #20]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e5      	bne.n	8002ef0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f32:	bf00      	nop
 8002f34:	3754      	adds	r7, #84	@ 0x54
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff ff3d 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b21      	cmp	r3, #33	@ 0x21
 8002f78:	d13e      	bne.n	8002ff8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f82:	d114      	bne.n	8002fae <UART_Transmit_IT+0x48>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d110      	bne.n	8002fae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	1c9a      	adds	r2, r3, #2
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	621a      	str	r2, [r3, #32]
 8002fac:	e008      	b.n	8002fc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6211      	str	r1, [r2, #32]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ff2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800301c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fecc 	bl	8002dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	@ 0x30
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b22      	cmp	r3, #34	@ 0x22
 8003048:	f040 80ae 	bne.w	80031a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003054:	d117      	bne.n	8003086 <UART_Receive_IT+0x50>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d113      	bne.n	8003086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003074:	b29a      	uxth	r2, r3
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	1c9a      	adds	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	@ 0x28
 8003084:	e026      	b.n	80030d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003098:	d007      	beq.n	80030aa <UART_Receive_IT+0x74>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <UART_Receive_IT+0x82>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e008      	b.n	80030ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4619      	mov	r1, r3
 80030e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d15d      	bne.n	80031a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0220 	bic.w	r2, r2, #32
 80030f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	2b01      	cmp	r3, #1
 800312c:	d135      	bne.n	800319a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	613b      	str	r3, [r7, #16]
   return(result);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003154:	623a      	str	r2, [r7, #32]
 8003156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	69f9      	ldr	r1, [r7, #28]
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	61bb      	str	r3, [r7, #24]
   return(result);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b10      	cmp	r3, #16
 8003174:	d10a      	bne.n	800318c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fe2a 	bl	8002dec <HAL_UARTEx_RxEventCallback>
 8003198:	e002      	b.n	80031a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd ff9e 	bl	80010dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e002      	b.n	80031aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3730      	adds	r7, #48	@ 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b0c0      	sub	sp, #256	@ 0x100
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	ea40 0301 	orr.w	r3, r0, r1
 80031dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800320c:	f021 010c 	bic.w	r1, r1, #12
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800321a:	430b      	orrs	r3, r1
 800321c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322e:	6999      	ldr	r1, [r3, #24]
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	ea40 0301 	orr.w	r3, r0, r1
 800323a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b8f      	ldr	r3, [pc, #572]	@ (8003480 <UART_SetConfig+0x2cc>)
 8003244:	429a      	cmp	r2, r3
 8003246:	d005      	beq.n	8003254 <UART_SetConfig+0xa0>
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b8d      	ldr	r3, [pc, #564]	@ (8003484 <UART_SetConfig+0x2d0>)
 8003250:	429a      	cmp	r2, r3
 8003252:	d104      	bne.n	800325e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7fe fdca 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8003258:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800325c:	e003      	b.n	8003266 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325e:	f7fe fdb1 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8003262:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	f040 810c 	bne.w	800348c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800327e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	1891      	adds	r1, r2, r2
 800328c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800328e:	415b      	adcs	r3, r3
 8003290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003296:	4621      	mov	r1, r4
 8003298:	eb12 0801 	adds.w	r8, r2, r1
 800329c:	4629      	mov	r1, r5
 800329e:	eb43 0901 	adc.w	r9, r3, r1
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b6:	4690      	mov	r8, r2
 80032b8:	4699      	mov	r9, r3
 80032ba:	4623      	mov	r3, r4
 80032bc:	eb18 0303 	adds.w	r3, r8, r3
 80032c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032c4:	462b      	mov	r3, r5
 80032c6:	eb49 0303 	adc.w	r3, r9, r3
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032e2:	460b      	mov	r3, r1
 80032e4:	18db      	adds	r3, r3, r3
 80032e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e8:	4613      	mov	r3, r2
 80032ea:	eb42 0303 	adc.w	r3, r2, r3
 80032ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80032f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032f8:	f7fc ff84 	bl	8000204 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4b61      	ldr	r3, [pc, #388]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	011c      	lsls	r4, r3, #4
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003314:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003324:	415b      	adcs	r3, r3
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800332c:	4641      	mov	r1, r8
 800332e:	eb12 0a01 	adds.w	sl, r2, r1
 8003332:	4649      	mov	r1, r9
 8003334:	eb43 0b01 	adc.w	fp, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800334c:	4692      	mov	sl, r2
 800334e:	469b      	mov	fp, r3
 8003350:	4643      	mov	r3, r8
 8003352:	eb1a 0303 	adds.w	r3, sl, r3
 8003356:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800335a:	464b      	mov	r3, r9
 800335c:	eb4b 0303 	adc.w	r3, fp, r3
 8003360:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003370:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003378:	460b      	mov	r3, r1
 800337a:	18db      	adds	r3, r3, r3
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
 800337e:	4613      	mov	r3, r2
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	647b      	str	r3, [r7, #68]	@ 0x44
 8003386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800338a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800338e:	f7fc ff39 	bl	8000204 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4611      	mov	r1, r2
 8003398:	4b3b      	ldr	r3, [pc, #236]	@ (8003488 <UART_SetConfig+0x2d4>)
 800339a:	fba3 2301 	umull	r2, r3, r3, r1
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2264      	movs	r2, #100	@ 0x64
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	1acb      	subs	r3, r1, r3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033ae:	4b36      	ldr	r3, [pc, #216]	@ (8003488 <UART_SetConfig+0x2d4>)
 80033b0:	fba3 2302 	umull	r2, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033bc:	441c      	add	r4, r3
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	1891      	adds	r1, r2, r2
 80033d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d8:	415b      	adcs	r3, r3
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033e0:	4641      	mov	r1, r8
 80033e2:	1851      	adds	r1, r2, r1
 80033e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80033e6:	4649      	mov	r1, r9
 80033e8:	414b      	adcs	r3, r1
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033f8:	4659      	mov	r1, fp
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4651      	mov	r1, sl
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4642      	mov	r2, r8
 800340e:	189b      	adds	r3, r3, r2
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003414:	464b      	mov	r3, r9
 8003416:	460a      	mov	r2, r1
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800342c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003434:	460b      	mov	r3, r1
 8003436:	18db      	adds	r3, r3, r3
 8003438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343a:	4613      	mov	r3, r2
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800344a:	f7fc fedb 	bl	8000204 <__aeabi_uldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4b0d      	ldr	r3, [pc, #52]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003454:	fba3 1302 	umull	r1, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	2164      	movs	r1, #100	@ 0x64
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	3332      	adds	r3, #50	@ 0x32
 8003466:	4a08      	ldr	r2, [pc, #32]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4422      	add	r2, r4
 800347a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800347c:	e106      	b.n	800368c <UART_SetConfig+0x4d8>
 800347e:	bf00      	nop
 8003480:	40011000 	.word	0x40011000
 8003484:	40011400 	.word	0x40011400
 8003488:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003496:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800349a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800349e:	4642      	mov	r2, r8
 80034a0:	464b      	mov	r3, r9
 80034a2:	1891      	adds	r1, r2, r2
 80034a4:	6239      	str	r1, [r7, #32]
 80034a6:	415b      	adcs	r3, r3
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ae:	4641      	mov	r1, r8
 80034b0:	1854      	adds	r4, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb43 0501 	adc.w	r5, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	00eb      	lsls	r3, r5, #3
 80034c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c6:	00e2      	lsls	r2, r4, #3
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	4643      	mov	r3, r8
 80034ce:	18e3      	adds	r3, r4, r3
 80034d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034d4:	464b      	mov	r3, r9
 80034d6:	eb45 0303 	adc.w	r3, r5, r3
 80034da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034fa:	4629      	mov	r1, r5
 80034fc:	008b      	lsls	r3, r1, #2
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003504:	4621      	mov	r1, r4
 8003506:	008a      	lsls	r2, r1, #2
 8003508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800350c:	f7fc fe7a 	bl	8000204 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b60      	ldr	r3, [pc, #384]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003528:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800352c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	61b9      	str	r1, [r7, #24]
 8003538:	415b      	adcs	r3, r3
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003540:	4641      	mov	r1, r8
 8003542:	1851      	adds	r1, r2, r1
 8003544:	6139      	str	r1, [r7, #16]
 8003546:	4649      	mov	r1, r9
 8003548:	414b      	adcs	r3, r1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003558:	4659      	mov	r1, fp
 800355a:	00cb      	lsls	r3, r1, #3
 800355c:	4651      	mov	r1, sl
 800355e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003562:	4651      	mov	r1, sl
 8003564:	00ca      	lsls	r2, r1, #3
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	4603      	mov	r3, r0
 800356c:	4642      	mov	r2, r8
 800356e:	189b      	adds	r3, r3, r2
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	67bb      	str	r3, [r7, #120]	@ 0x78
 800358a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003598:	4649      	mov	r1, r9
 800359a:	008b      	lsls	r3, r1, #2
 800359c:	4641      	mov	r1, r8
 800359e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a2:	4641      	mov	r1, r8
 80035a4:	008a      	lsls	r2, r1, #2
 80035a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035aa:	f7fc fe2b 	bl	8000204 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	4b38      	ldr	r3, [pc, #224]	@ (8003698 <UART_SetConfig+0x4e4>)
 80035b6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2264      	movs	r2, #100	@ 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	1acb      	subs	r3, r1, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	@ 0x32
 80035c8:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <UART_SetConfig+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d4:	441c      	add	r4, r3
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035de:	677a      	str	r2, [r7, #116]	@ 0x74
 80035e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	415b      	adcs	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003626:	464b      	mov	r3, r9
 8003628:	460a      	mov	r2, r1
 800362a:	eb42 0303 	adc.w	r3, r2, r3
 800362e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	663b      	str	r3, [r7, #96]	@ 0x60
 800363a:	667a      	str	r2, [r7, #100]	@ 0x64
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003648:	4649      	mov	r1, r9
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	4641      	mov	r1, r8
 800364e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003652:	4641      	mov	r1, r8
 8003654:	008a      	lsls	r2, r1, #2
 8003656:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800365a:	f7fc fdd3 	bl	8000204 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	@ 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	3332      	adds	r3, #50	@ 0x32
 8003676:	4a08      	ldr	r2, [pc, #32]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4422      	add	r2, r4
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003692:	46bd      	mov	sp, r7
 8003694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003698:	51eb851f 	.word	0x51eb851f

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4d0d      	ldr	r5, [pc, #52]	@ (80036e4 <__libc_init_array+0x38>)
 80036b0:	4c0d      	ldr	r4, [pc, #52]	@ (80036e8 <__libc_init_array+0x3c>)
 80036b2:	1b64      	subs	r4, r4, r5
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	2600      	movs	r6, #0
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	4d0b      	ldr	r5, [pc, #44]	@ (80036ec <__libc_init_array+0x40>)
 80036be:	4c0c      	ldr	r4, [pc, #48]	@ (80036f0 <__libc_init_array+0x44>)
 80036c0:	f000 f818 	bl	80036f4 <_init>
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	2600      	movs	r6, #0
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	f855 3b04 	ldr.w	r3, [r5], #4
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	0800372c 	.word	0x0800372c
 80036e8:	0800372c 	.word	0x0800372c
 80036ec:	0800372c 	.word	0x0800372c
 80036f0:	08003730 	.word	0x08003730

080036f4 <_init>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr

08003700 <_fini>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr
