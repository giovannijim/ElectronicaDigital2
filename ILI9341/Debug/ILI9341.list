
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a94  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025818  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b474  0802b474  000423a4  2**0
                  CONTENTS
  4 .ARM          00000008  0802b474  0802b474  0002c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b47c  0802b47c  000423a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b47c  0802b47c  0002c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802b480  0802b480  0002c480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000153a4  20000000  0802b484  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200153a4  08040828  000423a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001560c  08040828  0004260c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000423a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf64  00000000  00000000  000423d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0004e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00050148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021074  00000000  00000000  00050ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e1d0  00000000  00000000  00071c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cc1ae  00000000  00000000  0007fde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0014bf92  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000874  00000000  00000000  0014bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002adc  00000000  00000000  0014c84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0014f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200153a4 	.word	0x200153a4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005c44 	.word	0x08005c44

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200153a8 	.word	0x200153a8
 8000204:	08005c44 	.word	0x08005c44

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f003 fbef 	bl	80040fc <HAL_GPIO_WritePin>
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f003 fbea 	bl	80040fc <HAL_GPIO_WritePin>
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f003 fbe5 	bl	80040fc <HAL_GPIO_WritePin>
 8000932:	2005      	movs	r0, #5
 8000934:	f003 f886 	bl	8003a44 <HAL_Delay>
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f003 fbdd 	bl	80040fc <HAL_GPIO_WritePin>
 8000942:	2014      	movs	r0, #20
 8000944:	f003 f87e 	bl	8003a44 <HAL_Delay>
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f003 fbd5 	bl	80040fc <HAL_GPIO_WritePin>
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f003 f876 	bl	8003a44 <HAL_Delay>
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f003 fbcd 	bl	80040fc <HAL_GPIO_WritePin>
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f003 f865 	bl	8003a44 <HAL_Delay>
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f002 ffb4 	bl	8003a44 <HAL_Delay>
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f002 ffae 	bl	8003a44 <HAL_Delay>
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f003 fb02 	bl	80040fc <HAL_GPIO_WritePin>
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f003 faf0 	bl	80040fc <HAL_GPIO_WritePin>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f003 faeb 	bl	80040fc <HAL_GPIO_WritePin>
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f003 fae0 	bl	80040fc <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f003 fad9 	bl	80040fc <HAL_GPIO_WritePin>
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f003 facf 	bl	80040fc <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f003 fac9 	bl	80040fc <HAL_GPIO_WritePin>
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f003 fabe 	bl	80040fc <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f003 fab7 	bl	80040fc <HAL_GPIO_WritePin>
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f003 faad 	bl	80040fc <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f003 faa7 	bl	80040fc <HAL_GPIO_WritePin>
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f003 fa9d 	bl	80040fc <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f003 fa97 	bl	80040fc <HAL_GPIO_WritePin>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f003 fa8d 	bl	80040fc <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f003 fa87 	bl	80040fc <HAL_GPIO_WritePin>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f003 fa7c 	bl	80040fc <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f003 fa75 	bl	80040fc <HAL_GPIO_WritePin>
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f003 fa6b 	bl	80040fc <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f003 fa64 	bl	80040fc <HAL_GPIO_WritePin>
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f003 fa5f 	bl	80040fc <HAL_GPIO_WritePin>
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f003 fa4a 	bl	80040fc <HAL_GPIO_WritePin>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f003 fa45 	bl	80040fc <HAL_GPIO_WritePin>
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f003 fa3a 	bl	80040fc <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f003 fa33 	bl	80040fc <HAL_GPIO_WritePin>
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f003 fa29 	bl	80040fc <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f003 fa23 	bl	80040fc <HAL_GPIO_WritePin>
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f003 fa18 	bl	80040fc <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f003 fa11 	bl	80040fc <HAL_GPIO_WritePin>
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f003 fa07 	bl	80040fc <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f003 fa01 	bl	80040fc <HAL_GPIO_WritePin>
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f003 f9f7 	bl	80040fc <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f003 f9f1 	bl	80040fc <HAL_GPIO_WritePin>
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f003 f9e7 	bl	80040fc <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f003 f9e1 	bl	80040fc <HAL_GPIO_WritePin>
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f003 f9d6 	bl	80040fc <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f003 f9cf 	bl	80040fc <HAL_GPIO_WritePin>
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f003 f9c5 	bl	80040fc <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f003 f9be 	bl	80040fc <HAL_GPIO_WritePin>
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f003 f9b9 	bl	80040fc <HAL_GPIO_WritePin>
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f003 f962 	bl	80040fc <HAL_GPIO_WritePin>
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f003 f95d 	bl	80040fc <HAL_GPIO_WritePin>
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f003 f933 	bl	80040fc <HAL_GPIO_WritePin>
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <H_line>:
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <H_line+0x78>)
 8000ec2:	f003 f91b 	bl	80040fc <HAL_GPIO_WritePin>
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <H_line+0x7c>)
 8000ecc:	f003 f916 	bl	80040fc <HAL_GPIO_WritePin>
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff5e 	bl	8000da0 <SetWindows>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00d      	b.n	8000f06 <H_line+0x5e>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feaf 	bl	8000c54 <LCD_DATA>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feaa 	bl	8000c54 <LCD_DATA>
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3ed      	bcc.n	8000eea <H_line+0x42>
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <H_line+0x7c>)
 8000f14:	f003 f8f2 	bl	80040fc <HAL_GPIO_WritePin>
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400

08000f28 <V_line>:
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	202c      	movs	r0, #44	@ 0x2c
 8000f38:	f7ff fde6 	bl	8000b08 <LCD_CMD>
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <V_line+0x78>)
 8000f42:	f003 f8db 	bl	80040fc <HAL_GPIO_WritePin>
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <V_line+0x7c>)
 8000f4c:	f003 f8d6 	bl	80040fc <HAL_GPIO_WritePin>
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ff1e 	bl	8000da0 <SetWindows>
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00d      	b.n	8000f86 <V_line+0x5e>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe6f 	bl	8000c54 <LCD_DATA>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe6a 	bl	8000c54 <LCD_DATA>
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d9ed      	bls.n	8000f6a <V_line+0x42>
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <V_line+0x7c>)
 8000f94:	f003 f8b2 	bl	80040fc <HAL_GPIO_WritePin>
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Rect>:
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff73 	bl	8000ea8 <H_line>
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	18d1      	adds	r1, r2, r3
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ff6b 	bl	8000ea8 <H_line>
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ffa5 	bl	8000f28 <V_line>
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f7ff ff9d 	bl	8000f28 <V_line>
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <FillRect>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	202c      	movs	r0, #44	@ 0x2c
 8001008:	f7ff fd7e 	bl	8000b08 <LCD_CMD>
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <FillRect+0xac>)
 8001012:	f003 f873 	bl	80040fc <HAL_GPIO_WritePin>
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <FillRect+0xb0>)
 800101c:	f003 f86e 	bl	80040fc <HAL_GPIO_WritePin>
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3b01      	subs	r3, #1
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff feb0 	bl	8000da0 <SetWindows>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e01a      	b.n	800108a <FillRect+0x92>
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e010      	b.n	800107c <FillRect+0x84>
 800105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdf7 	bl	8000c54 <LCD_DATA>
 8001066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fdf2 	bl	8000c54 <LCD_DATA>
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	3b02      	subs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8ea      	bhi.n	800105a <FillRect+0x62>
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	3301      	adds	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8e0      	bhi.n	8001054 <FillRect+0x5c>
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <FillRect+0xb0>)
 8001098:	f003 f830 	bl	80040fc <HAL_GPIO_WritePin>
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <LCD_Bitmap>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	202c      	movs	r0, #44	@ 0x2c
 80010bc:	f7ff fd24 	bl	8000b08 <LCD_CMD>
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	4824      	ldr	r0, [pc, #144]	@ (8001158 <LCD_Bitmap+0xac>)
 80010c6:	f003 f819 	bl	80040fc <HAL_GPIO_WritePin>
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4823      	ldr	r0, [pc, #140]	@ (800115c <LCD_Bitmap+0xb0>)
 80010d0:	f003 f814 	bl	80040fc <HAL_GPIO_WritePin>
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fe56 	bl	8000da0 <SetWindows>
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e01e      	b.n	800113c <LCD_Bitmap+0x90>
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e014      	b.n	800112e <LCD_Bitmap+0x82>
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fda1 	bl	8000c54 <LCD_DATA>
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd99 	bl	8000c54 <LCD_DATA>
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3302      	adds	r3, #2
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d8e6      	bhi.n	8001104 <LCD_Bitmap+0x58>
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	3301      	adds	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8dc      	bhi.n	80010fe <LCD_Bitmap+0x52>
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <LCD_Bitmap+0xb0>)
 800114a:	f002 ffd7 	bl	80040fc <HAL_GPIO_WritePin>
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <LCD_Sprite>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	202c      	movs	r0, #44	@ 0x2c
 8001170:	f7ff fcca 	bl	8000b08 <LCD_CMD>
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <LCD_Sprite+0x150>)
 800117a:	f002 ffbf 	bl	80040fc <HAL_GPIO_WritePin>
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	484c      	ldr	r0, [pc, #304]	@ (80012b4 <LCD_Sprite+0x154>)
 8001184:	f002 ffba 	bl	80040fc <HAL_GPIO_WritePin>
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f7ff fdfc 	bl	8000da0 <SetWindows>
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d03a      	beq.n	8001234 <LCD_Sprite+0xd4>
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c2:	e032      	b.n	800122a <LCD_Sprite+0xca>
 80011c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	fb03 f202 	mul.w	r2, r3, r2
 80011cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e8:	4413      	add	r3, r2
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f0:	e014      	b.n	800121c <LCD_Sprite+0xbc>
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd2a 	bl	8000c54 <LCD_DATA>
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd22 	bl	8000c54 <LCD_DATA>
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	3b02      	subs	r3, #2
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbe6      	blt.n	80011f2 <LCD_Sprite+0x92>
 8001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001226:	3301      	adds	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800122a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbc8      	blt.n	80011c4 <LCD_Sprite+0x64>
 8001232:	e034      	b.n	800129e <LCD_Sprite+0x13e>
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	e02d      	b.n	8001296 <LCD_Sprite+0x136>
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	e014      	b.n	8001288 <LCD_Sprite+0x128>
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fcf4 	bl	8000c54 <LCD_DATA>
 800126c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126e:	3301      	adds	r3, #1
 8001270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcec 	bl	8000c54 <LCD_DATA>
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	3302      	adds	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbe6      	blt.n	800125e <LCD_Sprite+0xfe>
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	3301      	adds	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbcd      	blt.n	800123a <LCD_Sprite+0xda>
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <LCD_Sprite+0x154>)
 80012a4:	f002 ff2a 	bl	80040fc <HAL_GPIO_WritePin>
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400

080012b8 <animation_e1_control>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d131      	bne.n	800134c <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dd1b      	ble.n	8001326 <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	dc13      	bgt.n	800131c <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8e9 	bl	80004d0 <__aeabi_f2d>
 80012fe:	a316      	add	r3, pc, #88	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7fe ff86 	bl	8000214 <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff f936 	bl	8000580 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 800131a:	e017      	b.n	800134c <animation_e1_control+0x94>
				enemy->animationV=0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001324:	e012      	b.n	800134c <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_f2d>
 8001330:	a309      	add	r3, pc, #36	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ff6d 	bl	8000214 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fb99999 	.word	0x3fb99999

08001360 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	@ 0x2c
 8001364:	af06      	add	r7, sp, #24
 8001366:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 80a6 	bne.w	80014de <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b04      	cmp	r3, #4
 8001396:	f340 80a2 	ble.w	80014de <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b06      	subs	r3, #6
 80013a0:	4618      	mov	r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3b09      	subs	r3, #9
 80013a8:	4619      	mov	r1, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	9304      	str	r3, [sp, #16]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2310      	movs	r3, #16
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <animation_e1+0x188>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2313      	movs	r3, #19
 80013c0:	2210      	movs	r2, #16
 80013c2:	f7ff fecd 	bl	8001160 <LCD_Sprite>
		    if (DrawHitbox==1){
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <animation_e1+0x18c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d113      	bne.n	80013f6 <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	1ad0      	subs	r0, r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2400      	movs	r4, #0
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	f7ff fdd9 	bl	8000fa8 <Rect>
		    }
		    if (DrawHitbox==2){
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <animation_e1+0x18c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d12b      	bne.n	8001456 <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6998      	ldr	r0, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6859      	ldr	r1, [r3, #4]
 8001406:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2201      	movs	r2, #1
 8001410:	f7ff fdf2 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	f7ff fde7 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a19      	ldr	r1, [r3, #32]
 8001432:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2201      	movs	r2, #1
 800143c:	f7ff fddc 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001448:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	2201      	movs	r2, #1
 8001452:	f7ff fdd1 	bl	8000ff8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <animation_e1+0x18c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d13f      	bne.n	80014de <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	1ad0      	subs	r0, r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	1ad1      	subs	r1, r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2400      	movs	r4, #0
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	f7ff fd91 	bl	8000fa8 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6998      	ldr	r0, [r3, #24]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	2201      	movs	r2, #1
 8001498:	f7ff fdae 	bl	8000ff8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69d8      	ldr	r0, [r3, #28]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2201      	movs	r2, #1
 80014ae:	f7ff fda3 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a19      	ldr	r1, [r3, #32]
 80014ba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	f7ff fd98 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80014d0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f7ff fd8d 	bl	8000ff8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000a1a8 	.word	0x2000a1a8
 80014ec:	20015394 	.word	0x20015394

080014f0 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af06      	add	r7, sp, #24
 80014f6:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d134      	bne.n	800157a <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	dc29      	bgt.n	800156a <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3b06      	subs	r3, #6
 800151c:	4618      	mov	r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	3b0c      	subs	r3, #12
 8001524:	4619      	mov	r1, r3
 8001526:	2300      	movs	r3, #0
 8001528:	9304      	str	r3, [sp, #16]
 800152a:	2300      	movs	r3, #0
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	230b      	movs	r3, #11
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <animation_e1_die+0xa0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2319      	movs	r3, #25
 800153c:	220e      	movs	r2, #14
 800153e:	f7ff fe0f 	bl	8001160 <LCD_Sprite>
				enemy->animationDie+=0.2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffc2 	bl	80004d0 <__aeabi_f2d>
 800154c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001588 <animation_e1_die+0x98>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fe5f 	bl	8000214 <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f80f 	bl	8000580 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 8001568:	e007      	b.n	800157a <animation_e1_die+0x8a>
					enemy->x=5000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	9999999a 	.word	0x9999999a
 800158c:	3fc99999 	.word	0x3fc99999
 8001590:	2000c7a8 	.word	0x2000c7a8

08001594 <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af06      	add	r7, sp, #24
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <initEnemy1+0x1d4>)
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a65      	ldr	r2, [pc, #404]	@ (800176c <initEnemy1+0x1d8>)
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	441a      	add	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	441a      	add	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3b08      	subs	r3, #8
 8001620:	4618      	mov	r0, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	3b09      	subs	r3, #9
 8001628:	4619      	mov	r1, r3
 800162a:	2300      	movs	r3, #0
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	2300      	movs	r3, #0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2310      	movs	r3, #16
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b4d      	ldr	r3, [pc, #308]	@ (8001770 <initEnemy1+0x1dc>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2313      	movs	r3, #19
 8001640:	2210      	movs	r2, #16
 8001642:	f7ff fd8d 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001646:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <initEnemy1+0x1e0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d113      	bne.n	8001676 <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	1ad0      	subs	r0, r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2400      	movs	r4, #0
 8001670:	9400      	str	r4, [sp, #0]
 8001672:	f7ff fc99 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <initEnemy1+0x1e0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d12b      	bne.n	80016d6 <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6998      	ldr	r0, [r3, #24]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2201      	movs	r2, #1
 8001690:	f7ff fcb2 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	69d8      	ldr	r0, [r3, #28]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2201      	movs	r2, #1
 80016a6:	f7ff fca7 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a19      	ldr	r1, [r3, #32]
 80016b2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fc9c 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80016c8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2201      	movs	r2, #1
 80016d2:	f7ff fc91 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <initEnemy1+0x1e0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d13f      	bne.n	800175e <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	1ad0      	subs	r0, r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	1ad1      	subs	r1, r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2400      	movs	r4, #0
 8001700:	9400      	str	r4, [sp, #0]
 8001702:	f7ff fc51 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6998      	ldr	r0, [r3, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2201      	movs	r2, #1
 8001718:	f7ff fc6e 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	69d8      	ldr	r0, [r3, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	2201      	movs	r2, #1
 800172e:	f7ff fc63 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a19      	ldr	r1, [r3, #32]
 800173a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fc58 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001750:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fc4d 	bl	8000ff8 <FillRect>
        }



}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	40a00000 	.word	0x40a00000
 800176c:	41400000 	.word	0x41400000
 8001770:	2000a1a8 	.word	0x2000a1a8
 8001774:	20015394 	.word	0x20015394

08001778 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 81ee 	bne.w	8001b6c <ColisionPlayer_e1+0x3f4>
		switch (player->direction) {
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	2b03      	cmp	r3, #3
 8001796:	f200 81e9 	bhi.w	8001b6c <ColisionPlayer_e1+0x3f4>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <ColisionPlayer_e1+0x28>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080018cf 	.word	0x080018cf
 80017a8:	080019ab 	.word	0x080019ab
 80017ac:	08001a8b 	.word	0x08001a8b
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	3b0c      	subs	r3, #12
 80017b4:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f0c0 81ce 	bcc.w	8001b5e <ColisionPlayer_e1+0x3e6>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f200 81c8 	bhi.w	8001b5e <ColisionPlayer_e1+0x3e6>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d323      	bcc.n	8001822 <ColisionPlayer_e1+0xaa>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d81d      	bhi.n	8001822 <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	1d5a      	adds	r2, r3, #5
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2201      	movs	r2, #1
 80017f4:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <ColisionPlayer_e1+0xa6>
								p1.isAlive=0;
 8001810:	4b8c      	ldr	r3, [pc, #560]	@ (8001a44 <ColisionPlayer_e1+0x2cc>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
								p1.animationDie=0;
 8001816:	4b8b      	ldr	r3, [pc, #556]	@ (8001a44 <ColisionPlayer_e1+0x2cc>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e1a5      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	429a      	cmp	r2, r3
 800182c:	d323      	bcc.n	8001876 <ColisionPlayer_e1+0xfe>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	429a      	cmp	r2, r3
 8001838:	d81d      	bhi.n	8001876 <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	1d5a      	adds	r2, r3, #5
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d106      	bne.n	8001872 <ColisionPlayer_e1+0xfa>
								p1.isAlive=0;
 8001864:	4b77      	ldr	r3, [pc, #476]	@ (8001a44 <ColisionPlayer_e1+0x2cc>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
								p1.animationDie=0;
 800186a:	4b76      	ldr	r3, [pc, #472]	@ (8001a44 <ColisionPlayer_e1+0x2cc>)
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e17b      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	429a      	cmp	r2, r3
 8001880:	f0c0 816d 	bcc.w	8001b5e <ColisionPlayer_e1+0x3e6>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f200 8166 	bhi.w	8001b5e <ColisionPlayer_e1+0x3e6>
							player->y=player->y+5;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	1d5a      	adds	r2, r3, #5
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2201      	movs	r2, #1
 80018a0:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <ColisionPlayer_e1+0x152>
								p1.isAlive=0;
 80018bc:	4b61      	ldr	r3, [pc, #388]	@ (8001a44 <ColisionPlayer_e1+0x2cc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
								p1.animationDie=0;
 80018c2:	4b60      	ldr	r3, [pc, #384]	@ (8001a44 <ColisionPlayer_e1+0x2cc>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e14f      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	f200 8141 	bhi.w	8001b62 <ColisionPlayer_e1+0x3ea>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	f0c0 813b 	bcc.w	8001b62 <ColisionPlayer_e1+0x3ea>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d318      	bcc.n	800192a <ColisionPlayer_e1+0x1b2>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	d812      	bhi.n	800192a <ColisionPlayer_e1+0x1b2>
							player->x=player->x-5;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1f5a      	subs	r2, r3, #5
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2201      	movs	r2, #1
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	615a      	str	r2, [r3, #20]
							return 0;
 8001926:	2300      	movs	r3, #0
 8001928:	e121      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	429a      	cmp	r2, r3
 8001934:	d318      	bcc.n	8001968 <ColisionPlayer_e1+0x1f0>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	429a      	cmp	r2, r3
 8001940:	d812      	bhi.n	8001968 <ColisionPlayer_e1+0x1f0>
							player->x=player->x-5;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1f5a      	subs	r2, r3, #5
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2201      	movs	r2, #1
 8001950:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	615a      	str	r2, [r3, #20]
							return 0;
 8001964:	2300      	movs	r3, #0
 8001966:	e102      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	429a      	cmp	r2, r3
 8001972:	f0c0 80f6 	bcc.w	8001b62 <ColisionPlayer_e1+0x3ea>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	429a      	cmp	r2, r3
 8001980:	f200 80ef 	bhi.w	8001b62 <ColisionPlayer_e1+0x3ea>
							player->x=player->x-5;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1f5a      	subs	r2, r3, #5
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2201      	movs	r2, #1
 8001992:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	615a      	str	r2, [r3, #20]
							return 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e0e1      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 80019aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ac:	330c      	adds	r3, #12
 80019ae:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	f200 80d5 	bhi.w	8001b66 <ColisionPlayer_e1+0x3ee>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	f0c0 80cf 	bcc.w	8001b66 <ColisionPlayer_e1+0x3ee>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d318      	bcc.n	8001a06 <ColisionPlayer_e1+0x28e>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d812      	bhi.n	8001a06 <ColisionPlayer_e1+0x28e>
							player->y=player->y-5;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	1f5a      	subs	r2, r3, #5
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2201      	movs	r2, #1
 80019ee:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	615a      	str	r2, [r3, #20]
							return 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e0b3      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d31a      	bcc.n	8001a48 <ColisionPlayer_e1+0x2d0>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d814      	bhi.n	8001a48 <ColisionPlayer_e1+0x2d0>
							player->y=player->y-5;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	1f5a      	subs	r2, r3, #5
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	615a      	str	r2, [r3, #20]
							return 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e094      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
 8001a44:	200154b4 	.word	0x200154b4
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f0c0 8088 	bcc.w	8001b66 <ColisionPlayer_e1+0x3ee>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	f200 8081 	bhi.w	8001b66 <ColisionPlayer_e1+0x3ee>
							player->y=player->y-5;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	1f5a      	subs	r2, r3, #5
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2201      	movs	r2, #1
 8001a72:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	615a      	str	r2, [r3, #20]
							return 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e071      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3b0c      	subs	r3, #12
 8001a8e:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d367      	bcc.n	8001b6a <ColisionPlayer_e1+0x3f2>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d862      	bhi.n	8001b6a <ColisionPlayer_e1+0x3f2>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d318      	bcc.n	8001ae2 <ColisionPlayer_e1+0x36a>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d812      	bhi.n	8001ae2 <ColisionPlayer_e1+0x36a>
							player->x=player->x+5;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1d5a      	adds	r2, r3, #5
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	615a      	str	r2, [r3, #20]
							return 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e045      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d318      	bcc.n	8001b20 <ColisionPlayer_e1+0x3a8>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d812      	bhi.n	8001b20 <ColisionPlayer_e1+0x3a8>
							player->x=player->x+5;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1d5a      	adds	r2, r3, #5
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2201      	movs	r2, #1
 8001b08:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	615a      	str	r2, [r3, #20]
							return 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e026      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d31e      	bcc.n	8001b6a <ColisionPlayer_e1+0x3f2>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d818      	bhi.n	8001b6a <ColisionPlayer_e1+0x3f2>
							player->x=player->x+5;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1d5a      	adds	r2, r3, #5
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2201      	movs	r2, #1
 8001b46:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	615a      	str	r2, [r3, #20]
							return 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e007      	b.n	8001b6e <ColisionPlayer_e1+0x3f6>
					break;
 8001b5e:	bf00      	nop
 8001b60:	e004      	b.n	8001b6c <ColisionPlayer_e1+0x3f4>
					break;
 8001b62:	bf00      	nop
 8001b64:	e002      	b.n	8001b6c <ColisionPlayer_e1+0x3f4>
					break;
 8001b66:	bf00      	nop
 8001b68:	e000      	b.n	8001b6c <ColisionPlayer_e1+0x3f4>
						}
					}
					break;
 8001b6a:	bf00      	nop
			return 1;
			}
	}
	return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	@ 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop

08001b7c <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	441a      	add	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	441a      	add	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	4618      	mov	r0, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	3b0a      	subs	r3, #10
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9304      	str	r3, [sp, #16]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9303      	str	r3, [sp, #12]
 8001bdc:	2304      	movs	r3, #4
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2305      	movs	r3, #5
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <Hitbox_e2+0x194>)
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2314      	movs	r3, #20
 8001bea:	2210      	movs	r2, #16
 8001bec:	f7ff fab8 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001bf0:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <Hitbox_e2+0x198>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d113      	bne.n	8001c20 <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	1ad0      	subs	r0, r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	1ad1      	subs	r1, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2400      	movs	r4, #0
 8001c1a:	9400      	str	r4, [sp, #0]
 8001c1c:	f7ff f9c4 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001c20:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <Hitbox_e2+0x198>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d12b      	bne.n	8001c80 <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6998      	ldr	r0, [r3, #24]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f7ff f9dd 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69d8      	ldr	r0, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f7ff f9d2 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a19      	ldr	r1, [r3, #32]
 8001c5c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2301      	movs	r3, #1
 8001c64:	2201      	movs	r2, #1
 8001c66:	f7ff f9c7 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c72:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f7ff f9bc 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <Hitbox_e2+0x198>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d13f      	bne.n	8001d08 <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	1ad0      	subs	r0, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	1ad1      	subs	r1, r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2400      	movs	r4, #0
 8001caa:	9400      	str	r4, [sp, #0]
 8001cac:	f7ff f97c 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6998      	ldr	r0, [r3, #24]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f7ff f999 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69d8      	ldr	r0, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f7ff f98e 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a19      	ldr	r1, [r3, #32]
 8001ce4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	2201      	movs	r2, #1
 8001cee:	f7ff f983 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001cfa:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	2201      	movs	r2, #1
 8001d04:	f7ff f978 	bl	8000ff8 <FillRect>
        }
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20015394 	.word	0x20015394

08001d18 <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <initEnemy2+0x6c>)
 8001d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4a09      	ldr	r2, [pc, #36]	@ (8001d88 <initEnemy2+0x70>)
 8001d62:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40400000 	.word	0x40400000
 8001d88:	40c00000 	.word	0x40c00000

08001d8c <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8109 	bne.w	8001fb2 <moveE2+0x226>
		if (enemy->delay==100000){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001da6:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001fbc <moveE2+0x230>
 8001daa:	eef4 7a47 	vcmp.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	f040 80ef 	bne.w	8001f94 <moveE2+0x208>
			switch(enemy->move){
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	f200 80f9 	bhi.w	8001fb2 <moveE2+0x226>
 8001dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc8 <moveE2+0x3c>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001e49 	.word	0x08001e49
 8001dd0:	08001eb9 	.word	0x08001eb9
 8001dd4:	08001f29 	.word	0x08001f29
			case 0: //Derecha
				int futureX_D=player->x+50;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3332      	adds	r3, #50	@ 0x32
 8001dde:	60bb      	str	r3, [r7, #8]
				if (futureX_D>player->limitWidth-20){
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	f1a3 0214 	sub.w	r2, r3, #20
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d209      	bcs.n	8001e02 <moveE2+0x76>
					enemy->move+=1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffc6 	bl	8001d8c <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001e00:	e0d7      	b.n	8001fb2 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66A);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1a3 0008 	sub.w	r0, r3, #8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f1a3 010a 	sub.w	r1, r3, #10
 8001e12:	f24f 636a 	movw	r3, #63082	@ 0xf66a
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2314      	movs	r3, #20
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	f7ff f8ec 	bl	8000ff8 <FillRect>
					enemy->x=futureX_D;
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fe9b 	bl	8001b7c <Hitbox_e2>
				break;
 8001e46:	e0b4      	b.n	8001fb2 <moveE2+0x226>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	3332      	adds	r3, #50	@ 0x32
 8001e4e:	60fb      	str	r3, [r7, #12]
				if (futureY_A>player->limitHeight-20){
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f1a3 0214 	sub.w	r2, r3, #20
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d209      	bcs.n	8001e72 <moveE2+0xe6>
					enemy->move+=1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff8e 	bl	8001d8c <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001e70:	e09f      	b.n	8001fb2 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66A);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1a3 0008 	sub.w	r0, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f1a3 010a 	sub.w	r1, r3, #10
 8001e82:	f24f 636a 	movw	r3, #63082	@ 0xf66a
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2314      	movs	r3, #20
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	f7ff f8b4 	bl	8000ff8 <FillRect>
					enemy->y=futureY_A;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fe63 	bl	8001b7c <Hitbox_e2>
				break;
 8001eb6:	e07c      	b.n	8001fb2 <moveE2+0x226>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3b32      	subs	r3, #50	@ 0x32
 8001ebe:	613b      	str	r3, [r7, #16]
				if (futureX_I<player->limitWidth_i+20){
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f103 0214 	add.w	r2, r3, #20
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d909      	bls.n	8001ee2 <moveE2+0x156>
						enemy->move+=1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff56 	bl	8001d8c <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001ee0:	e067      	b.n	8001fb2 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66A);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1a3 0008 	sub.w	r0, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f1a3 010a 	sub.w	r1, r3, #10
 8001ef2:	f24f 636a 	movw	r3, #63082	@ 0xf66a
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2314      	movs	r3, #20
 8001efa:	2210      	movs	r2, #16
 8001efc:	f7ff f87c 	bl	8000ff8 <FillRect>
					enemy->x=futureX_I;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe2b 	bl	8001b7c <Hitbox_e2>
				break;
 8001f26:	e044      	b.n	8001fb2 <moveE2+0x226>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	3b32      	subs	r3, #50	@ 0x32
 8001f2e:	617b      	str	r3, [r7, #20]
				if (futureY_U>player->limitHeight+20){
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	f103 0214 	add.w	r2, r3, #20
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d209      	bcs.n	8001f52 <moveE2+0x1c6>
					enemy->move+=1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ff1e 	bl	8001d8c <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8001f50:	e02f      	b.n	8001fb2 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66A);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1a3 0008 	sub.w	r0, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f1a3 010a 	sub.w	r1, r3, #10
 8001f62:	f24f 636a 	movw	r3, #63082	@ 0xf66a
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2314      	movs	r3, #20
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	f7ff f844 	bl	8000ff8 <FillRect>
					enemy->y=futureY_U;
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fdf5 	bl	8001b7c <Hitbox_e2>
				break;
 8001f92:	e00e      	b.n	8001fb2 <moveE2+0x226>
			}
		}else{
			if (enemy->delay==200000){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001f9a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001fc0 <moveE2+0x234>
 8001f9e:	eef4 7a47 	vcmp.f32	s15, s14
 8001fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa6:	d104      	bne.n	8001fb2 <moveE2+0x226>
				enemy->delay=0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8001fb0:	e7ff      	b.n	8001fb2 <moveE2+0x226>
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	47c35000 	.word	0x47c35000
 8001fc0:	48435000 	.word	0x48435000
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <E2_Appear>:

void E2_Appear(enemy_type2* enemy){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af06      	add	r7, sp, #24
 8001fce:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fda:	ee17 3a90 	vmov	r3, s15
 8001fde:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d12b      	bne.n	8002040 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	dc28      	bgt.n	8002040 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3b08      	subs	r3, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	3b0a      	subs	r3, #10
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	2300      	movs	r3, #0
 8002000:	9304      	str	r3, [sp, #16]
 8002002:	2300      	movs	r3, #0
 8002004:	9303      	str	r3, [sp, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2305      	movs	r3, #5
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <E2_Appear+0x88>)
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2314      	movs	r3, #20
 8002014:	2210      	movs	r2, #16
 8002016:	f7ff f8a3 	bl	8001160 <LCD_Sprite>
			enemy->animationV+=0.05;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa56 	bl	80004d0 <__aeabi_f2d>
 8002024:	a308      	add	r3, pc, #32	@ (adr r3, 8002048 <E2_Appear+0x80>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe f8f3 	bl	8000214 <__adddf3>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe faa3 	bl	8000580 <__aeabi_d2f>
 800203a:	4602      	mov	r2, r0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	9999999a 	.word	0x9999999a
 800204c:	3fa99999 	.word	0x3fa99999
 8002050:	20000000 	.word	0x20000000
 8002054:	00000000 	.word	0x00000000

08002058 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af06      	add	r7, sp, #24
 800205e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d13b      	bne.n	80020e0 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800206e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002072:	ee17 3a90 	vmov	r3, s15
 8002076:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d12f      	bne.n	80020e0 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b02      	cmp	r3, #2
 8002084:	dc29      	bgt.n	80020da <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3b0e      	subs	r3, #14
 800208c:	4618      	mov	r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	3b0c      	subs	r3, #12
 8002094:	4619      	mov	r1, r3
 8002096:	2300      	movs	r3, #0
 8002098:	9304      	str	r3, [sp, #16]
 800209a:	2300      	movs	r3, #0
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	2303      	movs	r3, #3
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <E2_Hurt+0x98>)
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2319      	movs	r3, #25
 80020ac:	221c      	movs	r2, #28
 80020ae:	f7ff f857 	bl	8001160 <LCD_Sprite>
				enemy->animationDV+=0.05;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa0a 	bl	80004d0 <__aeabi_f2d>
 80020bc:	a30a      	add	r3, pc, #40	@ (adr r3, 80020e8 <E2_Hurt+0x90>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe f8a7 	bl	8000214 <__adddf3>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fa57 	bl	8000580 <__aeabi_d2f>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 80020d8:	e002      	b.n	80020e0 <E2_Hurt+0x88>
					enemy->isHurt=0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	9999999a 	.word	0x9999999a
 80020ec:	3fa99999 	.word	0x3fa99999
 80020f0:	20000c80 	.word	0x20000c80
 80020f4:	00000000 	.word	0x00000000

080020f8 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af06      	add	r7, sp, #24
 80020fe:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d143      	bne.n	80021a0 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b05      	cmp	r3, #5
 800211c:	dc29      	bgt.n	8002172 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3b0c      	subs	r3, #12
 8002124:	4618      	mov	r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	3b0b      	subs	r3, #11
 800212c:	4619      	mov	r1, r3
 800212e:	2300      	movs	r3, #0
 8002130:	9304      	str	r3, [sp, #16]
 8002132:	2300      	movs	r3, #0
 8002134:	9303      	str	r3, [sp, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	2306      	movs	r3, #6
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <E2_Die+0xb8>)
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2317      	movs	r3, #23
 8002144:	221a      	movs	r2, #26
 8002146:	f7ff f80b 	bl	8001160 <LCD_Sprite>
					enemy->animationDie+=0.2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9be 	bl	80004d0 <__aeabi_f2d>
 8002154:	a314      	add	r3, pc, #80	@ (adr r3, 80021a8 <E2_Die+0xb0>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe f85b 	bl	8000214 <__adddf3>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fa0b 	bl	8000580 <__aeabi_d2f>
 800216a:	4602      	mov	r2, r0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xF66A);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002170:	e016      	b.n	80021a0 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xF66A);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1a3 000c 	sub.w	r0, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f1a3 010b 	sub.w	r1, r3, #11
 8002182:	f24f 636a 	movw	r3, #63082	@ 0xf66a
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2317      	movs	r3, #23
 800218a:	221a      	movs	r2, #26
 800218c:	f7fe ff34 	bl	8000ff8 <FillRect>
						enemy->x=5000;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219e:	605a      	str	r2, [r3, #4]
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	9999999a 	.word	0x9999999a
 80021ac:	3fc99999 	.word	0x3fc99999
 80021b0:	20001ce8 	.word	0x20001ce8

080021b4 <PlayerHit_E2>:


void PlayerHit_E2(player* player, enemy_type2* enemy){
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 80f0 	bne.w	80023a8 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	f200 80eb 	bhi.w	80023a8 <PlayerHit_E2+0x1f4>
 80021d2:	a201      	add	r2, pc, #4	@ (adr r2, 80021d8 <PlayerHit_E2+0x24>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080022cb 	.word	0x080022cb
 80021e0:	0800225b 	.word	0x0800225b
 80021e4:	08002333 	.word	0x08002333
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	3b0f      	subs	r3, #15
 80021ee:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	f0c0 80cf 	bcc.w	800239a <PlayerHit_E2+0x1e6>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6a1a      	ldr	r2, [r3, #32]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	f200 80c9 	bhi.w	800239a <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	3b05      	subs	r3, #5
 8002212:	429a      	cmp	r2, r3
 8002214:	f0c0 80c1 	bcc.w	800239a <PlayerHit_E2+0x1e6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	3305      	adds	r3, #5
 8002222:	429a      	cmp	r2, r3
 8002224:	f200 80b9 	bhi.w	800239a <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 80a8 	bne.w	800239a <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002258:	e09f      	b.n	800239a <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	330f      	adds	r3, #15
 8002260:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	f0c0 8098 	bcc.w	800239e <PlayerHit_E2+0x1ea>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	f200 8092 	bhi.w	800239e <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	3b05      	subs	r3, #5
 8002284:	429a      	cmp	r2, r3
 8002286:	f0c0 808a 	bcc.w	800239e <PlayerHit_E2+0x1ea>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	3305      	adds	r3, #5
 8002294:	429a      	cmp	r2, r3
 8002296:	f200 8082 	bhi.w	800239e <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d171      	bne.n	800239e <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 80022c8:	e069      	b.n	800239e <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3314      	adds	r3, #20
 80022d0:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d362      	bcc.n	80023a2 <PlayerHit_E2+0x1ee>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d85d      	bhi.n	80023a2 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	3b0f      	subs	r3, #15
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d356      	bcc.n	80023a2 <PlayerHit_E2+0x1ee>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	3314      	adds	r3, #20
 80022fe:	429a      	cmp	r2, r3
 8002300:	d84f      	bhi.n	80023a2 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13f      	bne.n	80023a2 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002330:	e037      	b.n	80023a2 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3b14      	subs	r3, #20
 8002338:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	429a      	cmp	r2, r3
 8002342:	d330      	bcc.n	80023a6 <PlayerHit_E2+0x1f2>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	429a      	cmp	r2, r3
 800234c:	d82b      	bhi.n	80023a6 <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	3b0f      	subs	r3, #15
 8002358:	429a      	cmp	r2, r3
 800235a:	d324      	bcc.n	80023a6 <PlayerHit_E2+0x1f2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	3314      	adds	r3, #20
 8002366:	429a      	cmp	r2, r3
 8002368:	d81d      	bhi.n	80023a6 <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	1e5a      	subs	r2, r3, #1
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10d      	bne.n	80023a6 <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002398:	e005      	b.n	80023a6 <PlayerHit_E2+0x1f2>
			break;
 800239a:	bf00      	nop
 800239c:	e004      	b.n	80023a8 <PlayerHit_E2+0x1f4>
				break;
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <PlayerHit_E2+0x1f4>
				break;
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <PlayerHit_E2+0x1f4>
							break;
 80023a6:	bf00      	nop
						}
		}
	}
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <initPlayer>:


/* Funciones Jugador ---------------------------------------------------*/
void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af06      	add	r7, sp, #24
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	601a      	str	r2, [r3, #0]
    player->y = startY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	611a      	str	r2, [r3, #16]
    player->life = life;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a3a      	ldr	r2, [r7, #32]
 80023e4:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2202      	movs	r2, #2
 80023f6:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002402:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002408:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <initPlayer+0x110>)
 8002414:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <initPlayer+0x114>)
 8002420:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002428:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+1, player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3b08      	subs	r3, #8
 800243c:	4618      	mov	r0, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	3b0b      	subs	r3, #11
 8002444:	4619      	mov	r1, r3
 8002446:	2300      	movs	r3, #0
 8002448:	9304      	str	r3, [sp, #16]
 800244a:	2300      	movs	r3, #0
 800244c:	9303      	str	r3, [sp, #12]
 800244e:	2305      	movs	r3, #5
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	2306      	movs	r3, #6
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <initPlayer+0x118>)
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2317      	movs	r3, #23
 800245c:	2212      	movs	r2, #18
 800245e:	f7fe fe7f 	bl	8001160 <LCD_Sprite>
    FillRect(player->x , player->y, 1, 1, 0x000000);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	2300      	movs	r3, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2301      	movs	r3, #1
 8002470:	2201      	movs	r2, #1
 8002472:	f7fe fdc1 	bl	8000ff8 <FillRect>

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	1ad2      	subs	r2, r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34
    FillRect(player->playerRight , player->y, 1, 1, 0x0420); //Derecha
    FillRect(player->x , player->playerUp, 1, 1, 0xFFFFFF); //Arriba
    FillRect(player->x , player->playerDown, 1, 1, 0x0420); //Abajo*/


}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40e00000 	.word	0x40e00000
 80024c8:	40400000 	.word	0x40400000
 80024cc:	20006710 	.word	0x20006710

080024d0 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	@ 0x28
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d84f      	bhi.n	8002582 <playerCanMove+0xb2>
 80024e2:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <playerCanMove+0x18>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08002517 	.word	0x08002517
 80024f0:	08002539 	.word	0x08002539
 80024f4:	0800255b 	.word	0x0800255b
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	1ad2      	subs	r2, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=0){
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	dc32      	bgt.n	8002578 <playerCanMove+0xa8>
			return 0;
 8002512:	2300      	movs	r3, #0
 8002514:	e063      	b.n	80025de <playerCanMove+0x10e>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	441a      	add	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d823      	bhi.n	800257c <playerCanMove+0xac>
			return 0;
 8002534:	2300      	movs	r3, #0
 8002536:	e052      	b.n	80025de <playerCanMove+0x10e>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	429a      	cmp	r2, r3
 8002554:	d814      	bhi.n	8002580 <playerCanMove+0xb0>
			return 0;
 8002556:	2300      	movs	r3, #0
 8002558:	e041      	b.n	80025de <playerCanMove+0x10e>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=0){
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	dc06      	bgt.n	8002582 <playerCanMove+0xb2>
			return 0;
 8002574:	2300      	movs	r3, #0
 8002576:	e032      	b.n	80025de <playerCanMove+0x10e>
		break;
 8002578:	bf00      	nop
 800257a:	e002      	b.n	8002582 <playerCanMove+0xb2>
		break;
 800257c:	bf00      	nop
 800257e:	e000      	b.n	8002582 <playerCanMove+0xb2>
		break;
 8002580:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60bb      	str	r3, [r7, #8]

    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4813      	ldr	r0, [pc, #76]	@ (80025e8 <playerCanMove+0x118>)
 800259a:	f7ff f8ed 	bl	8001778 <ColisionPlayer_e1>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <playerCanMove+0xd8>
    	return 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e01a      	b.n	80025de <playerCanMove+0x10e>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	480e      	ldr	r0, [pc, #56]	@ (80025ec <playerCanMove+0x11c>)
 80025b4:	f7ff f8e0 	bl	8001778 <ColisionPlayer_e1>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <playerCanMove+0xf2>
        	return 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	e00d      	b.n	80025de <playerCanMove+0x10e>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4808      	ldr	r0, [pc, #32]	@ (80025f0 <playerCanMove+0x120>)
 80025ce:	f7ff f8d3 	bl	8001778 <ColisionPlayer_e1>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <playerCanMove+0x10c>
        	return 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <playerCanMove+0x10e>
        }
    // No hay colisiones, se puede mover
    return 1;
 80025dc:	2301      	movs	r3, #1
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20015524 	.word	0x20015524
 80025ec:	20015558 	.word	0x20015558
 80025f0:	2001558c 	.word	0x2001558c

080025f4 <HitboxPlayer>:

void HitboxPlayer(player* player){
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	1ad2      	subs	r2, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	441a      	add	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	441a      	add	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 800263c:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HitboxPlayer+0x168>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d113      	bne.n	800266c <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	1ad0      	subs	r0, r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	1ad1      	subs	r1, r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2400      	movs	r4, #0
 8002666:	9400      	str	r4, [sp, #0]
 8002668:	f7fe fc9e 	bl	8000fa8 <Rect>
        }
    if (DrawHitbox==2){
 800266c:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HitboxPlayer+0x168>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d12b      	bne.n	80026cc <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	2201      	movs	r2, #1
 8002686:	f7fe fcb7 	bl	8000ff8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2301      	movs	r3, #1
 800269a:	2201      	movs	r2, #1
 800269c:	f7fe fcac 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80026a8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2301      	movs	r3, #1
 80026b0:	2201      	movs	r2, #1
 80026b2:	f7fe fca1 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026be:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2301      	movs	r3, #1
 80026c6:	2201      	movs	r2, #1
 80026c8:	f7fe fc96 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 80026cc:	4b23      	ldr	r3, [pc, #140]	@ (800275c <HitboxPlayer+0x168>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d13f      	bne.n	8002754 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	1ad0      	subs	r0, r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	1ad1      	subs	r1, r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2400      	movs	r4, #0
 80026f6:	9400      	str	r4, [sp, #0]
 80026f8:	f7fe fc56 	bl	8000fa8 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2301      	movs	r3, #1
 800270c:	2201      	movs	r2, #1
 800270e:	f7fe fc73 	bl	8000ff8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	2201      	movs	r2, #1
 8002724:	f7fe fc68 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002730:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2301      	movs	r3, #1
 8002738:	2201      	movs	r2, #1
 800273a:	f7fe fc5d 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002746:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	2201      	movs	r2, #1
 8002750:	f7fe fc52 	bl	8000ff8 <FillRect>

        }
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bd90      	pop	{r4, r7, pc}
 800275c:	20015394 	.word	0x20015394

08002760 <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b01      	cmp	r3, #1
 8002770:	f040 80d0 	bne.w	8002914 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2b03      	cmp	r3, #3
 800277a:	f200 80cb 	bhi.w	8002914 <PlayerHit+0x1b4>
 800277e:	a201      	add	r2, pc, #4	@ (adr r2, 8002784 <PlayerHit+0x24>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002795 	.word	0x08002795
 8002788:	08002853 	.word	0x08002853
 800278c:	080027f9 	.word	0x080027f9
 8002790:	080028ad 	.word	0x080028ad
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	3b0f      	subs	r3, #15
 800279a:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	f0c0 80af 	bcc.w	8002906 <PlayerHit+0x1a6>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	f200 80a9 	bhi.w	8002906 <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	3b05      	subs	r3, #5
 80027be:	429a      	cmp	r2, r3
 80027c0:	f0c0 80a1 	bcc.w	8002906 <PlayerHit+0x1a6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	3305      	adds	r3, #5
 80027ce:	429a      	cmp	r2, r3
 80027d0:	f200 8099 	bhi.w	8002906 <PlayerHit+0x1a6>
						enemy->health -= 1;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 808f 	bne.w	8002906 <PlayerHit+0x1a6>
							enemy->isAlive=0;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 80027f6:	e086      	b.n	8002906 <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	330f      	adds	r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	429a      	cmp	r2, r3
 8002808:	d37f      	bcc.n	800290a <PlayerHit+0x1aa>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d87a      	bhi.n	800290a <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	3b05      	subs	r3, #5
 800281e:	429a      	cmp	r2, r3
 8002820:	d373      	bcc.n	800290a <PlayerHit+0x1aa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	3305      	adds	r3, #5
 800282c:	429a      	cmp	r2, r3
 800282e:	d86c      	bhi.n	800290a <PlayerHit+0x1aa>
						enemy->health -= 1;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d163      	bne.n	800290a <PlayerHit+0x1aa>
							enemy->isAlive=0;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8002850:	e05b      	b.n	800290a <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d354      	bcc.n	800290e <PlayerHit+0x1ae>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	429a      	cmp	r2, r3
 800286c:	d84f      	bhi.n	800290e <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	3b0f      	subs	r3, #15
 8002878:	429a      	cmp	r2, r3
 800287a:	d348      	bcc.n	800290e <PlayerHit+0x1ae>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	3314      	adds	r3, #20
 8002886:	429a      	cmp	r2, r3
 8002888:	d841      	bhi.n	800290e <PlayerHit+0x1ae>
						enemy->health -= 1;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d138      	bne.n	800290e <PlayerHit+0x1ae>
							enemy->isAlive=0;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 80028aa:	e030      	b.n	800290e <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3b14      	subs	r3, #20
 80028b2:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d329      	bcc.n	8002912 <PlayerHit+0x1b2>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d824      	bhi.n	8002912 <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	3b0f      	subs	r3, #15
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d31d      	bcc.n	8002912 <PlayerHit+0x1b2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	3314      	adds	r3, #20
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d816      	bhi.n	8002912 <PlayerHit+0x1b2>
									enemy->health -= 1;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <PlayerHit+0x1b2>
										enemy->isAlive=0;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8002904:	e005      	b.n	8002912 <PlayerHit+0x1b2>
			break;
 8002906:	bf00      	nop
 8002908:	e004      	b.n	8002914 <PlayerHit+0x1b4>
				break;
 800290a:	bf00      	nop
 800290c:	e002      	b.n	8002914 <PlayerHit+0x1b4>
				break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <PlayerHit+0x1b4>
							break;
 8002912:	bf00      	nop
						}
		}
	}
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <PlayerAnimation>:

void PlayerAnimation(player* player){
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af06      	add	r7, sp, #24
 8002926:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d16f      	bne.n	8002a10 <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d117      	bne.n	8002968 <PlayerAnimation+0x48>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3b08      	subs	r3, #8
 800293e:	4618      	mov	r0, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	3b0d      	subs	r3, #13
 8002946:	4619      	mov	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294c:	461a      	mov	r2, r3
 800294e:	2300      	movs	r3, #0
 8002950:	9304      	str	r3, [sp, #16]
 8002952:	2300      	movs	r3, #0
 8002954:	9303      	str	r3, [sp, #12]
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	230a      	movs	r3, #10
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a18 <PlayerAnimation+0xf8>)
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	231a      	movs	r3, #26
 8002962:	2212      	movs	r2, #18
 8002964:	f7fe fbfc 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==1){
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d117      	bne.n	80029a0 <PlayerAnimation+0x80>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b0a      	subs	r3, #10
 8002976:	4618      	mov	r0, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	3b0b      	subs	r3, #11
 800297e:	4619      	mov	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002984:	461a      	mov	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9304      	str	r3, [sp, #16]
 800298a:	2301      	movs	r3, #1
 800298c:	9303      	str	r3, [sp, #12]
 800298e:	9202      	str	r2, [sp, #8]
 8002990:	230a      	movs	r3, #10
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	4b21      	ldr	r3, [pc, #132]	@ (8002a1c <PlayerAnimation+0xfc>)
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2317      	movs	r3, #23
 800299a:	2216      	movs	r2, #22
 800299c:	f7fe fbe0 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==2){
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d117      	bne.n	80029d8 <PlayerAnimation+0xb8>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3b08      	subs	r3, #8
 80029ae:	4618      	mov	r0, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	3b0b      	subs	r3, #11
 80029b6:	4619      	mov	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029bc:	461a      	mov	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9304      	str	r3, [sp, #16]
 80029c2:	2300      	movs	r3, #0
 80029c4:	9303      	str	r3, [sp, #12]
 80029c6:	9202      	str	r2, [sp, #8]
 80029c8:	230a      	movs	r3, #10
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <PlayerAnimation+0x100>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2318      	movs	r3, #24
 80029d2:	2212      	movs	r2, #18
 80029d4:	f7fe fbc4 	bl	8001160 <LCD_Sprite>
			}
		if (player->direction==3){
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d117      	bne.n	8002a10 <PlayerAnimation+0xf0>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3b0a      	subs	r3, #10
 80029e6:	4618      	mov	r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	3b0b      	subs	r3, #11
 80029ee:	4619      	mov	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f4:	461a      	mov	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	9304      	str	r3, [sp, #16]
 80029fa:	2300      	movs	r3, #0
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	9202      	str	r2, [sp, #8]
 8002a00:	230a      	movs	r3, #10
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <PlayerAnimation+0xfc>)
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2317      	movs	r3, #23
 8002a0a:	2216      	movs	r2, #22
 8002a0c:	f7fe fba8 	bl	8001160 <LCD_Sprite>
			}
	}
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20010d44 	.word	0x20010d44
 8002a1c:	2000e5bc 	.word	0x2000e5bc
 8002a20:	200131d4 	.word	0x200131d4
 8002a24:	00000000 	.word	0x00000000

08002a28 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af06      	add	r7, sp, #24
 8002a2e:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a3a:	ee17 3a90 	vmov	r3, s15
 8002a3e:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 8082 	bne.w	8002b4e <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	dc7b      	bgt.n	8002b48 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d115      	bne.n	8002a84 <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3b08      	subs	r3, #8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	3b0b      	subs	r3, #11
 8002a66:	4619      	mov	r1, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9303      	str	r3, [sp, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	9302      	str	r3, [sp, #8]
 8002a74:	2306      	movs	r3, #6
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <PlayerAttackAnimation+0x138>)
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2316      	movs	r3, #22
 8002a7e:	2212      	movs	r2, #18
 8002a80:	f7fe fb6e 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d115      	bne.n	8002ab8 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3b09      	subs	r3, #9
 8002a92:	4618      	mov	r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	3b0b      	subs	r3, #11
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9304      	str	r3, [sp, #16]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9303      	str	r3, [sp, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <PlayerAttackAnimation+0x13c>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2316      	movs	r3, #22
 8002ab2:	2214      	movs	r2, #20
 8002ab4:	f7fe fb54 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d115      	bne.n	8002aec <PlayerAttackAnimation+0xc4>

				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3b08      	subs	r3, #8
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	3b0b      	subs	r3, #11
 8002ace:	4619      	mov	r1, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9304      	str	r3, [sp, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	2306      	movs	r3, #6
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <PlayerAttackAnimation+0x140>)
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2317      	movs	r3, #23
 8002ae6:	2212      	movs	r2, #18
 8002ae8:	f7fe fb3a 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d115      	bne.n	8002b20 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3b09      	subs	r3, #9
 8002afa:	4618      	mov	r0, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	3b0b      	subs	r3, #11
 8002b02:	4619      	mov	r1, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	9304      	str	r3, [sp, #16]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9303      	str	r3, [sp, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	2306      	movs	r3, #6
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <PlayerAttackAnimation+0x13c>)
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2316      	movs	r3, #22
 8002b1a:	2214      	movs	r2, #20
 8002b1c:	f7fe fb20 	bl	8001160 <LCD_Sprite>
					}
			player->animationAttack+=0.2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fcd3 	bl	80004d0 <__aeabi_f2d>
 8002b2a:	a30b      	add	r3, pc, #44	@ (adr r3, 8002b58 <PlayerAttackAnimation+0x130>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f7fd fb70 	bl	8000214 <__adddf3>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fd fd20 	bl	8000580 <__aeabi_d2f>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 8002b46:	e002      	b.n	8002b4e <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	9999999a 	.word	0x9999999a
 8002b5c:	3fc99999 	.word	0x3fc99999
 8002b60:	20008f18 	.word	0x20008f18
 8002b64:	20007a78 	.word	0x20007a78
 8002b68:	20006710 	.word	0x20006710
 8002b6c:	00000000 	.word	0x00000000

08002b70 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af06      	add	r7, sp, #24
 8002b76:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b82:	ee17 3a90 	vmov	r3, s15
 8002b86:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 8082 	bne.w	8002c96 <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	dc7b      	bgt.n	8002c90 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d115      	bne.n	8002bcc <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	3b0a      	subs	r3, #10
 8002bae:	4619      	mov	r1, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9304      	str	r3, [sp, #16]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9303      	str	r3, [sp, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	4b39      	ldr	r3, [pc, #228]	@ (8002ca8 <PlayerDamageAnimation+0x138>)
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2314      	movs	r3, #20
 8002bc6:	2212      	movs	r2, #18
 8002bc8:	f7fe faca 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d115      	bne.n	8002c00 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3b09      	subs	r3, #9
 8002bda:	4618      	mov	r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	3b0a      	subs	r3, #10
 8002be2:	4619      	mov	r1, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	9304      	str	r3, [sp, #16]
 8002be8:	2301      	movs	r3, #1
 8002bea:	9303      	str	r3, [sp, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	9302      	str	r3, [sp, #8]
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002cac <PlayerDamageAnimation+0x13c>)
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2315      	movs	r3, #21
 8002bfa:	2214      	movs	r2, #20
 8002bfc:	f7fe fab0 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d115      	bne.n	8002c34 <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3b09      	subs	r3, #9
 8002c0e:	4618      	mov	r0, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	3b0a      	subs	r3, #10
 8002c16:	4619      	mov	r1, r3
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9304      	str	r3, [sp, #16]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9303      	str	r3, [sp, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	2303      	movs	r3, #3
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <PlayerDamageAnimation+0x140>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2315      	movs	r3, #21
 8002c2e:	2214      	movs	r2, #20
 8002c30:	f7fe fa96 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d115      	bne.n	8002c68 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3b09      	subs	r3, #9
 8002c42:	4618      	mov	r0, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	3b0a      	subs	r3, #10
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9304      	str	r3, [sp, #16]
 8002c50:	2300      	movs	r3, #0
 8002c52:	9303      	str	r3, [sp, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	2303      	movs	r3, #3
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <PlayerDamageAnimation+0x13c>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2315      	movs	r3, #21
 8002c62:	2214      	movs	r2, #20
 8002c64:	f7fe fa7c 	bl	8001160 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc2f 	bl	80004d0 <__aeabi_f2d>
 8002c72:	a30b      	add	r3, pc, #44	@ (adr r3, 8002ca0 <PlayerDamageAnimation+0x130>)
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f7fd facc 	bl	8000214 <__adddf3>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd fc7c 	bl	8000580 <__aeabi_d2f>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 8002c8e:	e002      	b.n	8002c96 <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	9999999a 	.word	0x9999999a
 8002ca4:	3fc99999 	.word	0x3fc99999
 8002ca8:	200038f0 	.word	0x200038f0
 8002cac:	20004160 	.word	0x20004160
 8002cb0:	20004b38 	.word	0x20004b38
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af06      	add	r7, sp, #24
 8002cbe:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cca:	ee17 3a90 	vmov	r3, s15
 8002cce:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d12b      	bne.n	8002d30 <PlayerDieAnimation+0x78>
		if (variableAnimationDie<4){
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	dc28      	bgt.n	8002d30 <PlayerDieAnimation+0x78>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3b0b      	subs	r3, #11
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	3b0c      	subs	r3, #12
 8002cec:	4619      	mov	r1, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9303      	str	r3, [sp, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	9302      	str	r3, [sp, #8]
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <PlayerDieAnimation+0x88>)
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2318      	movs	r3, #24
 8002d04:	2218      	movs	r2, #24
 8002d06:	f7fe fa2b 	bl	8001160 <LCD_Sprite>
			player->animationDie+=0.2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fbde 	bl	80004d0 <__aeabi_f2d>
 8002d14:	a308      	add	r3, pc, #32	@ (adr r3, 8002d38 <PlayerDieAnimation+0x80>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fa7b 	bl	8000214 <__adddf3>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd fc2b 	bl	8000580 <__aeabi_d2f>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	9999999a 	.word	0x9999999a
 8002d3c:	3fc99999 	.word	0x3fc99999
 8002d40:	20005510 	.word	0x20005510

08002d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8002d4a:	f000 fe09 	bl	8003960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d4e:	f000 f8e5 	bl	8002f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d52:	f000 f9d9 	bl	8003108 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002d56:	f000 f94d 	bl	8002ff4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002d5a:	f000 f9ab 	bl	80030b4 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8002d5e:	f000 f97f 	bl	8003060 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8002d62:	f7fd fdd5 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fe f85a 	bl	8000e20 <LCD_Clear>

	//Fondo
	FillRect(0, 0, 319, 239, 0xFFFF);
 8002d6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	23ef      	movs	r3, #239	@ 0xef
 8002d74:	f240 123f 	movw	r2, #319	@ 0x13f
 8002d78:	2100      	movs	r1, #0
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fe f93c 	bl	8000ff8 <FillRect>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8002d80:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef4 <main+0x1b0>)
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	23f0      	movs	r3, #240	@ 0xf0
 8002d86:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe f98d 	bl	80010ac <LCD_Bitmap>

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	  // Activar bandera interrupcion
	  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8002d92:	2201      	movs	r2, #1
 8002d94:	4958      	ldr	r1, [pc, #352]	@ (8002ef8 <main+0x1b4>)
 8002d96:	4859      	ldr	r0, [pc, #356]	@ (8002efc <main+0x1b8>)
 8002d98:	f002 f805 	bl	8004da6 <HAL_UART_Receive_IT>
	  modo=1;
 8002d9c:	4b58      	ldr	r3, [pc, #352]	@ (8002f00 <main+0x1bc>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
	  fase_p1=2;
 8002da2:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <main+0x1c0>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
	  if (modo==1){
 8002da8:	4b55      	ldr	r3, [pc, #340]	@ (8002f00 <main+0x1bc>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d143      	bne.n	8002e38 <main+0xf4>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 320, 240,0);
 8002db0:	2300      	movs	r3, #0
 8002db2:	9305      	str	r3, [sp, #20]
 8002db4:	23f0      	movs	r3, #240	@ 0xf0
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002dbc:	9303      	str	r3, [sp, #12]
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	9302      	str	r3, [sp, #8]
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	231e      	movs	r3, #30
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2316      	movs	r3, #22
 8002dcc:	22c8      	movs	r2, #200	@ 0xc8
 8002dce:	21a0      	movs	r1, #160	@ 0xa0
 8002dd0:	484d      	ldr	r0, [pc, #308]	@ (8002f08 <main+0x1c4>)
 8002dd2:	f7ff faef 	bl	80023b4 <initPlayer>

	    if (fase_p1==1){
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002f04 <main+0x1c0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d11e      	bne.n	8002e1c <main+0xd8>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8002dde:	2303      	movs	r3, #3
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2313      	movs	r3, #19
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2310      	movs	r3, #16
 8002de8:	2250      	movs	r2, #80	@ 0x50
 8002dea:	2128      	movs	r1, #40	@ 0x28
 8002dec:	4847      	ldr	r0, [pc, #284]	@ (8002f0c <main+0x1c8>)
 8002dee:	f7fe fbd1 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8002df2:	2303      	movs	r3, #3
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2313      	movs	r3, #19
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	2250      	movs	r2, #80	@ 0x50
 8002dfe:	21a0      	movs	r1, #160	@ 0xa0
 8002e00:	4843      	ldr	r0, [pc, #268]	@ (8002f10 <main+0x1cc>)
 8002e02:	f7fe fbc7 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8002e06:	2303      	movs	r3, #3
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2313      	movs	r3, #19
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2310      	movs	r3, #16
 8002e10:	2250      	movs	r2, #80	@ 0x50
 8002e12:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002e16:	483f      	ldr	r0, [pc, #252]	@ (8002f14 <main+0x1d0>)
 8002e18:	f7fe fbbc 	bl	8001594 <initEnemy1>

		  if (fase_p1==2){
 8002e1c:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <main+0x1c0>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d109      	bne.n	8002e38 <main+0xf4>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 8002e24:	2303      	movs	r3, #3
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2314      	movs	r3, #20
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	2250      	movs	r2, #80	@ 0x50
 8002e30:	21a0      	movs	r1, #160	@ 0xa0
 8002e32:	4839      	ldr	r0, [pc, #228]	@ (8002f18 <main+0x1d4>)
 8002e34:	f7fe ff70 	bl	8001d18 <initEnemy2>
			  }
		  }
	  if (modo==2){
 8002e38:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <main+0x1bc>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d105      	bne.n	8002e4c <main+0x108>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8002e40:	2300      	movs	r3, #0
 8002e42:	22f0      	movs	r2, #240	@ 0xf0
 8002e44:	2100      	movs	r1, #0
 8002e46:	20a0      	movs	r0, #160	@ 0xa0
 8002e48:	f7fe f86e 	bl	8000f28 <V_line>
	  }

	  HitboxPlayer(&p1);
 8002e4c:	482e      	ldr	r0, [pc, #184]	@ (8002f08 <main+0x1c4>)
 8002e4e:	f7ff fbd1 	bl	80025f4 <HitboxPlayer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (fase_p1==1){
 8002e52:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <main+0x1c0>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d126      	bne.n	8002ea8 <main+0x164>
			if(e1_1.isAlive==1){
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <main+0x1c8>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <main+0x12a>
					animation_e1(&e1_1);
 8002e62:	482a      	ldr	r0, [pc, #168]	@ (8002f0c <main+0x1c8>)
 8002e64:	f7fe fa7c 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_1);}
 8002e68:	4828      	ldr	r0, [pc, #160]	@ (8002f0c <main+0x1c8>)
 8002e6a:	f7fe fa25 	bl	80012b8 <animation_e1_control>
			if(e1_2.isAlive==1){
 8002e6e:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <main+0x1cc>)
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <main+0x13e>
				animation_e1(&e1_2);
 8002e76:	4826      	ldr	r0, [pc, #152]	@ (8002f10 <main+0x1cc>)
 8002e78:	f7fe fa72 	bl	8001360 <animation_e1>
				animation_e1_control(&e1_2);}
 8002e7c:	4824      	ldr	r0, [pc, #144]	@ (8002f10 <main+0x1cc>)
 8002e7e:	f7fe fa1b 	bl	80012b8 <animation_e1_control>

			if(e1_2.isAlive==1){
 8002e82:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <main+0x1cc>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <main+0x152>
				animation_e1(&e1_3);
 8002e8a:	4822      	ldr	r0, [pc, #136]	@ (8002f14 <main+0x1d0>)
 8002e8c:	f7fe fa68 	bl	8001360 <animation_e1>
				animation_e1_control(&e1_3);}
 8002e90:	4820      	ldr	r0, [pc, #128]	@ (8002f14 <main+0x1d0>)
 8002e92:	f7fe fa11 	bl	80012b8 <animation_e1_control>

			animation_e1_die(&e1_1);
 8002e96:	481d      	ldr	r0, [pc, #116]	@ (8002f0c <main+0x1c8>)
 8002e98:	f7fe fb2a 	bl	80014f0 <animation_e1_die>
			animation_e1_die(&e1_2);
 8002e9c:	481c      	ldr	r0, [pc, #112]	@ (8002f10 <main+0x1cc>)
 8002e9e:	f7fe fb27 	bl	80014f0 <animation_e1_die>
			animation_e1_die(&e1_3);
 8002ea2:	481c      	ldr	r0, [pc, #112]	@ (8002f14 <main+0x1d0>)
 8002ea4:	f7fe fb24 	bl	80014f0 <animation_e1_die>
		}

		if (fase_p1==2){
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <main+0x1c0>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d116      	bne.n	8002ede <main+0x19a>
			moveE2(&e2_1, &p1);
 8002eb0:	4915      	ldr	r1, [pc, #84]	@ (8002f08 <main+0x1c4>)
 8002eb2:	4819      	ldr	r0, [pc, #100]	@ (8002f18 <main+0x1d4>)
 8002eb4:	f7fe ff6a 	bl	8001d8c <moveE2>
			e2_1.delay+=0.5; //1
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <main+0x1d4>)
 8002eba:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002ebe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ec6:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <main+0x1d4>)
 8002ec8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			E2_Appear(&e2_1);
 8002ecc:	4812      	ldr	r0, [pc, #72]	@ (8002f18 <main+0x1d4>)
 8002ece:	f7ff f87b 	bl	8001fc8 <E2_Appear>
			E2_Hurt(&e2_1);
 8002ed2:	4811      	ldr	r0, [pc, #68]	@ (8002f18 <main+0x1d4>)
 8002ed4:	f7ff f8c0 	bl	8002058 <E2_Hurt>
			E2_Die(&e2_1);
 8002ed8:	480f      	ldr	r0, [pc, #60]	@ (8002f18 <main+0x1d4>)
 8002eda:	f7ff f90d 	bl	80020f8 <E2_Die>
		}

		PlayerAttackAnimation(&p1);
 8002ede:	480a      	ldr	r0, [pc, #40]	@ (8002f08 <main+0x1c4>)
 8002ee0:	f7ff fda2 	bl	8002a28 <PlayerAttackAnimation>
		PlayerDamageAnimation(&p1);
 8002ee4:	4808      	ldr	r0, [pc, #32]	@ (8002f08 <main+0x1c4>)
 8002ee6:	f7ff fe43 	bl	8002b70 <PlayerDamageAnimation>
		PlayerDieAnimation(&p1);
 8002eea:	4807      	ldr	r0, [pc, #28]	@ (8002f08 <main+0x1c4>)
 8002eec:	f7ff fee4 	bl	8002cb8 <PlayerDieAnimation>
		if (fase_p1==1){
 8002ef0:	e7af      	b.n	8002e52 <main+0x10e>
 8002ef2:	bf00      	nop
 8002ef4:	08005c5c 	.word	0x08005c5c
 8002ef8:	200154a8 	.word	0x200154a8
 8002efc:	20015460 	.word	0x20015460
 8002f00:	20015604 	.word	0x20015604
 8002f04:	20015605 	.word	0x20015605
 8002f08:	200154b4 	.word	0x200154b4
 8002f0c:	20015524 	.word	0x20015524
 8002f10:	20015558 	.word	0x20015558
 8002f14:	2001558c 	.word	0x2001558c
 8002f18:	200155c0 	.word	0x200155c0

08002f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b094      	sub	sp, #80	@ 0x50
 8002f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	2234      	movs	r2, #52	@ 0x34
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fe5e 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	4b29      	ldr	r3, [pc, #164]	@ (8002fec <SystemClock_Config+0xd0>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <SystemClock_Config+0xd0>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f50:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <SystemClock_Config+0xd0>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <SystemClock_Config+0xd4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f68:	4a21      	ldr	r2, [pc, #132]	@ (8002ff0 <SystemClock_Config+0xd4>)
 8002f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <SystemClock_Config+0xd4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f80:	2301      	movs	r3, #1
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f84:	2310      	movs	r3, #16
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f90:	2308      	movs	r3, #8
 8002f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002f94:	2350      	movs	r3, #80	@ 0x50
 8002f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fb85 	bl	80046b8 <HAL_RCC_OscConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002fb4:	f000 fb30 	bl	8003618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb8:	230f      	movs	r3, #15
 8002fba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 f8ab 	bl	8004130 <HAL_RCC_ClockConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002fe0:	f000 fb1a 	bl	8003618 <Error_Handler>
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3750      	adds	r7, #80	@ 0x50
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <MX_SPI1_Init+0x64>)
 8002ffa:	4a18      	ldr	r2, [pc, #96]	@ (800305c <MX_SPI1_Init+0x68>)
 8002ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800300c:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <MX_SPI1_Init+0x64>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003012:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <MX_SPI1_Init+0x64>)
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003026:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003028:	2200      	movs	r2, #0
 800302a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800302c:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <MX_SPI1_Init+0x64>)
 800302e:	2200      	movs	r2, #0
 8003030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003032:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <MX_SPI1_Init+0x64>)
 800303a:	2200      	movs	r2, #0
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003040:	220a      	movs	r2, #10
 8003042:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003044:	4804      	ldr	r0, [pc, #16]	@ (8003058 <MX_SPI1_Init+0x64>)
 8003046:	f001 fdd5 	bl	8004bf4 <HAL_SPI_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003050:	f000 fae2 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200153c0 	.word	0x200153c0
 800305c:	40013000 	.word	0x40013000

08003060 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <MX_UART5_Init+0x4c>)
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <MX_UART5_Init+0x50>)
 8003068:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <MX_UART5_Init+0x4c>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <MX_UART5_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <MX_UART5_Init+0x4c>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <MX_UART5_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <MX_UART5_Init+0x4c>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <MX_UART5_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <MX_UART5_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	@ (80030ac <MX_UART5_Init+0x4c>)
 8003098:	f001 fe35 	bl	8004d06 <HAL_UART_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80030a2:	f000 fab9 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20015418 	.word	0x20015418
 80030b0:	40005000 	.word	0x40005000

080030b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030ba:	4a12      	ldr	r2, [pc, #72]	@ (8003104 <MX_USART2_UART_Init+0x50>)
 80030bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030da:	220c      	movs	r2, #12
 80030dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030de:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ea:	4805      	ldr	r0, [pc, #20]	@ (8003100 <MX_USART2_UART_Init+0x4c>)
 80030ec:	f001 fe0b 	bl	8004d06 <HAL_UART_Init>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030f6:	f000 fa8f 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20015460 	.word	0x20015460
 8003104:	40004400 	.word	0x40004400

08003108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b42      	ldr	r3, [pc, #264]	@ (800322c <MX_GPIO_Init+0x124>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a41      	ldr	r2, [pc, #260]	@ (800322c <MX_GPIO_Init+0x124>)
 8003128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b3f      	ldr	r3, [pc, #252]	@ (800322c <MX_GPIO_Init+0x124>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <MX_GPIO_Init+0x124>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a3a      	ldr	r2, [pc, #232]	@ (800322c <MX_GPIO_Init+0x124>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b38      	ldr	r3, [pc, #224]	@ (800322c <MX_GPIO_Init+0x124>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b34      	ldr	r3, [pc, #208]	@ (800322c <MX_GPIO_Init+0x124>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a33      	ldr	r2, [pc, #204]	@ (800322c <MX_GPIO_Init+0x124>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b31      	ldr	r3, [pc, #196]	@ (800322c <MX_GPIO_Init+0x124>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <MX_GPIO_Init+0x124>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4a2c      	ldr	r2, [pc, #176]	@ (800322c <MX_GPIO_Init+0x124>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6313      	str	r3, [r2, #48]	@ 0x30
 8003182:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <MX_GPIO_Init+0x124>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b26      	ldr	r3, [pc, #152]	@ (800322c <MX_GPIO_Init+0x124>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a25      	ldr	r2, [pc, #148]	@ (800322c <MX_GPIO_Init+0x124>)
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b23      	ldr	r3, [pc, #140]	@ (800322c <MX_GPIO_Init+0x124>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2182      	movs	r1, #130	@ 0x82
 80031ae:	4820      	ldr	r0, [pc, #128]	@ (8003230 <MX_GPIO_Init+0x128>)
 80031b0:	f000 ffa4 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80031b4:	2200      	movs	r2, #0
 80031b6:	f240 7113 	movw	r1, #1811	@ 0x713
 80031ba:	481e      	ldr	r0, [pc, #120]	@ (8003234 <MX_GPIO_Init+0x12c>)
 80031bc:	f000 ff9e 	bl	80040fc <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80031c0:	2200      	movs	r2, #0
 80031c2:	f240 4179 	movw	r1, #1145	@ 0x479
 80031c6:	481c      	ldr	r0, [pc, #112]	@ (8003238 <MX_GPIO_Init+0x130>)
 80031c8:	f000 ff98 	bl	80040fc <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 80031cc:	2382      	movs	r3, #130	@ 0x82
 80031ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d0:	2301      	movs	r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d8:	2302      	movs	r3, #2
 80031da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031dc:	f107 0314 	add.w	r3, r7, #20
 80031e0:	4619      	mov	r1, r3
 80031e2:	4813      	ldr	r0, [pc, #76]	@ (8003230 <MX_GPIO_Init+0x128>)
 80031e4:	f000 fdf6 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80031e8:	f240 7313 	movw	r3, #1811	@ 0x713
 80031ec:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031f6:	2302      	movs	r3, #2
 80031f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4619      	mov	r1, r3
 8003200:	480c      	ldr	r0, [pc, #48]	@ (8003234 <MX_GPIO_Init+0x12c>)
 8003202:	f000 fde7 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003206:	f240 4379 	movw	r3, #1145	@ 0x479
 800320a:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320c:	2301      	movs	r3, #1
 800320e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003214:	2302      	movs	r3, #2
 8003216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	4619      	mov	r1, r3
 800321e:	4806      	ldr	r0, [pc, #24]	@ (8003238 <MX_GPIO_Init+0x130>)
 8003220:	f000 fdd8 	bl	8003dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	@ 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	40020800 	.word	0x40020800
 8003234:	40020000 	.word	0x40020000
 8003238:	40020400 	.word	0x40020400

0800323c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af06      	add	r7, sp, #24
 8003242:	6078      	str	r0, [r7, #4]
	HitboxPlayer(&p1);
 8003244:	4894      	ldr	r0, [pc, #592]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003246:	f7ff f9d5 	bl	80025f4 <HitboxPlayer>
	if(buffer[0] == 'd'){
 800324a:	4b94      	ldr	r3, [pc, #592]	@ (800349c <HAL_UART_RxCpltCallback+0x260>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d175      	bne.n	800333e <HAL_UART_RxCpltCallback+0x102>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003252:	4b91      	ldr	r3, [pc, #580]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	2b00      	cmp	r3, #0
 8003258:	d171      	bne.n	800333e <HAL_UART_RxCpltCallback+0x102>
 800325a:	4b8f      	ldr	r3, [pc, #572]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d16d      	bne.n	800333e <HAL_UART_RxCpltCallback+0x102>
 8003262:	4b8d      	ldr	r3, [pc, #564]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d169      	bne.n	800333e <HAL_UART_RxCpltCallback+0x102>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 800326a:	4b8b      	ldr	r3, [pc, #556]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b8a      	ldr	r3, [pc, #552]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	1c58      	adds	r0, r3, #1
 8003278:	4b87      	ldr	r3, [pc, #540]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4b86      	ldr	r3, [pc, #536]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	4b84      	ldr	r3, [pc, #528]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	4b82      	ldr	r3, [pc, #520]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	3301      	adds	r3, #1
 8003292:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003296:	9400      	str	r4, [sp, #0]
 8003298:	f7fd feae 	bl	8000ff8 <FillRect>
			p1.direction=2;
 800329c:	4b7e      	ldr	r3, [pc, #504]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800329e:	2202      	movs	r2, #2
 80032a0:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 80032a2:	2100      	movs	r1, #0
 80032a4:	487c      	ldr	r0, [pc, #496]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032a6:	f7ff f913 	bl	80024d0 <playerCanMove>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_UART_RxCpltCallback+0xa4>
		    p1.y=p1.y+p1.speed;
 80032b0:	4b79      	ldr	r3, [pc, #484]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4b78      	ldr	r3, [pc, #480]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a77      	ldr	r2, [pc, #476]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032bc:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 80032be:	4b76      	ldr	r3, [pc, #472]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d805      	bhi.n	80032d2 <HAL_UART_RxCpltCallback+0x96>
		    		p1.animationWalkDown+=1;
 80032c6:	4b74      	ldr	r3, [pc, #464]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	3301      	adds	r3, #1
 80032cc:	4a72      	ldr	r2, [pc, #456]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80032d0:	e002      	b.n	80032d8 <HAL_UART_RxCpltCallback+0x9c>
		    			} else{
		    				p1.animationWalkDown=0;
 80032d2:	4b71      	ldr	r3, [pc, #452]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 80032d8:	486f      	ldr	r0, [pc, #444]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032da:	f7ff fb21 	bl	8002920 <PlayerAnimation>
 80032de:	e02e      	b.n	800333e <HAL_UART_RxCpltCallback+0x102>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 80032e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	1c58      	adds	r0, r3, #1
 80032ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4b69      	ldr	r3, [pc, #420]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	4b66      	ldr	r3, [pc, #408]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	4b65      	ldr	r3, [pc, #404]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800330c:	9400      	str	r4, [sp, #0]
 800330e:	f7fd fe73 	bl	8000ff8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8003312:	4b61      	ldr	r3, [pc, #388]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3b08      	subs	r3, #8
 8003318:	4618      	mov	r0, r3
 800331a:	4b5f      	ldr	r3, [pc, #380]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	3b0c      	subs	r3, #12
 8003320:	4619      	mov	r1, r3
 8003322:	2300      	movs	r3, #0
 8003324:	9304      	str	r3, [sp, #16]
 8003326:	2300      	movs	r3, #0
 8003328:	9303      	str	r3, [sp, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	9302      	str	r3, [sp, #8]
 800332e:	230a      	movs	r3, #10
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	4b5b      	ldr	r3, [pc, #364]	@ (80034a0 <HAL_UART_RxCpltCallback+0x264>)
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	231a      	movs	r3, #26
 8003338:	2212      	movs	r2, #18
 800333a:	f7fd ff11 	bl	8001160 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 800333e:	4b57      	ldr	r3, [pc, #348]	@ (800349c <HAL_UART_RxCpltCallback+0x260>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b75      	cmp	r3, #117	@ 0x75
 8003344:	d15c      	bne.n	8003400 <HAL_UART_RxCpltCallback+0x1c4>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003346:	4b54      	ldr	r3, [pc, #336]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334a:	2b00      	cmp	r3, #0
 800334c:	d158      	bne.n	8003400 <HAL_UART_RxCpltCallback+0x1c4>
 800334e:	4b52      	ldr	r3, [pc, #328]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d154      	bne.n	8003400 <HAL_UART_RxCpltCallback+0x1c4>
 8003356:	4b50      	ldr	r3, [pc, #320]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d150      	bne.n	8003400 <HAL_UART_RxCpltCallback+0x1c4>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 800335e:	4b4e      	ldr	r3, [pc, #312]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b4d      	ldr	r3, [pc, #308]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	1c58      	adds	r0, r3, #1
 800336c:	4b4a      	ldr	r3, [pc, #296]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	4b49      	ldr	r3, [pc, #292]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	4b45      	ldr	r3, [pc, #276]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	3301      	adds	r3, #1
 8003386:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800338a:	9400      	str	r4, [sp, #0]
 800338c:	f7fd fe34 	bl	8000ff8 <FillRect>
			p1.direction=0;
 8003390:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003392:	2200      	movs	r2, #0
 8003394:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8003396:	2102      	movs	r1, #2
 8003398:	483f      	ldr	r0, [pc, #252]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800339a:	f7ff f899 	bl	80024d0 <playerCanMove>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_UART_RxCpltCallback+0x198>
				p1.y=p1.y-p1.speed;
 80033a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033b0:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 80033b2:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d805      	bhi.n	80033c6 <HAL_UART_RxCpltCallback+0x18a>
						p1.animationWalkUp+=1;
 80033ba:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033be:	3301      	adds	r3, #1
 80033c0:	4a35      	ldr	r2, [pc, #212]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c4:	e002      	b.n	80033cc <HAL_UART_RxCpltCallback+0x190>
						} else{
						  p1.animationWalkUp=0;
 80033c6:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 80033cc:	4832      	ldr	r0, [pc, #200]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033ce:	f7ff faa7 	bl	8002920 <PlayerAnimation>
 80033d2:	e015      	b.n	8003400 <HAL_UART_RxCpltCallback+0x1c4>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 80033d4:	4b30      	ldr	r3, [pc, #192]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3b08      	subs	r3, #8
 80033da:	4618      	mov	r0, r3
 80033dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	3b0d      	subs	r3, #13
 80033e2:	4619      	mov	r1, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9303      	str	r3, [sp, #12]
 80033ec:	2300      	movs	r3, #0
 80033ee:	9302      	str	r3, [sp, #8]
 80033f0:	230a      	movs	r3, #10
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_UART_RxCpltCallback+0x268>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	231a      	movs	r3, #26
 80033fa:	2212      	movs	r2, #18
 80033fc:	f7fd feb0 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 8003400:	4b26      	ldr	r3, [pc, #152]	@ (800349c <HAL_UART_RxCpltCallback+0x260>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b72      	cmp	r3, #114	@ 0x72
 8003406:	d165      	bne.n	80034d4 <HAL_UART_RxCpltCallback+0x298>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003408:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	2b00      	cmp	r3, #0
 800340e:	d161      	bne.n	80034d4 <HAL_UART_RxCpltCallback+0x298>
 8003410:	4b21      	ldr	r3, [pc, #132]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d15d      	bne.n	80034d4 <HAL_UART_RxCpltCallback+0x298>
 8003418:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d159      	bne.n	80034d4 <HAL_UART_RxCpltCallback+0x298>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b1c      	ldr	r3, [pc, #112]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	1c58      	adds	r0, r3, #1
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	1c59      	adds	r1, r3, #1
 800343c:	4b16      	ldr	r3, [pc, #88]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	3301      	adds	r3, #1
 8003448:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800344c:	9400      	str	r4, [sp, #0]
 800344e:	f7fd fdd3 	bl	8000ff8 <FillRect>
			p1.direction=1;
 8003452:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003454:	2201      	movs	r2, #1
 8003456:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8003458:	2101      	movs	r1, #1
 800345a:	480f      	ldr	r0, [pc, #60]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800345c:	f7ff f838 	bl	80024d0 <playerCanMove>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_UART_RxCpltCallback+0x26c>
				p1.x=p1.x+p1.speed;
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4413      	add	r3, r2
 8003470:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003472:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003478:	2b09      	cmp	r3, #9
 800347a:	d805      	bhi.n	8003488 <HAL_UART_RxCpltCallback+0x24c>
						p1.animationWalkRight+=1;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800347e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003480:	3301      	adds	r3, #1
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003484:	6493      	str	r3, [r2, #72]	@ 0x48
 8003486:	e002      	b.n	800348e <HAL_UART_RxCpltCallback+0x252>
						} else{
						  p1.animationWalkRight=0;
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 800348a:	2200      	movs	r2, #0
 800348c:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 800348e:	4802      	ldr	r0, [pc, #8]	@ (8003498 <HAL_UART_RxCpltCallback+0x25c>)
 8003490:	f7ff fa46 	bl	8002920 <PlayerAnimation>
 8003494:	e01e      	b.n	80034d4 <HAL_UART_RxCpltCallback+0x298>
 8003496:	bf00      	nop
 8003498:	200154b4 	.word	0x200154b4
 800349c:	200154a8 	.word	0x200154a8
 80034a0:	200131d4 	.word	0x200131d4
 80034a4:	20010d44 	.word	0x20010d44
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 80034a8:	4b53      	ldr	r3, [pc, #332]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3b0a      	subs	r3, #10
 80034ae:	4618      	mov	r0, r3
 80034b0:	4b51      	ldr	r3, [pc, #324]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	3b0b      	subs	r3, #11
 80034b6:	4619      	mov	r1, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	2301      	movs	r3, #1
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9302      	str	r3, [sp, #8]
 80034c4:	230a      	movs	r3, #10
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	4b4c      	ldr	r3, [pc, #304]	@ (80035fc <HAL_UART_RxCpltCallback+0x3c0>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2317      	movs	r3, #23
 80034ce:	2216      	movs	r2, #22
 80034d0:	f7fd fe46 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 80034d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003600 <HAL_UART_RxCpltCallback+0x3c4>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b6c      	cmp	r3, #108	@ 0x6c
 80034da:	d15c      	bne.n	8003596 <HAL_UART_RxCpltCallback+0x35a>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80034dc:	4b46      	ldr	r3, [pc, #280]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d158      	bne.n	8003596 <HAL_UART_RxCpltCallback+0x35a>
 80034e4:	4b44      	ldr	r3, [pc, #272]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d154      	bne.n	8003596 <HAL_UART_RxCpltCallback+0x35a>
 80034ec:	4b42      	ldr	r3, [pc, #264]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d150      	bne.n	8003596 <HAL_UART_RxCpltCallback+0x35a>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 80034f4:	4b40      	ldr	r3, [pc, #256]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b3f      	ldr	r3, [pc, #252]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	1c58      	adds	r0, r3, #1
 8003502:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	4b38      	ldr	r3, [pc, #224]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003520:	9400      	str	r4, [sp, #0]
 8003522:	f7fd fd69 	bl	8000ff8 <FillRect>
			p1.direction=3;
 8003526:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003528:	2203      	movs	r2, #3
 800352a:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 800352c:	2103      	movs	r1, #3
 800352e:	4832      	ldr	r0, [pc, #200]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003530:	f7fe ffce 	bl	80024d0 <playerCanMove>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_UART_RxCpltCallback+0x32e>
				p1.x=p1.x-p1.speed;
 800353a:	4b2f      	ldr	r3, [pc, #188]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	4a2c      	ldr	r2, [pc, #176]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003546:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 8003548:	4b2b      	ldr	r3, [pc, #172]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	2b09      	cmp	r3, #9
 800354e:	d805      	bhi.n	800355c <HAL_UART_RxCpltCallback+0x320>
						p1.animationWalkLeft+=1;
 8003550:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	3301      	adds	r3, #1
 8003556:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003558:	6453      	str	r3, [r2, #68]	@ 0x44
 800355a:	e002      	b.n	8003562 <HAL_UART_RxCpltCallback+0x326>
						} else{
						  p1.animationWalkLeft=0;
 800355c:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 8003562:	4825      	ldr	r0, [pc, #148]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003564:	f7ff f9dc 	bl	8002920 <PlayerAnimation>
 8003568:	e015      	b.n	8003596 <HAL_UART_RxCpltCallback+0x35a>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 800356a:	4b23      	ldr	r3, [pc, #140]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3b0a      	subs	r3, #10
 8003570:	4618      	mov	r0, r3
 8003572:	4b21      	ldr	r3, [pc, #132]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	3b0b      	subs	r3, #11
 8003578:	4619      	mov	r1, r3
 800357a:	2300      	movs	r3, #0
 800357c:	9304      	str	r3, [sp, #16]
 800357e:	2300      	movs	r3, #0
 8003580:	9303      	str	r3, [sp, #12]
 8003582:	2300      	movs	r3, #0
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	230a      	movs	r3, #10
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	4b1c      	ldr	r3, [pc, #112]	@ (80035fc <HAL_UART_RxCpltCallback+0x3c0>)
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2317      	movs	r3, #23
 8003590:	2216      	movs	r2, #22
 8003592:	f7fd fde5 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 8003596:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <HAL_UART_RxCpltCallback+0x3c4>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b62      	cmp	r3, #98	@ 0x62
 800359c:	d122      	bne.n	80035e4 <HAL_UART_RxCpltCallback+0x3a8>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 800359e:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11a      	bne.n	80035dc <HAL_UART_RxCpltCallback+0x3a0>
 80035a6:	4b14      	ldr	r3, [pc, #80]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_UART_RxCpltCallback+0x3a0>
 80035ae:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d112      	bne.n	80035dc <HAL_UART_RxCpltCallback+0x3a0>
			p1.IsAttack=1;
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
			p1.animationAttack=0;
 80035bc:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	659a      	str	r2, [r3, #88]	@ 0x58
			PlayerHit(&p1, &e1_1);
 80035c4:	490f      	ldr	r1, [pc, #60]	@ (8003604 <HAL_UART_RxCpltCallback+0x3c8>)
 80035c6:	480c      	ldr	r0, [pc, #48]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035c8:	f7ff f8ca 	bl	8002760 <PlayerHit>
			PlayerHit(&p1, &e1_2);
 80035cc:	490e      	ldr	r1, [pc, #56]	@ (8003608 <HAL_UART_RxCpltCallback+0x3cc>)
 80035ce:	480a      	ldr	r0, [pc, #40]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035d0:	f7ff f8c6 	bl	8002760 <PlayerHit>
			PlayerHit(&p1, &e1_3);}
 80035d4:	490d      	ldr	r1, [pc, #52]	@ (800360c <HAL_UART_RxCpltCallback+0x3d0>)
 80035d6:	4808      	ldr	r0, [pc, #32]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035d8:	f7ff f8c2 	bl	8002760 <PlayerHit>
			PlayerHit_E2(&p1, &e2_1);
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <HAL_UART_RxCpltCallback+0x3d4>)
 80035de:	4806      	ldr	r0, [pc, #24]	@ (80035f8 <HAL_UART_RxCpltCallback+0x3bc>)
 80035e0:	f7fe fde8 	bl	80021b4 <PlayerHit_E2>
		//if (fase_p1==1){
		//
		//}
	}
	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80035e4:	2201      	movs	r2, #1
 80035e6:	4906      	ldr	r1, [pc, #24]	@ (8003600 <HAL_UART_RxCpltCallback+0x3c4>)
 80035e8:	480a      	ldr	r0, [pc, #40]	@ (8003614 <HAL_UART_RxCpltCallback+0x3d8>)
 80035ea:	f001 fbdc 	bl	8004da6 <HAL_UART_Receive_IT>
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200154b4 	.word	0x200154b4
 80035fc:	2000e5bc 	.word	0x2000e5bc
 8003600:	200154a8 	.word	0x200154a8
 8003604:	20015524 	.word	0x20015524
 8003608:	20015558 	.word	0x20015558
 800360c:	2001558c 	.word	0x2001558c
 8003610:	200155c0 	.word	0x200155c0
 8003614:	20015460 	.word	0x20015460

08003618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800361c:	b672      	cpsid	i
}
 800361e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <Error_Handler+0x8>

08003624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <HAL_MspInit+0x4c>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	4a0f      	ldr	r2, [pc, #60]	@ (8003670 <HAL_MspInit+0x4c>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003638:	6453      	str	r3, [r2, #68]	@ 0x44
 800363a:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <HAL_MspInit+0x4c>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <HAL_MspInit+0x4c>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a08      	ldr	r2, [pc, #32]	@ (8003670 <HAL_MspInit+0x4c>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_MspInit+0x4c>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	@ 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_SPI_MspInit+0x84>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12b      	bne.n	80036ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	4b18      	ldr	r3, [pc, #96]	@ (80036fc <HAL_SPI_MspInit+0x88>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	4a17      	ldr	r2, [pc, #92]	@ (80036fc <HAL_SPI_MspInit+0x88>)
 80036a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a6:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_SPI_MspInit+0x88>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_SPI_MspInit+0x88>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <HAL_SPI_MspInit+0x88>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c2:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_SPI_MspInit+0x88>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036ce:	23e0      	movs	r3, #224	@ 0xe0
 80036d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036de:	2305      	movs	r3, #5
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	4805      	ldr	r0, [pc, #20]	@ (8003700 <HAL_SPI_MspInit+0x8c>)
 80036ea:	f000 fb73 	bl	8003dd4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80036ee:	bf00      	nop
 80036f0:	3728      	adds	r7, #40	@ 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40013000 	.word	0x40013000
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020000 	.word	0x40020000

08003704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08c      	sub	sp, #48	@ 0x30
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 031c 	add.w	r3, r7, #28
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a49      	ldr	r2, [pc, #292]	@ (8003848 <HAL_UART_MspInit+0x144>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d153      	bne.n	80037ce <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	4b48      	ldr	r3, [pc, #288]	@ (800384c <HAL_UART_MspInit+0x148>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	4a47      	ldr	r2, [pc, #284]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003734:	6413      	str	r3, [r2, #64]	@ 0x40
 8003736:	4b45      	ldr	r3, [pc, #276]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a40      	ldr	r2, [pc, #256]	@ (800384c <HAL_UART_MspInit+0x148>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	4b3a      	ldr	r3, [pc, #232]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a39      	ldr	r2, [pc, #228]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800377a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800377e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800378c:	2308      	movs	r3, #8
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003790:	f107 031c 	add.w	r3, r7, #28
 8003794:	4619      	mov	r1, r3
 8003796:	482e      	ldr	r0, [pc, #184]	@ (8003850 <HAL_UART_MspInit+0x14c>)
 8003798:	f000 fb1c 	bl	8003dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800379c:	2304      	movs	r3, #4
 800379e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80037ac:	2308      	movs	r3, #8
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	4619      	mov	r1, r3
 80037b6:	4827      	ldr	r0, [pc, #156]	@ (8003854 <HAL_UART_MspInit+0x150>)
 80037b8:	f000 fb0c 	bl	8003dd4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	2035      	movs	r0, #53	@ 0x35
 80037c2:	f000 fa3e 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80037c6:	2035      	movs	r0, #53	@ 0x35
 80037c8:	f000 fa57 	bl	8003c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037cc:	e038      	b.n	8003840 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a21      	ldr	r2, [pc, #132]	@ (8003858 <HAL_UART_MspInit+0x154>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d133      	bne.n	8003840 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_UART_MspInit+0x148>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	4a1a      	ldr	r2, [pc, #104]	@ (800384c <HAL_UART_MspInit+0x148>)
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e8:	4b18      	ldr	r3, [pc, #96]	@ (800384c <HAL_UART_MspInit+0x148>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	4b14      	ldr	r3, [pc, #80]	@ (800384c <HAL_UART_MspInit+0x148>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	4a13      	ldr	r2, [pc, #76]	@ (800384c <HAL_UART_MspInit+0x148>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6313      	str	r3, [r2, #48]	@ 0x30
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_UART_MspInit+0x148>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003810:	230c      	movs	r3, #12
 8003812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003814:	2302      	movs	r3, #2
 8003816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381c:	2303      	movs	r3, #3
 800381e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003820:	2307      	movs	r3, #7
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003824:	f107 031c 	add.w	r3, r7, #28
 8003828:	4619      	mov	r1, r3
 800382a:	480c      	ldr	r0, [pc, #48]	@ (800385c <HAL_UART_MspInit+0x158>)
 800382c:	f000 fad2 	bl	8003dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003830:	2200      	movs	r2, #0
 8003832:	2100      	movs	r1, #0
 8003834:	2026      	movs	r0, #38	@ 0x26
 8003836:	f000 fa04 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800383a:	2026      	movs	r0, #38	@ 0x26
 800383c:	f000 fa1d 	bl	8003c7a <HAL_NVIC_EnableIRQ>
}
 8003840:	bf00      	nop
 8003842:	3730      	adds	r7, #48	@ 0x30
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40005000 	.word	0x40005000
 800384c:	40023800 	.word	0x40023800
 8003850:	40020800 	.word	0x40020800
 8003854:	40020c00 	.word	0x40020c00
 8003858:	40004400 	.word	0x40004400
 800385c:	40020000 	.word	0x40020000

08003860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <NMI_Handler+0x4>

08003868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <HardFault_Handler+0x4>

08003870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003874:	bf00      	nop
 8003876:	e7fd      	b.n	8003874 <MemManage_Handler+0x4>

08003878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <BusFault_Handler+0x4>

08003880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <UsageFault_Handler+0x4>

08003888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038b6:	f000 f8a5 	bl	8003a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <USART2_IRQHandler+0x10>)
 80038c6:	f001 fa93 	bl	8004df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20015460 	.word	0x20015460

080038d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80038d8:	4802      	ldr	r0, [pc, #8]	@ (80038e4 <UART5_IRQHandler+0x10>)
 80038da:	f001 fa89 	bl	8004df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20015418 	.word	0x20015418

080038e8 <SystemInit>:
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <SystemInit+0x20>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	4a05      	ldr	r2, [pc, #20]	@ (8003908 <SystemInit+0x20>)
 80038f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <Reset_Handler>:
 800390c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003944 <LoopFillZerobss+0xe>
 8003910:	f7ff ffea 	bl	80038e8 <SystemInit>
 8003914:	480c      	ldr	r0, [pc, #48]	@ (8003948 <LoopFillZerobss+0x12>)
 8003916:	490d      	ldr	r1, [pc, #52]	@ (800394c <LoopFillZerobss+0x16>)
 8003918:	4a0d      	ldr	r2, [pc, #52]	@ (8003950 <LoopFillZerobss+0x1a>)
 800391a:	2300      	movs	r3, #0
 800391c:	e002      	b.n	8003924 <LoopCopyDataInit>

0800391e <CopyDataInit>:
 800391e:	58d4      	ldr	r4, [r2, r3]
 8003920:	50c4      	str	r4, [r0, r3]
 8003922:	3304      	adds	r3, #4

08003924 <LoopCopyDataInit>:
 8003924:	18c4      	adds	r4, r0, r3
 8003926:	428c      	cmp	r4, r1
 8003928:	d3f9      	bcc.n	800391e <CopyDataInit>
 800392a:	4a0a      	ldr	r2, [pc, #40]	@ (8003954 <LoopFillZerobss+0x1e>)
 800392c:	4c0a      	ldr	r4, [pc, #40]	@ (8003958 <LoopFillZerobss+0x22>)
 800392e:	2300      	movs	r3, #0
 8003930:	e001      	b.n	8003936 <LoopFillZerobss>

08003932 <FillZerobss>:
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	3204      	adds	r2, #4

08003936 <LoopFillZerobss>:
 8003936:	42a2      	cmp	r2, r4
 8003938:	d3fb      	bcc.n	8003932 <FillZerobss>
 800393a:	f002 f95f 	bl	8005bfc <__libc_init_array>
 800393e:	f7ff fa01 	bl	8002d44 <main>
 8003942:	4770      	bx	lr
 8003944:	20020000 	.word	0x20020000
 8003948:	20000000 	.word	0x20000000
 800394c:	200153a4 	.word	0x200153a4
 8003950:	0802b484 	.word	0x0802b484
 8003954:	200153a4 	.word	0x200153a4
 8003958:	2001560c 	.word	0x2001560c

0800395c <ADC_IRQHandler>:
 800395c:	e7fe      	b.n	800395c <ADC_IRQHandler>
	...

08003960 <HAL_Init>:
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
 8003964:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <HAL_Init+0x40>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0d      	ldr	r2, [pc, #52]	@ (80039a0 <HAL_Init+0x40>)
 800396a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_Init+0x40>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0a      	ldr	r2, [pc, #40]	@ (80039a0 <HAL_Init+0x40>)
 8003976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <HAL_Init+0x40>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a07      	ldr	r2, [pc, #28]	@ (80039a0 <HAL_Init+0x40>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	2003      	movs	r0, #3
 800398a:	f000 f94f 	bl	8003c2c <HAL_NVIC_SetPriorityGrouping>
 800398e:	200f      	movs	r0, #15
 8003990:	f000 f808 	bl	80039a4 <HAL_InitTick>
 8003994:	f7ff fe46 	bl	8003624 <HAL_MspInit>
 8003998:	2300      	movs	r3, #0
 800399a:	4618      	mov	r0, r3
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00

080039a4 <HAL_InitTick>:
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <HAL_InitTick+0x54>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_InitTick+0x58>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f967 	bl	8003c96 <HAL_SYSTICK_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_InitTick+0x2e>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00e      	b.n	80039f0 <HAL_InitTick+0x4c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d80a      	bhi.n	80039ee <HAL_InitTick+0x4a>
 80039d8:	2200      	movs	r2, #0
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f000 f92f 	bl	8003c42 <HAL_NVIC_SetPriority>
 80039e4:	4a06      	ldr	r2, [pc, #24]	@ (8003a00 <HAL_InitTick+0x5c>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_InitTick+0x4c>
 80039ee:	2301      	movs	r3, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20015398 	.word	0x20015398
 80039fc:	200153a0 	.word	0x200153a0
 8003a00:	2001539c 	.word	0x2001539c

08003a04 <HAL_IncTick>:
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_IncTick+0x20>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <HAL_IncTick+0x24>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <HAL_IncTick+0x24>)
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	200153a0 	.word	0x200153a0
 8003a28:	20015608 	.word	0x20015608

08003a2c <HAL_GetTick>:
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <HAL_GetTick+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20015608 	.word	0x20015608

08003a44 <HAL_Delay>:
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	f7ff ffee 	bl	8003a2c <HAL_GetTick>
 8003a50:	60b8      	str	r0, [r7, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d005      	beq.n	8003a6a <HAL_Delay+0x26>
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <HAL_Delay+0x44>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	bf00      	nop
 8003a6c:	f7ff ffde 	bl	8003a2c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d8f7      	bhi.n	8003a6c <HAL_Delay+0x28>
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200153a0 	.word	0x200153a0

08003a8c <__NVIC_SetPriorityGrouping>:
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	60d3      	str	r3, [r2, #12]
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <__NVIC_GetPriorityGrouping>:
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <__NVIC_GetPriorityGrouping+0x18>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_EnableIRQ>:
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db0b      	blt.n	8003b1a <__NVIC_EnableIRQ+0x2a>
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	4907      	ldr	r1, [pc, #28]	@ (8003b28 <__NVIC_EnableIRQ+0x38>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f202 	lsl.w	r2, r0, r2
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_SetPriority>:
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db0a      	blt.n	8003b56 <__NVIC_SetPriority+0x2a>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	490c      	ldr	r1, [pc, #48]	@ (8003b78 <__NVIC_SetPriority+0x4c>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003b54:	e00a      	b.n	8003b6c <__NVIC_SetPriority+0x40>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4908      	ldr	r1, [pc, #32]	@ (8003b7c <__NVIC_SetPriority+0x50>)
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3b04      	subs	r3, #4
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	440b      	add	r3, r1
 8003b6a:	761a      	strb	r2, [r3, #24]
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <NVIC_EncodePriority>:
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf28      	it	cs
 8003b9e:	2304      	movcs	r3, #4
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d902      	bls.n	8003bb0 <NVIC_EncodePriority+0x30>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	e000      	b.n	8003bb2 <NVIC_EncodePriority+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	@ 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <SysTick_Config>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf8:	d301      	bcc.n	8003bfe <SysTick_Config+0x16>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00f      	b.n	8003c1e <SysTick_Config+0x36>
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8003c28 <SysTick_Config+0x40>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	6053      	str	r3, [r2, #4]
 8003c06:	210f      	movs	r1, #15
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	f7ff ff8e 	bl	8003b2c <__NVIC_SetPriority>
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <SysTick_Config+0x40>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	4b04      	ldr	r3, [pc, #16]	@ (8003c28 <SysTick_Config+0x40>)
 8003c18:	2207      	movs	r2, #7
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	e000e010 	.word	0xe000e010

08003c2c <HAL_NVIC_SetPriorityGrouping>:
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff29 	bl	8003a8c <__NVIC_SetPriorityGrouping>
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_SetPriority>:
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f7ff ff3e 	bl	8003ad4 <__NVIC_GetPriorityGrouping>
 8003c58:	6178      	str	r0, [r7, #20]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f7ff ff8e 	bl	8003b80 <NVIC_EncodePriority>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff5d 	bl	8003b2c <__NVIC_SetPriority>
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_NVIC_EnableIRQ>:
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	71fb      	strb	r3, [r7, #7]
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff31 	bl	8003af0 <__NVIC_EnableIRQ>
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_SYSTICK_Config>:
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ffa2 	bl	8003be8 <SysTick_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_DMA_Abort>:
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	f7ff feb6 	bl	8003a2c <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d008      	beq.n	8003ce0 <HAL_DMA_Abort+0x32>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e052      	b.n	8003d86 <HAL_DMA_Abort+0xd8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0216 	bic.w	r2, r2, #22
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <HAL_DMA_Abort+0x62>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_DMA_Abort+0x72>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0208 	bic.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e013      	b.n	8003d5a <HAL_DMA_Abort+0xac>
 8003d32:	f7ff fe7b 	bl	8003a2c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d90c      	bls.n	8003d5a <HAL_DMA_Abort+0xac>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003d56:	2303      	movs	r3, #3
 8003d58:	e015      	b.n	8003d86 <HAL_DMA_Abort+0xd8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e4      	bne.n	8003d32 <HAL_DMA_Abort+0x84>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	223f      	movs	r2, #63	@ 0x3f
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003d84:	2300      	movs	r3, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_DMA_Abort_IT>:
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d004      	beq.n	8003dac <HAL_DMA_Abort_IT+0x1e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003da8:	2301      	movs	r3, #1
 8003daa:	e00c      	b.n	8003dc6 <HAL_DMA_Abort_IT+0x38>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2205      	movs	r2, #5
 8003db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_GPIO_Init>:
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e165      	b.n	80040bc <HAL_GPIO_Init+0x2e8>
 8003df0:	2201      	movs	r2, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 8154 	bne.w	80040b6 <HAL_GPIO_Init+0x2e2>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d005      	beq.n	8003e26 <HAL_GPIO_Init+0x52>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d130      	bne.n	8003e88 <HAL_GPIO_Init+0xb4>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 0201 	and.w	r2, r3, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d017      	beq.n	8003ec4 <HAL_GPIO_Init+0xf0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d123      	bne.n	8003f18 <HAL_GPIO_Init+0x144>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80ae 	beq.w	80040b6 <HAL_GPIO_Init+0x2e2>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80040d4 <HAL_GPIO_Init+0x300>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	4a5c      	ldr	r2, [pc, #368]	@ (80040d4 <HAL_GPIO_Init+0x300>)
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80040d4 <HAL_GPIO_Init+0x300>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_GPIO_Init+0x304>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80040dc <HAL_GPIO_Init+0x308>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d025      	beq.n	8003fee <HAL_GPIO_Init+0x21a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80040e0 <HAL_GPIO_Init+0x30c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01f      	beq.n	8003fea <HAL_GPIO_Init+0x216>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4d      	ldr	r2, [pc, #308]	@ (80040e4 <HAL_GPIO_Init+0x310>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d019      	beq.n	8003fe6 <HAL_GPIO_Init+0x212>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80040e8 <HAL_GPIO_Init+0x314>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_GPIO_Init+0x20e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80040ec <HAL_GPIO_Init+0x318>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00d      	beq.n	8003fde <HAL_GPIO_Init+0x20a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80040f0 <HAL_GPIO_Init+0x31c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <HAL_GPIO_Init+0x206>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a49      	ldr	r2, [pc, #292]	@ (80040f4 <HAL_GPIO_Init+0x320>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_GPIO_Init+0x202>
 8003fd2:	2306      	movs	r3, #6
 8003fd4:	e00c      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fd6:	2307      	movs	r3, #7
 8003fd8:	e00a      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fda:	2305      	movs	r3, #5
 8003fdc:	e008      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e004      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_GPIO_Init+0x21c>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f002 0203 	and.w	r2, r2, #3
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	4935      	ldr	r1, [pc, #212]	@ (80040d8 <HAL_GPIO_Init+0x304>)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800400e:	4b3a      	ldr	r3, [pc, #232]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x25e>
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	4a31      	ldr	r2, [pc, #196]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	4b2f      	ldr	r3, [pc, #188]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x288>
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	4a26      	ldr	r2, [pc, #152]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	60d3      	str	r3, [r2, #12]
 8004062:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x2b2>
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6053      	str	r3, [r2, #4]
 800408c:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x2dc>
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	4a11      	ldr	r2, [pc, #68]	@ (80040f8 <HAL_GPIO_Init+0x324>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	f67f ae96 	bls.w	8003df0 <HAL_GPIO_Init+0x1c>
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3724      	adds	r7, #36	@ 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40020c00 	.word	0x40020c00
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40021400 	.word	0x40021400
 80040f4:	40021800 	.word	0x40021800
 80040f8:	40013c00 	.word	0x40013c00

080040fc <HAL_GPIO_WritePin>:
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
 8004108:	4613      	mov	r3, r2
 800410a:	707b      	strb	r3, [r7, #1]
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_WritePin+0x1e>
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
 8004118:	e003      	b.n	8004122 <HAL_GPIO_WritePin+0x26>
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	619a      	str	r2, [r3, #24]
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_RCC_ClockConfig>:
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 8004144:	4b68      	ldr	r3, [pc, #416]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
 8004152:	4b65      	ldr	r3, [pc, #404]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	4b63      	ldr	r3, [pc, #396]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
 8004184:	4b59      	ldr	r3, [pc, #356]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
 800419c:	4b53      	ldr	r3, [pc, #332]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
 80041a8:	4b50      	ldr	r3, [pc, #320]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
 80041ce:	4b47      	ldr	r3, [pc, #284]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
 80041ee:	4b3f      	ldr	r3, [pc, #252]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 80041fe:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
 800420a:	2301      	movs	r3, #1
 800420c:	e067      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 800420e:	4b37      	ldr	r3, [pc, #220]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4934      	ldr	r1, [pc, #208]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
 8004220:	f7ff fc04 	bl	8003a2c <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
 8004228:	f7ff fc00 	bl	8003a2c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
 800423a:	2303      	movs	r3, #3
 800423c:	e04f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 800423e:	4b2b      	ldr	r3, [pc, #172]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
 800425e:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
 80042b6:	f000 f855 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fb64 	bl	80039a4 <HAL_InitTick>
 80042dc:	2300      	movs	r3, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0802b45c 	.word	0x0802b45c
 80042f4:	20015398 	.word	0x20015398
 80042f8:	2001539c 	.word	0x2001539c

080042fc <HAL_RCC_GetHCLKFreq>:
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
 8004300:	4b03      	ldr	r3, [pc, #12]	@ (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20015398 	.word	0x20015398

08004314 <HAL_RCC_GetPCLK1Freq>:
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	@ (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	0802b46c 	.word	0x0802b46c

0800433c <HAL_RCC_GetPCLK2Freq>:
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
 8004340:	f7ff ffdc 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4903      	ldr	r1, [pc, #12]	@ (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	0802b46c 	.word	0x0802b46c

08004364 <HAL_RCC_GetSysClockFreq>:
 8004364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004368:	b0a6      	sub	sp, #152	@ 0x98
 800436a:	af00      	add	r7, sp, #0
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800438a:	4bc8      	ldr	r3, [pc, #800]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b0c      	cmp	r3, #12
 8004394:	f200 817e 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x330>
 8004398:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	08004695 	.word	0x08004695
 80043a8:	08004695 	.word	0x08004695
 80043ac:	08004695 	.word	0x08004695
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	08004695 	.word	0x08004695
 80043b8:	08004695 	.word	0x08004695
 80043bc:	08004695 	.word	0x08004695
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	08004695 	.word	0x08004695
 80043c8:	08004695 	.word	0x08004695
 80043cc:	08004695 	.word	0x08004695
 80043d0:	0800454f 	.word	0x0800454f
 80043d4:	4bb6      	ldr	r3, [pc, #728]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80043d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043da:	e15f      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x338>
 80043dc:	4bb5      	ldr	r3, [pc, #724]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x350>)
 80043de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043e2:	e15b      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x338>
 80043e4:	4bb1      	ldr	r3, [pc, #708]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043f0:	4bae      	ldr	r3, [pc, #696]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d031      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xfc>
 80043fc:	4bab      	ldr	r3, [pc, #684]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004408:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004410:	2300      	movs	r3, #0
 8004412:	667b      	str	r3, [r7, #100]	@ 0x64
 8004414:	4ba7      	ldr	r3, [pc, #668]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004416:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800441a:	462a      	mov	r2, r5
 800441c:	fb03 f202 	mul.w	r2, r3, r2
 8004420:	2300      	movs	r3, #0
 8004422:	4621      	mov	r1, r4
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	4aa2      	ldr	r2, [pc, #648]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800442c:	4621      	mov	r1, r4
 800442e:	fba1 1202 	umull	r1, r2, r1, r2
 8004432:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004434:	460a      	mov	r2, r1
 8004436:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004438:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800443a:	4413      	add	r3, r2
 800443c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800443e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004442:	2200      	movs	r2, #0
 8004444:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004446:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004448:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800444c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004450:	f7fc f8e6 	bl	8000620 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800445e:	e064      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1c6>
 8004460:	4b92      	ldr	r3, [pc, #584]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	2200      	movs	r2, #0
 8004468:	653b      	str	r3, [r7, #80]	@ 0x50
 800446a:	657a      	str	r2, [r7, #84]	@ 0x54
 800446c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004474:	2300      	movs	r3, #0
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800447c:	4622      	mov	r2, r4
 800447e:	462b      	mov	r3, r5
 8004480:	f04f 0000 	mov.w	r0, #0
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	0159      	lsls	r1, r3, #5
 800448a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448e:	0150      	lsls	r0, r2, #5
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4621      	mov	r1, r4
 8004496:	1a51      	subs	r1, r2, r1
 8004498:	6139      	str	r1, [r7, #16]
 800449a:	4629      	mov	r1, r5
 800449c:	eb63 0301 	sbc.w	r3, r3, r1
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044ae:	4659      	mov	r1, fp
 80044b0:	018b      	lsls	r3, r1, #6
 80044b2:	4651      	mov	r1, sl
 80044b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044b8:	4651      	mov	r1, sl
 80044ba:	018a      	lsls	r2, r1, #6
 80044bc:	4651      	mov	r1, sl
 80044be:	ebb2 0801 	subs.w	r8, r2, r1
 80044c2:	4659      	mov	r1, fp
 80044c4:	eb63 0901 	sbc.w	r9, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044dc:	4690      	mov	r8, r2
 80044de:	4699      	mov	r9, r3
 80044e0:	4623      	mov	r3, r4
 80044e2:	eb18 0303 	adds.w	r3, r8, r3
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	462b      	mov	r3, r5
 80044ea:	eb49 0303 	adc.w	r3, r9, r3
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044fc:	4629      	mov	r1, r5
 80044fe:	028b      	lsls	r3, r1, #10
 8004500:	4621      	mov	r1, r4
 8004502:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004506:	4621      	mov	r1, r4
 8004508:	028a      	lsls	r2, r1, #10
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004512:	2200      	movs	r2, #0
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40
 8004516:	647a      	str	r2, [r7, #68]	@ 0x44
 8004518:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800451c:	f7fc f880 	bl	8000620 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800452a:	4b60      	ldr	r3, [pc, #384]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	3301      	adds	r3, #1
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800453c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004540:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800454c:	e0a6      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x338>
 800454e:	4b57      	ldr	r3, [pc, #348]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800455a:	4b54      	ldr	r3, [pc, #336]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02a      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x258>
 8004566:	4b51      	ldr	r3, [pc, #324]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	2200      	movs	r2, #0
 800456e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004570:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004578:	2100      	movs	r1, #0
 800457a:	4b4e      	ldr	r3, [pc, #312]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800457c:	fb03 f201 	mul.w	r2, r3, r1
 8004580:	2300      	movs	r3, #0
 8004582:	fb00 f303 	mul.w	r3, r0, r3
 8004586:	4413      	add	r3, r2
 8004588:	4a4a      	ldr	r2, [pc, #296]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800458a:	fba0 1202 	umull	r1, r2, r0, r2
 800458e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004590:	460a      	mov	r2, r1
 8004592:	673a      	str	r2, [r7, #112]	@ 0x70
 8004594:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004596:	4413      	add	r3, r2
 8004598:	677b      	str	r3, [r7, #116]	@ 0x74
 800459a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459e:	2200      	movs	r2, #0
 80045a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80045a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80045a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80045ac:	f7fc f838 	bl	8000620 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045ba:	e05b      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x310>
 80045bc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	2200      	movs	r2, #0
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	f04f 0000 	mov.w	r0, #0
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	0159      	lsls	r1, r3, #5
 80045e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ea:	0150      	lsls	r0, r2, #5
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4641      	mov	r1, r8
 80045f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80045f6:	4649      	mov	r1, r9
 80045f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800460c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004610:	ebb2 040a 	subs.w	r4, r2, sl
 8004614:	eb63 050b 	sbc.w	r5, r3, fp
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	00eb      	lsls	r3, r5, #3
 8004622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004626:	00e2      	lsls	r2, r4, #3
 8004628:	4614      	mov	r4, r2
 800462a:	461d      	mov	r5, r3
 800462c:	4643      	mov	r3, r8
 800462e:	18e3      	adds	r3, r4, r3
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	464b      	mov	r3, r9
 8004634:	eb45 0303 	adc.w	r3, r5, r3
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004646:	4629      	mov	r1, r5
 8004648:	028b      	lsls	r3, r1, #10
 800464a:	4621      	mov	r1, r4
 800464c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004650:	4621      	mov	r1, r4
 8004652:	028a      	lsls	r2, r1, #10
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800465c:	2200      	movs	r2, #0
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	61fa      	str	r2, [r7, #28]
 8004662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004666:	f7fb ffdb 	bl	8000620 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4613      	mov	r3, r2
 8004670:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004674:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x348>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004682:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004686:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004692:	e003      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x338>
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800469a:	bf00      	nop
 800469c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046a0:	4618      	mov	r0, r3
 80046a2:	3798      	adds	r7, #152	@ 0x98
 80046a4:	46bd      	mov	sp, r7
 80046a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	017d7840 	.word	0x017d7840

080046b8 <HAL_RCC_OscConfig>:
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e28d      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8083 	beq.w	80047de <HAL_RCC_OscConfig+0x126>
 80046d8:	4b94      	ldr	r3, [pc, #592]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d019      	beq.n	8004718 <HAL_RCC_OscConfig+0x60>
 80046e4:	4b91      	ldr	r3, [pc, #580]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x46>
 80046f0:	4b8e      	ldr	r3, [pc, #568]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fc:	d00c      	beq.n	8004718 <HAL_RCC_OscConfig+0x60>
 80046fe:	4b8b      	ldr	r3, [pc, #556]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x78>
 800470a:	4b88      	ldr	r3, [pc, #544]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x78>
 8004718:	4b84      	ldr	r3, [pc, #528]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05b      	beq.n	80047dc <HAL_RCC_OscConfig+0x124>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d157      	bne.n	80047dc <HAL_RCC_OscConfig+0x124>
 800472c:	2301      	movs	r3, #1
 800472e:	e25a      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x90>
 800473a:	4b7c      	ldr	r3, [pc, #496]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7b      	ldr	r2, [pc, #492]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xcc>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0xb4>
 8004752:	4b76      	ldr	r3, [pc, #472]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a75      	ldr	r2, [pc, #468]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b73      	ldr	r3, [pc, #460]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a72      	ldr	r2, [pc, #456]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xcc>
 800476c:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6e      	ldr	r2, [pc, #440]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b6c      	ldr	r3, [pc, #432]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6b      	ldr	r2, [pc, #428]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0xfc>
 800478c:	f7ff f94e 	bl	8003a2c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xee>
 8004794:	f7ff f94a 	bl	8003a2c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xee>
 80047a2:	2303      	movs	r3, #3
 80047a4:	e21f      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 80047a6:	4b61      	ldr	r3, [pc, #388]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xdc>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x126>
 80047b4:	f7ff f93a 	bl	8003a2c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x116>
 80047bc:	f7ff f936 	bl	8003a2c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	@ 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x116>
 80047ca:	2303      	movs	r3, #3
 80047cc:	e20b      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 80047ce:	4b57      	ldr	r3, [pc, #348]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x104>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x126>
 80047dc:	bf00      	nop
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d06f      	beq.n	80048ca <HAL_RCC_OscConfig+0x212>
 80047ea:	4b50      	ldr	r3, [pc, #320]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <HAL_RCC_OscConfig+0x16e>
 80047f6:	4b4d      	ldr	r3, [pc, #308]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x156>
 8004802:	4b4a      	ldr	r3, [pc, #296]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x16e>
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x19c>
 800481a:	4b44      	ldr	r3, [pc, #272]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x19c>
 8004826:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x186>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x186>
 800483a:	2301      	movs	r3, #1
 800483c:	e1d3      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 800483e:	4b3b      	ldr	r3, [pc, #236]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4937      	ldr	r1, [pc, #220]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
 8004852:	e03a      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_OscConfig+0x1e6>
 800485c:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <HAL_RCC_OscConfig+0x278>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f7ff f8e3 	bl	8003a2c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x1c4>
 800486a:	f7ff f8df 	bl	8003a2c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x1c4>
 8004878:	2303      	movs	r3, #3
 800487a:	e1b4      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 800487c:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
 8004888:	4b28      	ldr	r3, [pc, #160]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4925      	ldr	r1, [pc, #148]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x278>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f7ff f8c2 	bl	8003a2c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x206>
 80048ac:	f7ff f8be 	bl	8003a2c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x206>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e193      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1f4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d036      	beq.n	8004944 <HAL_RCC_OscConfig+0x28c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCC_OscConfig+0x254>
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f7ff f8a2 	bl	8003a2c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x246>
 80048ec:	f7ff f89e 	bl	8003a2c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x246>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e173      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_OscConfig+0x274>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x234>
 800490a:	e01b      	b.n	8004944 <HAL_RCC_OscConfig+0x28c>
 800490c:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <HAL_RCC_OscConfig+0x27c>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f7ff f88b 	bl	8003a2c <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]
 8004918:	e00e      	b.n	8004938 <HAL_RCC_OscConfig+0x280>
 800491a:	f7ff f887 	bl	8003a2c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d907      	bls.n	8004938 <HAL_RCC_OscConfig+0x280>
 8004928:	2303      	movs	r3, #3
 800492a:	e15c      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 800492c:	40023800 	.word	0x40023800
 8004930:	42470000 	.word	0x42470000
 8004934:	42470e80 	.word	0x42470e80
 8004938:	4b8a      	ldr	r3, [pc, #552]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ea      	bne.n	800491a <HAL_RCC_OscConfig+0x262>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8097 	beq.w	8004a80 <HAL_RCC_OscConfig+0x3c8>
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]
 8004956:	4b83      	ldr	r3, [pc, #524]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <HAL_RCC_OscConfig+0x2ca>
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	4b7f      	ldr	r3, [pc, #508]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	@ 0x40
 8004972:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
 8004982:	4b79      	ldr	r3, [pc, #484]	@ (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d118      	bne.n	80049c0 <HAL_RCC_OscConfig+0x308>
 800498e:	4b76      	ldr	r3, [pc, #472]	@ (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a75      	ldr	r2, [pc, #468]	@ (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	f7ff f847 	bl	8003a2c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2fc>
 80049a2:	f7ff f843 	bl	8003a2c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2fc>
 80049b0:	2303      	movs	r3, #3
 80049b2:	e118      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 80049b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x31e>
 80049c8:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049cc:	4a65      	ldr	r2, [pc, #404]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d4:	e01c      	b.n	8004a10 <HAL_RCC_OscConfig+0x358>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x340>
 80049de:	4b61      	ldr	r3, [pc, #388]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e2:	4a60      	ldr	r2, [pc, #384]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_OscConfig+0x358>
 80049f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	4a59      	ldr	r2, [pc, #356]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a04:	4b57      	ldr	r3, [pc, #348]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a08:	4a56      	ldr	r2, [pc, #344]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a0a:	f023 0304 	bic.w	r3, r3, #4
 8004a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCC_OscConfig+0x38c>
 8004a18:	f7ff f808 	bl	8003a2c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x37e>
 8004a20:	f7ff f804 	bl	8003a2c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x37e>
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0d7      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004a36:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RCC_OscConfig+0x368>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x3b6>
 8004a44:	f7fe fff2 	bl	8003a2c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x3aa>
 8004a4c:	f7fe ffee 	bl	8003a2c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x3aa>
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0c1      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004a62:	4b40      	ldr	r3, [pc, #256]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3c8>
 8004a74:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	4a3a      	ldr	r2, [pc, #232]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80ad 	beq.w	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004a8a:	4b36      	ldr	r3, [pc, #216]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d060      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4a0>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d145      	bne.n	8004b2a <HAL_RCC_OscConfig+0x472>
 8004a9e:	4b33      	ldr	r3, [pc, #204]	@ (8004b6c <HAL_RCC_OscConfig+0x4b4>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f7fe ffc2 	bl	8003a2c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x406>
 8004aac:	f7fe ffbe 	bl	8003a2c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x406>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e093      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004abe:	4b29      	ldr	r3, [pc, #164]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x3f4>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af4:	071b      	lsls	r3, r3, #28
 8004af6:	491b      	ldr	r1, [pc, #108]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
 8004afc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b6c <HAL_RCC_OscConfig+0x4b4>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f7fe ff93 	bl	8003a2c <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x464>
 8004b0a:	f7fe ff8f 	bl	8003a2c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x464>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e064      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004b1c:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x452>
 8004b28:	e05c      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <HAL_RCC_OscConfig+0x4b4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f7fe ff7c 	bl	8003a2c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x492>
 8004b38:	f7fe ff78 	bl	8003a2c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x492>
 8004b46:	2303      	movs	r3, #3
 8004b48:	e04d      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x480>
 8004b56:	e045      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4b8>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e040      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42470060 	.word	0x42470060
 8004b70:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <HAL_RCC_OscConfig+0x538>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d030      	beq.n	8004be0 <HAL_RCC_OscConfig+0x528>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d129      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d122      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ba6:	0192      	lsls	r2, r2, #6
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d119      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d10f      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	071b      	lsls	r3, r3, #28
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004be4:	2300      	movs	r3, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <HAL_SPI_Init>:
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Init+0x12>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e07b      	b.n	8004cfe <HAL_SPI_Init+0x10a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <HAL_SPI_Init+0x2c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c16:	d009      	beq.n	8004c2c <HAL_SPI_Init+0x38>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61da      	str	r2, [r3, #28]
 8004c1e:	e005      	b.n	8004c2c <HAL_SPI_Init+0x38>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	615a      	str	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_SPI_Init+0x58>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fe fd14 	bl	8003674 <HAL_SPI_MspInit>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb0:	ea42 0103 	orr.w	r1, r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	f003 0104 	and.w	r1, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	f003 0210 	and.w	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cec:	61da      	str	r2, [r3, #28]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Init>:
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_UART_Init+0x12>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e042      	b.n	8004d9e <HAL_UART_Init+0x98>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <HAL_UART_Init+0x2c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fe fce9 	bl	8003704 <HAL_UART_MspInit>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2224      	movs	r2, #36	@ 0x24
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fcda 	bl	8005704 <UART_SetConfig>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d5e:	611a      	str	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d6e:	615a      	str	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d7e:	60da      	str	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_UART_Receive_IT>:
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	4613      	mov	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d112      	bne.n	8004de6 <HAL_UART_Receive_IT+0x40>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_UART_Receive_IT+0x26>
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_UART_Receive_IT+0x2a>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e00b      	b.n	8004de8 <HAL_UART_Receive_IT+0x42>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fab9 	bl	8005354 <UART_Start_Receive_IT>
 8004de2:	4603      	mov	r3, r0
 8004de4:	e000      	b.n	8004de8 <HAL_UART_Receive_IT+0x42>
 8004de6:	2302      	movs	r3, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_UART_IRQHandler>:
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b0ba      	sub	sp, #232	@ 0xe8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e16:	2300      	movs	r3, #0
 8004e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10f      	bne.n	8004e56 <HAL_UART_IRQHandler+0x66>
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_UART_IRQHandler+0x66>
 8004e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_UART_IRQHandler+0x66>
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fb99 	bl	8005586 <UART_Receive_IT>
 8004e54:	e25b      	b.n	800530e <HAL_UART_IRQHandler+0x51e>
 8004e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80de 	beq.w	800501c <HAL_UART_IRQHandler+0x22c>
 8004e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <HAL_UART_IRQHandler+0x8a>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80d1 	beq.w	800501c <HAL_UART_IRQHandler+0x22c>
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xae>
 8004e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xd2>
 8004eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xd2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0202 	orr.w	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xf6>
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xf6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	f043 0204 	orr.w	r2, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <HAL_UART_IRQHandler+0x126>
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <HAL_UART_IRQHandler+0x11a>
 8004efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0x126>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	f043 0208 	orr.w	r2, r3, #8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 81f2 	beq.w	8005304 <HAL_UART_IRQHandler+0x514>
 8004f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_UART_IRQHandler+0x14e>
 8004f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_UART_IRQHandler+0x14e>
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb24 	bl	8005586 <UART_Receive_IT>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <HAL_UART_IRQHandler+0x17a>
 8004f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d04f      	beq.n	800500a <HAL_UART_IRQHandler+0x21a>
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa2c 	bl	80053c8 <UART_EndRxTransfer>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d141      	bne.n	8005002 <HAL_UART_IRQHandler+0x212>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004faa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1d9      	bne.n	8004f7e <HAL_UART_IRQHandler+0x18e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d013      	beq.n	8004ffa <HAL_UART_IRQHandler+0x20a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80051d0 <HAL_UART_IRQHandler+0x3e0>)
 8004fd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fed5 	bl	8003d8e <HAL_DMA_Abort_IT>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_UART_IRQHandler+0x228>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4798      	blx	r3
 8004ff8:	e00e      	b.n	8005018 <HAL_UART_IRQHandler+0x228>
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f994 	bl	8005328 <HAL_UART_ErrorCallback>
 8005000:	e00a      	b.n	8005018 <HAL_UART_IRQHandler+0x228>
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f990 	bl	8005328 <HAL_UART_ErrorCallback>
 8005008:	e006      	b.n	8005018 <HAL_UART_IRQHandler+0x228>
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f98c 	bl	8005328 <HAL_UART_ErrorCallback>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
 8005016:	e175      	b.n	8005304 <HAL_UART_IRQHandler+0x514>
 8005018:	bf00      	nop
 800501a:	e173      	b.n	8005304 <HAL_UART_IRQHandler+0x514>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	2b01      	cmp	r3, #1
 8005022:	f040 814f 	bne.w	80052c4 <HAL_UART_IRQHandler+0x4d4>
 8005026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8148 	beq.w	80052c4 <HAL_UART_IRQHandler+0x4d4>
 8005034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8141 	beq.w	80052c4 <HAL_UART_IRQHandler+0x4d4>
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005062:	2b40      	cmp	r3, #64	@ 0x40
 8005064:	f040 80b6 	bne.w	80051d4 <HAL_UART_IRQHandler+0x3e4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8005074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8145 	beq.w	8005308 <HAL_UART_IRQHandler+0x518>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005086:	429a      	cmp	r2, r3
 8005088:	f080 813e 	bcs.w	8005308 <HAL_UART_IRQHandler+0x518>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005092:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509e:	f000 8088 	beq.w	80051b2 <HAL_UART_IRQHandler+0x3c2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1d9      	bne.n	80050a2 <HAL_UART_IRQHandler+0x2b2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3314      	adds	r3, #20
 80050f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80050f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80050fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005112:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005116:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005118:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800511a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e1      	bne.n	80050ee <HAL_UART_IRQHandler+0x2fe>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	663b      	str	r3, [r7, #96]	@ 0x60
 8005132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800513a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800513c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800514e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005152:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	667b      	str	r3, [r7, #100]	@ 0x64
 800515c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e3      	bne.n	800512a <HAL_UART_IRQHandler+0x33a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005182:	f023 0310 	bic.w	r3, r3, #16
 8005186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005194:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005196:	657b      	str	r3, [r7, #84]	@ 0x54
 8005198:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800519a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e3      	bne.n	8005170 <HAL_UART_IRQHandler+0x380>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fd7e 	bl	8003cae <HAL_DMA_Abort>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8b7 	bl	800533c <HAL_UARTEx_RxEventCallback>
 80051ce:	e09b      	b.n	8005308 <HAL_UART_IRQHandler+0x518>
 80051d0:	0800548f 	.word	0x0800548f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 808e 	beq.w	800530c <HAL_UART_IRQHandler+0x51c>
 80051f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8089 	beq.w	800530c <HAL_UART_IRQHandler+0x51c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
 800520a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800521e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800522c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e3      	bne.n	80051fa <HAL_UART_IRQHandler+0x40a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3314      	adds	r3, #20
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	623b      	str	r3, [r7, #32]
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3314      	adds	r3, #20
 8005252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005256:	633a      	str	r2, [r7, #48]	@ 0x30
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800525a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800525c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e3      	bne.n	8005232 <HAL_UART_IRQHandler+0x442>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0310 	bic.w	r3, r3, #16
 800528e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	330c      	adds	r3, #12
 8005298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800529c:	61fa      	str	r2, [r7, #28]
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e3      	bne.n	8005278 <HAL_UART_IRQHandler+0x488>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80052b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f83d 	bl	800533c <HAL_UARTEx_RxEventCallback>
 80052c2:	e023      	b.n	800530c <HAL_UART_IRQHandler+0x51c>
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <HAL_UART_IRQHandler+0x4f4>
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_UART_IRQHandler+0x4f4>
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8ea 	bl	80054b6 <UART_Transmit_IT>
 80052e2:	e014      	b.n	800530e <HAL_UART_IRQHandler+0x51e>
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00e      	beq.n	800530e <HAL_UART_IRQHandler+0x51e>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_UART_IRQHandler+0x51e>
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f92a 	bl	8005556 <UART_EndTransmit_IT>
 8005302:	e004      	b.n	800530e <HAL_UART_IRQHandler+0x51e>
 8005304:	bf00      	nop
 8005306:	e002      	b.n	800530e <HAL_UART_IRQHandler+0x51e>
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <HAL_UART_IRQHandler+0x51e>
 800530c:	bf00      	nop
 800530e:	37e8      	adds	r7, #232	@ 0xe8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_TxCpltCallback>:
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_ErrorCallback>:
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_UARTEx_RxEventCallback>:
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <UART_Start_Receive_IT>:
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	@ 0x44
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2222      	movs	r2, #34	@ 0x22
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <UART_Start_Receive_IT+0x46>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0220 	orr.w	r2, r2, #32
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	2300      	movs	r3, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_EndRxTransfer>:
 80053c8:	b480      	push	{r7}
 80053ca:	b095      	sub	sp, #84	@ 0x54
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80053f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_EndRxTransfer+0x8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3314      	adds	r3, #20
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3314      	adds	r3, #20
 8005422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800542a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_EndRxTransfer+0x3c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	2b01      	cmp	r3, #1
 800543e:	d119      	bne.n	8005474 <UART_EndRxTransfer+0xac>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	647b      	str	r3, [r7, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005460:	61ba      	str	r2, [r7, #24]
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_EndRxTransfer+0x78>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	@ 0x30
 8005482:	bf00      	nop
 8005484:	3754      	adds	r7, #84	@ 0x54
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <UART_DMAAbortOnError>:
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	84da      	strh	r2, [r3, #38]	@ 0x26
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ff3d 	bl	8005328 <HAL_UART_ErrorCallback>
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_Transmit_IT>:
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b21      	cmp	r3, #33	@ 0x21
 80054c8:	d13e      	bne.n	8005548 <UART_Transmit_IT+0x92>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d2:	d114      	bne.n	80054fe <UART_Transmit_IT+0x48>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d110      	bne.n	80054fe <UART_Transmit_IT+0x48>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	1c9a      	adds	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]
 80054fc:	e008      	b.n	8005510 <UART_Transmit_IT+0x5a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6211      	str	r1, [r2, #32]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4619      	mov	r1, r3
 800551e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <UART_Transmit_IT+0x8e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <UART_Transmit_IT+0x94>
 8005548:	2302      	movs	r3, #2
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <UART_EndTransmit_IT>:
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fecc 	bl	8005314 <HAL_UART_TxCpltCallback>
 800557c:	2300      	movs	r3, #0
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <UART_Receive_IT>:
 8005586:	b580      	push	{r7, lr}
 8005588:	b08c      	sub	sp, #48	@ 0x30
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b22      	cmp	r3, #34	@ 0x22
 8005598:	f040 80ae 	bne.w	80056f8 <UART_Receive_IT+0x172>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a4:	d117      	bne.n	80055d6 <UART_Receive_IT+0x50>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d113      	bne.n	80055d6 <UART_Receive_IT+0x50>
 80055ae:	2300      	movs	r3, #0
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	1c9a      	adds	r2, r3, #2
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80055d4:	e026      	b.n	8005624 <UART_Receive_IT+0x9e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055dc:	2300      	movs	r3, #0
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e8:	d007      	beq.n	80055fa <UART_Receive_IT+0x74>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <UART_Receive_IT+0x82>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <UART_Receive_IT+0x82>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	b2da      	uxtb	r2, r3
 8005602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e008      	b.n	800561a <UART_Receive_IT+0x94>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005614:	b2da      	uxtb	r2, r3
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	@ 0x28
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29b      	uxth	r3, r3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4619      	mov	r1, r3
 8005632:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005634:	2b00      	cmp	r3, #0
 8005636:	d15d      	bne.n	80056f4 <UART_Receive_IT+0x16e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0220 	bic.w	r2, r2, #32
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	615a      	str	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	635a      	str	r2, [r3, #52]	@ 0x34
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567a:	2b01      	cmp	r3, #1
 800567c:	d135      	bne.n	80056ea <UART_Receive_IT+0x164>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 0310 	bic.w	r3, r3, #16
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	623a      	str	r2, [r7, #32]
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_Receive_IT+0xfe>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d10a      	bne.n	80056dc <UART_Receive_IT+0x156>
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fe2a 	bl	800533c <HAL_UARTEx_RxEventCallback>
 80056e8:	e002      	b.n	80056f0 <UART_Receive_IT+0x16a>
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fd fda6 	bl	800323c <HAL_UART_RxCpltCallback>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e002      	b.n	80056fa <UART_Receive_IT+0x174>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <UART_Receive_IT+0x174>
 80056f8:	2302      	movs	r3, #2
 80056fa:	4618      	mov	r0, r3
 80056fc:	3730      	adds	r7, #48	@ 0x30
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <UART_SetConfig>:
 8005704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005708:	b0c0      	sub	sp, #256	@ 0x100
 800570a:	af00      	add	r7, sp, #0
 800570c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	68d9      	ldr	r1, [r3, #12]
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	ea40 0301 	orr.w	r3, r0, r1
 800572c:	6113      	str	r3, [r2, #16]
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	431a      	orrs	r2, r3
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800575c:	f021 010c 	bic.w	r1, r1, #12
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800576a:	430b      	orrs	r3, r1
 800576c:	60d3      	str	r3, [r2, #12]
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	6999      	ldr	r1, [r3, #24]
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	ea40 0301 	orr.w	r3, r0, r1
 800578a:	6153      	str	r3, [r2, #20]
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b8f      	ldr	r3, [pc, #572]	@ (80059d0 <UART_SetConfig+0x2cc>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d005      	beq.n	80057a4 <UART_SetConfig+0xa0>
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b8d      	ldr	r3, [pc, #564]	@ (80059d4 <UART_SetConfig+0x2d0>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d104      	bne.n	80057ae <UART_SetConfig+0xaa>
 80057a4:	f7fe fdca 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 80057a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057ac:	e003      	b.n	80057b6 <UART_SetConfig+0xb2>
 80057ae:	f7fe fdb1 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 80057b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c0:	f040 810c 	bne.w	80059dc <UART_SetConfig+0x2d8>
 80057c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	1891      	adds	r1, r2, r2
 80057dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057de:	415b      	adcs	r3, r3
 80057e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057e6:	4621      	mov	r1, r4
 80057e8:	eb12 0801 	adds.w	r8, r2, r1
 80057ec:	4629      	mov	r1, r5
 80057ee:	eb43 0901 	adc.w	r9, r3, r1
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005806:	4690      	mov	r8, r2
 8005808:	4699      	mov	r9, r3
 800580a:	4623      	mov	r3, r4
 800580c:	eb18 0303 	adds.w	r3, r8, r3
 8005810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005814:	462b      	mov	r3, r5
 8005816:	eb49 0303 	adc.w	r3, r9, r3
 800581a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800582a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800582e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005832:	460b      	mov	r3, r1
 8005834:	18db      	adds	r3, r3, r3
 8005836:	653b      	str	r3, [r7, #80]	@ 0x50
 8005838:	4613      	mov	r3, r2
 800583a:	eb42 0303 	adc.w	r3, r2, r3
 800583e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005844:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005848:	f7fa feea 	bl	8000620 <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4b61      	ldr	r3, [pc, #388]	@ (80059d8 <UART_SetConfig+0x2d4>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	011c      	lsls	r4, r3, #4
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005864:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005868:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005874:	415b      	adcs	r3, r3
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800587c:	4641      	mov	r1, r8
 800587e:	eb12 0a01 	adds.w	sl, r2, r1
 8005882:	4649      	mov	r1, r9
 8005884:	eb43 0b01 	adc.w	fp, r3, r1
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005894:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005898:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800589c:	4692      	mov	sl, r2
 800589e:	469b      	mov	fp, r3
 80058a0:	4643      	mov	r3, r8
 80058a2:	eb1a 0303 	adds.w	r3, sl, r3
 80058a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058aa:	464b      	mov	r3, r9
 80058ac:	eb4b 0303 	adc.w	r3, fp, r3
 80058b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058c8:	460b      	mov	r3, r1
 80058ca:	18db      	adds	r3, r3, r3
 80058cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ce:	4613      	mov	r3, r2
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058de:	f7fa fe9f 	bl	8000620 <__aeabi_uldivmod>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	4b3b      	ldr	r3, [pc, #236]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80058ea:	fba3 2301 	umull	r2, r3, r3, r1
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	2264      	movs	r2, #100	@ 0x64
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	1acb      	subs	r3, r1, r3
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058fe:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <UART_SetConfig+0x2d4>)
 8005900:	fba3 2302 	umull	r2, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800590c:	441c      	add	r4, r3
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005918:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800591c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005928:	415b      	adcs	r3, r3
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800592c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6339      	str	r1, [r7, #48]	@ 0x30
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005964:	464b      	mov	r3, r9
 8005966:	460a      	mov	r2, r1
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800597c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005980:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005984:	460b      	mov	r3, r1
 8005986:	18db      	adds	r3, r3, r3
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800598a:	4613      	mov	r3, r2
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005996:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800599a:	f7fa fe41 	bl	8000620 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80059a4:	fba3 1302 	umull	r1, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	2164      	movs	r1, #100	@ 0x64
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	3332      	adds	r3, #50	@ 0x32
 80059b6:	4a08      	ldr	r2, [pc, #32]	@ (80059d8 <UART_SetConfig+0x2d4>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f003 0207 	and.w	r2, r3, #7
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4422      	add	r2, r4
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	e106      	b.n	8005bdc <UART_SetConfig+0x4d8>
 80059ce:	bf00      	nop
 80059d0:	40011000 	.word	0x40011000
 80059d4:	40011400 	.word	0x40011400
 80059d8:	51eb851f 	.word	0x51eb851f
 80059dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ee:	4642      	mov	r2, r8
 80059f0:	464b      	mov	r3, r9
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	6239      	str	r1, [r7, #32]
 80059f6:	415b      	adcs	r3, r3
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059fe:	4641      	mov	r1, r8
 8005a00:	1854      	adds	r4, r2, r1
 8005a02:	4649      	mov	r1, r9
 8005a04:	eb43 0501 	adc.w	r5, r3, r1
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	00eb      	lsls	r3, r5, #3
 8005a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a16:	00e2      	lsls	r2, r4, #3
 8005a18:	4614      	mov	r4, r2
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	18e3      	adds	r3, r4, r3
 8005a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a24:	464b      	mov	r3, r9
 8005a26:	eb45 0303 	adc.w	r3, r5, r3
 8005a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	4621      	mov	r1, r4
 8005a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a54:	4621      	mov	r1, r4
 8005a56:	008a      	lsls	r2, r1, #2
 8005a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a5c:	f7fa fde0 	bl	8000620 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b60      	ldr	r3, [pc, #384]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005a66:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	011c      	lsls	r4, r3, #4
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	61b9      	str	r1, [r7, #24]
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a90:	4641      	mov	r1, r8
 8005a92:	1851      	adds	r1, r2, r1
 8005a94:	6139      	str	r1, [r7, #16]
 8005a96:	4649      	mov	r1, r9
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	00cb      	lsls	r3, r1, #3
 8005aac:	4651      	mov	r1, sl
 8005aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab2:	4651      	mov	r1, sl
 8005ab4:	00ca      	lsls	r2, r1, #3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	4642      	mov	r2, r8
 8005abe:	189b      	adds	r3, r3, r2
 8005ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	eb42 0303 	adc.w	r3, r2, r3
 8005acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ada:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ae8:	4649      	mov	r1, r9
 8005aea:	008b      	lsls	r3, r1, #2
 8005aec:	4641      	mov	r1, r8
 8005aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005af2:	4641      	mov	r1, r8
 8005af4:	008a      	lsls	r2, r1, #2
 8005af6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005afa:	f7fa fd91 	bl	8000620 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	4b38      	ldr	r3, [pc, #224]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005b06:	fba3 2301 	umull	r2, r3, r3, r1
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	2264      	movs	r2, #100	@ 0x64
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	1acb      	subs	r3, r1, r3
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	3332      	adds	r3, #50	@ 0x32
 8005b18:	4a33      	ldr	r2, [pc, #204]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b24:	441c      	add	r4, r3
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b76:	464b      	mov	r3, r9
 8005b78:	460a      	mov	r2, r1
 8005b7a:	eb42 0303 	adc.w	r3, r2, r3
 8005b7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b98:	4649      	mov	r1, r9
 8005b9a:	008b      	lsls	r3, r1, #2
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	008a      	lsls	r2, r1, #2
 8005ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005baa:	f7fa fd39 	bl	8000620 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	@ 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	@ 0x32
 8005bc6:	4a08      	ldr	r2, [pc, #32]	@ (8005be8 <UART_SetConfig+0x4e4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4422      	add	r2, r4
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	bf00      	nop
 8005bde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005be2:	46bd      	mov	sp, r7
 8005be4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be8:	51eb851f 	.word	0x51eb851f

08005bec <memset>:
 8005bec:	4402      	add	r2, r0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <__libc_init_array>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8005c34 <__libc_init_array+0x38>)
 8005c00:	4c0d      	ldr	r4, [pc, #52]	@ (8005c38 <__libc_init_array+0x3c>)
 8005c02:	1b64      	subs	r4, r4, r5
 8005c04:	10a4      	asrs	r4, r4, #2
 8005c06:	2600      	movs	r6, #0
 8005c08:	42a6      	cmp	r6, r4
 8005c0a:	d109      	bne.n	8005c20 <__libc_init_array+0x24>
 8005c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c3c <__libc_init_array+0x40>)
 8005c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c40 <__libc_init_array+0x44>)
 8005c10:	f000 f818 	bl	8005c44 <_init>
 8005c14:	1b64      	subs	r4, r4, r5
 8005c16:	10a4      	asrs	r4, r4, #2
 8005c18:	2600      	movs	r6, #0
 8005c1a:	42a6      	cmp	r6, r4
 8005c1c:	d105      	bne.n	8005c2a <__libc_init_array+0x2e>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c24:	4798      	blx	r3
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7ee      	b.n	8005c08 <__libc_init_array+0xc>
 8005c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c2e:	4798      	blx	r3
 8005c30:	3601      	adds	r6, #1
 8005c32:	e7f2      	b.n	8005c1a <__libc_init_array+0x1e>
 8005c34:	0802b47c 	.word	0x0802b47c
 8005c38:	0802b47c 	.word	0x0802b47c
 8005c3c:	0802b47c 	.word	0x0802b47c
 8005c40:	0802b480 	.word	0x0802b480

08005c44 <_init>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr

08005c50 <_fini>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	bf00      	nop
 8005c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c56:	bc08      	pop	{r3}
 8005c58:	469e      	mov	lr, r3
 8005c5a:	4770      	bx	lr
