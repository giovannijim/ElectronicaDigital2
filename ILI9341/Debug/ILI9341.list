
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b160  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800b328  0800b328  0000c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8a4  0800b8a4  00023a9c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8a4  0800b8a4  0000c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8ac  0800b8ac  00023a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8ac  0800b8ac  0000c8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8b0  0800b8b0  0000c8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00016a9c  20000000  0800b8b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000619c  20016a9c  08022350  00023a9c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001cc38  08022350  00023c38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023a9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c8e  00000000  00000000  00023acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8a  00000000  00000000  0003475a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000371e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcc  00000000  00000000  00038060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023645  00000000  00000000  00038c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164f2  00000000  00000000  0005c271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce766  00000000  00000000  00072763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bfc  00000000  00000000  00140f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00144b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20016a9c 	.word	0x20016a9c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b310 	.word	0x0800b310

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20016aa0 	.word	0x20016aa0
 8000204:	0800b310 	.word	0x0800b310

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2f>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000598:	bf24      	itt	cs
 800059a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800059e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005a2:	d90d      	bls.n	80005c0 <__aeabi_d2f+0x30>
 80005a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b8:	bf08      	it	eq
 80005ba:	f020 0001 	biceq.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005c4:	d121      	bne.n	800060a <__aeabi_d2f+0x7a>
 80005c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ca:	bfbc      	itt	lt
 80005cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005d0:	4770      	bxlt	lr
 80005d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005da:	f1c2 0218 	rsb	r2, r2, #24
 80005de:	f1c2 0c20 	rsb	ip, r2, #32
 80005e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	f040 0001 	orrne.w	r0, r0, #1
 80005f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005fc:	ea40 000c 	orr.w	r0, r0, ip
 8000600:	fa23 f302 	lsr.w	r3, r3, r2
 8000604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000608:	e7cc      	b.n	80005a4 <__aeabi_d2f+0x14>
 800060a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800060e:	d107      	bne.n	8000620 <__aeabi_d2f+0x90>
 8000610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000614:	bf1e      	ittt	ne
 8000616:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800061a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800061e:	4770      	bxne	lr
 8000620:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000624:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000628:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <__aeabi_uldivmod>:
 8000630:	b953      	cbnz	r3, 8000648 <__aeabi_uldivmod+0x18>
 8000632:	b94a      	cbnz	r2, 8000648 <__aeabi_uldivmod+0x18>
 8000634:	2900      	cmp	r1, #0
 8000636:	bf08      	it	eq
 8000638:	2800      	cmpeq	r0, #0
 800063a:	bf1c      	itt	ne
 800063c:	f04f 31ff 	movne.w	r1, #4294967295
 8000640:	f04f 30ff 	movne.w	r0, #4294967295
 8000644:	f000 b96a 	b.w	800091c <__aeabi_idiv0>
 8000648:	f1ad 0c08 	sub.w	ip, sp, #8
 800064c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000650:	f000 f806 	bl	8000660 <__udivmoddi4>
 8000654:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr

08000660 <__udivmoddi4>:
 8000660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000664:	9d08      	ldr	r5, [sp, #32]
 8000666:	460c      	mov	r4, r1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d14e      	bne.n	800070a <__udivmoddi4+0xaa>
 800066c:	4694      	mov	ip, r2
 800066e:	458c      	cmp	ip, r1
 8000670:	4686      	mov	lr, r0
 8000672:	fab2 f282 	clz	r2, r2
 8000676:	d962      	bls.n	800073e <__udivmoddi4+0xde>
 8000678:	b14a      	cbz	r2, 800068e <__udivmoddi4+0x2e>
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	4091      	lsls	r1, r2
 8000680:	fa20 f303 	lsr.w	r3, r0, r3
 8000684:	fa0c fc02 	lsl.w	ip, ip, r2
 8000688:	4319      	orrs	r1, r3
 800068a:	fa00 fe02 	lsl.w	lr, r0, r2
 800068e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000692:	fa1f f68c 	uxth.w	r6, ip
 8000696:	fbb1 f4f7 	udiv	r4, r1, r7
 800069a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800069e:	fb07 1114 	mls	r1, r7, r4, r1
 80006a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006a6:	fb04 f106 	mul.w	r1, r4, r6
 80006aa:	4299      	cmp	r1, r3
 80006ac:	d90a      	bls.n	80006c4 <__udivmoddi4+0x64>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006b6:	f080 8112 	bcs.w	80008de <__udivmoddi4+0x27e>
 80006ba:	4299      	cmp	r1, r3
 80006bc:	f240 810f 	bls.w	80008de <__udivmoddi4+0x27e>
 80006c0:	3c02      	subs	r4, #2
 80006c2:	4463      	add	r3, ip
 80006c4:	1a59      	subs	r1, r3, r1
 80006c6:	fa1f f38e 	uxth.w	r3, lr
 80006ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80006ce:	fb07 1110 	mls	r1, r7, r0, r1
 80006d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006d6:	fb00 f606 	mul.w	r6, r0, r6
 80006da:	429e      	cmp	r6, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x94>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006e6:	f080 80fc 	bcs.w	80008e2 <__udivmoddi4+0x282>
 80006ea:	429e      	cmp	r6, r3
 80006ec:	f240 80f9 	bls.w	80008e2 <__udivmoddi4+0x282>
 80006f0:	4463      	add	r3, ip
 80006f2:	3802      	subs	r0, #2
 80006f4:	1b9b      	subs	r3, r3, r6
 80006f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006fa:	2100      	movs	r1, #0
 80006fc:	b11d      	cbz	r5, 8000706 <__udivmoddi4+0xa6>
 80006fe:	40d3      	lsrs	r3, r2
 8000700:	2200      	movs	r2, #0
 8000702:	e9c5 3200 	strd	r3, r2, [r5]
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	428b      	cmp	r3, r1
 800070c:	d905      	bls.n	800071a <__udivmoddi4+0xba>
 800070e:	b10d      	cbz	r5, 8000714 <__udivmoddi4+0xb4>
 8000710:	e9c5 0100 	strd	r0, r1, [r5]
 8000714:	2100      	movs	r1, #0
 8000716:	4608      	mov	r0, r1
 8000718:	e7f5      	b.n	8000706 <__udivmoddi4+0xa6>
 800071a:	fab3 f183 	clz	r1, r3
 800071e:	2900      	cmp	r1, #0
 8000720:	d146      	bne.n	80007b0 <__udivmoddi4+0x150>
 8000722:	42a3      	cmp	r3, r4
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xcc>
 8000726:	4290      	cmp	r0, r2
 8000728:	f0c0 80f0 	bcc.w	800090c <__udivmoddi4+0x2ac>
 800072c:	1a86      	subs	r6, r0, r2
 800072e:	eb64 0303 	sbc.w	r3, r4, r3
 8000732:	2001      	movs	r0, #1
 8000734:	2d00      	cmp	r5, #0
 8000736:	d0e6      	beq.n	8000706 <__udivmoddi4+0xa6>
 8000738:	e9c5 6300 	strd	r6, r3, [r5]
 800073c:	e7e3      	b.n	8000706 <__udivmoddi4+0xa6>
 800073e:	2a00      	cmp	r2, #0
 8000740:	f040 8090 	bne.w	8000864 <__udivmoddi4+0x204>
 8000744:	eba1 040c 	sub.w	r4, r1, ip
 8000748:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800074c:	fa1f f78c 	uxth.w	r7, ip
 8000750:	2101      	movs	r1, #1
 8000752:	fbb4 f6f8 	udiv	r6, r4, r8
 8000756:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800075a:	fb08 4416 	mls	r4, r8, r6, r4
 800075e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000762:	fb07 f006 	mul.w	r0, r7, r6
 8000766:	4298      	cmp	r0, r3
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x11c>
 800076a:	eb1c 0303 	adds.w	r3, ip, r3
 800076e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x11a>
 8000774:	4298      	cmp	r0, r3
 8000776:	f200 80cd 	bhi.w	8000914 <__udivmoddi4+0x2b4>
 800077a:	4626      	mov	r6, r4
 800077c:	1a1c      	subs	r4, r3, r0
 800077e:	fa1f f38e 	uxth.w	r3, lr
 8000782:	fbb4 f0f8 	udiv	r0, r4, r8
 8000786:	fb08 4410 	mls	r4, r8, r0, r4
 800078a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800078e:	fb00 f707 	mul.w	r7, r0, r7
 8000792:	429f      	cmp	r7, r3
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x148>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f100 34ff 	add.w	r4, r0, #4294967295
 800079e:	d202      	bcs.n	80007a6 <__udivmoddi4+0x146>
 80007a0:	429f      	cmp	r7, r3
 80007a2:	f200 80b0 	bhi.w	8000906 <__udivmoddi4+0x2a6>
 80007a6:	4620      	mov	r0, r4
 80007a8:	1bdb      	subs	r3, r3, r7
 80007aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ae:	e7a5      	b.n	80006fc <__udivmoddi4+0x9c>
 80007b0:	f1c1 0620 	rsb	r6, r1, #32
 80007b4:	408b      	lsls	r3, r1
 80007b6:	fa22 f706 	lsr.w	r7, r2, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c0:	fa04 f301 	lsl.w	r3, r4, r1
 80007c4:	ea43 030c 	orr.w	r3, r3, ip
 80007c8:	40f4      	lsrs	r4, r6
 80007ca:	fa00 f801 	lsl.w	r8, r0, r1
 80007ce:	0c38      	lsrs	r0, r7, #16
 80007d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007d4:	fbb4 fef0 	udiv	lr, r4, r0
 80007d8:	fa1f fc87 	uxth.w	ip, r7
 80007dc:	fb00 441e 	mls	r4, r0, lr, r4
 80007e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007e4:	fb0e f90c 	mul.w	r9, lr, ip
 80007e8:	45a1      	cmp	r9, r4
 80007ea:	fa02 f201 	lsl.w	r2, r2, r1
 80007ee:	d90a      	bls.n	8000806 <__udivmoddi4+0x1a6>
 80007f0:	193c      	adds	r4, r7, r4
 80007f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007f6:	f080 8084 	bcs.w	8000902 <__udivmoddi4+0x2a2>
 80007fa:	45a1      	cmp	r9, r4
 80007fc:	f240 8081 	bls.w	8000902 <__udivmoddi4+0x2a2>
 8000800:	f1ae 0e02 	sub.w	lr, lr, #2
 8000804:	443c      	add	r4, r7
 8000806:	eba4 0409 	sub.w	r4, r4, r9
 800080a:	fa1f f983 	uxth.w	r9, r3
 800080e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000812:	fb00 4413 	mls	r4, r0, r3, r4
 8000816:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081a:	fb03 fc0c 	mul.w	ip, r3, ip
 800081e:	45a4      	cmp	ip, r4
 8000820:	d907      	bls.n	8000832 <__udivmoddi4+0x1d2>
 8000822:	193c      	adds	r4, r7, r4
 8000824:	f103 30ff 	add.w	r0, r3, #4294967295
 8000828:	d267      	bcs.n	80008fa <__udivmoddi4+0x29a>
 800082a:	45a4      	cmp	ip, r4
 800082c:	d965      	bls.n	80008fa <__udivmoddi4+0x29a>
 800082e:	3b02      	subs	r3, #2
 8000830:	443c      	add	r4, r7
 8000832:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000836:	fba0 9302 	umull	r9, r3, r0, r2
 800083a:	eba4 040c 	sub.w	r4, r4, ip
 800083e:	429c      	cmp	r4, r3
 8000840:	46ce      	mov	lr, r9
 8000842:	469c      	mov	ip, r3
 8000844:	d351      	bcc.n	80008ea <__udivmoddi4+0x28a>
 8000846:	d04e      	beq.n	80008e6 <__udivmoddi4+0x286>
 8000848:	b155      	cbz	r5, 8000860 <__udivmoddi4+0x200>
 800084a:	ebb8 030e 	subs.w	r3, r8, lr
 800084e:	eb64 040c 	sbc.w	r4, r4, ip
 8000852:	fa04 f606 	lsl.w	r6, r4, r6
 8000856:	40cb      	lsrs	r3, r1
 8000858:	431e      	orrs	r6, r3
 800085a:	40cc      	lsrs	r4, r1
 800085c:	e9c5 6400 	strd	r6, r4, [r5]
 8000860:	2100      	movs	r1, #0
 8000862:	e750      	b.n	8000706 <__udivmoddi4+0xa6>
 8000864:	f1c2 0320 	rsb	r3, r2, #32
 8000868:	fa20 f103 	lsr.w	r1, r0, r3
 800086c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000870:	fa24 f303 	lsr.w	r3, r4, r3
 8000874:	4094      	lsls	r4, r2
 8000876:	430c      	orrs	r4, r1
 8000878:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800087c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000880:	fa1f f78c 	uxth.w	r7, ip
 8000884:	fbb3 f0f8 	udiv	r0, r3, r8
 8000888:	fb08 3110 	mls	r1, r8, r0, r3
 800088c:	0c23      	lsrs	r3, r4, #16
 800088e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000892:	fb00 f107 	mul.w	r1, r0, r7
 8000896:	4299      	cmp	r1, r3
 8000898:	d908      	bls.n	80008ac <__udivmoddi4+0x24c>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f100 36ff 	add.w	r6, r0, #4294967295
 80008a2:	d22c      	bcs.n	80008fe <__udivmoddi4+0x29e>
 80008a4:	4299      	cmp	r1, r3
 80008a6:	d92a      	bls.n	80008fe <__udivmoddi4+0x29e>
 80008a8:	3802      	subs	r0, #2
 80008aa:	4463      	add	r3, ip
 80008ac:	1a5b      	subs	r3, r3, r1
 80008ae:	b2a4      	uxth	r4, r4
 80008b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008b4:	fb08 3311 	mls	r3, r8, r1, r3
 80008b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008bc:	fb01 f307 	mul.w	r3, r1, r7
 80008c0:	42a3      	cmp	r3, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x276>
 80008c4:	eb1c 0404 	adds.w	r4, ip, r4
 80008c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008cc:	d213      	bcs.n	80008f6 <__udivmoddi4+0x296>
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	d911      	bls.n	80008f6 <__udivmoddi4+0x296>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4464      	add	r4, ip
 80008d6:	1ae4      	subs	r4, r4, r3
 80008d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008dc:	e739      	b.n	8000752 <__udivmoddi4+0xf2>
 80008de:	4604      	mov	r4, r0
 80008e0:	e6f0      	b.n	80006c4 <__udivmoddi4+0x64>
 80008e2:	4608      	mov	r0, r1
 80008e4:	e706      	b.n	80006f4 <__udivmoddi4+0x94>
 80008e6:	45c8      	cmp	r8, r9
 80008e8:	d2ae      	bcs.n	8000848 <__udivmoddi4+0x1e8>
 80008ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80008ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80008f2:	3801      	subs	r0, #1
 80008f4:	e7a8      	b.n	8000848 <__udivmoddi4+0x1e8>
 80008f6:	4631      	mov	r1, r6
 80008f8:	e7ed      	b.n	80008d6 <__udivmoddi4+0x276>
 80008fa:	4603      	mov	r3, r0
 80008fc:	e799      	b.n	8000832 <__udivmoddi4+0x1d2>
 80008fe:	4630      	mov	r0, r6
 8000900:	e7d4      	b.n	80008ac <__udivmoddi4+0x24c>
 8000902:	46d6      	mov	lr, sl
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1a6>
 8000906:	4463      	add	r3, ip
 8000908:	3802      	subs	r0, #2
 800090a:	e74d      	b.n	80007a8 <__udivmoddi4+0x148>
 800090c:	4606      	mov	r6, r0
 800090e:	4623      	mov	r3, r4
 8000910:	4608      	mov	r0, r1
 8000912:	e70f      	b.n	8000734 <__udivmoddi4+0xd4>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	e730      	b.n	800077c <__udivmoddi4+0x11c>
 800091a:	bf00      	nop

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	@ 0x40
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <SELECT+0x18>)
 800092a:	f005 fb1b 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f004 ffb0 	bl	8005894 <HAL_Delay>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40020400 	.word	0x40020400

0800093c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2140      	movs	r1, #64	@ 0x40
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <DESELECT+0x18>)
 8000946:	f005 fb0d 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f004 ffa2 	bl	8005894 <HAL_Delay>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020400 	.word	0x40020400

08000958 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000962:	bf00      	nop
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <SPI_TxByte+0x30>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b02      	cmp	r3, #2
 8000970:	d1f8      	bne.n	8000964 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000972:	1df9      	adds	r1, r7, #7
 8000974:	2364      	movs	r3, #100	@ 0x64
 8000976:	2201      	movs	r2, #1
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <SPI_TxByte+0x30>)
 800097a:	f006 f8f8 	bl	8006b6e <HAL_SPI_Transmit>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20016ac0 	.word	0x20016ac0

0800098c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000998:	bf00      	nop
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <SPI_TxBuffer+0x30>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d1f8      	bne.n	800099a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	2364      	movs	r3, #100	@ 0x64
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4803      	ldr	r0, [pc, #12]	@ (80009bc <SPI_TxBuffer+0x30>)
 80009b0:	f006 f8dd 	bl	8006b6e <HAL_SPI_Transmit>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20016ac0 	.word	0x20016ac0

080009c0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009c6:	23ff      	movs	r3, #255	@ 0xff
 80009c8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009ca:	bf00      	nop
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <SPI_RxByte+0x34>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d1f8      	bne.n	80009cc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009da:	1dba      	adds	r2, r7, #6
 80009dc:	1df9      	adds	r1, r7, #7
 80009de:	2364      	movs	r3, #100	@ 0x64
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <SPI_RxByte+0x34>)
 80009e6:	f006 fa05 	bl	8006df4 <HAL_SPI_TransmitReceive>

	return data;
 80009ea:	79bb      	ldrb	r3, [r7, #6]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20016ac0 	.word	0x20016ac0

080009f8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000a00:	f7ff ffde 	bl	80009c0 <SPI_RxByte>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	701a      	strb	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <SD_ReadyWait+0x30>)
 8000a1c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a20:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000a22:	f7ff ffcd 	bl	80009c0 <SPI_RxByte>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2bff      	cmp	r3, #255	@ 0xff
 8000a2e:	d003      	beq.n	8000a38 <SD_ReadyWait+0x24>
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <SD_ReadyWait+0x30>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f4      	bne.n	8000a22 <SD_ReadyWait+0xe>

	return res;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20016aba 	.word	0x20016aba

08000a48 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a4e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000a52:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a54:	f7ff ff72 	bl	800093c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	e005      	b.n	8000a6a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a5e:	20ff      	movs	r0, #255	@ 0xff
 8000a60:	f7ff ff7a 	bl	8000958 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b09      	cmp	r3, #9
 8000a6e:	ddf6      	ble.n	8000a5e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a70:	f7ff ff56 	bl	8000920 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a74:	2340      	movs	r3, #64	@ 0x40
 8000a76:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a88:	2395      	movs	r3, #149	@ 0x95
 8000a8a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2106      	movs	r1, #6
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff7b 	bl	800098c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a96:	e002      	b.n	8000a9e <SD_PowerOn+0x56>
	{
		cnt--;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a9e:	f7ff ff8f 	bl	80009c0 <SPI_RxByte>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d002      	beq.n	8000aae <SD_PowerOn+0x66>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f4      	bne.n	8000a98 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000aae:	f7ff ff45 	bl	800093c <DESELECT>
	SPI_TxByte(0XFF);
 8000ab2:	20ff      	movs	r0, #255	@ 0xff
 8000ab4:	f7ff ff50 	bl	8000958 <SPI_TxByte>

	PowerFlag = 1;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <SD_PowerOn+0x80>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20016abd 	.word	0x20016abd

08000acc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <SD_PowerOff+0x14>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	20016abd 	.word	0x20016abd

08000ae4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <SD_CheckPower+0x14>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20016abd 	.word	0x20016abd

08000afc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <SD_RxDataBlock+0x58>)
 8000b08:	22c8      	movs	r2, #200	@ 0xc8
 8000b0a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000b0c:	f7ff ff58 	bl	80009c0 <SPI_RxByte>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2bff      	cmp	r3, #255	@ 0xff
 8000b18:	d103      	bne.n	8000b22 <SD_RxDataBlock+0x26>
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <SD_RxDataBlock+0x58>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f4      	bne.n	8000b0c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b26:	d001      	beq.n	8000b2c <SD_RxDataBlock+0x30>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e00f      	b.n	8000b4c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff60 	bl	80009f8 <SPI_RxBytePtr>
	} while(len--);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	603a      	str	r2, [r7, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f4      	bne.n	8000b2c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b42:	f7ff ff3d 	bl	80009c0 <SPI_RxByte>
	SPI_RxByte();
 8000b46:	f7ff ff3b 	bl	80009c0 <SPI_RxByte>

	return TRUE;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20016ab8 	.word	0x20016ab8

08000b58 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b68:	f7ff ff54 	bl	8000a14 <SD_ReadyWait>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2bff      	cmp	r3, #255	@ 0xff
 8000b70:	d001      	beq.n	8000b76 <SD_TxDataBlock+0x1e>
 8000b72:	2300      	movs	r3, #0
 8000b74:	e02f      	b.n	8000bd6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff feed 	bl	8000958 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	2bfd      	cmp	r3, #253	@ 0xfd
 8000b82:	d020      	beq.n	8000bc6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff feff 	bl	800098c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b8e:	f7ff ff17 	bl	80009c0 <SPI_RxByte>
		SPI_RxByte();
 8000b92:	f7ff ff15 	bl	80009c0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b96:	e00b      	b.n	8000bb0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b98:	f7ff ff12 	bl	80009c0 <SPI_RxByte>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d006      	beq.n	8000bb8 <SD_TxDataBlock+0x60>
			i++;
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	3301      	adds	r3, #1
 8000bae:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	2b40      	cmp	r3, #64	@ 0x40
 8000bb4:	d9f0      	bls.n	8000b98 <SD_TxDataBlock+0x40>
 8000bb6:	e000      	b.n	8000bba <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000bb8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000bba:	bf00      	nop
 8000bbc:	f7ff ff00 	bl	80009c0 <SPI_RxByte>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0fa      	beq.n	8000bbc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	2b05      	cmp	r3, #5
 8000bce:	d101      	bne.n	8000bd4 <SD_TxDataBlock+0x7c>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	6039      	str	r1, [r7, #0]
 8000be8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bea:	f7ff ff13 	bl	8000a14 <SD_ReadyWait>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2bff      	cmp	r3, #255	@ 0xff
 8000bf2:	d001      	beq.n	8000bf8 <SD_SendCmd+0x1a>
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	e042      	b.n	8000c7e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff feac 	bl	8000958 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	0e1b      	lsrs	r3, r3, #24
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fea6 	bl	8000958 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fea0 	bl	8000958 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe9a 	bl	8000958 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe95 	bl	8000958 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b40      	cmp	r3, #64	@ 0x40
 8000c32:	d102      	bne.n	8000c3a <SD_SendCmd+0x5c>
 8000c34:	2395      	movs	r3, #149	@ 0x95
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e007      	b.n	8000c4a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b48      	cmp	r3, #72	@ 0x48
 8000c3e:	d102      	bne.n	8000c46 <SD_SendCmd+0x68>
 8000c40:	2387      	movs	r3, #135	@ 0x87
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e001      	b.n	8000c4a <SD_SendCmd+0x6c>
	else crc = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe83 	bl	8000958 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b4c      	cmp	r3, #76	@ 0x4c
 8000c56:	d101      	bne.n	8000c5c <SD_SendCmd+0x7e>
 8000c58:	f7ff feb2 	bl	80009c0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c60:	f7ff feae 	bl	80009c0 <SPI_RxByte>
 8000c64:	4603      	mov	r3, r0
 8000c66:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	da05      	bge.n	8000c7c <SD_SendCmd+0x9e>
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	73bb      	strb	r3, [r7, #14]
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f1      	bne.n	8000c60 <SD_SendCmd+0x82>

	return res;
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SD_disk_initialize+0x14>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0d1      	b.n	8000e40 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8000e48 <SD_disk_initialize+0x1c0>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <SD_disk_initialize+0x2a>
 8000caa:	4b67      	ldr	r3, [pc, #412]	@ (8000e48 <SD_disk_initialize+0x1c0>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	e0c6      	b.n	8000e40 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000cb2:	f7ff fec9 	bl	8000a48 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000cb6:	f7ff fe33 	bl	8000920 <SELECT>

	/* check disk type */
	type = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2040      	movs	r0, #64	@ 0x40
 8000cc2:	f7ff ff8c 	bl	8000bde <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	f040 80a1 	bne.w	8000e10 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000cce:	4b5f      	ldr	r3, [pc, #380]	@ (8000e4c <SD_disk_initialize+0x1c4>)
 8000cd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cd4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cd6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000cda:	2048      	movs	r0, #72	@ 0x48
 8000cdc:	f7ff ff7f 	bl	8000bde <SD_SendCmd>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d155      	bne.n	8000d92 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e00c      	b.n	8000d06 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cec:	7bfc      	ldrb	r4, [r7, #15]
 8000cee:	f7ff fe67 	bl	80009c0 <SPI_RxByte>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f104 0310 	add.w	r3, r4, #16
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	3301      	adds	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d9ef      	bls.n	8000cec <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000d0c:	7abb      	ldrb	r3, [r7, #10]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d17e      	bne.n	8000e10 <SD_disk_initialize+0x188>
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	2baa      	cmp	r3, #170	@ 0xaa
 8000d16:	d17b      	bne.n	8000e10 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2077      	movs	r0, #119	@ 0x77
 8000d1c:	f7ff ff5f 	bl	8000bde <SD_SendCmd>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d807      	bhi.n	8000d36 <SD_disk_initialize+0xae>
 8000d26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d2a:	2069      	movs	r0, #105	@ 0x69
 8000d2c:	f7ff ff57 	bl	8000bde <SD_SendCmd>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d36:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <SD_disk_initialize+0x1c4>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1ec      	bne.n	8000d18 <SD_disk_initialize+0x90>
 8000d3e:	e000      	b.n	8000d42 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d40:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d42:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <SD_disk_initialize+0x1c4>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d062      	beq.n	8000e10 <SD_disk_initialize+0x188>
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	207a      	movs	r0, #122	@ 0x7a
 8000d4e:	f7ff ff46 	bl	8000bde <SD_SendCmd>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d15b      	bne.n	8000e10 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e00c      	b.n	8000d78 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d5e:	7bfc      	ldrb	r4, [r7, #15]
 8000d60:	f7ff fe2e 	bl	80009c0 <SPI_RxByte>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	f104 0310 	add.w	r3, r4, #16
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	3301      	adds	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d9ef      	bls.n	8000d5e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d7e:	7a3b      	ldrb	r3, [r7, #8]
 8000d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SD_disk_initialize+0x104>
 8000d88:	230c      	movs	r3, #12
 8000d8a:	e000      	b.n	8000d8e <SD_disk_initialize+0x106>
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	73bb      	strb	r3, [r7, #14]
 8000d90:	e03e      	b.n	8000e10 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d92:	2100      	movs	r1, #0
 8000d94:	2077      	movs	r0, #119	@ 0x77
 8000d96:	f7ff ff22 	bl	8000bde <SD_SendCmd>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d808      	bhi.n	8000db2 <SD_disk_initialize+0x12a>
 8000da0:	2100      	movs	r1, #0
 8000da2:	2069      	movs	r0, #105	@ 0x69
 8000da4:	f7ff ff1b 	bl	8000bde <SD_SendCmd>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d801      	bhi.n	8000db2 <SD_disk_initialize+0x12a>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e000      	b.n	8000db4 <SD_disk_initialize+0x12c>
 8000db2:	2301      	movs	r3, #1
 8000db4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d10e      	bne.n	8000dda <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2077      	movs	r0, #119	@ 0x77
 8000dc0:	f7ff ff0d 	bl	8000bde <SD_SendCmd>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d80e      	bhi.n	8000de8 <SD_disk_initialize+0x160>
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2069      	movs	r0, #105	@ 0x69
 8000dce:	f7ff ff06 	bl	8000bde <SD_SendCmd>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d107      	bne.n	8000de8 <SD_disk_initialize+0x160>
 8000dd8:	e00c      	b.n	8000df4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2041      	movs	r0, #65	@ 0x41
 8000dde:	f7ff fefe 	bl	8000bde <SD_SendCmd>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <SD_disk_initialize+0x1c4>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1e2      	bne.n	8000db6 <SD_disk_initialize+0x12e>
 8000df0:	e000      	b.n	8000df4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000df2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <SD_disk_initialize+0x1c4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <SD_disk_initialize+0x184>
 8000dfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e00:	2050      	movs	r0, #80	@ 0x50
 8000e02:	f7ff feec 	bl	8000bde <SD_SendCmd>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SD_disk_initialize+0x188>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000e10:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <SD_disk_initialize+0x1c8>)
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000e16:	f7ff fd91 	bl	800093c <DESELECT>
	SPI_RxByte();
 8000e1a:	f7ff fdd1 	bl	80009c0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <SD_disk_initialize+0x1c0>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <SD_disk_initialize+0x1c0>)
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e001      	b.n	8000e3a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e36:	f7ff fe49 	bl	8000acc <SD_PowerOff>
	}

	return Stat;
 8000e3a:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <SD_disk_initialize+0x1c0>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20016ab8 	.word	0x20016ab8
 8000e50:	20016abc 	.word	0x20016abc

08000e54 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SD_disk_status+0x14>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e002      	b.n	8000e6e <SD_disk_status+0x1a>
	return Stat;
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <SD_disk_status+0x28>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000

08000e80 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <SD_disk_read+0x1c>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <SD_disk_read+0x20>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e051      	b.n	8000f44 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <SD_disk_read+0xcc>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SD_disk_read+0x32>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e048      	b.n	8000f44 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000eb2:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <SD_disk_read+0xd0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <SD_disk_read+0x44>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ec4:	f7ff fd2c 	bl	8000920 <SELECT>

	if (count == 1)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d111      	bne.n	8000ef2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2051      	movs	r0, #81	@ 0x51
 8000ed2:	f7ff fe84 	bl	8000bde <SD_SendCmd>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d129      	bne.n	8000f30 <SD_disk_read+0xb0>
 8000edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f7ff fe0b 	bl	8000afc <SD_RxDataBlock>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d021      	beq.n	8000f30 <SD_disk_read+0xb0>
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	e01e      	b.n	8000f30 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	2052      	movs	r0, #82	@ 0x52
 8000ef6:	f7ff fe72 	bl	8000bde <SD_SendCmd>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d117      	bne.n	8000f30 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f7ff fdf9 	bl	8000afc <SD_RxDataBlock>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00a      	beq.n	8000f26 <SD_disk_read+0xa6>
				buff += 512;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f16:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ed      	bne.n	8000f00 <SD_disk_read+0x80>
 8000f24:	e000      	b.n	8000f28 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f26:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	204c      	movs	r0, #76	@ 0x4c
 8000f2c:	f7ff fe57 	bl	8000bde <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f30:	f7ff fd04 	bl	800093c <DESELECT>
	SPI_RxByte();
 8000f34:	f7ff fd44 	bl	80009c0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20016abc 	.word	0x20016abc

08000f54 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <SD_disk_write+0x1c>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <SD_disk_write+0x20>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e06b      	b.n	800104c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f74:	4b37      	ldr	r3, [pc, #220]	@ (8001054 <SD_disk_write+0x100>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SD_disk_write+0x32>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e062      	b.n	800104c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f86:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <SD_disk_write+0x100>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SD_disk_write+0x44>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e059      	b.n	800104c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	@ (8001058 <SD_disk_write+0x104>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <SD_disk_write+0x56>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	607b      	str	r3, [r7, #4]

	SELECT();
 8000faa:	f7ff fcb9 	bl	8000920 <SELECT>

	if (count == 1)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d110      	bne.n	8000fd6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	2058      	movs	r0, #88	@ 0x58
 8000fb8:	f7ff fe11 	bl	8000bde <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d13a      	bne.n	8001038 <SD_disk_write+0xe4>
 8000fc2:	21fe      	movs	r1, #254	@ 0xfe
 8000fc4:	68b8      	ldr	r0, [r7, #8]
 8000fc6:	f7ff fdc7 	bl	8000b58 <SD_TxDataBlock>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d033      	beq.n	8001038 <SD_disk_write+0xe4>
			count = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	e030      	b.n	8001038 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000fd6:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <SD_disk_write+0x104>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2077      	movs	r0, #119	@ 0x77
 8000fe6:	f7ff fdfa 	bl	8000bde <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	2057      	movs	r0, #87	@ 0x57
 8000fee:	f7ff fdf6 	bl	8000bde <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	2059      	movs	r0, #89	@ 0x59
 8000ff6:	f7ff fdf2 	bl	8000bde <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11b      	bne.n	8001038 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001000:	21fc      	movs	r1, #252	@ 0xfc
 8001002:	68b8      	ldr	r0, [r7, #8]
 8001004:	f7ff fda8 	bl	8000b58 <SD_TxDataBlock>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00a      	beq.n	8001024 <SD_disk_write+0xd0>
				buff += 512;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001014:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ee      	bne.n	8001000 <SD_disk_write+0xac>
 8001022:	e000      	b.n	8001026 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001024:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001026:	21fd      	movs	r1, #253	@ 0xfd
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fd95 	bl	8000b58 <SD_TxDataBlock>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <SD_disk_write+0xe4>
			{
				count = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001038:	f7ff fc80 	bl	800093c <DESELECT>
	SPI_RxByte();
 800103c:	f7ff fcc0 	bl	80009c0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2db      	uxtb	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	20016abc 	.word	0x20016abc

0800105c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b08b      	sub	sp, #44	@ 0x2c
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	603a      	str	r2, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	460b      	mov	r3, r1
 800106a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SD_disk_ioctl+0x1e>
 8001076:	2304      	movs	r3, #4
 8001078:	e113      	b.n	80012a2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d124      	bne.n	80010d0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d012      	beq.n	80010b4 <SD_disk_ioctl+0x58>
 800108e:	2b02      	cmp	r3, #2
 8001090:	dc1a      	bgt.n	80010c8 <SD_disk_ioctl+0x6c>
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <SD_disk_ioctl+0x40>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d006      	beq.n	80010a8 <SD_disk_ioctl+0x4c>
 800109a:	e015      	b.n	80010c8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800109c:	f7ff fd16 	bl	8000acc <SD_PowerOff>
			res = RES_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010a6:	e0fa      	b.n	800129e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80010a8:	f7ff fcce 	bl	8000a48 <SD_PowerOn>
			res = RES_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010b2:	e0f4      	b.n	800129e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	1c5c      	adds	r4, r3, #1
 80010b8:	f7ff fd14 	bl	8000ae4 <SD_CheckPower>
 80010bc:	4603      	mov	r3, r0
 80010be:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010c6:	e0ea      	b.n	800129e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010c8:	2304      	movs	r3, #4
 80010ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010ce:	e0e6      	b.n	800129e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010d0:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <SD_disk_ioctl+0x250>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SD_disk_ioctl+0x86>
 80010de:	2303      	movs	r3, #3
 80010e0:	e0df      	b.n	80012a2 <SD_disk_ioctl+0x246>

		SELECT();
 80010e2:	f7ff fc1d 	bl	8000920 <SELECT>

		switch (ctrl)
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	2b0d      	cmp	r3, #13
 80010ea:	f200 80c9 	bhi.w	8001280 <SD_disk_ioctl+0x224>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <SD_disk_ioctl+0x98>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	080011eb 	.word	0x080011eb
 80010f8:	0800112d 	.word	0x0800112d
 80010fc:	080011db 	.word	0x080011db
 8001100:	08001281 	.word	0x08001281
 8001104:	08001281 	.word	0x08001281
 8001108:	08001281 	.word	0x08001281
 800110c:	08001281 	.word	0x08001281
 8001110:	08001281 	.word	0x08001281
 8001114:	08001281 	.word	0x08001281
 8001118:	08001281 	.word	0x08001281
 800111c:	08001281 	.word	0x08001281
 8001120:	080011fd 	.word	0x080011fd
 8001124:	08001221 	.word	0x08001221
 8001128:	08001245 	.word	0x08001245
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800112c:	2100      	movs	r1, #0
 800112e:	2049      	movs	r0, #73	@ 0x49
 8001130:	f7ff fd55 	bl	8000bde <SD_SendCmd>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 80a6 	bne.w	8001288 <SD_disk_ioctl+0x22c>
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2110      	movs	r1, #16
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fcda 	bl	8000afc <SD_RxDataBlock>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 809c 	beq.w	8001288 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	099b      	lsrs	r3, r3, #6
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10d      	bne.n	8001176 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800115a:	7d7b      	ldrb	r3, [r7, #21]
 800115c:	461a      	mov	r2, r3
 800115e:	7d3b      	ldrb	r3, [r7, #20]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	3301      	adds	r3, #1
 800116a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800116c:	8bfb      	ldrh	r3, [r7, #30]
 800116e:	029a      	lsls	r2, r3, #10
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e02d      	b.n	80011d2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001176:	7c7b      	ldrb	r3, [r7, #17]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	b2da      	uxtb	r2, r3
 800117e:	7dbb      	ldrb	r3, [r7, #22]
 8001180:	09db      	lsrs	r3, r3, #7
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	7d7b      	ldrb	r3, [r7, #21]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0306 	and.w	r3, r3, #6
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3302      	adds	r3, #2
 800119a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800119e:	7d3b      	ldrb	r3, [r7, #20]
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	7cfb      	ldrb	r3, [r7, #19]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	7cbb      	ldrb	r3, [r7, #18]
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3301      	adds	r3, #1
 80011c2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011c4:	8bfa      	ldrh	r2, [r7, #30]
 80011c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011ca:	3b09      	subs	r3, #9
 80011cc:	409a      	lsls	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80011d8:	e056      	b.n	8001288 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011e8:	e055      	b.n	8001296 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011ea:	f7ff fc13 	bl	8000a14 <SD_ReadyWait>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2bff      	cmp	r3, #255	@ 0xff
 80011f2:	d14b      	bne.n	800128c <SD_disk_ioctl+0x230>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011fa:	e047      	b.n	800128c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011fc:	2100      	movs	r1, #0
 80011fe:	2049      	movs	r0, #73	@ 0x49
 8001200:	f7ff fced 	bl	8000bde <SD_SendCmd>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d142      	bne.n	8001290 <SD_disk_ioctl+0x234>
 800120a:	2110      	movs	r1, #16
 800120c:	6a38      	ldr	r0, [r7, #32]
 800120e:	f7ff fc75 	bl	8000afc <SD_RxDataBlock>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d03b      	beq.n	8001290 <SD_disk_ioctl+0x234>
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800121e:	e037      	b.n	8001290 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001220:	2100      	movs	r1, #0
 8001222:	204a      	movs	r0, #74	@ 0x4a
 8001224:	f7ff fcdb 	bl	8000bde <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d132      	bne.n	8001294 <SD_disk_ioctl+0x238>
 800122e:	2110      	movs	r1, #16
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f7ff fc63 	bl	8000afc <SD_RxDataBlock>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02b      	beq.n	8001294 <SD_disk_ioctl+0x238>
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001242:	e027      	b.n	8001294 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001244:	2100      	movs	r1, #0
 8001246:	207a      	movs	r0, #122	@ 0x7a
 8001248:	f7ff fcc9 	bl	8000bde <SD_SendCmd>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001252:	2300      	movs	r3, #0
 8001254:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001258:	e00b      	b.n	8001272 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800125a:	6a3c      	ldr	r4, [r7, #32]
 800125c:	1c63      	adds	r3, r4, #1
 800125e:	623b      	str	r3, [r7, #32]
 8001260:	f7ff fbae 	bl	80009c0 <SPI_RxByte>
 8001264:	4603      	mov	r3, r0
 8001266:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800126c:	3301      	adds	r3, #1
 800126e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001272:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001276:	2b03      	cmp	r3, #3
 8001278:	d9ef      	bls.n	800125a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001280:	2304      	movs	r3, #4
 8001282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001286:	e006      	b.n	8001296 <SD_disk_ioctl+0x23a>
			break;
 8001288:	bf00      	nop
 800128a:	e004      	b.n	8001296 <SD_disk_ioctl+0x23a>
			break;
 800128c:	bf00      	nop
 800128e:	e002      	b.n	8001296 <SD_disk_ioctl+0x23a>
			break;
 8001290:	bf00      	nop
 8001292:	e000      	b.n	8001296 <SD_disk_ioctl+0x23a>
			break;
 8001294:	bf00      	nop
		}

		DESELECT();
 8001296:	f7ff fb51 	bl	800093c <DESELECT>
		SPI_RxByte();
 800129a:	f7ff fb91 	bl	80009c0 <SPI_RxByte>
	}

	return res;
 800129e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	372c      	adds	r7, #44	@ 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000

080012b0 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	4878      	ldr	r0, [pc, #480]	@ (800149c <LCD_Init+0x1ec>)
 80012ba:	f004 fe53 	bl	8005f64 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 80012be:	2201      	movs	r2, #1
 80012c0:	2113      	movs	r1, #19
 80012c2:	4877      	ldr	r0, [pc, #476]	@ (80014a0 <LCD_Init+0x1f0>)
 80012c4:	f004 fe4e 	bl	8005f64 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2102      	movs	r1, #2
 80012cc:	4875      	ldr	r0, [pc, #468]	@ (80014a4 <LCD_Init+0x1f4>)
 80012ce:	f004 fe49 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012d2:	2005      	movs	r0, #5
 80012d4:	f004 fade 	bl	8005894 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	4871      	ldr	r0, [pc, #452]	@ (80014a4 <LCD_Init+0x1f4>)
 80012de:	f004 fe41 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80012e2:	2014      	movs	r0, #20
 80012e4:	f004 fad6 	bl	8005894 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2102      	movs	r1, #2
 80012ec:	486d      	ldr	r0, [pc, #436]	@ (80014a4 <LCD_Init+0x1f4>)
 80012ee:	f004 fe39 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80012f2:	2096      	movs	r0, #150	@ 0x96
 80012f4:	f004 face 	bl	8005894 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	4867      	ldr	r0, [pc, #412]	@ (800149c <LCD_Init+0x1ec>)
 80012fe:	f004 fe31 	bl	8005f64 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8001302:	20e9      	movs	r0, #233	@ 0xe9
 8001304:	f000 f8d0 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x20);
 8001308:	2020      	movs	r0, #32
 800130a:	f000 f973 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800130e:	2011      	movs	r0, #17
 8001310:	f000 f8ca 	bl	80014a8 <LCD_CMD>
	HAL_Delay(100);
 8001314:	2064      	movs	r0, #100	@ 0x64
 8001316:	f004 fabd 	bl	8005894 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800131a:	20d1      	movs	r0, #209	@ 0xd1
 800131c:	f000 f8c4 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x00);
 8001320:	2000      	movs	r0, #0
 8001322:	f000 f967 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x71);
 8001326:	2071      	movs	r0, #113	@ 0x71
 8001328:	f000 f964 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x19);
 800132c:	2019      	movs	r0, #25
 800132e:	f000 f961 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8001332:	20d0      	movs	r0, #208	@ 0xd0
 8001334:	f000 f8b8 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x07);
 8001338:	2007      	movs	r0, #7
 800133a:	f000 f95b 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x01);
 800133e:	2001      	movs	r0, #1
 8001340:	f000 f958 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x08);
 8001344:	2008      	movs	r0, #8
 8001346:	f000 f955 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800134a:	2036      	movs	r0, #54	@ 0x36
 800134c:	f000 f8ac 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8001350:	20e8      	movs	r0, #232	@ 0xe8
 8001352:	f000 f94f 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8001356:	203a      	movs	r0, #58	@ 0x3a
 8001358:	f000 f8a6 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 800135c:	2005      	movs	r0, #5
 800135e:	f000 f949 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8001362:	20c1      	movs	r0, #193	@ 0xc1
 8001364:	f000 f8a0 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x10);
 8001368:	2010      	movs	r0, #16
 800136a:	f000 f943 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x10);
 800136e:	2010      	movs	r0, #16
 8001370:	f000 f940 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x02);
 8001374:	2002      	movs	r0, #2
 8001376:	f000 f93d 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x02);
 800137a:	2002      	movs	r0, #2
 800137c:	f000 f93a 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8001380:	20c0      	movs	r0, #192	@ 0xc0
 8001382:	f000 f891 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x00);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f934 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x35);
 800138c:	2035      	movs	r0, #53	@ 0x35
 800138e:	f000 f931 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x00);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f92e 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x00);
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f92b 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x01);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f928 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x02);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f000 f925 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80013aa:	20c5      	movs	r0, #197	@ 0xc5
 80013ac:	f000 f87c 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80013b0:	2004      	movs	r0, #4
 80013b2:	f000 f91f 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80013b6:	20d2      	movs	r0, #210	@ 0xd2
 80013b8:	f000 f876 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x01);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 f919 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x44);
 80013c2:	2044      	movs	r0, #68	@ 0x44
 80013c4:	f000 f916 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 80013c8:	20c8      	movs	r0, #200	@ 0xc8
 80013ca:	f000 f86d 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x04);
 80013ce:	2004      	movs	r0, #4
 80013d0:	f000 f910 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x67);
 80013d4:	2067      	movs	r0, #103	@ 0x67
 80013d6:	f000 f90d 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x35);
 80013da:	2035      	movs	r0, #53	@ 0x35
 80013dc:	f000 f90a 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x04);
 80013e0:	2004      	movs	r0, #4
 80013e2:	f000 f907 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x08);
 80013e6:	2008      	movs	r0, #8
 80013e8:	f000 f904 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x06);
 80013ec:	2006      	movs	r0, #6
 80013ee:	f000 f901 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x24);
 80013f2:	2024      	movs	r0, #36	@ 0x24
 80013f4:	f000 f8fe 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x01);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f000 f8fb 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x37);
 80013fe:	2037      	movs	r0, #55	@ 0x37
 8001400:	f000 f8f8 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x40);
 8001404:	2040      	movs	r0, #64	@ 0x40
 8001406:	f000 f8f5 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x03);
 800140a:	2003      	movs	r0, #3
 800140c:	f000 f8f2 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x10);
 8001410:	2010      	movs	r0, #16
 8001412:	f000 f8ef 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x08);
 8001416:	2008      	movs	r0, #8
 8001418:	f000 f8ec 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x80);
 800141c:	2080      	movs	r0, #128	@ 0x80
 800141e:	f000 f8e9 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f8e6 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8001428:	202a      	movs	r0, #42	@ 0x2a
 800142a:	f000 f83d 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f8e0 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x00);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f8dd 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x01);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 f8da 	bl	80015f4 <LCD_DATA>
	//LCD_DATA(0x3F);
	LCD_DATA(0xEF);
 8001440:	20ef      	movs	r0, #239	@ 0xef
 8001442:	f000 f8d7 	bl	80015f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8001446:	202b      	movs	r0, #43	@ 0x2b
 8001448:	f000 f82e 	bl	80014a8 <LCD_CMD>
	LCD_DATA(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 f8d1 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x00);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f8ce 	bl	80015f4 <LCD_DATA>
	LCD_DATA(0x01);
 8001458:	2001      	movs	r0, #1
 800145a:	f000 f8cb 	bl	80015f4 <LCD_DATA>
	//LCD_DATA(0xE0);
	LCD_DATA(0x3F);
 800145e:	203f      	movs	r0, #63	@ 0x3f
 8001460:	f000 f8c8 	bl	80015f4 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001464:	2029      	movs	r0, #41	@ 0x29
 8001466:	f000 f81f 	bl	80014a8 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800146a:	202c      	movs	r0, #44	@ 0x2c
 800146c:	f000 f81c 	bl	80014a8 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001470:	2020      	movs	r0, #32
 8001472:	f000 f819 	bl	80014a8 <LCD_CMD>
	HAL_Delay(120);
 8001476:	2078      	movs	r0, #120	@ 0x78
 8001478:	f004 fa0c 	bl	8005894 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 800147c:	2011      	movs	r0, #17
 800147e:	f000 f813 	bl	80014a8 <LCD_CMD>
	HAL_Delay(120);
 8001482:	2078      	movs	r0, #120	@ 0x78
 8001484:	f004 fa06 	bl	8005894 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8001488:	2029      	movs	r0, #41	@ 0x29
 800148a:	f000 f80d 	bl	80014a8 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2101      	movs	r1, #1
 8001492:	4802      	ldr	r0, [pc, #8]	@ (800149c <LCD_Init+0x1ec>)
 8001494:	f004 fd66 	bl	8005f64 <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020800 	.word	0x40020800

080014a8 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2110      	movs	r1, #16
 80014b6:	484c      	ldr	r0, [pc, #304]	@ (80015e8 <LCD_CMD+0x140>)
 80014b8:	f004 fd54 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	4849      	ldr	r0, [pc, #292]	@ (80015e8 <LCD_CMD+0x140>)
 80014c2:	f004 fd4f 	bl	8005f64 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d6:	4844      	ldr	r0, [pc, #272]	@ (80015e8 <LCD_CMD+0x140>)
 80014d8:	f004 fd44 	bl	8005f64 <HAL_GPIO_WritePin>
 80014dc:	e005      	b.n	80014ea <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e4:	4840      	ldr	r0, [pc, #256]	@ (80015e8 <LCD_CMD+0x140>)
 80014e6:	f004 fd3d 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2180      	movs	r1, #128	@ 0x80
 80014f8:	483c      	ldr	r0, [pc, #240]	@ (80015ec <LCD_CMD+0x144>)
 80014fa:	f004 fd33 	bl	8005f64 <HAL_GPIO_WritePin>
 80014fe:	e004      	b.n	800150a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	4839      	ldr	r0, [pc, #228]	@ (80015ec <LCD_CMD+0x144>)
 8001506:	f004 fd2d 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800151a:	4833      	ldr	r0, [pc, #204]	@ (80015e8 <LCD_CMD+0x140>)
 800151c:	f004 fd22 	bl	8005f64 <HAL_GPIO_WritePin>
 8001520:	e005      	b.n	800152e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001528:	482f      	ldr	r0, [pc, #188]	@ (80015e8 <LCD_CMD+0x140>)
 800152a:	f004 fd1b 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2108      	movs	r1, #8
 800153c:	482c      	ldr	r0, [pc, #176]	@ (80015f0 <LCD_CMD+0x148>)
 800153e:	f004 fd11 	bl	8005f64 <HAL_GPIO_WritePin>
 8001542:	e004      	b.n	800154e <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2108      	movs	r1, #8
 8001548:	4829      	ldr	r0, [pc, #164]	@ (80015f0 <LCD_CMD+0x148>)
 800154a:	f004 fd0b 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2120      	movs	r1, #32
 800155c:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <LCD_CMD+0x148>)
 800155e:	f004 fd01 	bl	8005f64 <HAL_GPIO_WritePin>
 8001562:	e004      	b.n	800156e <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2120      	movs	r1, #32
 8001568:	4821      	ldr	r0, [pc, #132]	@ (80015f0 <LCD_CMD+0x148>)
 800156a:	f004 fcfb 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	481c      	ldr	r0, [pc, #112]	@ (80015f0 <LCD_CMD+0x148>)
 800157e:	f004 fcf1 	bl	8005f64 <HAL_GPIO_WritePin>
 8001582:	e004      	b.n	800158e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4819      	ldr	r0, [pc, #100]	@ (80015f0 <LCD_CMD+0x148>)
 800158a:	f004 fceb 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800159e:	4814      	ldr	r0, [pc, #80]	@ (80015f0 <LCD_CMD+0x148>)
 80015a0:	f004 fce0 	bl	8005f64 <HAL_GPIO_WritePin>
 80015a4:	e005      	b.n	80015b2 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ac:	4810      	ldr	r0, [pc, #64]	@ (80015f0 <LCD_CMD+0x148>)
 80015ae:	f004 fcd9 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da06      	bge.n	80015c8 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c0:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <LCD_CMD+0x140>)
 80015c2:	f004 fccf 	bl	8005f64 <HAL_GPIO_WritePin>
 80015c6:	e005      	b.n	80015d4 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <LCD_CMD+0x140>)
 80015d0:	f004 fcc8 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2102      	movs	r1, #2
 80015d8:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <LCD_CMD+0x140>)
 80015da:	f004 fcc3 	bl	8005f64 <HAL_GPIO_WritePin>

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020400 	.word	0x40020400

080015f4 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2110      	movs	r1, #16
 8001602:	484c      	ldr	r0, [pc, #304]	@ (8001734 <LCD_DATA+0x140>)
 8001604:	f004 fcae 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	4849      	ldr	r0, [pc, #292]	@ (8001734 <LCD_DATA+0x140>)
 800160e:	f004 fca9 	bl	8005f64 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001622:	4844      	ldr	r0, [pc, #272]	@ (8001734 <LCD_DATA+0x140>)
 8001624:	f004 fc9e 	bl	8005f64 <HAL_GPIO_WritePin>
 8001628:	e005      	b.n	8001636 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001630:	4840      	ldr	r0, [pc, #256]	@ (8001734 <LCD_DATA+0x140>)
 8001632:	f004 fc97 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2180      	movs	r1, #128	@ 0x80
 8001644:	483c      	ldr	r0, [pc, #240]	@ (8001738 <LCD_DATA+0x144>)
 8001646:	f004 fc8d 	bl	8005f64 <HAL_GPIO_WritePin>
 800164a:	e004      	b.n	8001656 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	@ 0x80
 8001650:	4839      	ldr	r0, [pc, #228]	@ (8001738 <LCD_DATA+0x144>)
 8001652:	f004 fc87 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001666:	4833      	ldr	r0, [pc, #204]	@ (8001734 <LCD_DATA+0x140>)
 8001668:	f004 fc7c 	bl	8005f64 <HAL_GPIO_WritePin>
 800166c:	e005      	b.n	800167a <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001674:	482f      	ldr	r0, [pc, #188]	@ (8001734 <LCD_DATA+0x140>)
 8001676:	f004 fc75 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2108      	movs	r1, #8
 8001688:	482c      	ldr	r0, [pc, #176]	@ (800173c <LCD_DATA+0x148>)
 800168a:	f004 fc6b 	bl	8005f64 <HAL_GPIO_WritePin>
 800168e:	e004      	b.n	800169a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2108      	movs	r1, #8
 8001694:	4829      	ldr	r0, [pc, #164]	@ (800173c <LCD_DATA+0x148>)
 8001696:	f004 fc65 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2120      	movs	r1, #32
 80016a8:	4824      	ldr	r0, [pc, #144]	@ (800173c <LCD_DATA+0x148>)
 80016aa:	f004 fc5b 	bl	8005f64 <HAL_GPIO_WritePin>
 80016ae:	e004      	b.n	80016ba <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2120      	movs	r1, #32
 80016b4:	4821      	ldr	r0, [pc, #132]	@ (800173c <LCD_DATA+0x148>)
 80016b6:	f004 fc55 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2110      	movs	r1, #16
 80016c8:	481c      	ldr	r0, [pc, #112]	@ (800173c <LCD_DATA+0x148>)
 80016ca:	f004 fc4b 	bl	8005f64 <HAL_GPIO_WritePin>
 80016ce:	e004      	b.n	80016da <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	4819      	ldr	r0, [pc, #100]	@ (800173c <LCD_DATA+0x148>)
 80016d6:	f004 fc45 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ea:	4814      	ldr	r0, [pc, #80]	@ (800173c <LCD_DATA+0x148>)
 80016ec:	f004 fc3a 	bl	8005f64 <HAL_GPIO_WritePin>
 80016f0:	e005      	b.n	80016fe <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016f8:	4810      	ldr	r0, [pc, #64]	@ (800173c <LCD_DATA+0x148>)
 80016fa:	f004 fc33 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	da06      	bge.n	8001714 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170c:	4809      	ldr	r0, [pc, #36]	@ (8001734 <LCD_DATA+0x140>)
 800170e:	f004 fc29 	bl	8005f64 <HAL_GPIO_WritePin>
 8001712:	e005      	b.n	8001720 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171a:	4806      	ldr	r0, [pc, #24]	@ (8001734 <LCD_DATA+0x140>)
 800171c:	f004 fc22 	bl	8005f64 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2102      	movs	r1, #2
 8001724:	4803      	ldr	r0, [pc, #12]	@ (8001734 <LCD_DATA+0x140>)
 8001726:	f004 fc1d 	bl	8005f64 <HAL_GPIO_WritePin>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020000 	.word	0x40020000
 8001738:	40020800 	.word	0x40020800
 800173c:	40020400 	.word	0x40020400

08001740 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 800174e:	202a      	movs	r0, #42	@ 0x2a
 8001750:	f7ff feaa 	bl	80014a8 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff4a 	bl	80015f4 <LCD_DATA>
	LCD_DATA(x1);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff45 	bl	80015f4 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff3f 	bl	80015f4 <LCD_DATA>
	LCD_DATA(x2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff3a 	bl	80015f4 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001780:	202b      	movs	r0, #43	@ 0x2b
 8001782:	f7ff fe91 	bl	80014a8 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <LCD_DATA>
	LCD_DATA(y1);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff2c 	bl	80015f4 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff26 	bl	80015f4 <LCD_DATA>
	LCD_DATA(y2);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff21 	bl	80015f4 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 80017b2:	202c      	movs	r0, #44	@ 0x2c
 80017b4:	f7ff fe78 	bl	80014a8 <LCD_CMD>
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <H_line>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 80017ce:	202c      	movs	r0, #44	@ 0x2c
 80017d0:	f7ff fe6a 	bl	80014a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2110      	movs	r1, #16
 80017d8:	4817      	ldr	r0, [pc, #92]	@ (8001838 <H_line+0x78>)
 80017da:	f004 fbc3 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2101      	movs	r1, #1
 80017e2:	4816      	ldr	r0, [pc, #88]	@ (800183c <H_line+0x7c>)
 80017e4:	f004 fbbe 	bl	8005f64 <HAL_GPIO_WritePin>
	l = l + x;
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff ffa2 	bl	8001740 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e00d      	b.n	800181e <H_line+0x5e>
		LCD_DATA(c >> 8);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fef3 	bl	80015f4 <LCD_DATA>
		LCD_DATA(c);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff feee 	bl	80015f4 <LCD_DATA>
	for (i = 0; i < l; i++) {
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3ed      	bcc.n	8001802 <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2101      	movs	r1, #1
 800182a:	4804      	ldr	r0, [pc, #16]	@ (800183c <H_line+0x7c>)
 800182c:	f004 fb9a 	bl	8005f64 <HAL_GPIO_WritePin>
}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400

08001840 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 800184e:	202c      	movs	r0, #44	@ 0x2c
 8001850:	f7ff fe2a 	bl	80014a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2110      	movs	r1, #16
 8001858:	4817      	ldr	r0, [pc, #92]	@ (80018b8 <V_line+0x78>)
 800185a:	f004 fb83 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4816      	ldr	r0, [pc, #88]	@ (80018bc <V_line+0x7c>)
 8001864:	f004 fb7e 	bl	8005f64 <HAL_GPIO_WritePin>
	l = l + y;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff ff62 	bl	8001740 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00d      	b.n	800189e <V_line+0x5e>
		LCD_DATA(c >> 8);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff feb3 	bl	80015f4 <LCD_DATA>
		LCD_DATA(c);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff feae 	bl	80015f4 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d9ed      	bls.n	8001882 <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	4804      	ldr	r0, [pc, #16]	@ (80018bc <V_line+0x7c>)
 80018ac:	f004 fb5a 	bl	8005f64 <HAL_GPIO_WritePin>
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400

080018c0 <Rect>:
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
	H_line(x, y, w, c);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff ff73 	bl	80017c0 <H_line>
	H_line(x, y + h, w, c);
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	18d1      	adds	r1, r2, r3
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff ff6b 	bl	80017c0 <H_line>
	V_line(x, y, h, c);
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff ffa5 	bl	8001840 <V_line>
	V_line(x + w, y, h, c);
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	18d0      	adds	r0, r2, r3
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	f7ff ff9d 	bl	8001840 <V_line>
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 800191e:	202c      	movs	r0, #44	@ 0x2c
 8001920:	f7ff fdc2 	bl	80014a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2110      	movs	r1, #16
 8001928:	4824      	ldr	r0, [pc, #144]	@ (80019bc <FillRect+0xac>)
 800192a:	f004 fb1b 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2101      	movs	r1, #1
 8001932:	4823      	ldr	r0, [pc, #140]	@ (80019c0 <FillRect+0xb0>)
 8001934:	f004 fb16 	bl	8005f64 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3b01      	subs	r3, #1
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fef4 	bl	8001740 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	3b01      	subs	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	e01a      	b.n	80019a2 <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	e010      	b.n	8001994 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8001972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe3b 	bl	80015f4 <LCD_DATA>
			LCD_DATA(c);
 800197e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fe36 	bl	80015f4 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	3b02      	subs	r3, #2
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8ea      	bhi.n	8001972 <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	3301      	adds	r3, #1
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d8e0      	bhi.n	800196c <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2101      	movs	r1, #1
 80019ae:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <FillRect+0xb0>)
 80019b0:	f004 fad8 	bl	8005f64 <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	@ 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400

080019c4 <LCD_Bitmap>:
	}
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned char bitmap[]) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2C); // write_memory_start
 80019d2:	202c      	movs	r0, #44	@ 0x2c
 80019d4:	f7ff fd68 	bl	80014a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2110      	movs	r1, #16
 80019dc:	4822      	ldr	r0, [pc, #136]	@ (8001a68 <LCD_Bitmap+0xa4>)
 80019de:	f004 fac1 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
 80019e6:	4821      	ldr	r0, [pc, #132]	@ (8001a6c <LCD_Bitmap+0xa8>)
 80019e8:	f004 fabc 	bl	8005f64 <HAL_GPIO_WritePin>

	unsigned int k = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
	SetWindows(x, y, x + width - 1, y + height - 1);
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	3b01      	subs	r3, #1
 8001a00:	460a      	mov	r2, r1
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f7ff fe9b 	bl	8001740 <SetWindows>

	// Intercambiar el recorrido de 'i' y 'j' para ajustar la orientación horizontal
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	e01e      	b.n	8001a4e <LCD_Bitmap+0x8a>
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e014      	b.n	8001a40 <LCD_Bitmap+0x7c>
			LCD_DATA(bitmap[k]);
 8001a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fde8 	bl	80015f4 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3301      	adds	r3, #1
 8001a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fde0 	bl	80015f4 <LCD_DATA>
			k += 2;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	3302      	adds	r3, #2
 8001a38:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8e6      	bhi.n	8001a16 <LCD_Bitmap+0x52>
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d8dc      	bhi.n	8001a10 <LCD_Bitmap+0x4c>
		}
	}

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <LCD_Bitmap+0xa8>)
 8001a5c:	f004 fa82 	bl	8005f64 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400

08001a70 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001a7e:	202c      	movs	r0, #44	@ 0x2c
 8001a80:	f7ff fd12 	bl	80014a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	484d      	ldr	r0, [pc, #308]	@ (8001bc0 <LCD_Sprite+0x150>)
 8001a8a:	f004 fa6b 	bl	8005f64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2101      	movs	r1, #1
 8001a92:	484c      	ldr	r0, [pc, #304]	@ (8001bc4 <LCD_Sprite+0x154>)
 8001a94:	f004 fa66 	bl	8005f64 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f7ff fe44 	bl	8001740 <SetWindows>
	int k = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	613b      	str	r3, [r7, #16]
	if (flip) {
 8001ac6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d03a      	beq.n	8001b44 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ad2:	e032      	b.n	8001b3a <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8001ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	fb03 f202 	mul.w	r2, r3, r2
 8001adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af8:	4413      	add	r3, r2
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b00:	e014      	b.n	8001b2c <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8001b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fd72 	bl	80015f4 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b12:	3301      	adds	r3, #1
 8001b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fd6a 	bl	80015f4 <LCD_DATA>
				k = k - 2;
 8001b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b22:	3b02      	subs	r3, #2
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbe6      	blt.n	8001b02 <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b36:	3301      	adds	r3, #1
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbc8      	blt.n	8001ad4 <LCD_Sprite+0x64>
 8001b42:	e034      	b.n	8001bae <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	e02d      	b.n	8001ba6 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	fb03 f202 	mul.w	r2, r3, r2
 8001b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e014      	b.n	8001b98 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8001b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fd3c 	bl	80015f4 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7e:	3301      	adds	r3, #1
 8001b80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fd34 	bl	80015f4 <LCD_DATA>
				k = k + 2;
 8001b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8e:	3302      	adds	r3, #2
 8001b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbe6      	blt.n	8001b6e <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	6a3a      	ldr	r2, [r7, #32]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbcd      	blt.n	8001b4a <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <LCD_Sprite+0x154>)
 8001bb4:	f004 f9d6 	bl	8005f64 <HAL_GPIO_WritePin>
}
 8001bb8:	bf00      	nop
 8001bba:	3730      	adds	r7, #48	@ 0x30
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <transmit_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void transmit_uart(char *string){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint8_t len=strlen(string);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7fe fb19 	bl	8000208 <strlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, (uint8_t*)string, len, 200);
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	23c8      	movs	r3, #200	@ 0xc8
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <transmit_uart+0x28>)
 8001be4:	f005 fbe2 	bl	80073ac <HAL_UART_Transmit>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20017b98 	.word	0x20017b98

08001bf4 <load_image_from_sd_to_play>:

// Función para leer una imagen desde la SD y almacenarla en la variable play
int load_image_from_sd_to_play(const char* filename) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c00:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;

    fres = f_mount(&fs, "/", 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	4936      	ldr	r1, [pc, #216]	@ (8001ce0 <load_image_from_sd_to_play+0xec>)
 8001c08:	4836      	ldr	r0, [pc, #216]	@ (8001ce4 <load_image_from_sd_to_play+0xf0>)
 8001c0a:	f008 fe1d 	bl	800a848 <f_mount>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c14:	f102 021f 	add.w	r2, r2, #31
 8001c18:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK){
 8001c1a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c1e:	f103 031f 	add.w	r3, r3, #31
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <load_image_from_sd_to_play+0x3a>
    	transmit_uart("SD MONTADA\n");
 8001c28:	482f      	ldr	r0, [pc, #188]	@ (8001ce8 <load_image_from_sd_to_play+0xf4>)
 8001c2a:	f7ff ffcd 	bl	8001bc8 <transmit_uart>
		transmit_uart("Error al montar la SD\n");
		//free(image_buffer);
		return;
	}*/
    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 8001c2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c32:	4619      	mov	r1, r3
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	3b14      	subs	r3, #20
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f008 fe47 	bl	800a8d4 <f_open>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c4c:	f102 021f 	add.w	r2, r2, #31
 8001c50:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8001c52:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c56:	f103 031f 	add.w	r3, r3, #31
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <load_image_from_sd_to_play+0x76>
       transmit_uart("Error al abrir el archivo en la SD\n");
 8001c60:	4822      	ldr	r0, [pc, #136]	@ (8001cec <load_image_from_sd_to_play+0xf8>)
 8001c62:	f7ff ffb1 	bl	8001bc8 <transmit_uart>
        return 0;  // Error al abrir el archivo
 8001c66:	2300      	movs	r3, #0
 8001c68:	e035      	b.n	8001cd6 <load_image_from_sd_to_play+0xe2>
    }
    transmit_uart("Se abrio el archivo\n");
 8001c6a:	4821      	ldr	r0, [pc, #132]	@ (8001cf0 <load_image_from_sd_to_play+0xfc>)
 8001c6c:	f7ff ffac 	bl	8001bc8 <transmit_uart>
    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, image, 19200, &bytes_read);
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	3b18      	subs	r3, #24
 8001c76:	f107 0020 	add.w	r0, r7, #32
 8001c7a:	3814      	subs	r0, #20
 8001c7c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001c80:	491c      	ldr	r1, [pc, #112]	@ (8001cf4 <load_image_from_sd_to_play+0x100>)
 8001c82:	f008 ffef 	bl	800ac64 <f_read>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c8c:	f102 021f 	add.w	r2, r2, #31
 8001c90:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 8001c92:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c96:	f103 031f 	add.w	r3, r3, #31
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <load_image_from_sd_to_play+0xb8>
 8001ca0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ca4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10a      	bne.n	8001cc2 <load_image_from_sd_to_play+0xce>
       transmit_uart("Error al leer la imagen desde la SD\n");
 8001cac:	4812      	ldr	r0, [pc, #72]	@ (8001cf8 <load_image_from_sd_to_play+0x104>)
 8001cae:	f7ff ff8b 	bl	8001bc8 <transmit_uart>
        f_close(&fil);
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	3b14      	subs	r3, #20
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f009 f9b0 	bl	800b01e <f_close>
        return 0;  // Error al leer el archivo
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e009      	b.n	8001cd6 <load_image_from_sd_to_play+0xe2>
    }

    // Cerrar el archivo
    f_close(&fil);
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	3b14      	subs	r3, #20
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 f9a8 	bl	800b01e <f_close>
    transmit_uart("corre\n");
 8001cce:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <load_image_from_sd_to_play+0x108>)
 8001cd0:	f7ff ff7a 	bl	8001bc8 <transmit_uart>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;  // Éxito
 8001cd4:	2301      	movs	r3, #1
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	0800b328 	.word	0x0800b328
 8001ce4:	20016b18 	.word	0x20016b18
 8001ce8:	0800b32c 	.word	0x0800b32c
 8001cec:	0800b338 	.word	0x0800b338
 8001cf0:	0800b35c 	.word	0x0800b35c
 8001cf4:	20017be0 	.word	0x20017be0
 8001cf8:	0800b374 	.word	0x0800b374
 8001cfc:	0800b39c 	.word	0x0800b39c

08001d00 <animation_e1_control>:


/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d12:	ee17 3a90 	vmov	r3, s15
 8001d16:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d131      	bne.n	8001d94 <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	dd1b      	ble.n	8001d6e <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	dc13      	bgt.n	8001d64 <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbcd 	bl	80004e0 <__aeabi_f2d>
 8001d46:	a316      	add	r3, pc, #88	@ (adr r3, 8001da0 <animation_e1_control+0xa0>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fa6a 	bl	8000224 <__adddf3>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe fc1a 	bl	8000590 <__aeabi_d2f>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 8001d62:	e017      	b.n	8001d94 <animation_e1_control+0x94>
				enemy->animationV=0;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d6c:	e012      	b.n	8001d94 <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbb4 	bl	80004e0 <__aeabi_f2d>
 8001d78:	a309      	add	r3, pc, #36	@ (adr r3, 8001da0 <animation_e1_control+0xa0>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fa51 	bl	8000224 <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe fc01 	bl	8000590 <__aeabi_d2f>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	9999999a 	.word	0x9999999a
 8001da4:	3fb99999 	.word	0x3fb99999

08001da8 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b08b      	sub	sp, #44	@ 0x2c
 8001dac:	af06      	add	r7, sp, #24
 8001dae:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dba:	ee17 3a90 	vmov	r3, s15
 8001dbe:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dca:	ee17 3a90 	vmov	r3, s15
 8001dce:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 80a6 	bne.w	8001f26 <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	f340 80a2 	ble.w	8001f26 <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3b06      	subs	r3, #6
 8001de8:	4618      	mov	r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	3b09      	subs	r3, #9
 8001df0:	4619      	mov	r1, r3
 8001df2:	2300      	movs	r3, #0
 8001df4:	9304      	str	r3, [sp, #16]
 8001df6:	2300      	movs	r3, #0
 8001df8:	9303      	str	r3, [sp, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2310      	movs	r3, #16
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	4b4b      	ldr	r3, [pc, #300]	@ (8001f30 <animation_e1+0x188>)
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2313      	movs	r3, #19
 8001e08:	2210      	movs	r2, #16
 8001e0a:	f7ff fe31 	bl	8001a70 <LCD_Sprite>
		    if (DrawHitbox==1){
 8001e0e:	4b49      	ldr	r3, [pc, #292]	@ (8001f34 <animation_e1+0x18c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d113      	bne.n	8001e3e <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	1ad0      	subs	r0, r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	1ad1      	subs	r1, r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2400      	movs	r4, #0
 8001e38:	9400      	str	r4, [sp, #0]
 8001e3a:	f7ff fd41 	bl	80018c0 <Rect>
		    }
		    if (DrawHitbox==2){
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <animation_e1+0x18c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d12b      	bne.n	8001e9e <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6998      	ldr	r0, [r3, #24]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2301      	movs	r3, #1
 8001e56:	2201      	movs	r2, #1
 8001e58:	f7ff fd5a 	bl	8001910 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69d8      	ldr	r0, [r3, #28]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f7ff fd4f 	bl	8001910 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a19      	ldr	r1, [r3, #32]
 8001e7a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	2201      	movs	r2, #1
 8001e84:	f7ff fd44 	bl	8001910 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e90:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2301      	movs	r3, #1
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f7ff fd39 	bl	8001910 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001e9e:	4b25      	ldr	r3, [pc, #148]	@ (8001f34 <animation_e1+0x18c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d13f      	bne.n	8001f26 <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	1ad0      	subs	r0, r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	1ad1      	subs	r1, r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2400      	movs	r4, #0
 8001ec8:	9400      	str	r4, [sp, #0]
 8001eca:	f7ff fcf9 	bl	80018c0 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6998      	ldr	r0, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6859      	ldr	r1, [r3, #4]
 8001ed6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f7ff fd16 	bl	8001910 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69d8      	ldr	r0, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f7ff fd0b 	bl	8001910 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a19      	ldr	r1, [r3, #32]
 8001f02:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f7ff fd00 	bl	8001910 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f18:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	2201      	movs	r2, #1
 8001f22:	f7ff fcf5 	bl	8001910 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000b88c 	.word	0x2000b88c
 8001f34:	2001c9ef 	.word	0x2001c9ef

08001f38 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af06      	add	r7, sp, #24
 8001f3e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4a:	ee17 3a90 	vmov	r3, s15
 8001f4e:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d134      	bne.n	8001fc2 <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b0a      	cmp	r3, #10
 8001f5c:	dc29      	bgt.n	8001fb2 <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3b06      	subs	r3, #6
 8001f64:	4618      	mov	r0, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	3b0c      	subs	r3, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9304      	str	r3, [sp, #16]
 8001f72:	2300      	movs	r3, #0
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	230b      	movs	r3, #11
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <animation_e1_die+0xa0>)
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2319      	movs	r3, #25
 8001f84:	220e      	movs	r2, #14
 8001f86:	f7ff fd73 	bl	8001a70 <LCD_Sprite>
				enemy->animationDie+=0.2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe faa6 	bl	80004e0 <__aeabi_f2d>
 8001f94:	a30e      	add	r3, pc, #56	@ (adr r3, 8001fd0 <animation_e1_die+0x98>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe f943 	bl	8000224 <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe faf3 	bl	8000590 <__aeabi_d2f>
 8001faa:	4602      	mov	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 8001fb0:	e007      	b.n	8001fc2 <animation_e1_die+0x8a>
					enemy->x=5000;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc0:	605a      	str	r2, [r3, #4]
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	9999999a 	.word	0x9999999a
 8001fd4:	3fc99999 	.word	0x3fc99999
 8001fd8:	2000de8c 	.word	0x2000de8c

08001fdc <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b08b      	sub	sp, #44	@ 0x2c
 8001fe0:	af06      	add	r7, sp, #24
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a3a      	ldr	r2, [r7, #32]
 8002000:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002006:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a65      	ldr	r2, [pc, #404]	@ (80021b0 <initEnemy1+0x1d4>)
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a65      	ldr	r2, [pc, #404]	@ (80021b4 <initEnemy1+0x1d8>)
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	1ad2      	subs	r2, r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	441a      	add	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	441a      	add	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3b08      	subs	r3, #8
 8002068:	4618      	mov	r0, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	3b09      	subs	r3, #9
 8002070:	4619      	mov	r1, r3
 8002072:	2300      	movs	r3, #0
 8002074:	9304      	str	r3, [sp, #16]
 8002076:	2300      	movs	r3, #0
 8002078:	9303      	str	r3, [sp, #12]
 800207a:	2300      	movs	r3, #0
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	2310      	movs	r3, #16
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <initEnemy1+0x1dc>)
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2313      	movs	r3, #19
 8002088:	2210      	movs	r2, #16
 800208a:	f7ff fcf1 	bl	8001a70 <LCD_Sprite>

    if (DrawHitbox==1){
 800208e:	4b4b      	ldr	r3, [pc, #300]	@ (80021bc <initEnemy1+0x1e0>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d113      	bne.n	80020be <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	1ad0      	subs	r0, r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	1ad1      	subs	r1, r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2400      	movs	r4, #0
 80020b8:	9400      	str	r4, [sp, #0]
 80020ba:	f7ff fc01 	bl	80018c0 <Rect>
    }
    if (DrawHitbox==2){
 80020be:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <initEnemy1+0x1e0>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d12b      	bne.n	800211e <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6998      	ldr	r0, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2301      	movs	r3, #1
 80020d6:	2201      	movs	r2, #1
 80020d8:	f7ff fc1a 	bl	8001910 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	69d8      	ldr	r0, [r3, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	2201      	movs	r2, #1
 80020ee:	f7ff fc0f 	bl	8001910 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a19      	ldr	r1, [r3, #32]
 80020fa:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	2201      	movs	r2, #1
 8002104:	f7ff fc04 	bl	8001910 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002110:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	2201      	movs	r2, #1
 800211a:	f7ff fbf9 	bl	8001910 <FillRect>
    }
    if (DrawHitbox==3){
 800211e:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <initEnemy1+0x1e0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d13f      	bne.n	80021a6 <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	1ad0      	subs	r0, r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	1ad1      	subs	r1, r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2400      	movs	r4, #0
 8002148:	9400      	str	r4, [sp, #0]
 800214a:	f7ff fbb9 	bl	80018c0 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6998      	ldr	r0, [r3, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2301      	movs	r3, #1
 800215e:	2201      	movs	r2, #1
 8002160:	f7ff fbd6 	bl	8001910 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	69d8      	ldr	r0, [r3, #28]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2301      	movs	r3, #1
 8002174:	2201      	movs	r2, #1
 8002176:	f7ff fbcb 	bl	8001910 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a19      	ldr	r1, [r3, #32]
 8002182:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2301      	movs	r3, #1
 800218a:	2201      	movs	r2, #1
 800218c:	f7ff fbc0 	bl	8001910 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002198:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	2201      	movs	r2, #1
 80021a2:	f7ff fbb5 	bl	8001910 <FillRect>
        }
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40a00000 	.word	0x40a00000
 80021b4:	41400000 	.word	0x41400000
 80021b8:	2000b88c 	.word	0x2000b88c
 80021bc:	2001c9ef 	.word	0x2001c9ef

080021c0 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	f040 8251 	bne.w	800267a <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	f200 824c 	bhi.w	800267a <ColisionPlayer_e1+0x4ba>
 80021e2:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <ColisionPlayer_e1+0x28>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	08002317 	.word	0x08002317
 80021f0:	08002435 	.word	0x08002435
 80021f4:	08002553 	.word	0x08002553
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 80021f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fa:	3b0c      	subs	r3, #12
 80021fc:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	f0c0 8231 	bcc.w	800266c <ColisionPlayer_e1+0x4ac>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	f200 822b 	bhi.w	800266c <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	429a      	cmp	r2, r3
 8002220:	d323      	bcc.n	800226a <ColisionPlayer_e1+0xaa>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	429a      	cmp	r2, r3
 800222c:	d81d      	bhi.n	800226a <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	1d5a      	adds	r2, r3, #5
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2201      	movs	r2, #1
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002266:	2300      	movs	r3, #0
 8002268:	e208      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	429a      	cmp	r2, r3
 8002274:	d323      	bcc.n	80022be <ColisionPlayer_e1+0xfe>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	429a      	cmp	r2, r3
 8002280:	d81d      	bhi.n	80022be <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	1d5a      	adds	r2, r3, #5
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2201      	movs	r2, #1
 8002290:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e1de      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f0c0 81d0 	bcc.w	800266c <ColisionPlayer_e1+0x4ac>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f200 81c9 	bhi.w	800266c <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	1d5a      	adds	r2, r3, #5
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2201      	movs	r2, #1
 80022e8:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	1e5a      	subs	r2, r3, #1
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002312:	2300      	movs	r3, #0
 8002314:	e1b2      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	330c      	adds	r3, #12
 800231a:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	429a      	cmp	r2, r3
 8002324:	f200 81a4 	bhi.w	8002670 <ColisionPlayer_e1+0x4b0>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	429a      	cmp	r2, r3
 8002330:	f0c0 819e 	bcc.w	8002670 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	429a      	cmp	r2, r3
 800233e:	d323      	bcc.n	8002388 <ColisionPlayer_e1+0x1c8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	429a      	cmp	r2, r3
 800234a:	d81d      	bhi.n	8002388 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1f5a      	subs	r2, r3, #5
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2201      	movs	r2, #1
 800235a:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002384:	2300      	movs	r3, #0
 8002386:	e179      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	d323      	bcc.n	80023dc <ColisionPlayer_e1+0x21c>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	429a      	cmp	r2, r3
 800239e:	d81d      	bhi.n	80023dc <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1f5a      	subs	r2, r3, #5
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2201      	movs	r2, #1
 80023ae:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	e14f      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f0c0 8143 	bcc.w	8002670 <ColisionPlayer_e1+0x4b0>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	f200 813c 	bhi.w	8002670 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1f5a      	subs	r2, r3, #5
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2201      	movs	r2, #1
 8002406:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002430:	2300      	movs	r3, #0
 8002432:	e123      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	330c      	adds	r3, #12
 8002438:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a1a      	ldr	r2, [r3, #32]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	429a      	cmp	r2, r3
 8002442:	f200 8117 	bhi.w	8002674 <ColisionPlayer_e1+0x4b4>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	429a      	cmp	r2, r3
 800244e:	f0c0 8111 	bcc.w	8002674 <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d323      	bcc.n	80024a6 <ColisionPlayer_e1+0x2e6>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	429a      	cmp	r2, r3
 8002468:	d81d      	bhi.n	80024a6 <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	1f5a      	subs	r2, r3, #5
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2201      	movs	r2, #1
 8002478:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e0ea      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d323      	bcc.n	80024fa <ColisionPlayer_e1+0x33a>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d81d      	bhi.n	80024fa <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	1f5a      	subs	r2, r3, #5
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2201      	movs	r2, #1
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e0c0      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	429a      	cmp	r2, r3
 8002504:	f0c0 80b6 	bcc.w	8002674 <ColisionPlayer_e1+0x4b4>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	f200 80af 	bhi.w	8002674 <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	1f5a      	subs	r2, r3, #5
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2201      	movs	r2, #1
 8002524:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	1e5a      	subs	r2, r3, #1
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800254e:	2300      	movs	r3, #0
 8002550:	e094      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3b0c      	subs	r3, #12
 8002556:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	429a      	cmp	r2, r3
 8002560:	f0c0 808a 	bcc.w	8002678 <ColisionPlayer_e1+0x4b8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	429a      	cmp	r2, r3
 800256c:	f200 8084 	bhi.w	8002678 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	429a      	cmp	r2, r3
 800257a:	d323      	bcc.n	80025c4 <ColisionPlayer_e1+0x404>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	429a      	cmp	r2, r3
 8002586:	d81d      	bhi.n	80025c4 <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1d5a      	adds	r2, r3, #5
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2201      	movs	r2, #1
 8002596:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e05b      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d323      	bcc.n	8002618 <ColisionPlayer_e1+0x458>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	429a      	cmp	r2, r3
 80025da:	d81d      	bhi.n	8002618 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1d5a      	adds	r2, r3, #5
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2201      	movs	r2, #1
 80025ea:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002614:	2300      	movs	r3, #0
 8002616:	e031      	b.n	800267c <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	d329      	bcc.n	8002678 <ColisionPlayer_e1+0x4b8>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	d823      	bhi.n	8002678 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1d5a      	adds	r2, r3, #5
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2201      	movs	r2, #1
 800263e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002668:	2300      	movs	r3, #0
 800266a:	e007      	b.n	800267c <ColisionPlayer_e1+0x4bc>
					break;
 800266c:	bf00      	nop
 800266e:	e004      	b.n	800267a <ColisionPlayer_e1+0x4ba>
					break;
 8002670:	bf00      	nop
 8002672:	e002      	b.n	800267a <ColisionPlayer_e1+0x4ba>
					break;
 8002674:	bf00      	nop
 8002676:	e000      	b.n	800267a <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 8002678:	bf00      	nop
			return 1;
			}
	}
	return 1;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	3724      	adds	r7, #36	@ 0x24
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af06      	add	r7, sp, #24
 800268e:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	441a      	add	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	1ad2      	subs	r2, r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	441a      	add	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3b08      	subs	r3, #8
 80026d6:	4618      	mov	r0, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	3b0a      	subs	r3, #10
 80026de:	4619      	mov	r1, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	2300      	movs	r3, #0
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	2304      	movs	r3, #4
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	2305      	movs	r3, #5
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <Hitbox_e2+0x194>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2314      	movs	r3, #20
 80026f6:	2210      	movs	r2, #16
 80026f8:	f7ff f9ba 	bl	8001a70 <LCD_Sprite>

    if (DrawHitbox==1){
 80026fc:	4b48      	ldr	r3, [pc, #288]	@ (8002820 <Hitbox_e2+0x198>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d113      	bne.n	800272c <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	1ad0      	subs	r0, r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	1ad1      	subs	r1, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2400      	movs	r4, #0
 8002726:	9400      	str	r4, [sp, #0]
 8002728:	f7ff f8ca 	bl	80018c0 <Rect>
    }
    if (DrawHitbox==2){
 800272c:	4b3c      	ldr	r3, [pc, #240]	@ (8002820 <Hitbox_e2+0x198>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d12b      	bne.n	800278c <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6998      	ldr	r0, [r3, #24]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	2201      	movs	r2, #1
 8002746:	f7ff f8e3 	bl	8001910 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69d8      	ldr	r0, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2301      	movs	r3, #1
 800275a:	2201      	movs	r2, #1
 800275c:	f7ff f8d8 	bl	8001910 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a19      	ldr	r1, [r3, #32]
 8002768:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	2201      	movs	r2, #1
 8002772:	f7ff f8cd 	bl	8001910 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800277e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	2201      	movs	r2, #1
 8002788:	f7ff f8c2 	bl	8001910 <FillRect>
    }
    if (DrawHitbox==3){
 800278c:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <Hitbox_e2+0x198>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d13f      	bne.n	8002814 <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	1ad0      	subs	r0, r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	1ad1      	subs	r1, r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2400      	movs	r4, #0
 80027b6:	9400      	str	r4, [sp, #0]
 80027b8:	f7ff f882 	bl	80018c0 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6998      	ldr	r0, [r3, #24]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	2201      	movs	r2, #1
 80027ce:	f7ff f89f 	bl	8001910 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69d8      	ldr	r0, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	2201      	movs	r2, #1
 80027e4:	f7ff f894 	bl	8001910 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a19      	ldr	r1, [r3, #32]
 80027f0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	2201      	movs	r2, #1
 80027fa:	f7ff f889 	bl	8001910 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002806:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	2201      	movs	r2, #1
 8002810:	f7ff f87e 	bl	8001910 <FillRect>
        }
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	200016e4 	.word	0x200016e4
 8002820:	2001c9ef 	.word	0x2001c9ef

08002824 <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <initEnemy2+0x6c>)
 8002868:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <initEnemy2+0x70>)
 800286e:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40400000 	.word	0x40400000
 8002894:	40c00000 	.word	0x40c00000

08002898 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8109 	bne.w	8002abe <moveE2+0x226>
		if (enemy->delay==100000){
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028b2:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002ac8 <moveE2+0x230>
 80028b6:	eef4 7a47 	vcmp.f32	s15, s14
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	f040 80ef 	bne.w	8002aa0 <moveE2+0x208>
			switch(enemy->move){
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	f200 80f9 	bhi.w	8002abe <moveE2+0x226>
 80028cc:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <moveE2+0x3c>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	08002955 	.word	0x08002955
 80028dc:	080029c5 	.word	0x080029c5
 80028e0:	08002a35 	.word	0x08002a35
			case 0: //Derecha
				int futureX_D=player->x+50;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3332      	adds	r3, #50	@ 0x32
 80028ea:	60bb      	str	r3, [r7, #8]
				if (futureX_D>player->limitWidth-20){
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	f1a3 0214 	sub.w	r2, r3, #20
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d209      	bcs.n	800290e <moveE2+0x76>
					enemy->move+=1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffc6 	bl	8002898 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 800290c:	e0d7      	b.n	8002abe <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1a3 0008 	sub.w	r0, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f1a3 010a 	sub.w	r1, r3, #10
 800291e:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2314      	movs	r3, #20
 8002926:	2210      	movs	r2, #16
 8002928:	f7fe fff2 	bl	8001910 <FillRect>
					enemy->x=futureX_D;
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fe9b 	bl	8002688 <Hitbox_e2>
				break;
 8002952:	e0b4      	b.n	8002abe <moveE2+0x226>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	3332      	adds	r3, #50	@ 0x32
 800295a:	60fb      	str	r3, [r7, #12]
				if (futureY_A>player->limitHeight-20){
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	f1a3 0214 	sub.w	r2, r3, #20
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	429a      	cmp	r2, r3
 8002968:	d209      	bcs.n	800297e <moveE2+0xe6>
					enemy->move+=1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ff8e 	bl	8002898 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 800297c:	e09f      	b.n	8002abe <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1a3 0008 	sub.w	r0, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f1a3 010a 	sub.w	r1, r3, #10
 800298e:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2314      	movs	r3, #20
 8002996:	2210      	movs	r2, #16
 8002998:	f7fe ffba 	bl	8001910 <FillRect>
					enemy->y=futureY_A;
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fe63 	bl	8002688 <Hitbox_e2>
				break;
 80029c2:	e07c      	b.n	8002abe <moveE2+0x226>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3b32      	subs	r3, #50	@ 0x32
 80029ca:	613b      	str	r3, [r7, #16]
				if (futureX_I<player->limitWidth_i+20){
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	f103 0214 	add.w	r2, r3, #20
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d909      	bls.n	80029ee <moveE2+0x156>
						enemy->move+=1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ff56 	bl	8002898 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 80029ec:	e067      	b.n	8002abe <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1a3 0008 	sub.w	r0, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f1a3 010a 	sub.w	r1, r3, #10
 80029fe:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2314      	movs	r3, #20
 8002a06:	2210      	movs	r2, #16
 8002a08:	f7fe ff82 	bl	8001910 <FillRect>
					enemy->x=futureX_I;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fe2b 	bl	8002688 <Hitbox_e2>
				break;
 8002a32:	e044      	b.n	8002abe <moveE2+0x226>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	3b32      	subs	r3, #50	@ 0x32
 8002a3a:	617b      	str	r3, [r7, #20]
				if (futureY_U>player->limitHeight+20){
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	f103 0214 	add.w	r2, r3, #20
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d209      	bcs.n	8002a5e <moveE2+0x1c6>
					enemy->move+=1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff1e 	bl	8002898 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002a5c:	e02f      	b.n	8002abe <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1a3 0008 	sub.w	r0, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f1a3 010a 	sub.w	r1, r3, #10
 8002a6e:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2314      	movs	r3, #20
 8002a76:	2210      	movs	r2, #16
 8002a78:	f7fe ff4a 	bl	8001910 <FillRect>
					enemy->y=futureY_U;
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff fdf5 	bl	8002688 <Hitbox_e2>
				break;
 8002a9e:	e00e      	b.n	8002abe <moveE2+0x226>
			}
		}else{
			if (enemy->delay==200000){
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002aa6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002acc <moveE2+0x234>
 8002aaa:	eef4 7a47 	vcmp.f32	s15, s14
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d104      	bne.n	8002abe <moveE2+0x226>
				enemy->delay=0;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002abc:	e7ff      	b.n	8002abe <moveE2+0x226>
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	47c35000 	.word	0x47c35000
 8002acc:	48435000 	.word	0x48435000

08002ad0 <E2_Appear>:

void E2_Appear(enemy_type2* enemy){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	@ 0x28
 8002ad4:	af06      	add	r7, sp, #24
 8002ad6:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae2:	ee17 3a90 	vmov	r3, s15
 8002ae6:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d12b      	bne.n	8002b48 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	dc28      	bgt.n	8002b48 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3b08      	subs	r3, #8
 8002afc:	4618      	mov	r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	3b0a      	subs	r3, #10
 8002b04:	4619      	mov	r1, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9303      	str	r3, [sp, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2305      	movs	r3, #5
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <E2_Appear+0x88>)
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2314      	movs	r3, #20
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	f7fe ffa7 	bl	8001a70 <LCD_Sprite>
			enemy->animationV+=0.05;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fcda 	bl	80004e0 <__aeabi_f2d>
 8002b2c:	a308      	add	r3, pc, #32	@ (adr r3, 8002b50 <E2_Appear+0x80>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fb77 	bl	8000224 <__adddf3>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fd fd27 	bl	8000590 <__aeabi_d2f>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	9999999a 	.word	0x9999999a
 8002b54:	3fa99999 	.word	0x3fa99999
 8002b58:	200016e4 	.word	0x200016e4
 8002b5c:	00000000 	.word	0x00000000

08002b60 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af06      	add	r7, sp, #24
 8002b66:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d13b      	bne.n	8002be8 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7a:	ee17 3a90 	vmov	r3, s15
 8002b7e:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d12f      	bne.n	8002be8 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	dc29      	bgt.n	8002be2 <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3b0e      	subs	r3, #14
 8002b94:	4618      	mov	r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	3b0c      	subs	r3, #12
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9304      	str	r3, [sp, #16]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9303      	str	r3, [sp, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	2303      	movs	r3, #3
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <E2_Hurt+0x98>)
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2319      	movs	r3, #25
 8002bb4:	221c      	movs	r2, #28
 8002bb6:	f7fe ff5b 	bl	8001a70 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc8e 	bl	80004e0 <__aeabi_f2d>
 8002bc4:	a30a      	add	r3, pc, #40	@ (adr r3, 8002bf0 <E2_Hurt+0x90>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fb2b 	bl	8000224 <__adddf3>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd fcdb 	bl	8000590 <__aeabi_d2f>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002be0:	e002      	b.n	8002be8 <E2_Hurt+0x88>
					enemy->isHurt=0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	9999999a 	.word	0x9999999a
 8002bf4:	3fa99999 	.word	0x3fa99999
 8002bf8:	20002364 	.word	0x20002364
 8002bfc:	00000000 	.word	0x00000000

08002c00 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af06      	add	r7, sp, #24
 8002c06:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c12:	ee17 3a90 	vmov	r3, s15
 8002c16:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d143      	bne.n	8002ca8 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	dc29      	bgt.n	8002c7a <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3b0c      	subs	r3, #12
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	3b0b      	subs	r3, #11
 8002c34:	4619      	mov	r1, r3
 8002c36:	2300      	movs	r3, #0
 8002c38:	9304      	str	r3, [sp, #16]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9303      	str	r3, [sp, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	9302      	str	r3, [sp, #8]
 8002c42:	2306      	movs	r3, #6
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <E2_Die+0xb8>)
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	221a      	movs	r2, #26
 8002c4e:	f7fe ff0f 	bl	8001a70 <LCD_Sprite>
					enemy->animationDie+=0.2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc42 	bl	80004e0 <__aeabi_f2d>
 8002c5c:	a314      	add	r3, pc, #80	@ (adr r3, 8002cb0 <E2_Die+0xb0>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fadf 	bl	8000224 <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7fd fc8f 	bl	8000590 <__aeabi_d2f>
 8002c72:	4602      	mov	r2, r0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002c78:	e016      	b.n	8002ca8 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1a3 000c 	sub.w	r0, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f1a3 010b 	sub.w	r1, r3, #11
 8002c8a:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2317      	movs	r3, #23
 8002c92:	221a      	movs	r2, #26
 8002c94:	f7fe fe3c 	bl	8001910 <FillRect>
						enemy->x=5000;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	605a      	str	r2, [r3, #4]
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	9999999a 	.word	0x9999999a
 8002cb4:	3fc99999 	.word	0x3fc99999
 8002cb8:	200033cc 	.word	0x200033cc

08002cbc <PlayerHit_E2>:

void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 80f0 	bne.w	8002eb0 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	f200 80eb 	bhi.w	8002eb0 <PlayerHit_E2+0x1f4>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <PlayerHit_E2+0x24>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002dd3 	.word	0x08002dd3
 8002ce8:	08002d63 	.word	0x08002d63
 8002cec:	08002e3b 	.word	0x08002e3b
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	3b0f      	subs	r3, #15
 8002cf6:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	f0c0 80cf 	bcc.w	8002ea2 <PlayerHit_E2+0x1e6>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6a1a      	ldr	r2, [r3, #32]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	f200 80c9 	bhi.w	8002ea2 <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	3b05      	subs	r3, #5
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	f0c0 80c1 	bcc.w	8002ea2 <PlayerHit_E2+0x1e6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	3305      	adds	r3, #5
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	f200 80b9 	bhi.w	8002ea2 <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 80a8 	bne.w	8002ea2 <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002d60:	e09f      	b.n	8002ea2 <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	330f      	adds	r3, #15
 8002d68:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f0c0 8098 	bcc.w	8002ea6 <PlayerHit_E2+0x1ea>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f200 8092 	bhi.w	8002ea6 <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	3b05      	subs	r3, #5
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f0c0 808a 	bcc.w	8002ea6 <PlayerHit_E2+0x1ea>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f200 8082 	bhi.w	8002ea6 <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d171      	bne.n	8002ea6 <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002dd0:	e069      	b.n	8002ea6 <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d362      	bcc.n	8002eaa <PlayerHit_E2+0x1ee>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d85d      	bhi.n	8002eaa <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	3b0f      	subs	r3, #15
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d356      	bcc.n	8002eaa <PlayerHit_E2+0x1ee>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	3314      	adds	r3, #20
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d84f      	bhi.n	8002eaa <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	1e5a      	subs	r2, r3, #1
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13f      	bne.n	8002eaa <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002e38:	e037      	b.n	8002eaa <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3b14      	subs	r3, #20
 8002e40:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d330      	bcc.n	8002eae <PlayerHit_E2+0x1f2>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d82b      	bhi.n	8002eae <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	3b0f      	subs	r3, #15
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d324      	bcc.n	8002eae <PlayerHit_E2+0x1f2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d81d      	bhi.n	8002eae <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	1e5a      	subs	r2, r3, #1
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10d      	bne.n	8002eae <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002ea0:	e005      	b.n	8002eae <PlayerHit_E2+0x1f2>
			break;
 8002ea2:	bf00      	nop
 8002ea4:	e004      	b.n	8002eb0 <PlayerHit_E2+0x1f4>
				break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <PlayerHit_E2+0x1f4>
				break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <PlayerHit_E2+0x1f4>
							break;
 8002eae:	bf00      	nop
						}
		}
	}
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <initEnemy3>:

/* Funciones Enemigo 3 -------------------------------------------------*/
void initEnemy3(enemy_type3* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health, player* player) {
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	601a      	str	r2, [r3, #0]
    enemy->y_eye=startY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
    enemy->y = startY+20;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 0214 	add.w	r2, r3, #20
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
    enemy->height = height;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	611a      	str	r2, [r3, #16]
    enemy->speed=5;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->Place=0;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
    enemy->delay=0;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	651a      	str	r2, [r3, #80]	@ 0x50
    enemy->delay_init=0;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54

    // Inicializar la vida y el estado
    enemy->health = health;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
    enemy->isAlive = 0;  // El enemigo comienza vivo
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationFire=0;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationEye=0;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->isMove=0;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	649a      	str	r2, [r3, #72]	@ 0x48

    //Limites
    enemy->limitwidth=player->limitWidth;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34
    enemy->limitwidth_i=player->limitWidth_i;
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->limitheight_i=18;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2212      	movs	r2, #18
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    enemy->limitheight=220;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	22dc      	movs	r2, #220	@ 0xdc
 8002f40:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <E3_Eye>:

void E3_Eye(enemy_type3* enemy){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	@ 0x28
 8002f54:	af06      	add	r7, sp, #24
 8002f56:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dd55      	ble.n	800300c <E3_Eye+0xbc>
		if (enemy->isMove==0){
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d160      	bne.n	800302a <E3_Eye+0xda>
			enemy->y=enemy->y_eye+20;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f103 0214 	add.w	r2, r3, #20
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]
			int variableEye=enemy->animationEye;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f7e:	ee17 3a90 	vmov	r3, s15
 8002f82:	60fb      	str	r3, [r7, #12]
			if (variableEye<7){
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	dc29      	bgt.n	8002fde <E3_Eye+0x8e>
				LCD_Sprite(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, E3_Eye16x17_7, 7, variableEye, 0, 0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3b08      	subs	r3, #8
 8002f90:	4618      	mov	r0, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	3b08      	subs	r3, #8
 8002f98:	4619      	mov	r1, r3
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9304      	str	r3, [sp, #16]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9303      	str	r3, [sp, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	9302      	str	r3, [sp, #8]
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <E3_Eye+0xf0>)
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2311      	movs	r3, #17
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f7fe fd5d 	bl	8001a70 <LCD_Sprite>
				enemy->animationEye+=0.1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fa90 	bl	80004e0 <__aeabi_f2d>
 8002fc0:	a31d      	add	r3, pc, #116	@ (adr r3, 8003038 <E3_Eye+0xe8>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd f92d 	bl	8000224 <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fadd 	bl	8000590 <__aeabi_d2f>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	} else{
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
	}
}
 8002fdc:	e025      	b.n	800302a <E3_Eye+0xda>
				FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1a3 0008 	sub.w	r0, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f1a3 0108 	sub.w	r1, r3, #8
 8002fee:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2311      	movs	r3, #17
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	f7fe fc8a 	bl	8001910 <FillRect>
				enemy->isMove=1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationFire=0;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800300a:	e00e      	b.n	800302a <E3_Eye+0xda>
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1a3 0008 	sub.w	r0, r3, #8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f1a3 0108 	sub.w	r1, r3, #8
 800301c:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2311      	movs	r3, #17
 8003024:	2210      	movs	r2, #16
 8003026:	f7fe fc73 	bl	8001910 <FillRect>
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	f3af 8000 	nop.w
 8003038:	9999999a 	.word	0x9999999a
 800303c:	3fb99999 	.word	0x3fb99999
 8003040:	20000804 	.word	0x20000804

08003044 <E3_FireMove>:

void E3_FireMove(enemy_type3* enemy,player* player){
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b08b      	sub	sp, #44	@ 0x2c
 8003048:	af06      	add	r7, sp, #24
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
	if (enemy->health>0){
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	2b00      	cmp	r3, #0
 8003054:	f340 80ea 	ble.w	800322c <E3_FireMove+0x1e8>
		if (enemy->isMove==1){
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305c:	2b01      	cmp	r3, #1
 800305e:	f040 80e5 	bne.w	800322c <E3_FireMove+0x1e8>
			int FutureY=enemy->y+enemy->speed;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
			if (FutureY>=220){
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2bdb      	cmp	r3, #219	@ 0xdb
 8003072:	dd23      	ble.n	80030bc <E3_FireMove+0x78>
				enemy->isMove=0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationEye=0;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	62da      	str	r2, [r3, #44]	@ 0x2c
				enemy->health-=1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	1e5a      	subs	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
				enemy->Place+=1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	64da      	str	r2, [r3, #76]	@ 0x4c
				enemy->delay=0;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	651a      	str	r2, [r3, #80]	@ 0x50
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1a3 0008 	sub.w	r0, r3, #8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f1a3 0108 	sub.w	r1, r3, #8
 80030ac:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2310      	movs	r3, #16
 80030b4:	2210      	movs	r2, #16
 80030b6:	f7fe fc2b 	bl	8001910 <FillRect>
				}
			}
		}

	}
}
 80030ba:	e0b7      	b.n	800322c <E3_FireMove+0x1e8>
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f1a3 0008 	sub.w	r0, r3, #8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f1a3 0108 	sub.w	r1, r3, #8
 80030cc:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2310      	movs	r3, #16
 80030d4:	2210      	movs	r2, #16
 80030d6:	f7fe fc1b 	bl	8001910 <FillRect>
				int animationFire=enemy->animationFire;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80030e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	60bb      	str	r3, [r7, #8]
				enemy->y=FutureY;
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	605a      	str	r2, [r3, #4]
				LCD_Sprite(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, E3_Fire16x16_4, 4, animationFire, 0, 0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b08      	subs	r3, #8
 80030f6:	4618      	mov	r0, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	3b08      	subs	r3, #8
 80030fe:	4619      	mov	r1, r3
 8003100:	2300      	movs	r3, #0
 8003102:	9304      	str	r3, [sp, #16]
 8003104:	2300      	movs	r3, #0
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	9302      	str	r3, [sp, #8]
 800310c:	2304      	movs	r3, #4
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	4b48      	ldr	r3, [pc, #288]	@ (8003234 <E3_FireMove+0x1f0>)
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2310      	movs	r3, #16
 8003116:	2210      	movs	r2, #16
 8003118:	f7fe fcaa 	bl	8001a70 <LCD_Sprite>
				if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	429a      	cmp	r2, r3
 8003126:	f0c0 8081 	bcc.w	800322c <E3_FireMove+0x1e8>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	429a      	cmp	r2, r3
 8003134:	d87a      	bhi.n	800322c <E3_FireMove+0x1e8>
					if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	429a      	cmp	r2, r3
 8003140:	d374      	bcc.n	800322c <E3_FireMove+0x1e8>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	429a      	cmp	r2, r3
 800314c:	d86e      	bhi.n	800322c <E3_FireMove+0x1e8>
						player->y=player->y-5;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	1f5a      	subs	r2, r3, #5
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	605a      	str	r2, [r3, #4]
						player->direction=0;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	621a      	str	r2, [r3, #32]
						player->IsDamage=1;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c
						player->animationDamage=0;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	661a      	str	r2, [r3, #96]	@ 0x60
						player->life-=1;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	615a      	str	r2, [r3, #20]
						FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8003176:	4b30      	ldr	r3, [pc, #192]	@ (8003238 <E3_FireMove+0x1f4>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <E3_FireMove+0x1f4>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	1c58      	adds	r0, r3, #1
 8003184:	4b2c      	ldr	r3, [pc, #176]	@ (8003238 <E3_FireMove+0x1f4>)
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <E3_FireMove+0x1f4>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	1c59      	adds	r1, r3, #1
 8003192:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <E3_FireMove+0x1f4>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <E3_FireMove+0x1f4>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80031a2:	9400      	str	r4, [sp, #0]
 80031a4:	f7fe fbb4 	bl	8001910 <FillRect>
						if (player->life==0){
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11f      	bne.n	80031f0 <E3_FireMove+0x1ac>
							player->isAlive=0;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
							player->animationDie=0;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	669a      	str	r2, [r3, #104]	@ 0x68
							FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <E3_FireMove+0x1f4>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <E3_FireMove+0x1f4>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	1c58      	adds	r0, r3, #1
 80031cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <E3_FireMove+0x1f4>)
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <E3_FireMove+0x1f4>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	1c59      	adds	r1, r3, #1
 80031da:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <E3_FireMove+0x1f4>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <E3_FireMove+0x1f4>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80031ea:	9400      	str	r4, [sp, #0]
 80031ec:	f7fe fb90 	bl	8001910 <FillRect>
						FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1a3 0008 	sub.w	r0, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f1a3 0108 	sub.w	r1, r3, #8
 8003200:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2310      	movs	r3, #16
 8003208:	2210      	movs	r2, #16
 800320a:	f7fe fb81 	bl	8001910 <FillRect>
						enemy->isMove=0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	649a      	str	r2, [r3, #72]	@ 0x48
						enemy->animationEye=0;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->Place+=1;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	64da      	str	r2, [r3, #76]	@ 0x4c
						enemy->delay=0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	20000004 	.word	0x20000004
 8003238:	2001c760 	.word	0x2001c760
 800323c:	00000000 	.word	0x00000000

08003240 <E3_FireAnimation>:

void E3_FireAnimation(enemy_type3* enemy){
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	if (enemy->health>0 && enemy->isMove){
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	2b00      	cmp	r3, #0
 800324e:	dd25      	ble.n	800329c <E3_FireAnimation+0x5c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <E3_FireAnimation+0x5c>
		enemy->animationFire+=0.2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f93f 	bl	80004e0 <__aeabi_f2d>
 8003262:	a311      	add	r3, pc, #68	@ (adr r3, 80032a8 <E3_FireAnimation+0x68>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f7fc ffdc 	bl	8000224 <__adddf3>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	f7fd f98c 	bl	8000590 <__aeabi_d2f>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (enemy->animationFire>=4){
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003284:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	da00      	bge.n	8003294 <E3_FireAnimation+0x54>
			enemy->animationFire=0;
		}
	}
}
 8003292:	e003      	b.n	800329c <E3_FireAnimation+0x5c>
			enemy->animationFire=0;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f3af 8000 	nop.w
 80032a8:	9999999a 	.word	0x9999999a
 80032ac:	3fc99999 	.word	0x3fc99999

080032b0 <E3_Hitbox>:

void E3_Hitbox(enemy_type3* enemy){
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	441a      	add	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24

		if (DrawHitbox==1){
 80032f8:	4b47      	ldr	r3, [pc, #284]	@ (8003418 <E3_Hitbox+0x168>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d113      	bne.n	8003328 <E3_Hitbox+0x78>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	1ad0      	subs	r0, r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	1ad1      	subs	r1, r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2400      	movs	r4, #0
 8003322:	9400      	str	r4, [sp, #0]
 8003324:	f7fe facc 	bl	80018c0 <Rect>
	    }
	    if (DrawHitbox==2){
 8003328:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <E3_Hitbox+0x168>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d12b      	bne.n	8003388 <E3_Hitbox+0xd8>
	    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6998      	ldr	r0, [r3, #24]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2301      	movs	r3, #1
 8003340:	2201      	movs	r2, #1
 8003342:	f7fe fae5 	bl	8001910 <FillRect>
	    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69d8      	ldr	r0, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2301      	movs	r3, #1
 8003356:	2201      	movs	r2, #1
 8003358:	f7fe fada 	bl	8001910 <FillRect>
	    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a19      	ldr	r1, [r3, #32]
 8003364:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	2201      	movs	r2, #1
 800336e:	f7fe facf 	bl	8001910 <FillRect>
	    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800337a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2301      	movs	r3, #1
 8003382:	2201      	movs	r2, #1
 8003384:	f7fe fac4 	bl	8001910 <FillRect>
	    }
	    if (DrawHitbox==3){
 8003388:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <E3_Hitbox+0x168>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d13f      	bne.n	8003410 <E3_Hitbox+0x160>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	1ad0      	subs	r0, r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	1ad1      	subs	r1, r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2400      	movs	r4, #0
 80033b2:	9400      	str	r4, [sp, #0]
 80033b4:	f7fe fa84 	bl	80018c0 <Rect>
			FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6998      	ldr	r0, [r3, #24]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2301      	movs	r3, #1
 80033c8:	2201      	movs	r2, #1
 80033ca:	f7fe faa1 	bl	8001910 <FillRect>
			FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69d8      	ldr	r0, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2301      	movs	r3, #1
 80033de:	2201      	movs	r2, #1
 80033e0:	f7fe fa96 	bl	8001910 <FillRect>
			FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a19      	ldr	r1, [r3, #32]
 80033ec:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2301      	movs	r3, #1
 80033f4:	2201      	movs	r2, #1
 80033f6:	f7fe fa8b 	bl	8001910 <FillRect>
			FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003402:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2301      	movs	r3, #1
 800340a:	2201      	movs	r2, #1
 800340c:	f7fe fa80 	bl	8001910 <FillRect>
	        }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	2001c9ef 	.word	0x2001c9ef

0800341c <E3_MoveX>:

void E3_MoveX(enemy_type3* enemy){
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	if (enemy->delay==0){
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003428:	2b00      	cmp	r3, #0
 800342a:	d167      	bne.n	80034fc <E3_MoveX+0xe0>
	int FutureX;
	enemy->delay=1;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	651a      	str	r2, [r3, #80]	@ 0x50
	switch (enemy->Place){
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	2b04      	cmp	r3, #4
 8003438:	d860      	bhi.n	80034fc <E3_MoveX+0xe0>
 800343a:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <E3_MoveX+0x24>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003455 	.word	0x08003455
 8003444:	0800347d 	.word	0x0800347d
 8003448:	080034a5 	.word	0x080034a5
 800344c:	080034cd 	.word	0x080034cd
 8003450:	080034f5 	.word	0x080034f5
		case 0:
			FutureX=enemy->x+40;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	429a      	cmp	r2, r3
 8003464:	d806      	bhi.n	8003474 <E3_MoveX+0x58>
				enemy->x=enemy->limitwidth_i+35;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8003472:	e043      	b.n	80034fc <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
			break;
 800347a:	e03f      	b.n	80034fc <E3_MoveX+0xe0>

		case 1:
			FutureX=enemy->x-20;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3b14      	subs	r3, #20
 8003482:	60fb      	str	r3, [r7, #12]
			if (FutureX<=enemy->limitwidth_i){
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	429a      	cmp	r2, r3
 800348c:	d306      	bcc.n	800349c <E3_MoveX+0x80>
				enemy->x=enemy->limitwidth-35;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 800349a:	e02f      	b.n	80034fc <E3_MoveX+0xe0>
				enemy->x=FutureX;
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
			break;
 80034a2:	e02b      	b.n	80034fc <E3_MoveX+0xe0>
		case 2:
			FutureX=enemy->x+50;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3332      	adds	r3, #50	@ 0x32
 80034aa:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d806      	bhi.n	80034c4 <E3_MoveX+0xa8>
				enemy->x=enemy->limitwidth_i+50;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80034c2:	e01b      	b.n	80034fc <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
			break;
 80034ca:	e017      	b.n	80034fc <E3_MoveX+0xe0>
		case 3:
					FutureX=enemy->x-50;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3b32      	subs	r3, #50	@ 0x32
 80034d2:	60fb      	str	r3, [r7, #12]
					if (FutureX<=enemy->limitwidth_i){
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d306      	bcc.n	80034ec <E3_MoveX+0xd0>
						enemy->x=enemy->limitwidth-35;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e2:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]

					} else{
						enemy->x=FutureX;
					}
					break;
 80034ea:	e007      	b.n	80034fc <E3_MoveX+0xe0>
						enemy->x=FutureX;
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
					break;
 80034f2:	e003      	b.n	80034fc <E3_MoveX+0xe0>
		case 4:
			enemy->Place=0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
}
 80034fa:	e7ff      	b.n	80034fc <E3_MoveX+0xe0>
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <initPlayer>:

/* Funciones Jugador ---------------------------------------------------*/
 void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af06      	add	r7, sp, #24
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	601a      	str	r2, [r3, #0]
    player->y = startY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	611a      	str	r2, [r3, #16]
    player->life = life;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a3a      	ldr	r2, [r7, #32]
 8003538:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2202      	movs	r2, #2
 800354a:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003556:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800355c:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a27      	ldr	r2, [pc, #156]	@ (8003604 <initPlayer+0xfc>)
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a25      	ldr	r2, [pc, #148]	@ (8003608 <initPlayer+0x100>)
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800357c:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+2, player->y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3b07      	subs	r3, #7
 8003590:	4618      	mov	r0, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	3b0f      	subs	r3, #15
 8003598:	4619      	mov	r1, r3
 800359a:	2300      	movs	r3, #0
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	2300      	movs	r3, #0
 80035a0:	9303      	str	r3, [sp, #12]
 80035a2:	2305      	movs	r3, #5
 80035a4:	9302      	str	r3, [sp, #8]
 80035a6:	2306      	movs	r3, #6
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	4b18      	ldr	r3, [pc, #96]	@ (800360c <initPlayer+0x104>)
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2317      	movs	r3, #23
 80035b0:	2212      	movs	r2, #18
 80035b2:	f7fe fa5d 	bl	8001a70 <LCD_Sprite>
    //FillRect(player->x , player->y, 1, 1, 0x000000);

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	1ad2      	subs	r2, r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	1e5a      	subs	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40e00000 	.word	0x40e00000
 8003608:	40400000 	.word	0x40400000
 800360c:	20007df4 	.word	0x20007df4

08003610 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d851      	bhi.n	80036c6 <playerCanMove+0xb6>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <playerCanMove+0x18>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	08003657 	.word	0x08003657
 8003630:	08003679 	.word	0x08003679
 8003634:	0800369b 	.word	0x0800369b
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b12      	cmp	r3, #18
 8003650:	dc34      	bgt.n	80036bc <playerCanMove+0xac>
			return 0;
 8003652:	2300      	movs	r3, #0
 8003654:	e094      	b.n	8003780 <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	d825      	bhi.n	80036c0 <playerCanMove+0xb0>
			return 0;
 8003674:	2300      	movs	r3, #0
 8003676:	e083      	b.n	8003780 <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	429a      	cmp	r2, r3
 8003694:	d816      	bhi.n	80036c4 <playerCanMove+0xb4>
			return 0;
 8003696:	2300      	movs	r3, #0
 8003698:	e072      	b.n	8003780 <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	1ad2      	subs	r2, r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d306      	bcc.n	80036c6 <playerCanMove+0xb6>
			return 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e061      	b.n	8003780 <playerCanMove+0x170>
		break;
 80036bc:	bf00      	nop
 80036be:	e002      	b.n	80036c6 <playerCanMove+0xb6>
		break;
 80036c0:	bf00      	nop
 80036c2:	e000      	b.n	80036c6 <playerCanMove+0xb6>
		break;
 80036c4:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d126      	bne.n	8003728 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4828      	ldr	r0, [pc, #160]	@ (8003788 <playerCanMove+0x178>)
 80036e6:	f7fe fd6b 	bl	80021c0 <ColisionPlayer_e1>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <playerCanMove+0xe4>
    	return 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e045      	b.n	8003780 <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4823      	ldr	r0, [pc, #140]	@ (800378c <playerCanMove+0x17c>)
 8003700:	f7fe fd5e 	bl	80021c0 <ColisionPlayer_e1>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <playerCanMove+0xfe>
        	return 0;
 800370a:	2300      	movs	r3, #0
 800370c:	e038      	b.n	8003780 <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	481d      	ldr	r0, [pc, #116]	@ (8003790 <playerCanMove+0x180>)
 800371a:	f7fe fd51 	bl	80021c0 <ColisionPlayer_e1>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <playerCanMove+0x118>
        	return 0;
 8003724:	2300      	movs	r3, #0
 8003726:	e02b      	b.n	8003780 <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	2b02      	cmp	r3, #2
 800372e:	d126      	bne.n	800377e <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4816      	ldr	r0, [pc, #88]	@ (8003794 <playerCanMove+0x184>)
 800373c:	f7fe fd40 	bl	80021c0 <ColisionPlayer_e1>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <playerCanMove+0x13a>
       	return 0;
 8003746:	2300      	movs	r3, #0
 8003748:	e01a      	b.n	8003780 <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4810      	ldr	r0, [pc, #64]	@ (8003798 <playerCanMove+0x188>)
 8003756:	f7fe fd33 	bl	80021c0 <ColisionPlayer_e1>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <playerCanMove+0x154>
           	return 0;
 8003760:	2300      	movs	r3, #0
 8003762:	e00d      	b.n	8003780 <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	480b      	ldr	r0, [pc, #44]	@ (800379c <playerCanMove+0x18c>)
 8003770:	f7fe fd26 	bl	80021c0 <ColisionPlayer_e1>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <playerCanMove+0x16e>
           	return 0;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2001c7d4 	.word	0x2001c7d4
 800378c:	2001c808 	.word	0x2001c808
 8003790:	2001c83c 	.word	0x2001c83c
 8003794:	2001c870 	.word	0x2001c870
 8003798:	2001c8a4 	.word	0x2001c8a4
 800379c:	2001c8d8 	.word	0x2001c8d8

080037a0 <HitboxPlayer>:

void HitboxPlayer(player* player){
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	1ad2      	subs	r2, r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 80037e8:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <HitboxPlayer+0x168>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d113      	bne.n	8003818 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	1ad0      	subs	r0, r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	1ad1      	subs	r1, r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2400      	movs	r4, #0
 8003812:	9400      	str	r4, [sp, #0]
 8003814:	f7fe f854 	bl	80018c0 <Rect>
        }
    if (DrawHitbox==2){
 8003818:	4b3b      	ldr	r3, [pc, #236]	@ (8003908 <HitboxPlayer+0x168>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d12b      	bne.n	8003878 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2301      	movs	r3, #1
 8003830:	2201      	movs	r2, #1
 8003832:	f7fe f86d 	bl	8001910 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2301      	movs	r3, #1
 8003846:	2201      	movs	r2, #1
 8003848:	f7fe f862 	bl	8001910 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003854:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2301      	movs	r3, #1
 800385c:	2201      	movs	r2, #1
 800385e:	f7fe f857 	bl	8001910 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800386a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2301      	movs	r3, #1
 8003872:	2201      	movs	r2, #1
 8003874:	f7fe f84c 	bl	8001910 <FillRect>
    }
    if (DrawHitbox==3){
 8003878:	4b23      	ldr	r3, [pc, #140]	@ (8003908 <HitboxPlayer+0x168>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d13f      	bne.n	8003900 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	1ad0      	subs	r0, r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	1ad1      	subs	r1, r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2400      	movs	r4, #0
 80038a2:	9400      	str	r4, [sp, #0]
 80038a4:	f7fe f80c 	bl	80018c0 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2301      	movs	r3, #1
 80038b8:	2201      	movs	r2, #1
 80038ba:	f7fe f829 	bl	8001910 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2301      	movs	r3, #1
 80038ce:	2201      	movs	r2, #1
 80038d0:	f7fe f81e 	bl	8001910 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80038dc:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2301      	movs	r3, #1
 80038e4:	2201      	movs	r2, #1
 80038e6:	f7fe f813 	bl	8001910 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038f2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2301      	movs	r3, #1
 80038fa:	2201      	movs	r2, #1
 80038fc:	f7fe f808 	bl	8001910 <FillRect>

        }
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	2001c9ef 	.word	0x2001c9ef

0800390c <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b01      	cmp	r3, #1
 800391c:	f040 80d0 	bne.w	8003ac0 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	2b03      	cmp	r3, #3
 8003926:	f200 80cb 	bhi.w	8003ac0 <PlayerHit+0x1b4>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <PlayerHit+0x24>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003941 	.word	0x08003941
 8003934:	080039ff 	.word	0x080039ff
 8003938:	080039a5 	.word	0x080039a5
 800393c:	08003a59 	.word	0x08003a59
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	3b0f      	subs	r3, #15
 8003946:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	f0c0 80af 	bcc.w	8003ab2 <PlayerHit+0x1a6>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	f200 80a9 	bhi.w	8003ab2 <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	3b05      	subs	r3, #5
 800396a:	429a      	cmp	r2, r3
 800396c:	f0c0 80a1 	bcc.w	8003ab2 <PlayerHit+0x1a6>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	3305      	adds	r3, #5
 800397a:	429a      	cmp	r2, r3
 800397c:	f200 8099 	bhi.w	8003ab2 <PlayerHit+0x1a6>
						enemy->health -= 1;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 808f 	bne.w	8003ab2 <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 80039a2:	e086      	b.n	8003ab2 <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	330f      	adds	r3, #15
 80039aa:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d37f      	bcc.n	8003ab6 <PlayerHit+0x1aa>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d87a      	bhi.n	8003ab6 <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	3b05      	subs	r3, #5
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d373      	bcc.n	8003ab6 <PlayerHit+0x1aa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	3305      	adds	r3, #5
 80039d8:	429a      	cmp	r2, r3
 80039da:	d86c      	bhi.n	8003ab6 <PlayerHit+0x1aa>
						enemy->health -= 1;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	1e5a      	subs	r2, r3, #1
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d163      	bne.n	8003ab6 <PlayerHit+0x1aa>
							enemy->isAlive=0;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 80039fc:	e05b      	b.n	8003ab6 <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d354      	bcc.n	8003aba <PlayerHit+0x1ae>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d84f      	bhi.n	8003aba <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	3b0f      	subs	r3, #15
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d348      	bcc.n	8003aba <PlayerHit+0x1ae>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	3314      	adds	r3, #20
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d841      	bhi.n	8003aba <PlayerHit+0x1ae>
						enemy->health -= 1;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d138      	bne.n	8003aba <PlayerHit+0x1ae>
							enemy->isAlive=0;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003a56:	e030      	b.n	8003aba <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3b14      	subs	r3, #20
 8003a5e:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d329      	bcc.n	8003abe <PlayerHit+0x1b2>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d824      	bhi.n	8003abe <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	3b0f      	subs	r3, #15
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d31d      	bcc.n	8003abe <PlayerHit+0x1b2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d816      	bhi.n	8003abe <PlayerHit+0x1b2>
									enemy->health -= 1;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <PlayerHit+0x1b2>
										enemy->isAlive=0;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8003ab0:	e005      	b.n	8003abe <PlayerHit+0x1b2>
			break;
 8003ab2:	bf00      	nop
 8003ab4:	e004      	b.n	8003ac0 <PlayerHit+0x1b4>
				break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <PlayerHit+0x1b4>
				break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <PlayerHit+0x1b4>
							break;
 8003abe:	bf00      	nop
						}
		}
	}
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <PlayerAnimation>:

void PlayerAnimation(player* player){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af06      	add	r7, sp, #24
 8003ad2:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d16f      	bne.n	8003bbc <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d117      	bne.n	8003b14 <PlayerAnimation+0x48>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3b08      	subs	r3, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	3b0d      	subs	r3, #13
 8003af2:	4619      	mov	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af8:	461a      	mov	r2, r3
 8003afa:	2300      	movs	r3, #0
 8003afc:	9304      	str	r3, [sp, #16]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9303      	str	r3, [sp, #12]
 8003b02:	9202      	str	r2, [sp, #8]
 8003b04:	230a      	movs	r3, #10
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <PlayerAnimation+0xf8>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	231a      	movs	r3, #26
 8003b0e:	2212      	movs	r2, #18
 8003b10:	f7fd ffae 	bl	8001a70 <LCD_Sprite>
		}
		if (player->direction==1){
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d117      	bne.n	8003b4c <PlayerAnimation+0x80>
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3b0a      	subs	r3, #10
 8003b22:	4618      	mov	r0, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	3b0b      	subs	r3, #11
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b30:	461a      	mov	r2, r3
 8003b32:	2300      	movs	r3, #0
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	2301      	movs	r3, #1
 8003b38:	9303      	str	r3, [sp, #12]
 8003b3a:	9202      	str	r2, [sp, #8]
 8003b3c:	230a      	movs	r3, #10
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <PlayerAnimation+0xfc>)
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2317      	movs	r3, #23
 8003b46:	2216      	movs	r2, #22
 8003b48:	f7fd ff92 	bl	8001a70 <LCD_Sprite>
		}
		if (player->direction==2){
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d117      	bne.n	8003b84 <PlayerAnimation+0xb8>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3b08      	subs	r3, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	3b0b      	subs	r3, #11
 8003b62:	4619      	mov	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9303      	str	r3, [sp, #12]
 8003b72:	9202      	str	r2, [sp, #8]
 8003b74:	230a      	movs	r3, #10
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <PlayerAnimation+0x100>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2318      	movs	r3, #24
 8003b7e:	2212      	movs	r2, #18
 8003b80:	f7fd ff76 	bl	8001a70 <LCD_Sprite>
			}
		if (player->direction==3){
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d117      	bne.n	8003bbc <PlayerAnimation+0xf0>

			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3b0a      	subs	r3, #10
 8003b92:	4618      	mov	r0, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	3b0b      	subs	r3, #11
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9304      	str	r3, [sp, #16]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	9202      	str	r2, [sp, #8]
 8003bac:	230a      	movs	r3, #10
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <PlayerAnimation+0xfc>)
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2317      	movs	r3, #23
 8003bb6:	2216      	movs	r2, #22
 8003bb8:	f7fd ff5a 	bl	8001a70 <LCD_Sprite>
			}
	}
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20012428 	.word	0x20012428
 8003bc8:	2000fca0 	.word	0x2000fca0
 8003bcc:	200148b8 	.word	0x200148b8

08003bd0 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af06      	add	r7, sp, #24
 8003bd6:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be2:	ee17 3a90 	vmov	r3, s15
 8003be6:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 8082 	bne.w	8003cf6 <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	dc7b      	bgt.n	8003cf0 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d115      	bne.n	8003c2c <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3b08      	subs	r3, #8
 8003c06:	4618      	mov	r0, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	3b0b      	subs	r3, #11
 8003c0e:	4619      	mov	r1, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	9304      	str	r3, [sp, #16]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9303      	str	r3, [sp, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	9302      	str	r3, [sp, #8]
 8003c1c:	2306      	movs	r3, #6
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <PlayerAttackAnimation+0x138>)
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2316      	movs	r3, #22
 8003c26:	2212      	movs	r2, #18
 8003c28:	f7fd ff22 	bl	8001a70 <LCD_Sprite>
			}
			if (player->direction==1){
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d115      	bne.n	8003c60 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b09      	subs	r3, #9
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	3b0b      	subs	r3, #11
 8003c42:	4619      	mov	r1, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	2306      	movs	r3, #6
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <PlayerAttackAnimation+0x13c>)
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2316      	movs	r3, #22
 8003c5a:	2214      	movs	r2, #20
 8003c5c:	f7fd ff08 	bl	8001a70 <LCD_Sprite>
			}
			if (player->direction==2){
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d115      	bne.n	8003c94 <PlayerAttackAnimation+0xc4>

				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3b08      	subs	r3, #8
 8003c6e:	4618      	mov	r0, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	3b0b      	subs	r3, #11
 8003c76:	4619      	mov	r1, r3
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9304      	str	r3, [sp, #16]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9303      	str	r3, [sp, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	2306      	movs	r3, #6
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <PlayerAttackAnimation+0x140>)
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2317      	movs	r3, #23
 8003c8e:	2212      	movs	r2, #18
 8003c90:	f7fd feee 	bl	8001a70 <LCD_Sprite>
					}
			if (player->direction==3){
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d115      	bne.n	8003cc8 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3b09      	subs	r3, #9
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	3b0b      	subs	r3, #11
 8003caa:	4619      	mov	r1, r3
 8003cac:	2300      	movs	r3, #0
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9303      	str	r3, [sp, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	9302      	str	r3, [sp, #8]
 8003cb8:	2306      	movs	r3, #6
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <PlayerAttackAnimation+0x13c>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2316      	movs	r3, #22
 8003cc2:	2214      	movs	r2, #20
 8003cc4:	f7fd fed4 	bl	8001a70 <LCD_Sprite>
					}
			player->animationAttack+=0.2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fc07 	bl	80004e0 <__aeabi_f2d>
 8003cd2:	a30b      	add	r3, pc, #44	@ (adr r3, 8003d00 <PlayerAttackAnimation+0x130>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc faa4 	bl	8000224 <__adddf3>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7fc fc54 	bl	8000590 <__aeabi_d2f>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 8003cee:	e002      	b.n	8003cf6 <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	9999999a 	.word	0x9999999a
 8003d04:	3fc99999 	.word	0x3fc99999
 8003d08:	2000a5fc 	.word	0x2000a5fc
 8003d0c:	2000915c 	.word	0x2000915c
 8003d10:	20007df4 	.word	0x20007df4
 8003d14:	00000000 	.word	0x00000000

08003d18 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	@ 0x28
 8003d1c:	af06      	add	r7, sp, #24
 8003d1e:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d2a:	ee17 3a90 	vmov	r3, s15
 8003d2e:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 8082 	bne.w	8003e3e <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	dc7b      	bgt.n	8003e38 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3b08      	subs	r3, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	3b0a      	subs	r3, #10
 8003d56:	4619      	mov	r1, r3
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	9302      	str	r3, [sp, #8]
 8003d64:	2303      	movs	r3, #3
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <PlayerDamageAnimation+0x138>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2314      	movs	r3, #20
 8003d6e:	2212      	movs	r2, #18
 8003d70:	f7fd fe7e 	bl	8001a70 <LCD_Sprite>
			}
			if (player->direction==1){
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d115      	bne.n	8003da8 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3b09      	subs	r3, #9
 8003d82:	4618      	mov	r0, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	3b0a      	subs	r3, #10
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	2301      	movs	r3, #1
 8003d92:	9303      	str	r3, [sp, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	9302      	str	r3, [sp, #8]
 8003d98:	2303      	movs	r3, #3
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e54 <PlayerDamageAnimation+0x13c>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2315      	movs	r3, #21
 8003da2:	2214      	movs	r2, #20
 8003da4:	f7fd fe64 	bl	8001a70 <LCD_Sprite>
			}
			if (player->direction==2){
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d115      	bne.n	8003ddc <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3b09      	subs	r3, #9
 8003db6:	4618      	mov	r0, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	3b0a      	subs	r3, #10
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9304      	str	r3, [sp, #16]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9303      	str	r3, [sp, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	9302      	str	r3, [sp, #8]
 8003dcc:	2303      	movs	r3, #3
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	4b21      	ldr	r3, [pc, #132]	@ (8003e58 <PlayerDamageAnimation+0x140>)
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2315      	movs	r3, #21
 8003dd6:	2214      	movs	r2, #20
 8003dd8:	f7fd fe4a 	bl	8001a70 <LCD_Sprite>
					}
			if (player->direction==3){
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d115      	bne.n	8003e10 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3b09      	subs	r3, #9
 8003dea:	4618      	mov	r0, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	3b0a      	subs	r3, #10
 8003df2:	4619      	mov	r1, r3
 8003df4:	2300      	movs	r3, #0
 8003df6:	9304      	str	r3, [sp, #16]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9303      	str	r3, [sp, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	9302      	str	r3, [sp, #8]
 8003e00:	2303      	movs	r3, #3
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <PlayerDamageAnimation+0x13c>)
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2315      	movs	r3, #21
 8003e0a:	2214      	movs	r2, #20
 8003e0c:	f7fd fe30 	bl	8001a70 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc fb63 	bl	80004e0 <__aeabi_f2d>
 8003e1a:	a30b      	add	r3, pc, #44	@ (adr r3, 8003e48 <PlayerDamageAnimation+0x130>)
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f7fc fa00 	bl	8000224 <__adddf3>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f7fc fbb0 	bl	8000590 <__aeabi_d2f>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 8003e36:	e002      	b.n	8003e3e <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	9999999a 	.word	0x9999999a
 8003e4c:	3fc99999 	.word	0x3fc99999
 8003e50:	20004fd4 	.word	0x20004fd4
 8003e54:	20005844 	.word	0x20005844
 8003e58:	2000621c 	.word	0x2000621c
 8003e5c:	00000000 	.word	0x00000000

08003e60 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b08b      	sub	sp, #44	@ 0x2c
 8003e64:	af06      	add	r7, sp, #24
 8003e66:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e72:	ee17 3a90 	vmov	r3, s15
 8003e76:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d143      	bne.n	8003f08 <PlayerDieAnimation+0xa8>
		if (variableAnimationDie<4){
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	dc40      	bgt.n	8003f08 <PlayerDieAnimation+0xa8>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2), p2.width+1, p2.height+1, 0xFE8B);
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <PlayerDieAnimation+0xb8>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <PlayerDieAnimation+0xb8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	1c58      	adds	r0, r3, #1
 8003e94:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <PlayerDieAnimation+0xb8>)
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	4b1f      	ldr	r3, [pc, #124]	@ (8003f18 <PlayerDieAnimation+0xb8>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	1ad1      	subs	r1, r2, r3
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <PlayerDieAnimation+0xb8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f18 <PlayerDieAnimation+0xb8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8003eb0:	9400      	str	r4, [sp, #0]
 8003eb2:	f7fd fd2d 	bl	8001910 <FillRect>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3b0b      	subs	r3, #11
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	3b0c      	subs	r3, #12
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9304      	str	r3, [sp, #16]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9303      	str	r3, [sp, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	9302      	str	r3, [sp, #8]
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <PlayerDieAnimation+0xbc>)
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2318      	movs	r3, #24
 8003edc:	2218      	movs	r2, #24
 8003ede:	f7fd fdc7 	bl	8001a70 <LCD_Sprite>
			player->animationDie+=0.2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fafa 	bl	80004e0 <__aeabi_f2d>
 8003eec:	a308      	add	r3, pc, #32	@ (adr r3, 8003f10 <PlayerDieAnimation+0xb0>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f7fc f997 	bl	8000224 <__adddf3>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f7fc fb47 	bl	8000590 <__aeabi_d2f>
 8003f02:	4602      	mov	r2, r0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd90      	pop	{r4, r7, pc}
 8003f10:	9999999a 	.word	0x9999999a
 8003f14:	3fc99999 	.word	0x3fc99999
 8003f18:	2001c760 	.word	0x2001c760
 8003f1c:	20006bf4 	.word	0x20006bf4

08003f20 <initLevelSolo>:

void initLevelSolo(void){
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af06      	add	r7, sp, #24
	FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8003f26:	4b4d      	ldr	r3, [pc, #308]	@ (800405c <initLevelSolo+0x13c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800405c <initLevelSolo+0x13c>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	1c58      	adds	r0, r3, #1
 8003f34:	4b49      	ldr	r3, [pc, #292]	@ (800405c <initLevelSolo+0x13c>)
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4b48      	ldr	r3, [pc, #288]	@ (800405c <initLevelSolo+0x13c>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	1c59      	adds	r1, r3, #1
 8003f42:	4b46      	ldr	r3, [pc, #280]	@ (800405c <initLevelSolo+0x13c>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	4b44      	ldr	r3, [pc, #272]	@ (800405c <initLevelSolo+0x13c>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8003f52:	9400      	str	r4, [sp, #0]
 8003f54:	f7fd fcdc 	bl	8001910 <FillRect>
	if (IniciarLevel==1){
 8003f58:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <initLevelSolo+0x140>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d178      	bne.n	8004052 <initLevelSolo+0x132>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8003f60:	2312      	movs	r3, #18
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	23dc      	movs	r3, #220	@ 0xdc
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	2303      	movs	r3, #3
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	2305      	movs	r3, #5
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	231e      	movs	r3, #30
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2316      	movs	r3, #22
 8003f7c:	22c8      	movs	r2, #200	@ 0xc8
 8003f7e:	21a0      	movs	r1, #160	@ 0xa0
 8003f80:	4838      	ldr	r0, [pc, #224]	@ (8004064 <initLevelSolo+0x144>)
 8003f82:	f7ff fac1 	bl	8003508 <initPlayer>
		initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8003f86:	2312      	movs	r3, #18
 8003f88:	9305      	str	r3, [sp, #20]
 8003f8a:	23dc      	movs	r3, #220	@ 0xdc
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f92:	9303      	str	r3, [sp, #12]
 8003f94:	2303      	movs	r3, #3
 8003f96:	9302      	str	r3, [sp, #8]
 8003f98:	2305      	movs	r3, #5
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	231e      	movs	r3, #30
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2316      	movs	r3, #22
 8003fa2:	22c8      	movs	r2, #200	@ 0xc8
 8003fa4:	21a0      	movs	r1, #160	@ 0xa0
 8003fa6:	482d      	ldr	r0, [pc, #180]	@ (800405c <initLevelSolo+0x13c>)
 8003fa8:	f7ff faae 	bl	8003508 <initPlayer>
		p1.PlayerNum=1;
 8003fac:	4b2d      	ldr	r3, [pc, #180]	@ (8004064 <initLevelSolo+0x144>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800405c <initLevelSolo+0x13c>)
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.isAlive=0;
 8003fb8:	4b28      	ldr	r3, [pc, #160]	@ (800405c <initLevelSolo+0x13c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]

		if (nivelActual1==NIVEL1){
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <initLevelSolo+0x148>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11e      	bne.n	8004006 <initLevelSolo+0xe6>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8003fc8:	2303      	movs	r3, #3
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2313      	movs	r3, #19
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	2250      	movs	r2, #80	@ 0x50
 8003fd4:	2128      	movs	r1, #40	@ 0x28
 8003fd6:	4825      	ldr	r0, [pc, #148]	@ (800406c <initLevelSolo+0x14c>)
 8003fd8:	f7fe f800 	bl	8001fdc <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8003fdc:	2303      	movs	r3, #3
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	2313      	movs	r3, #19
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	2250      	movs	r2, #80	@ 0x50
 8003fe8:	21a0      	movs	r1, #160	@ 0xa0
 8003fea:	4821      	ldr	r0, [pc, #132]	@ (8004070 <initLevelSolo+0x150>)
 8003fec:	f7fd fff6 	bl	8001fdc <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2313      	movs	r3, #19
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	2250      	movs	r2, #80	@ 0x50
 8003ffc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004000:	481c      	ldr	r0, [pc, #112]	@ (8004074 <initLevelSolo+0x154>)
 8004002:	f7fd ffeb 	bl	8001fdc <initEnemy1>

		  if (nivelActual1==NIVEL2){
 8004006:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <initLevelSolo+0x148>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10c      	bne.n	800402a <initLevelSolo+0x10a>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 8004010:	2303      	movs	r3, #3
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	2314      	movs	r3, #20
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2310      	movs	r3, #16
 800401a:	2250      	movs	r2, #80	@ 0x50
 800401c:	21a0      	movs	r1, #160	@ 0xa0
 800401e:	4816      	ldr	r0, [pc, #88]	@ (8004078 <initLevelSolo+0x158>)
 8004020:	f7fe fc00 	bl	8002824 <initEnemy2>
			  IniciarLevel=0;
 8004024:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <initLevelSolo+0x140>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <initLevelSolo+0x148>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d10e      	bne.n	8004052 <initLevelSolo+0x132>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <initLevelSolo+0x144>)
 8004036:	9302      	str	r3, [sp, #8]
 8004038:	230f      	movs	r3, #15
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	230f      	movs	r3, #15
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	230f      	movs	r3, #15
 8004042:	221e      	movs	r2, #30
 8004044:	2150      	movs	r1, #80	@ 0x50
 8004046:	480d      	ldr	r0, [pc, #52]	@ (800407c <initLevelSolo+0x15c>)
 8004048:	f7fe ff38 	bl	8002ebc <initEnemy3>
			  IniciarLevel=0;
 800404c:	4b04      	ldr	r3, [pc, #16]	@ (8004060 <initLevelSolo+0x140>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
		  	  }
		  }
}
 8004052:	bf00      	nop
 8004054:	3704      	adds	r7, #4
 8004056:	46bd      	mov	sp, r7
 8004058:	bd90      	pop	{r4, r7, pc}
 800405a:	bf00      	nop
 800405c:	2001c760 	.word	0x2001c760
 8004060:	2001c9f4 	.word	0x2001c9f4
 8004064:	2001c6ec 	.word	0x2001c6ec
 8004068:	2001c9f1 	.word	0x2001c9f1
 800406c:	2001c7d4 	.word	0x2001c7d4
 8004070:	2001c808 	.word	0x2001c808
 8004074:	2001c83c 	.word	0x2001c83c
 8004078:	2001c90c 	.word	0x2001c90c
 800407c:	2001c994 	.word	0x2001c994

08004080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004086:	f001 fb93 	bl	80057b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800408a:	f000 fb8f 	bl	80047ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800408e:	f000 fc83 	bl	8004998 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004092:	f000 fbf7 	bl	8004884 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004096:	f000 fc55 	bl	8004944 <MX_USART2_UART_Init>
  MX_UART5_Init();
 800409a:	f000 fc29 	bl	80048f0 <MX_UART5_Init>
  MX_FATFS_Init();
 800409e:	f004 f98b 	bl	80083b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 80040a2:	f7fd f905 	bl	80012b0 <LCD_Init>
	//LCD_Clear(0x00);

	//Fondo


	if (load_image_from_sd_to_play("fb1_h.bin")) {
 80040a6:	48b3      	ldr	r0, [pc, #716]	@ (8004374 <main+0x2f4>)
 80040a8:	f7fd fda4 	bl	8001bf4 <load_image_from_sd_to_play>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <main+0x44>
		LCD_Bitmap(0, 0, 320, 30, image);
 80040b2:	4bb1      	ldr	r3, [pc, #708]	@ (8004378 <main+0x2f8>)
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	231e      	movs	r3, #30
 80040b8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80040bc:	2100      	movs	r1, #0
 80040be:	2000      	movs	r0, #0
 80040c0:	f7fd fc80 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb2_h.bin")) {
 80040c4:	48ad      	ldr	r0, [pc, #692]	@ (800437c <main+0x2fc>)
 80040c6:	f7fd fd95 	bl	8001bf4 <load_image_from_sd_to_play>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <main+0x62>
		LCD_Bitmap(0, 30, 320, 30, image);
 80040d0:	4ba9      	ldr	r3, [pc, #676]	@ (8004378 <main+0x2f8>)
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	231e      	movs	r3, #30
 80040d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80040da:	211e      	movs	r1, #30
 80040dc:	2000      	movs	r0, #0
 80040de:	f7fd fc71 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb3_h.bin")) {
 80040e2:	48a7      	ldr	r0, [pc, #668]	@ (8004380 <main+0x300>)
 80040e4:	f7fd fd86 	bl	8001bf4 <load_image_from_sd_to_play>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <main+0x80>
		LCD_Bitmap(0, 60, 320, 30, image);
 80040ee:	4ba2      	ldr	r3, [pc, #648]	@ (8004378 <main+0x2f8>)
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	231e      	movs	r3, #30
 80040f4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80040f8:	213c      	movs	r1, #60	@ 0x3c
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7fd fc62 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb4_h.bin")) {
 8004100:	48a0      	ldr	r0, [pc, #640]	@ (8004384 <main+0x304>)
 8004102:	f7fd fd77 	bl	8001bf4 <load_image_from_sd_to_play>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <main+0x9e>
		LCD_Bitmap(0, 90, 320, 30, image);
 800410c:	4b9a      	ldr	r3, [pc, #616]	@ (8004378 <main+0x2f8>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	231e      	movs	r3, #30
 8004112:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004116:	215a      	movs	r1, #90	@ 0x5a
 8004118:	2000      	movs	r0, #0
 800411a:	f7fd fc53 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb5_h.bin")) {
 800411e:	489a      	ldr	r0, [pc, #616]	@ (8004388 <main+0x308>)
 8004120:	f7fd fd68 	bl	8001bf4 <load_image_from_sd_to_play>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <main+0xbc>
		LCD_Bitmap(0, 120, 320, 30, image);
 800412a:	4b93      	ldr	r3, [pc, #588]	@ (8004378 <main+0x2f8>)
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	231e      	movs	r3, #30
 8004130:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004134:	2178      	movs	r1, #120	@ 0x78
 8004136:	2000      	movs	r0, #0
 8004138:	f7fd fc44 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb6_h.bin")) {
 800413c:	4893      	ldr	r0, [pc, #588]	@ (800438c <main+0x30c>)
 800413e:	f7fd fd59 	bl	8001bf4 <load_image_from_sd_to_play>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <main+0xda>
		LCD_Bitmap(0, 150, 320, 30, image);
 8004148:	4b8b      	ldr	r3, [pc, #556]	@ (8004378 <main+0x2f8>)
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	231e      	movs	r3, #30
 800414e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004152:	2196      	movs	r1, #150	@ 0x96
 8004154:	2000      	movs	r0, #0
 8004156:	f7fd fc35 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb7_h.bin")) {
 800415a:	488d      	ldr	r0, [pc, #564]	@ (8004390 <main+0x310>)
 800415c:	f7fd fd4a 	bl	8001bf4 <load_image_from_sd_to_play>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <main+0xf8>
		LCD_Bitmap(0, 180, 320, 30, image);
 8004166:	4b84      	ldr	r3, [pc, #528]	@ (8004378 <main+0x2f8>)
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	231e      	movs	r3, #30
 800416c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004170:	21b4      	movs	r1, #180	@ 0xb4
 8004172:	2000      	movs	r0, #0
 8004174:	f7fd fc26 	bl	80019c4 <LCD_Bitmap>
	}
	if (load_image_from_sd_to_play("fb8_h.bin")) {
 8004178:	4886      	ldr	r0, [pc, #536]	@ (8004394 <main+0x314>)
 800417a:	f7fd fd3b 	bl	8001bf4 <load_image_from_sd_to_play>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <main+0x116>
		LCD_Bitmap(0, 210, 320, 30, image);
 8004184:	4b7c      	ldr	r3, [pc, #496]	@ (8004378 <main+0x2f8>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	231e      	movs	r3, #30
 800418a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800418e:	21d2      	movs	r1, #210	@ 0xd2
 8004190:	2000      	movs	r0, #0
 8004192:	f7fd fc17 	bl	80019c4 <LCD_Bitmap>
	//LCD_Bitmap(0, 0, 320, 240, fondo);

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	// Activar bandera interrupcion
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8004196:	2201      	movs	r2, #1
 8004198:	497f      	ldr	r1, [pc, #508]	@ (8004398 <main+0x318>)
 800419a:	4880      	ldr	r0, [pc, #512]	@ (800439c <main+0x31c>)
 800419c:	f003 f991 	bl	80074c2 <HAL_UART_Receive_IT>

	//EstadoJuego estadoActual = SOLO;
	//LevelPlaying nivelActual1 = NIVEL3;
	//LevelPlaying nivelActual2 = NIVEL2;
	estadoActual = SOLO;
 80041a0:	4b7f      	ldr	r3, [pc, #508]	@ (80043a0 <main+0x320>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
	nivelActual1 = NIVEL1;
 80041a6:	4b7f      	ldr	r3, [pc, #508]	@ (80043a4 <main+0x324>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
	nivelActual2 = NIVEL2;
 80041ac:	4b7e      	ldr	r3, [pc, #504]	@ (80043a8 <main+0x328>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
	modo = 0;
 80041b2:	4b7e      	ldr	r3, [pc, #504]	@ (80043ac <main+0x32c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
    fase_p1=1;
 80041b8:	4b7d      	ldr	r3, [pc, #500]	@ (80043b0 <main+0x330>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
    fase_p2=1;
 80041be:	4b7d      	ldr	r3, [pc, #500]	@ (80043b4 <main+0x334>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	701a      	strb	r2, [r3, #0]


  	if (estadoActual == SOLO){
 80041c4:	4b76      	ldr	r3, [pc, #472]	@ (80043a0 <main+0x320>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d172      	bne.n	80042b4 <main+0x234>
	//Inicializar Jugador 1
	initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80041ce:	2312      	movs	r3, #18
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	23dc      	movs	r3, #220	@ 0xdc
 80041d4:	9304      	str	r3, [sp, #16]
 80041d6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	2303      	movs	r3, #3
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	2305      	movs	r3, #5
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	231e      	movs	r3, #30
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2316      	movs	r3, #22
 80041ea:	22c8      	movs	r2, #200	@ 0xc8
 80041ec:	21a0      	movs	r1, #160	@ 0xa0
 80041ee:	4872      	ldr	r0, [pc, #456]	@ (80043b8 <main+0x338>)
 80041f0:	f7ff f98a 	bl	8003508 <initPlayer>
	initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80041f4:	2312      	movs	r3, #18
 80041f6:	9305      	str	r3, [sp, #20]
 80041f8:	23dc      	movs	r3, #220	@ 0xdc
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	2303      	movs	r3, #3
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	2305      	movs	r3, #5
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	231e      	movs	r3, #30
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2316      	movs	r3, #22
 8004210:	22c8      	movs	r2, #200	@ 0xc8
 8004212:	21a0      	movs	r1, #160	@ 0xa0
 8004214:	4869      	ldr	r0, [pc, #420]	@ (80043bc <main+0x33c>)
 8004216:	f7ff f977 	bl	8003508 <initPlayer>
	p1.PlayerNum=1;
 800421a:	4b67      	ldr	r3, [pc, #412]	@ (80043b8 <main+0x338>)
 800421c:	2201      	movs	r2, #1
 800421e:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 8004220:	4b66      	ldr	r3, [pc, #408]	@ (80043bc <main+0x33c>)
 8004222:	2202      	movs	r2, #2
 8004224:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.isAlive=0;
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <main+0x33c>)
 8004228:	2200      	movs	r2, #0
 800422a:	61da      	str	r2, [r3, #28]

	if (nivelActual1==NIVEL1){
 800422c:	4b5d      	ldr	r3, [pc, #372]	@ (80043a4 <main+0x324>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11e      	bne.n	8004274 <main+0x1f4>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8004236:	2303      	movs	r3, #3
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	2313      	movs	r3, #19
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	2310      	movs	r3, #16
 8004240:	2250      	movs	r2, #80	@ 0x50
 8004242:	2128      	movs	r1, #40	@ 0x28
 8004244:	485e      	ldr	r0, [pc, #376]	@ (80043c0 <main+0x340>)
 8004246:	f7fd fec9 	bl	8001fdc <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 800424a:	2303      	movs	r3, #3
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	2313      	movs	r3, #19
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2310      	movs	r3, #16
 8004254:	2250      	movs	r2, #80	@ 0x50
 8004256:	21a0      	movs	r1, #160	@ 0xa0
 8004258:	485a      	ldr	r0, [pc, #360]	@ (80043c4 <main+0x344>)
 800425a:	f7fd febf 	bl	8001fdc <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 800425e:	2303      	movs	r3, #3
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	2313      	movs	r3, #19
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2310      	movs	r3, #16
 8004268:	2250      	movs	r2, #80	@ 0x50
 800426a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800426e:	4856      	ldr	r0, [pc, #344]	@ (80043c8 <main+0x348>)
 8004270:	f7fd feb4 	bl	8001fdc <initEnemy1>

	  if (nivelActual1==NIVEL2){
 8004274:	4b4b      	ldr	r3, [pc, #300]	@ (80043a4 <main+0x324>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d109      	bne.n	8004292 <main+0x212>
		  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 800427e:	2303      	movs	r3, #3
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	2314      	movs	r3, #20
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2310      	movs	r3, #16
 8004288:	2250      	movs	r2, #80	@ 0x50
 800428a:	21a0      	movs	r1, #160	@ 0xa0
 800428c:	484f      	ldr	r0, [pc, #316]	@ (80043cc <main+0x34c>)
 800428e:	f7fe fac9 	bl	8002824 <initEnemy2>
		  }

	  if (nivelActual1==NIVEL3){
 8004292:	4b44      	ldr	r3, [pc, #272]	@ (80043a4 <main+0x324>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d10b      	bne.n	80042b4 <main+0x234>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 800429c:	4b46      	ldr	r3, [pc, #280]	@ (80043b8 <main+0x338>)
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	230f      	movs	r3, #15
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	230f      	movs	r3, #15
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	230f      	movs	r3, #15
 80042aa:	221e      	movs	r2, #30
 80042ac:	2150      	movs	r1, #80	@ 0x50
 80042ae:	4848      	ldr	r0, [pc, #288]	@ (80043d0 <main+0x350>)
 80042b0:	f7fe fe04 	bl	8002ebc <initEnemy3>
	  	  }
	  }
  if (estadoActual==DUO){
 80042b4:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <main+0x320>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	f040 80cd 	bne.w	800445a <main+0x3da>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 80042c0:	2300      	movs	r3, #0
 80042c2:	22f0      	movs	r2, #240	@ 0xf0
 80042c4:	2100      	movs	r1, #0
 80042c6:	20a0      	movs	r0, #160	@ 0xa0
 80042c8:	f7fd faba 	bl	8001840 <V_line>
	initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 80042cc:	2312      	movs	r3, #18
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	23dc      	movs	r3, #220	@ 0xdc
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	23a0      	movs	r3, #160	@ 0xa0
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	2303      	movs	r3, #3
 80042da:	9302      	str	r3, [sp, #8]
 80042dc:	2305      	movs	r3, #5
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	231e      	movs	r3, #30
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2316      	movs	r3, #22
 80042e6:	22c8      	movs	r2, #200	@ 0xc8
 80042e8:	2150      	movs	r1, #80	@ 0x50
 80042ea:	4833      	ldr	r0, [pc, #204]	@ (80043b8 <main+0x338>)
 80042ec:	f7ff f90c 	bl	8003508 <initPlayer>
	initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 80042f0:	23a0      	movs	r3, #160	@ 0xa0
 80042f2:	9305      	str	r3, [sp, #20]
 80042f4:	23dc      	movs	r3, #220	@ 0xdc
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	2303      	movs	r3, #3
 8004300:	9302      	str	r3, [sp, #8]
 8004302:	2305      	movs	r3, #5
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	231e      	movs	r3, #30
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2316      	movs	r3, #22
 800430c:	22c8      	movs	r2, #200	@ 0xc8
 800430e:	21f0      	movs	r1, #240	@ 0xf0
 8004310:	482a      	ldr	r0, [pc, #168]	@ (80043bc <main+0x33c>)
 8004312:	f7ff f8f9 	bl	8003508 <initPlayer>
	p1.PlayerNum=1;
 8004316:	4b28      	ldr	r3, [pc, #160]	@ (80043b8 <main+0x338>)
 8004318:	2201      	movs	r2, #1
 800431a:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 800431c:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <main+0x33c>)
 800431e:	2202      	movs	r2, #2
 8004320:	671a      	str	r2, [r3, #112]	@ 0x70

	if (nivelActual1==NIVEL1){
 8004322:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <main+0x324>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <main+0x2e8>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 30, 80, 16, 19, 3);
 800432c:	2303      	movs	r3, #3
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	2313      	movs	r3, #19
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2310      	movs	r3, #16
 8004336:	2250      	movs	r2, #80	@ 0x50
 8004338:	211e      	movs	r1, #30
 800433a:	4821      	ldr	r0, [pc, #132]	@ (80043c0 <main+0x340>)
 800433c:	f7fd fe4e 	bl	8001fdc <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2,90, 100, 16, 19, 3);
 8004340:	2303      	movs	r3, #3
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	2313      	movs	r3, #19
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2310      	movs	r3, #16
 800434a:	2264      	movs	r2, #100	@ 0x64
 800434c:	215a      	movs	r1, #90	@ 0x5a
 800434e:	481d      	ldr	r0, [pc, #116]	@ (80043c4 <main+0x344>)
 8004350:	f7fd fe44 	bl	8001fdc <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3,150, 120, 16, 19, 3);}
 8004354:	2303      	movs	r3, #3
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	2313      	movs	r3, #19
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2310      	movs	r3, #16
 800435e:	2278      	movs	r2, #120	@ 0x78
 8004360:	2196      	movs	r1, #150	@ 0x96
 8004362:	4819      	ldr	r0, [pc, #100]	@ (80043c8 <main+0x348>)
 8004364:	f7fd fe3a 	bl	8001fdc <initEnemy1>
	  if (nivelActual1==NIVEL2){
 8004368:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <main+0x324>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d13a      	bne.n	80043e8 <main+0x368>
 8004372:	e02f      	b.n	80043d4 <main+0x354>
 8004374:	0800b3a4 	.word	0x0800b3a4
 8004378:	20017be0 	.word	0x20017be0
 800437c:	0800b3b0 	.word	0x0800b3b0
 8004380:	0800b3bc 	.word	0x0800b3bc
 8004384:	0800b3c8 	.word	0x0800b3c8
 8004388:	0800b3d4 	.word	0x0800b3d4
 800438c:	0800b3e0 	.word	0x0800b3e0
 8004390:	0800b3ec 	.word	0x0800b3ec
 8004394:	0800b3f8 	.word	0x0800b3f8
 8004398:	2001c6e0 	.word	0x2001c6e0
 800439c:	20017b98 	.word	0x20017b98
 80043a0:	20016a78 	.word	0x20016a78
 80043a4:	2001c9f1 	.word	0x2001c9f1
 80043a8:	2001c9f2 	.word	0x2001c9f2
 80043ac:	2001c9ec 	.word	0x2001c9ec
 80043b0:	2001c9ed 	.word	0x2001c9ed
 80043b4:	2001c9ee 	.word	0x2001c9ee
 80043b8:	2001c6ec 	.word	0x2001c6ec
 80043bc:	2001c760 	.word	0x2001c760
 80043c0:	2001c7d4 	.word	0x2001c7d4
 80043c4:	2001c808 	.word	0x2001c808
 80043c8:	2001c83c 	.word	0x2001c83c
 80043cc:	2001c90c 	.word	0x2001c90c
 80043d0:	2001c994 	.word	0x2001c994
		  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 80043d4:	2303      	movs	r3, #3
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	2314      	movs	r3, #20
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2310      	movs	r3, #16
 80043de:	2250      	movs	r2, #80	@ 0x50
 80043e0:	215a      	movs	r1, #90	@ 0x5a
 80043e2:	4884      	ldr	r0, [pc, #528]	@ (80045f4 <main+0x574>)
 80043e4:	f7fe fa1e 	bl	8002824 <initEnemy2>
		  }
	  if (nivelActual2==NIVEL1){
 80043e8:	4b83      	ldr	r3, [pc, #524]	@ (80045f8 <main+0x578>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11e      	bne.n	8004430 <main+0x3b0>
	  			//Inicializar enemigo 1
	  			initEnemy1(&e1_4, 170, 120, 16, 19, 3);
 80043f2:	2303      	movs	r3, #3
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	2313      	movs	r3, #19
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2310      	movs	r3, #16
 80043fc:	2278      	movs	r2, #120	@ 0x78
 80043fe:	21aa      	movs	r1, #170	@ 0xaa
 8004400:	487e      	ldr	r0, [pc, #504]	@ (80045fc <main+0x57c>)
 8004402:	f7fd fdeb 	bl	8001fdc <initEnemy1>
	  			//Inicializar enemigo 2
	  			initEnemy1(&e1_5,230, 100, 16, 19, 3);
 8004406:	2303      	movs	r3, #3
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	2313      	movs	r3, #19
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2310      	movs	r3, #16
 8004410:	2264      	movs	r2, #100	@ 0x64
 8004412:	21e6      	movs	r1, #230	@ 0xe6
 8004414:	487a      	ldr	r0, [pc, #488]	@ (8004600 <main+0x580>)
 8004416:	f7fd fde1 	bl	8001fdc <initEnemy1>
	  			//Inicializar enemigo 3
	  			initEnemy1(&e1_6,290, 80, 16, 19, 3);
 800441a:	2303      	movs	r3, #3
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	2313      	movs	r3, #19
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2310      	movs	r3, #16
 8004424:	2250      	movs	r2, #80	@ 0x50
 8004426:	f44f 7191 	mov.w	r1, #290	@ 0x122
 800442a:	4876      	ldr	r0, [pc, #472]	@ (8004604 <main+0x584>)
 800442c:	f7fd fdd6 	bl	8001fdc <initEnemy1>
	    }

	  if (nivelActual2==NIVEL2){
 8004430:	4b71      	ldr	r3, [pc, #452]	@ (80045f8 <main+0x578>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d109      	bne.n	800444e <main+0x3ce>
	  	  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 800443a:	2303      	movs	r3, #3
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	2314      	movs	r3, #20
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2310      	movs	r3, #16
 8004444:	2250      	movs	r2, #80	@ 0x50
 8004446:	21e6      	movs	r1, #230	@ 0xe6
 8004448:	486f      	ldr	r0, [pc, #444]	@ (8004608 <main+0x588>)
 800444a:	f7fe f9eb 	bl	8002824 <initEnemy2>
	  }
	  HitboxPlayer(&p1);
 800444e:	486f      	ldr	r0, [pc, #444]	@ (800460c <main+0x58c>)
 8004450:	f7ff f9a6 	bl	80037a0 <HitboxPlayer>
	  HitboxPlayer(&p2);
 8004454:	486e      	ldr	r0, [pc, #440]	@ (8004610 <main+0x590>)
 8004456:	f7ff f9a3 	bl	80037a0 <HitboxPlayer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch(estadoActual){
 800445a:	4b6e      	ldr	r3, [pc, #440]	@ (8004614 <main+0x594>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b04      	cmp	r3, #4
 8004462:	f200 8188 	bhi.w	8004776 <main+0x6f6>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <main+0x3ec>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004481 	.word	0x08004481
 8004470:	08004497 	.word	0x08004497
 8004474:	08004631 	.word	0x08004631
 8004478:	08004777 	.word	0x08004777
 800447c:	08004777 	.word	0x08004777
		case MENU:
			FillRect(0, 0, 319, 239, 0xFF00);
 8004480:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	23ef      	movs	r3, #239	@ 0xef
 8004488:	f240 123f 	movw	r2, #319	@ 0x13f
 800448c:	2100      	movs	r1, #0
 800448e:	2000      	movs	r0, #0
 8004490:	f7fd fa3e 	bl	8001910 <FillRect>
			break;
 8004494:	e170      	b.n	8004778 <main+0x6f8>
		case SOLO:
			if (nivelActual1==NIVEL1){
 8004496:	4b60      	ldr	r3, [pc, #384]	@ (8004618 <main+0x598>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d158      	bne.n	8004552 <main+0x4d2>
					if(e1_1.isAlive==1){
 80044a0:	4b5e      	ldr	r3, [pc, #376]	@ (800461c <main+0x59c>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <main+0x434>
							animation_e1(&e1_1);
 80044a8:	485c      	ldr	r0, [pc, #368]	@ (800461c <main+0x59c>)
 80044aa:	f7fd fc7d 	bl	8001da8 <animation_e1>
							animation_e1_control(&e1_1);}
 80044ae:	485b      	ldr	r0, [pc, #364]	@ (800461c <main+0x59c>)
 80044b0:	f7fd fc26 	bl	8001d00 <animation_e1_control>
					if(e1_2.isAlive==1){
 80044b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004620 <main+0x5a0>)
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <main+0x448>
						animation_e1(&e1_2);
 80044bc:	4858      	ldr	r0, [pc, #352]	@ (8004620 <main+0x5a0>)
 80044be:	f7fd fc73 	bl	8001da8 <animation_e1>
						animation_e1_control(&e1_2);}
 80044c2:	4857      	ldr	r0, [pc, #348]	@ (8004620 <main+0x5a0>)
 80044c4:	f7fd fc1c 	bl	8001d00 <animation_e1_control>

					if(e1_2.isAlive==1){
 80044c8:	4b55      	ldr	r3, [pc, #340]	@ (8004620 <main+0x5a0>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <main+0x45c>
						animation_e1(&e1_3);
 80044d0:	4854      	ldr	r0, [pc, #336]	@ (8004624 <main+0x5a4>)
 80044d2:	f7fd fc69 	bl	8001da8 <animation_e1>
						animation_e1_control(&e1_3);}
 80044d6:	4853      	ldr	r0, [pc, #332]	@ (8004624 <main+0x5a4>)
 80044d8:	f7fd fc12 	bl	8001d00 <animation_e1_control>

					animation_e1_die(&e1_1);
 80044dc:	484f      	ldr	r0, [pc, #316]	@ (800461c <main+0x59c>)
 80044de:	f7fd fd2b 	bl	8001f38 <animation_e1_die>
					animation_e1_die(&e1_2);
 80044e2:	484f      	ldr	r0, [pc, #316]	@ (8004620 <main+0x5a0>)
 80044e4:	f7fd fd28 	bl	8001f38 <animation_e1_die>
					animation_e1_die(&e1_3);
 80044e8:	484e      	ldr	r0, [pc, #312]	@ (8004624 <main+0x5a4>)
 80044ea:	f7fd fd25 	bl	8001f38 <animation_e1_die>
					if (e1_1.isAlive==0&&e1_2.isAlive==0&&e1_3.isAlive==0 && e1_1.animationDie>=11 && e1_2.animationDie>=11 && e1_3.animationDie>=11){
 80044ee:	4b4b      	ldr	r3, [pc, #300]	@ (800461c <main+0x59c>)
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d12d      	bne.n	8004552 <main+0x4d2>
 80044f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <main+0x5a0>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d129      	bne.n	8004552 <main+0x4d2>
 80044fe:	4b49      	ldr	r3, [pc, #292]	@ (8004624 <main+0x5a4>)
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d125      	bne.n	8004552 <main+0x4d2>
 8004506:	4b45      	ldr	r3, [pc, #276]	@ (800461c <main+0x59c>)
 8004508:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800450c:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	db1b      	blt.n	8004552 <main+0x4d2>
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <main+0x5a0>)
 800451c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004520:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	db11      	blt.n	8004552 <main+0x4d2>
 800452e:	4b3d      	ldr	r3, [pc, #244]	@ (8004624 <main+0x5a4>)
 8004530:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004534:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	db07      	blt.n	8004552 <main+0x4d2>
						nivelActual1=NIVEL2;
 8004542:	4b35      	ldr	r3, [pc, #212]	@ (8004618 <main+0x598>)
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
						IniciarLevel=1;
 8004548:	4b37      	ldr	r3, [pc, #220]	@ (8004628 <main+0x5a8>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
						initLevelSolo();
 800454e:	f7ff fce7 	bl	8003f20 <initLevelSolo>
					}
				}

			if (nivelActual1==NIVEL2){
 8004552:	4b31      	ldr	r3, [pc, #196]	@ (8004618 <main+0x598>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d12c      	bne.n	80045b6 <main+0x536>
				moveE2(&e2_1, &p1);
 800455c:	492b      	ldr	r1, [pc, #172]	@ (800460c <main+0x58c>)
 800455e:	4825      	ldr	r0, [pc, #148]	@ (80045f4 <main+0x574>)
 8004560:	f7fe f99a 	bl	8002898 <moveE2>
				e2_1.delay+=0.5; //1
 8004564:	4b23      	ldr	r3, [pc, #140]	@ (80045f4 <main+0x574>)
 8004566:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800456a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800456e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004572:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <main+0x574>)
 8004574:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_1);
 8004578:	481e      	ldr	r0, [pc, #120]	@ (80045f4 <main+0x574>)
 800457a:	f7fe faa9 	bl	8002ad0 <E2_Appear>
				E2_Hurt(&e2_1);
 800457e:	481d      	ldr	r0, [pc, #116]	@ (80045f4 <main+0x574>)
 8004580:	f7fe faee 	bl	8002b60 <E2_Hurt>
				E2_Die(&e2_1);
 8004584:	481b      	ldr	r0, [pc, #108]	@ (80045f4 <main+0x574>)
 8004586:	f7fe fb3b 	bl	8002c00 <E2_Die>
				if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 800458a:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <main+0x574>)
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d111      	bne.n	80045b6 <main+0x536>
 8004592:	4b18      	ldr	r3, [pc, #96]	@ (80045f4 <main+0x574>)
 8004594:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004598:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800459c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	db07      	blt.n	80045b6 <main+0x536>
					nivelActual1=NIVEL3;
 80045a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004618 <main+0x598>)
 80045a8:	2202      	movs	r2, #2
 80045aa:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 80045ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004628 <main+0x5a8>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
					initLevelSolo();
 80045b2:	f7ff fcb5 	bl	8003f20 <initLevelSolo>
				}
			}

			if (nivelActual1==NIVEL3){
 80045b6:	4b18      	ldr	r3, [pc, #96]	@ (8004618 <main+0x598>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d10f      	bne.n	80045e0 <main+0x560>
				E3_MoveX(&e3_1);
 80045c0:	481a      	ldr	r0, [pc, #104]	@ (800462c <main+0x5ac>)
 80045c2:	f7fe ff2b 	bl	800341c <E3_MoveX>
				E3_Eye(&e3_1);
 80045c6:	4819      	ldr	r0, [pc, #100]	@ (800462c <main+0x5ac>)
 80045c8:	f7fe fcc2 	bl	8002f50 <E3_Eye>
				E3_FireMove(&e3_1,&p1);
 80045cc:	490f      	ldr	r1, [pc, #60]	@ (800460c <main+0x58c>)
 80045ce:	4817      	ldr	r0, [pc, #92]	@ (800462c <main+0x5ac>)
 80045d0:	f7fe fd38 	bl	8003044 <E3_FireMove>
				E3_Hitbox(&e3_1);
 80045d4:	4815      	ldr	r0, [pc, #84]	@ (800462c <main+0x5ac>)
 80045d6:	f7fe fe6b 	bl	80032b0 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 80045da:	4814      	ldr	r0, [pc, #80]	@ (800462c <main+0x5ac>)
 80045dc:	f7fe fe30 	bl	8003240 <E3_FireAnimation>


			}

			PlayerAttackAnimation(&p1);
 80045e0:	480a      	ldr	r0, [pc, #40]	@ (800460c <main+0x58c>)
 80045e2:	f7ff faf5 	bl	8003bd0 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 80045e6:	4809      	ldr	r0, [pc, #36]	@ (800460c <main+0x58c>)
 80045e8:	f7ff fb96 	bl	8003d18 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 80045ec:	4807      	ldr	r0, [pc, #28]	@ (800460c <main+0x58c>)
 80045ee:	f7ff fc37 	bl	8003e60 <PlayerDieAnimation>
			break;
 80045f2:	e0c1      	b.n	8004778 <main+0x6f8>
 80045f4:	2001c90c 	.word	0x2001c90c
 80045f8:	2001c9f2 	.word	0x2001c9f2
 80045fc:	2001c870 	.word	0x2001c870
 8004600:	2001c8a4 	.word	0x2001c8a4
 8004604:	2001c8d8 	.word	0x2001c8d8
 8004608:	2001c950 	.word	0x2001c950
 800460c:	2001c6ec 	.word	0x2001c6ec
 8004610:	2001c760 	.word	0x2001c760
 8004614:	20016a78 	.word	0x20016a78
 8004618:	2001c9f1 	.word	0x2001c9f1
 800461c:	2001c7d4 	.word	0x2001c7d4
 8004620:	2001c808 	.word	0x2001c808
 8004624:	2001c83c 	.word	0x2001c83c
 8004628:	2001c9f4 	.word	0x2001c9f4
 800462c:	2001c994 	.word	0x2001c994
		case DUO:
			if (nivelActual1==NIVEL1){
 8004630:	4b52      	ldr	r3, [pc, #328]	@ (800477c <main+0x6fc>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d126      	bne.n	8004688 <main+0x608>
				if(e1_1.isAlive==1){
 800463a:	4b51      	ldr	r3, [pc, #324]	@ (8004780 <main+0x700>)
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <main+0x5ce>
						animation_e1(&e1_1);
 8004642:	484f      	ldr	r0, [pc, #316]	@ (8004780 <main+0x700>)
 8004644:	f7fd fbb0 	bl	8001da8 <animation_e1>
						animation_e1_control(&e1_1);
 8004648:	484d      	ldr	r0, [pc, #308]	@ (8004780 <main+0x700>)
 800464a:	f7fd fb59 	bl	8001d00 <animation_e1_control>
				}
				if(e1_2.isAlive==1){
 800464e:	4b4d      	ldr	r3, [pc, #308]	@ (8004784 <main+0x704>)
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <main+0x5e2>
					animation_e1(&e1_2);
 8004656:	484b      	ldr	r0, [pc, #300]	@ (8004784 <main+0x704>)
 8004658:	f7fd fba6 	bl	8001da8 <animation_e1>
					animation_e1_control(&e1_2);
 800465c:	4849      	ldr	r0, [pc, #292]	@ (8004784 <main+0x704>)
 800465e:	f7fd fb4f 	bl	8001d00 <animation_e1_control>
				}
				if(e1_2.isAlive==1){
 8004662:	4b48      	ldr	r3, [pc, #288]	@ (8004784 <main+0x704>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <main+0x5f6>
					animation_e1(&e1_3);
 800466a:	4847      	ldr	r0, [pc, #284]	@ (8004788 <main+0x708>)
 800466c:	f7fd fb9c 	bl	8001da8 <animation_e1>
					animation_e1_control(&e1_3);
 8004670:	4845      	ldr	r0, [pc, #276]	@ (8004788 <main+0x708>)
 8004672:	f7fd fb45 	bl	8001d00 <animation_e1_control>
				}
				animation_e1_die(&e1_1);
 8004676:	4842      	ldr	r0, [pc, #264]	@ (8004780 <main+0x700>)
 8004678:	f7fd fc5e 	bl	8001f38 <animation_e1_die>
				animation_e1_die(&e1_2);
 800467c:	4841      	ldr	r0, [pc, #260]	@ (8004784 <main+0x704>)
 800467e:	f7fd fc5b 	bl	8001f38 <animation_e1_die>
				animation_e1_die(&e1_3);
 8004682:	4841      	ldr	r0, [pc, #260]	@ (8004788 <main+0x708>)
 8004684:	f7fd fc58 	bl	8001f38 <animation_e1_die>
			}
			if (nivelActual1==NIVEL2){
 8004688:	4b3c      	ldr	r3, [pc, #240]	@ (800477c <main+0x6fc>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d116      	bne.n	80046c0 <main+0x640>
							moveE2(&e2_1, &p1);
 8004692:	493e      	ldr	r1, [pc, #248]	@ (800478c <main+0x70c>)
 8004694:	483e      	ldr	r0, [pc, #248]	@ (8004790 <main+0x710>)
 8004696:	f7fe f8ff 	bl	8002898 <moveE2>
							e2_1.delay+=0.5; //1
 800469a:	4b3d      	ldr	r3, [pc, #244]	@ (8004790 <main+0x710>)
 800469c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80046a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046a8:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <main+0x710>)
 80046aa:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
							E2_Appear(&e2_1);
 80046ae:	4838      	ldr	r0, [pc, #224]	@ (8004790 <main+0x710>)
 80046b0:	f7fe fa0e 	bl	8002ad0 <E2_Appear>
							E2_Hurt(&e2_1);
 80046b4:	4836      	ldr	r0, [pc, #216]	@ (8004790 <main+0x710>)
 80046b6:	f7fe fa53 	bl	8002b60 <E2_Hurt>
							E2_Die(&e2_1);
 80046ba:	4835      	ldr	r0, [pc, #212]	@ (8004790 <main+0x710>)
 80046bc:	f7fe faa0 	bl	8002c00 <E2_Die>
						}


			if (nivelActual2==NIVEL1){
 80046c0:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <main+0x714>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d126      	bne.n	8004718 <main+0x698>
				if(e1_4.isAlive==1){
 80046ca:	4b33      	ldr	r3, [pc, #204]	@ (8004798 <main+0x718>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <main+0x65e>
						animation_e1(&e1_4);
 80046d2:	4831      	ldr	r0, [pc, #196]	@ (8004798 <main+0x718>)
 80046d4:	f7fd fb68 	bl	8001da8 <animation_e1>
						animation_e1_control(&e1_4);
 80046d8:	482f      	ldr	r0, [pc, #188]	@ (8004798 <main+0x718>)
 80046da:	f7fd fb11 	bl	8001d00 <animation_e1_control>
				}
				if(e1_5.isAlive==1){
 80046de:	4b2f      	ldr	r3, [pc, #188]	@ (800479c <main+0x71c>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d105      	bne.n	80046f2 <main+0x672>
					animation_e1(&e1_5);
 80046e6:	482d      	ldr	r0, [pc, #180]	@ (800479c <main+0x71c>)
 80046e8:	f7fd fb5e 	bl	8001da8 <animation_e1>
					animation_e1_control(&e1_5);
 80046ec:	482b      	ldr	r0, [pc, #172]	@ (800479c <main+0x71c>)
 80046ee:	f7fd fb07 	bl	8001d00 <animation_e1_control>
				}
				if(e1_6.isAlive==1){
 80046f2:	4b2b      	ldr	r3, [pc, #172]	@ (80047a0 <main+0x720>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d105      	bne.n	8004706 <main+0x686>
				animation_e1(&e1_6);
 80046fa:	4829      	ldr	r0, [pc, #164]	@ (80047a0 <main+0x720>)
 80046fc:	f7fd fb54 	bl	8001da8 <animation_e1>
				animation_e1_control(&e1_6);
 8004700:	4827      	ldr	r0, [pc, #156]	@ (80047a0 <main+0x720>)
 8004702:	f7fd fafd 	bl	8001d00 <animation_e1_control>
				}
				animation_e1_die(&e1_4);
 8004706:	4824      	ldr	r0, [pc, #144]	@ (8004798 <main+0x718>)
 8004708:	f7fd fc16 	bl	8001f38 <animation_e1_die>
				animation_e1_die(&e1_5);
 800470c:	4823      	ldr	r0, [pc, #140]	@ (800479c <main+0x71c>)
 800470e:	f7fd fc13 	bl	8001f38 <animation_e1_die>
				animation_e1_die(&e1_6);
 8004712:	4823      	ldr	r0, [pc, #140]	@ (80047a0 <main+0x720>)
 8004714:	f7fd fc10 	bl	8001f38 <animation_e1_die>
			}

			if (nivelActual2==NIVEL2){
 8004718:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <main+0x714>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d116      	bne.n	8004750 <main+0x6d0>
				moveE2(&e2_2, &p2);
 8004722:	4920      	ldr	r1, [pc, #128]	@ (80047a4 <main+0x724>)
 8004724:	4820      	ldr	r0, [pc, #128]	@ (80047a8 <main+0x728>)
 8004726:	f7fe f8b7 	bl	8002898 <moveE2>
				e2_2.delay+=0.5; //1
 800472a:	4b1f      	ldr	r3, [pc, #124]	@ (80047a8 <main+0x728>)
 800472c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004730:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <main+0x728>)
 800473a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_2);
 800473e:	481a      	ldr	r0, [pc, #104]	@ (80047a8 <main+0x728>)
 8004740:	f7fe f9c6 	bl	8002ad0 <E2_Appear>
				E2_Hurt(&e2_2);
 8004744:	4818      	ldr	r0, [pc, #96]	@ (80047a8 <main+0x728>)
 8004746:	f7fe fa0b 	bl	8002b60 <E2_Hurt>
				E2_Die(&e2_2);
 800474a:	4817      	ldr	r0, [pc, #92]	@ (80047a8 <main+0x728>)
 800474c:	f7fe fa58 	bl	8002c00 <E2_Die>
			}


			PlayerAttackAnimation(&p1);
 8004750:	480e      	ldr	r0, [pc, #56]	@ (800478c <main+0x70c>)
 8004752:	f7ff fa3d 	bl	8003bd0 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8004756:	480d      	ldr	r0, [pc, #52]	@ (800478c <main+0x70c>)
 8004758:	f7ff fade 	bl	8003d18 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 800475c:	480b      	ldr	r0, [pc, #44]	@ (800478c <main+0x70c>)
 800475e:	f7ff fb7f 	bl	8003e60 <PlayerDieAnimation>

			PlayerAttackAnimation(&p2);
 8004762:	4810      	ldr	r0, [pc, #64]	@ (80047a4 <main+0x724>)
 8004764:	f7ff fa34 	bl	8003bd0 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p2);
 8004768:	480e      	ldr	r0, [pc, #56]	@ (80047a4 <main+0x724>)
 800476a:	f7ff fad5 	bl	8003d18 <PlayerDamageAnimation>
			PlayerDieAnimation(&p2);
 800476e:	480d      	ldr	r0, [pc, #52]	@ (80047a4 <main+0x724>)
 8004770:	f7ff fb76 	bl	8003e60 <PlayerDieAnimation>
			break;
 8004774:	e000      	b.n	8004778 <main+0x6f8>
			//LCD_Bitmap(0, 0, 320, 240, pausa_menu);
			break;
		case FIN:
			break;
		default:
			break;
 8004776:	bf00      	nop
		switch(estadoActual){
 8004778:	e66f      	b.n	800445a <main+0x3da>
 800477a:	bf00      	nop
 800477c:	2001c9f1 	.word	0x2001c9f1
 8004780:	2001c7d4 	.word	0x2001c7d4
 8004784:	2001c808 	.word	0x2001c808
 8004788:	2001c83c 	.word	0x2001c83c
 800478c:	2001c6ec 	.word	0x2001c6ec
 8004790:	2001c90c 	.word	0x2001c90c
 8004794:	2001c9f2 	.word	0x2001c9f2
 8004798:	2001c870 	.word	0x2001c870
 800479c:	2001c8a4 	.word	0x2001c8a4
 80047a0:	2001c8d8 	.word	0x2001c8d8
 80047a4:	2001c760 	.word	0x2001c760
 80047a8:	2001c950 	.word	0x2001c950

080047ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b094      	sub	sp, #80	@ 0x50
 80047b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047b2:	f107 031c 	add.w	r3, r7, #28
 80047b6:	2234      	movs	r2, #52	@ 0x34
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f006 fd7c 	bl	800b2b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	4b29      	ldr	r3, [pc, #164]	@ (800487c <SystemClock_Config+0xd0>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	4a28      	ldr	r2, [pc, #160]	@ (800487c <SystemClock_Config+0xd0>)
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047de:	6413      	str	r3, [r2, #64]	@ 0x40
 80047e0:	4b26      	ldr	r3, [pc, #152]	@ (800487c <SystemClock_Config+0xd0>)
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80047ec:	2300      	movs	r3, #0
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4b23      	ldr	r3, [pc, #140]	@ (8004880 <SystemClock_Config+0xd4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80047f8:	4a21      	ldr	r2, [pc, #132]	@ (8004880 <SystemClock_Config+0xd4>)
 80047fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <SystemClock_Config+0xd4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800480c:	2302      	movs	r3, #2
 800480e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004810:	2301      	movs	r3, #1
 8004812:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004814:	2310      	movs	r3, #16
 8004816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004818:	2302      	movs	r3, #2
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800481c:	2300      	movs	r3, #0
 800481e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004820:	2308      	movs	r3, #8
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004824:	2350      	movs	r3, #80	@ 0x50
 8004826:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004828:	2302      	movs	r3, #2
 800482a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800482c:	2302      	movs	r3, #2
 800482e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004830:	2302      	movs	r3, #2
 8004832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004834:	f107 031c 	add.w	r3, r7, #28
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fe71 	bl	8006520 <HAL_RCC_OscConfig>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004844:	f000 fdf6 	bl	8005434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004848:	230f      	movs	r3, #15
 800484a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800484c:	2302      	movs	r3, #2
 800484e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800485e:	f107 0308 	add.w	r3, r7, #8
 8004862:	2102      	movs	r1, #2
 8004864:	4618      	mov	r0, r3
 8004866:	f001 fb97 	bl	8005f98 <HAL_RCC_ClockConfig>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004870:	f000 fde0 	bl	8005434 <Error_Handler>
  }
}
 8004874:	bf00      	nop
 8004876:	3750      	adds	r7, #80	@ 0x50
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000

08004884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004888:	4b17      	ldr	r3, [pc, #92]	@ (80048e8 <MX_SPI1_Init+0x64>)
 800488a:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <MX_SPI1_Init+0x68>)
 800488c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800488e:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <MX_SPI1_Init+0x64>)
 8004890:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004896:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <MX_SPI1_Init+0x64>)
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <MX_SPI1_Init+0x64>)
 800489e:	2200      	movs	r2, #0
 80048a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a2:	4b11      	ldr	r3, [pc, #68]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048a8:	4b0f      	ldr	r3, [pc, #60]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048b8:	2210      	movs	r2, #16
 80048ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048be:	2200      	movs	r2, #0
 80048c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048c2:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80048ce:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048d0:	220a      	movs	r2, #10
 80048d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048d4:	4804      	ldr	r0, [pc, #16]	@ (80048e8 <MX_SPI1_Init+0x64>)
 80048d6:	f002 f8c1 	bl	8006a5c <HAL_SPI_Init>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80048e0:	f000 fda8 	bl	8005434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20016ac0 	.word	0x20016ac0
 80048ec:	40013000 	.word	0x40013000

080048f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <MX_UART5_Init+0x4c>)
 80048f6:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <MX_UART5_Init+0x50>)
 80048f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <MX_UART5_Init+0x4c>)
 80048fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004900:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004902:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <MX_UART5_Init+0x4c>)
 8004904:	2200      	movs	r2, #0
 8004906:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004908:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <MX_UART5_Init+0x4c>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <MX_UART5_Init+0x4c>)
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <MX_UART5_Init+0x4c>)
 8004916:	220c      	movs	r2, #12
 8004918:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <MX_UART5_Init+0x4c>)
 800491c:	2200      	movs	r2, #0
 800491e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004920:	4b06      	ldr	r3, [pc, #24]	@ (800493c <MX_UART5_Init+0x4c>)
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004926:	4805      	ldr	r0, [pc, #20]	@ (800493c <MX_UART5_Init+0x4c>)
 8004928:	f002 fcf0 	bl	800730c <HAL_UART_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004932:	f000 fd7f 	bl	8005434 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20017b50 	.word	0x20017b50
 8004940:	40005000 	.word	0x40005000

08004944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 800494a:	4a12      	ldr	r2, [pc, #72]	@ (8004994 <MX_USART2_UART_Init+0x50>)
 800494c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 8004950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004956:	4b0e      	ldr	r3, [pc, #56]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 8004964:	2200      	movs	r2, #0
 8004966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004968:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 800496a:	220c      	movs	r2, #12
 800496c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 8004976:	2200      	movs	r2, #0
 8004978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800497a:	4805      	ldr	r0, [pc, #20]	@ (8004990 <MX_USART2_UART_Init+0x4c>)
 800497c:	f002 fcc6 	bl	800730c <HAL_UART_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004986:	f000 fd55 	bl	8005434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20017b98 	.word	0x20017b98
 8004994:	40004400 	.word	0x40004400

08004998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	@ 0x28
 800499c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80049be:	4b49      	ldr	r3, [pc, #292]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	4b45      	ldr	r3, [pc, #276]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	4a44      	ldr	r2, [pc, #272]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049da:	4b42      	ldr	r3, [pc, #264]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049f6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	4b37      	ldr	r3, [pc, #220]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	4a36      	ldr	r2, [pc, #216]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a12:	4b34      	ldr	r3, [pc, #208]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	607b      	str	r3, [r7, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4b30      	ldr	r3, [pc, #192]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 8004a28:	f043 0308 	orr.w	r3, r3, #8
 8004a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <MX_GPIO_Init+0x14c>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2182      	movs	r1, #130	@ 0x82
 8004a3e:	482a      	ldr	r0, [pc, #168]	@ (8004ae8 <MX_GPIO_Init+0x150>)
 8004a40:	f001 fa90 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8004a44:	2200      	movs	r2, #0
 8004a46:	f240 7113 	movw	r1, #1811	@ 0x713
 8004a4a:	4828      	ldr	r0, [pc, #160]	@ (8004aec <MX_GPIO_Init+0x154>)
 8004a4c:	f001 fa8a 	bl	8005f64 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8004a50:	2200      	movs	r2, #0
 8004a52:	f240 4139 	movw	r1, #1081	@ 0x439
 8004a56:	4826      	ldr	r0, [pc, #152]	@ (8004af0 <MX_GPIO_Init+0x158>)
 8004a58:	f001 fa84 	bl	8005f64 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	2140      	movs	r1, #64	@ 0x40
 8004a60:	4823      	ldr	r0, [pc, #140]	@ (8004af0 <MX_GPIO_Init+0x158>)
 8004a62:	f001 fa7f 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8004a66:	2382      	movs	r3, #130	@ 0x82
 8004a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a72:	2302      	movs	r3, #2
 8004a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	481a      	ldr	r0, [pc, #104]	@ (8004ae8 <MX_GPIO_Init+0x150>)
 8004a7e:	f001 f8dd 	bl	8005c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8004a82:	f240 7313 	movw	r3, #1811	@ 0x713
 8004a86:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a90:	2302      	movs	r3, #2
 8004a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4814      	ldr	r0, [pc, #80]	@ (8004aec <MX_GPIO_Init+0x154>)
 8004a9c:	f001 f8ce 	bl	8005c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8004aa0:	f240 4339 	movw	r3, #1081	@ 0x439
 8004aa4:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab2:	f107 0314 	add.w	r3, r7, #20
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	480d      	ldr	r0, [pc, #52]	@ (8004af0 <MX_GPIO_Init+0x158>)
 8004aba:	f001 f8bf 	bl	8005c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 8004abe:	2340      	movs	r3, #64	@ 0x40
 8004ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004aca:	2301      	movs	r3, #1
 8004acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4806      	ldr	r0, [pc, #24]	@ (8004af0 <MX_GPIO_Init+0x158>)
 8004ad6:	f001 f8b1 	bl	8005c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ada:	bf00      	nop
 8004adc:	3728      	adds	r7, #40	@ 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40020800 	.word	0x40020800
 8004aec:	40020000 	.word	0x40020000
 8004af0:	40020400 	.word	0x40020400

08004af4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b089      	sub	sp, #36	@ 0x24
 8004af8:	af06      	add	r7, sp, #24
 8004afa:	6078      	str	r0, [r7, #4]
	if (modo==1){
 8004afc:	4b97      	ldr	r3, [pc, #604]	@ (8004d5c <HAL_UART_RxCpltCallback+0x268>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 8004b04:	4896      	ldr	r0, [pc, #600]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b06:	f7fe fe4b 	bl	80037a0 <HitboxPlayer>
	if (modo==2){
 8004b0a:	4b94      	ldr	r3, [pc, #592]	@ (8004d5c <HAL_UART_RxCpltCallback+0x268>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d105      	bne.n	8004b1e <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 8004b12:	4893      	ldr	r0, [pc, #588]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b14:	f7fe fe44 	bl	80037a0 <HitboxPlayer>
		HitboxPlayer(&p2);
 8004b18:	4892      	ldr	r0, [pc, #584]	@ (8004d64 <HAL_UART_RxCpltCallback+0x270>)
 8004b1a:	f7fe fe41 	bl	80037a0 <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 8004b1e:	4b92      	ldr	r3, [pc, #584]	@ (8004d68 <HAL_UART_RxCpltCallback+0x274>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b64      	cmp	r3, #100	@ 0x64
 8004b24:	d175      	bne.n	8004c12 <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004b26:	4b8e      	ldr	r3, [pc, #568]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d171      	bne.n	8004c12 <HAL_UART_RxCpltCallback+0x11e>
 8004b2e:	4b8c      	ldr	r3, [pc, #560]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d16d      	bne.n	8004c12 <HAL_UART_RxCpltCallback+0x11e>
 8004b36:	4b8a      	ldr	r3, [pc, #552]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d169      	bne.n	8004c12 <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004b3e:	4b88      	ldr	r3, [pc, #544]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b87      	ldr	r3, [pc, #540]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	1c58      	adds	r0, r3, #1
 8004b4c:	4b84      	ldr	r3, [pc, #528]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4b83      	ldr	r3, [pc, #524]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	1c59      	adds	r1, r3, #1
 8004b5a:	4b81      	ldr	r3, [pc, #516]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	4b7f      	ldr	r3, [pc, #508]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004b6a:	9400      	str	r4, [sp, #0]
 8004b6c:	f7fc fed0 	bl	8001910 <FillRect>
			p1.direction=2;
 8004b70:	4b7b      	ldr	r3, [pc, #492]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b72:	2202      	movs	r2, #2
 8004b74:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8004b76:	2100      	movs	r1, #0
 8004b78:	4879      	ldr	r0, [pc, #484]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b7a:	f7fe fd49 	bl	8003610 <playerCanMove>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d017      	beq.n	8004bb4 <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 8004b84:	4b76      	ldr	r3, [pc, #472]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	4b75      	ldr	r3, [pc, #468]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	4a74      	ldr	r2, [pc, #464]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b90:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 8004b92:	4b73      	ldr	r3, [pc, #460]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	d805      	bhi.n	8004ba6 <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 8004b9a:	4b71      	ldr	r3, [pc, #452]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a6f      	ldr	r2, [pc, #444]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ba4:	e002      	b.n	8004bac <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 8004ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 8004bac:	486c      	ldr	r0, [pc, #432]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bae:	f7fe ff8d 	bl	8003acc <PlayerAnimation>
 8004bb2:	e02e      	b.n	8004c12 <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1,0xFE8B);
 8004bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b69      	ldr	r3, [pc, #420]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	1c58      	adds	r0, r3, #1
 8004bc2:	4b67      	ldr	r3, [pc, #412]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4b66      	ldr	r3, [pc, #408]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	4b63      	ldr	r3, [pc, #396]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	4b62      	ldr	r3, [pc, #392]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004be0:	9400      	str	r4, [sp, #0]
 8004be2:	f7fc fe95 	bl	8001910 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8004be6:	4b5e      	ldr	r3, [pc, #376]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3b08      	subs	r3, #8
 8004bec:	4618      	mov	r0, r3
 8004bee:	4b5c      	ldr	r3, [pc, #368]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	3b0c      	subs	r3, #12
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9304      	str	r3, [sp, #16]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9303      	str	r3, [sp, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9302      	str	r3, [sp, #8]
 8004c02:	230a      	movs	r3, #10
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_UART_RxCpltCallback+0x278>)
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	231a      	movs	r3, #26
 8004c0c:	2212      	movs	r2, #18
 8004c0e:	f7fc ff2f 	bl	8001a70 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 8004c12:	4b55      	ldr	r3, [pc, #340]	@ (8004d68 <HAL_UART_RxCpltCallback+0x274>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b75      	cmp	r3, #117	@ 0x75
 8004c18:	d15c      	bne.n	8004cd4 <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004c1a:	4b51      	ldr	r3, [pc, #324]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d158      	bne.n	8004cd4 <HAL_UART_RxCpltCallback+0x1e0>
 8004c22:	4b4f      	ldr	r3, [pc, #316]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d154      	bne.n	8004cd4 <HAL_UART_RxCpltCallback+0x1e0>
 8004c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d150      	bne.n	8004cd4 <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004c32:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b4a      	ldr	r3, [pc, #296]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	1c58      	adds	r0, r3, #1
 8004c40:	4b47      	ldr	r3, [pc, #284]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	4b46      	ldr	r3, [pc, #280]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	1c59      	adds	r1, r3, #1
 8004c4e:	4b44      	ldr	r3, [pc, #272]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	4b42      	ldr	r3, [pc, #264]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004c5e:	9400      	str	r4, [sp, #0]
 8004c60:	f7fc fe56 	bl	8001910 <FillRect>
			p1.direction=0;
 8004c64:	4b3e      	ldr	r3, [pc, #248]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	483c      	ldr	r0, [pc, #240]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c6e:	f7fe fccf 	bl	8003610 <playerCanMove>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d017      	beq.n	8004ca8 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8004c78:	4b39      	ldr	r3, [pc, #228]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b38      	ldr	r3, [pc, #224]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	4a37      	ldr	r2, [pc, #220]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c84:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8004c86:	4b36      	ldr	r3, [pc, #216]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d805      	bhi.n	8004c9a <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a32      	ldr	r2, [pc, #200]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c98:	e002      	b.n	8004ca0 <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 8004c9a:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 8004ca0:	482f      	ldr	r0, [pc, #188]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004ca2:	f7fe ff13 	bl	8003acc <PlayerAnimation>
 8004ca6:	e015      	b.n	8004cd4 <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8004ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3b08      	subs	r3, #8
 8004cae:	4618      	mov	r0, r3
 8004cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	3b0d      	subs	r3, #13
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	230a      	movs	r3, #10
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_UART_RxCpltCallback+0x27c>)
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	231a      	movs	r3, #26
 8004cce:	2212      	movs	r2, #18
 8004cd0:	f7fc fece 	bl	8001a70 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 8004cd4:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <HAL_UART_RxCpltCallback+0x274>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b72      	cmp	r3, #114	@ 0x72
 8004cda:	d168      	bne.n	8004dae <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004cdc:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d164      	bne.n	8004dae <HAL_UART_RxCpltCallback+0x2ba>
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d160      	bne.n	8004dae <HAL_UART_RxCpltCallback+0x2ba>
 8004cec:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d15c      	bne.n	8004dae <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	1c58      	adds	r0, r3, #1
 8004d02:	4b17      	ldr	r3, [pc, #92]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	4b12      	ldr	r3, [pc, #72]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004d20:	9400      	str	r4, [sp, #0]
 8004d22:	f7fc fdf5 	bl	8001910 <FillRect>
			p1.direction=1;
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	480c      	ldr	r0, [pc, #48]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d30:	f7fe fc6e 	bl	8003610 <playerCanMove>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d023      	beq.n	8004d82 <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	4a06      	ldr	r2, [pc, #24]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d46:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d811      	bhi.n	8004d74 <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 8004d50:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a02      	ldr	r2, [pc, #8]	@ (8004d60 <HAL_UART_RxCpltCallback+0x26c>)
 8004d58:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d5a:	e00e      	b.n	8004d7a <HAL_UART_RxCpltCallback+0x286>
 8004d5c:	2001c9ec 	.word	0x2001c9ec
 8004d60:	2001c6ec 	.word	0x2001c6ec
 8004d64:	2001c760 	.word	0x2001c760
 8004d68:	2001c6e0 	.word	0x2001c6e0
 8004d6c:	200148b8 	.word	0x200148b8
 8004d70:	20012428 	.word	0x20012428
						} else{
						  p1.animationWalkRight=0;
 8004d74:	4b8e      	ldr	r3, [pc, #568]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 8004d7a:	488d      	ldr	r0, [pc, #564]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004d7c:	f7fe fea6 	bl	8003acc <PlayerAnimation>
 8004d80:	e015      	b.n	8004dae <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8004d82:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3b0a      	subs	r3, #10
 8004d88:	4618      	mov	r0, r3
 8004d8a:	4b89      	ldr	r3, [pc, #548]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	3b0b      	subs	r3, #11
 8004d90:	4619      	mov	r1, r3
 8004d92:	2300      	movs	r3, #0
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	2301      	movs	r3, #1
 8004d98:	9303      	str	r3, [sp, #12]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9302      	str	r3, [sp, #8]
 8004d9e:	230a      	movs	r3, #10
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	4b84      	ldr	r3, [pc, #528]	@ (8004fb4 <HAL_UART_RxCpltCallback+0x4c0>)
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2317      	movs	r3, #23
 8004da8:	2216      	movs	r2, #22
 8004daa:	f7fc fe61 	bl	8001a70 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 8004dae:	4b82      	ldr	r3, [pc, #520]	@ (8004fb8 <HAL_UART_RxCpltCallback+0x4c4>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b6c      	cmp	r3, #108	@ 0x6c
 8004db4:	d15c      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004db6:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d158      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x37c>
 8004dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d154      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x37c>
 8004dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d150      	bne.n	8004e70 <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004dce:	4b78      	ldr	r3, [pc, #480]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b77      	ldr	r3, [pc, #476]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	1c58      	adds	r0, r3, #1
 8004ddc:	4b74      	ldr	r3, [pc, #464]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	4b73      	ldr	r3, [pc, #460]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	4b71      	ldr	r3, [pc, #452]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004dfa:	9400      	str	r4, [sp, #0]
 8004dfc:	f7fc fd88 	bl	8001910 <FillRect>
			p1.direction=3;
 8004e00:	4b6b      	ldr	r3, [pc, #428]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e02:	2203      	movs	r2, #3
 8004e04:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 8004e06:	2103      	movs	r1, #3
 8004e08:	4869      	ldr	r0, [pc, #420]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e0a:	f7fe fc01 	bl	8003610 <playerCanMove>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 8004e14:	4b66      	ldr	r3, [pc, #408]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b65      	ldr	r3, [pc, #404]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	4a64      	ldr	r2, [pc, #400]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e20:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 8004e22:	4b63      	ldr	r3, [pc, #396]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	2b09      	cmp	r3, #9
 8004e28:	d805      	bhi.n	8004e36 <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 8004e2a:	4b61      	ldr	r3, [pc, #388]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	3301      	adds	r3, #1
 8004e30:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e32:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e34:	e002      	b.n	8004e3c <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 8004e36:	4b5e      	ldr	r3, [pc, #376]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 8004e3c:	485c      	ldr	r0, [pc, #368]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e3e:	f7fe fe45 	bl	8003acc <PlayerAnimation>
 8004e42:	e015      	b.n	8004e70 <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8004e44:	4b5a      	ldr	r3, [pc, #360]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3b0a      	subs	r3, #10
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	4b58      	ldr	r3, [pc, #352]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	3b0b      	subs	r3, #11
 8004e52:	4619      	mov	r1, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	230a      	movs	r3, #10
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	4b53      	ldr	r3, [pc, #332]	@ (8004fb4 <HAL_UART_RxCpltCallback+0x4c0>)
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2317      	movs	r3, #23
 8004e6a:	2216      	movs	r2, #22
 8004e6c:	f7fc fe00 	bl	8001a70 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 8004e70:	4b51      	ldr	r3, [pc, #324]	@ (8004fb8 <HAL_UART_RxCpltCallback+0x4c4>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b62      	cmp	r3, #98	@ 0x62
 8004e76:	d14f      	bne.n	8004f18 <HAL_UART_RxCpltCallback+0x424>
		 if (estadoActual == MENU ) {
 8004e78:	4b50      	ldr	r3, [pc, #320]	@ (8004fbc <HAL_UART_RxCpltCallback+0x4c8>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d127      	bne.n	8004ed2 <HAL_UART_RxCpltCallback+0x3de>
			 // IMPRIMIR SPRITE DE UN JUGADOR
			 estadoFuturo = SOLO;
 8004e82:	4b4f      	ldr	r3, [pc, #316]	@ (8004fc0 <HAL_UART_RxCpltCallback+0x4cc>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
			 if (nivelActual1==NIVEL1){
 8004e88:	4b4e      	ldr	r3, [pc, #312]	@ (8004fc4 <HAL_UART_RxCpltCallback+0x4d0>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d142      	bne.n	8004f18 <HAL_UART_RxCpltCallback+0x424>
			 		//Inicializar enemigo 1
			 		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8004e92:	2303      	movs	r3, #3
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	2313      	movs	r3, #19
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2310      	movs	r3, #16
 8004e9c:	2250      	movs	r2, #80	@ 0x50
 8004e9e:	2128      	movs	r1, #40	@ 0x28
 8004ea0:	4849      	ldr	r0, [pc, #292]	@ (8004fc8 <HAL_UART_RxCpltCallback+0x4d4>)
 8004ea2:	f7fd f89b 	bl	8001fdc <initEnemy1>
			 		//Inicializar enemigo 2
			 		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2313      	movs	r3, #19
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2310      	movs	r3, #16
 8004eb0:	2250      	movs	r2, #80	@ 0x50
 8004eb2:	21a0      	movs	r1, #160	@ 0xa0
 8004eb4:	4845      	ldr	r0, [pc, #276]	@ (8004fcc <HAL_UART_RxCpltCallback+0x4d8>)
 8004eb6:	f7fd f891 	bl	8001fdc <initEnemy1>
			 		//Inicializar enemigo 3
			 		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8004eba:	2303      	movs	r3, #3
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	2313      	movs	r3, #19
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	2250      	movs	r2, #80	@ 0x50
 8004ec6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004eca:	4841      	ldr	r0, [pc, #260]	@ (8004fd0 <HAL_UART_RxCpltCallback+0x4dc>)
 8004ecc:	f7fd f886 	bl	8001fdc <initEnemy1>
 8004ed0:	e022      	b.n	8004f18 <HAL_UART_RxCpltCallback+0x424>
		 	 }
		 else {
			 if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004ed2:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11a      	bne.n	8004f10 <HAL_UART_RxCpltCallback+0x41c>
 8004eda:	4b35      	ldr	r3, [pc, #212]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d116      	bne.n	8004f10 <HAL_UART_RxCpltCallback+0x41c>
 8004ee2:	4b33      	ldr	r3, [pc, #204]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d112      	bne.n	8004f10 <HAL_UART_RxCpltCallback+0x41c>
			 			p1.IsAttack=1;
 8004eea:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
			 			p1.animationAttack=0;
 8004ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	659a      	str	r2, [r3, #88]	@ 0x58
			 			PlayerHit(&p1, &e1_1);
 8004ef8:	4933      	ldr	r1, [pc, #204]	@ (8004fc8 <HAL_UART_RxCpltCallback+0x4d4>)
 8004efa:	482d      	ldr	r0, [pc, #180]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004efc:	f7fe fd06 	bl	800390c <PlayerHit>
			 			PlayerHit(&p1, &e1_2);
 8004f00:	4932      	ldr	r1, [pc, #200]	@ (8004fcc <HAL_UART_RxCpltCallback+0x4d8>)
 8004f02:	482b      	ldr	r0, [pc, #172]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004f04:	f7fe fd02 	bl	800390c <PlayerHit>
			 			PlayerHit(&p1, &e1_3);}
 8004f08:	4931      	ldr	r1, [pc, #196]	@ (8004fd0 <HAL_UART_RxCpltCallback+0x4dc>)
 8004f0a:	4829      	ldr	r0, [pc, #164]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004f0c:	f7fe fcfe 	bl	800390c <PlayerHit>
			 			PlayerHit_E2(&p1, &e2_1);
 8004f10:	4930      	ldr	r1, [pc, #192]	@ (8004fd4 <HAL_UART_RxCpltCallback+0x4e0>)
 8004f12:	4827      	ldr	r0, [pc, #156]	@ (8004fb0 <HAL_UART_RxCpltCallback+0x4bc>)
 8004f14:	f7fd fed2 	bl	8002cbc <PlayerHit_E2>
		 }
	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 8004f18:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_UART_RxCpltCallback+0x4c4>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b31      	cmp	r3, #49	@ 0x31
 8004f1e:	d173      	bne.n	8005008 <HAL_UART_RxCpltCallback+0x514>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8004f20:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d16f      	bne.n	8005008 <HAL_UART_RxCpltCallback+0x514>
 8004f28:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d16b      	bne.n	8005008 <HAL_UART_RxCpltCallback+0x514>
 8004f30:	4b29      	ldr	r3, [pc, #164]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d167      	bne.n	8005008 <HAL_UART_RxCpltCallback+0x514>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	1c58      	adds	r0, r3, #1
 8004f46:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	4b23      	ldr	r3, [pc, #140]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	1c59      	adds	r1, r3, #1
 8004f54:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004f64:	9400      	str	r4, [sp, #0]
 8004f66:	f7fc fcd3 	bl	8001910 <FillRect>
				p2.direction=0;
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 8004f70:	2102      	movs	r1, #2
 8004f72:	4819      	ldr	r0, [pc, #100]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f74:	f7fe fb4c 	bl	8003610 <playerCanMove>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02e      	beq.n	8004fdc <HAL_UART_RxCpltCallback+0x4e8>
					p2.y=p2.y-p2.speed;
 8004f7e:	4b16      	ldr	r3, [pc, #88]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	4a13      	ldr	r2, [pc, #76]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f8a:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 8004f8c:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f90:	2b09      	cmp	r3, #9
 8004f92:	d805      	bhi.n	8004fa0 <HAL_UART_RxCpltCallback+0x4ac>
							p2.animationWalkUp+=1;
 8004f94:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f98:	3301      	adds	r3, #1
 8004f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f9e:	e002      	b.n	8004fa6 <HAL_UART_RxCpltCallback+0x4b2>
							} else{
							  p2.animationWalkUp=0;
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 8004fa6:	480c      	ldr	r0, [pc, #48]	@ (8004fd8 <HAL_UART_RxCpltCallback+0x4e4>)
 8004fa8:	f7fe fd90 	bl	8003acc <PlayerAnimation>
 8004fac:	e02c      	b.n	8005008 <HAL_UART_RxCpltCallback+0x514>
 8004fae:	bf00      	nop
 8004fb0:	2001c6ec 	.word	0x2001c6ec
 8004fb4:	2000fca0 	.word	0x2000fca0
 8004fb8:	2001c6e0 	.word	0x2001c6e0
 8004fbc:	20016a78 	.word	0x20016a78
 8004fc0:	2001c9f0 	.word	0x2001c9f0
 8004fc4:	2001c9f1 	.word	0x2001c9f1
 8004fc8:	2001c7d4 	.word	0x2001c7d4
 8004fcc:	2001c808 	.word	0x2001c808
 8004fd0:	2001c83c 	.word	0x2001c83c
 8004fd4:	2001c90c 	.word	0x2001c90c
 8004fd8:	2001c760 	.word	0x2001c760
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8004fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3b08      	subs	r3, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	4b98      	ldr	r3, [pc, #608]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	3b0d      	subs	r3, #13
 8004fea:	4619      	mov	r1, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	9304      	str	r3, [sp, #16]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9303      	str	r3, [sp, #12]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9302      	str	r3, [sp, #8]
 8004ff8:	230a      	movs	r3, #10
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	4b93      	ldr	r3, [pc, #588]	@ (800524c <HAL_UART_RxCpltCallback+0x758>)
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	231a      	movs	r3, #26
 8005002:	2212      	movs	r2, #18
 8005004:	f7fc fd34 	bl	8001a70 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 8005008:	4b91      	ldr	r3, [pc, #580]	@ (8005250 <HAL_UART_RxCpltCallback+0x75c>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b32      	cmp	r3, #50	@ 0x32
 800500e:	d15c      	bne.n	80050ca <HAL_UART_RxCpltCallback+0x5d6>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8005010:	4b8d      	ldr	r3, [pc, #564]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	2b00      	cmp	r3, #0
 8005016:	d158      	bne.n	80050ca <HAL_UART_RxCpltCallback+0x5d6>
 8005018:	4b8b      	ldr	r3, [pc, #556]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d154      	bne.n	80050ca <HAL_UART_RxCpltCallback+0x5d6>
 8005020:	4b89      	ldr	r3, [pc, #548]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d150      	bne.n	80050ca <HAL_UART_RxCpltCallback+0x5d6>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005028:	4b87      	ldr	r3, [pc, #540]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b86      	ldr	r3, [pc, #536]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	1c58      	adds	r0, r3, #1
 8005036:	4b84      	ldr	r3, [pc, #528]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	4b83      	ldr	r3, [pc, #524]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	4b80      	ldr	r3, [pc, #512]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	4b7f      	ldr	r3, [pc, #508]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005054:	9400      	str	r4, [sp, #0]
 8005056:	f7fc fc5b 	bl	8001910 <FillRect>
			p2.direction=1;
 800505a:	4b7b      	ldr	r3, [pc, #492]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800505c:	2201      	movs	r2, #1
 800505e:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 8005060:	2101      	movs	r1, #1
 8005062:	4879      	ldr	r0, [pc, #484]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005064:	f7fe fad4 	bl	8003610 <playerCanMove>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d017      	beq.n	800509e <HAL_UART_RxCpltCallback+0x5aa>
				p2.x=p2.x+p2.speed;
 800506e:	4b76      	ldr	r3, [pc, #472]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b75      	ldr	r3, [pc, #468]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	4413      	add	r3, r2
 8005078:	4a73      	ldr	r2, [pc, #460]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800507a:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 800507c:	4b72      	ldr	r3, [pc, #456]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800507e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005080:	2b09      	cmp	r3, #9
 8005082:	d805      	bhi.n	8005090 <HAL_UART_RxCpltCallback+0x59c>
						p2.animationWalkRight+=1;
 8005084:	4b70      	ldr	r3, [pc, #448]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005088:	3301      	adds	r3, #1
 800508a:	4a6f      	ldr	r2, [pc, #444]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800508c:	6493      	str	r3, [r2, #72]	@ 0x48
 800508e:	e002      	b.n	8005096 <HAL_UART_RxCpltCallback+0x5a2>
						} else{
						  p2.animationWalkRight=0;
 8005090:	4b6d      	ldr	r3, [pc, #436]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005092:	2200      	movs	r2, #0
 8005094:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 8005096:	486c      	ldr	r0, [pc, #432]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005098:	f7fe fd18 	bl	8003acc <PlayerAnimation>
 800509c:	e015      	b.n	80050ca <HAL_UART_RxCpltCallback+0x5d6>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 800509e:	4b6a      	ldr	r3, [pc, #424]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3b0a      	subs	r3, #10
 80050a4:	4618      	mov	r0, r3
 80050a6:	4b68      	ldr	r3, [pc, #416]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	3b0b      	subs	r3, #11
 80050ac:	4619      	mov	r1, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	9304      	str	r3, [sp, #16]
 80050b2:	2301      	movs	r3, #1
 80050b4:	9303      	str	r3, [sp, #12]
 80050b6:	2300      	movs	r3, #0
 80050b8:	9302      	str	r3, [sp, #8]
 80050ba:	230a      	movs	r3, #10
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	4b65      	ldr	r3, [pc, #404]	@ (8005254 <HAL_UART_RxCpltCallback+0x760>)
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2317      	movs	r3, #23
 80050c4:	2216      	movs	r2, #22
 80050c6:	f7fc fcd3 	bl	8001a70 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 80050ca:	4b61      	ldr	r3, [pc, #388]	@ (8005250 <HAL_UART_RxCpltCallback+0x75c>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b33      	cmp	r3, #51	@ 0x33
 80050d0:	d175      	bne.n	80051be <HAL_UART_RxCpltCallback+0x6ca>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80050d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d171      	bne.n	80051be <HAL_UART_RxCpltCallback+0x6ca>
 80050da:	4b5b      	ldr	r3, [pc, #364]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d16d      	bne.n	80051be <HAL_UART_RxCpltCallback+0x6ca>
 80050e2:	4b59      	ldr	r3, [pc, #356]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d169      	bne.n	80051be <HAL_UART_RxCpltCallback+0x6ca>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80050ea:	4b57      	ldr	r3, [pc, #348]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b56      	ldr	r3, [pc, #344]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	1c58      	adds	r0, r3, #1
 80050f8:	4b53      	ldr	r3, [pc, #332]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b52      	ldr	r3, [pc, #328]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	4b50      	ldr	r3, [pc, #320]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	4b4e      	ldr	r3, [pc, #312]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005116:	9400      	str	r4, [sp, #0]
 8005118:	f7fc fbfa 	bl	8001910 <FillRect>
			p2.direction=2;
 800511c:	4b4a      	ldr	r3, [pc, #296]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800511e:	2202      	movs	r2, #2
 8005120:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 8005122:	2100      	movs	r1, #0
 8005124:	4848      	ldr	r0, [pc, #288]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005126:	f7fe fa73 	bl	8003610 <playerCanMove>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d017      	beq.n	8005160 <HAL_UART_RxCpltCallback+0x66c>
		    p2.y=p2.y+p2.speed;
 8005130:	4b45      	ldr	r3, [pc, #276]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b44      	ldr	r3, [pc, #272]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	4413      	add	r3, r2
 800513a:	4a43      	ldr	r2, [pc, #268]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800513c:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 800513e:	4b42      	ldr	r3, [pc, #264]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005142:	2b09      	cmp	r3, #9
 8005144:	d805      	bhi.n	8005152 <HAL_UART_RxCpltCallback+0x65e>
		    		p2.animationWalkDown+=1;
 8005146:	4b40      	ldr	r3, [pc, #256]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	3301      	adds	r3, #1
 800514c:	4a3e      	ldr	r2, [pc, #248]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800514e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005150:	e002      	b.n	8005158 <HAL_UART_RxCpltCallback+0x664>
		    			} else{
		    				p2.animationWalkDown=0;
 8005152:	4b3d      	ldr	r3, [pc, #244]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005154:	2200      	movs	r2, #0
 8005156:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 8005158:	483b      	ldr	r0, [pc, #236]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800515a:	f7fe fcb7 	bl	8003acc <PlayerAnimation>
 800515e:	e02e      	b.n	80051be <HAL_UART_RxCpltCallback+0x6ca>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005160:	4b39      	ldr	r3, [pc, #228]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b38      	ldr	r3, [pc, #224]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	1c58      	adds	r0, r3, #1
 800516e:	4b36      	ldr	r3, [pc, #216]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	4b35      	ldr	r3, [pc, #212]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	4b32      	ldr	r3, [pc, #200]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	4b31      	ldr	r3, [pc, #196]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800518c:	9400      	str	r4, [sp, #0]
 800518e:	f7fc fbbf 	bl	8001910 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8005192:	4b2d      	ldr	r3, [pc, #180]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b08      	subs	r3, #8
 8005198:	4618      	mov	r0, r3
 800519a:	4b2b      	ldr	r3, [pc, #172]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	3b0c      	subs	r3, #12
 80051a0:	4619      	mov	r1, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9303      	str	r3, [sp, #12]
 80051aa:	2300      	movs	r3, #0
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	230a      	movs	r3, #10
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	4b29      	ldr	r3, [pc, #164]	@ (8005258 <HAL_UART_RxCpltCallback+0x764>)
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	231a      	movs	r3, #26
 80051b8:	2212      	movs	r2, #18
 80051ba:	f7fc fc59 	bl	8001a70 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <HAL_UART_RxCpltCallback+0x75c>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b34      	cmp	r3, #52	@ 0x34
 80051c4:	d167      	bne.n	8005296 <HAL_UART_RxCpltCallback+0x7a2>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80051c6:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d163      	bne.n	8005296 <HAL_UART_RxCpltCallback+0x7a2>
 80051ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d15f      	bne.n	8005296 <HAL_UART_RxCpltCallback+0x7a2>
 80051d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d15b      	bne.n	8005296 <HAL_UART_RxCpltCallback+0x7a2>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80051de:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	1c58      	adds	r0, r3, #1
 80051ec:	4b16      	ldr	r3, [pc, #88]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	1c59      	adds	r1, r3, #1
 80051fa:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800520a:	9400      	str	r4, [sp, #0]
 800520c:	f7fc fb80 	bl	8001910 <FillRect>
			p2.direction=3;
 8005210:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005212:	2203      	movs	r2, #3
 8005214:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 8005216:	2103      	movs	r1, #3
 8005218:	480b      	ldr	r0, [pc, #44]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800521a:	f7fe f9f9 	bl	8003610 <playerCanMove>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_UART_RxCpltCallback+0x776>
				p2.x=p2.x-p2.speed;
 8005224:	4b08      	ldr	r3, [pc, #32]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	4a06      	ldr	r2, [pc, #24]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005230:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 8005232:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	2b09      	cmp	r3, #9
 8005238:	d810      	bhi.n	800525c <HAL_UART_RxCpltCallback+0x768>
						p2.animationWalkLeft+=1;
 800523a:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	3301      	adds	r3, #1
 8005240:	4a01      	ldr	r2, [pc, #4]	@ (8005248 <HAL_UART_RxCpltCallback+0x754>)
 8005242:	6453      	str	r3, [r2, #68]	@ 0x44
 8005244:	e00d      	b.n	8005262 <HAL_UART_RxCpltCallback+0x76e>
 8005246:	bf00      	nop
 8005248:	2001c760 	.word	0x2001c760
 800524c:	20012428 	.word	0x20012428
 8005250:	2001c6e0 	.word	0x2001c6e0
 8005254:	2000fca0 	.word	0x2000fca0
 8005258:	200148b8 	.word	0x200148b8
						} else{
						  p2.animationWalkLeft=0;
 800525c:	4b68      	ldr	r3, [pc, #416]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 800525e:	2200      	movs	r2, #0
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 8005262:	4867      	ldr	r0, [pc, #412]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 8005264:	f7fe fc32 	bl	8003acc <PlayerAnimation>
 8005268:	e015      	b.n	8005296 <HAL_UART_RxCpltCallback+0x7a2>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 800526a:	4b65      	ldr	r3, [pc, #404]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3b0a      	subs	r3, #10
 8005270:	4618      	mov	r0, r3
 8005272:	4b63      	ldr	r3, [pc, #396]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	3b0b      	subs	r3, #11
 8005278:	4619      	mov	r1, r3
 800527a:	2300      	movs	r3, #0
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	2300      	movs	r3, #0
 8005280:	9303      	str	r3, [sp, #12]
 8005282:	2300      	movs	r3, #0
 8005284:	9302      	str	r3, [sp, #8]
 8005286:	230a      	movs	r3, #10
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	4b5e      	ldr	r3, [pc, #376]	@ (8005404 <HAL_UART_RxCpltCallback+0x910>)
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2317      	movs	r3, #23
 8005290:	2216      	movs	r2, #22
 8005292:	f7fc fbed 	bl	8001a70 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 8005296:	4b5c      	ldr	r3, [pc, #368]	@ (8005408 <HAL_UART_RxCpltCallback+0x914>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b35      	cmp	r3, #53	@ 0x35
 800529c:	d12b      	bne.n	80052f6 <HAL_UART_RxCpltCallback+0x802>
		if (estadoActual == MENU ) {
 800529e:	4b5b      	ldr	r3, [pc, #364]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <HAL_UART_RxCpltCallback+0x7bc>
					 // IMPRIMIR SPRITE DE DOS JUGADORES
			estadoFuturo = DUO;
 80052a8:	4b59      	ldr	r3, [pc, #356]	@ (8005410 <HAL_UART_RxCpltCallback+0x91c>)
 80052aa:	2202      	movs	r2, #2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e022      	b.n	80052f6 <HAL_UART_RxCpltCallback+0x802>
		}
		else {
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80052b0:	4b53      	ldr	r3, [pc, #332]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11a      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x7fa>
 80052b8:	4b51      	ldr	r3, [pc, #324]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d116      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x7fa>
 80052c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d112      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x7fa>
				p2.IsAttack=1;
 80052c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
				p2.animationAttack=0;
 80052ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	659a      	str	r2, [r3, #88]	@ 0x58
				PlayerHit(&p2, &e1_1);
 80052d6:	494f      	ldr	r1, [pc, #316]	@ (8005414 <HAL_UART_RxCpltCallback+0x920>)
 80052d8:	4849      	ldr	r0, [pc, #292]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052da:	f7fe fb17 	bl	800390c <PlayerHit>
				PlayerHit(&p2, &e1_2);
 80052de:	494e      	ldr	r1, [pc, #312]	@ (8005418 <HAL_UART_RxCpltCallback+0x924>)
 80052e0:	4847      	ldr	r0, [pc, #284]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052e2:	f7fe fb13 	bl	800390c <PlayerHit>
				PlayerHit(&p2, &e1_3);}
 80052e6:	494d      	ldr	r1, [pc, #308]	@ (800541c <HAL_UART_RxCpltCallback+0x928>)
 80052e8:	4845      	ldr	r0, [pc, #276]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052ea:	f7fe fb0f 	bl	800390c <PlayerHit>
				PlayerHit_E2(&p2, &e2_2);
 80052ee:	494c      	ldr	r1, [pc, #304]	@ (8005420 <HAL_UART_RxCpltCallback+0x92c>)
 80052f0:	4843      	ldr	r0, [pc, #268]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80052f2:	f7fd fce3 	bl	8002cbc <PlayerHit_E2>
		}
	}

	if (buffer[0]=='6'){
 80052f6:	4b44      	ldr	r3, [pc, #272]	@ (8005408 <HAL_UART_RxCpltCallback+0x914>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b36      	cmp	r3, #54	@ 0x36
 80052fc:	d177      	bne.n	80053ee <HAL_UART_RxCpltCallback+0x8fa>
		if (estadoActual == MENU){
 80052fe:	4b43      	ldr	r3, [pc, #268]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_UART_RxCpltCallback+0x81e>
			estadoActual = estadoFuturo;
 8005308:	4b41      	ldr	r3, [pc, #260]	@ (8005410 <HAL_UART_RxCpltCallback+0x91c>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	4b3f      	ldr	r3, [pc, #252]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 8005310:	701a      	strb	r2, [r3, #0]
		}
		// Solo cambia a PAUSA si estamos en SOLO o DUO
		if (estadoActual == SOLO || estadoActual == DUO) {
 8005312:	4b3e      	ldr	r3, [pc, #248]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d004      	beq.n	8005326 <HAL_UART_RxCpltCallback+0x832>
 800531c:	4b3b      	ldr	r3, [pc, #236]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d10d      	bne.n	8005342 <HAL_UART_RxCpltCallback+0x84e>
			// Solo cambia si no estamos ya en PAUSA
			if (estadoActual != PAUSA) {
 8005326:	4b39      	ldr	r3, [pc, #228]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d05e      	beq.n	80053ee <HAL_UART_RxCpltCallback+0x8fa>
				estadoAnterior = estadoActual;  // Guarda el estado actual antes de cambiar
 8005330:	4b36      	ldr	r3, [pc, #216]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4b3b      	ldr	r3, [pc, #236]	@ (8005424 <HAL_UART_RxCpltCallback+0x930>)
 8005338:	701a      	strb	r2, [r3, #0]
				estadoActual = PAUSA;           // Cambia a PAUSA
 800533a:	4b34      	ldr	r3, [pc, #208]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 800533c:	2203      	movs	r2, #3
 800533e:	701a      	strb	r2, [r3, #0]
			if (estadoActual != PAUSA) {
 8005340:	e055      	b.n	80053ee <HAL_UART_RxCpltCallback+0x8fa>
			}
		} else if (estadoActual == PAUSA) {
 8005342:	4b32      	ldr	r3, [pc, #200]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b03      	cmp	r3, #3
 800534a:	d150      	bne.n	80053ee <HAL_UART_RxCpltCallback+0x8fa>
			// Si estamos en PAUSA, regresa al estado anterior
			//LCD_Bitmap(0, 0, 320, 240, fondo);
			if (estadoAnterior == SOLO){
 800534c:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <HAL_UART_RxCpltCallback+0x930>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d115      	bne.n	8005382 <HAL_UART_RxCpltCallback+0x88e>
				LCD_Sprite(p1.x - (18 / 2)+2, p1.y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8005356:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <HAL_UART_RxCpltCallback+0x934>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3b07      	subs	r3, #7
 800535c:	4618      	mov	r0, r3
 800535e:	4b32      	ldr	r3, [pc, #200]	@ (8005428 <HAL_UART_RxCpltCallback+0x934>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	3b0f      	subs	r3, #15
 8005364:	4619      	mov	r1, r3
 8005366:	2300      	movs	r3, #0
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	2300      	movs	r3, #0
 800536c:	9303      	str	r3, [sp, #12]
 800536e:	2305      	movs	r3, #5
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	2306      	movs	r3, #6
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <HAL_UART_RxCpltCallback+0x938>)
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	2317      	movs	r3, #23
 800537c:	2212      	movs	r2, #18
 800537e:	f7fc fb77 	bl	8001a70 <LCD_Sprite>
			}
			if (estadoAnterior == DUO){
 8005382:	4b28      	ldr	r3, [pc, #160]	@ (8005424 <HAL_UART_RxCpltCallback+0x930>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d12b      	bne.n	80053e4 <HAL_UART_RxCpltCallback+0x8f0>
				LCD_Sprite(p1.x - (18 / 2)+2, p1.y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 800538c:	4b26      	ldr	r3, [pc, #152]	@ (8005428 <HAL_UART_RxCpltCallback+0x934>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3b07      	subs	r3, #7
 8005392:	4618      	mov	r0, r3
 8005394:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <HAL_UART_RxCpltCallback+0x934>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	3b0f      	subs	r3, #15
 800539a:	4619      	mov	r1, r3
 800539c:	2300      	movs	r3, #0
 800539e:	9304      	str	r3, [sp, #16]
 80053a0:	2300      	movs	r3, #0
 80053a2:	9303      	str	r3, [sp, #12]
 80053a4:	2305      	movs	r3, #5
 80053a6:	9302      	str	r3, [sp, #8]
 80053a8:	2306      	movs	r3, #6
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <HAL_UART_RxCpltCallback+0x938>)
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	2317      	movs	r3, #23
 80053b2:	2212      	movs	r2, #18
 80053b4:	f7fc fb5c 	bl	8001a70 <LCD_Sprite>
				LCD_Sprite(p2.x - (18 / 2)+2, p2.y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3b07      	subs	r3, #7
 80053be:	4618      	mov	r0, r3
 80053c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005400 <HAL_UART_RxCpltCallback+0x90c>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	3b0f      	subs	r3, #15
 80053c6:	4619      	mov	r1, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	2305      	movs	r3, #5
 80053d2:	9302      	str	r3, [sp, #8]
 80053d4:	2306      	movs	r3, #6
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	4b14      	ldr	r3, [pc, #80]	@ (800542c <HAL_UART_RxCpltCallback+0x938>)
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2317      	movs	r3, #23
 80053de:	2212      	movs	r2, #18
 80053e0:	f7fc fb46 	bl	8001a70 <LCD_Sprite>
			}

			estadoActual = estadoAnterior; // Restaura el estado anterior
 80053e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <HAL_UART_RxCpltCallback+0x930>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b08      	ldr	r3, [pc, #32]	@ (800540c <HAL_UART_RxCpltCallback+0x918>)
 80053ec:	701a      	strb	r2, [r3, #0]
		}
	}

	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80053ee:	2201      	movs	r2, #1
 80053f0:	4905      	ldr	r1, [pc, #20]	@ (8005408 <HAL_UART_RxCpltCallback+0x914>)
 80053f2:	480f      	ldr	r0, [pc, #60]	@ (8005430 <HAL_UART_RxCpltCallback+0x93c>)
 80053f4:	f002 f865 	bl	80074c2 <HAL_UART_Receive_IT>
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd90      	pop	{r4, r7, pc}
 8005400:	2001c760 	.word	0x2001c760
 8005404:	2000fca0 	.word	0x2000fca0
 8005408:	2001c6e0 	.word	0x2001c6e0
 800540c:	20016a78 	.word	0x20016a78
 8005410:	2001c9f0 	.word	0x2001c9f0
 8005414:	2001c7d4 	.word	0x2001c7d4
 8005418:	2001c808 	.word	0x2001c808
 800541c:	2001c83c 	.word	0x2001c83c
 8005420:	2001c950 	.word	0x2001c950
 8005424:	20016a79 	.word	0x20016a79
 8005428:	2001c6ec 	.word	0x2001c6ec
 800542c:	20007df4 	.word	0x20007df4
 8005430:	20017b98 	.word	0x20017b98

08005434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005438:	b672      	cpsid	i
}
 800543a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <Error_Handler+0x8>

08005440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
 800544a:	4b10      	ldr	r3, [pc, #64]	@ (800548c <HAL_MspInit+0x4c>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	4a0f      	ldr	r2, [pc, #60]	@ (800548c <HAL_MspInit+0x4c>)
 8005450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005454:	6453      	str	r3, [r2, #68]	@ 0x44
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <HAL_MspInit+0x4c>)
 8005458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4b09      	ldr	r3, [pc, #36]	@ (800548c <HAL_MspInit+0x4c>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	4a08      	ldr	r2, [pc, #32]	@ (800548c <HAL_MspInit+0x4c>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005470:	6413      	str	r3, [r2, #64]	@ 0x40
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_MspInit+0x4c>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800

08005490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	@ 0x28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	f107 0314 	add.w	r3, r7, #20
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <HAL_SPI_MspInit+0x84>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d12b      	bne.n	800550a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	4b18      	ldr	r3, [pc, #96]	@ (8005518 <HAL_SPI_MspInit+0x88>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <HAL_SPI_MspInit+0x88>)
 80054bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80054c2:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <HAL_SPI_MspInit+0x88>)
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <HAL_SPI_MspInit+0x88>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	4a10      	ldr	r2, [pc, #64]	@ (8005518 <HAL_SPI_MspInit+0x88>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80054de:	4b0e      	ldr	r3, [pc, #56]	@ (8005518 <HAL_SPI_MspInit+0x88>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80054ea:	23e0      	movs	r3, #224	@ 0xe0
 80054ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ee:	2302      	movs	r3, #2
 80054f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f6:	2303      	movs	r3, #3
 80054f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054fa:	2305      	movs	r3, #5
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fe:	f107 0314 	add.w	r3, r7, #20
 8005502:	4619      	mov	r1, r3
 8005504:	4805      	ldr	r0, [pc, #20]	@ (800551c <HAL_SPI_MspInit+0x8c>)
 8005506:	f000 fb99 	bl	8005c3c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800550a:	bf00      	nop
 800550c:	3728      	adds	r7, #40	@ 0x28
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40013000 	.word	0x40013000
 8005518:	40023800 	.word	0x40023800
 800551c:	40020000 	.word	0x40020000

08005520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	@ 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a49      	ldr	r2, [pc, #292]	@ (8005664 <HAL_UART_MspInit+0x144>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d153      	bne.n	80055ea <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	4b48      	ldr	r3, [pc, #288]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	4a47      	ldr	r2, [pc, #284]	@ (8005668 <HAL_UART_MspInit+0x148>)
 800554c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005550:	6413      	str	r3, [r2, #64]	@ 0x40
 8005552:	4b45      	ldr	r3, [pc, #276]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	4b41      	ldr	r3, [pc, #260]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	4a40      	ldr	r2, [pc, #256]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6313      	str	r3, [r2, #48]	@ 0x30
 800556e:	4b3e      	ldr	r3, [pc, #248]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	4b3a      	ldr	r3, [pc, #232]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	4a39      	ldr	r2, [pc, #228]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	6313      	str	r3, [r2, #48]	@ 0x30
 800558a:	4b37      	ldr	r3, [pc, #220]	@ (8005668 <HAL_UART_MspInit+0x148>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800559a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559c:	2302      	movs	r3, #2
 800559e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a4:	2303      	movs	r3, #3
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80055a8:	2308      	movs	r3, #8
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055ac:	f107 031c 	add.w	r3, r7, #28
 80055b0:	4619      	mov	r1, r3
 80055b2:	482e      	ldr	r0, [pc, #184]	@ (800566c <HAL_UART_MspInit+0x14c>)
 80055b4:	f000 fb42 	bl	8005c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055b8:	2304      	movs	r3, #4
 80055ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055bc:	2302      	movs	r3, #2
 80055be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c4:	2303      	movs	r3, #3
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80055c8:	2308      	movs	r3, #8
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055cc:	f107 031c 	add.w	r3, r7, #28
 80055d0:	4619      	mov	r1, r3
 80055d2:	4827      	ldr	r0, [pc, #156]	@ (8005670 <HAL_UART_MspInit+0x150>)
 80055d4:	f000 fb32 	bl	8005c3c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80055d8:	2200      	movs	r2, #0
 80055da:	2100      	movs	r1, #0
 80055dc:	2035      	movs	r0, #53	@ 0x35
 80055de:	f000 fa58 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80055e2:	2035      	movs	r0, #53	@ 0x35
 80055e4:	f000 fa71 	bl	8005aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80055e8:	e038      	b.n	800565c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a21      	ldr	r2, [pc, #132]	@ (8005674 <HAL_UART_MspInit+0x154>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d133      	bne.n	800565c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005668 <HAL_UART_MspInit+0x148>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005668 <HAL_UART_MspInit+0x148>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005602:	6413      	str	r3, [r2, #64]	@ 0x40
 8005604:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005610:	2300      	movs	r3, #0
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	4a13      	ldr	r2, [pc, #76]	@ (8005668 <HAL_UART_MspInit+0x148>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005620:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_UART_MspInit+0x148>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800562c:	230c      	movs	r3, #12
 800562e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005630:	2302      	movs	r3, #2
 8005632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005638:	2303      	movs	r3, #3
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800563c:	2307      	movs	r3, #7
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005640:	f107 031c 	add.w	r3, r7, #28
 8005644:	4619      	mov	r1, r3
 8005646:	480c      	ldr	r0, [pc, #48]	@ (8005678 <HAL_UART_MspInit+0x158>)
 8005648:	f000 faf8 	bl	8005c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800564c:	2200      	movs	r2, #0
 800564e:	2100      	movs	r1, #0
 8005650:	2026      	movs	r0, #38	@ 0x26
 8005652:	f000 fa1e 	bl	8005a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005656:	2026      	movs	r0, #38	@ 0x26
 8005658:	f000 fa37 	bl	8005aca <HAL_NVIC_EnableIRQ>
}
 800565c:	bf00      	nop
 800565e:	3730      	adds	r7, #48	@ 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40005000 	.word	0x40005000
 8005668:	40023800 	.word	0x40023800
 800566c:	40020800 	.word	0x40020800
 8005670:	40020c00 	.word	0x40020c00
 8005674:	40004400 	.word	0x40004400
 8005678:	40020000 	.word	0x40020000

0800567c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005680:	bf00      	nop
 8005682:	e7fd      	b.n	8005680 <NMI_Handler+0x4>

08005684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <HardFault_Handler+0x4>

0800568c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <MemManage_Handler+0x4>

08005694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <BusFault_Handler+0x4>

0800569c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <UsageFault_Handler+0x4>

080056a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056b2:	b480      	push	{r7}
 80056b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056b6:	bf00      	nop
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1>0){
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <SysTick_Handler+0x38>)
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <SysTick_Handler+0x18>
		Timer1--;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <SysTick_Handler+0x38>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	4b08      	ldr	r3, [pc, #32]	@ (8005708 <SysTick_Handler+0x38>)
 80056e6:	801a      	strh	r2, [r3, #0]
	}
	if (Timer2>0){
 80056e8:	4b08      	ldr	r3, [pc, #32]	@ (800570c <SysTick_Handler+0x3c>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <SysTick_Handler+0x2c>
		Timer2--;
 80056f0:	4b06      	ldr	r3, [pc, #24]	@ (800570c <SysTick_Handler+0x3c>)
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	4b04      	ldr	r3, [pc, #16]	@ (800570c <SysTick_Handler+0x3c>)
 80056fa:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056fc:	f000 f8aa 	bl	8005854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8005700:	f000 f9fd 	bl	8005afe <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20016ab8 	.word	0x20016ab8
 800570c:	20016aba 	.word	0x20016aba

08005710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005714:	4802      	ldr	r0, [pc, #8]	@ (8005720 <USART2_IRQHandler+0x10>)
 8005716:	f001 fef9 	bl	800750c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20017b98 	.word	0x20017b98

08005724 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005728:	4802      	ldr	r0, [pc, #8]	@ (8005734 <UART5_IRQHandler+0x10>)
 800572a:	f001 feef 	bl	800750c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20017b50 	.word	0x20017b50

08005738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <SystemInit+0x20>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005742:	4a05      	ldr	r2, [pc, #20]	@ (8005758 <SystemInit+0x20>)
 8005744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800575c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005794 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005760:	f7ff ffea 	bl	8005738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005764:	480c      	ldr	r0, [pc, #48]	@ (8005798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005766:	490d      	ldr	r1, [pc, #52]	@ (800579c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005768:	4a0d      	ldr	r2, [pc, #52]	@ (80057a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800576a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800576c:	e002      	b.n	8005774 <LoopCopyDataInit>

0800576e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800576e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005772:	3304      	adds	r3, #4

08005774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005778:	d3f9      	bcc.n	800576e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800577a:	4a0a      	ldr	r2, [pc, #40]	@ (80057a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800577c:	4c0a      	ldr	r4, [pc, #40]	@ (80057a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005780:	e001      	b.n	8005786 <LoopFillZerobss>

08005782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005784:	3204      	adds	r2, #4

08005786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005788:	d3fb      	bcc.n	8005782 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800578a:	f005 fd9d 	bl	800b2c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800578e:	f7fe fc77 	bl	8004080 <main>
  bx  lr    
 8005792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800579c:	20016a9c 	.word	0x20016a9c
  ldr r2, =_sidata
 80057a0:	0800b8b4 	.word	0x0800b8b4
  ldr r2, =_sbss
 80057a4:	20016a9c 	.word	0x20016a9c
  ldr r4, =_ebss
 80057a8:	2001cc38 	.word	0x2001cc38

080057ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057ac:	e7fe      	b.n	80057ac <ADC_IRQHandler>
	...

080057b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057b4:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <HAL_Init+0x40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0d      	ldr	r2, [pc, #52]	@ (80057f0 <HAL_Init+0x40>)
 80057ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <HAL_Init+0x40>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <HAL_Init+0x40>)
 80057c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057cc:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <HAL_Init+0x40>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a07      	ldr	r2, [pc, #28]	@ (80057f0 <HAL_Init+0x40>)
 80057d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d8:	2003      	movs	r0, #3
 80057da:	f000 f94f 	bl	8005a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057de:	200f      	movs	r0, #15
 80057e0:	f000 f808 	bl	80057f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057e4:	f7ff fe2c 	bl	8005440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023c00 	.word	0x40023c00

080057f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057fc:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <HAL_InitTick+0x54>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <HAL_InitTick+0x58>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	4619      	mov	r1, r3
 8005806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800580a:	fbb3 f3f1 	udiv	r3, r3, r1
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f967 	bl	8005ae6 <HAL_SYSTICK_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e00e      	b.n	8005840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b0f      	cmp	r3, #15
 8005826:	d80a      	bhi.n	800583e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005828:	2200      	movs	r2, #0
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	f000 f92f 	bl	8005a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005834:	4a06      	ldr	r2, [pc, #24]	@ (8005850 <HAL_InitTick+0x5c>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20016a7c 	.word	0x20016a7c
 800584c:	20016a84 	.word	0x20016a84
 8005850:	20016a80 	.word	0x20016a80

08005854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005858:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <HAL_IncTick+0x20>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <HAL_IncTick+0x24>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4413      	add	r3, r2
 8005864:	4a04      	ldr	r2, [pc, #16]	@ (8005878 <HAL_IncTick+0x24>)
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20016a84 	.word	0x20016a84
 8005878:	2001c9f8 	.word	0x2001c9f8

0800587c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return uwTick;
 8005880:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <HAL_GetTick+0x14>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	2001c9f8 	.word	0x2001c9f8

08005894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800589c:	f7ff ffee 	bl	800587c <HAL_GetTick>
 80058a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d005      	beq.n	80058ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ae:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <HAL_Delay+0x44>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058ba:	bf00      	nop
 80058bc:	f7ff ffde 	bl	800587c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d8f7      	bhi.n	80058bc <HAL_Delay+0x28>
  {
  }
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20016a84 	.word	0x20016a84

080058dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <__NVIC_SetPriorityGrouping+0x44>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800590e:	4a04      	ldr	r2, [pc, #16]	@ (8005920 <__NVIC_SetPriorityGrouping+0x44>)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	60d3      	str	r3, [r2, #12]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <__NVIC_GetPriorityGrouping+0x18>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	f003 0307 	and.w	r3, r3, #7
}
 8005932:	4618      	mov	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800594a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594e:	2b00      	cmp	r3, #0
 8005950:	db0b      	blt.n	800596a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	f003 021f 	and.w	r2, r3, #31
 8005958:	4907      	ldr	r1, [pc, #28]	@ (8005978 <__NVIC_EnableIRQ+0x38>)
 800595a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	2001      	movs	r0, #1
 8005962:	fa00 f202 	lsl.w	r2, r0, r2
 8005966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	e000e100 	.word	0xe000e100

0800597c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	6039      	str	r1, [r7, #0]
 8005986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598c:	2b00      	cmp	r3, #0
 800598e:	db0a      	blt.n	80059a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	490c      	ldr	r1, [pc, #48]	@ (80059c8 <__NVIC_SetPriority+0x4c>)
 8005996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599a:	0112      	lsls	r2, r2, #4
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	440b      	add	r3, r1
 80059a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059a4:	e00a      	b.n	80059bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	4908      	ldr	r1, [pc, #32]	@ (80059cc <__NVIC_SetPriority+0x50>)
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	3b04      	subs	r3, #4
 80059b4:	0112      	lsls	r2, r2, #4
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	440b      	add	r3, r1
 80059ba:	761a      	strb	r2, [r3, #24]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	e000e100 	.word	0xe000e100
 80059cc:	e000ed00 	.word	0xe000ed00

080059d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b089      	sub	sp, #36	@ 0x24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f1c3 0307 	rsb	r3, r3, #7
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	bf28      	it	cs
 80059ee:	2304      	movcs	r3, #4
 80059f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3304      	adds	r3, #4
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d902      	bls.n	8005a00 <NVIC_EncodePriority+0x30>
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3b03      	subs	r3, #3
 80059fe:	e000      	b.n	8005a02 <NVIC_EncodePriority+0x32>
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43da      	mvns	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	401a      	ands	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a18:	f04f 31ff 	mov.w	r1, #4294967295
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	43d9      	mvns	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	4313      	orrs	r3, r2
         );
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3724      	adds	r7, #36	@ 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a48:	d301      	bcc.n	8005a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e00f      	b.n	8005a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a78 <SysTick_Config+0x40>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a56:	210f      	movs	r1, #15
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5c:	f7ff ff8e 	bl	800597c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a60:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <SysTick_Config+0x40>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a66:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <SysTick_Config+0x40>)
 8005a68:	2207      	movs	r2, #7
 8005a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	e000e010 	.word	0xe000e010

08005a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff29 	bl	80058dc <__NVIC_SetPriorityGrouping>
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	4603      	mov	r3, r0
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005aa4:	f7ff ff3e 	bl	8005924 <__NVIC_GetPriorityGrouping>
 8005aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f7ff ff8e 	bl	80059d0 <NVIC_EncodePriority>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff ff5d 	bl	800597c <__NVIC_SetPriority>
}
 8005ac2:	bf00      	nop
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff ff31 	bl	8005940 <__NVIC_EnableIRQ>
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ffa2 	bl	8005a38 <SysTick_Config>
 8005af4:	4603      	mov	r3, r0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005b02:	f000 f802 	bl	8005b0a <HAL_SYSTICK_Callback>
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b26:	f7ff fea9 	bl	800587c <HAL_GetTick>
 8005b2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d008      	beq.n	8005b4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2280      	movs	r2, #128	@ 0x80
 8005b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e052      	b.n	8005bf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0216 	bic.w	r2, r2, #22
 8005b58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <HAL_DMA_Abort+0x62>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0208 	bic.w	r2, r2, #8
 8005b88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0201 	bic.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b9a:	e013      	b.n	8005bc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b9c:	f7ff fe6e 	bl	800587c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d90c      	bls.n	8005bc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e015      	b.n	8005bf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e4      	bne.n	8005b9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd6:	223f      	movs	r2, #63	@ 0x3f
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d004      	beq.n	8005c16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2280      	movs	r2, #128	@ 0x80
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e00c      	b.n	8005c30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2205      	movs	r2, #5
 8005c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	@ 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	e165      	b.n	8005f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c58:	2201      	movs	r2, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	f040 8154 	bne.w	8005f1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d005      	beq.n	8005c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d130      	bne.n	8005cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	2203      	movs	r2, #3
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 0201 	and.w	r2, r3, #1
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 0303 	and.w	r3, r3, #3
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d017      	beq.n	8005d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	2203      	movs	r2, #3
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d123      	bne.n	8005d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	08da      	lsrs	r2, r3, #3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3208      	adds	r2, #8
 8005d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	220f      	movs	r2, #15
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	08da      	lsrs	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3208      	adds	r2, #8
 8005d7a:	69b9      	ldr	r1, [r7, #24]
 8005d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4013      	ands	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 0203 	and.w	r2, r3, #3
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80ae 	beq.w	8005f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8005f3c <HAL_GPIO_Init+0x300>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	4a5c      	ldr	r2, [pc, #368]	@ (8005f3c <HAL_GPIO_Init+0x300>)
 8005dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f3c <HAL_GPIO_Init+0x300>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dde:	4a58      	ldr	r2, [pc, #352]	@ (8005f40 <HAL_GPIO_Init+0x304>)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	3302      	adds	r3, #2
 8005de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	220f      	movs	r2, #15
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a4f      	ldr	r2, [pc, #316]	@ (8005f44 <HAL_GPIO_Init+0x308>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d025      	beq.n	8005e56 <HAL_GPIO_Init+0x21a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a4e      	ldr	r2, [pc, #312]	@ (8005f48 <HAL_GPIO_Init+0x30c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <HAL_GPIO_Init+0x216>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a4d      	ldr	r2, [pc, #308]	@ (8005f4c <HAL_GPIO_Init+0x310>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d019      	beq.n	8005e4e <HAL_GPIO_Init+0x212>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8005f50 <HAL_GPIO_Init+0x314>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_GPIO_Init+0x20e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a4b      	ldr	r2, [pc, #300]	@ (8005f54 <HAL_GPIO_Init+0x318>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00d      	beq.n	8005e46 <HAL_GPIO_Init+0x20a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f58 <HAL_GPIO_Init+0x31c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <HAL_GPIO_Init+0x206>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a49      	ldr	r2, [pc, #292]	@ (8005f5c <HAL_GPIO_Init+0x320>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <HAL_GPIO_Init+0x202>
 8005e3a:	2306      	movs	r3, #6
 8005e3c:	e00c      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e3e:	2307      	movs	r3, #7
 8005e40:	e00a      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e42:	2305      	movs	r3, #5
 8005e44:	e008      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e46:	2304      	movs	r3, #4
 8005e48:	e006      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e004      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e002      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_GPIO_Init+0x21c>
 8005e56:	2300      	movs	r3, #0
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	f002 0203 	and.w	r2, r2, #3
 8005e5e:	0092      	lsls	r2, r2, #2
 8005e60:	4093      	lsls	r3, r2
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e68:	4935      	ldr	r1, [pc, #212]	@ (8005f40 <HAL_GPIO_Init+0x304>)
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e76:	4b3a      	ldr	r3, [pc, #232]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e9a:	4a31      	ldr	r2, [pc, #196]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ec4:	4a26      	ldr	r2, [pc, #152]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005eca:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eee:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f18:	4a11      	ldr	r2, [pc, #68]	@ (8005f60 <HAL_GPIO_Init+0x324>)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3301      	adds	r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	f67f ae96 	bls.w	8005c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	@ 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40013800 	.word	0x40013800
 8005f44:	40020000 	.word	0x40020000
 8005f48:	40020400 	.word	0x40020400
 8005f4c:	40020800 	.word	0x40020800
 8005f50:	40020c00 	.word	0x40020c00
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40021400 	.word	0x40021400
 8005f5c:	40021800 	.word	0x40021800
 8005f60:	40013c00 	.word	0x40013c00

08005f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
 8005f70:	4613      	mov	r3, r2
 8005f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f74:	787b      	ldrb	r3, [r7, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f80:	e003      	b.n	8005f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f82:	887b      	ldrh	r3, [r7, #2]
 8005f84:	041a      	lsls	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	619a      	str	r2, [r3, #24]
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0cc      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fac:	4b68      	ldr	r3, [pc, #416]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90c      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b65      	ldr	r3, [pc, #404]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a52      	ldr	r2, [pc, #328]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800600e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d044      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d119      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d003      	beq.n	8006056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006056:	4b3f      	ldr	r3, [pc, #252]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e06f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006066:	4b3b      	ldr	r3, [pc, #236]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e067      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006076:	4b37      	ldr	r3, [pc, #220]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 0203 	bic.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4934      	ldr	r1, [pc, #208]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006088:	f7ff fbf8 	bl	800587c <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7ff fbf4 	bl	800587c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e04f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 020c 	and.w	r2, r3, #12
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d1eb      	bne.n	8006090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b8:	4b25      	ldr	r3, [pc, #148]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d20c      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c6:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610a:	4b12      	ldr	r3, [pc, #72]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f855 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490a      	ldr	r1, [pc, #40]	@ (8006158 <HAL_RCC_ClockConfig+0x1c0>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fb58 	bl	80057f4 <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00
 8006154:	40023800 	.word	0x40023800
 8006158:	0800b44c 	.word	0x0800b44c
 800615c:	20016a7c 	.word	0x20016a7c
 8006160:	20016a80 	.word	0x20016a80

08006164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006168:	4b03      	ldr	r3, [pc, #12]	@ (8006178 <HAL_RCC_GetHCLKFreq+0x14>)
 800616a:	681b      	ldr	r3, [r3, #0]
}
 800616c:	4618      	mov	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20016a7c 	.word	0x20016a7c

0800617c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006180:	f7ff fff0 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b05      	ldr	r3, [pc, #20]	@ (800619c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0a9b      	lsrs	r3, r3, #10
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4903      	ldr	r1, [pc, #12]	@ (80061a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	0800b45c 	.word	0x0800b45c

080061a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061a8:	f7ff ffdc 	bl	8006164 <HAL_RCC_GetHCLKFreq>
 80061ac:	4602      	mov	r2, r0
 80061ae:	4b05      	ldr	r3, [pc, #20]	@ (80061c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	0b5b      	lsrs	r3, r3, #13
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	4903      	ldr	r1, [pc, #12]	@ (80061c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ba:	5ccb      	ldrb	r3, [r1, r3]
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40023800 	.word	0x40023800
 80061c8:	0800b45c 	.word	0x0800b45c

080061cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d0:	b0a6      	sub	sp, #152	@ 0x98
 80061d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061f2:	4bc8      	ldr	r3, [pc, #800]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	f200 817e 	bhi.w	80064fc <HAL_RCC_GetSysClockFreq+0x330>
 8006200:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800623d 	.word	0x0800623d
 800620c:	080064fd 	.word	0x080064fd
 8006210:	080064fd 	.word	0x080064fd
 8006214:	080064fd 	.word	0x080064fd
 8006218:	08006245 	.word	0x08006245
 800621c:	080064fd 	.word	0x080064fd
 8006220:	080064fd 	.word	0x080064fd
 8006224:	080064fd 	.word	0x080064fd
 8006228:	0800624d 	.word	0x0800624d
 800622c:	080064fd 	.word	0x080064fd
 8006230:	080064fd 	.word	0x080064fd
 8006234:	080064fd 	.word	0x080064fd
 8006238:	080063b7 	.word	0x080063b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800623c:	4bb6      	ldr	r3, [pc, #728]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x34c>)
 800623e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8006242:	e15f      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006244:	4bb5      	ldr	r3, [pc, #724]	@ (800651c <HAL_RCC_GetSysClockFreq+0x350>)
 8006246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800624a:	e15b      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800624c:	4bb1      	ldr	r3, [pc, #708]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006258:	4bae      	ldr	r3, [pc, #696]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d031      	beq.n	80062c8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006264:	4bab      	ldr	r3, [pc, #684]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	099b      	lsrs	r3, r3, #6
 800626a:	2200      	movs	r2, #0
 800626c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800626e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006276:	663b      	str	r3, [r7, #96]	@ 0x60
 8006278:	2300      	movs	r3, #0
 800627a:	667b      	str	r3, [r7, #100]	@ 0x64
 800627c:	4ba7      	ldr	r3, [pc, #668]	@ (800651c <HAL_RCC_GetSysClockFreq+0x350>)
 800627e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006282:	462a      	mov	r2, r5
 8006284:	fb03 f202 	mul.w	r2, r3, r2
 8006288:	2300      	movs	r3, #0
 800628a:	4621      	mov	r1, r4
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	4aa2      	ldr	r2, [pc, #648]	@ (800651c <HAL_RCC_GetSysClockFreq+0x350>)
 8006294:	4621      	mov	r1, r4
 8006296:	fba1 1202 	umull	r1, r2, r1, r2
 800629a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800629c:	460a      	mov	r2, r1
 800629e:	67ba      	str	r2, [r7, #120]	@ 0x78
 80062a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80062a2:	4413      	add	r3, r2
 80062a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062aa:	2200      	movs	r2, #0
 80062ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80062b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80062b8:	f7fa f9ba 	bl	8000630 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4613      	mov	r3, r2
 80062c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062c6:	e064      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062c8:	4b92      	ldr	r3, [pc, #584]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	099b      	lsrs	r3, r3, #6
 80062ce:	2200      	movs	r2, #0
 80062d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80062d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80062d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062dc:	2300      	movs	r3, #0
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80062e4:	4622      	mov	r2, r4
 80062e6:	462b      	mov	r3, r5
 80062e8:	f04f 0000 	mov.w	r0, #0
 80062ec:	f04f 0100 	mov.w	r1, #0
 80062f0:	0159      	lsls	r1, r3, #5
 80062f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062f6:	0150      	lsls	r0, r2, #5
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4621      	mov	r1, r4
 80062fe:	1a51      	subs	r1, r2, r1
 8006300:	6139      	str	r1, [r7, #16]
 8006302:	4629      	mov	r1, r5
 8006304:	eb63 0301 	sbc.w	r3, r3, r1
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006316:	4659      	mov	r1, fp
 8006318:	018b      	lsls	r3, r1, #6
 800631a:	4651      	mov	r1, sl
 800631c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006320:	4651      	mov	r1, sl
 8006322:	018a      	lsls	r2, r1, #6
 8006324:	4651      	mov	r1, sl
 8006326:	ebb2 0801 	subs.w	r8, r2, r1
 800632a:	4659      	mov	r1, fp
 800632c:	eb63 0901 	sbc.w	r9, r3, r1
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800633c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006340:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006344:	4690      	mov	r8, r2
 8006346:	4699      	mov	r9, r3
 8006348:	4623      	mov	r3, r4
 800634a:	eb18 0303 	adds.w	r3, r8, r3
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	462b      	mov	r3, r5
 8006352:	eb49 0303 	adc.w	r3, r9, r3
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006364:	4629      	mov	r1, r5
 8006366:	028b      	lsls	r3, r1, #10
 8006368:	4621      	mov	r1, r4
 800636a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800636e:	4621      	mov	r1, r4
 8006370:	028a      	lsls	r2, r1, #10
 8006372:	4610      	mov	r0, r2
 8006374:	4619      	mov	r1, r3
 8006376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800637a:	2200      	movs	r2, #0
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
 800637e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006380:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006384:	f7fa f954 	bl	8000630 <__aeabi_uldivmod>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4613      	mov	r3, r2
 800638e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006392:	4b60      	ldr	r3, [pc, #384]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	3301      	adds	r3, #1
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80063a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80063b4:	e0a6      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063b6:	4b57      	ldr	r3, [pc, #348]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063c2:	4b54      	ldr	r3, [pc, #336]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d02a      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ce:	4b51      	ldr	r3, [pc, #324]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	099b      	lsrs	r3, r3, #6
 80063d4:	2200      	movs	r2, #0
 80063d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063e0:	2100      	movs	r1, #0
 80063e2:	4b4e      	ldr	r3, [pc, #312]	@ (800651c <HAL_RCC_GetSysClockFreq+0x350>)
 80063e4:	fb03 f201 	mul.w	r2, r3, r1
 80063e8:	2300      	movs	r3, #0
 80063ea:	fb00 f303 	mul.w	r3, r0, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	4a4a      	ldr	r2, [pc, #296]	@ (800651c <HAL_RCC_GetSysClockFreq+0x350>)
 80063f2:	fba0 1202 	umull	r1, r2, r0, r2
 80063f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80063f8:	460a      	mov	r2, r1
 80063fa:	673a      	str	r2, [r7, #112]	@ 0x70
 80063fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80063fe:	4413      	add	r3, r2
 8006400:	677b      	str	r3, [r7, #116]	@ 0x74
 8006402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006406:	2200      	movs	r2, #0
 8006408:	633b      	str	r3, [r7, #48]	@ 0x30
 800640a:	637a      	str	r2, [r7, #52]	@ 0x34
 800640c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006410:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006414:	f7fa f90c 	bl	8000630 <__aeabi_uldivmod>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4613      	mov	r3, r2
 800641e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006422:	e05b      	b.n	80064dc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006424:	4b3b      	ldr	r3, [pc, #236]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	099b      	lsrs	r3, r3, #6
 800642a:	2200      	movs	r2, #0
 800642c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800642e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	2300      	movs	r3, #0
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
 800643c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f04f 0100 	mov.w	r1, #0
 800644c:	0159      	lsls	r1, r3, #5
 800644e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006452:	0150      	lsls	r0, r2, #5
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4641      	mov	r1, r8
 800645a:	ebb2 0a01 	subs.w	sl, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb63 0b01 	sbc.w	fp, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006478:	ebb2 040a 	subs.w	r4, r2, sl
 800647c:	eb63 050b 	sbc.w	r5, r3, fp
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	00eb      	lsls	r3, r5, #3
 800648a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800648e:	00e2      	lsls	r2, r4, #3
 8006490:	4614      	mov	r4, r2
 8006492:	461d      	mov	r5, r3
 8006494:	4643      	mov	r3, r8
 8006496:	18e3      	adds	r3, r4, r3
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	464b      	mov	r3, r9
 800649c:	eb45 0303 	adc.w	r3, r5, r3
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064ae:	4629      	mov	r1, r5
 80064b0:	028b      	lsls	r3, r1, #10
 80064b2:	4621      	mov	r1, r4
 80064b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b8:	4621      	mov	r1, r4
 80064ba:	028a      	lsls	r2, r1, #10
 80064bc:	4610      	mov	r0, r2
 80064be:	4619      	mov	r1, r3
 80064c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064c4:	2200      	movs	r2, #0
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	61fa      	str	r2, [r7, #28]
 80064ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ce:	f7fa f8af 	bl	8000630 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4613      	mov	r3, r2
 80064d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80064dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x348>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	0f1b      	lsrs	r3, r3, #28
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80064ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80064fa:	e003      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x34c>)
 80064fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006502:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006508:	4618      	mov	r0, r3
 800650a:	3798      	adds	r7, #152	@ 0x98
 800650c:	46bd      	mov	sp, r7
 800650e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800
 8006518:	00f42400 	.word	0x00f42400
 800651c:	017d7840 	.word	0x017d7840

08006520 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e28d      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8083 	beq.w	8006646 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006540:	4b94      	ldr	r3, [pc, #592]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 030c 	and.w	r3, r3, #12
 8006548:	2b04      	cmp	r3, #4
 800654a:	d019      	beq.n	8006580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800654c:	4b91      	ldr	r3, [pc, #580]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006554:	2b08      	cmp	r3, #8
 8006556:	d106      	bne.n	8006566 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006558:	4b8e      	ldr	r3, [pc, #568]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006564:	d00c      	beq.n	8006580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006566:	4b8b      	ldr	r3, [pc, #556]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d112      	bne.n	8006598 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006572:	4b88      	ldr	r3, [pc, #544]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800657a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800657e:	d10b      	bne.n	8006598 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006580:	4b84      	ldr	r3, [pc, #528]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d05b      	beq.n	8006644 <HAL_RCC_OscConfig+0x124>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d157      	bne.n	8006644 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e25a      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065a0:	d106      	bne.n	80065b0 <HAL_RCC_OscConfig+0x90>
 80065a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e01d      	b.n	80065ec <HAL_RCC_OscConfig+0xcc>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065b8:	d10c      	bne.n	80065d4 <HAL_RCC_OscConfig+0xb4>
 80065ba:	4b76      	ldr	r3, [pc, #472]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a75      	ldr	r2, [pc, #468]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	4b73      	ldr	r3, [pc, #460]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a72      	ldr	r2, [pc, #456]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e00b      	b.n	80065ec <HAL_RCC_OscConfig+0xcc>
 80065d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80065e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d013      	beq.n	800661c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7ff f942 	bl	800587c <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065fc:	f7ff f93e 	bl	800587c <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b64      	cmp	r3, #100	@ 0x64
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e21f      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800660e:	4b61      	ldr	r3, [pc, #388]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0xdc>
 800661a:	e014      	b.n	8006646 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7ff f92e 	bl	800587c <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006624:	f7ff f92a 	bl	800587c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b64      	cmp	r3, #100	@ 0x64
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e20b      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006636:	4b57      	ldr	r3, [pc, #348]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x104>
 8006642:	e000      	b.n	8006646 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d06f      	beq.n	8006732 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006652:	4b50      	ldr	r3, [pc, #320]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 030c 	and.w	r3, r3, #12
 800665a:	2b00      	cmp	r3, #0
 800665c:	d017      	beq.n	800668e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800665e:	4b4d      	ldr	r3, [pc, #308]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006666:	2b08      	cmp	r3, #8
 8006668:	d105      	bne.n	8006676 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800666a:	4b4a      	ldr	r3, [pc, #296]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006676:	4b47      	ldr	r3, [pc, #284]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800667e:	2b0c      	cmp	r3, #12
 8006680:	d11c      	bne.n	80066bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006682:	4b44      	ldr	r3, [pc, #272]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d116      	bne.n	80066bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800668e:	4b41      	ldr	r3, [pc, #260]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_RCC_OscConfig+0x186>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d001      	beq.n	80066a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e1d3      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4937      	ldr	r1, [pc, #220]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ba:	e03a      	b.n	8006732 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d020      	beq.n	8006706 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066c4:	4b34      	ldr	r3, [pc, #208]	@ (8006798 <HAL_RCC_OscConfig+0x278>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ca:	f7ff f8d7 	bl	800587c <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d2:	f7ff f8d3 	bl	800587c <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e1b4      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f0:	4b28      	ldr	r3, [pc, #160]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4925      	ldr	r1, [pc, #148]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006700:	4313      	orrs	r3, r2
 8006702:	600b      	str	r3, [r1, #0]
 8006704:	e015      	b.n	8006732 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006706:	4b24      	ldr	r3, [pc, #144]	@ (8006798 <HAL_RCC_OscConfig+0x278>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7ff f8b6 	bl	800587c <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006714:	f7ff f8b2 	bl	800587c <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e193      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006726:	4b1b      	ldr	r3, [pc, #108]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d036      	beq.n	80067ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d016      	beq.n	8006774 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <HAL_RCC_OscConfig+0x27c>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674c:	f7ff f896 	bl	800587c <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006754:	f7ff f892 	bl	800587c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e173      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006766:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <HAL_RCC_OscConfig+0x274>)
 8006768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCC_OscConfig+0x234>
 8006772:	e01b      	b.n	80067ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006774:	4b09      	ldr	r3, [pc, #36]	@ (800679c <HAL_RCC_OscConfig+0x27c>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677a:	f7ff f87f 	bl	800587c <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006780:	e00e      	b.n	80067a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006782:	f7ff f87b 	bl	800587c <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d907      	bls.n	80067a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e15c      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
 8006794:	40023800 	.word	0x40023800
 8006798:	42470000 	.word	0x42470000
 800679c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a0:	4b8a      	ldr	r3, [pc, #552]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80067a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1ea      	bne.n	8006782 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8097 	beq.w	80068e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067be:	4b83      	ldr	r3, [pc, #524]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80067c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10f      	bne.n	80067ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	4b7f      	ldr	r3, [pc, #508]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	4a7e      	ldr	r2, [pc, #504]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80067d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80067da:	4b7c      	ldr	r3, [pc, #496]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067e2:	60bb      	str	r3, [r7, #8]
 80067e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ea:	4b79      	ldr	r3, [pc, #484]	@ (80069d0 <HAL_RCC_OscConfig+0x4b0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d118      	bne.n	8006828 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067f6:	4b76      	ldr	r3, [pc, #472]	@ (80069d0 <HAL_RCC_OscConfig+0x4b0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a75      	ldr	r2, [pc, #468]	@ (80069d0 <HAL_RCC_OscConfig+0x4b0>)
 80067fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006802:	f7ff f83b 	bl	800587c <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006808:	e008      	b.n	800681c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800680a:	f7ff f837 	bl	800587c <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e118      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681c:	4b6c      	ldr	r3, [pc, #432]	@ (80069d0 <HAL_RCC_OscConfig+0x4b0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0f0      	beq.n	800680a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d106      	bne.n	800683e <HAL_RCC_OscConfig+0x31e>
 8006830:	4b66      	ldr	r3, [pc, #408]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006834:	4a65      	ldr	r2, [pc, #404]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	6713      	str	r3, [r2, #112]	@ 0x70
 800683c:	e01c      	b.n	8006878 <HAL_RCC_OscConfig+0x358>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	2b05      	cmp	r3, #5
 8006844:	d10c      	bne.n	8006860 <HAL_RCC_OscConfig+0x340>
 8006846:	4b61      	ldr	r3, [pc, #388]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684a:	4a60      	ldr	r2, [pc, #384]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 800684c:	f043 0304 	orr.w	r3, r3, #4
 8006850:	6713      	str	r3, [r2, #112]	@ 0x70
 8006852:	4b5e      	ldr	r3, [pc, #376]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	4a5d      	ldr	r2, [pc, #372]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	6713      	str	r3, [r2, #112]	@ 0x70
 800685e:	e00b      	b.n	8006878 <HAL_RCC_OscConfig+0x358>
 8006860:	4b5a      	ldr	r3, [pc, #360]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a59      	ldr	r2, [pc, #356]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	6713      	str	r3, [r2, #112]	@ 0x70
 800686c:	4b57      	ldr	r3, [pc, #348]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006870:	4a56      	ldr	r2, [pc, #344]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006872:	f023 0304 	bic.w	r3, r3, #4
 8006876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d015      	beq.n	80068ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006880:	f7fe fffc 	bl	800587c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006886:	e00a      	b.n	800689e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006888:	f7fe fff8 	bl	800587c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e0d7      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689e:	4b4b      	ldr	r3, [pc, #300]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0ee      	beq.n	8006888 <HAL_RCC_OscConfig+0x368>
 80068aa:	e014      	b.n	80068d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ac:	f7fe ffe6 	bl	800587c <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b4:	f7fe ffe2 	bl	800587c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e0c1      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ca:	4b40      	ldr	r3, [pc, #256]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1ee      	bne.n	80068b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d105      	bne.n	80068e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068dc:	4b3b      	ldr	r3, [pc, #236]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	4a3a      	ldr	r2, [pc, #232]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80068e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80ad 	beq.w	8006a4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068f2:	4b36      	ldr	r3, [pc, #216]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 030c 	and.w	r3, r3, #12
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d060      	beq.n	80069c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d145      	bne.n	8006992 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006906:	4b33      	ldr	r3, [pc, #204]	@ (80069d4 <HAL_RCC_OscConfig+0x4b4>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690c:	f7fe ffb6 	bl	800587c <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006914:	f7fe ffb2 	bl	800587c <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e093      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006926:	4b29      	ldr	r3, [pc, #164]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f0      	bne.n	8006914 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69da      	ldr	r2, [r3, #28]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	019b      	lsls	r3, r3, #6
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	3b01      	subs	r3, #1
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006954:	061b      	lsls	r3, r3, #24
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	071b      	lsls	r3, r3, #28
 800695e:	491b      	ldr	r1, [pc, #108]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006960:	4313      	orrs	r3, r2
 8006962:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006964:	4b1b      	ldr	r3, [pc, #108]	@ (80069d4 <HAL_RCC_OscConfig+0x4b4>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fe ff87 	bl	800587c <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006972:	f7fe ff83 	bl	800587c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e064      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006984:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCC_OscConfig+0x452>
 8006990:	e05c      	b.n	8006a4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006992:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <HAL_RCC_OscConfig+0x4b4>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fe ff70 	bl	800587c <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a0:	f7fe ff6c 	bl	800587c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e04d      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b2:	4b06      	ldr	r3, [pc, #24]	@ (80069cc <HAL_RCC_OscConfig+0x4ac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x480>
 80069be:	e045      	b.n	8006a4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d107      	bne.n	80069d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e040      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40007000 	.word	0x40007000
 80069d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a58 <HAL_RCC_OscConfig+0x538>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d030      	beq.n	8006a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d129      	bne.n	8006a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d122      	bne.n	8006a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a08:	4013      	ands	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d119      	bne.n	8006a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	3b01      	subs	r3, #1
 8006a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d10f      	bne.n	8006a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d107      	bne.n	8006a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d001      	beq.n	8006a4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800

08006a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e07b      	b.n	8006b66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d108      	bne.n	8006a88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7e:	d009      	beq.n	8006a94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	61da      	str	r2, [r3, #28]
 8006a86:	e005      	b.n	8006a94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fe fcee 	bl	8005490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b18:	ea42 0103 	orr.w	r1, r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	0c1b      	lsrs	r3, r3, #16
 8006b32:	f003 0104 	and.w	r1, r3, #4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3a:	f003 0210 	and.w	r2, r3, #16
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b088      	sub	sp, #32
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_SPI_Transmit+0x22>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e12d      	b.n	8006dec <HAL_SPI_Transmit+0x27e>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b98:	f7fe fe70 	bl	800587c <HAL_GetTick>
 8006b9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d002      	beq.n	8006bb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bb2:	e116      	b.n	8006de2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_SPI_Transmit+0x52>
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bc4:	e10d      	b.n	8006de2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2203      	movs	r2, #3
 8006bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c0c:	d10f      	bne.n	8006c2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c38:	2b40      	cmp	r3, #64	@ 0x40
 8006c3a:	d007      	beq.n	8006c4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c54:	d14f      	bne.n	8006cf6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_Transmit+0xf6>
 8006c5e:	8afb      	ldrh	r3, [r7, #22]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d142      	bne.n	8006cea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c68:	881a      	ldrh	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	1c9a      	adds	r2, r3, #2
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c88:	e02f      	b.n	8006cea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d112      	bne.n	8006cbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9c:	881a      	ldrh	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca8:	1c9a      	adds	r2, r3, #2
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006cbc:	e015      	b.n	8006cea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cbe:	f7fe fddd 	bl	800587c <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d803      	bhi.n	8006cd6 <HAL_SPI_Transmit+0x168>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d102      	bne.n	8006cdc <HAL_SPI_Transmit+0x16e>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006ce8:	e07b      	b.n	8006de2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ca      	bne.n	8006c8a <HAL_SPI_Transmit+0x11c>
 8006cf4:	e050      	b.n	8006d98 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x196>
 8006cfe:	8afb      	ldrh	r3, [r7, #22]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d144      	bne.n	8006d8e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	7812      	ldrb	r2, [r2, #0]
 8006d10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d2a:	e030      	b.n	8006d8e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d113      	bne.n	8006d62 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006d60:	e015      	b.n	8006d8e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d62:	f7fe fd8b 	bl	800587c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d803      	bhi.n	8006d7a <HAL_SPI_Transmit+0x20c>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d102      	bne.n	8006d80 <HAL_SPI_Transmit+0x212>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006d8c:	e029      	b.n	8006de2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1c9      	bne.n	8006d2c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fa61 	bl	8007264 <SPI_EndRxTxTransaction>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db6:	2300      	movs	r3, #0
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e003      	b.n	8006de2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3720      	adds	r7, #32
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08c      	sub	sp, #48	@ 0x30
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e02:	2301      	movs	r3, #1
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_SPI_TransmitReceive+0x26>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e198      	b.n	800714c <HAL_SPI_TransmitReceive+0x358>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e22:	f7fe fd2b 	bl	800587c <HAL_GetTick>
 8006e26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e38:	887b      	ldrh	r3, [r7, #2]
 8006e3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d00f      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x70>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e4a:	d107      	bne.n	8006e5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <HAL_SPI_TransmitReceive+0x68>
 8006e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d003      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006e62:	e16d      	b.n	8007140 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x82>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x82>
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006e7c:	e160      	b.n	8007140 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d003      	beq.n	8006e92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	887a      	ldrh	r2, [r7, #2]
 8006ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	887a      	ldrh	r2, [r7, #2]
 8006ea8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	887a      	ldrh	r2, [r7, #2]
 8006eba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed2:	2b40      	cmp	r3, #64	@ 0x40
 8006ed4:	d007      	beq.n	8006ee6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eee:	d17c      	bne.n	8006fea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x10a>
 8006ef8:	8b7b      	ldrh	r3, [r7, #26]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d16a      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f22:	e057      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d11b      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x176>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x176>
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d113      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	881a      	ldrh	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d119      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x1b8>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d014      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8c:	b292      	uxth	r2, r2
 8006f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fac:	f7fe fc66 	bl	800587c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d80b      	bhi.n	8006fd4 <HAL_SPI_TransmitReceive+0x1e0>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d007      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006fd2:	e0b5      	b.n	8007140 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1a2      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x130>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d19d      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x130>
 8006fe8:	e080      	b.n	80070ec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_SPI_TransmitReceive+0x204>
 8006ff2:	8b7b      	ldrh	r3, [r7, #26]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d16f      	bne.n	80070d8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701e:	e05b      	b.n	80070d8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d11c      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x274>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d017      	beq.n	8007068 <HAL_SPI_TransmitReceive+0x274>
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d114      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330c      	adds	r3, #12
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b01      	cmp	r3, #1
 8007074:	d119      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x2b6>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d014      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070a6:	2301      	movs	r3, #1
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070aa:	f7fe fbe7 	bl	800587c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d803      	bhi.n	80070c2 <HAL_SPI_TransmitReceive+0x2ce>
 80070ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c0:	d102      	bne.n	80070c8 <HAL_SPI_TransmitReceive+0x2d4>
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d107      	bne.n	80070d8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80070d6:	e033      	b.n	8007140 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d19e      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x22c>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d199      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f8b7 	bl	8007264 <SPI_EndRxTxTransaction>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d006      	beq.n	800710a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007108:	e01a      	b.n	8007140 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e003      	b.n	8007140 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007148:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800714c:	4618      	mov	r0, r3
 800714e:	3730      	adds	r7, #48	@ 0x30
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007164:	f7fe fb8a 	bl	800587c <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007174:	f7fe fb82 	bl	800587c <HAL_GetTick>
 8007178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800717a:	4b39      	ldr	r3, [pc, #228]	@ (8007260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	015b      	lsls	r3, r3, #5
 8007180:	0d1b      	lsrs	r3, r3, #20
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800718a:	e054      	b.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d050      	beq.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007194:	f7fe fb72 	bl	800587c <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d902      	bls.n	80071aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d13d      	bne.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071c2:	d111      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071cc:	d004      	beq.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d6:	d107      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f0:	d10f      	bne.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e017      	b.n	8007256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	3b01      	subs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4013      	ands	r3, r2
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	429a      	cmp	r2, r3
 8007252:	d19b      	bne.n	800718c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20016a7c 	.word	0x20016a7c

08007264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2201      	movs	r2, #1
 8007278:	2102      	movs	r1, #2
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff ff6a 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728a:	f043 0220 	orr.w	r2, r3, #32
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e032      	b.n	80072fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007296:	4b1b      	ldr	r3, [pc, #108]	@ (8007304 <SPI_EndRxTxTransaction+0xa0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1b      	ldr	r2, [pc, #108]	@ (8007308 <SPI_EndRxTxTransaction+0xa4>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	0d5b      	lsrs	r3, r3, #21
 80072a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072b4:	d112      	bne.n	80072dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2200      	movs	r2, #0
 80072be:	2180      	movs	r1, #128	@ 0x80
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7ff ff47 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d016      	beq.n	80072fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d0:	f043 0220 	orr.w	r2, r3, #32
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e00f      	b.n	80072fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	2b80      	cmp	r3, #128	@ 0x80
 80072f4:	d0f2      	beq.n	80072dc <SPI_EndRxTxTransaction+0x78>
 80072f6:	e000      	b.n	80072fa <SPI_EndRxTxTransaction+0x96>
        break;
 80072f8:	bf00      	nop
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20016a7c 	.word	0x20016a7c
 8007308:	165e9f81 	.word	0x165e9f81

0800730c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e042      	b.n	80073a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fe f8f4 	bl	8005520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	@ 0x24
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800734e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fdbd 	bl	8007ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	@ 0x28
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d175      	bne.n	80074b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_UART_Transmit+0x2c>
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e06e      	b.n	80074ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2221      	movs	r2, #33	@ 0x21
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ea:	f7fe fa47 	bl	800587c <HAL_GetTick>
 80073ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	88fa      	ldrh	r2, [r7, #6]
 80073fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007404:	d108      	bne.n	8007418 <HAL_UART_Transmit+0x6c>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	e003      	b.n	8007420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007420:	e02e      	b.n	8007480 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2200      	movs	r2, #0
 800742a:	2180      	movs	r1, #128	@ 0x80
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fb1f 	bl	8007a70 <UART_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e03a      	b.n	80074ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	3302      	adds	r3, #2
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e007      	b.n	8007472 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	3301      	adds	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1cb      	bne.n	8007422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2200      	movs	r2, #0
 8007492:	2140      	movs	r1, #64	@ 0x40
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 faeb 	bl	8007a70 <UART_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e006      	b.n	80074ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	4613      	mov	r3, r2
 80074ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d112      	bne.n	8007502 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_UART_Receive_IT+0x26>
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e00b      	b.n	8007504 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	461a      	mov	r2, r3
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fb12 	bl	8007b22 <UART_Start_Receive_IT>
 80074fe:	4603      	mov	r3, r0
 8007500:	e000      	b.n	8007504 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007502:	2302      	movs	r3, #2
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b0ba      	sub	sp, #232	@ 0xe8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007532:	2300      	movs	r3, #0
 8007534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800754a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10f      	bne.n	8007572 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HAL_UART_IRQHandler+0x66>
 800755e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fbf2 	bl	8007d54 <UART_Receive_IT>
      return;
 8007570:	e25b      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80de 	beq.w	8007738 <HAL_UART_IRQHandler+0x22c>
 800757c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80d1 	beq.w	8007738 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <HAL_UART_IRQHandler+0xae>
 80075a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b2:	f043 0201 	orr.w	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <HAL_UART_IRQHandler+0xd2>
 80075c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	f043 0202 	orr.w	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_UART_IRQHandler+0xf6>
 80075ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fa:	f043 0204 	orr.w	r2, r3, #4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <HAL_UART_IRQHandler+0x126>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 81f2 	beq.w	8007a20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_UART_IRQHandler+0x14e>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fb7d 	bl	8007d54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b40      	cmp	r3, #64	@ 0x40
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <HAL_UART_IRQHandler+0x17a>
 800767e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d04f      	beq.n	8007726 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa85 	bl	8007b96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007696:	2b40      	cmp	r3, #64	@ 0x40
 8007698:	d141      	bne.n	800771e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80076ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d9      	bne.n	800769a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d013      	beq.n	8007716 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	4a7e      	ldr	r2, [pc, #504]	@ (80078ec <HAL_UART_IRQHandler+0x3e0>)
 80076f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fa7c 	bl	8005bf8 <HAL_DMA_Abort_IT>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d016      	beq.n	8007734 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e00e      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f994 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	e00a      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f990 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	e006      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f98c 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007732:	e175      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	bf00      	nop
    return;
 8007736:	e173      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773c:	2b01      	cmp	r3, #1
 800773e:	f040 814f 	bne.w	80079e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8148 	beq.w	80079e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8141 	beq.w	80079e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800777e:	2b40      	cmp	r3, #64	@ 0x40
 8007780:	f040 80b6 	bne.w	80078f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8145 	beq.w	8007a24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800779e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f080 813e 	bcs.w	8007a24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ba:	f000 8088 	beq.w	80078ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80077ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1d9      	bne.n	80077be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800781a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3314      	adds	r3, #20
 800782a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800782e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007832:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007836:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e1      	bne.n	800780a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3314      	adds	r3, #20
 800784c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3314      	adds	r3, #20
 8007866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800786a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800786c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007870:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e3      	bne.n	8007846 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800789c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80078b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80078b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e3      	bne.n	800788c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe f925 	bl	8005b18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8b7 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078ea:	e09b      	b.n	8007a24 <HAL_UART_IRQHandler+0x518>
 80078ec:	08007c5d 	.word	0x08007c5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 808e 	beq.w	8007a28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800790c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8089 	beq.w	8007a28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800792c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800793a:	647a      	str	r2, [r7, #68]	@ 0x44
 800793c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3314      	adds	r3, #20
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	623b      	str	r3, [r7, #32]
   return(result);
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f023 0301 	bic.w	r3, r3, #1
 8007964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3314      	adds	r3, #20
 800796e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007972:	633a      	str	r2, [r7, #48]	@ 0x30
 8007974:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e3      	bne.n	800794e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80079b8:	61fa      	str	r2, [r7, #28]
 80079ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	617b      	str	r3, [r7, #20]
   return(result);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e3      	bne.n	8007994 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f83d 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079de:	e023      	b.n	8007a28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <HAL_UART_IRQHandler+0x4f4>
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f943 	bl	8007c84 <UART_Transmit_IT>
    return;
 80079fe:	e014      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00e      	beq.n	8007a2a <HAL_UART_IRQHandler+0x51e>
 8007a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f983 	bl	8007d24 <UART_EndTransmit_IT>
    return;
 8007a1e:	e004      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a20:	bf00      	nop
 8007a22:	e002      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a28:	bf00      	nop
  }
}
 8007a2a:	37e8      	adds	r7, #232	@ 0xe8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a80:	e03b      	b.n	8007afa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d037      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8a:	f7fd fef7 	bl	800587c <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	6a3a      	ldr	r2, [r7, #32]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e03a      	b.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d023      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b80      	cmp	r3, #128	@ 0x80
 8007ab6:	d020      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b40      	cmp	r3, #64	@ 0x40
 8007abc:	d01d      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d116      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f857 	bl	8007b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2208      	movs	r2, #8
 8007aec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e00f      	b.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4013      	ands	r3, r2
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	bf0c      	ite	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	2300      	movne	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d0b4      	beq.n	8007a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	88fa      	ldrh	r2, [r7, #6]
 8007b3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2222      	movs	r2, #34	@ 0x22
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695a      	ldr	r2, [r3, #20]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0220 	orr.w	r2, r2, #32
 8007b86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b095      	sub	sp, #84	@ 0x54
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e5      	bne.n	8007bd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d119      	bne.n	8007c42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f023 0310 	bic.w	r3, r3, #16
 8007c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c2e:	61ba      	str	r2, [r7, #24]
 8007c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c50:	bf00      	nop
 8007c52:	3754      	adds	r7, #84	@ 0x54
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fee4 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b21      	cmp	r3, #33	@ 0x21
 8007c96:	d13e      	bne.n	8007d16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca0:	d114      	bne.n	8007ccc <UART_Transmit_IT+0x48>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d110      	bne.n	8007ccc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	1c9a      	adds	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	621a      	str	r2, [r3, #32]
 8007cca:	e008      	b.n	8007cde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	1c59      	adds	r1, r3, #1
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6211      	str	r1, [r2, #32]
 8007cd6:	781a      	ldrb	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4619      	mov	r1, r3
 8007cec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10f      	bne.n	8007d12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e000      	b.n	8007d18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d16:	2302      	movs	r3, #2
  }
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fe73 	bl	8007a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08c      	sub	sp, #48	@ 0x30
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b22      	cmp	r3, #34	@ 0x22
 8007d66:	f040 80ae 	bne.w	8007ec6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d72:	d117      	bne.n	8007da4 <UART_Receive_IT+0x50>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d113      	bne.n	8007da4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	1c9a      	adds	r2, r3, #2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007da2:	e026      	b.n	8007df2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db6:	d007      	beq.n	8007dc8 <UART_Receive_IT+0x74>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <UART_Receive_IT+0x82>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d15d      	bne.n	8007ec2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0220 	bic.w	r2, r2, #32
 8007e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d135      	bne.n	8007eb8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	330c      	adds	r3, #12
 8007e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	613b      	str	r3, [r7, #16]
   return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f023 0310 	bic.w	r3, r3, #16
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e72:	623a      	str	r2, [r7, #32]
 8007e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	69f9      	ldr	r1, [r7, #28]
 8007e78:	6a3a      	ldr	r2, [r7, #32]
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e5      	bne.n	8007e52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d10a      	bne.n	8007eaa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff fdd1 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
 8007eb6:	e002      	b.n	8007ebe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7fc fe1b 	bl	8004af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e002      	b.n	8007ec8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e000      	b.n	8007ec8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3730      	adds	r7, #48	@ 0x30
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed4:	b0c0      	sub	sp, #256	@ 0x100
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	68d9      	ldr	r1, [r3, #12]
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	ea40 0301 	orr.w	r3, r0, r1
 8007ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f28:	f021 010c 	bic.w	r1, r1, #12
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f36:	430b      	orrs	r3, r1
 8007f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4a:	6999      	ldr	r1, [r3, #24]
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	ea40 0301 	orr.w	r3, r0, r1
 8007f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800819c <UART_SetConfig+0x2cc>)
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d005      	beq.n	8007f70 <UART_SetConfig+0xa0>
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80081a0 <UART_SetConfig+0x2d0>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d104      	bne.n	8007f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f70:	f7fe f918 	bl	80061a4 <HAL_RCC_GetPCLK2Freq>
 8007f74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f78:	e003      	b.n	8007f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f7a:	f7fe f8ff 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 8007f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f8c:	f040 810c 	bne.w	80081a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	1891      	adds	r1, r2, r2
 8007fa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007faa:	415b      	adcs	r3, r3
 8007fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	eb12 0801 	adds.w	r8, r2, r1
 8007fb8:	4629      	mov	r1, r5
 8007fba:	eb43 0901 	adc.w	r9, r3, r1
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fd2:	4690      	mov	r8, r2
 8007fd4:	4699      	mov	r9, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	eb18 0303 	adds.w	r3, r8, r3
 8007fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	eb49 0303 	adc.w	r3, r9, r3
 8007fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ffe:	460b      	mov	r3, r1
 8008000:	18db      	adds	r3, r3, r3
 8008002:	653b      	str	r3, [r7, #80]	@ 0x50
 8008004:	4613      	mov	r3, r2
 8008006:	eb42 0303 	adc.w	r3, r2, r3
 800800a:	657b      	str	r3, [r7, #84]	@ 0x54
 800800c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008014:	f7f8 fb0c 	bl	8000630 <__aeabi_uldivmod>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4b61      	ldr	r3, [pc, #388]	@ (80081a4 <UART_SetConfig+0x2d4>)
 800801e:	fba3 2302 	umull	r2, r3, r3, r2
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	011c      	lsls	r4, r3, #4
 8008026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800802a:	2200      	movs	r2, #0
 800802c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008030:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008038:	4642      	mov	r2, r8
 800803a:	464b      	mov	r3, r9
 800803c:	1891      	adds	r1, r2, r2
 800803e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008040:	415b      	adcs	r3, r3
 8008042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008048:	4641      	mov	r1, r8
 800804a:	eb12 0a01 	adds.w	sl, r2, r1
 800804e:	4649      	mov	r1, r9
 8008050:	eb43 0b01 	adc.w	fp, r3, r1
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008068:	4692      	mov	sl, r2
 800806a:	469b      	mov	fp, r3
 800806c:	4643      	mov	r3, r8
 800806e:	eb1a 0303 	adds.w	r3, sl, r3
 8008072:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008076:	464b      	mov	r3, r9
 8008078:	eb4b 0303 	adc.w	r3, fp, r3
 800807c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800808c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008094:	460b      	mov	r3, r1
 8008096:	18db      	adds	r3, r3, r3
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
 800809a:	4613      	mov	r3, r2
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080aa:	f7f8 fac1 	bl	8000630 <__aeabi_uldivmod>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4611      	mov	r1, r2
 80080b4:	4b3b      	ldr	r3, [pc, #236]	@ (80081a4 <UART_SetConfig+0x2d4>)
 80080b6:	fba3 2301 	umull	r2, r3, r3, r1
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	2264      	movs	r2, #100	@ 0x64
 80080be:	fb02 f303 	mul.w	r3, r2, r3
 80080c2:	1acb      	subs	r3, r1, r3
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080ca:	4b36      	ldr	r3, [pc, #216]	@ (80081a4 <UART_SetConfig+0x2d4>)
 80080cc:	fba3 2302 	umull	r2, r3, r3, r2
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080d8:	441c      	add	r4, r3
 80080da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	1891      	adds	r1, r2, r2
 80080f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080f4:	415b      	adcs	r3, r3
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080fc:	4641      	mov	r1, r8
 80080fe:	1851      	adds	r1, r2, r1
 8008100:	6339      	str	r1, [r7, #48]	@ 0x30
 8008102:	4649      	mov	r1, r9
 8008104:	414b      	adcs	r3, r1
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008114:	4659      	mov	r1, fp
 8008116:	00cb      	lsls	r3, r1, #3
 8008118:	4651      	mov	r1, sl
 800811a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800811e:	4651      	mov	r1, sl
 8008120:	00ca      	lsls	r2, r1, #3
 8008122:	4610      	mov	r0, r2
 8008124:	4619      	mov	r1, r3
 8008126:	4603      	mov	r3, r0
 8008128:	4642      	mov	r2, r8
 800812a:	189b      	adds	r3, r3, r2
 800812c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008130:	464b      	mov	r3, r9
 8008132:	460a      	mov	r2, r1
 8008134:	eb42 0303 	adc.w	r3, r2, r3
 8008138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008148:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800814c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008150:	460b      	mov	r3, r1
 8008152:	18db      	adds	r3, r3, r3
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008156:	4613      	mov	r3, r2
 8008158:	eb42 0303 	adc.w	r3, r2, r3
 800815c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800815e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008166:	f7f8 fa63 	bl	8000630 <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <UART_SetConfig+0x2d4>)
 8008170:	fba3 1302 	umull	r1, r3, r3, r2
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	2164      	movs	r1, #100	@ 0x64
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	3332      	adds	r3, #50	@ 0x32
 8008182:	4a08      	ldr	r2, [pc, #32]	@ (80081a4 <UART_SetConfig+0x2d4>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	f003 0207 	and.w	r2, r3, #7
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4422      	add	r2, r4
 8008196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008198:	e106      	b.n	80083a8 <UART_SetConfig+0x4d8>
 800819a:	bf00      	nop
 800819c:	40011000 	.word	0x40011000
 80081a0:	40011400 	.word	0x40011400
 80081a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	1891      	adds	r1, r2, r2
 80081c0:	6239      	str	r1, [r7, #32]
 80081c2:	415b      	adcs	r3, r3
 80081c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081ca:	4641      	mov	r1, r8
 80081cc:	1854      	adds	r4, r2, r1
 80081ce:	4649      	mov	r1, r9
 80081d0:	eb43 0501 	adc.w	r5, r3, r1
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	00eb      	lsls	r3, r5, #3
 80081de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081e2:	00e2      	lsls	r2, r4, #3
 80081e4:	4614      	mov	r4, r2
 80081e6:	461d      	mov	r5, r3
 80081e8:	4643      	mov	r3, r8
 80081ea:	18e3      	adds	r3, r4, r3
 80081ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081f0:	464b      	mov	r3, r9
 80081f2:	eb45 0303 	adc.w	r3, r5, r3
 80081f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008216:	4629      	mov	r1, r5
 8008218:	008b      	lsls	r3, r1, #2
 800821a:	4621      	mov	r1, r4
 800821c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008220:	4621      	mov	r1, r4
 8008222:	008a      	lsls	r2, r1, #2
 8008224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008228:	f7f8 fa02 	bl	8000630 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4b60      	ldr	r3, [pc, #384]	@ (80083b4 <UART_SetConfig+0x4e4>)
 8008232:	fba3 2302 	umull	r2, r3, r3, r2
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	011c      	lsls	r4, r3, #4
 800823a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800823e:	2200      	movs	r2, #0
 8008240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800824c:	4642      	mov	r2, r8
 800824e:	464b      	mov	r3, r9
 8008250:	1891      	adds	r1, r2, r2
 8008252:	61b9      	str	r1, [r7, #24]
 8008254:	415b      	adcs	r3, r3
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800825c:	4641      	mov	r1, r8
 800825e:	1851      	adds	r1, r2, r1
 8008260:	6139      	str	r1, [r7, #16]
 8008262:	4649      	mov	r1, r9
 8008264:	414b      	adcs	r3, r1
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	f04f 0200 	mov.w	r2, #0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008274:	4659      	mov	r1, fp
 8008276:	00cb      	lsls	r3, r1, #3
 8008278:	4651      	mov	r1, sl
 800827a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800827e:	4651      	mov	r1, sl
 8008280:	00ca      	lsls	r2, r1, #3
 8008282:	4610      	mov	r0, r2
 8008284:	4619      	mov	r1, r3
 8008286:	4603      	mov	r3, r0
 8008288:	4642      	mov	r2, r8
 800828a:	189b      	adds	r3, r3, r2
 800828c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008290:	464b      	mov	r3, r9
 8008292:	460a      	mov	r2, r1
 8008294:	eb42 0303 	adc.w	r3, r2, r3
 8008298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082b4:	4649      	mov	r1, r9
 80082b6:	008b      	lsls	r3, r1, #2
 80082b8:	4641      	mov	r1, r8
 80082ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082be:	4641      	mov	r1, r8
 80082c0:	008a      	lsls	r2, r1, #2
 80082c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082c6:	f7f8 f9b3 	bl	8000630 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	4b38      	ldr	r3, [pc, #224]	@ (80083b4 <UART_SetConfig+0x4e4>)
 80082d2:	fba3 2301 	umull	r2, r3, r3, r1
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2264      	movs	r2, #100	@ 0x64
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	1acb      	subs	r3, r1, r3
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	3332      	adds	r3, #50	@ 0x32
 80082e4:	4a33      	ldr	r2, [pc, #204]	@ (80083b4 <UART_SetConfig+0x4e4>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082f0:	441c      	add	r4, r3
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80082fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80082fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	1891      	adds	r1, r2, r2
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	415b      	adcs	r3, r3
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008310:	4641      	mov	r1, r8
 8008312:	1851      	adds	r1, r2, r1
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	4649      	mov	r1, r9
 8008318:	414b      	adcs	r3, r1
 800831a:	607b      	str	r3, [r7, #4]
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008328:	4659      	mov	r1, fp
 800832a:	00cb      	lsls	r3, r1, #3
 800832c:	4651      	mov	r1, sl
 800832e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008332:	4651      	mov	r1, sl
 8008334:	00ca      	lsls	r2, r1, #3
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	4603      	mov	r3, r0
 800833c:	4642      	mov	r2, r8
 800833e:	189b      	adds	r3, r3, r2
 8008340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008342:	464b      	mov	r3, r9
 8008344:	460a      	mov	r2, r1
 8008346:	eb42 0303 	adc.w	r3, r2, r3
 800834a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	663b      	str	r3, [r7, #96]	@ 0x60
 8008356:	667a      	str	r2, [r7, #100]	@ 0x64
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008364:	4649      	mov	r1, r9
 8008366:	008b      	lsls	r3, r1, #2
 8008368:	4641      	mov	r1, r8
 800836a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800836e:	4641      	mov	r1, r8
 8008370:	008a      	lsls	r2, r1, #2
 8008372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008376:	f7f8 f95b 	bl	8000630 <__aeabi_uldivmod>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <UART_SetConfig+0x4e4>)
 8008380:	fba3 1302 	umull	r1, r3, r3, r2
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	2164      	movs	r1, #100	@ 0x64
 8008388:	fb01 f303 	mul.w	r3, r1, r3
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	3332      	adds	r3, #50	@ 0x32
 8008392:	4a08      	ldr	r2, [pc, #32]	@ (80083b4 <UART_SetConfig+0x4e4>)
 8008394:	fba2 2303 	umull	r2, r3, r2, r3
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	f003 020f 	and.w	r2, r3, #15
 800839e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4422      	add	r2, r4
 80083a6:	609a      	str	r2, [r3, #8]
}
 80083a8:	bf00      	nop
 80083aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083ae:	46bd      	mov	sp, r7
 80083b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b4:	51eb851f 	.word	0x51eb851f

080083b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80083bc:	4904      	ldr	r1, [pc, #16]	@ (80083d0 <MX_FATFS_Init+0x18>)
 80083be:	4805      	ldr	r0, [pc, #20]	@ (80083d4 <MX_FATFS_Init+0x1c>)
 80083c0:	f002 fea4 	bl	800b10c <FATFS_LinkDriver>
 80083c4:	4603      	mov	r3, r0
 80083c6:	461a      	mov	r2, r3
 80083c8:	4b03      	ldr	r3, [pc, #12]	@ (80083d8 <MX_FATFS_Init+0x20>)
 80083ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	2001ca00 	.word	0x2001ca00
 80083d4:	20016a88 	.word	0x20016a88
 80083d8:	2001c9fc 	.word	0x2001c9fc

080083dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80083e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7f8 fc45 	bl	8000c88 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80083fe:	bf00      	nop
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4618      	mov	r0, r3
 8008416:	f7f8 fd1d 	bl	8000e54 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800841a:	bf00      	nop
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv, buff, sector, count);
 8008434:	7bf8      	ldrb	r0, [r7, #15]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	f7f8 fd20 	bl	8000e80 <SD_disk_read>
  /* USER CODE END READ */
}
 8008440:	bf00      	nop
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector,count);
 800845a:	7bf8      	ldrb	r0, [r7, #15]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	f7f8 fd77 	bl	8000f54 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8008466:	bf00      	nop
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	603a      	str	r2, [r7, #0]
 800847a:	71fb      	strb	r3, [r7, #7]
 800847c:	460b      	mov	r3, r1
 800847e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	79b9      	ldrb	r1, [r7, #6]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 fde8 	bl	800105c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800848c:	bf00      	nop
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	4a08      	ldr	r2, [pc, #32]	@ (80084c8 <disk_status+0x30>)
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	79fa      	ldrb	r2, [r7, #7]
 80084b0:	4905      	ldr	r1, [pc, #20]	@ (80084c8 <disk_status+0x30>)
 80084b2:	440a      	add	r2, r1
 80084b4:	7a12      	ldrb	r2, [r2, #8]
 80084b6:	4610      	mov	r0, r2
 80084b8:	4798      	blx	r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	2001cc2c 	.word	0x2001cc2c

080084cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	4a0e      	ldr	r2, [pc, #56]	@ (8008518 <disk_initialize+0x4c>)
 80084de:	5cd3      	ldrb	r3, [r2, r3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d114      	bne.n	800850e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008518 <disk_initialize+0x4c>)
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	79fa      	ldrb	r2, [r7, #7]
 80084f2:	4909      	ldr	r1, [pc, #36]	@ (8008518 <disk_initialize+0x4c>)
 80084f4:	440a      	add	r2, r1
 80084f6:	7a12      	ldrb	r2, [r2, #8]
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	4a03      	ldr	r2, [pc, #12]	@ (8008518 <disk_initialize+0x4c>)
 800850a:	2101      	movs	r1, #1
 800850c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	2001cc2c 	.word	0x2001cc2c

0800851c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4a0a      	ldr	r2, [pc, #40]	@ (8008558 <disk_read+0x3c>)
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	689c      	ldr	r4, [r3, #8]
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	4a07      	ldr	r2, [pc, #28]	@ (8008558 <disk_read+0x3c>)
 800853c:	4413      	add	r3, r2
 800853e:	7a18      	ldrb	r0, [r3, #8]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	47a0      	blx	r4
 8008548:	4603      	mov	r3, r0
 800854a:	75fb      	strb	r3, [r7, #23]
  return res;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd90      	pop	{r4, r7, pc}
 8008556:	bf00      	nop
 8008558:	2001cc2c 	.word	0x2001cc2c

0800855c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	4603      	mov	r3, r0
 800856a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	4a0a      	ldr	r2, [pc, #40]	@ (8008598 <disk_write+0x3c>)
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	68dc      	ldr	r4, [r3, #12]
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4a07      	ldr	r2, [pc, #28]	@ (8008598 <disk_write+0x3c>)
 800857c:	4413      	add	r3, r2
 800857e:	7a18      	ldrb	r0, [r3, #8]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	68b9      	ldr	r1, [r7, #8]
 8008586:	47a0      	blx	r4
 8008588:	4603      	mov	r3, r0
 800858a:	75fb      	strb	r3, [r7, #23]
  return res;
 800858c:	7dfb      	ldrb	r3, [r7, #23]
}
 800858e:	4618      	mov	r0, r3
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	bd90      	pop	{r4, r7, pc}
 8008596:	bf00      	nop
 8008598:	2001cc2c 	.word	0x2001cc2c

0800859c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	603a      	str	r2, [r7, #0]
 80085a6:	71fb      	strb	r3, [r7, #7]
 80085a8:	460b      	mov	r3, r1
 80085aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	4a09      	ldr	r2, [pc, #36]	@ (80085d4 <disk_ioctl+0x38>)
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	79fa      	ldrb	r2, [r7, #7]
 80085ba:	4906      	ldr	r1, [pc, #24]	@ (80085d4 <disk_ioctl+0x38>)
 80085bc:	440a      	add	r2, r1
 80085be:	7a10      	ldrb	r0, [r2, #8]
 80085c0:	79b9      	ldrb	r1, [r7, #6]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	2001cc2c 	.word	0x2001cc2c

080085d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3301      	adds	r3, #1
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80085e8:	89fb      	ldrh	r3, [r7, #14]
 80085ea:	021b      	lsls	r3, r3, #8
 80085ec:	b21a      	sxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b21b      	sxth	r3, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	b21b      	sxth	r3, r3
 80085f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80085fa:	89fb      	ldrh	r3, [r7, #14]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3303      	adds	r3, #3
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	3202      	adds	r2, #2
 8008620:	7812      	ldrb	r2, [r2, #0]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	3201      	adds	r2, #1
 800862e:	7812      	ldrb	r2, [r2, #0]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7812      	ldrb	r2, [r2, #0]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008640:	68fb      	ldr	r3, [r7, #12]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	887a      	ldrh	r2, [r7, #2]
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	887b      	ldrh	r3, [r7, #2]
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	887a      	ldrh	r2, [r7, #2]
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	701a      	strb	r2, [r3, #0]
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	607a      	str	r2, [r7, #4]
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	607a      	str	r2, [r7, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	b2d2      	uxtb	r2, r2
 80086ce:	701a      	strb	r2, [r3, #0]
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00d      	beq.n	8008712 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	1c53      	adds	r3, r2, #1
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	1c59      	adds	r1, r3, #1
 8008700:	6179      	str	r1, [r7, #20]
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3b01      	subs	r3, #1
 800870a:	607b      	str	r3, [r7, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f1      	bne.n	80086f6 <mem_cpy+0x1a>
	}
}
 8008712:	bf00      	nop
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800871e:	b480      	push	{r7}
 8008720:	b087      	sub	sp, #28
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	617a      	str	r2, [r7, #20]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3b01      	subs	r3, #1
 800873e:	607b      	str	r3, [r7, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f3      	bne.n	800872e <mem_set+0x10>
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008754:	b480      	push	{r7}
 8008756:	b089      	sub	sp, #36	@ 0x24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	61fa      	str	r2, [r7, #28]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	4619      	mov	r1, r3
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	61ba      	str	r2, [r7, #24]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	1acb      	subs	r3, r1, r3
 8008780:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <mem_cmp+0x40>
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0eb      	beq.n	800876c <mem_cmp+0x18>

	return r;
 8008794:	697b      	ldr	r3, [r7, #20]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3724      	adds	r7, #36	@ 0x24
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80087ac:	e002      	b.n	80087b4 <chk_chr+0x12>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3301      	adds	r3, #1
 80087b2:	607b      	str	r3, [r7, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <chk_chr+0x26>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d1f2      	bne.n	80087ae <chk_chr+0xc>
	return *str;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	781b      	ldrb	r3, [r3, #0]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	e029      	b.n	8008840 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80087ec:	4a27      	ldr	r2, [pc, #156]	@ (800888c <chk_lock+0xb4>)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	4413      	add	r3, r2
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01d      	beq.n	8008836 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087fa:	4a24      	ldr	r2, [pc, #144]	@ (800888c <chk_lock+0xb4>)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4413      	add	r3, r2
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d116      	bne.n	800883a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800880c:	4a1f      	ldr	r2, [pc, #124]	@ (800888c <chk_lock+0xb4>)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	4413      	add	r3, r2
 8008814:	3304      	adds	r3, #4
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800881c:	429a      	cmp	r2, r3
 800881e:	d10c      	bne.n	800883a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008820:	4a1a      	ldr	r2, [pc, #104]	@ (800888c <chk_lock+0xb4>)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	4413      	add	r3, r2
 8008828:	3308      	adds	r3, #8
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008830:	429a      	cmp	r2, r3
 8008832:	d102      	bne.n	800883a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008834:	e007      	b.n	8008846 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d9d2      	bls.n	80087ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d109      	bne.n	8008860 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <chk_lock+0x80>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d101      	bne.n	800885c <chk_lock+0x84>
 8008858:	2300      	movs	r3, #0
 800885a:	e010      	b.n	800887e <chk_lock+0xa6>
 800885c:	2312      	movs	r3, #18
 800885e:	e00e      	b.n	800887e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d108      	bne.n	8008878 <chk_lock+0xa0>
 8008866:	4a09      	ldr	r2, [pc, #36]	@ (800888c <chk_lock+0xb4>)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	4413      	add	r3, r2
 800886e:	330c      	adds	r3, #12
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008876:	d101      	bne.n	800887c <chk_lock+0xa4>
 8008878:	2310      	movs	r3, #16
 800887a:	e000      	b.n	800887e <chk_lock+0xa6>
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	2001ca0c 	.word	0x2001ca0c

08008890 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	e002      	b.n	80088a2 <enq_lock+0x12>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3301      	adds	r3, #1
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d806      	bhi.n	80088b6 <enq_lock+0x26>
 80088a8:	4a09      	ldr	r2, [pc, #36]	@ (80088d0 <enq_lock+0x40>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	4413      	add	r3, r2
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1f2      	bne.n	800889c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	bf14      	ite	ne
 80088bc:	2301      	movne	r3, #1
 80088be:	2300      	moveq	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	2001ca0c 	.word	0x2001ca0c

080088d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	e01f      	b.n	8008924 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80088e4:	4a41      	ldr	r2, [pc, #260]	@ (80089ec <inc_lock+0x118>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	4413      	add	r3, r2
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d113      	bne.n	800891e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80088f6:	4a3d      	ldr	r2, [pc, #244]	@ (80089ec <inc_lock+0x118>)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	4413      	add	r3, r2
 80088fe:	3304      	adds	r3, #4
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008906:	429a      	cmp	r2, r3
 8008908:	d109      	bne.n	800891e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800890a:	4a38      	ldr	r2, [pc, #224]	@ (80089ec <inc_lock+0x118>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	4413      	add	r3, r2
 8008912:	3308      	adds	r3, #8
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800891a:	429a      	cmp	r2, r3
 800891c:	d006      	beq.n	800892c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d9dc      	bls.n	80088e4 <inc_lock+0x10>
 800892a:	e000      	b.n	800892e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800892c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d132      	bne.n	800899a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e002      	b.n	8008940 <inc_lock+0x6c>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3301      	adds	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d806      	bhi.n	8008954 <inc_lock+0x80>
 8008946:	4a29      	ldr	r2, [pc, #164]	@ (80089ec <inc_lock+0x118>)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	4413      	add	r3, r2
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f2      	bne.n	800893a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d101      	bne.n	800895e <inc_lock+0x8a>
 800895a:	2300      	movs	r3, #0
 800895c:	e040      	b.n	80089e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4922      	ldr	r1, [pc, #136]	@ (80089ec <inc_lock+0x118>)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	440b      	add	r3, r1
 800896a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	491e      	ldr	r1, [pc, #120]	@ (80089ec <inc_lock+0x118>)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	440b      	add	r3, r1
 8008978:	3304      	adds	r3, #4
 800897a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	695a      	ldr	r2, [r3, #20]
 8008980:	491a      	ldr	r1, [pc, #104]	@ (80089ec <inc_lock+0x118>)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	440b      	add	r3, r1
 8008988:	3308      	adds	r3, #8
 800898a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800898c:	4a17      	ldr	r2, [pc, #92]	@ (80089ec <inc_lock+0x118>)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	4413      	add	r3, r2
 8008994:	330c      	adds	r3, #12
 8008996:	2200      	movs	r2, #0
 8008998:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d009      	beq.n	80089b4 <inc_lock+0xe0>
 80089a0:	4a12      	ldr	r2, [pc, #72]	@ (80089ec <inc_lock+0x118>)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	4413      	add	r3, r2
 80089a8:	330c      	adds	r3, #12
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <inc_lock+0xe0>
 80089b0:	2300      	movs	r3, #0
 80089b2:	e015      	b.n	80089e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <inc_lock+0xf8>
 80089ba:	4a0c      	ldr	r2, [pc, #48]	@ (80089ec <inc_lock+0x118>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	4413      	add	r3, r2
 80089c2:	330c      	adds	r3, #12
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	3301      	adds	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	e001      	b.n	80089d0 <inc_lock+0xfc>
 80089cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089d0:	4906      	ldr	r1, [pc, #24]	@ (80089ec <inc_lock+0x118>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	440b      	add	r3, r1
 80089d8:	330c      	adds	r3, #12
 80089da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	2001ca0c 	.word	0x2001ca0c

080089f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d825      	bhi.n	8008a50 <dec_lock+0x60>
		n = Files[i].ctr;
 8008a04:	4a17      	ldr	r2, [pc, #92]	@ (8008a64 <dec_lock+0x74>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	4413      	add	r3, r2
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008a12:	89fb      	ldrh	r3, [r7, #14]
 8008a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a18:	d101      	bne.n	8008a1e <dec_lock+0x2e>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008a1e:	89fb      	ldrh	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <dec_lock+0x3a>
 8008a24:	89fb      	ldrh	r3, [r7, #14]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a64 <dec_lock+0x74>)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	4413      	add	r3, r2
 8008a32:	330c      	adds	r3, #12
 8008a34:	89fa      	ldrh	r2, [r7, #14]
 8008a36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008a38:	89fb      	ldrh	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d105      	bne.n	8008a4a <dec_lock+0x5a>
 8008a3e:	4a09      	ldr	r2, [pc, #36]	@ (8008a64 <dec_lock+0x74>)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	4413      	add	r3, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	737b      	strb	r3, [r7, #13]
 8008a4e:	e001      	b.n	8008a54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008a50:	2302      	movs	r3, #2
 8008a52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008a54:	7b7b      	ldrb	r3, [r7, #13]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	2001ca0c 	.word	0x2001ca0c

08008a68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e010      	b.n	8008a98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a76:	4a0d      	ldr	r2, [pc, #52]	@ (8008aac <clear_lock+0x44>)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	4413      	add	r3, r2
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d105      	bne.n	8008a92 <clear_lock+0x2a>
 8008a86:	4a09      	ldr	r2, [pc, #36]	@ (8008aac <clear_lock+0x44>)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	011b      	lsls	r3, r3, #4
 8008a8c:	4413      	add	r3, r2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3301      	adds	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d9eb      	bls.n	8008a76 <clear_lock+0xe>
	}
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	2001ca0c 	.word	0x2001ca0c

08008ab0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	78db      	ldrb	r3, [r3, #3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d034      	beq.n	8008b2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7858      	ldrb	r0, [r3, #1]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	f7ff fd40 	bl	800855c <disk_write>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	e022      	b.n	8008b2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	1ad2      	subs	r2, r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d217      	bcs.n	8008b2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	789b      	ldrb	r3, [r3, #2]
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	e010      	b.n	8008b28 <sync_window+0x78>
					wsect += fs->fsize;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	7858      	ldrb	r0, [r3, #1]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	f7ff fd1d 	bl	800855c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d8eb      	bhi.n	8008b06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d01b      	beq.n	8008b88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff ffad 	bl	8008ab0 <sync_window>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d113      	bne.n	8008b88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7858      	ldrb	r0, [r3, #1]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	f7ff fcd5 	bl	800851c <disk_read>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d004      	beq.n	8008b82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff ff87 	bl	8008ab0 <sync_window>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d159      	bne.n	8008c60 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d149      	bne.n	8008c48 <sync_fs+0xb4>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	791b      	ldrb	r3, [r3, #4]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d145      	bne.n	8008c48 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	899b      	ldrh	r3, [r3, #12]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f7ff fda8 	bl	800871e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3338      	adds	r3, #56	@ 0x38
 8008bd2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008bd6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fd37 	bl	800864e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3338      	adds	r3, #56	@ 0x38
 8008be4:	4921      	ldr	r1, [pc, #132]	@ (8008c6c <sync_fs+0xd8>)
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fd4c 	bl	8008684 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3338      	adds	r3, #56	@ 0x38
 8008bf0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008bf4:	491e      	ldr	r1, [pc, #120]	@ (8008c70 <sync_fs+0xdc>)
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fd44 	bl	8008684 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3338      	adds	r3, #56	@ 0x38
 8008c00:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	f7ff fd3a 	bl	8008684 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3338      	adds	r3, #56	@ 0x38
 8008c14:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7ff fd30 	bl	8008684 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7858      	ldrb	r0, [r3, #1]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f7ff fc8d 	bl	800855c <disk_write>
			fs->fsi_flag = 0;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff fca3 	bl	800859c <disk_ioctl>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <sync_fs+0xcc>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	41615252 	.word	0x41615252
 8008c70:	61417272 	.word	0x61417272

08008c74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	3b02      	subs	r3, #2
 8008c82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	3b02      	subs	r3, #2
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d301      	bcc.n	8008c94 <clust2sect+0x20>
 8008c90:	2300      	movs	r3, #0
 8008c92:	e008      	b.n	8008ca6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	895b      	ldrh	r3, [r3, #10]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	fb03 f202 	mul.w	r2, r3, r2
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca4:	4413      	add	r3, r2
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d904      	bls.n	8008cd2 <get_fat+0x20>
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e0ba      	b.n	8008e4e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	f000 8082 	beq.w	8008dec <get_fat+0x13a>
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	f300 80a6 	bgt.w	8008e3a <get_fat+0x188>
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d002      	beq.n	8008cf8 <get_fat+0x46>
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d055      	beq.n	8008da2 <get_fat+0xf0>
 8008cf6:	e0a0      	b.n	8008e3a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	899b      	ldrh	r3, [r3, #12]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d16:	4413      	add	r3, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6938      	ldr	r0, [r7, #16]
 8008d1c:	f7ff ff0c 	bl	8008b38 <move_window>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f040 808c 	bne.w	8008e40 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	60fa      	str	r2, [r7, #12]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	8992      	ldrh	r2, [r2, #12]
 8008d32:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d36:	fb01 f202 	mul.w	r2, r1, r2
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	899b      	ldrh	r3, [r3, #12]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d56:	4413      	add	r3, r2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6938      	ldr	r0, [r7, #16]
 8008d5c:	f7ff feec 	bl	8008b38 <move_window>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d16e      	bne.n	8008e44 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	899b      	ldrh	r3, [r3, #12]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d72:	fb01 f202 	mul.w	r2, r1, r2
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <get_fat+0xe6>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	091b      	lsrs	r3, r3, #4
 8008d96:	e002      	b.n	8008d9e <get_fat+0xec>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d9e:	617b      	str	r3, [r7, #20]
			break;
 8008da0:	e055      	b.n	8008e4e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	899b      	ldrh	r3, [r3, #12]
 8008daa:	085b      	lsrs	r3, r3, #1
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008db6:	4413      	add	r3, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	6938      	ldr	r0, [r7, #16]
 8008dbc:	f7ff febc 	bl	8008b38 <move_window>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d140      	bne.n	8008e48 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	8992      	ldrh	r2, [r2, #12]
 8008dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dd8:	fb00 f202 	mul.w	r2, r0, r2
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	440b      	add	r3, r1
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fbf9 	bl	80085d8 <ld_word>
 8008de6:	4603      	mov	r3, r0
 8008de8:	617b      	str	r3, [r7, #20]
			break;
 8008dea:	e030      	b.n	8008e4e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	899b      	ldrh	r3, [r3, #12]
 8008df4:	089b      	lsrs	r3, r3, #2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4619      	mov	r1, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e00:	4413      	add	r3, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	6938      	ldr	r0, [r7, #16]
 8008e06:	f7ff fe97 	bl	8008b38 <move_window>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11d      	bne.n	8008e4c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	8992      	ldrh	r2, [r2, #12]
 8008e1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e22:	fb00 f202 	mul.w	r2, r0, r2
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	440b      	add	r3, r1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fbec 	bl	8008608 <ld_dword>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008e36:	617b      	str	r3, [r7, #20]
			break;
 8008e38:	e009      	b.n	8008e4e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e006      	b.n	8008e4e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e40:	bf00      	nop
 8008e42:	e004      	b.n	8008e4e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e44:	bf00      	nop
 8008e46:	e002      	b.n	8008e4e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e4c:	bf00      	nop
		}
	}

	return val;
 8008e4e:	697b      	ldr	r3, [r7, #20]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b089      	sub	sp, #36	@ 0x24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008e64:	2302      	movs	r3, #2
 8008e66:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	f240 8109 	bls.w	8009082 <put_fat+0x22a>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	f080 8103 	bcs.w	8009082 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	f000 80b6 	beq.w	8008ff2 <put_fat+0x19a>
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f300 80fb 	bgt.w	8009082 <put_fat+0x22a>
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d003      	beq.n	8008e98 <put_fat+0x40>
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f000 8083 	beq.w	8008f9c <put_fat+0x144>
 8008e96:	e0f4      	b.n	8009082 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	899b      	ldrh	r3, [r3, #12]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eb6:	4413      	add	r3, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fe3c 	bl	8008b38 <move_window>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ec4:	7ffb      	ldrb	r3, [r7, #31]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f040 80d4 	bne.w	8009074 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	61ba      	str	r2, [r7, #24]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	8992      	ldrh	r2, [r2, #12]
 8008edc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ee0:	fb00 f202 	mul.w	r2, r0, r2
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <put_fat+0xb8>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	b25b      	sxtb	r3, r3
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	b25a      	sxtb	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	e001      	b.n	8008f14 <put_fat+0xbc>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	899b      	ldrh	r3, [r3, #12]
 8008f26:	4619      	mov	r1, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f2e:	4413      	add	r3, r2
 8008f30:	4619      	mov	r1, r3
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff fe00 	bl	8008b38 <move_window>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f3c:	7ffb      	ldrb	r3, [r7, #31]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f040 809a 	bne.w	8009078 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	899b      	ldrh	r3, [r3, #12]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f56:	fb00 f202 	mul.w	r2, r0, r2
 8008f5a:	1a9b      	subs	r3, r3, r2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <put_fat+0x11a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	091b      	lsrs	r3, r3, #4
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e00e      	b.n	8008f90 <put_fat+0x138>
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	f023 030f 	bic.w	r3, r3, #15
 8008f7c:	b25a      	sxtb	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	b25b      	sxtb	r3, r3
 8008f84:	f003 030f 	and.w	r3, r3, #15
 8008f88:	b25b      	sxtb	r3, r3
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	b25b      	sxtb	r3, r3
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	70da      	strb	r2, [r3, #3]
			break;
 8008f9a:	e072      	b.n	8009082 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	899b      	ldrh	r3, [r3, #12]
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4619      	mov	r1, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fb0:	4413      	add	r3, r2
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff fdbf 	bl	8008b38 <move_window>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fbe:	7ffb      	ldrb	r3, [r7, #31]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d15b      	bne.n	800907c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	8992      	ldrh	r2, [r2, #12]
 8008fd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fd6:	fb00 f202 	mul.w	r2, r0, r2
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	440b      	add	r3, r1
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	b292      	uxth	r2, r2
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fb32 	bl	800864e <st_word>
			fs->wflag = 1;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2201      	movs	r2, #1
 8008fee:	70da      	strb	r2, [r3, #3]
			break;
 8008ff0:	e047      	b.n	8009082 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	899b      	ldrh	r3, [r3, #12]
 8008ffa:	089b      	lsrs	r3, r3, #2
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4619      	mov	r1, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	fbb3 f3f1 	udiv	r3, r3, r1
 8009006:	4413      	add	r3, r2
 8009008:	4619      	mov	r1, r3
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fd94 	bl	8008b38 <move_window>
 8009010:	4603      	mov	r3, r0
 8009012:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009014:	7ffb      	ldrb	r3, [r7, #31]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d132      	bne.n	8009080 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	8992      	ldrh	r2, [r2, #12]
 800902e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009032:	fb00 f202 	mul.w	r2, r0, r2
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	440b      	add	r3, r1
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fae4 	bl	8008608 <ld_dword>
 8009040:	4603      	mov	r3, r0
 8009042:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009046:	4323      	orrs	r3, r4
 8009048:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	8992      	ldrh	r2, [r2, #12]
 8009058:	fbb3 f0f2 	udiv	r0, r3, r2
 800905c:	fb00 f202 	mul.w	r2, r0, r2
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	440b      	add	r3, r1
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fb0c 	bl	8008684 <st_dword>
			fs->wflag = 1;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2201      	movs	r2, #1
 8009070:	70da      	strb	r2, [r3, #3]
			break;
 8009072:	e006      	b.n	8009082 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009074:	bf00      	nop
 8009076:	e004      	b.n	8009082 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009078:	bf00      	nop
 800907a:	e002      	b.n	8009082 <put_fat+0x22a>
			if (res != FR_OK) break;
 800907c:	bf00      	nop
 800907e:	e000      	b.n	8009082 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009080:	bf00      	nop
		}
	}
	return res;
 8009082:	7ffb      	ldrb	r3, [r7, #31]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3724      	adds	r7, #36	@ 0x24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}

0800908c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d904      	bls.n	80090b2 <remove_chain+0x26>
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d301      	bcc.n	80090b6 <remove_chain+0x2a>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e04b      	b.n	800914e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00c      	beq.n	80090d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	69b8      	ldr	r0, [r7, #24]
 80090c4:	f7ff fec8 	bl	8008e58 <put_fat>
 80090c8:	4603      	mov	r3, r0
 80090ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80090cc:	7ffb      	ldrb	r3, [r7, #31]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <remove_chain+0x4a>
 80090d2:	7ffb      	ldrb	r3, [r7, #31]
 80090d4:	e03b      	b.n	800914e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff fdea 	bl	8008cb2 <get_fat>
 80090de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d031      	beq.n	800914a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <remove_chain+0x64>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e02e      	b.n	800914e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d101      	bne.n	80090fc <remove_chain+0x70>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e028      	b.n	800914e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090fc:	2200      	movs	r2, #0
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	69b8      	ldr	r0, [r7, #24]
 8009102:	f7ff fea9 	bl	8008e58 <put_fat>
 8009106:	4603      	mov	r3, r0
 8009108:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800910a:	7ffb      	ldrb	r3, [r7, #31]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <remove_chain+0x88>
 8009110:	7ffb      	ldrb	r3, [r7, #31]
 8009112:	e01c      	b.n	800914e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	699a      	ldr	r2, [r3, #24]
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	3b02      	subs	r3, #2
 800911e:	429a      	cmp	r2, r3
 8009120:	d20b      	bcs.n	800913a <remove_chain+0xae>
			fs->free_clst++;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	791b      	ldrb	r3, [r3, #4]
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	b2da      	uxtb	r2, r3
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	429a      	cmp	r2, r3
 8009146:	d3c6      	bcc.n	80090d6 <remove_chain+0x4a>
 8009148:	e000      	b.n	800914c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800914a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b088      	sub	sp, #32
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10d      	bne.n	8009188 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d004      	beq.n	8009182 <create_chain+0x2c>
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	429a      	cmp	r2, r3
 8009180:	d31b      	bcc.n	80091ba <create_chain+0x64>
 8009182:	2301      	movs	r3, #1
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	e018      	b.n	80091ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fd91 	bl	8008cb2 <get_fat>
 8009190:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d801      	bhi.n	800919c <create_chain+0x46>
 8009198:	2301      	movs	r3, #1
 800919a:	e070      	b.n	800927e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d101      	bne.n	80091a8 <create_chain+0x52>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	e06a      	b.n	800927e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d201      	bcs.n	80091b6 <create_chain+0x60>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	e063      	b.n	800927e <create_chain+0x128>
		scl = clst;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	3301      	adds	r3, #1
 80091c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d307      	bcc.n	80091de <create_chain+0x88>
				ncl = 2;
 80091ce:	2302      	movs	r3, #2
 80091d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d901      	bls.n	80091de <create_chain+0x88>
 80091da:	2300      	movs	r3, #0
 80091dc:	e04f      	b.n	800927e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80091de:	69f9      	ldr	r1, [r7, #28]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fd66 	bl	8008cb2 <get_fat>
 80091e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00e      	beq.n	800920c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d003      	beq.n	80091fc <create_chain+0xa6>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fa:	d101      	bne.n	8009200 <create_chain+0xaa>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	e03e      	b.n	800927e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	429a      	cmp	r2, r3
 8009206:	d1da      	bne.n	80091be <create_chain+0x68>
 8009208:	2300      	movs	r3, #0
 800920a:	e038      	b.n	800927e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800920c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	69f9      	ldr	r1, [r7, #28]
 8009214:	6938      	ldr	r0, [r7, #16]
 8009216:	f7ff fe1f 	bl	8008e58 <put_fat>
 800921a:	4603      	mov	r3, r0
 800921c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d109      	bne.n	8009238 <create_chain+0xe2>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d006      	beq.n	8009238 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6938      	ldr	r0, [r7, #16]
 8009230:	f7ff fe12 	bl	8008e58 <put_fat>
 8009234:	4603      	mov	r3, r0
 8009236:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d116      	bne.n	800926c <create_chain+0x116>
		fs->last_clst = ncl;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	699a      	ldr	r2, [r3, #24]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	3b02      	subs	r3, #2
 800924e:	429a      	cmp	r2, r3
 8009250:	d804      	bhi.n	800925c <create_chain+0x106>
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	f043 0301 	orr.w	r3, r3, #1
 8009264:	b2da      	uxtb	r2, r3
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	711a      	strb	r2, [r3, #4]
 800926a:	e007      	b.n	800927c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d102      	bne.n	8009278 <create_chain+0x122>
 8009272:	f04f 33ff 	mov.w	r3, #4294967295
 8009276:	e000      	b.n	800927a <create_chain+0x124>
 8009278:	2301      	movs	r3, #1
 800927a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800927c:	69fb      	ldr	r3, [r7, #28]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3720      	adds	r7, #32
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009286:	b480      	push	{r7}
 8009288:	b087      	sub	sp, #28
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929a:	3304      	adds	r3, #4
 800929c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	899b      	ldrh	r3, [r3, #12]
 80092a2:	461a      	mov	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	8952      	ldrh	r2, [r2, #10]
 80092ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	613a      	str	r2, [r7, #16]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <clmt_clust+0x42>
 80092c4:	2300      	movs	r3, #0
 80092c6:	e010      	b.n	80092ea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d307      	bcc.n	80092e0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3304      	adds	r3, #4
 80092dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092de:	e7e9      	b.n	80092b4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80092e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	4413      	add	r3, r2
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800930c:	d204      	bcs.n	8009318 <dir_sdi+0x22>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009318:	2302      	movs	r3, #2
 800931a:	e071      	b.n	8009400 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <dir_sdi+0x46>
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d902      	bls.n	800933c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10c      	bne.n	800935c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	095b      	lsrs	r3, r3, #5
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	8912      	ldrh	r2, [r2, #8]
 800934a:	4293      	cmp	r3, r2
 800934c:	d301      	bcc.n	8009352 <dir_sdi+0x5c>
 800934e:	2302      	movs	r3, #2
 8009350:	e056      	b.n	8009400 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	61da      	str	r2, [r3, #28]
 800935a:	e02d      	b.n	80093b8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	895b      	ldrh	r3, [r3, #10]
 8009360:	461a      	mov	r2, r3
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	899b      	ldrh	r3, [r3, #12]
 8009366:	fb02 f303 	mul.w	r3, r2, r3
 800936a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800936c:	e019      	b.n	80093a2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6979      	ldr	r1, [r7, #20]
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fc9d 	bl	8008cb2 <get_fat>
 8009378:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009380:	d101      	bne.n	8009386 <dir_sdi+0x90>
 8009382:	2301      	movs	r3, #1
 8009384:	e03c      	b.n	8009400 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d904      	bls.n	8009396 <dir_sdi+0xa0>
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	429a      	cmp	r2, r3
 8009394:	d301      	bcc.n	800939a <dir_sdi+0xa4>
 8009396:	2302      	movs	r3, #2
 8009398:	e032      	b.n	8009400 <dir_sdi+0x10a>
			ofs -= csz;
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d2e1      	bcs.n	800936e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	6938      	ldr	r0, [r7, #16]
 80093ae:	f7ff fc61 	bl	8008c74 <clust2sect>
 80093b2:	4602      	mov	r2, r0
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <dir_sdi+0xd4>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e01a      	b.n	8009400 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	899b      	ldrh	r3, [r3, #12]
 80093d2:	4619      	mov	r1, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80093da:	441a      	add	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	899b      	ldrh	r3, [r3, #12]
 80093ea:	461a      	mov	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80093f2:	fb00 f202 	mul.w	r2, r0, r2
 80093f6:	1a9b      	subs	r3, r3, r2
 80093f8:	18ca      	adds	r2, r1, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	3320      	adds	r3, #32
 800941e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <dir_next+0x28>
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800942e:	d301      	bcc.n	8009434 <dir_next+0x2c>
 8009430:	2304      	movs	r3, #4
 8009432:	e0bb      	b.n	80095ac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	899b      	ldrh	r3, [r3, #12]
 8009438:	461a      	mov	r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009440:	fb01 f202 	mul.w	r2, r1, r2
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 809d 	bne.w	8009586 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10b      	bne.n	8009476 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	8912      	ldrh	r2, [r2, #8]
 8009466:	4293      	cmp	r3, r2
 8009468:	f0c0 808d 	bcc.w	8009586 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	61da      	str	r2, [r3, #28]
 8009472:	2304      	movs	r3, #4
 8009474:	e09a      	b.n	80095ac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	899b      	ldrh	r3, [r3, #12]
 800947a:	461a      	mov	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	8952      	ldrh	r2, [r2, #10]
 8009486:	3a01      	subs	r2, #1
 8009488:	4013      	ands	r3, r2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d17b      	bne.n	8009586 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7ff fc0b 	bl	8008cb2 <get_fat>
 800949c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d801      	bhi.n	80094a8 <dir_next+0xa0>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e081      	b.n	80095ac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d101      	bne.n	80094b4 <dir_next+0xac>
 80094b0:	2301      	movs	r3, #1
 80094b2:	e07b      	b.n	80095ac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d359      	bcc.n	8009572 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d104      	bne.n	80094ce <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	61da      	str	r2, [r3, #28]
 80094ca:	2304      	movs	r3, #4
 80094cc:	e06e      	b.n	80095ac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7ff fe3d 	bl	8009156 <create_chain>
 80094dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <dir_next+0xe0>
 80094e4:	2307      	movs	r3, #7
 80094e6:	e061      	b.n	80095ac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <dir_next+0xea>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e05c      	b.n	80095ac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f8:	d101      	bne.n	80094fe <dir_next+0xf6>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e056      	b.n	80095ac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fad6 	bl	8008ab0 <sync_window>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <dir_next+0x106>
 800950a:	2301      	movs	r3, #1
 800950c:	e04e      	b.n	80095ac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	899b      	ldrh	r3, [r3, #12]
 8009518:	461a      	mov	r2, r3
 800951a:	2100      	movs	r1, #0
 800951c:	f7ff f8ff 	bl	800871e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009520:	2300      	movs	r3, #0
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	6979      	ldr	r1, [r7, #20]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fba4 	bl	8008c74 <clust2sect>
 800952c:	4602      	mov	r2, r0
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	635a      	str	r2, [r3, #52]	@ 0x34
 8009532:	e012      	b.n	800955a <dir_next+0x152>
						fs->wflag = 1;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7ff fab8 	bl	8008ab0 <sync_window>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <dir_next+0x142>
 8009546:	2301      	movs	r3, #1
 8009548:	e030      	b.n	80095ac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	3301      	adds	r3, #1
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	635a      	str	r2, [r3, #52]	@ 0x34
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	895b      	ldrh	r3, [r3, #10]
 800955e:	461a      	mov	r2, r3
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	4293      	cmp	r3, r2
 8009564:	d3e6      	bcc.n	8009534 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	1ad2      	subs	r2, r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009578:	6979      	ldr	r1, [r7, #20]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff fb7a 	bl	8008c74 <clust2sect>
 8009580:	4602      	mov	r2, r0
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	899b      	ldrh	r3, [r3, #12]
 8009596:	461a      	mov	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	fbb3 f0f2 	udiv	r0, r3, r2
 800959e:	fb00 f202 	mul.w	r2, r0, r2
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	18ca      	adds	r2, r1, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80095c4:	2100      	movs	r1, #0
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fe95 	bl	80092f6 <dir_sdi>
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d12b      	bne.n	800962e <dir_alloc+0x7a>
		n = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	4619      	mov	r1, r3
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff faa9 	bl	8008b38 <move_window>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d11d      	bne.n	800962c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2be5      	cmp	r3, #229	@ 0xe5
 80095f8:	d004      	beq.n	8009604 <dir_alloc+0x50>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d107      	bne.n	8009614 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3301      	adds	r3, #1
 8009608:	613b      	str	r3, [r7, #16]
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d102      	bne.n	8009618 <dir_alloc+0x64>
 8009612:	e00c      	b.n	800962e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009614:	2300      	movs	r3, #0
 8009616:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009618:	2101      	movs	r1, #1
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fef4 	bl	8009408 <dir_next>
 8009620:	4603      	mov	r3, r0
 8009622:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0d7      	beq.n	80095da <dir_alloc+0x26>
 800962a:	e000      	b.n	800962e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800962c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	2b04      	cmp	r3, #4
 8009632:	d101      	bne.n	8009638 <dir_alloc+0x84>
 8009634:	2307      	movs	r3, #7
 8009636:	75fb      	strb	r3, [r7, #23]
	return res;
 8009638:	7dfb      	ldrb	r3, [r7, #23]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	331a      	adds	r3, #26
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe ffc1 	bl	80085d8 <ld_word>
 8009656:	4603      	mov	r3, r0
 8009658:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d109      	bne.n	8009676 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	3314      	adds	r3, #20
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe ffb6 	bl	80085d8 <ld_word>
 800966c:	4603      	mov	r3, r0
 800966e:	041b      	lsls	r3, r3, #16
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009676:	68fb      	ldr	r3, [r7, #12]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	331a      	adds	r3, #26
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	b292      	uxth	r2, r2
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe ffd9 	bl	800864e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d109      	bne.n	80096b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f103 0214 	add.w	r2, r3, #20
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	0c1b      	lsrs	r3, r3, #16
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7fe ffcb 	bl	800864e <st_word>
	}
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80096c0:	b590      	push	{r4, r7, lr}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	331a      	adds	r3, #26
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe ff82 	bl	80085d8 <ld_word>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <cmp_lfn+0x1e>
 80096da:	2300      	movs	r3, #0
 80096dc:	e059      	b.n	8009792 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096e6:	1e5a      	subs	r2, r3, #1
 80096e8:	4613      	mov	r3, r2
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096f4:	2301      	movs	r3, #1
 80096f6:	81fb      	strh	r3, [r7, #14]
 80096f8:	2300      	movs	r3, #0
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	e033      	b.n	8009766 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80096fe:	4a27      	ldr	r2, [pc, #156]	@ (800979c <cmp_lfn+0xdc>)
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	4413      	add	r3, r2
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	4413      	add	r3, r2
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe ff63 	bl	80085d8 <ld_word>
 8009712:	4603      	mov	r3, r0
 8009714:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009716:	89fb      	ldrh	r3, [r7, #14]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01a      	beq.n	8009752 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2bfe      	cmp	r3, #254	@ 0xfe
 8009720:	d812      	bhi.n	8009748 <cmp_lfn+0x88>
 8009722:	89bb      	ldrh	r3, [r7, #12]
 8009724:	4618      	mov	r0, r3
 8009726:	f001 fd3d 	bl	800b1a4 <ff_wtoupper>
 800972a:	4603      	mov	r3, r0
 800972c:	461c      	mov	r4, r3
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	617a      	str	r2, [r7, #20]
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f001 fd31 	bl	800b1a4 <ff_wtoupper>
 8009742:	4603      	mov	r3, r0
 8009744:	429c      	cmp	r4, r3
 8009746:	d001      	beq.n	800974c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009748:	2300      	movs	r3, #0
 800974a:	e022      	b.n	8009792 <cmp_lfn+0xd2>
			}
			wc = uc;
 800974c:	89bb      	ldrh	r3, [r7, #12]
 800974e:	81fb      	strh	r3, [r7, #14]
 8009750:	e006      	b.n	8009760 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009752:	89bb      	ldrh	r3, [r7, #12]
 8009754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009758:	4293      	cmp	r3, r2
 800975a:	d001      	beq.n	8009760 <cmp_lfn+0xa0>
 800975c:	2300      	movs	r3, #0
 800975e:	e018      	b.n	8009792 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3301      	adds	r3, #1
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b0c      	cmp	r3, #12
 800976a:	d9c8      	bls.n	80096fe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <cmp_lfn+0xd0>
 8009778:	89fb      	ldrh	r3, [r7, #14]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d008      	beq.n	8009790 <cmp_lfn+0xd0>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <cmp_lfn+0xd0>
 800978c:	2300      	movs	r3, #0
 800978e:	e000      	b.n	8009792 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009790:	2301      	movs	r3, #1
}
 8009792:	4618      	mov	r0, r3
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	bd90      	pop	{r4, r7, pc}
 800979a:	bf00      	nop
 800979c:	0800b4e4 	.word	0x0800b4e4

080097a0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	4611      	mov	r1, r2
 80097ac:	461a      	mov	r2, r3
 80097ae:	460b      	mov	r3, r1
 80097b0:	71fb      	strb	r3, [r7, #7]
 80097b2:	4613      	mov	r3, r2
 80097b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	330d      	adds	r3, #13
 80097ba:	79ba      	ldrb	r2, [r7, #6]
 80097bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	330b      	adds	r3, #11
 80097c2:	220f      	movs	r2, #15
 80097c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	330c      	adds	r3, #12
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	331a      	adds	r3, #26
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe ff3a 	bl	800864e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	1e5a      	subs	r2, r3, #1
 80097de:	4613      	mov	r3, r2
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	82fb      	strh	r3, [r7, #22]
 80097ee:	2300      	movs	r3, #0
 80097f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80097f2:	8afb      	ldrh	r3, [r7, #22]
 80097f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d007      	beq.n	800980c <put_lfn+0x6c>
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	1c5a      	adds	r2, r3, #1
 8009800:	61fa      	str	r2, [r7, #28]
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800980c:	4a17      	ldr	r2, [pc, #92]	@ (800986c <put_lfn+0xcc>)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	4413      	add	r3, r2
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	4413      	add	r3, r2
 800981a:	8afa      	ldrh	r2, [r7, #22]
 800981c:	4611      	mov	r1, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe ff15 	bl	800864e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009824:	8afb      	ldrh	r3, [r7, #22]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <put_lfn+0x90>
 800982a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800982e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	3301      	adds	r3, #1
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b0c      	cmp	r3, #12
 800983a:	d9da      	bls.n	80097f2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800983c:	8afb      	ldrh	r3, [r7, #22]
 800983e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009842:	4293      	cmp	r3, r2
 8009844:	d006      	beq.n	8009854 <put_lfn+0xb4>
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d103      	bne.n	800985c <put_lfn+0xbc>
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800985a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	79fa      	ldrb	r2, [r7, #7]
 8009860:	701a      	strb	r2, [r3, #0]
}
 8009862:	bf00      	nop
 8009864:	3720      	adds	r7, #32
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	0800b4e4 	.word	0x0800b4e4

08009870 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08c      	sub	sp, #48	@ 0x30
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800987e:	220b      	movs	r2, #11
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f7fe ff2a 	bl	80086dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b05      	cmp	r3, #5
 800988c:	d92b      	bls.n	80098e6 <gen_numname+0x76>
		sr = seq;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009892:	e022      	b.n	80098da <gen_numname+0x6a>
			wc = *lfn++;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1c9a      	adds	r2, r3, #2
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800989e:	2300      	movs	r3, #0
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098a2:	e017      	b.n	80098d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	005a      	lsls	r2, r3, #1
 80098a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	4413      	add	r3, r2
 80098b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80098b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80098b4:	085b      	lsrs	r3, r3, #1
 80098b6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d005      	beq.n	80098ce <gen_numname+0x5e>
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80098c8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80098cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	3301      	adds	r3, #1
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	2b0f      	cmp	r3, #15
 80098d8:	d9e4      	bls.n	80098a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1d8      	bne.n	8009894 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80098e6:	2307      	movs	r3, #7
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	3330      	adds	r3, #48	@ 0x30
 80098f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80098fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098fe:	2b39      	cmp	r3, #57	@ 0x39
 8009900:	d904      	bls.n	800990c <gen_numname+0x9c>
 8009902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009906:	3307      	adds	r3, #7
 8009908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	1e5a      	subs	r2, r3, #1
 8009910:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009912:	3330      	adds	r3, #48	@ 0x30
 8009914:	443b      	add	r3, r7
 8009916:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800991a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	091b      	lsrs	r3, r3, #4
 8009922:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1df      	bne.n	80098ea <gen_numname+0x7a>
	ns[i] = '~';
 800992a:	f107 0214 	add.w	r2, r7, #20
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	4413      	add	r3, r2
 8009932:	227e      	movs	r2, #126	@ 0x7e
 8009934:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009936:	2300      	movs	r3, #0
 8009938:	627b      	str	r3, [r7, #36]	@ 0x24
 800993a:	e002      	b.n	8009942 <gen_numname+0xd2>
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	3301      	adds	r3, #1
 8009940:	627b      	str	r3, [r7, #36]	@ 0x24
 8009942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009946:	429a      	cmp	r2, r3
 8009948:	d205      	bcs.n	8009956 <gen_numname+0xe6>
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	4413      	add	r3, r2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b20      	cmp	r3, #32
 8009954:	d1f2      	bne.n	800993c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	2b07      	cmp	r3, #7
 800995a:	d807      	bhi.n	800996c <gen_numname+0xfc>
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009962:	3330      	adds	r3, #48	@ 0x30
 8009964:	443b      	add	r3, r7
 8009966:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800996a:	e000      	b.n	800996e <gen_numname+0xfe>
 800996c:	2120      	movs	r1, #32
 800996e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	627a      	str	r2, [r7, #36]	@ 0x24
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4413      	add	r3, r2
 8009978:	460a      	mov	r2, r1
 800997a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800997c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997e:	2b07      	cmp	r3, #7
 8009980:	d9e9      	bls.n	8009956 <gen_numname+0xe6>
}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	3730      	adds	r7, #48	@ 0x30
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009998:	230b      	movs	r3, #11
 800999a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	0852      	lsrs	r2, r2, #1
 80099a2:	01db      	lsls	r3, r3, #7
 80099a4:	4313      	orrs	r3, r2
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	1c59      	adds	r1, r3, #1
 80099ac:	6079      	str	r1, [r7, #4]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	4413      	add	r3, r2
 80099b2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1ed      	bne.n	800999c <sum_sfn+0x10>
	return sum;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b086      	sub	sp, #24
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fc89 	bl	80092f6 <dir_sdi>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <dir_find+0x24>
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	e0a9      	b.n	8009b46 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099f2:	23ff      	movs	r3, #255	@ 0xff
 80099f4:	753b      	strb	r3, [r7, #20]
 80099f6:	7d3b      	ldrb	r3, [r7, #20]
 80099f8:	757b      	strb	r3, [r7, #21]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6938      	ldr	r0, [r7, #16]
 8009a0a:	f7ff f895 	bl	8008b38 <move_window>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 8090 	bne.w	8009b3a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a22:	7dbb      	ldrb	r3, [r7, #22]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <dir_find+0x60>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	75fb      	strb	r3, [r7, #23]
 8009a2c:	e08a      	b.n	8009b44 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	330b      	adds	r3, #11
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a3a:	73fb      	strb	r3, [r7, #15]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7bfa      	ldrb	r2, [r7, #15]
 8009a40:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009a42:	7dbb      	ldrb	r3, [r7, #22]
 8009a44:	2be5      	cmp	r3, #229	@ 0xe5
 8009a46:	d007      	beq.n	8009a58 <dir_find+0x8a>
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	f003 0308 	and.w	r3, r3, #8
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <dir_find+0x98>
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	2b0f      	cmp	r3, #15
 8009a56:	d006      	beq.n	8009a66 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a58:	23ff      	movs	r3, #255	@ 0xff
 8009a5a:	757b      	strb	r3, [r7, #21]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a62:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a64:	e05e      	b.n	8009b24 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b0f      	cmp	r3, #15
 8009a6a:	d136      	bne.n	8009ada <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d154      	bne.n	8009b24 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009a7a:	7dbb      	ldrb	r3, [r7, #22]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00d      	beq.n	8009aa0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	7b5b      	ldrb	r3, [r3, #13]
 8009a8a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009a8c:	7dbb      	ldrb	r3, [r7, #22]
 8009a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a92:	75bb      	strb	r3, [r7, #22]
 8009a94:	7dbb      	ldrb	r3, [r7, #22]
 8009a96:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	695a      	ldr	r2, [r3, #20]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009aa0:	7dba      	ldrb	r2, [r7, #22]
 8009aa2:	7d7b      	ldrb	r3, [r7, #21]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d115      	bne.n	8009ad4 <dir_find+0x106>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	330d      	adds	r3, #13
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	7d3a      	ldrb	r2, [r7, #20]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d10e      	bne.n	8009ad4 <dir_find+0x106>
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	691a      	ldr	r2, [r3, #16]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	f7ff fdfd 	bl	80096c0 <cmp_lfn>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <dir_find+0x106>
 8009acc:	7d7b      	ldrb	r3, [r7, #21]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	e000      	b.n	8009ad6 <dir_find+0x108>
 8009ad4:	23ff      	movs	r3, #255	@ 0xff
 8009ad6:	757b      	strb	r3, [r7, #21]
 8009ad8:	e024      	b.n	8009b24 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009ada:	7d7b      	ldrb	r3, [r7, #21]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d109      	bne.n	8009af4 <dir_find+0x126>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff ff51 	bl	800998c <sum_sfn>
 8009aea:	4603      	mov	r3, r0
 8009aec:	461a      	mov	r2, r3
 8009aee:	7d3b      	ldrb	r3, [r7, #20]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d024      	beq.n	8009b3e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <dir_find+0x14a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a18      	ldr	r0, [r3, #32]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3324      	adds	r3, #36	@ 0x24
 8009b0a:	220b      	movs	r2, #11
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	f7fe fe21 	bl	8008754 <mem_cmp>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d014      	beq.n	8009b42 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b18:	23ff      	movs	r3, #255	@ 0xff
 8009b1a:	757b      	strb	r3, [r7, #21]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b22:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff fc6e 	bl	8009408 <dir_next>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f43f af65 	beq.w	8009a02 <dir_find+0x34>
 8009b38:	e004      	b.n	8009b44 <dir_find+0x176>
		if (res != FR_OK) break;
 8009b3a:	bf00      	nop
 8009b3c:	e002      	b.n	8009b44 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009b3e:	bf00      	nop
 8009b40:	e000      	b.n	8009b44 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009b42:	bf00      	nop

	return res;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08c      	sub	sp, #48	@ 0x30
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009b64:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <dir_register+0x20>
 8009b6c:	2306      	movs	r3, #6
 8009b6e:	e0e0      	b.n	8009d32 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009b70:	2300      	movs	r3, #0
 8009b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b74:	e002      	b.n	8009b7c <dir_register+0x2c>
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	3301      	adds	r3, #1
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	4413      	add	r3, r2
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1f4      	bne.n	8009b76 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009b92:	f107 030c 	add.w	r3, r7, #12
 8009b96:	220c      	movs	r2, #12
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fd9f 	bl	80086dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d032      	beq.n	8009c0e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2240      	movs	r2, #64	@ 0x40
 8009bac:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bb4:	e016      	b.n	8009be4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	f107 010c 	add.w	r1, r7, #12
 8009bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc6:	f7ff fe53 	bl	8009870 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff feff 	bl	80099ce <dir_find>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8009bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	3301      	adds	r3, #1
 8009be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	2b63      	cmp	r3, #99	@ 0x63
 8009be8:	d9e5      	bls.n	8009bb6 <dir_register+0x66>
 8009bea:	e000      	b.n	8009bee <dir_register+0x9e>
			if (res != FR_OK) break;
 8009bec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	2b64      	cmp	r3, #100	@ 0x64
 8009bf2:	d101      	bne.n	8009bf8 <dir_register+0xa8>
 8009bf4:	2307      	movs	r3, #7
 8009bf6:	e09c      	b.n	8009d32 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d002      	beq.n	8009c06 <dir_register+0xb6>
 8009c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c04:	e095      	b.n	8009d32 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009c06:	7dfa      	ldrb	r2, [r7, #23]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <dir_register+0xd8>
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	4a47      	ldr	r2, [pc, #284]	@ (8009d3c <dir_register+0x1ec>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	089b      	lsrs	r3, r3, #2
 8009c24:	3301      	adds	r3, #1
 8009c26:	e000      	b.n	8009c2a <dir_register+0xda>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009c2c:	6a39      	ldr	r1, [r7, #32]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fcc0 	bl	80095b4 <dir_alloc>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d148      	bne.n	8009cd4 <dir_register+0x184>
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	623b      	str	r3, [r7, #32]
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d042      	beq.n	8009cd4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	695a      	ldr	r2, [r3, #20]
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	015b      	lsls	r3, r3, #5
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff fb4b 	bl	80092f6 <dir_sdi>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009c66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d132      	bne.n	8009cd4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3324      	adds	r3, #36	@ 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fe8a 	bl	800998c <sum_sfn>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	4619      	mov	r1, r3
 8009c82:	69f8      	ldr	r0, [r7, #28]
 8009c84:	f7fe ff58 	bl	8008b38 <move_window>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8009c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d11d      	bne.n	8009cd2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	6918      	ldr	r0, [r3, #16]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a19      	ldr	r1, [r3, #32]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	7efb      	ldrb	r3, [r7, #27]
 8009ca4:	f7ff fd7c 	bl	80097a0 <put_lfn>
				fs->wflag = 1;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	2201      	movs	r2, #1
 8009cac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009cae:	2100      	movs	r1, #0
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fba9 	bl	8009408 <dir_next>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d107      	bne.n	8009cd4 <dir_register+0x184>
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	623b      	str	r3, [r7, #32]
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1d5      	bne.n	8009c7c <dir_register+0x12c>
 8009cd0:	e000      	b.n	8009cd4 <dir_register+0x184>
				if (res != FR_OK) break;
 8009cd2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d128      	bne.n	8009d2e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	69f8      	ldr	r0, [r7, #28]
 8009ce4:	f7fe ff28 	bl	8008b38 <move_window>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d11b      	bne.n	8009d2e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fd0d 	bl	800871e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a18      	ldr	r0, [r3, #32]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3324      	adds	r3, #36	@ 0x24
 8009d0c:	220b      	movs	r2, #11
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f7fe fce4 	bl	80086dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	f002 0218 	and.w	r2, r2, #24
 8009d24:	b2d2      	uxtb	r2, r2
 8009d26:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3730      	adds	r7, #48	@ 0x30
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	4ec4ec4f 	.word	0x4ec4ec4f

08009d40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	@ 0x28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	61ba      	str	r2, [r7, #24]
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4413      	add	r3, r2
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d70:	2b1f      	cmp	r3, #31
 8009d72:	d940      	bls.n	8009df6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d76:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d78:	d006      	beq.n	8009d88 <create_name+0x48>
 8009d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d7e:	d110      	bne.n	8009da2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d80:	e002      	b.n	8009d88 <create_name+0x48>
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	3301      	adds	r3, #1
 8009d86:	61bb      	str	r3, [r7, #24]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d92:	d0f6      	beq.n	8009d82 <create_name+0x42>
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	4413      	add	r3, r2
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d9e:	d0f0      	beq.n	8009d82 <create_name+0x42>
			break;
 8009da0:	e02a      	b.n	8009df8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2bfe      	cmp	r3, #254	@ 0xfe
 8009da6:	d901      	bls.n	8009dac <create_name+0x6c>
 8009da8:	2306      	movs	r3, #6
 8009daa:	e17d      	b.n	800a0a8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009dac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009db4:	2101      	movs	r1, #1
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 f9b8 	bl	800b12c <ff_convert>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009dc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <create_name+0x8a>
 8009dc6:	2306      	movs	r3, #6
 8009dc8:	e16e      	b.n	800a0a8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dce:	d809      	bhi.n	8009de4 <create_name+0xa4>
 8009dd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	488d      	ldr	r0, [pc, #564]	@ (800a00c <create_name+0x2cc>)
 8009dd6:	f7fe fce4 	bl	80087a2 <chk_chr>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <create_name+0xa4>
 8009de0:	2306      	movs	r3, #6
 8009de2:	e161      	b.n	800a0a8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	617a      	str	r2, [r7, #20]
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009df2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009df4:	e7b4      	b.n	8009d60 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009df6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	441a      	add	r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e04:	2b1f      	cmp	r3, #31
 8009e06:	d801      	bhi.n	8009e0c <create_name+0xcc>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	e000      	b.n	8009e0e <create_name+0xce>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e12:	e011      	b.n	8009e38 <create_name+0xf8>
		w = lfn[di - 1];
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d002      	beq.n	8009e32 <create_name+0xf2>
 8009e2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e30:	d106      	bne.n	8009e40 <create_name+0x100>
		di--;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1ea      	bne.n	8009e14 <create_name+0xd4>
 8009e3e:	e000      	b.n	8009e42 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009e40:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <create_name+0x118>
 8009e54:	2306      	movs	r3, #6
 8009e56:	e127      	b.n	800a0a8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3324      	adds	r3, #36	@ 0x24
 8009e5c:	220b      	movs	r2, #11
 8009e5e:	2120      	movs	r1, #32
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fc5c 	bl	800871e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009e66:	2300      	movs	r3, #0
 8009e68:	61bb      	str	r3, [r7, #24]
 8009e6a:	e002      	b.n	8009e72 <create_name+0x132>
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4413      	add	r3, r2
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d0f5      	beq.n	8009e6c <create_name+0x12c>
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4413      	add	r3, r2
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e8c:	d0ee      	beq.n	8009e6c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d009      	beq.n	8009ea8 <create_name+0x168>
 8009e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e98:	f043 0303 	orr.w	r3, r3, #3
 8009e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009ea0:	e002      	b.n	8009ea8 <create_name+0x168>
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <create_name+0x182>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ec0:	d1ef      	bne.n	8009ea2 <create_name+0x162>

	i = b = 0; ni = 8;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009ec8:	2300      	movs	r3, #0
 8009eca:	623b      	str	r3, [r7, #32]
 8009ecc:	2308      	movs	r3, #8
 8009ece:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	61ba      	str	r2, [r7, #24]
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009ee0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 8090 	beq.w	800a008 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009ee8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d006      	beq.n	8009efc <create_name+0x1bc>
 8009eee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ef2:	d10a      	bne.n	8009f0a <create_name+0x1ca>
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d006      	beq.n	8009f0a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f00:	f043 0303 	orr.w	r3, r3, #3
 8009f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f08:	e07d      	b.n	800a006 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009f0a:	6a3a      	ldr	r2, [r7, #32]
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d203      	bcs.n	8009f1a <create_name+0x1da>
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d123      	bne.n	8009f62 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b0b      	cmp	r3, #11
 8009f1e:	d106      	bne.n	8009f2e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f24:	f043 0303 	orr.w	r3, r3, #3
 8009f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f2c:	e075      	b.n	800a01a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d005      	beq.n	8009f42 <create_name+0x202>
 8009f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f3a:	f043 0303 	orr.w	r3, r3, #3
 8009f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d866      	bhi.n	800a018 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	2308      	movs	r3, #8
 8009f50:	623b      	str	r3, [r7, #32]
 8009f52:	230b      	movs	r3, #11
 8009f54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009f56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009f60:	e051      	b.n	800a006 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009f62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f64:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f66:	d914      	bls.n	8009f92 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009f68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 f8dd 	bl	800b12c <ff_convert>
 8009f72:	4603      	mov	r3, r0
 8009f74:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <create_name+0x246>
 8009f7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f7e:	3b80      	subs	r3, #128	@ 0x80
 8009f80:	4a23      	ldr	r2, [pc, #140]	@ (800a010 <create_name+0x2d0>)
 8009f82:	5cd3      	ldrb	r3, [r2, r3]
 8009f84:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f8a:	f043 0302 	orr.w	r3, r3, #2
 8009f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009f92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <create_name+0x268>
 8009f98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	481d      	ldr	r0, [pc, #116]	@ (800a014 <create_name+0x2d4>)
 8009f9e:	f7fe fc00 	bl	80087a2 <chk_chr>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d008      	beq.n	8009fba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009fa8:	235f      	movs	r3, #95	@ 0x5f
 8009faa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fb0:	f043 0303 	orr.w	r3, r3, #3
 8009fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009fb8:	e01b      	b.n	8009ff2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009fba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fbc:	2b40      	cmp	r3, #64	@ 0x40
 8009fbe:	d909      	bls.n	8009fd4 <create_name+0x294>
 8009fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fc2:	2b5a      	cmp	r3, #90	@ 0x5a
 8009fc4:	d806      	bhi.n	8009fd4 <create_name+0x294>
					b |= 2;
 8009fc6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fca:	f043 0302 	orr.w	r3, r3, #2
 8009fce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009fd2:	e00e      	b.n	8009ff2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fd6:	2b60      	cmp	r3, #96	@ 0x60
 8009fd8:	d90b      	bls.n	8009ff2 <create_name+0x2b2>
 8009fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fdc:	2b7a      	cmp	r3, #122	@ 0x7a
 8009fde:	d808      	bhi.n	8009ff2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fe4:	f043 0301 	orr.w	r3, r3, #1
 8009fe8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fee:	3b20      	subs	r3, #32
 8009ff0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	1c5a      	adds	r2, r3, #1
 8009ff6:	623a      	str	r2, [r7, #32]
 8009ff8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ffa:	b2d1      	uxtb	r1, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4413      	add	r3, r2
 800a000:	460a      	mov	r2, r1
 800a002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a006:	e763      	b.n	8009ed0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a008:	bf00      	nop
 800a00a:	e006      	b.n	800a01a <create_name+0x2da>
 800a00c:	0800b404 	.word	0x0800b404
 800a010:	0800b464 	.word	0x0800b464
 800a014:	0800b410 	.word	0x0800b410
			if (si > di) break;			/* No extension */
 800a018:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a020:	2be5      	cmp	r3, #229	@ 0xe5
 800a022:	d103      	bne.n	800a02c <create_name+0x2ec>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2205      	movs	r2, #5
 800a028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	2b08      	cmp	r3, #8
 800a030:	d104      	bne.n	800a03c <create_name+0x2fc>
 800a032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a03c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a040:	f003 030c 	and.w	r3, r3, #12
 800a044:	2b0c      	cmp	r3, #12
 800a046:	d005      	beq.n	800a054 <create_name+0x314>
 800a048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a04c:	f003 0303 	and.w	r3, r3, #3
 800a050:	2b03      	cmp	r3, #3
 800a052:	d105      	bne.n	800a060 <create_name+0x320>
 800a054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a058:	f043 0302 	orr.w	r3, r3, #2
 800a05c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d117      	bne.n	800a09c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a06c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	2b01      	cmp	r3, #1
 800a076:	d105      	bne.n	800a084 <create_name+0x344>
 800a078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a07c:	f043 0310 	orr.w	r3, r3, #16
 800a080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a084:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a088:	f003 030c 	and.w	r3, r3, #12
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	d105      	bne.n	800a09c <create_name+0x35c>
 800a090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a094:	f043 0308 	orr.w	r3, r3, #8
 800a098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a0a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800a0a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3728      	adds	r7, #40	@ 0x28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a0c4:	e002      	b.n	800a0cc <follow_path+0x1c>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a0d2:	d0f8      	beq.n	800a0c6 <follow_path+0x16>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a0da:	d0f4      	beq.n	800a0c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b1f      	cmp	r3, #31
 800a0e8:	d80a      	bhi.n	800a100 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2280      	movs	r2, #128	@ 0x80
 800a0ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff f8fe 	bl	80092f6 <dir_sdi>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75fb      	strb	r3, [r7, #23]
 800a0fe:	e048      	b.n	800a192 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a100:	463b      	mov	r3, r7
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff fe1b 	bl	8009d40 <create_name>
 800a10a:	4603      	mov	r3, r0
 800a10c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d139      	bne.n	800a188 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff fc5a 	bl	80099ce <dir_find>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a124:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d12c      	bne.n	800a18c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a132:	7afb      	ldrb	r3, [r7, #11]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d127      	bne.n	800a18c <follow_path+0xdc>
 800a13c:	2305      	movs	r3, #5
 800a13e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a140:	e024      	b.n	800a18c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a142:	7afb      	ldrb	r3, [r7, #11]
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d121      	bne.n	800a190 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	799b      	ldrb	r3, [r3, #6]
 800a150:	f003 0310 	and.w	r3, r3, #16
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a158:	2305      	movs	r3, #5
 800a15a:	75fb      	strb	r3, [r7, #23]
 800a15c:	e019      	b.n	800a192 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	8992      	ldrh	r2, [r2, #12]
 800a16c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a170:	fb00 f202 	mul.w	r2, r0, r2
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	440b      	add	r3, r1
 800a178:	4619      	mov	r1, r3
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7ff fa61 	bl	8009642 <ld_clust>
 800a180:	4602      	mov	r2, r0
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a186:	e7bb      	b.n	800a100 <follow_path+0x50>
			if (res != FR_OK) break;
 800a188:	bf00      	nop
 800a18a:	e002      	b.n	800a192 <follow_path+0xe2>
				break;
 800a18c:	bf00      	nop
 800a18e:	e000      	b.n	800a192 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a190:	bf00      	nop
			}
		}
	}

	return res;
 800a192:	7dfb      	ldrb	r3, [r7, #23]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d031      	beq.n	800a216 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	e002      	b.n	800a1c0 <get_ldnumber+0x24>
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b1f      	cmp	r3, #31
 800a1c6:	d903      	bls.n	800a1d0 <get_ldnumber+0x34>
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1ce:	d1f4      	bne.n	800a1ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b3a      	cmp	r3, #58	@ 0x3a
 800a1d6:	d11c      	bne.n	800a212 <get_ldnumber+0x76>
			tp = *path;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	60fa      	str	r2, [r7, #12]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	3b30      	subs	r3, #48	@ 0x30
 800a1e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b09      	cmp	r3, #9
 800a1ee:	d80e      	bhi.n	800a20e <get_ldnumber+0x72>
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d10a      	bne.n	800a20e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d107      	bne.n	800a20e <get_ldnumber+0x72>
					vol = (int)i;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	3301      	adds	r3, #1
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	e002      	b.n	800a218 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a212:	2300      	movs	r3, #0
 800a214:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a216:	693b      	ldr	r3, [r7, #16]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	70da      	strb	r2, [r3, #3]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7fe fc7a 	bl	8008b38 <move_window>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <check_fs+0x2a>
 800a24a:	2304      	movs	r3, #4
 800a24c:	e038      	b.n	800a2c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3338      	adds	r3, #56	@ 0x38
 800a252:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe f9be 	bl	80085d8 <ld_word>
 800a25c:	4603      	mov	r3, r0
 800a25e:	461a      	mov	r2, r3
 800a260:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a264:	429a      	cmp	r2, r3
 800a266:	d001      	beq.n	800a26c <check_fs+0x48>
 800a268:	2303      	movs	r3, #3
 800a26a:	e029      	b.n	800a2c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a272:	2be9      	cmp	r3, #233	@ 0xe9
 800a274:	d009      	beq.n	800a28a <check_fs+0x66>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a27c:	2beb      	cmp	r3, #235	@ 0xeb
 800a27e:	d11e      	bne.n	800a2be <check_fs+0x9a>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a286:	2b90      	cmp	r3, #144	@ 0x90
 800a288:	d119      	bne.n	800a2be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3338      	adds	r3, #56	@ 0x38
 800a28e:	3336      	adds	r3, #54	@ 0x36
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe f9b9 	bl	8008608 <ld_dword>
 800a296:	4603      	mov	r3, r0
 800a298:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a29c:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c8 <check_fs+0xa4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d101      	bne.n	800a2a6 <check_fs+0x82>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e00c      	b.n	800a2c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3338      	adds	r3, #56	@ 0x38
 800a2aa:	3352      	adds	r3, #82	@ 0x52
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe f9ab 	bl	8008608 <ld_dword>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4a05      	ldr	r2, [pc, #20]	@ (800a2cc <check_fs+0xa8>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d101      	bne.n	800a2be <check_fs+0x9a>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e000      	b.n	800a2c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a2be:	2302      	movs	r3, #2
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	00544146 	.word	0x00544146
 800a2cc:	33544146 	.word	0x33544146

0800a2d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b096      	sub	sp, #88	@ 0x58
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff ff59 	bl	800a19c <get_ldnumber>
 800a2ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	da01      	bge.n	800a2f6 <find_volume+0x26>
 800a2f2:	230b      	movs	r3, #11
 800a2f4:	e265      	b.n	800a7c2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a2f6:	4a9f      	ldr	r2, [pc, #636]	@ (800a574 <find_volume+0x2a4>)
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <find_volume+0x3a>
 800a306:	230c      	movs	r3, #12
 800a308:	e25b      	b.n	800a7c2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a30e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	f023 0301 	bic.w	r3, r3, #1
 800a316:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01a      	beq.n	800a356 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe f8b7 	bl	8008498 <disk_status>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a330:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <find_volume+0x82>
 800a342:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a346:	f003 0304 	and.w	r3, r3, #4
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a34e:	230a      	movs	r3, #10
 800a350:	e237      	b.n	800a7c2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a352:	2300      	movs	r3, #0
 800a354:	e235      	b.n	800a7c2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a358:	2200      	movs	r2, #0
 800a35a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe f8af 	bl	80084cc <disk_initialize>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a374:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a380:	2303      	movs	r3, #3
 800a382:	e21e      	b.n	800a7c2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d007      	beq.n	800a39a <find_volume+0xca>
 800a38a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a38e:	f003 0304 	and.w	r3, r3, #4
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a396:	230a      	movs	r3, #10
 800a398:	e213      	b.n	800a7c2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	7858      	ldrb	r0, [r3, #1]
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	f7fe f8f9 	bl	800859c <disk_ioctl>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <find_volume+0xe4>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e206      	b.n	800a7c2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b6:	899b      	ldrh	r3, [r3, #12]
 800a3b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3bc:	d80d      	bhi.n	800a3da <find_volume+0x10a>
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	899b      	ldrh	r3, [r3, #12]
 800a3c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3c6:	d308      	bcc.n	800a3da <find_volume+0x10a>
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	899b      	ldrh	r3, [r3, #12]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	899b      	ldrh	r3, [r3, #12]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <find_volume+0x10e>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e1f1      	b.n	800a7c2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a3e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3e6:	f7ff ff1d 	bl	800a224 <check_fs>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a3f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d149      	bne.n	800a48c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3fc:	e01e      	b.n	800a43c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a40c:	4413      	add	r3, r2
 800a40e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	3304      	adds	r3, #4
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d006      	beq.n	800a428 <find_volume+0x158>
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	3308      	adds	r3, #8
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe f8f2 	bl	8008608 <ld_dword>
 800a424:	4602      	mov	r2, r0
 800a426:	e000      	b.n	800a42a <find_volume+0x15a>
 800a428:	2200      	movs	r2, #0
 800a42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	3358      	adds	r3, #88	@ 0x58
 800a430:	443b      	add	r3, r7
 800a432:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a438:	3301      	adds	r3, #1
 800a43a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a43c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d9dd      	bls.n	800a3fe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a442:	2300      	movs	r3, #0
 800a444:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <find_volume+0x182>
 800a44c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44e:	3b01      	subs	r3, #1
 800a450:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	3358      	adds	r3, #88	@ 0x58
 800a458:	443b      	add	r3, r7
 800a45a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a45e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <find_volume+0x1a2>
 800a466:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a468:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a46a:	f7ff fedb 	bl	800a224 <check_fs>
 800a46e:	4603      	mov	r3, r0
 800a470:	e000      	b.n	800a474 <find_volume+0x1a4>
 800a472:	2303      	movs	r3, #3
 800a474:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a478:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d905      	bls.n	800a48c <find_volume+0x1bc>
 800a480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a482:	3301      	adds	r3, #1
 800a484:	643b      	str	r3, [r7, #64]	@ 0x40
 800a486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d9e2      	bls.n	800a452 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a48c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a490:	2b04      	cmp	r3, #4
 800a492:	d101      	bne.n	800a498 <find_volume+0x1c8>
 800a494:	2301      	movs	r3, #1
 800a496:	e194      	b.n	800a7c2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d901      	bls.n	800a4a4 <find_volume+0x1d4>
 800a4a0:	230d      	movs	r3, #13
 800a4a2:	e18e      	b.n	800a7c2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	3338      	adds	r3, #56	@ 0x38
 800a4a8:	330b      	adds	r3, #11
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe f894 	bl	80085d8 <ld_word>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	899b      	ldrh	r3, [r3, #12]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d001      	beq.n	800a4c0 <find_volume+0x1f0>
 800a4bc:	230d      	movs	r3, #13
 800a4be:	e180      	b.n	800a7c2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c2:	3338      	adds	r3, #56	@ 0x38
 800a4c4:	3316      	adds	r3, #22
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe f886 	bl	80085d8 <ld_word>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a4d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <find_volume+0x214>
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	3338      	adds	r3, #56	@ 0x38
 800a4da:	3324      	adds	r3, #36	@ 0x24
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe f893 	bl	8008608 <ld_dword>
 800a4e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4e8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ec:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f6:	789b      	ldrb	r3, [r3, #2]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d005      	beq.n	800a508 <find_volume+0x238>
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	789b      	ldrb	r3, [r3, #2]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d001      	beq.n	800a508 <find_volume+0x238>
 800a504:	230d      	movs	r3, #13
 800a506:	e15c      	b.n	800a7c2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	789b      	ldrb	r3, [r3, #2]
 800a50c:	461a      	mov	r2, r3
 800a50e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a51c:	461a      	mov	r2, r3
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	895b      	ldrh	r3, [r3, #10]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d008      	beq.n	800a53c <find_volume+0x26c>
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	895b      	ldrh	r3, [r3, #10]
 800a52e:	461a      	mov	r2, r3
 800a530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	3b01      	subs	r3, #1
 800a536:	4013      	ands	r3, r2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <find_volume+0x270>
 800a53c:	230d      	movs	r3, #13
 800a53e:	e140      	b.n	800a7c2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	3338      	adds	r3, #56	@ 0x38
 800a544:	3311      	adds	r3, #17
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe f846 	bl	80085d8 <ld_word>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	891b      	ldrh	r3, [r3, #8]
 800a558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a55a:	8992      	ldrh	r2, [r2, #12]
 800a55c:	0952      	lsrs	r2, r2, #5
 800a55e:	b292      	uxth	r2, r2
 800a560:	fbb3 f1f2 	udiv	r1, r3, r2
 800a564:	fb01 f202 	mul.w	r2, r1, r2
 800a568:	1a9b      	subs	r3, r3, r2
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <find_volume+0x2a8>
 800a570:	230d      	movs	r3, #13
 800a572:	e126      	b.n	800a7c2 <find_volume+0x4f2>
 800a574:	2001ca04 	.word	0x2001ca04

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	3338      	adds	r3, #56	@ 0x38
 800a57c:	3313      	adds	r3, #19
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe f82a 	bl	80085d8 <ld_word>
 800a584:	4603      	mov	r3, r0
 800a586:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d106      	bne.n	800a59c <find_volume+0x2cc>
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	3338      	adds	r3, #56	@ 0x38
 800a592:	3320      	adds	r3, #32
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe f837 	bl	8008608 <ld_dword>
 800a59a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59e:	3338      	adds	r3, #56	@ 0x38
 800a5a0:	330e      	adds	r3, #14
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe f818 	bl	80085d8 <ld_word>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <find_volume+0x2e6>
 800a5b2:	230d      	movs	r3, #13
 800a5b4:	e105      	b.n	800a7c2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a5b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a5b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ba:	4413      	add	r3, r2
 800a5bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5be:	8911      	ldrh	r1, [r2, #8]
 800a5c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5c2:	8992      	ldrh	r2, [r2, #12]
 800a5c4:	0952      	lsrs	r2, r2, #5
 800a5c6:	b292      	uxth	r2, r2
 800a5c8:	fbb1 f2f2 	udiv	r2, r1, r2
 800a5cc:	b292      	uxth	r2, r2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a5d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d201      	bcs.n	800a5de <find_volume+0x30e>
 800a5da:	230d      	movs	r3, #13
 800a5dc:	e0f1      	b.n	800a7c2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a5de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5e6:	8952      	ldrh	r2, [r2, #10]
 800a5e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <find_volume+0x328>
 800a5f4:	230d      	movs	r3, #13
 800a5f6:	e0e4      	b.n	800a7c2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a604:	4293      	cmp	r3, r2
 800a606:	d802      	bhi.n	800a60e <find_volume+0x33e>
 800a608:	2302      	movs	r3, #2
 800a60a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a614:	4293      	cmp	r3, r2
 800a616:	d802      	bhi.n	800a61e <find_volume+0x34e>
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	1c9a      	adds	r2, r3, #2
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a62a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a62c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a62e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a630:	441a      	add	r2, r3
 800a632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a634:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a636:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63a:	441a      	add	r2, r3
 800a63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a640:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a644:	2b03      	cmp	r3, #3
 800a646:	d11e      	bne.n	800a686 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	3338      	adds	r3, #56	@ 0x38
 800a64c:	332a      	adds	r3, #42	@ 0x2a
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fd ffc2 	bl	80085d8 <ld_word>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <find_volume+0x38e>
 800a65a:	230d      	movs	r3, #13
 800a65c:	e0b1      	b.n	800a7c2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a660:	891b      	ldrh	r3, [r3, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <find_volume+0x39a>
 800a666:	230d      	movs	r3, #13
 800a668:	e0ab      	b.n	800a7c2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	3338      	adds	r3, #56	@ 0x38
 800a66e:	332c      	adds	r3, #44	@ 0x2c
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd ffc9 	bl	8008608 <ld_dword>
 800a676:	4602      	mov	r2, r0
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	647b      	str	r3, [r7, #68]	@ 0x44
 800a684:	e01f      	b.n	800a6c6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a688:	891b      	ldrh	r3, [r3, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <find_volume+0x3c2>
 800a68e:	230d      	movs	r3, #13
 800a690:	e097      	b.n	800a7c2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a698:	441a      	add	r2, r3
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a69e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d103      	bne.n	800a6ae <find_volume+0x3de>
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	e00a      	b.n	800a6c4 <find_volume+0x3f4>
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b0:	69da      	ldr	r2, [r3, #28]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	085a      	lsrs	r2, r3, #1
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a6c4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c8:	6a1a      	ldr	r2, [r3, #32]
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	899b      	ldrh	r3, [r3, #12]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d2:	440b      	add	r3, r1
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6d8:	8989      	ldrh	r1, [r1, #12]
 800a6da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d201      	bcs.n	800a6e6 <find_volume+0x416>
 800a6e2:	230d      	movs	r3, #13
 800a6e4:	e06d      	b.n	800a7c2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ec:	619a      	str	r2, [r3, #24]
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f8:	2280      	movs	r2, #128	@ 0x80
 800a6fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a6fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a700:	2b03      	cmp	r3, #3
 800a702:	d149      	bne.n	800a798 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a706:	3338      	adds	r3, #56	@ 0x38
 800a708:	3330      	adds	r3, #48	@ 0x30
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fd ff64 	bl	80085d8 <ld_word>
 800a710:	4603      	mov	r3, r0
 800a712:	2b01      	cmp	r3, #1
 800a714:	d140      	bne.n	800a798 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a718:	3301      	adds	r3, #1
 800a71a:	4619      	mov	r1, r3
 800a71c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a71e:	f7fe fa0b 	bl	8008b38 <move_window>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d137      	bne.n	800a798 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72a:	2200      	movs	r2, #0
 800a72c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a730:	3338      	adds	r3, #56	@ 0x38
 800a732:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd ff4e 	bl	80085d8 <ld_word>
 800a73c:	4603      	mov	r3, r0
 800a73e:	461a      	mov	r2, r3
 800a740:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a744:	429a      	cmp	r2, r3
 800a746:	d127      	bne.n	800a798 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	3338      	adds	r3, #56	@ 0x38
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fd ff5b 	bl	8008608 <ld_dword>
 800a752:	4603      	mov	r3, r0
 800a754:	4a1d      	ldr	r2, [pc, #116]	@ (800a7cc <find_volume+0x4fc>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d11e      	bne.n	800a798 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75c:	3338      	adds	r3, #56	@ 0x38
 800a75e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a762:	4618      	mov	r0, r3
 800a764:	f7fd ff50 	bl	8008608 <ld_dword>
 800a768:	4603      	mov	r3, r0
 800a76a:	4a19      	ldr	r2, [pc, #100]	@ (800a7d0 <find_volume+0x500>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d113      	bne.n	800a798 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a772:	3338      	adds	r3, #56	@ 0x38
 800a774:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd ff45 	bl	8008608 <ld_dword>
 800a77e:	4602      	mov	r2, r0
 800a780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a782:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	3338      	adds	r3, #56	@ 0x38
 800a788:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fd ff3b 	bl	8008608 <ld_dword>
 800a792:	4602      	mov	r2, r0
 800a794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a796:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a79e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a7a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d4 <find_volume+0x504>)
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d4 <find_volume+0x504>)
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	4b09      	ldr	r3, [pc, #36]	@ (800a7d4 <find_volume+0x504>)
 800a7ae:	881a      	ldrh	r2, [r3, #0]
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	4a08      	ldr	r2, [pc, #32]	@ (800a7d8 <find_volume+0x508>)
 800a7b8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a7ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a7bc:	f7fe f954 	bl	8008a68 <clear_lock>
#endif
	return FR_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3758      	adds	r7, #88	@ 0x58
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	41615252 	.word	0x41615252
 800a7d0:	61417272 	.word	0x61417272
 800a7d4:	2001ca08 	.word	0x2001ca08
 800a7d8:	2001ca2c 	.word	0x2001ca2c

0800a7dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a7e6:	2309      	movs	r3, #9
 800a7e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d01c      	beq.n	800a82a <validate+0x4e>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d018      	beq.n	800a82a <validate+0x4e>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d013      	beq.n	800a82a <validate+0x4e>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	889a      	ldrh	r2, [r3, #4]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	88db      	ldrh	r3, [r3, #6]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d10c      	bne.n	800a82a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	785b      	ldrb	r3, [r3, #1]
 800a816:	4618      	mov	r0, r3
 800a818:	f7fd fe3e 	bl	8008498 <disk_status>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <validate+0x4e>
			res = FR_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <validate+0x5a>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	e000      	b.n	800a838 <validate+0x5c>
 800a836:	2300      	movs	r3, #0
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	6013      	str	r3, [r2, #0]
	return res;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a85a:	f107 0310 	add.w	r3, r7, #16
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff fc9c 	bl	800a19c <get_ldnumber>
 800a864:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da01      	bge.n	800a870 <f_mount+0x28>
 800a86c:	230b      	movs	r3, #11
 800a86e:	e02b      	b.n	800a8c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a870:	4a17      	ldr	r2, [pc, #92]	@ (800a8d0 <f_mount+0x88>)
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a878:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d005      	beq.n	800a88c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a880:	69b8      	ldr	r0, [r7, #24]
 800a882:	f7fe f8f1 	bl	8008a68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2200      	movs	r2, #0
 800a88a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	490d      	ldr	r1, [pc, #52]	@ (800a8d0 <f_mount+0x88>)
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <f_mount+0x66>
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d001      	beq.n	800a8b2 <f_mount+0x6a>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e00a      	b.n	800a8c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a8b2:	f107 010c 	add.w	r1, r7, #12
 800a8b6:	f107 0308 	add.w	r3, r7, #8
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff fd07 	bl	800a2d0 <find_volume>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	2001ca04 	.word	0x2001ca04

0800a8d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b09a      	sub	sp, #104	@ 0x68
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <f_open+0x18>
 800a8e8:	2309      	movs	r3, #9
 800a8ea:	e1b7      	b.n	800ac5c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a8f4:	79fa      	ldrb	r2, [r7, #7]
 800a8f6:	f107 0114 	add.w	r1, r7, #20
 800a8fa:	f107 0308 	add.w	r3, r7, #8
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7ff fce6 	bl	800a2d0 <find_volume>
 800a904:	4603      	mov	r3, r0
 800a906:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a90a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 819b 	bne.w	800ac4a <f_open+0x376>
		dj.obj.fs = fs;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	f107 0318 	add.w	r3, r7, #24
 800a91e:	4611      	mov	r1, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fbc5 	bl	800a0b0 <follow_path>
 800a926:	4603      	mov	r3, r0
 800a928:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a92c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a930:	2b00      	cmp	r3, #0
 800a932:	d118      	bne.n	800a966 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da03      	bge.n	800a946 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a93e:	2306      	movs	r3, #6
 800a940:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a944:	e00f      	b.n	800a966 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	bf8c      	ite	hi
 800a94c:	2301      	movhi	r3, #1
 800a94e:	2300      	movls	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	f107 0318 	add.w	r3, r7, #24
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fd ff3c 	bl	80087d8 <chk_lock>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	f003 031c 	and.w	r3, r3, #28
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d07f      	beq.n	800aa70 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a970:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a974:	2b00      	cmp	r3, #0
 800a976:	d017      	beq.n	800a9a8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a978:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d10e      	bne.n	800a99e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a980:	f7fd ff86 	bl	8008890 <enq_lock>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d006      	beq.n	800a998 <f_open+0xc4>
 800a98a:	f107 0318 	add.w	r3, r7, #24
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff f8de 	bl	8009b50 <dir_register>
 800a994:	4603      	mov	r3, r0
 800a996:	e000      	b.n	800a99a <f_open+0xc6>
 800a998:	2312      	movs	r3, #18
 800a99a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	f043 0308 	orr.w	r3, r3, #8
 800a9a4:	71fb      	strb	r3, [r7, #7]
 800a9a6:	e010      	b.n	800a9ca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a9a8:	7fbb      	ldrb	r3, [r7, #30]
 800a9aa:	f003 0311 	and.w	r3, r3, #17
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <f_open+0xe6>
					res = FR_DENIED;
 800a9b2:	2307      	movs	r3, #7
 800a9b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a9b8:	e007      	b.n	800a9ca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <f_open+0xf6>
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a9ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d168      	bne.n	800aaa4 <f_open+0x1d0>
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d063      	beq.n	800aaa4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a9dc:	f7fd fcfe 	bl	80083dc <get_fattime>
 800a9e0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e4:	330e      	adds	r3, #14
 800a9e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fd fe4b 	bl	8008684 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f0:	3316      	adds	r3, #22
 800a9f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fd fe45 	bl	8008684 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	330b      	adds	r3, #11
 800a9fe:	2220      	movs	r2, #32
 800aa00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fe1a 	bl	8009642 <ld_clust>
 800aa0e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa14:	2200      	movs	r2, #0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fe32 	bl	8009680 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	331c      	adds	r3, #28
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fd fe2e 	bl	8008684 <st_dword>
					fs->wflag = 1;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d037      	beq.n	800aaa4 <f_open+0x1d0>
						dw = fs->winsect;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa38:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800aa3a:	f107 0318 	add.w	r3, r7, #24
 800aa3e:	2200      	movs	r2, #0
 800aa40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fb22 	bl	800908c <remove_chain>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800aa4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d126      	bne.n	800aaa4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe f86c 	bl	8008b38 <move_window>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa6a:	3a01      	subs	r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]
 800aa6e:	e019      	b.n	800aaa4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d115      	bne.n	800aaa4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa78:	7fbb      	ldrb	r3, [r7, #30]
 800aa7a:	f003 0310 	and.w	r3, r3, #16
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <f_open+0x1b6>
					res = FR_NO_FILE;
 800aa82:	2304      	movs	r3, #4
 800aa84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800aa88:	e00c      	b.n	800aaa4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d007      	beq.n	800aaa4 <f_open+0x1d0>
 800aa94:	7fbb      	ldrb	r3, [r7, #30]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <f_open+0x1d0>
						res = FR_DENIED;
 800aa9e:	2307      	movs	r3, #7
 800aaa0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aaa4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d126      	bne.n	800aafa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d003      	beq.n	800aabe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aabc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800aac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	bf8c      	ite	hi
 800aad2:	2301      	movhi	r3, #1
 800aad4:	2300      	movls	r3, #0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	f107 0318 	add.w	r3, r7, #24
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fd fef7 	bl	80088d4 <inc_lock>
 800aae6:	4602      	mov	r2, r0
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d102      	bne.n	800aafa <f_open+0x226>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aafa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f040 80a3 	bne.w	800ac4a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fd99 	bl	8009642 <ld_clust>
 800ab10:	4602      	mov	r2, r0
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab18:	331c      	adds	r3, #28
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fd fd74 	bl	8008608 <ld_dword>
 800ab20:	4602      	mov	r2, r0
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	88da      	ldrh	r2, [r3, #6]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	79fa      	ldrb	r2, [r7, #7]
 800ab3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3330      	adds	r3, #48	@ 0x30
 800ab56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fdde 	bl	800871e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	f003 0320 	and.w	r3, r3, #32
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d06e      	beq.n	800ac4a <f_open+0x376>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d06a      	beq.n	800ac4a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	68da      	ldr	r2, [r3, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	895b      	ldrh	r3, [r3, #10]
 800ab80:	461a      	mov	r2, r3
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	899b      	ldrh	r3, [r3, #12]
 800ab86:	fb02 f303 	mul.w	r3, r2, r3
 800ab8a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab98:	e016      	b.n	800abc8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe f887 	bl	8008cb2 <get_fat>
 800aba4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d802      	bhi.n	800abb2 <f_open+0x2de>
 800abac:	2302      	movs	r3, #2
 800abae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800abb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb8:	d102      	bne.n	800abc0 <f_open+0x2ec>
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800abc0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d103      	bne.n	800abd8 <f_open+0x304>
 800abd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d8e0      	bhi.n	800ab9a <f_open+0x2c6>
				}
				fp->clust = clst;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abdc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800abde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d131      	bne.n	800ac4a <f_open+0x376>
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	899b      	ldrh	r3, [r3, #12]
 800abea:	461a      	mov	r2, r3
 800abec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abee:	fbb3 f1f2 	udiv	r1, r3, r2
 800abf2:	fb01 f202 	mul.w	r2, r1, r2
 800abf6:	1a9b      	subs	r3, r3, r2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d026      	beq.n	800ac4a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe f837 	bl	8008c74 <clust2sect>
 800ac06:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ac08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d103      	bne.n	800ac16 <f_open+0x342>
						res = FR_INT_ERR;
 800ac0e:	2302      	movs	r3, #2
 800ac10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ac14:	e019      	b.n	800ac4a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	899b      	ldrh	r3, [r3, #12]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac24:	441a      	add	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	7858      	ldrb	r0, [r3, #1]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a1a      	ldr	r2, [r3, #32]
 800ac38:	2301      	movs	r3, #1
 800ac3a:	f7fd fc6f 	bl	800851c <disk_read>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <f_open+0x376>
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <f_open+0x384>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3768      	adds	r7, #104	@ 0x68
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08e      	sub	sp, #56	@ 0x38
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f107 0214 	add.w	r2, r7, #20
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff fda9 	bl	800a7dc <validate>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d107      	bne.n	800aca8 <f_read+0x44>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7d5b      	ldrb	r3, [r3, #21]
 800ac9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aca0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <f_read+0x4a>
 800aca8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acac:	e135      	b.n	800af1a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	7d1b      	ldrb	r3, [r3, #20]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <f_read+0x5a>
 800acba:	2307      	movs	r3, #7
 800acbc:	e12d      	b.n	800af1a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	68da      	ldr	r2, [r3, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	429a      	cmp	r2, r3
 800acd0:	f240 811e 	bls.w	800af10 <f_read+0x2ac>
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800acd8:	e11a      	b.n	800af10 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	8992      	ldrh	r2, [r2, #12]
 800ace2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ace6:	fb01 f202 	mul.w	r2, r1, r2
 800acea:	1a9b      	subs	r3, r3, r2
 800acec:	2b00      	cmp	r3, #0
 800acee:	f040 80d5 	bne.w	800ae9c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	8992      	ldrh	r2, [r2, #12]
 800acfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	8952      	ldrh	r2, [r2, #10]
 800ad02:	3a01      	subs	r2, #1
 800ad04:	4013      	ands	r3, r2
 800ad06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d12f      	bne.n	800ad6e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d103      	bne.n	800ad1e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad1c:	e013      	b.n	800ad46 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7fe faaa 	bl	8009286 <clmt_clust>
 800ad32:	6338      	str	r0, [r7, #48]	@ 0x30
 800ad34:	e007      	b.n	800ad46 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	f7fd ffb7 	bl	8008cb2 <get_fat>
 800ad44:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d804      	bhi.n	800ad56 <f_read+0xf2>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	755a      	strb	r2, [r3, #21]
 800ad52:	2302      	movs	r3, #2
 800ad54:	e0e1      	b.n	800af1a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d104      	bne.n	800ad68 <f_read+0x104>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2201      	movs	r2, #1
 800ad62:	755a      	strb	r2, [r3, #21]
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0d8      	b.n	800af1a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7fd ff7c 	bl	8008c74 <clust2sect>
 800ad7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d104      	bne.n	800ad8e <f_read+0x12a>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2202      	movs	r2, #2
 800ad88:	755a      	strb	r2, [r3, #21]
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	e0c5      	b.n	800af1a <f_read+0x2b6>
			sect += csect;
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	4413      	add	r3, r2
 800ad94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	899b      	ldrh	r3, [r3, #12]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ada2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ada4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d041      	beq.n	800ae2e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	4413      	add	r3, r2
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	8952      	ldrh	r2, [r2, #10]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d905      	bls.n	800adc4 <f_read+0x160>
					cc = fs->csize - csect;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	895b      	ldrh	r3, [r3, #10]
 800adbc:	461a      	mov	r2, r3
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	7858      	ldrb	r0, [r3, #1]
 800adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800adce:	f7fd fba5 	bl	800851c <disk_read>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <f_read+0x17e>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	755a      	strb	r2, [r3, #21]
 800adde:	2301      	movs	r3, #1
 800ade0:	e09b      	b.n	800af1a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	7d1b      	ldrb	r3, [r3, #20]
 800ade6:	b25b      	sxtb	r3, r3
 800ade8:	2b00      	cmp	r3, #0
 800adea:	da18      	bge.n	800ae1e <f_read+0x1ba>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6a1a      	ldr	r2, [r3, #32]
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d911      	bls.n	800ae1e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6a1a      	ldr	r2, [r3, #32]
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	8992      	ldrh	r2, [r2, #12]
 800ae06:	fb02 f303 	mul.w	r3, r2, r3
 800ae0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae0c:	18d0      	adds	r0, r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	899b      	ldrh	r3, [r3, #12]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	f7fd fc5f 	bl	80086dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	461a      	mov	r2, r3
 800ae24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae26:	fb02 f303 	mul.w	r3, r2, r3
 800ae2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ae2c:	e05c      	b.n	800aee8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	69ba      	ldr	r2, [r7, #24]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d02e      	beq.n	800ae96 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	7d1b      	ldrb	r3, [r3, #20]
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	da18      	bge.n	800ae74 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	7858      	ldrb	r0, [r3, #1]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6a1a      	ldr	r2, [r3, #32]
 800ae50:	2301      	movs	r3, #1
 800ae52:	f7fd fb83 	bl	800855c <disk_write>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <f_read+0x202>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	755a      	strb	r2, [r3, #21]
 800ae62:	2301      	movs	r3, #1
 800ae64:	e059      	b.n	800af1a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	7d1b      	ldrb	r3, [r3, #20]
 800ae6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	7858      	ldrb	r0, [r3, #1]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae7e:	2301      	movs	r3, #1
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	f7fd fb4b 	bl	800851c <disk_read>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <f_read+0x232>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	755a      	strb	r2, [r3, #21]
 800ae92:	2301      	movs	r3, #1
 800ae94:	e041      	b.n	800af1a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	4618      	mov	r0, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	8992      	ldrh	r2, [r2, #12]
 800aeaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800aeae:	fb01 f202 	mul.w	r2, r1, r2
 800aeb2:	1a9b      	subs	r3, r3, r2
 800aeb4:	1ac3      	subs	r3, r0, r3
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800aeb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d901      	bls.n	800aec4 <f_read+0x260>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	8992      	ldrh	r2, [r2, #12]
 800aed2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aed6:	fb00 f202 	mul.w	r2, r0, r2
 800aeda:	1a9b      	subs	r3, r3, r2
 800aedc:	440b      	add	r3, r1
 800aede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aee0:	4619      	mov	r1, r3
 800aee2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aee4:	f7fd fbfa 	bl	80086dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeec:	4413      	add	r3, r2
 800aeee:	627b      	str	r3, [r7, #36]	@ 0x24
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	699a      	ldr	r2, [r3, #24]
 800aef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	619a      	str	r2, [r3, #24]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af02:	441a      	add	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f47f aee1 	bne.w	800acda <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3738      	adds	r7, #56	@ 0x38
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b086      	sub	sp, #24
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f107 0208 	add.w	r2, r7, #8
 800af30:	4611      	mov	r1, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fc52 	bl	800a7dc <validate>
 800af38:	4603      	mov	r3, r0
 800af3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d168      	bne.n	800b014 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7d1b      	ldrb	r3, [r3, #20]
 800af46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d062      	beq.n	800b014 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
 800af52:	b25b      	sxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	da15      	bge.n	800af84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	7858      	ldrb	r0, [r3, #1]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1a      	ldr	r2, [r3, #32]
 800af66:	2301      	movs	r3, #1
 800af68:	f7fd faf8 	bl	800855c <disk_write>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <f_sync+0x54>
 800af72:	2301      	movs	r3, #1
 800af74:	e04f      	b.n	800b016 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7d1b      	ldrb	r3, [r3, #20]
 800af7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af84:	f7fd fa2a 	bl	80083dc <get_fattime>
 800af88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fd fdd0 	bl	8008b38 <move_window>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d138      	bne.n	800b014 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	330b      	adds	r3, #11
 800afac:	781a      	ldrb	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	330b      	adds	r3, #11
 800afb2:	f042 0220 	orr.w	r2, r2, #32
 800afb6:	b2d2      	uxtb	r2, r2
 800afb8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	461a      	mov	r2, r3
 800afc4:	68f9      	ldr	r1, [r7, #12]
 800afc6:	f7fe fb5b 	bl	8009680 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f103 021c 	add.w	r2, r3, #28
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f7fd fb54 	bl	8008684 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	3316      	adds	r3, #22
 800afe0:	6939      	ldr	r1, [r7, #16]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fd fb4e 	bl	8008684 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3312      	adds	r3, #18
 800afec:	2100      	movs	r1, #0
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fd fb2d 	bl	800864e <st_word>
					fs->wflag = 1;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2201      	movs	r2, #1
 800aff8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	4618      	mov	r0, r3
 800affe:	f7fd fdc9 	bl	8008b94 <sync_fs>
 800b002:	4603      	mov	r3, r0
 800b004:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	7d1b      	ldrb	r3, [r3, #20]
 800b00a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b014:	7dfb      	ldrb	r3, [r7, #23]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff ff7b 	bl	800af22 <f_sync>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d118      	bne.n	800b068 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f107 0208 	add.w	r2, r7, #8
 800b03c:	4611      	mov	r1, r2
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fbcc 	bl	800a7dc <validate>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10c      	bne.n	800b068 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd fccc 	bl	80089f0 <dec_lock>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b068:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b082:	2301      	movs	r3, #1
 800b084:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b08a:	4b1f      	ldr	r3, [pc, #124]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b08c:	7a5b      	ldrb	r3, [r3, #9]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b00      	cmp	r3, #0
 800b092:	d131      	bne.n	800b0f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b094:	4b1c      	ldr	r3, [pc, #112]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b096:	7a5b      	ldrb	r3, [r3, #9]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	461a      	mov	r2, r3
 800b09c:	4b1a      	ldr	r3, [pc, #104]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b09e:	2100      	movs	r1, #0
 800b0a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0a2:	4b19      	ldr	r3, [pc, #100]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b0a4:	7a5b      	ldrb	r3, [r3, #9]
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	4a17      	ldr	r2, [pc, #92]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0b2:	4b15      	ldr	r3, [pc, #84]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b0b4:	7a5b      	ldrb	r3, [r3, #9]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b13      	ldr	r3, [pc, #76]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b0bc:	4413      	add	r3, r2
 800b0be:	79fa      	ldrb	r2, [r7, #7]
 800b0c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b0c2:	4b11      	ldr	r3, [pc, #68]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b0c4:	7a5b      	ldrb	r3, [r3, #9]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	b2d1      	uxtb	r1, r2
 800b0cc:	4a0e      	ldr	r2, [pc, #56]	@ (800b108 <FATFS_LinkDriverEx+0x94>)
 800b0ce:	7251      	strb	r1, [r2, #9]
 800b0d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b0d2:	7dbb      	ldrb	r3, [r7, #22]
 800b0d4:	3330      	adds	r3, #48	@ 0x30
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	223a      	movs	r2, #58	@ 0x3a
 800b0e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	222f      	movs	r2, #47	@ 0x2f
 800b0ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	3303      	adds	r3, #3
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	371c      	adds	r7, #28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	2001cc2c 	.word	0x2001cc2c

0800b10c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff ffaa 	bl	800b074 <FATFS_LinkDriverEx>
 800b120:	4603      	mov	r3, r0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	6039      	str	r1, [r7, #0]
 800b136:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b138:	88fb      	ldrh	r3, [r7, #6]
 800b13a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b13c:	d802      	bhi.n	800b144 <ff_convert+0x18>
		c = chr;
 800b13e:	88fb      	ldrh	r3, [r7, #6]
 800b140:	81fb      	strh	r3, [r7, #14]
 800b142:	e025      	b.n	800b190 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00b      	beq.n	800b162 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b14a:	88fb      	ldrh	r3, [r7, #6]
 800b14c:	2bff      	cmp	r3, #255	@ 0xff
 800b14e:	d805      	bhi.n	800b15c <ff_convert+0x30>
 800b150:	88fb      	ldrh	r3, [r7, #6]
 800b152:	3b80      	subs	r3, #128	@ 0x80
 800b154:	4a12      	ldr	r2, [pc, #72]	@ (800b1a0 <ff_convert+0x74>)
 800b156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b15a:	e000      	b.n	800b15e <ff_convert+0x32>
 800b15c:	2300      	movs	r3, #0
 800b15e:	81fb      	strh	r3, [r7, #14]
 800b160:	e016      	b.n	800b190 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b162:	2300      	movs	r3, #0
 800b164:	81fb      	strh	r3, [r7, #14]
 800b166:	e009      	b.n	800b17c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b168:	89fb      	ldrh	r3, [r7, #14]
 800b16a:	4a0d      	ldr	r2, [pc, #52]	@ (800b1a0 <ff_convert+0x74>)
 800b16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b170:	88fa      	ldrh	r2, [r7, #6]
 800b172:	429a      	cmp	r2, r3
 800b174:	d006      	beq.n	800b184 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b176:	89fb      	ldrh	r3, [r7, #14]
 800b178:	3301      	adds	r3, #1
 800b17a:	81fb      	strh	r3, [r7, #14]
 800b17c:	89fb      	ldrh	r3, [r7, #14]
 800b17e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b180:	d9f2      	bls.n	800b168 <ff_convert+0x3c>
 800b182:	e000      	b.n	800b186 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b184:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b186:	89fb      	ldrh	r3, [r7, #14]
 800b188:	3380      	adds	r3, #128	@ 0x80
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b190:	89fb      	ldrh	r3, [r7, #14]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	0800b4f4 	.word	0x0800b4f4

0800b1a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1b4:	d201      	bcs.n	800b1ba <ff_wtoupper+0x16>
 800b1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b0 <ff_wtoupper+0x10c>)
 800b1b8:	e000      	b.n	800b1bc <ff_wtoupper+0x18>
 800b1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b4 <ff_wtoupper+0x110>)
 800b1bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	1c9a      	adds	r2, r3, #2
 800b1c2:	617a      	str	r2, [r7, #20]
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b1c8:	8a7b      	ldrh	r3, [r7, #18]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d068      	beq.n	800b2a0 <ff_wtoupper+0xfc>
 800b1ce:	88fa      	ldrh	r2, [r7, #6]
 800b1d0:	8a7b      	ldrh	r3, [r7, #18]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d364      	bcc.n	800b2a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	1c9a      	adds	r2, r3, #2
 800b1da:	617a      	str	r2, [r7, #20]
 800b1dc:	881b      	ldrh	r3, [r3, #0]
 800b1de:	823b      	strh	r3, [r7, #16]
 800b1e0:	8a3b      	ldrh	r3, [r7, #16]
 800b1e2:	0a1b      	lsrs	r3, r3, #8
 800b1e4:	81fb      	strh	r3, [r7, #14]
 800b1e6:	8a3b      	ldrh	r3, [r7, #16]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b1ec:	88fa      	ldrh	r2, [r7, #6]
 800b1ee:	8a79      	ldrh	r1, [r7, #18]
 800b1f0:	8a3b      	ldrh	r3, [r7, #16]
 800b1f2:	440b      	add	r3, r1
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	da49      	bge.n	800b28c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b1f8:	89fb      	ldrh	r3, [r7, #14]
 800b1fa:	2b08      	cmp	r3, #8
 800b1fc:	d84f      	bhi.n	800b29e <ff_wtoupper+0xfa>
 800b1fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <ff_wtoupper+0x60>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b229 	.word	0x0800b229
 800b208:	0800b23b 	.word	0x0800b23b
 800b20c:	0800b251 	.word	0x0800b251
 800b210:	0800b259 	.word	0x0800b259
 800b214:	0800b261 	.word	0x0800b261
 800b218:	0800b269 	.word	0x0800b269
 800b21c:	0800b271 	.word	0x0800b271
 800b220:	0800b279 	.word	0x0800b279
 800b224:	0800b281 	.word	0x0800b281
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b228:	88fa      	ldrh	r2, [r7, #6]
 800b22a:	8a7b      	ldrh	r3, [r7, #18]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4413      	add	r3, r2
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	80fb      	strh	r3, [r7, #6]
 800b238:	e027      	b.n	800b28a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b23a:	88fa      	ldrh	r2, [r7, #6]
 800b23c:	8a7b      	ldrh	r3, [r7, #18]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	b29b      	uxth	r3, r3
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	b29b      	uxth	r3, r3
 800b248:	88fa      	ldrh	r2, [r7, #6]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	80fb      	strh	r3, [r7, #6]
 800b24e:	e01c      	b.n	800b28a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	3b10      	subs	r3, #16
 800b254:	80fb      	strh	r3, [r7, #6]
 800b256:	e018      	b.n	800b28a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b258:	88fb      	ldrh	r3, [r7, #6]
 800b25a:	3b20      	subs	r3, #32
 800b25c:	80fb      	strh	r3, [r7, #6]
 800b25e:	e014      	b.n	800b28a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	3b30      	subs	r3, #48	@ 0x30
 800b264:	80fb      	strh	r3, [r7, #6]
 800b266:	e010      	b.n	800b28a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b268:	88fb      	ldrh	r3, [r7, #6]
 800b26a:	3b1a      	subs	r3, #26
 800b26c:	80fb      	strh	r3, [r7, #6]
 800b26e:	e00c      	b.n	800b28a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	3308      	adds	r3, #8
 800b274:	80fb      	strh	r3, [r7, #6]
 800b276:	e008      	b.n	800b28a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	3b50      	subs	r3, #80	@ 0x50
 800b27c:	80fb      	strh	r3, [r7, #6]
 800b27e:	e004      	b.n	800b28a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b280:	88fb      	ldrh	r3, [r7, #6]
 800b282:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b286:	80fb      	strh	r3, [r7, #6]
 800b288:	bf00      	nop
			}
			break;
 800b28a:	e008      	b.n	800b29e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b28c:	89fb      	ldrh	r3, [r7, #14]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d195      	bne.n	800b1be <ff_wtoupper+0x1a>
 800b292:	8a3b      	ldrh	r3, [r7, #16]
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	4413      	add	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b29c:	e78f      	b.n	800b1be <ff_wtoupper+0x1a>
			break;
 800b29e:	bf00      	nop
	}

	return chr;
 800b2a0:	88fb      	ldrh	r3, [r7, #6]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	0800b5f4 	.word	0x0800b5f4
 800b2b4:	0800b7e8 	.word	0x0800b7e8

0800b2b8 <memset>:
 800b2b8:	4402      	add	r2, r0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d100      	bne.n	800b2c2 <memset+0xa>
 800b2c0:	4770      	bx	lr
 800b2c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2c6:	e7f9      	b.n	800b2bc <memset+0x4>

0800b2c8 <__libc_init_array>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	4d0d      	ldr	r5, [pc, #52]	@ (800b300 <__libc_init_array+0x38>)
 800b2cc:	4c0d      	ldr	r4, [pc, #52]	@ (800b304 <__libc_init_array+0x3c>)
 800b2ce:	1b64      	subs	r4, r4, r5
 800b2d0:	10a4      	asrs	r4, r4, #2
 800b2d2:	2600      	movs	r6, #0
 800b2d4:	42a6      	cmp	r6, r4
 800b2d6:	d109      	bne.n	800b2ec <__libc_init_array+0x24>
 800b2d8:	4d0b      	ldr	r5, [pc, #44]	@ (800b308 <__libc_init_array+0x40>)
 800b2da:	4c0c      	ldr	r4, [pc, #48]	@ (800b30c <__libc_init_array+0x44>)
 800b2dc:	f000 f818 	bl	800b310 <_init>
 800b2e0:	1b64      	subs	r4, r4, r5
 800b2e2:	10a4      	asrs	r4, r4, #2
 800b2e4:	2600      	movs	r6, #0
 800b2e6:	42a6      	cmp	r6, r4
 800b2e8:	d105      	bne.n	800b2f6 <__libc_init_array+0x2e>
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f0:	4798      	blx	r3
 800b2f2:	3601      	adds	r6, #1
 800b2f4:	e7ee      	b.n	800b2d4 <__libc_init_array+0xc>
 800b2f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2fa:	4798      	blx	r3
 800b2fc:	3601      	adds	r6, #1
 800b2fe:	e7f2      	b.n	800b2e6 <__libc_init_array+0x1e>
 800b300:	0800b8ac 	.word	0x0800b8ac
 800b304:	0800b8ac 	.word	0x0800b8ac
 800b308:	0800b8ac 	.word	0x0800b8ac
 800b30c:	0800b8b0 	.word	0x0800b8b0

0800b310 <_init>:
 800b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b312:	bf00      	nop
 800b314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	469e      	mov	lr, r3
 800b31a:	4770      	bx	lr

0800b31c <_fini>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr
