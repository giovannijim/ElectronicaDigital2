
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d50  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004b018  08006f18  08006f18  00007f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08051f30  08051f30  00069a84  2**0
                  CONTENTS
  4 .ARM          00000008  08051f30  08051f30  00052f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08051f38  08051f38  00069a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08051f38  08051f38  00052f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08051f3c  08051f3c  00052f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00016a84  20000000  08051f40  00053000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20016a84  080689c4  00069a84  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016ea4  080689c4  00069ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00069a84  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c428  00000000  00000000  00069ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e30  00000000  00000000  00075edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00077d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021074  00000000  00000000  000787a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000eb25  00000000  00000000  00099814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cc367  00000000  00000000  000a8339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001746a0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000008be  00000000  00000000  001746e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bf4  00000000  00000000  00174fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00177b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20016a84 	.word	0x20016a84
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f00 	.word	0x08006f00

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20016a88 	.word	0x20016a88
 8000204:	08006f00 	.word	0x08006f00

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f004 fd4d 	bl	80053b8 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f004 fd48 	bl	80053b8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f004 fd43 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f004 f9e4 	bl	8004d00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f004 fd3b 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000942:	2014      	movs	r0, #20
 8000944:	f004 f9dc 	bl	8004d00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f004 fd33 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f004 f9d4 	bl	8004d00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f004 fd2b 	bl	80053b8 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x20);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f004 f9c3 	bl	8004d00 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x71);
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x19);
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x07);
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x10);
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x01);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x44);
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x67);
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x06);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x24);
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x37);
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x40);
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x03);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x80);
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x3F);
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0xE0);
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f004 f912 	bl	8004d00 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f004 f90c 	bl	8004d00 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f004 fc60 	bl	80053b8 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f004 fc4e 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f004 fc49 	bl	80053b8 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f004 fc3e 	bl	80053b8 <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f004 fc37 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f004 fc2d 	bl	80053b8 <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f004 fc27 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f004 fc1c 	bl	80053b8 <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f004 fc15 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f004 fc0b 	bl	80053b8 <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f004 fc05 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f004 fbfb 	bl	80053b8 <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f004 fbf5 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f004 fbeb 	bl	80053b8 <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f004 fbe5 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f004 fbda 	bl	80053b8 <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f004 fbd3 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f004 fbc9 	bl	80053b8 <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f004 fbc2 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f004 fbbd 	bl	80053b8 <HAL_GPIO_WritePin>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f004 fba8 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f004 fba3 	bl	80053b8 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f004 fb98 	bl	80053b8 <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f004 fb91 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f004 fb87 	bl	80053b8 <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f004 fb81 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f004 fb76 	bl	80053b8 <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f004 fb6f 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f004 fb65 	bl	80053b8 <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f004 fb5f 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f004 fb55 	bl	80053b8 <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f004 fb4f 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f004 fb45 	bl	80053b8 <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f004 fb3f 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f004 fb34 	bl	80053b8 <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f004 fb2d 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f004 fb23 	bl	80053b8 <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f004 fb1c 	bl	80053b8 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f004 fb17 	bl	80053b8 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y1);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f004 fac0 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f004 fabb 	bl	80053b8 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f004 fa91 	bl	80053b8 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <H_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <H_line+0x78>)
 8000ec2:	f004 fa79 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <H_line+0x7c>)
 8000ecc:	f004 fa74 	bl	80053b8 <HAL_GPIO_WritePin>
	l = l + x;
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff5e 	bl	8000da0 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00d      	b.n	8000f06 <H_line+0x5e>
		LCD_DATA(c >> 8);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feaf 	bl	8000c54 <LCD_DATA>
		LCD_DATA(c);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feaa 	bl	8000c54 <LCD_DATA>
	for (i = 0; i < l; i++) {
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3ed      	bcc.n	8000eea <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <H_line+0x7c>)
 8000f14:	f004 fa50 	bl	80053b8 <HAL_GPIO_WritePin>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400

08000f28 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000f36:	202c      	movs	r0, #44	@ 0x2c
 8000f38:	f7ff fde6 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <V_line+0x78>)
 8000f42:	f004 fa39 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <V_line+0x7c>)
 8000f4c:	f004 fa34 	bl	80053b8 <HAL_GPIO_WritePin>
	l = l + y;
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ff1e 	bl	8000da0 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00d      	b.n	8000f86 <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe6f 	bl	8000c54 <LCD_DATA>
		LCD_DATA(c);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe6a 	bl	8000c54 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d9ed      	bls.n	8000f6a <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <V_line+0x7c>)
 8000f94:	f004 fa10 	bl	80053b8 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Rect>:
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	H_line(x, y, w, c);
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff73 	bl	8000ea8 <H_line>
	H_line(x, y + h, w, c);
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	18d1      	adds	r1, r2, r3
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ff6b 	bl	8000ea8 <H_line>
	V_line(x, y, h, c);
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ffa5 	bl	8000f28 <V_line>
	V_line(x + w, y, h, c);
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f7ff ff9d 	bl	8000f28 <V_line>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001006:	202c      	movs	r0, #44	@ 0x2c
 8001008:	f7ff fd7e 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <FillRect+0xac>)
 8001012:	f004 f9d1 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <FillRect+0xb0>)
 800101c:	f004 f9cc 	bl	80053b8 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3b01      	subs	r3, #1
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff feb0 	bl	8000da0 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e01a      	b.n	800108a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e010      	b.n	800107c <FillRect+0x84>
			LCD_DATA(c >> 8);
 800105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdf7 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8001066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fdf2 	bl	8000c54 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	3b02      	subs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8ea      	bhi.n	800105a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	3301      	adds	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8e0      	bhi.n	8001054 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <FillRect+0xb0>)
 8001098:	f004 f98e 	bl	80053b8 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80010ba:	202c      	movs	r0, #44	@ 0x2c
 80010bc:	f7ff fd24 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	4824      	ldr	r0, [pc, #144]	@ (8001158 <LCD_Bitmap+0xac>)
 80010c6:	f004 f977 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4823      	ldr	r0, [pc, #140]	@ (800115c <LCD_Bitmap+0xb0>)
 80010d0:	f004 f972 	bl	80053b8 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fe56 	bl	8000da0 <SetWindows>
	unsigned int k = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e01e      	b.n	800113c <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e014      	b.n	800112e <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fda1 	bl	8000c54 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd99 	bl	8000c54 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3302      	adds	r3, #2
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d8e6      	bhi.n	8001104 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	3301      	adds	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8dc      	bhi.n	80010fe <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <LCD_Bitmap+0xb0>)
 800114a:	f004 f935 	bl	80053b8 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 800116e:	202c      	movs	r0, #44	@ 0x2c
 8001170:	f7ff fcca 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <LCD_Sprite+0x150>)
 800117a:	f004 f91d 	bl	80053b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	484c      	ldr	r0, [pc, #304]	@ (80012b4 <LCD_Sprite+0x154>)
 8001184:	f004 f918 	bl	80053b8 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f7ff fdfc 	bl	8000da0 <SetWindows>
	int k = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	613b      	str	r3, [r7, #16]
	if (flip) {
 80011b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d03a      	beq.n	8001234 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c2:	e032      	b.n	800122a <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 80011c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	fb03 f202 	mul.w	r2, r3, r2
 80011cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e8:	4413      	add	r3, r2
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f0:	e014      	b.n	800121c <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd2a 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd22 	bl	8000c54 <LCD_DATA>
				k = k - 2;
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	3b02      	subs	r3, #2
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbe6      	blt.n	80011f2 <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001226:	3301      	adds	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800122a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbc8      	blt.n	80011c4 <LCD_Sprite+0x64>
 8001232:	e034      	b.n	800129e <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	e02d      	b.n	8001296 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	e014      	b.n	8001288 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fcf4 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 800126c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126e:	3301      	adds	r3, #1
 8001270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcec 	bl	8000c54 <LCD_DATA>
				k = k + 2;
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	3302      	adds	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbe6      	blt.n	800125e <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	3301      	adds	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbcd      	blt.n	800123a <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <LCD_Sprite+0x154>)
 80012a4:	f004 f888 	bl	80053b8 <HAL_GPIO_WritePin>
}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400

080012b8 <animation_e1_control>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d131      	bne.n	800134c <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dd1b      	ble.n	8001326 <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	dc13      	bgt.n	800131c <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8e9 	bl	80004d0 <__aeabi_f2d>
 80012fe:	a316      	add	r3, pc, #88	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7fe ff86 	bl	8000214 <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff f936 	bl	8000580 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 800131a:	e017      	b.n	800134c <animation_e1_control+0x94>
				enemy->animationV=0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001324:	e012      	b.n	800134c <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_f2d>
 8001330:	a309      	add	r3, pc, #36	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ff6d 	bl	8000214 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fb99999 	.word	0x3fb99999

08001360 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	@ 0x2c
 8001364:	af06      	add	r7, sp, #24
 8001366:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 80a6 	bne.w	80014de <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b04      	cmp	r3, #4
 8001396:	f340 80a2 	ble.w	80014de <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b06      	subs	r3, #6
 80013a0:	4618      	mov	r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3b09      	subs	r3, #9
 80013a8:	4619      	mov	r1, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	9304      	str	r3, [sp, #16]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2310      	movs	r3, #16
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <animation_e1+0x188>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2313      	movs	r3, #19
 80013c0:	2210      	movs	r2, #16
 80013c2:	f7ff fecd 	bl	8001160 <LCD_Sprite>
		    if (DrawHitbox==1){
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <animation_e1+0x18c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d113      	bne.n	80013f6 <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	1ad0      	subs	r0, r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2400      	movs	r4, #0
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	f7ff fdd9 	bl	8000fa8 <Rect>
		    }
		    if (DrawHitbox==2){
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <animation_e1+0x18c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d12b      	bne.n	8001456 <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6998      	ldr	r0, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6859      	ldr	r1, [r3, #4]
 8001406:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2201      	movs	r2, #1
 8001410:	f7ff fdf2 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	f7ff fde7 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a19      	ldr	r1, [r3, #32]
 8001432:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2201      	movs	r2, #1
 800143c:	f7ff fddc 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001448:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	2201      	movs	r2, #1
 8001452:	f7ff fdd1 	bl	8000ff8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <animation_e1+0x18c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d13f      	bne.n	80014de <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	1ad0      	subs	r0, r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	1ad1      	subs	r1, r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2400      	movs	r4, #0
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	f7ff fd91 	bl	8000fa8 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6998      	ldr	r0, [r3, #24]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	2201      	movs	r2, #1
 8001498:	f7ff fdae 	bl	8000ff8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69d8      	ldr	r0, [r3, #28]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2201      	movs	r2, #1
 80014ae:	f7ff fda3 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a19      	ldr	r1, [r3, #32]
 80014ba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	f7ff fd98 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80014d0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f7ff fd8d 	bl	8000ff8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000b888 	.word	0x2000b888
 80014ec:	20016e97 	.word	0x20016e97

080014f0 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af06      	add	r7, sp, #24
 80014f6:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d134      	bne.n	800157a <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	dc29      	bgt.n	800156a <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3b06      	subs	r3, #6
 800151c:	4618      	mov	r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	3b0c      	subs	r3, #12
 8001524:	4619      	mov	r1, r3
 8001526:	2300      	movs	r3, #0
 8001528:	9304      	str	r3, [sp, #16]
 800152a:	2300      	movs	r3, #0
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	230b      	movs	r3, #11
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <animation_e1_die+0xa0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2319      	movs	r3, #25
 800153c:	220e      	movs	r2, #14
 800153e:	f7ff fe0f 	bl	8001160 <LCD_Sprite>
				enemy->animationDie+=0.2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffc2 	bl	80004d0 <__aeabi_f2d>
 800154c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001588 <animation_e1_die+0x98>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fe5f 	bl	8000214 <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f80f 	bl	8000580 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 8001568:	e007      	b.n	800157a <animation_e1_die+0x8a>
					enemy->x=5000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	9999999a 	.word	0x9999999a
 800158c:	3fc99999 	.word	0x3fc99999
 8001590:	2000de88 	.word	0x2000de88

08001594 <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af06      	add	r7, sp, #24
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <initEnemy1+0x1d4>)
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a65      	ldr	r2, [pc, #404]	@ (800176c <initEnemy1+0x1d8>)
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	441a      	add	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	441a      	add	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3b08      	subs	r3, #8
 8001620:	4618      	mov	r0, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	3b09      	subs	r3, #9
 8001628:	4619      	mov	r1, r3
 800162a:	2300      	movs	r3, #0
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	2300      	movs	r3, #0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2310      	movs	r3, #16
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b4d      	ldr	r3, [pc, #308]	@ (8001770 <initEnemy1+0x1dc>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2313      	movs	r3, #19
 8001640:	2210      	movs	r2, #16
 8001642:	f7ff fd8d 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001646:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <initEnemy1+0x1e0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d113      	bne.n	8001676 <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	1ad0      	subs	r0, r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2400      	movs	r4, #0
 8001670:	9400      	str	r4, [sp, #0]
 8001672:	f7ff fc99 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <initEnemy1+0x1e0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d12b      	bne.n	80016d6 <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6998      	ldr	r0, [r3, #24]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2201      	movs	r2, #1
 8001690:	f7ff fcb2 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	69d8      	ldr	r0, [r3, #28]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2201      	movs	r2, #1
 80016a6:	f7ff fca7 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a19      	ldr	r1, [r3, #32]
 80016b2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fc9c 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80016c8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2201      	movs	r2, #1
 80016d2:	f7ff fc91 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <initEnemy1+0x1e0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d13f      	bne.n	800175e <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	1ad0      	subs	r0, r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	1ad1      	subs	r1, r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2400      	movs	r4, #0
 8001700:	9400      	str	r4, [sp, #0]
 8001702:	f7ff fc51 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6998      	ldr	r0, [r3, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2201      	movs	r2, #1
 8001718:	f7ff fc6e 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	69d8      	ldr	r0, [r3, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	2201      	movs	r2, #1
 800172e:	f7ff fc63 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a19      	ldr	r1, [r3, #32]
 800173a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fc58 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001750:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fc4d 	bl	8000ff8 <FillRect>
        }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	40a00000 	.word	0x40a00000
 800176c:	41400000 	.word	0x41400000
 8001770:	2000b888 	.word	0x2000b888
 8001774:	20016e97 	.word	0x20016e97

08001778 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 8251 	bne.w	8001c32 <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	2b03      	cmp	r3, #3
 8001796:	f200 824c 	bhi.w	8001c32 <ColisionPlayer_e1+0x4ba>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <ColisionPlayer_e1+0x28>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080018cf 	.word	0x080018cf
 80017a8:	080019ed 	.word	0x080019ed
 80017ac:	08001b0b 	.word	0x08001b0b
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	3b0c      	subs	r3, #12
 80017b4:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f0c0 8231 	bcc.w	8001c24 <ColisionPlayer_e1+0x4ac>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f200 822b 	bhi.w	8001c24 <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d323      	bcc.n	8001822 <ColisionPlayer_e1+0xaa>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d81d      	bhi.n	8001822 <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	1d5a      	adds	r2, r3, #5
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2201      	movs	r2, #1
 80017f4:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e208      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	429a      	cmp	r2, r3
 800182c:	d323      	bcc.n	8001876 <ColisionPlayer_e1+0xfe>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	429a      	cmp	r2, r3
 8001838:	d81d      	bhi.n	8001876 <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	1d5a      	adds	r2, r3, #5
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d106      	bne.n	8001872 <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e1de      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	429a      	cmp	r2, r3
 8001880:	f0c0 81d0 	bcc.w	8001c24 <ColisionPlayer_e1+0x4ac>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f200 81c9 	bhi.w	8001c24 <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	1d5a      	adds	r2, r3, #5
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2201      	movs	r2, #1
 80018a0:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e1b2      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	f200 81a4 	bhi.w	8001c28 <ColisionPlayer_e1+0x4b0>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	f0c0 819e 	bcc.w	8001c28 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d323      	bcc.n	8001940 <ColisionPlayer_e1+0x1c8>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	d81d      	bhi.n	8001940 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1f5a      	subs	r2, r3, #5
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2201      	movs	r2, #1
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800193c:	2300      	movs	r3, #0
 800193e:	e179      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d323      	bcc.n	8001994 <ColisionPlayer_e1+0x21c>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	429a      	cmp	r2, r3
 8001956:	d81d      	bhi.n	8001994 <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1f5a      	subs	r2, r3, #5
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2201      	movs	r2, #1
 8001966:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001990:	2300      	movs	r3, #0
 8001992:	e14f      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	429a      	cmp	r2, r3
 800199e:	f0c0 8143 	bcc.w	8001c28 <ColisionPlayer_e1+0x4b0>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f200 813c 	bhi.w	8001c28 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1f5a      	subs	r2, r3, #5
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2201      	movs	r2, #1
 80019be:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e123      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	330c      	adds	r3, #12
 80019f0:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f200 8117 	bhi.w	8001c2c <ColisionPlayer_e1+0x4b4>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f0c0 8111 	bcc.w	8001c2c <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d323      	bcc.n	8001a5e <ColisionPlayer_e1+0x2e6>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d81d      	bhi.n	8001a5e <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	1f5a      	subs	r2, r3, #5
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e0ea      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d323      	bcc.n	8001ab2 <ColisionPlayer_e1+0x33a>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d81d      	bhi.n	8001ab2 <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	1f5a      	subs	r2, r3, #5
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2201      	movs	r2, #1
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d106      	bne.n	8001aae <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e0c0      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	f0c0 80b6 	bcc.w	8001c2c <ColisionPlayer_e1+0x4b4>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f200 80af 	bhi.w	8001c2c <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	1f5a      	subs	r2, r3, #5
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2201      	movs	r2, #1
 8001adc:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e094      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3b0c      	subs	r3, #12
 8001b0e:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	f0c0 808a 	bcc.w	8001c30 <ColisionPlayer_e1+0x4b8>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	f200 8084 	bhi.w	8001c30 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d323      	bcc.n	8001b7c <ColisionPlayer_e1+0x404>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d81d      	bhi.n	8001b7c <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1d5a      	adds	r2, r3, #5
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e05b      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d323      	bcc.n	8001bd0 <ColisionPlayer_e1+0x458>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d81d      	bhi.n	8001bd0 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1d5a      	adds	r2, r3, #5
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e031      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d329      	bcc.n	8001c30 <ColisionPlayer_e1+0x4b8>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d823      	bhi.n	8001c30 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1d5a      	adds	r2, r3, #5
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e007      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
					break;
 8001c24:	bf00      	nop
 8001c26:	e004      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
					break;
 8001c28:	bf00      	nop
 8001c2a:	e002      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
					break;
 8001c2c:	bf00      	nop
 8001c2e:	e000      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 8001c30:	bf00      	nop
			return 1;
			}
	}
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3724      	adds	r7, #36	@ 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af06      	add	r7, sp, #24
 8001c46:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	1ad2      	subs	r2, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	1ad2      	subs	r2, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	441a      	add	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	3b0a      	subs	r3, #10
 8001c96:	4619      	mov	r1, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9304      	str	r3, [sp, #16]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <Hitbox_e2+0x194>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2314      	movs	r3, #20
 8001cae:	2210      	movs	r2, #16
 8001cb0:	f7ff fa56 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001cb4:	4b48      	ldr	r3, [pc, #288]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d113      	bne.n	8001ce4 <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	1ad0      	subs	r0, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	1ad1      	subs	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2400      	movs	r4, #0
 8001cde:	9400      	str	r4, [sp, #0]
 8001ce0:	f7ff f962 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d12b      	bne.n	8001d44 <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6998      	ldr	r0, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f7ff f97b 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69d8      	ldr	r0, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	2201      	movs	r2, #1
 8001d14:	f7ff f970 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f7ff f965 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d36:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f7ff f95a 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d13f      	bne.n	8001dcc <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	1ad0      	subs	r0, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	1ad1      	subs	r1, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9400      	str	r4, [sp, #0]
 8001d70:	f7ff f91a 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6998      	ldr	r0, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2301      	movs	r3, #1
 8001d84:	2201      	movs	r2, #1
 8001d86:	f7ff f937 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69d8      	ldr	r0, [r3, #28]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f7ff f92c 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a19      	ldr	r1, [r3, #32]
 8001da8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2301      	movs	r3, #1
 8001db0:	2201      	movs	r2, #1
 8001db2:	f7ff f921 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001dbe:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f7ff f916 	bl	8000ff8 <FillRect>
        }
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	200016e0 	.word	0x200016e0
 8001dd8:	20016e97 	.word	0x20016e97

08001ddc <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <initEnemy2+0x6c>)
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <initEnemy2+0x70>)
 8001e26:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40400000 	.word	0x40400000
 8001e4c:	40c00000 	.word	0x40c00000

08001e50 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8109 	bne.w	8002076 <moveE2+0x226>
		if (enemy->delay==100000){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001e6a:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002080 <moveE2+0x230>
 8001e6e:	eef4 7a47 	vcmp.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	f040 80ef 	bne.w	8002058 <moveE2+0x208>
			switch(enemy->move){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 80f9 	bhi.w	8002076 <moveE2+0x226>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <moveE2+0x3c>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001f0d 	.word	0x08001f0d
 8001e94:	08001f7d 	.word	0x08001f7d
 8001e98:	08001fed 	.word	0x08001fed
			case 0: //Derecha
				int futureX_D=player->x+50;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3332      	adds	r3, #50	@ 0x32
 8001ea2:	60bb      	str	r3, [r7, #8]
				if (futureX_D>player->limitWidth-20){
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	f1a3 0214 	sub.w	r2, r3, #20
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d209      	bcs.n	8001ec6 <moveE2+0x76>
					enemy->move+=1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffc6 	bl	8001e50 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001ec4:	e0d7      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1a3 0008 	sub.w	r0, r3, #8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f1a3 010a 	sub.w	r1, r3, #10
 8001ed6:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2314      	movs	r3, #20
 8001ede:	2210      	movs	r2, #16
 8001ee0:	f7ff f88a 	bl	8000ff8 <FillRect>
					enemy->x=futureX_D;
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fe9b 	bl	8001c40 <Hitbox_e2>
				break;
 8001f0a:	e0b4      	b.n	8002076 <moveE2+0x226>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	3332      	adds	r3, #50	@ 0x32
 8001f12:	60fb      	str	r3, [r7, #12]
				if (futureY_A>player->limitHeight-20){
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f1a3 0214 	sub.w	r2, r3, #20
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d209      	bcs.n	8001f36 <moveE2+0xe6>
					enemy->move+=1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff8e 	bl	8001e50 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001f34:	e09f      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1a3 0008 	sub.w	r0, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f1a3 010a 	sub.w	r1, r3, #10
 8001f46:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2314      	movs	r3, #20
 8001f4e:	2210      	movs	r2, #16
 8001f50:	f7ff f852 	bl	8000ff8 <FillRect>
					enemy->y=futureY_A;
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fe63 	bl	8001c40 <Hitbox_e2>
				break;
 8001f7a:	e07c      	b.n	8002076 <moveE2+0x226>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3b32      	subs	r3, #50	@ 0x32
 8001f82:	613b      	str	r3, [r7, #16]
				if (futureX_I<player->limitWidth_i+20){
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f103 0214 	add.w	r2, r3, #20
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d909      	bls.n	8001fa6 <moveE2+0x156>
						enemy->move+=1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff56 	bl	8001e50 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001fa4:	e067      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1a3 0008 	sub.w	r0, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f1a3 010a 	sub.w	r1, r3, #10
 8001fb6:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2314      	movs	r3, #20
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	f7ff f81a 	bl	8000ff8 <FillRect>
					enemy->x=futureX_I;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe2b 	bl	8001c40 <Hitbox_e2>
				break;
 8001fea:	e044      	b.n	8002076 <moveE2+0x226>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	3b32      	subs	r3, #50	@ 0x32
 8001ff2:	617b      	str	r3, [r7, #20]
				if (futureY_U>player->limitHeight+20){
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	f103 0214 	add.w	r2, r3, #20
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d209      	bcs.n	8002016 <moveE2+0x1c6>
					enemy->move+=1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff1e 	bl	8001e50 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002014:	e02f      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1a3 0008 	sub.w	r0, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f1a3 010a 	sub.w	r1, r3, #10
 8002026:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2314      	movs	r3, #20
 800202e:	2210      	movs	r2, #16
 8002030:	f7fe ffe2 	bl	8000ff8 <FillRect>
					enemy->y=futureY_U;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fdf5 	bl	8001c40 <Hitbox_e2>
				break;
 8002056:	e00e      	b.n	8002076 <moveE2+0x226>
			}
		}else{
			if (enemy->delay==200000){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800205e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002084 <moveE2+0x234>
 8002062:	eef4 7a47 	vcmp.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d104      	bne.n	8002076 <moveE2+0x226>
				enemy->delay=0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002074:	e7ff      	b.n	8002076 <moveE2+0x226>
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	47c35000 	.word	0x47c35000
 8002084:	48435000 	.word	0x48435000

08002088 <E2_Appear>:

void E2_Appear(enemy_type2* enemy){
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af06      	add	r7, sp, #24
 800208e:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d12b      	bne.n	8002100 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	dc28      	bgt.n	8002100 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3b08      	subs	r3, #8
 80020b4:	4618      	mov	r0, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	3b0a      	subs	r3, #10
 80020bc:	4619      	mov	r1, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	2305      	movs	r3, #5
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <E2_Appear+0x88>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2314      	movs	r3, #20
 80020d4:	2210      	movs	r2, #16
 80020d6:	f7ff f843 	bl	8001160 <LCD_Sprite>
			enemy->animationV+=0.05;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9f6 	bl	80004d0 <__aeabi_f2d>
 80020e4:	a308      	add	r3, pc, #32	@ (adr r3, 8002108 <E2_Appear+0x80>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe f893 	bl	8000214 <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fa43 	bl	8000580 <__aeabi_d2f>
 80020fa:	4602      	mov	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	9999999a 	.word	0x9999999a
 800210c:	3fa99999 	.word	0x3fa99999
 8002110:	200016e0 	.word	0x200016e0
 8002114:	00000000 	.word	0x00000000

08002118 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af06      	add	r7, sp, #24
 800211e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d13b      	bne.n	80021a0 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800212e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002132:	ee17 3a90 	vmov	r3, s15
 8002136:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d12f      	bne.n	80021a0 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b02      	cmp	r3, #2
 8002144:	dc29      	bgt.n	800219a <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3b0e      	subs	r3, #14
 800214c:	4618      	mov	r0, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	3b0c      	subs	r3, #12
 8002154:	4619      	mov	r1, r3
 8002156:	2300      	movs	r3, #0
 8002158:	9304      	str	r3, [sp, #16]
 800215a:	2300      	movs	r3, #0
 800215c:	9303      	str	r3, [sp, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2303      	movs	r3, #3
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <E2_Hurt+0x98>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2319      	movs	r3, #25
 800216c:	221c      	movs	r2, #28
 800216e:	f7fe fff7 	bl	8001160 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9aa 	bl	80004d0 <__aeabi_f2d>
 800217c:	a30a      	add	r3, pc, #40	@ (adr r3, 80021a8 <E2_Hurt+0x90>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f847 	bl	8000214 <__adddf3>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe f9f7 	bl	8000580 <__aeabi_d2f>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002198:	e002      	b.n	80021a0 <E2_Hurt+0x88>
					enemy->isHurt=0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	9999999a 	.word	0x9999999a
 80021ac:	3fa99999 	.word	0x3fa99999
 80021b0:	20002360 	.word	0x20002360
 80021b4:	00000000 	.word	0x00000000

080021b8 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af06      	add	r7, sp, #24
 80021be:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80021c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ca:	ee17 3a90 	vmov	r3, s15
 80021ce:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d143      	bne.n	8002260 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	dc29      	bgt.n	8002232 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3b0c      	subs	r3, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	3b0b      	subs	r3, #11
 80021ec:	4619      	mov	r1, r3
 80021ee:	2300      	movs	r3, #0
 80021f0:	9304      	str	r3, [sp, #16]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2306      	movs	r3, #6
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <E2_Die+0xb8>)
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2317      	movs	r3, #23
 8002204:	221a      	movs	r2, #26
 8002206:	f7fe ffab 	bl	8001160 <LCD_Sprite>
					enemy->animationDie+=0.2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f95e 	bl	80004d0 <__aeabi_f2d>
 8002214:	a314      	add	r3, pc, #80	@ (adr r3, 8002268 <E2_Die+0xb0>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fd fffb 	bl	8000214 <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe f9ab 	bl	8000580 <__aeabi_d2f>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002230:	e016      	b.n	8002260 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1a3 000c 	sub.w	r0, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f1a3 010b 	sub.w	r1, r3, #11
 8002242:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2317      	movs	r3, #23
 800224a:	221a      	movs	r2, #26
 800224c:	f7fe fed4 	bl	8000ff8 <FillRect>
						enemy->x=5000;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	605a      	str	r2, [r3, #4]
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	9999999a 	.word	0x9999999a
 800226c:	3fc99999 	.word	0x3fc99999
 8002270:	200033c8 	.word	0x200033c8

08002274 <PlayerHit_E2>:

void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 80f0 	bne.w	8002468 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	2b03      	cmp	r3, #3
 800228e:	f200 80eb 	bhi.w	8002468 <PlayerHit_E2+0x1f4>
 8002292:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <PlayerHit_E2+0x24>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022a9 	.word	0x080022a9
 800229c:	0800238b 	.word	0x0800238b
 80022a0:	0800231b 	.word	0x0800231b
 80022a4:	080023f3 	.word	0x080023f3
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	3b0f      	subs	r3, #15
 80022ae:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f0c0 80cf 	bcc.w	800245a <PlayerHit_E2+0x1e6>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	f200 80c9 	bhi.w	800245a <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	3b05      	subs	r3, #5
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f0c0 80c1 	bcc.w	800245a <PlayerHit_E2+0x1e6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	3305      	adds	r3, #5
 80022e2:	429a      	cmp	r2, r3
 80022e4:	f200 80b9 	bhi.w	800245a <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 80a8 	bne.w	800245a <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002318:	e09f      	b.n	800245a <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	330f      	adds	r3, #15
 8002320:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	f0c0 8098 	bcc.w	800245e <PlayerHit_E2+0x1ea>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	f200 8092 	bhi.w	800245e <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	3b05      	subs	r3, #5
 8002344:	429a      	cmp	r2, r3
 8002346:	f0c0 808a 	bcc.w	800245e <PlayerHit_E2+0x1ea>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	3305      	adds	r3, #5
 8002354:	429a      	cmp	r2, r3
 8002356:	f200 8082 	bhi.w	800245e <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d171      	bne.n	800245e <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002388:	e069      	b.n	800245e <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d362      	bcc.n	8002462 <PlayerHit_E2+0x1ee>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d85d      	bhi.n	8002462 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	3b0f      	subs	r3, #15
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d356      	bcc.n	8002462 <PlayerHit_E2+0x1ee>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	3314      	adds	r3, #20
 80023be:	429a      	cmp	r2, r3
 80023c0:	d84f      	bhi.n	8002462 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d13f      	bne.n	8002462 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 80023f0:	e037      	b.n	8002462 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3b14      	subs	r3, #20
 80023f8:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d330      	bcc.n	8002466 <PlayerHit_E2+0x1f2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	429a      	cmp	r2, r3
 800240c:	d82b      	bhi.n	8002466 <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	3b0f      	subs	r3, #15
 8002418:	429a      	cmp	r2, r3
 800241a:	d324      	bcc.n	8002466 <PlayerHit_E2+0x1f2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	3314      	adds	r3, #20
 8002426:	429a      	cmp	r2, r3
 8002428:	d81d      	bhi.n	8002466 <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002458:	e005      	b.n	8002466 <PlayerHit_E2+0x1f2>
			break;
 800245a:	bf00      	nop
 800245c:	e004      	b.n	8002468 <PlayerHit_E2+0x1f4>
				break;
 800245e:	bf00      	nop
 8002460:	e002      	b.n	8002468 <PlayerHit_E2+0x1f4>
				break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <PlayerHit_E2+0x1f4>
							break;
 8002466:	bf00      	nop
						}
		}
	}
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <initEnemy3>:

/* Funciones Enemigo 3 -------------------------------------------------*/
void initEnemy3(enemy_type3* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health, player* player) {
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	601a      	str	r2, [r3, #0]
    enemy->y_eye=startY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
    enemy->y = startY+20;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 0214 	add.w	r2, r3, #20
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	60da      	str	r2, [r3, #12]
    enemy->height = height;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	611a      	str	r2, [r3, #16]
    enemy->speed=5;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2205      	movs	r2, #5
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->Place=0;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    enemy->delay=0;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	651a      	str	r2, [r3, #80]	@ 0x50
    enemy->delay_init=0;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54

    // Inicializar la vida y el estado
    enemy->health = health;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
    enemy->isAlive = 0;  // El enemigo comienza vivo
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationFire=0;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationEye=0;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->isMove=0;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	649a      	str	r2, [r3, #72]	@ 0x48

    //Limites
    enemy->limitwidth=player->limitWidth;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34
    enemy->limitwidth_i=player->limitWidth_i;
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->limitheight_i=18;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2212      	movs	r2, #18
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40
    enemy->limitheight=220;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	22dc      	movs	r2, #220	@ 0xdc
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <E3_Eye>:

void E3_Eye(enemy_type3* enemy){
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af06      	add	r7, sp, #24
 800250e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	2b00      	cmp	r3, #0
 8002516:	dd55      	ble.n	80025c4 <E3_Eye+0xbc>
		if (enemy->isMove==0){
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251c:	2b00      	cmp	r3, #0
 800251e:	d160      	bne.n	80025e2 <E3_Eye+0xda>
			enemy->y=enemy->y_eye+20;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f103 0214 	add.w	r2, r3, #20
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]
			int variableEye=enemy->animationEye;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	60fb      	str	r3, [r7, #12]
			if (variableEye<7){
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b06      	cmp	r3, #6
 8002540:	dc29      	bgt.n	8002596 <E3_Eye+0x8e>
				LCD_Sprite(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, E3_Eye16x17_7, 7, variableEye, 0, 0);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3b08      	subs	r3, #8
 8002548:	4618      	mov	r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	3b08      	subs	r3, #8
 8002550:	4619      	mov	r1, r3
 8002552:	2300      	movs	r3, #0
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	2300      	movs	r3, #0
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	2307      	movs	r3, #7
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <E3_Eye+0xf0>)
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2311      	movs	r3, #17
 8002568:	2210      	movs	r2, #16
 800256a:	f7fe fdf9 	bl	8001160 <LCD_Sprite>
				enemy->animationEye+=0.1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ffac 	bl	80004d0 <__aeabi_f2d>
 8002578:	a31d      	add	r3, pc, #116	@ (adr r3, 80025f0 <E3_Eye+0xe8>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fd fe49 	bl	8000214 <__adddf3>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fd fff9 	bl	8000580 <__aeabi_d2f>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	} else{
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
	}
}
 8002594:	e025      	b.n	80025e2 <E3_Eye+0xda>
				FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1a3 0008 	sub.w	r0, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f1a3 0108 	sub.w	r1, r3, #8
 80025a6:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2311      	movs	r3, #17
 80025ae:	2210      	movs	r2, #16
 80025b0:	f7fe fd22 	bl	8000ff8 <FillRect>
				enemy->isMove=1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationFire=0;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c2:	e00e      	b.n	80025e2 <E3_Eye+0xda>
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1a3 0008 	sub.w	r0, r3, #8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f1a3 0108 	sub.w	r1, r3, #8
 80025d4:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2311      	movs	r3, #17
 80025dc:	2210      	movs	r2, #16
 80025de:	f7fe fd0b 	bl	8000ff8 <FillRect>
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	9999999a 	.word	0x9999999a
 80025f4:	3fb99999 	.word	0x3fb99999
 80025f8:	20000800 	.word	0x20000800

080025fc <E3_FireMove>:

void E3_FireMove(enemy_type3* enemy,player* player){
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08b      	sub	sp, #44	@ 0x2c
 8002600:	af06      	add	r7, sp, #24
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	if (enemy->health>0){
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	2b00      	cmp	r3, #0
 800260c:	f340 80ea 	ble.w	80027e4 <E3_FireMove+0x1e8>
		if (enemy->isMove==1){
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 80e5 	bne.w	80027e4 <E3_FireMove+0x1e8>
			int FutureY=enemy->y+enemy->speed;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
			if (FutureY>=220){
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2bdb      	cmp	r3, #219	@ 0xdb
 800262a:	dd23      	ble.n	8002674 <E3_FireMove+0x78>
				enemy->isMove=0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationEye=0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	62da      	str	r2, [r3, #44]	@ 0x2c
				enemy->health-=1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
				enemy->Place+=1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	64da      	str	r2, [r3, #76]	@ 0x4c
				enemy->delay=0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	651a      	str	r2, [r3, #80]	@ 0x50
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1a3 0008 	sub.w	r0, r3, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f1a3 0108 	sub.w	r1, r3, #8
 8002664:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2310      	movs	r3, #16
 800266c:	2210      	movs	r2, #16
 800266e:	f7fe fcc3 	bl	8000ff8 <FillRect>
				}
			}
		}

	}
}
 8002672:	e0b7      	b.n	80027e4 <E3_FireMove+0x1e8>
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1a3 0008 	sub.w	r0, r3, #8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f1a3 0108 	sub.w	r1, r3, #8
 8002684:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2310      	movs	r3, #16
 800268c:	2210      	movs	r2, #16
 800268e:	f7fe fcb3 	bl	8000ff8 <FillRect>
				int animationFire=enemy->animationFire;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	60bb      	str	r3, [r7, #8]
				enemy->y=FutureY;
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	605a      	str	r2, [r3, #4]
				LCD_Sprite(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, E3_Fire16x16_4, 4, animationFire, 0, 0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3b08      	subs	r3, #8
 80026ae:	4618      	mov	r0, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	3b08      	subs	r3, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	9304      	str	r3, [sp, #16]
 80026bc:	2300      	movs	r3, #0
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2304      	movs	r3, #4
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <E3_FireMove+0x1f0>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2310      	movs	r3, #16
 80026ce:	2210      	movs	r2, #16
 80026d0:	f7fe fd46 	bl	8001160 <LCD_Sprite>
				if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f0c0 8081 	bcc.w	80027e4 <E3_FireMove+0x1e8>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d87a      	bhi.n	80027e4 <E3_FireMove+0x1e8>
					if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d374      	bcc.n	80027e4 <E3_FireMove+0x1e8>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	429a      	cmp	r2, r3
 8002704:	d86e      	bhi.n	80027e4 <E3_FireMove+0x1e8>
						player->y=player->y-5;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	1f5a      	subs	r2, r3, #5
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	605a      	str	r2, [r3, #4]
						player->direction=0;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	621a      	str	r2, [r3, #32]
						player->IsDamage=1;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	65da      	str	r2, [r3, #92]	@ 0x5c
						player->animationDamage=0;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	661a      	str	r2, [r3, #96]	@ 0x60
						player->life-=1;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	615a      	str	r2, [r3, #20]
						FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 800272e:	4b30      	ldr	r3, [pc, #192]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b2f      	ldr	r3, [pc, #188]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	1c58      	adds	r0, r3, #1
 800273c:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <E3_FireMove+0x1f4>)
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	1c59      	adds	r1, r3, #1
 800274a:	4b29      	ldr	r3, [pc, #164]	@ (80027f0 <E3_FireMove+0x1f4>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	3301      	adds	r3, #1
 8002756:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800275a:	9400      	str	r4, [sp, #0]
 800275c:	f7fe fc4c 	bl	8000ff8 <FillRect>
						if (player->life==0){
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d11f      	bne.n	80027a8 <E3_FireMove+0x1ac>
							player->isAlive=0;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
							player->animationDie=0;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	669a      	str	r2, [r3, #104]	@ 0x68
							FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8002776:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <E3_FireMove+0x1f4>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	1c58      	adds	r0, r3, #1
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <E3_FireMove+0x1f4>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <E3_FireMove+0x1f4>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <E3_FireMove+0x1f4>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80027a2:	9400      	str	r4, [sp, #0]
 80027a4:	f7fe fc28 	bl	8000ff8 <FillRect>
						FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1a3 0008 	sub.w	r0, r3, #8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f1a3 0108 	sub.w	r1, r3, #8
 80027b8:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2310      	movs	r3, #16
 80027c0:	2210      	movs	r2, #16
 80027c2:	f7fe fc19 	bl	8000ff8 <FillRect>
						enemy->isMove=0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	649a      	str	r2, [r3, #72]	@ 0x48
						enemy->animationEye=0;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->Place+=1;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	64da      	str	r2, [r3, #76]	@ 0x4c
						enemy->delay=0;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20016c08 	.word	0x20016c08
 80027f4:	00000000 	.word	0x00000000

080027f8 <E3_FireAnimation>:

void E3_FireAnimation(enemy_type3* enemy){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	if (enemy->health>0 && enemy->isMove){
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	2b00      	cmp	r3, #0
 8002806:	dd25      	ble.n	8002854 <E3_FireAnimation+0x5c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280c:	2b00      	cmp	r3, #0
 800280e:	d021      	beq.n	8002854 <E3_FireAnimation+0x5c>
		enemy->animationFire+=0.2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe5b 	bl	80004d0 <__aeabi_f2d>
 800281a:	a311      	add	r3, pc, #68	@ (adr r3, 8002860 <E3_FireAnimation+0x68>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fcf8 	bl	8000214 <__adddf3>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fd fea8 	bl	8000580 <__aeabi_d2f>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28
		if (enemy->animationFire>=4){
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800283c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	da00      	bge.n	800284c <E3_FireAnimation+0x54>
			enemy->animationFire=0;
		}
	}
}
 800284a:	e003      	b.n	8002854 <E3_FireAnimation+0x5c>
			enemy->animationFire=0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	f3af 8000 	nop.w
 8002860:	9999999a 	.word	0x9999999a
 8002864:	3fc99999 	.word	0x3fc99999

08002868 <E3_Hitbox>:

void E3_Hitbox(enemy_type3* enemy){
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b085      	sub	sp, #20
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	441a      	add	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

		if (DrawHitbox==1){
 80028b0:	4b47      	ldr	r3, [pc, #284]	@ (80029d0 <E3_Hitbox+0x168>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d113      	bne.n	80028e0 <E3_Hitbox+0x78>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	1ad0      	subs	r0, r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	1ad1      	subs	r1, r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2400      	movs	r4, #0
 80028da:	9400      	str	r4, [sp, #0]
 80028dc:	f7fe fb64 	bl	8000fa8 <Rect>
	    }
	    if (DrawHitbox==2){
 80028e0:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <E3_Hitbox+0x168>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d12b      	bne.n	8002940 <E3_Hitbox+0xd8>
	    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6998      	ldr	r0, [r3, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2301      	movs	r3, #1
 80028f8:	2201      	movs	r2, #1
 80028fa:	f7fe fb7d 	bl	8000ff8 <FillRect>
	    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69d8      	ldr	r0, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	2201      	movs	r2, #1
 8002910:	f7fe fb72 	bl	8000ff8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a19      	ldr	r1, [r3, #32]
 800291c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	2201      	movs	r2, #1
 8002926:	f7fe fb67 	bl	8000ff8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002932:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	2201      	movs	r2, #1
 800293c:	f7fe fb5c 	bl	8000ff8 <FillRect>
	    }
	    if (DrawHitbox==3){
 8002940:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <E3_Hitbox+0x168>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d13f      	bne.n	80029c8 <E3_Hitbox+0x160>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	1ad0      	subs	r0, r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	1ad1      	subs	r1, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2400      	movs	r4, #0
 800296a:	9400      	str	r4, [sp, #0]
 800296c:	f7fe fb1c 	bl	8000fa8 <Rect>
			FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6998      	ldr	r0, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2301      	movs	r3, #1
 8002980:	2201      	movs	r2, #1
 8002982:	f7fe fb39 	bl	8000ff8 <FillRect>
			FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69d8      	ldr	r0, [r3, #28]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2301      	movs	r3, #1
 8002996:	2201      	movs	r2, #1
 8002998:	f7fe fb2e 	bl	8000ff8 <FillRect>
			FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a19      	ldr	r1, [r3, #32]
 80029a4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	2201      	movs	r2, #1
 80029ae:	f7fe fb23 	bl	8000ff8 <FillRect>
			FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029ba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2301      	movs	r3, #1
 80029c2:	2201      	movs	r2, #1
 80029c4:	f7fe fb18 	bl	8000ff8 <FillRect>
	        }
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	20016e97 	.word	0x20016e97

080029d4 <E3_MoveX>:

void E3_MoveX(enemy_type3* enemy){
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	if (enemy->delay==0){
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d167      	bne.n	8002ab4 <E3_MoveX+0xe0>
	int FutureX;
	enemy->delay=1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	651a      	str	r2, [r3, #80]	@ 0x50
	switch (enemy->Place){
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d860      	bhi.n	8002ab4 <E3_MoveX+0xe0>
 80029f2:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <E3_MoveX+0x24>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a0d 	.word	0x08002a0d
 80029fc:	08002a35 	.word	0x08002a35
 8002a00:	08002a5d 	.word	0x08002a5d
 8002a04:	08002a85 	.word	0x08002a85
 8002a08:	08002aad 	.word	0x08002aad
		case 0:
			FutureX=enemy->x+40;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3328      	adds	r3, #40	@ 0x28
 8002a12:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d806      	bhi.n	8002a2c <E3_MoveX+0x58>
				enemy->x=enemy->limitwidth_i+35;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8002a2a:	e043      	b.n	8002ab4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
			break;
 8002a32:	e03f      	b.n	8002ab4 <E3_MoveX+0xe0>

		case 1:
			FutureX=enemy->x-20;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3b14      	subs	r3, #20
 8002a3a:	60fb      	str	r3, [r7, #12]
			if (FutureX<=enemy->limitwidth_i){
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d306      	bcc.n	8002a54 <E3_MoveX+0x80>
				enemy->x=enemy->limitwidth-35;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4a:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8002a52:	e02f      	b.n	8002ab4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
			break;
 8002a5a:	e02b      	b.n	8002ab4 <E3_MoveX+0xe0>
		case 2:
			FutureX=enemy->x+50;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3332      	adds	r3, #50	@ 0x32
 8002a62:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d806      	bhi.n	8002a7c <E3_MoveX+0xa8>
				enemy->x=enemy->limitwidth_i+50;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8002a7a:	e01b      	b.n	8002ab4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	601a      	str	r2, [r3, #0]
			break;
 8002a82:	e017      	b.n	8002ab4 <E3_MoveX+0xe0>
		case 3:
					FutureX=enemy->x-50;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3b32      	subs	r3, #50	@ 0x32
 8002a8a:	60fb      	str	r3, [r7, #12]
					if (FutureX<=enemy->limitwidth_i){
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d306      	bcc.n	8002aa4 <E3_MoveX+0xd0>
						enemy->x=enemy->limitwidth-35;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]

					} else{
						enemy->x=FutureX;
					}
					break;
 8002aa2:	e007      	b.n	8002ab4 <E3_MoveX+0xe0>
						enemy->x=FutureX;
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
					break;
 8002aaa:	e003      	b.n	8002ab4 <E3_MoveX+0xe0>
		case 4:
			enemy->Place=0;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
}
 8002ab2:	e7ff      	b.n	8002ab4 <E3_MoveX+0xe0>
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <initPlayer>:

/* Funciones Jugador ---------------------------------------------------*/
 void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	@ 0x28
 8002ac4:	af06      	add	r7, sp, #24
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	611a      	str	r2, [r3, #16]
    player->life = life;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a3a      	ldr	r2, [r7, #32]
 8002af0:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2202      	movs	r2, #2
 8002b02:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a27      	ldr	r2, [pc, #156]	@ (8002bbc <initPlayer+0xfc>)
 8002b20:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	@ (8002bc0 <initPlayer+0x100>)
 8002b2c:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002b34:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+2, player->y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3b07      	subs	r3, #7
 8002b48:	4618      	mov	r0, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	3b0f      	subs	r3, #15
 8002b50:	4619      	mov	r1, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	9304      	str	r3, [sp, #16]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	2306      	movs	r3, #6
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <initPlayer+0x104>)
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2317      	movs	r3, #23
 8002b68:	2212      	movs	r2, #18
 8002b6a:	f7fe faf9 	bl	8001160 <LCD_Sprite>
    //FillRect(player->x , player->y, 1, 1, 0x000000);

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	1ad2      	subs	r2, r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	1e5a      	subs	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	1ad2      	subs	r2, r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40e00000 	.word	0x40e00000
 8002bc0:	40400000 	.word	0x40400000
 8002bc4:	20007df0 	.word	0x20007df0

08002bc8 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d851      	bhi.n	8002c7e <playerCanMove+0xb6>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <playerCanMove+0x18>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002c0f 	.word	0x08002c0f
 8002be8:	08002c31 	.word	0x08002c31
 8002bec:	08002c53 	.word	0x08002c53
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	1ad2      	subs	r2, r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	dc34      	bgt.n	8002c74 <playerCanMove+0xac>
			return 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e094      	b.n	8002d38 <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	441a      	add	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d825      	bhi.n	8002c78 <playerCanMove+0xb0>
			return 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e083      	b.n	8002d38 <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	441a      	add	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d816      	bhi.n	8002c7c <playerCanMove+0xb4>
			return 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e072      	b.n	8002d38 <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d306      	bcc.n	8002c7e <playerCanMove+0xb6>
			return 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e061      	b.n	8002d38 <playerCanMove+0x170>
		break;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <playerCanMove+0xb6>
		break;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <playerCanMove+0xb6>
		break;
 8002c7c:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d126      	bne.n	8002ce0 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4828      	ldr	r0, [pc, #160]	@ (8002d40 <playerCanMove+0x178>)
 8002c9e:	f7fe fd6b 	bl	8001778 <ColisionPlayer_e1>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <playerCanMove+0xe4>
    	return 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e045      	b.n	8002d38 <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4823      	ldr	r0, [pc, #140]	@ (8002d44 <playerCanMove+0x17c>)
 8002cb8:	f7fe fd5e 	bl	8001778 <ColisionPlayer_e1>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <playerCanMove+0xfe>
        	return 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e038      	b.n	8002d38 <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	481d      	ldr	r0, [pc, #116]	@ (8002d48 <playerCanMove+0x180>)
 8002cd2:	f7fe fd51 	bl	8001778 <ColisionPlayer_e1>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <playerCanMove+0x118>
        	return 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e02b      	b.n	8002d38 <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d126      	bne.n	8002d36 <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4816      	ldr	r0, [pc, #88]	@ (8002d4c <playerCanMove+0x184>)
 8002cf4:	f7fe fd40 	bl	8001778 <ColisionPlayer_e1>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <playerCanMove+0x13a>
       	return 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e01a      	b.n	8002d38 <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4810      	ldr	r0, [pc, #64]	@ (8002d50 <playerCanMove+0x188>)
 8002d0e:	f7fe fd33 	bl	8001778 <ColisionPlayer_e1>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <playerCanMove+0x154>
           	return 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e00d      	b.n	8002d38 <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	480b      	ldr	r0, [pc, #44]	@ (8002d54 <playerCanMove+0x18c>)
 8002d28:	f7fe fd26 	bl	8001778 <ColisionPlayer_e1>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <playerCanMove+0x16e>
           	return 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20016c7c 	.word	0x20016c7c
 8002d44:	20016cb0 	.word	0x20016cb0
 8002d48:	20016ce4 	.word	0x20016ce4
 8002d4c:	20016d18 	.word	0x20016d18
 8002d50:	20016d4c 	.word	0x20016d4c
 8002d54:	20016d80 	.word	0x20016d80

08002d58 <HitboxPlayer>:

void HitboxPlayer(player* player){
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	441a      	add	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	441a      	add	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 8002da0:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HitboxPlayer+0x168>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d113      	bne.n	8002dd0 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	1ad0      	subs	r0, r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	1ad1      	subs	r1, r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2400      	movs	r4, #0
 8002dca:	9400      	str	r4, [sp, #0]
 8002dcc:	f7fe f8ec 	bl	8000fa8 <Rect>
        }
    if (DrawHitbox==2){
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HitboxPlayer+0x168>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d12b      	bne.n	8002e30 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	2201      	movs	r2, #1
 8002dea:	f7fe f905 	bl	8000ff8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f7fe f8fa 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e0c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	2201      	movs	r2, #1
 8002e16:	f7fe f8ef 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e22:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f7fe f8e4 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8002e30:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <HitboxPlayer+0x168>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d13f      	bne.n	8002eb8 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	1ad0      	subs	r0, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	1ad1      	subs	r1, r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2400      	movs	r4, #0
 8002e5a:	9400      	str	r4, [sp, #0]
 8002e5c:	f7fe f8a4 	bl	8000fa8 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2301      	movs	r3, #1
 8002e70:	2201      	movs	r2, #1
 8002e72:	f7fe f8c1 	bl	8000ff8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2301      	movs	r3, #1
 8002e86:	2201      	movs	r2, #1
 8002e88:	f7fe f8b6 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e94:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f7fe f8ab 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eaa:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f7fe f8a0 	bl	8000ff8 <FillRect>

        }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd90      	pop	{r4, r7, pc}
 8002ec0:	20016e97 	.word	0x20016e97

08002ec4 <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 80d0 	bne.w	8003078 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	f200 80cb 	bhi.w	8003078 <PlayerHit+0x1b4>
 8002ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <PlayerHit+0x24>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002fb7 	.word	0x08002fb7
 8002ef0:	08002f5d 	.word	0x08002f5d
 8002ef4:	08003011 	.word	0x08003011
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	3b0f      	subs	r3, #15
 8002efe:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	f0c0 80af 	bcc.w	800306a <PlayerHit+0x1a6>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	f200 80a9 	bhi.w	800306a <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	3b05      	subs	r3, #5
 8002f22:	429a      	cmp	r2, r3
 8002f24:	f0c0 80a1 	bcc.w	800306a <PlayerHit+0x1a6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	3305      	adds	r3, #5
 8002f32:	429a      	cmp	r2, r3
 8002f34:	f200 8099 	bhi.w	800306a <PlayerHit+0x1a6>
						enemy->health -= 1;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 808f 	bne.w	800306a <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 8002f5a:	e086      	b.n	800306a <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	330f      	adds	r3, #15
 8002f62:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d37f      	bcc.n	800306e <PlayerHit+0x1aa>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d87a      	bhi.n	800306e <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	3b05      	subs	r3, #5
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d373      	bcc.n	800306e <PlayerHit+0x1aa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	3305      	adds	r3, #5
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d86c      	bhi.n	800306e <PlayerHit+0x1aa>
						enemy->health -= 1;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d163      	bne.n	800306e <PlayerHit+0x1aa>
							enemy->isAlive=0;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8002fb4:	e05b      	b.n	800306e <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3314      	adds	r3, #20
 8002fbc:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d354      	bcc.n	8003072 <PlayerHit+0x1ae>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d84f      	bhi.n	8003072 <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	3b0f      	subs	r3, #15
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d348      	bcc.n	8003072 <PlayerHit+0x1ae>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d841      	bhi.n	8003072 <PlayerHit+0x1ae>
						enemy->health -= 1;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	1e5a      	subs	r2, r3, #1
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d138      	bne.n	8003072 <PlayerHit+0x1ae>
							enemy->isAlive=0;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 800300e:	e030      	b.n	8003072 <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3b14      	subs	r3, #20
 8003016:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	429a      	cmp	r2, r3
 8003020:	d329      	bcc.n	8003076 <PlayerHit+0x1b2>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	d824      	bhi.n	8003076 <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	3b0f      	subs	r3, #15
 8003036:	429a      	cmp	r2, r3
 8003038:	d31d      	bcc.n	8003076 <PlayerHit+0x1b2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	3314      	adds	r3, #20
 8003044:	429a      	cmp	r2, r3
 8003046:	d816      	bhi.n	8003076 <PlayerHit+0x1b2>
									enemy->health -= 1;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <PlayerHit+0x1b2>
										enemy->isAlive=0;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8003068:	e005      	b.n	8003076 <PlayerHit+0x1b2>
			break;
 800306a:	bf00      	nop
 800306c:	e004      	b.n	8003078 <PlayerHit+0x1b4>
				break;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <PlayerHit+0x1b4>
				break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <PlayerHit+0x1b4>
							break;
 8003076:	bf00      	nop
						}
		}
	}
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <PlayerAnimation>:

void PlayerAnimation(player* player){
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af06      	add	r7, sp, #24
 800308a:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d16f      	bne.n	8003174 <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d117      	bne.n	80030cc <PlayerAnimation+0x48>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3b08      	subs	r3, #8
 80030a2:	4618      	mov	r0, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	3b0d      	subs	r3, #13
 80030aa:	4619      	mov	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b0:	461a      	mov	r2, r3
 80030b2:	2300      	movs	r3, #0
 80030b4:	9304      	str	r3, [sp, #16]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9303      	str	r3, [sp, #12]
 80030ba:	9202      	str	r2, [sp, #8]
 80030bc:	230a      	movs	r3, #10
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	4b2e      	ldr	r3, [pc, #184]	@ (800317c <PlayerAnimation+0xf8>)
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	231a      	movs	r3, #26
 80030c6:	2212      	movs	r2, #18
 80030c8:	f7fe f84a 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==1){
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d117      	bne.n	8003104 <PlayerAnimation+0x80>
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3b0a      	subs	r3, #10
 80030da:	4618      	mov	r0, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	3b0b      	subs	r3, #11
 80030e2:	4619      	mov	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e8:	461a      	mov	r2, r3
 80030ea:	2300      	movs	r3, #0
 80030ec:	9304      	str	r3, [sp, #16]
 80030ee:	2301      	movs	r3, #1
 80030f0:	9303      	str	r3, [sp, #12]
 80030f2:	9202      	str	r2, [sp, #8]
 80030f4:	230a      	movs	r3, #10
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	4b21      	ldr	r3, [pc, #132]	@ (8003180 <PlayerAnimation+0xfc>)
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2317      	movs	r3, #23
 80030fe:	2216      	movs	r2, #22
 8003100:	f7fe f82e 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==2){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d117      	bne.n	800313c <PlayerAnimation+0xb8>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3b08      	subs	r3, #8
 8003112:	4618      	mov	r0, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	3b0b      	subs	r3, #11
 800311a:	4619      	mov	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003120:	461a      	mov	r2, r3
 8003122:	2300      	movs	r3, #0
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	2300      	movs	r3, #0
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	9202      	str	r2, [sp, #8]
 800312c:	230a      	movs	r3, #10
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <PlayerAnimation+0x100>)
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2318      	movs	r3, #24
 8003136:	2212      	movs	r2, #18
 8003138:	f7fe f812 	bl	8001160 <LCD_Sprite>
			}
		if (player->direction==3){
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d117      	bne.n	8003174 <PlayerAnimation+0xf0>

			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3b0a      	subs	r3, #10
 800314a:	4618      	mov	r0, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3b0b      	subs	r3, #11
 8003152:	4619      	mov	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	9304      	str	r3, [sp, #16]
 800315e:	2300      	movs	r3, #0
 8003160:	9303      	str	r3, [sp, #12]
 8003162:	9202      	str	r2, [sp, #8]
 8003164:	230a      	movs	r3, #10
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <PlayerAnimation+0xfc>)
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2317      	movs	r3, #23
 800316e:	2216      	movs	r2, #22
 8003170:	f7fd fff6 	bl	8001160 <LCD_Sprite>
			}
	}
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20012424 	.word	0x20012424
 8003180:	2000fc9c 	.word	0x2000fc9c
 8003184:	200148b4 	.word	0x200148b4

08003188 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	@ 0x28
 800318c:	af06      	add	r7, sp, #24
 800318e:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319a:	ee17 3a90 	vmov	r3, s15
 800319e:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 8082 	bne.w	80032ae <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	dc7b      	bgt.n	80032a8 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d115      	bne.n	80031e4 <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3b08      	subs	r3, #8
 80031be:	4618      	mov	r0, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	3b0b      	subs	r3, #11
 80031c6:	4619      	mov	r1, r3
 80031c8:	2300      	movs	r3, #0
 80031ca:	9304      	str	r3, [sp, #16]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9303      	str	r3, [sp, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	9302      	str	r3, [sp, #8]
 80031d4:	2306      	movs	r3, #6
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <PlayerAttackAnimation+0x138>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2316      	movs	r3, #22
 80031de:	2212      	movs	r2, #18
 80031e0:	f7fd ffbe 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d115      	bne.n	8003218 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b09      	subs	r3, #9
 80031f2:	4618      	mov	r0, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	3b0b      	subs	r3, #11
 80031fa:	4619      	mov	r1, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	2301      	movs	r3, #1
 8003202:	9303      	str	r3, [sp, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	9302      	str	r3, [sp, #8]
 8003208:	2306      	movs	r3, #6
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	4b2d      	ldr	r3, [pc, #180]	@ (80032c4 <PlayerAttackAnimation+0x13c>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2316      	movs	r3, #22
 8003212:	2214      	movs	r2, #20
 8003214:	f7fd ffa4 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d115      	bne.n	800324c <PlayerAttackAnimation+0xc4>

				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3b08      	subs	r3, #8
 8003226:	4618      	mov	r0, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	3b0b      	subs	r3, #11
 800322e:	4619      	mov	r1, r3
 8003230:	2300      	movs	r3, #0
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	2300      	movs	r3, #0
 8003236:	9303      	str	r3, [sp, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	2306      	movs	r3, #6
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <PlayerAttackAnimation+0x140>)
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2317      	movs	r3, #23
 8003246:	2212      	movs	r2, #18
 8003248:	f7fd ff8a 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d115      	bne.n	8003280 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3b09      	subs	r3, #9
 800325a:	4618      	mov	r0, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	3b0b      	subs	r3, #11
 8003262:	4619      	mov	r1, r3
 8003264:	2300      	movs	r3, #0
 8003266:	9304      	str	r3, [sp, #16]
 8003268:	2300      	movs	r3, #0
 800326a:	9303      	str	r3, [sp, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	9302      	str	r3, [sp, #8]
 8003270:	2306      	movs	r3, #6
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <PlayerAttackAnimation+0x13c>)
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2316      	movs	r3, #22
 800327a:	2214      	movs	r2, #20
 800327c:	f7fd ff70 	bl	8001160 <LCD_Sprite>
					}
			player->animationAttack+=0.2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f923 	bl	80004d0 <__aeabi_f2d>
 800328a:	a30b      	add	r3, pc, #44	@ (adr r3, 80032b8 <PlayerAttackAnimation+0x130>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fc ffc0 	bl	8000214 <__adddf3>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f7fd f970 	bl	8000580 <__aeabi_d2f>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 80032a6:	e002      	b.n	80032ae <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	9999999a 	.word	0x9999999a
 80032bc:	3fc99999 	.word	0x3fc99999
 80032c0:	2000a5f8 	.word	0x2000a5f8
 80032c4:	20009158 	.word	0x20009158
 80032c8:	20007df0 	.word	0x20007df0
 80032cc:	00000000 	.word	0x00000000

080032d0 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af06      	add	r7, sp, #24
 80032d6:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80032de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e2:	ee17 3a90 	vmov	r3, s15
 80032e6:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f040 8082 	bne.w	80033f6 <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	dc7b      	bgt.n	80033f0 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3b08      	subs	r3, #8
 8003306:	4618      	mov	r0, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	3b0a      	subs	r3, #10
 800330e:	4619      	mov	r1, r3
 8003310:	2300      	movs	r3, #0
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	2300      	movs	r3, #0
 8003316:	9303      	str	r3, [sp, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	9302      	str	r3, [sp, #8]
 800331c:	2303      	movs	r3, #3
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <PlayerDamageAnimation+0x138>)
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2314      	movs	r3, #20
 8003326:	2212      	movs	r2, #18
 8003328:	f7fd ff1a 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d115      	bne.n	8003360 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3b09      	subs	r3, #9
 800333a:	4618      	mov	r0, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	3b0a      	subs	r3, #10
 8003342:	4619      	mov	r1, r3
 8003344:	2300      	movs	r3, #0
 8003346:	9304      	str	r3, [sp, #16]
 8003348:	2301      	movs	r3, #1
 800334a:	9303      	str	r3, [sp, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	2303      	movs	r3, #3
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <PlayerDamageAnimation+0x13c>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2315      	movs	r3, #21
 800335a:	2214      	movs	r2, #20
 800335c:	f7fd ff00 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d115      	bne.n	8003394 <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3b09      	subs	r3, #9
 800336e:	4618      	mov	r0, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	3b0a      	subs	r3, #10
 8003376:	4619      	mov	r1, r3
 8003378:	2300      	movs	r3, #0
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	2300      	movs	r3, #0
 800337e:	9303      	str	r3, [sp, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	9302      	str	r3, [sp, #8]
 8003384:	2303      	movs	r3, #3
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <PlayerDamageAnimation+0x140>)
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2315      	movs	r3, #21
 800338e:	2214      	movs	r2, #20
 8003390:	f7fd fee6 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d115      	bne.n	80033c8 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3b09      	subs	r3, #9
 80033a2:	4618      	mov	r0, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	3b0a      	subs	r3, #10
 80033aa:	4619      	mov	r1, r3
 80033ac:	2300      	movs	r3, #0
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	2300      	movs	r3, #0
 80033b2:	9303      	str	r3, [sp, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	2303      	movs	r3, #3
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <PlayerDamageAnimation+0x13c>)
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2315      	movs	r3, #21
 80033c2:	2214      	movs	r2, #20
 80033c4:	f7fd fecc 	bl	8001160 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f87f 	bl	80004d0 <__aeabi_f2d>
 80033d2:	a30b      	add	r3, pc, #44	@ (adr r3, 8003400 <PlayerDamageAnimation+0x130>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fc ff1c 	bl	8000214 <__adddf3>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7fd f8cc 	bl	8000580 <__aeabi_d2f>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 80033ee:	e002      	b.n	80033f6 <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	9999999a 	.word	0x9999999a
 8003404:	3fc99999 	.word	0x3fc99999
 8003408:	20004fd0 	.word	0x20004fd0
 800340c:	20005840 	.word	0x20005840
 8003410:	20006218 	.word	0x20006218
 8003414:	00000000 	.word	0x00000000

08003418 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b08b      	sub	sp, #44	@ 0x2c
 800341c:	af06      	add	r7, sp, #24
 800341e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342a:	ee17 3a90 	vmov	r3, s15
 800342e:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d143      	bne.n	80034c0 <PlayerDieAnimation+0xa8>
		if (variableAnimationDie<4){
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b03      	cmp	r3, #3
 800343c:	dc40      	bgt.n	80034c0 <PlayerDieAnimation+0xa8>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2), p2.width+1, p2.height+1, 0xFE8B);
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <PlayerDieAnimation+0xb8>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b23      	ldr	r3, [pc, #140]	@ (80034d0 <PlayerDieAnimation+0xb8>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	1c58      	adds	r0, r3, #1
 800344c:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <PlayerDieAnimation+0xb8>)
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <PlayerDieAnimation+0xb8>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	1ad1      	subs	r1, r2, r3
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <PlayerDieAnimation+0xb8>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <PlayerDieAnimation+0xb8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8003468:	9400      	str	r4, [sp, #0]
 800346a:	f7fd fdc5 	bl	8000ff8 <FillRect>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3b0b      	subs	r3, #11
 8003474:	4618      	mov	r0, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	3b0c      	subs	r3, #12
 800347c:	4619      	mov	r1, r3
 800347e:	2300      	movs	r3, #0
 8003480:	9304      	str	r3, [sp, #16]
 8003482:	2300      	movs	r3, #0
 8003484:	9303      	str	r3, [sp, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	2304      	movs	r3, #4
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <PlayerDieAnimation+0xbc>)
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2318      	movs	r3, #24
 8003494:	2218      	movs	r2, #24
 8003496:	f7fd fe63 	bl	8001160 <LCD_Sprite>
			player->animationDie+=0.2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd f816 	bl	80004d0 <__aeabi_f2d>
 80034a4:	a308      	add	r3, pc, #32	@ (adr r3, 80034c8 <PlayerDieAnimation+0xb0>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f7fc feb3 	bl	8000214 <__adddf3>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7fd f863 	bl	8000580 <__aeabi_d2f>
 80034ba:	4602      	mov	r2, r0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	3fc99999 	.word	0x3fc99999
 80034d0:	20016c08 	.word	0x20016c08
 80034d4:	20006bf0 	.word	0x20006bf0

080034d8 <initLevelSolo>:

void initLevelSolo(void){
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b087      	sub	sp, #28
 80034dc:	af06      	add	r7, sp, #24
	FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80034de:	4b4d      	ldr	r3, [pc, #308]	@ (8003614 <initLevelSolo+0x13c>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003614 <initLevelSolo+0x13c>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	1c58      	adds	r0, r3, #1
 80034ec:	4b49      	ldr	r3, [pc, #292]	@ (8003614 <initLevelSolo+0x13c>)
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4b48      	ldr	r3, [pc, #288]	@ (8003614 <initLevelSolo+0x13c>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	1c59      	adds	r1, r3, #1
 80034fa:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <initLevelSolo+0x13c>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	4b44      	ldr	r3, [pc, #272]	@ (8003614 <initLevelSolo+0x13c>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	3301      	adds	r3, #1
 8003506:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800350a:	9400      	str	r4, [sp, #0]
 800350c:	f7fd fd74 	bl	8000ff8 <FillRect>
	if (IniciarLevel==1){
 8003510:	4b41      	ldr	r3, [pc, #260]	@ (8003618 <initLevelSolo+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d178      	bne.n	800360a <initLevelSolo+0x132>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8003518:	2312      	movs	r3, #18
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	23dc      	movs	r3, #220	@ 0xdc
 800351e:	9304      	str	r3, [sp, #16]
 8003520:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003524:	9303      	str	r3, [sp, #12]
 8003526:	2303      	movs	r3, #3
 8003528:	9302      	str	r3, [sp, #8]
 800352a:	2305      	movs	r3, #5
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	231e      	movs	r3, #30
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2316      	movs	r3, #22
 8003534:	22c8      	movs	r2, #200	@ 0xc8
 8003536:	21a0      	movs	r1, #160	@ 0xa0
 8003538:	4838      	ldr	r0, [pc, #224]	@ (800361c <initLevelSolo+0x144>)
 800353a:	f7ff fac1 	bl	8002ac0 <initPlayer>
		initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 800353e:	2312      	movs	r3, #18
 8003540:	9305      	str	r3, [sp, #20]
 8003542:	23dc      	movs	r3, #220	@ 0xdc
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800354a:	9303      	str	r3, [sp, #12]
 800354c:	2303      	movs	r3, #3
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	2305      	movs	r3, #5
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	231e      	movs	r3, #30
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2316      	movs	r3, #22
 800355a:	22c8      	movs	r2, #200	@ 0xc8
 800355c:	21a0      	movs	r1, #160	@ 0xa0
 800355e:	482d      	ldr	r0, [pc, #180]	@ (8003614 <initLevelSolo+0x13c>)
 8003560:	f7ff faae 	bl	8002ac0 <initPlayer>
		p1.PlayerNum=1;
 8003564:	4b2d      	ldr	r3, [pc, #180]	@ (800361c <initLevelSolo+0x144>)
 8003566:	2201      	movs	r2, #1
 8003568:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 800356a:	4b2a      	ldr	r3, [pc, #168]	@ (8003614 <initLevelSolo+0x13c>)
 800356c:	2202      	movs	r2, #2
 800356e:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.isAlive=0;
 8003570:	4b28      	ldr	r3, [pc, #160]	@ (8003614 <initLevelSolo+0x13c>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]

		if (nivelActual1==NIVEL1){
 8003576:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <initLevelSolo+0x148>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11e      	bne.n	80035be <initLevelSolo+0xe6>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8003580:	2303      	movs	r3, #3
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2313      	movs	r3, #19
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2310      	movs	r3, #16
 800358a:	2250      	movs	r2, #80	@ 0x50
 800358c:	2128      	movs	r1, #40	@ 0x28
 800358e:	4825      	ldr	r0, [pc, #148]	@ (8003624 <initLevelSolo+0x14c>)
 8003590:	f7fe f800 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8003594:	2303      	movs	r3, #3
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2313      	movs	r3, #19
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2310      	movs	r3, #16
 800359e:	2250      	movs	r2, #80	@ 0x50
 80035a0:	21a0      	movs	r1, #160	@ 0xa0
 80035a2:	4821      	ldr	r0, [pc, #132]	@ (8003628 <initLevelSolo+0x150>)
 80035a4:	f7fd fff6 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 80035a8:	2303      	movs	r3, #3
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2313      	movs	r3, #19
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2310      	movs	r3, #16
 80035b2:	2250      	movs	r2, #80	@ 0x50
 80035b4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80035b8:	481c      	ldr	r0, [pc, #112]	@ (800362c <initLevelSolo+0x154>)
 80035ba:	f7fd ffeb 	bl	8001594 <initEnemy1>

		  if (nivelActual1==NIVEL2){
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <initLevelSolo+0x148>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d10c      	bne.n	80035e2 <initLevelSolo+0x10a>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 80035c8:	2303      	movs	r3, #3
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2314      	movs	r3, #20
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2310      	movs	r3, #16
 80035d2:	2250      	movs	r2, #80	@ 0x50
 80035d4:	21a0      	movs	r1, #160	@ 0xa0
 80035d6:	4816      	ldr	r0, [pc, #88]	@ (8003630 <initLevelSolo+0x158>)
 80035d8:	f7fe fc00 	bl	8001ddc <initEnemy2>
			  IniciarLevel=0;
 80035dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <initLevelSolo+0x140>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 80035e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <initLevelSolo+0x148>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d10e      	bne.n	800360a <initLevelSolo+0x132>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <initLevelSolo+0x144>)
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	230f      	movs	r3, #15
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	230f      	movs	r3, #15
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	230f      	movs	r3, #15
 80035fa:	221e      	movs	r2, #30
 80035fc:	2150      	movs	r1, #80	@ 0x50
 80035fe:	480d      	ldr	r0, [pc, #52]	@ (8003634 <initLevelSolo+0x15c>)
 8003600:	f7fe ff38 	bl	8002474 <initEnemy3>
			  IniciarLevel=0;
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <initLevelSolo+0x140>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
		  	  }
		  }
}
 800360a:	bf00      	nop
 800360c:	3704      	adds	r7, #4
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	bf00      	nop
 8003614:	20016c08 	.word	0x20016c08
 8003618:	20016e9c 	.word	0x20016e9c
 800361c:	20016b94 	.word	0x20016b94
 8003620:	20016e99 	.word	0x20016e99
 8003624:	20016c7c 	.word	0x20016c7c
 8003628:	20016cb0 	.word	0x20016cb0
 800362c:	20016ce4 	.word	0x20016ce4
 8003630:	20016db4 	.word	0x20016db4
 8003634:	20016e3c 	.word	0x20016e3c

08003638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 800363e:	f001 faed 	bl	8004c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003642:	f000 fb0b 	bl	8003c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003646:	f000 fbff 	bl	8003e48 <MX_GPIO_Init>
  MX_SPI1_Init();
 800364a:	f000 fb73 	bl	8003d34 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800364e:	f000 fbd1 	bl	8003df4 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8003652:	f000 fba5 	bl	8003da0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8003656:	f7fd f95b 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 800365a:	2000      	movs	r0, #0
 800365c:	f7fd fbe0 	bl	8000e20 <LCD_Clear>

	//Fondo
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8003660:	4bac      	ldr	r3, [pc, #688]	@ (8003914 <main+0x2dc>)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	23f0      	movs	r3, #240	@ 0xf0
 8003666:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800366a:	2100      	movs	r1, #0
 800366c:	2000      	movs	r0, #0
 800366e:	f7fd fd1d 	bl	80010ac <LCD_Bitmap>

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	// Activar bandera interrupcion
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8003672:	2201      	movs	r2, #1
 8003674:	49a8      	ldr	r1, [pc, #672]	@ (8003918 <main+0x2e0>)
 8003676:	48a9      	ldr	r0, [pc, #676]	@ (800391c <main+0x2e4>)
 8003678:	f002 fcf3 	bl	8006062 <HAL_UART_Receive_IT>

	//EstadoJuego estadoActual = SOLO;
	//LevelPlaying nivelActual1 = NIVEL3;
	//LevelPlaying nivelActual2 = NIVEL2;
	estadoActual = SOLO;
 800367c:	4ba8      	ldr	r3, [pc, #672]	@ (8003920 <main+0x2e8>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
	nivelActual1 = NIVEL1;
 8003682:	4ba8      	ldr	r3, [pc, #672]	@ (8003924 <main+0x2ec>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
	nivelActual2 = NIVEL2;
 8003688:	4ba7      	ldr	r3, [pc, #668]	@ (8003928 <main+0x2f0>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
	modo = 0;
 800368e:	4ba7      	ldr	r3, [pc, #668]	@ (800392c <main+0x2f4>)
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
    fase_p1=1;
 8003694:	4ba6      	ldr	r3, [pc, #664]	@ (8003930 <main+0x2f8>)
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
    fase_p2=1;
 800369a:	4ba6      	ldr	r3, [pc, #664]	@ (8003934 <main+0x2fc>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]


  	if (estadoActual == SOLO){
 80036a0:	4b9f      	ldr	r3, [pc, #636]	@ (8003920 <main+0x2e8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d172      	bne.n	8003790 <main+0x158>
	//Inicializar Jugador 1
	initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80036aa:	2312      	movs	r3, #18
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	23dc      	movs	r3, #220	@ 0xdc
 80036b0:	9304      	str	r3, [sp, #16]
 80036b2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	2303      	movs	r3, #3
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	2305      	movs	r3, #5
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	231e      	movs	r3, #30
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2316      	movs	r3, #22
 80036c6:	22c8      	movs	r2, #200	@ 0xc8
 80036c8:	21a0      	movs	r1, #160	@ 0xa0
 80036ca:	489b      	ldr	r0, [pc, #620]	@ (8003938 <main+0x300>)
 80036cc:	f7ff f9f8 	bl	8002ac0 <initPlayer>
	initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 80036d0:	2312      	movs	r3, #18
 80036d2:	9305      	str	r3, [sp, #20]
 80036d4:	23dc      	movs	r3, #220	@ 0xdc
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80036dc:	9303      	str	r3, [sp, #12]
 80036de:	2303      	movs	r3, #3
 80036e0:	9302      	str	r3, [sp, #8]
 80036e2:	2305      	movs	r3, #5
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	231e      	movs	r3, #30
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2316      	movs	r3, #22
 80036ec:	22c8      	movs	r2, #200	@ 0xc8
 80036ee:	21a0      	movs	r1, #160	@ 0xa0
 80036f0:	4892      	ldr	r0, [pc, #584]	@ (800393c <main+0x304>)
 80036f2:	f7ff f9e5 	bl	8002ac0 <initPlayer>
	p1.PlayerNum=1;
 80036f6:	4b90      	ldr	r3, [pc, #576]	@ (8003938 <main+0x300>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 80036fc:	4b8f      	ldr	r3, [pc, #572]	@ (800393c <main+0x304>)
 80036fe:	2202      	movs	r2, #2
 8003700:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.isAlive=0;
 8003702:	4b8e      	ldr	r3, [pc, #568]	@ (800393c <main+0x304>)
 8003704:	2200      	movs	r2, #0
 8003706:	61da      	str	r2, [r3, #28]

	if (nivelActual1==NIVEL1){
 8003708:	4b86      	ldr	r3, [pc, #536]	@ (8003924 <main+0x2ec>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11e      	bne.n	8003750 <main+0x118>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8003712:	2303      	movs	r3, #3
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	2313      	movs	r3, #19
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2310      	movs	r3, #16
 800371c:	2250      	movs	r2, #80	@ 0x50
 800371e:	2128      	movs	r1, #40	@ 0x28
 8003720:	4887      	ldr	r0, [pc, #540]	@ (8003940 <main+0x308>)
 8003722:	f7fd ff37 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8003726:	2303      	movs	r3, #3
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2313      	movs	r3, #19
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2310      	movs	r3, #16
 8003730:	2250      	movs	r2, #80	@ 0x50
 8003732:	21a0      	movs	r1, #160	@ 0xa0
 8003734:	4883      	ldr	r0, [pc, #524]	@ (8003944 <main+0x30c>)
 8003736:	f7fd ff2d 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 800373a:	2303      	movs	r3, #3
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	2313      	movs	r3, #19
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2310      	movs	r3, #16
 8003744:	2250      	movs	r2, #80	@ 0x50
 8003746:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800374a:	487f      	ldr	r0, [pc, #508]	@ (8003948 <main+0x310>)
 800374c:	f7fd ff22 	bl	8001594 <initEnemy1>

	  if (nivelActual1==NIVEL2){
 8003750:	4b74      	ldr	r3, [pc, #464]	@ (8003924 <main+0x2ec>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d109      	bne.n	800376e <main+0x136>
		  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 800375a:	2303      	movs	r3, #3
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2314      	movs	r3, #20
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2310      	movs	r3, #16
 8003764:	2250      	movs	r2, #80	@ 0x50
 8003766:	21a0      	movs	r1, #160	@ 0xa0
 8003768:	4878      	ldr	r0, [pc, #480]	@ (800394c <main+0x314>)
 800376a:	f7fe fb37 	bl	8001ddc <initEnemy2>
		  }

	  if (nivelActual1==NIVEL3){
 800376e:	4b6d      	ldr	r3, [pc, #436]	@ (8003924 <main+0x2ec>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d10b      	bne.n	8003790 <main+0x158>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 8003778:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <main+0x300>)
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	230f      	movs	r3, #15
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	230f      	movs	r3, #15
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	230f      	movs	r3, #15
 8003786:	221e      	movs	r2, #30
 8003788:	2150      	movs	r1, #80	@ 0x50
 800378a:	4871      	ldr	r0, [pc, #452]	@ (8003950 <main+0x318>)
 800378c:	f7fe fe72 	bl	8002474 <initEnemy3>
	  	  }
	  }
  if (estadoActual==DUO){
 8003790:	4b63      	ldr	r3, [pc, #396]	@ (8003920 <main+0x2e8>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	f040 809c 	bne.w	80038d4 <main+0x29c>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 800379c:	2300      	movs	r3, #0
 800379e:	22f0      	movs	r2, #240	@ 0xf0
 80037a0:	2100      	movs	r1, #0
 80037a2:	20a0      	movs	r0, #160	@ 0xa0
 80037a4:	f7fd fbc0 	bl	8000f28 <V_line>
	initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 80037a8:	2312      	movs	r3, #18
 80037aa:	9305      	str	r3, [sp, #20]
 80037ac:	23dc      	movs	r3, #220	@ 0xdc
 80037ae:	9304      	str	r3, [sp, #16]
 80037b0:	23a0      	movs	r3, #160	@ 0xa0
 80037b2:	9303      	str	r3, [sp, #12]
 80037b4:	2303      	movs	r3, #3
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	2305      	movs	r3, #5
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	231e      	movs	r3, #30
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2316      	movs	r3, #22
 80037c2:	22c8      	movs	r2, #200	@ 0xc8
 80037c4:	2150      	movs	r1, #80	@ 0x50
 80037c6:	485c      	ldr	r0, [pc, #368]	@ (8003938 <main+0x300>)
 80037c8:	f7ff f97a 	bl	8002ac0 <initPlayer>
	initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 80037cc:	23a0      	movs	r3, #160	@ 0xa0
 80037ce:	9305      	str	r3, [sp, #20]
 80037d0:	23dc      	movs	r3, #220	@ 0xdc
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80037d8:	9303      	str	r3, [sp, #12]
 80037da:	2303      	movs	r3, #3
 80037dc:	9302      	str	r3, [sp, #8]
 80037de:	2305      	movs	r3, #5
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	231e      	movs	r3, #30
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2316      	movs	r3, #22
 80037e8:	22c8      	movs	r2, #200	@ 0xc8
 80037ea:	21f0      	movs	r1, #240	@ 0xf0
 80037ec:	4853      	ldr	r0, [pc, #332]	@ (800393c <main+0x304>)
 80037ee:	f7ff f967 	bl	8002ac0 <initPlayer>
	p1.PlayerNum=1;
 80037f2:	4b51      	ldr	r3, [pc, #324]	@ (8003938 <main+0x300>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 80037f8:	4b50      	ldr	r3, [pc, #320]	@ (800393c <main+0x304>)
 80037fa:	2202      	movs	r2, #2
 80037fc:	671a      	str	r2, [r3, #112]	@ 0x70

	if (nivelActual1==NIVEL1){
 80037fe:	4b49      	ldr	r3, [pc, #292]	@ (8003924 <main+0x2ec>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11d      	bne.n	8003844 <main+0x20c>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 30, 80, 16, 19, 3);
 8003808:	2303      	movs	r3, #3
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2313      	movs	r3, #19
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2310      	movs	r3, #16
 8003812:	2250      	movs	r2, #80	@ 0x50
 8003814:	211e      	movs	r1, #30
 8003816:	484a      	ldr	r0, [pc, #296]	@ (8003940 <main+0x308>)
 8003818:	f7fd febc 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2,90, 100, 16, 19, 3);
 800381c:	2303      	movs	r3, #3
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	2313      	movs	r3, #19
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2310      	movs	r3, #16
 8003826:	2264      	movs	r2, #100	@ 0x64
 8003828:	215a      	movs	r1, #90	@ 0x5a
 800382a:	4846      	ldr	r0, [pc, #280]	@ (8003944 <main+0x30c>)
 800382c:	f7fd feb2 	bl	8001594 <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3,150, 120, 16, 19, 3);}
 8003830:	2303      	movs	r3, #3
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2313      	movs	r3, #19
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2310      	movs	r3, #16
 800383a:	2278      	movs	r2, #120	@ 0x78
 800383c:	2196      	movs	r1, #150	@ 0x96
 800383e:	4842      	ldr	r0, [pc, #264]	@ (8003948 <main+0x310>)
 8003840:	f7fd fea8 	bl	8001594 <initEnemy1>
	  if (nivelActual1==NIVEL2){
 8003844:	4b37      	ldr	r3, [pc, #220]	@ (8003924 <main+0x2ec>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d109      	bne.n	8003862 <main+0x22a>
		  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 800384e:	2303      	movs	r3, #3
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	2314      	movs	r3, #20
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2310      	movs	r3, #16
 8003858:	2250      	movs	r2, #80	@ 0x50
 800385a:	215a      	movs	r1, #90	@ 0x5a
 800385c:	483b      	ldr	r0, [pc, #236]	@ (800394c <main+0x314>)
 800385e:	f7fe fabd 	bl	8001ddc <initEnemy2>
		  }
	  if (nivelActual2==NIVEL1){
 8003862:	4b31      	ldr	r3, [pc, #196]	@ (8003928 <main+0x2f0>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11e      	bne.n	80038aa <main+0x272>
	  			//Inicializar enemigo 1
	  			initEnemy1(&e1_4, 170, 120, 16, 19, 3);
 800386c:	2303      	movs	r3, #3
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	2313      	movs	r3, #19
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2310      	movs	r3, #16
 8003876:	2278      	movs	r2, #120	@ 0x78
 8003878:	21aa      	movs	r1, #170	@ 0xaa
 800387a:	4836      	ldr	r0, [pc, #216]	@ (8003954 <main+0x31c>)
 800387c:	f7fd fe8a 	bl	8001594 <initEnemy1>
	  			//Inicializar enemigo 2
	  			initEnemy1(&e1_5,230, 100, 16, 19, 3);
 8003880:	2303      	movs	r3, #3
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	2313      	movs	r3, #19
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2310      	movs	r3, #16
 800388a:	2264      	movs	r2, #100	@ 0x64
 800388c:	21e6      	movs	r1, #230	@ 0xe6
 800388e:	4832      	ldr	r0, [pc, #200]	@ (8003958 <main+0x320>)
 8003890:	f7fd fe80 	bl	8001594 <initEnemy1>
	  			//Inicializar enemigo 3
	  			initEnemy1(&e1_6,290, 80, 16, 19, 3);
 8003894:	2303      	movs	r3, #3
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2313      	movs	r3, #19
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2310      	movs	r3, #16
 800389e:	2250      	movs	r2, #80	@ 0x50
 80038a0:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80038a4:	482d      	ldr	r0, [pc, #180]	@ (800395c <main+0x324>)
 80038a6:	f7fd fe75 	bl	8001594 <initEnemy1>
	    }

	  if (nivelActual2==NIVEL2){
 80038aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003928 <main+0x2f0>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d109      	bne.n	80038c8 <main+0x290>
	  	  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 80038b4:	2303      	movs	r3, #3
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	2314      	movs	r3, #20
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2310      	movs	r3, #16
 80038be:	2250      	movs	r2, #80	@ 0x50
 80038c0:	21e6      	movs	r1, #230	@ 0xe6
 80038c2:	4827      	ldr	r0, [pc, #156]	@ (8003960 <main+0x328>)
 80038c4:	f7fe fa8a 	bl	8001ddc <initEnemy2>
	  }
	  HitboxPlayer(&p1);
 80038c8:	481b      	ldr	r0, [pc, #108]	@ (8003938 <main+0x300>)
 80038ca:	f7ff fa45 	bl	8002d58 <HitboxPlayer>
	  HitboxPlayer(&p2);
 80038ce:	481b      	ldr	r0, [pc, #108]	@ (800393c <main+0x304>)
 80038d0:	f7ff fa42 	bl	8002d58 <HitboxPlayer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch(estadoActual){
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <main+0x2e8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b04      	cmp	r3, #4
 80038dc:	f200 81ba 	bhi.w	8003c54 <main+0x61c>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <main+0x2b0>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	08003965 	.word	0x08003965
 80038f0:	08003ac3 	.word	0x08003ac3
 80038f4:	08003c41 	.word	0x08003c41
 80038f8:	08003c55 	.word	0x08003c55
		case MENU:
			FillRect(0, 0, 319, 239, 0xFF00);
 80038fc:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	23ef      	movs	r3, #239	@ 0xef
 8003904:	f240 123f 	movw	r2, #319	@ 0x13f
 8003908:	2100      	movs	r1, #0
 800390a:	2000      	movs	r0, #0
 800390c:	f7fd fb74 	bl	8000ff8 <FillRect>
			break;
 8003910:	e1a1      	b.n	8003c56 <main+0x61e>
 8003912:	bf00      	nop
 8003914:	0802c718 	.word	0x0802c718
 8003918:	20016b88 	.word	0x20016b88
 800391c:	20016b40 	.word	0x20016b40
 8003920:	20016a74 	.word	0x20016a74
 8003924:	20016e99 	.word	0x20016e99
 8003928:	20016e9a 	.word	0x20016e9a
 800392c:	20016e94 	.word	0x20016e94
 8003930:	20016e95 	.word	0x20016e95
 8003934:	20016e96 	.word	0x20016e96
 8003938:	20016b94 	.word	0x20016b94
 800393c:	20016c08 	.word	0x20016c08
 8003940:	20016c7c 	.word	0x20016c7c
 8003944:	20016cb0 	.word	0x20016cb0
 8003948:	20016ce4 	.word	0x20016ce4
 800394c:	20016db4 	.word	0x20016db4
 8003950:	20016e3c 	.word	0x20016e3c
 8003954:	20016d18 	.word	0x20016d18
 8003958:	20016d4c 	.word	0x20016d4c
 800395c:	20016d80 	.word	0x20016d80
 8003960:	20016df8 	.word	0x20016df8
		case SOLO:
			if (nivelActual1==NIVEL1){
 8003964:	4ba8      	ldr	r3, [pc, #672]	@ (8003c08 <main+0x5d0>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d158      	bne.n	8003a20 <main+0x3e8>
					if(e1_1.isAlive==1){
 800396e:	4ba7      	ldr	r3, [pc, #668]	@ (8003c0c <main+0x5d4>)
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <main+0x34a>
							animation_e1(&e1_1);
 8003976:	48a5      	ldr	r0, [pc, #660]	@ (8003c0c <main+0x5d4>)
 8003978:	f7fd fcf2 	bl	8001360 <animation_e1>
							animation_e1_control(&e1_1);}
 800397c:	48a3      	ldr	r0, [pc, #652]	@ (8003c0c <main+0x5d4>)
 800397e:	f7fd fc9b 	bl	80012b8 <animation_e1_control>
					if(e1_2.isAlive==1){
 8003982:	4ba3      	ldr	r3, [pc, #652]	@ (8003c10 <main+0x5d8>)
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <main+0x35e>
						animation_e1(&e1_2);
 800398a:	48a1      	ldr	r0, [pc, #644]	@ (8003c10 <main+0x5d8>)
 800398c:	f7fd fce8 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_2);}
 8003990:	489f      	ldr	r0, [pc, #636]	@ (8003c10 <main+0x5d8>)
 8003992:	f7fd fc91 	bl	80012b8 <animation_e1_control>

					if(e1_2.isAlive==1){
 8003996:	4b9e      	ldr	r3, [pc, #632]	@ (8003c10 <main+0x5d8>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <main+0x372>
						animation_e1(&e1_3);
 800399e:	489d      	ldr	r0, [pc, #628]	@ (8003c14 <main+0x5dc>)
 80039a0:	f7fd fcde 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_3);}
 80039a4:	489b      	ldr	r0, [pc, #620]	@ (8003c14 <main+0x5dc>)
 80039a6:	f7fd fc87 	bl	80012b8 <animation_e1_control>

					animation_e1_die(&e1_1);
 80039aa:	4898      	ldr	r0, [pc, #608]	@ (8003c0c <main+0x5d4>)
 80039ac:	f7fd fda0 	bl	80014f0 <animation_e1_die>
					animation_e1_die(&e1_2);
 80039b0:	4897      	ldr	r0, [pc, #604]	@ (8003c10 <main+0x5d8>)
 80039b2:	f7fd fd9d 	bl	80014f0 <animation_e1_die>
					animation_e1_die(&e1_3);
 80039b6:	4897      	ldr	r0, [pc, #604]	@ (8003c14 <main+0x5dc>)
 80039b8:	f7fd fd9a 	bl	80014f0 <animation_e1_die>
					if (e1_1.isAlive==0&&e1_2.isAlive==0&&e1_3.isAlive==0 && e1_1.animationDie>=11 && e1_2.animationDie>=11 && e1_3.animationDie>=11){
 80039bc:	4b93      	ldr	r3, [pc, #588]	@ (8003c0c <main+0x5d4>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d12d      	bne.n	8003a20 <main+0x3e8>
 80039c4:	4b92      	ldr	r3, [pc, #584]	@ (8003c10 <main+0x5d8>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d129      	bne.n	8003a20 <main+0x3e8>
 80039cc:	4b91      	ldr	r3, [pc, #580]	@ (8003c14 <main+0x5dc>)
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d125      	bne.n	8003a20 <main+0x3e8>
 80039d4:	4b8d      	ldr	r3, [pc, #564]	@ (8003c0c <main+0x5d4>)
 80039d6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80039da:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80039de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	db1b      	blt.n	8003a20 <main+0x3e8>
 80039e8:	4b89      	ldr	r3, [pc, #548]	@ (8003c10 <main+0x5d8>)
 80039ea:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80039ee:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80039f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fa:	db11      	blt.n	8003a20 <main+0x3e8>
 80039fc:	4b85      	ldr	r3, [pc, #532]	@ (8003c14 <main+0x5dc>)
 80039fe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003a02:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8003a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0e:	db07      	blt.n	8003a20 <main+0x3e8>
						nivelActual1=NIVEL2;
 8003a10:	4b7d      	ldr	r3, [pc, #500]	@ (8003c08 <main+0x5d0>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
						IniciarLevel=1;
 8003a16:	4b80      	ldr	r3, [pc, #512]	@ (8003c18 <main+0x5e0>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
						initLevelSolo();
 8003a1c:	f7ff fd5c 	bl	80034d8 <initLevelSolo>
					}
				}

			if (nivelActual1==NIVEL2){
 8003a20:	4b79      	ldr	r3, [pc, #484]	@ (8003c08 <main+0x5d0>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d12c      	bne.n	8003a84 <main+0x44c>
				moveE2(&e2_1, &p1);
 8003a2a:	497c      	ldr	r1, [pc, #496]	@ (8003c1c <main+0x5e4>)
 8003a2c:	487c      	ldr	r0, [pc, #496]	@ (8003c20 <main+0x5e8>)
 8003a2e:	f7fe fa0f 	bl	8001e50 <moveE2>
				e2_1.delay+=0.5; //1
 8003a32:	4b7b      	ldr	r3, [pc, #492]	@ (8003c20 <main+0x5e8>)
 8003a34:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003a38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a40:	4b77      	ldr	r3, [pc, #476]	@ (8003c20 <main+0x5e8>)
 8003a42:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_1);
 8003a46:	4876      	ldr	r0, [pc, #472]	@ (8003c20 <main+0x5e8>)
 8003a48:	f7fe fb1e 	bl	8002088 <E2_Appear>
				E2_Hurt(&e2_1);
 8003a4c:	4874      	ldr	r0, [pc, #464]	@ (8003c20 <main+0x5e8>)
 8003a4e:	f7fe fb63 	bl	8002118 <E2_Hurt>
				E2_Die(&e2_1);
 8003a52:	4873      	ldr	r0, [pc, #460]	@ (8003c20 <main+0x5e8>)
 8003a54:	f7fe fbb0 	bl	80021b8 <E2_Die>
				if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8003a58:	4b71      	ldr	r3, [pc, #452]	@ (8003c20 <main+0x5e8>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d111      	bne.n	8003a84 <main+0x44c>
 8003a60:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <main+0x5e8>)
 8003a62:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003a66:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a72:	db07      	blt.n	8003a84 <main+0x44c>
					nivelActual1=NIVEL3;
 8003a74:	4b64      	ldr	r3, [pc, #400]	@ (8003c08 <main+0x5d0>)
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8003a7a:	4b67      	ldr	r3, [pc, #412]	@ (8003c18 <main+0x5e0>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
					initLevelSolo();
 8003a80:	f7ff fd2a 	bl	80034d8 <initLevelSolo>
				}
			}

			if (nivelActual1==NIVEL3){
 8003a84:	4b60      	ldr	r3, [pc, #384]	@ (8003c08 <main+0x5d0>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d10f      	bne.n	8003aae <main+0x476>
				E3_MoveX(&e3_1);
 8003a8e:	4865      	ldr	r0, [pc, #404]	@ (8003c24 <main+0x5ec>)
 8003a90:	f7fe ffa0 	bl	80029d4 <E3_MoveX>
				E3_Eye(&e3_1);
 8003a94:	4863      	ldr	r0, [pc, #396]	@ (8003c24 <main+0x5ec>)
 8003a96:	f7fe fd37 	bl	8002508 <E3_Eye>
				E3_FireMove(&e3_1,&p1);
 8003a9a:	4960      	ldr	r1, [pc, #384]	@ (8003c1c <main+0x5e4>)
 8003a9c:	4861      	ldr	r0, [pc, #388]	@ (8003c24 <main+0x5ec>)
 8003a9e:	f7fe fdad 	bl	80025fc <E3_FireMove>
				E3_Hitbox(&e3_1);
 8003aa2:	4860      	ldr	r0, [pc, #384]	@ (8003c24 <main+0x5ec>)
 8003aa4:	f7fe fee0 	bl	8002868 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8003aa8:	485e      	ldr	r0, [pc, #376]	@ (8003c24 <main+0x5ec>)
 8003aaa:	f7fe fea5 	bl	80027f8 <E3_FireAnimation>


			}

			PlayerAttackAnimation(&p1);
 8003aae:	485b      	ldr	r0, [pc, #364]	@ (8003c1c <main+0x5e4>)
 8003ab0:	f7ff fb6a 	bl	8003188 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8003ab4:	4859      	ldr	r0, [pc, #356]	@ (8003c1c <main+0x5e4>)
 8003ab6:	f7ff fc0b 	bl	80032d0 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 8003aba:	4858      	ldr	r0, [pc, #352]	@ (8003c1c <main+0x5e4>)
 8003abc:	f7ff fcac 	bl	8003418 <PlayerDieAnimation>
			break;
 8003ac0:	e0c9      	b.n	8003c56 <main+0x61e>
		case DUO:
			if (nivelActual1==NIVEL1){
 8003ac2:	4b51      	ldr	r3, [pc, #324]	@ (8003c08 <main+0x5d0>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d126      	bne.n	8003b1a <main+0x4e2>
				if(e1_1.isAlive==1){
 8003acc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c0c <main+0x5d4>)
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <main+0x4a8>
						animation_e1(&e1_1);
 8003ad4:	484d      	ldr	r0, [pc, #308]	@ (8003c0c <main+0x5d4>)
 8003ad6:	f7fd fc43 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_1);
 8003ada:	484c      	ldr	r0, [pc, #304]	@ (8003c0c <main+0x5d4>)
 8003adc:	f7fd fbec 	bl	80012b8 <animation_e1_control>
				}
				if(e1_2.isAlive==1){
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c10 <main+0x5d8>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <main+0x4bc>
					animation_e1(&e1_2);
 8003ae8:	4849      	ldr	r0, [pc, #292]	@ (8003c10 <main+0x5d8>)
 8003aea:	f7fd fc39 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_2);
 8003aee:	4848      	ldr	r0, [pc, #288]	@ (8003c10 <main+0x5d8>)
 8003af0:	f7fd fbe2 	bl	80012b8 <animation_e1_control>
				}
				if(e1_2.isAlive==1){
 8003af4:	4b46      	ldr	r3, [pc, #280]	@ (8003c10 <main+0x5d8>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <main+0x4d0>
					animation_e1(&e1_3);
 8003afc:	4845      	ldr	r0, [pc, #276]	@ (8003c14 <main+0x5dc>)
 8003afe:	f7fd fc2f 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_3);
 8003b02:	4844      	ldr	r0, [pc, #272]	@ (8003c14 <main+0x5dc>)
 8003b04:	f7fd fbd8 	bl	80012b8 <animation_e1_control>
				}
				animation_e1_die(&e1_1);
 8003b08:	4840      	ldr	r0, [pc, #256]	@ (8003c0c <main+0x5d4>)
 8003b0a:	f7fd fcf1 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_2);
 8003b0e:	4840      	ldr	r0, [pc, #256]	@ (8003c10 <main+0x5d8>)
 8003b10:	f7fd fcee 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_3);
 8003b14:	483f      	ldr	r0, [pc, #252]	@ (8003c14 <main+0x5dc>)
 8003b16:	f7fd fceb 	bl	80014f0 <animation_e1_die>
			}
			if (nivelActual1==NIVEL2){
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c08 <main+0x5d0>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d116      	bne.n	8003b52 <main+0x51a>
							moveE2(&e2_1, &p1);
 8003b24:	493d      	ldr	r1, [pc, #244]	@ (8003c1c <main+0x5e4>)
 8003b26:	483e      	ldr	r0, [pc, #248]	@ (8003c20 <main+0x5e8>)
 8003b28:	f7fe f992 	bl	8001e50 <moveE2>
							e2_1.delay+=0.5; //1
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c20 <main+0x5e8>)
 8003b2e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003b32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <main+0x5e8>)
 8003b3c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
							E2_Appear(&e2_1);
 8003b40:	4837      	ldr	r0, [pc, #220]	@ (8003c20 <main+0x5e8>)
 8003b42:	f7fe faa1 	bl	8002088 <E2_Appear>
							E2_Hurt(&e2_1);
 8003b46:	4836      	ldr	r0, [pc, #216]	@ (8003c20 <main+0x5e8>)
 8003b48:	f7fe fae6 	bl	8002118 <E2_Hurt>
							E2_Die(&e2_1);
 8003b4c:	4834      	ldr	r0, [pc, #208]	@ (8003c20 <main+0x5e8>)
 8003b4e:	f7fe fb33 	bl	80021b8 <E2_Die>
						}


			if (nivelActual2==NIVEL1){
 8003b52:	4b35      	ldr	r3, [pc, #212]	@ (8003c28 <main+0x5f0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d126      	bne.n	8003baa <main+0x572>
				if(e1_4.isAlive==1){
 8003b5c:	4b33      	ldr	r3, [pc, #204]	@ (8003c2c <main+0x5f4>)
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <main+0x538>
						animation_e1(&e1_4);
 8003b64:	4831      	ldr	r0, [pc, #196]	@ (8003c2c <main+0x5f4>)
 8003b66:	f7fd fbfb 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_4);
 8003b6a:	4830      	ldr	r0, [pc, #192]	@ (8003c2c <main+0x5f4>)
 8003b6c:	f7fd fba4 	bl	80012b8 <animation_e1_control>
				}
				if(e1_5.isAlive==1){
 8003b70:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <main+0x5f8>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <main+0x54c>
					animation_e1(&e1_5);
 8003b78:	482d      	ldr	r0, [pc, #180]	@ (8003c30 <main+0x5f8>)
 8003b7a:	f7fd fbf1 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_5);
 8003b7e:	482c      	ldr	r0, [pc, #176]	@ (8003c30 <main+0x5f8>)
 8003b80:	f7fd fb9a 	bl	80012b8 <animation_e1_control>
				}
				if(e1_6.isAlive==1){
 8003b84:	4b2b      	ldr	r3, [pc, #172]	@ (8003c34 <main+0x5fc>)
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <main+0x560>
				animation_e1(&e1_6);
 8003b8c:	4829      	ldr	r0, [pc, #164]	@ (8003c34 <main+0x5fc>)
 8003b8e:	f7fd fbe7 	bl	8001360 <animation_e1>
				animation_e1_control(&e1_6);
 8003b92:	4828      	ldr	r0, [pc, #160]	@ (8003c34 <main+0x5fc>)
 8003b94:	f7fd fb90 	bl	80012b8 <animation_e1_control>
				}
				animation_e1_die(&e1_4);
 8003b98:	4824      	ldr	r0, [pc, #144]	@ (8003c2c <main+0x5f4>)
 8003b9a:	f7fd fca9 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_5);
 8003b9e:	4824      	ldr	r0, [pc, #144]	@ (8003c30 <main+0x5f8>)
 8003ba0:	f7fd fca6 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_6);
 8003ba4:	4823      	ldr	r0, [pc, #140]	@ (8003c34 <main+0x5fc>)
 8003ba6:	f7fd fca3 	bl	80014f0 <animation_e1_die>
			}

			if (nivelActual2==NIVEL2){
 8003baa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c28 <main+0x5f0>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d116      	bne.n	8003be2 <main+0x5aa>
				moveE2(&e2_2, &p2);
 8003bb4:	4920      	ldr	r1, [pc, #128]	@ (8003c38 <main+0x600>)
 8003bb6:	4821      	ldr	r0, [pc, #132]	@ (8003c3c <main+0x604>)
 8003bb8:	f7fe f94a 	bl	8001e50 <moveE2>
				e2_2.delay+=0.5; //1
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c3c <main+0x604>)
 8003bbe:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003bc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bca:	4b1c      	ldr	r3, [pc, #112]	@ (8003c3c <main+0x604>)
 8003bcc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				E2_Appear(&e2_2);
 8003bd0:	481a      	ldr	r0, [pc, #104]	@ (8003c3c <main+0x604>)
 8003bd2:	f7fe fa59 	bl	8002088 <E2_Appear>
				E2_Hurt(&e2_2);
 8003bd6:	4819      	ldr	r0, [pc, #100]	@ (8003c3c <main+0x604>)
 8003bd8:	f7fe fa9e 	bl	8002118 <E2_Hurt>
				E2_Die(&e2_2);
 8003bdc:	4817      	ldr	r0, [pc, #92]	@ (8003c3c <main+0x604>)
 8003bde:	f7fe faeb 	bl	80021b8 <E2_Die>
			}


			PlayerAttackAnimation(&p1);
 8003be2:	480e      	ldr	r0, [pc, #56]	@ (8003c1c <main+0x5e4>)
 8003be4:	f7ff fad0 	bl	8003188 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8003be8:	480c      	ldr	r0, [pc, #48]	@ (8003c1c <main+0x5e4>)
 8003bea:	f7ff fb71 	bl	80032d0 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 8003bee:	480b      	ldr	r0, [pc, #44]	@ (8003c1c <main+0x5e4>)
 8003bf0:	f7ff fc12 	bl	8003418 <PlayerDieAnimation>

			PlayerAttackAnimation(&p2);
 8003bf4:	4810      	ldr	r0, [pc, #64]	@ (8003c38 <main+0x600>)
 8003bf6:	f7ff fac7 	bl	8003188 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p2);
 8003bfa:	480f      	ldr	r0, [pc, #60]	@ (8003c38 <main+0x600>)
 8003bfc:	f7ff fb68 	bl	80032d0 <PlayerDamageAnimation>
			PlayerDieAnimation(&p2);
 8003c00:	480d      	ldr	r0, [pc, #52]	@ (8003c38 <main+0x600>)
 8003c02:	f7ff fc09 	bl	8003418 <PlayerDieAnimation>
			break;
 8003c06:	e026      	b.n	8003c56 <main+0x61e>
 8003c08:	20016e99 	.word	0x20016e99
 8003c0c:	20016c7c 	.word	0x20016c7c
 8003c10:	20016cb0 	.word	0x20016cb0
 8003c14:	20016ce4 	.word	0x20016ce4
 8003c18:	20016e9c 	.word	0x20016e9c
 8003c1c:	20016b94 	.word	0x20016b94
 8003c20:	20016db4 	.word	0x20016db4
 8003c24:	20016e3c 	.word	0x20016e3c
 8003c28:	20016e9a 	.word	0x20016e9a
 8003c2c:	20016d18 	.word	0x20016d18
 8003c30:	20016d4c 	.word	0x20016d4c
 8003c34:	20016d80 	.word	0x20016d80
 8003c38:	20016c08 	.word	0x20016c08
 8003c3c:	20016df8 	.word	0x20016df8
		case PAUSA:
			LCD_Bitmap(0, 0, 320, 240, pausa_menu);
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <main+0x620>)
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	23f0      	movs	r3, #240	@ 0xf0
 8003c46:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fd fa2d 	bl	80010ac <LCD_Bitmap>
			break;
 8003c52:	e000      	b.n	8003c56 <main+0x61e>
		case FIN:
			break;
		default:
			break;
 8003c54:	bf00      	nop
		switch(estadoActual){
 8003c56:	e63d      	b.n	80038d4 <main+0x29c>
 8003c58:	08006f18 	.word	0x08006f18

08003c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b094      	sub	sp, #80	@ 0x50
 8003c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c62:	f107 031c 	add.w	r3, r7, #28
 8003c66:	2234      	movs	r2, #52	@ 0x34
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 f91c 	bl	8006ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	2300      	movs	r3, #0
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	4b29      	ldr	r3, [pc, #164]	@ (8003d2c <SystemClock_Config+0xd0>)
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	4a28      	ldr	r2, [pc, #160]	@ (8003d2c <SystemClock_Config+0xd0>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c90:	4b26      	ldr	r3, [pc, #152]	@ (8003d2c <SystemClock_Config+0xd0>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <SystemClock_Config+0xd4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003ca8:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <SystemClock_Config+0xd4>)
 8003caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d30 <SystemClock_Config+0xd4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003cd4:	2350      	movs	r3, #80	@ 0x50
 8003cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fe43 	bl	8005974 <HAL_RCC_OscConfig>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003cf4:	f000 fdee 	bl	80048d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 fb69 	bl	80053ec <HAL_RCC_ClockConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003d20:	f000 fdd8 	bl	80048d4 <Error_Handler>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3750      	adds	r7, #80	@ 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000

08003d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d38:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d3a:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <MX_SPI1_Init+0x68>)
 8003d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d3e:	4b16      	ldr	r3, [pc, #88]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d46:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d4c:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d52:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d80:	220a      	movs	r2, #10
 8003d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d84:	4804      	ldr	r0, [pc, #16]	@ (8003d98 <MX_SPI1_Init+0x64>)
 8003d86:	f002 f893 	bl	8005eb0 <HAL_SPI_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d90:	f000 fda0 	bl	80048d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20016aa0 	.word	0x20016aa0
 8003d9c:	40013000 	.word	0x40013000

08003da0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <MX_UART5_Init+0x50>)
 8003da8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003daa:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003db0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003db2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dca:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003dd6:	4805      	ldr	r0, [pc, #20]	@ (8003dec <MX_UART5_Init+0x4c>)
 8003dd8:	f002 f8f3 	bl	8005fc2 <HAL_UART_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003de2:	f000 fd77 	bl	80048d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20016af8 	.word	0x20016af8
 8003df0:	40005000 	.word	0x40005000

08003df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003dfa:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <MX_USART2_UART_Init+0x50>)
 8003dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e06:	4b0e      	ldr	r3, [pc, #56]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e12:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e18:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e1a:	220c      	movs	r2, #12
 8003e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e1e:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e24:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e2a:	4805      	ldr	r0, [pc, #20]	@ (8003e40 <MX_USART2_UART_Init+0x4c>)
 8003e2c:	f002 f8c9 	bl	8005fc2 <HAL_UART_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e36:	f000 fd4d 	bl	80048d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20016b40 	.word	0x20016b40
 8003e44:	40004400 	.word	0x40004400

08003e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4e:	f107 0314 	add.w	r3, r7, #20
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b42      	ldr	r3, [pc, #264]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4a41      	ldr	r2, [pc, #260]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a3a      	ldr	r2, [pc, #232]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	4b34      	ldr	r3, [pc, #208]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	4a33      	ldr	r2, [pc, #204]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ea6:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	4a2c      	ldr	r2, [pc, #176]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ebc:	f043 0302 	orr.w	r3, r3, #2
 8003ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a25      	ldr	r2, [pc, #148]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <MX_GPIO_Init+0x124>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2182      	movs	r1, #130	@ 0x82
 8003eee:	4820      	ldr	r0, [pc, #128]	@ (8003f70 <MX_GPIO_Init+0x128>)
 8003ef0:	f001 fa62 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f240 7113 	movw	r1, #1811	@ 0x713
 8003efa:	481e      	ldr	r0, [pc, #120]	@ (8003f74 <MX_GPIO_Init+0x12c>)
 8003efc:	f001 fa5c 	bl	80053b8 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003f00:	2200      	movs	r2, #0
 8003f02:	f240 4179 	movw	r1, #1145	@ 0x479
 8003f06:	481c      	ldr	r0, [pc, #112]	@ (8003f78 <MX_GPIO_Init+0x130>)
 8003f08:	f001 fa56 	bl	80053b8 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8003f0c:	2382      	movs	r3, #130	@ 0x82
 8003f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f10:	2301      	movs	r3, #1
 8003f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	4619      	mov	r1, r3
 8003f22:	4813      	ldr	r0, [pc, #76]	@ (8003f70 <MX_GPIO_Init+0x128>)
 8003f24:	f001 f8b4 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003f28:	f240 7313 	movw	r3, #1811	@ 0x713
 8003f2c:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f36:	2302      	movs	r3, #2
 8003f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	4619      	mov	r1, r3
 8003f40:	480c      	ldr	r0, [pc, #48]	@ (8003f74 <MX_GPIO_Init+0x12c>)
 8003f42:	f001 f8a5 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003f46:	f240 4379 	movw	r3, #1145	@ 0x479
 8003f4a:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f54:	2302      	movs	r3, #2
 8003f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4806      	ldr	r0, [pc, #24]	@ (8003f78 <MX_GPIO_Init+0x130>)
 8003f60:	f001 f896 	bl	8005090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f64:	bf00      	nop
 8003f66:	3728      	adds	r7, #40	@ 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40020800 	.word	0x40020800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020400 	.word	0x40020400

08003f7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b089      	sub	sp, #36	@ 0x24
 8003f80:	af06      	add	r7, sp, #24
 8003f82:	6078      	str	r0, [r7, #4]
	if (modo==1){
 8003f84:	4b97      	ldr	r3, [pc, #604]	@ (80041e4 <HAL_UART_RxCpltCallback+0x268>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 8003f8c:	4896      	ldr	r0, [pc, #600]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003f8e:	f7fe fee3 	bl	8002d58 <HitboxPlayer>
	if (modo==2){
 8003f92:	4b94      	ldr	r3, [pc, #592]	@ (80041e4 <HAL_UART_RxCpltCallback+0x268>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d105      	bne.n	8003fa6 <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 8003f9a:	4893      	ldr	r0, [pc, #588]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003f9c:	f7fe fedc 	bl	8002d58 <HitboxPlayer>
		HitboxPlayer(&p2);
 8003fa0:	4892      	ldr	r0, [pc, #584]	@ (80041ec <HAL_UART_RxCpltCallback+0x270>)
 8003fa2:	f7fe fed9 	bl	8002d58 <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 8003fa6:	4b92      	ldr	r3, [pc, #584]	@ (80041f0 <HAL_UART_RxCpltCallback+0x274>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b64      	cmp	r3, #100	@ 0x64
 8003fac:	d175      	bne.n	800409a <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003fae:	4b8e      	ldr	r3, [pc, #568]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d171      	bne.n	800409a <HAL_UART_RxCpltCallback+0x11e>
 8003fb6:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d16d      	bne.n	800409a <HAL_UART_RxCpltCallback+0x11e>
 8003fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d169      	bne.n	800409a <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8003fc6:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b87      	ldr	r3, [pc, #540]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	1c58      	adds	r0, r3, #1
 8003fd4:	4b84      	ldr	r3, [pc, #528]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4b83      	ldr	r3, [pc, #524]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	1c59      	adds	r1, r3, #1
 8003fe2:	4b81      	ldr	r3, [pc, #516]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8003ff2:	9400      	str	r4, [sp, #0]
 8003ff4:	f7fd f800 	bl	8000ff8 <FillRect>
			p1.direction=2;
 8003ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8003ffe:	2100      	movs	r1, #0
 8004000:	4879      	ldr	r0, [pc, #484]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004002:	f7fe fde1 	bl	8002bc8 <playerCanMove>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 800400c:	4b76      	ldr	r3, [pc, #472]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	4b75      	ldr	r3, [pc, #468]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4413      	add	r3, r2
 8004016:	4a74      	ldr	r2, [pc, #464]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004018:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 800401a:	4b73      	ldr	r3, [pc, #460]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800401c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401e:	2b09      	cmp	r3, #9
 8004020:	d805      	bhi.n	800402e <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 8004022:	4b71      	ldr	r3, [pc, #452]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004026:	3301      	adds	r3, #1
 8004028:	4a6f      	ldr	r2, [pc, #444]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800402a:	6513      	str	r3, [r2, #80]	@ 0x50
 800402c:	e002      	b.n	8004034 <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 800402e:	4b6e      	ldr	r3, [pc, #440]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004030:	2200      	movs	r2, #0
 8004032:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 8004034:	486c      	ldr	r0, [pc, #432]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004036:	f7ff f825 	bl	8003084 <PlayerAnimation>
 800403a:	e02e      	b.n	800409a <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1,0xFE8B);
 800403c:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b69      	ldr	r3, [pc, #420]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	1c58      	adds	r0, r3, #1
 800404a:	4b67      	ldr	r3, [pc, #412]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4b66      	ldr	r3, [pc, #408]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	1c59      	adds	r1, r3, #1
 8004058:	4b63      	ldr	r3, [pc, #396]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	4b62      	ldr	r3, [pc, #392]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	3301      	adds	r3, #1
 8004064:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004068:	9400      	str	r4, [sp, #0]
 800406a:	f7fc ffc5 	bl	8000ff8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 800406e:	4b5e      	ldr	r3, [pc, #376]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3b08      	subs	r3, #8
 8004074:	4618      	mov	r0, r3
 8004076:	4b5c      	ldr	r3, [pc, #368]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	3b0c      	subs	r3, #12
 800407c:	4619      	mov	r1, r3
 800407e:	2300      	movs	r3, #0
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	2300      	movs	r3, #0
 8004084:	9303      	str	r3, [sp, #12]
 8004086:	2300      	movs	r3, #0
 8004088:	9302      	str	r3, [sp, #8]
 800408a:	230a      	movs	r3, #10
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <HAL_UART_RxCpltCallback+0x278>)
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	231a      	movs	r3, #26
 8004094:	2212      	movs	r2, #18
 8004096:	f7fd f863 	bl	8001160 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 800409a:	4b55      	ldr	r3, [pc, #340]	@ (80041f0 <HAL_UART_RxCpltCallback+0x274>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b75      	cmp	r3, #117	@ 0x75
 80040a0:	d15c      	bne.n	800415c <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80040a2:	4b51      	ldr	r3, [pc, #324]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d158      	bne.n	800415c <HAL_UART_RxCpltCallback+0x1e0>
 80040aa:	4b4f      	ldr	r3, [pc, #316]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d154      	bne.n	800415c <HAL_UART_RxCpltCallback+0x1e0>
 80040b2:	4b4d      	ldr	r3, [pc, #308]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d150      	bne.n	800415c <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80040ba:	4b4b      	ldr	r3, [pc, #300]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b4a      	ldr	r3, [pc, #296]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	1c58      	adds	r0, r3, #1
 80040c8:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4b46      	ldr	r3, [pc, #280]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	1c59      	adds	r1, r3, #1
 80040d6:	4b44      	ldr	r3, [pc, #272]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4b42      	ldr	r3, [pc, #264]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	3301      	adds	r3, #1
 80040e2:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80040e6:	9400      	str	r4, [sp, #0]
 80040e8:	f7fc ff86 	bl	8000ff8 <FillRect>
			p1.direction=0;
 80040ec:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 80040f2:	2102      	movs	r1, #2
 80040f4:	483c      	ldr	r0, [pc, #240]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80040f6:	f7fe fd67 	bl	8002bc8 <playerCanMove>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d017      	beq.n	8004130 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8004100:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	4a37      	ldr	r2, [pc, #220]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800410c:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 800410e:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004112:	2b09      	cmp	r3, #9
 8004114:	d805      	bhi.n	8004122 <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 8004116:	4b34      	ldr	r3, [pc, #208]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	3301      	adds	r3, #1
 800411c:	4a32      	ldr	r2, [pc, #200]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800411e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004120:	e002      	b.n	8004128 <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 8004122:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004124:	2200      	movs	r2, #0
 8004126:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 8004128:	482f      	ldr	r0, [pc, #188]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800412a:	f7fe ffab 	bl	8003084 <PlayerAnimation>
 800412e:	e015      	b.n	800415c <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8004130:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3b08      	subs	r3, #8
 8004136:	4618      	mov	r0, r3
 8004138:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	3b0d      	subs	r3, #13
 800413e:	4619      	mov	r1, r3
 8004140:	2300      	movs	r3, #0
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	2300      	movs	r3, #0
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	2300      	movs	r3, #0
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	230a      	movs	r3, #10
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <HAL_UART_RxCpltCallback+0x27c>)
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	231a      	movs	r3, #26
 8004156:	2212      	movs	r2, #18
 8004158:	f7fd f802 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 800415c:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_UART_RxCpltCallback+0x274>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b72      	cmp	r3, #114	@ 0x72
 8004162:	d168      	bne.n	8004236 <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	d164      	bne.n	8004236 <HAL_UART_RxCpltCallback+0x2ba>
 800416c:	4b1e      	ldr	r3, [pc, #120]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d160      	bne.n	8004236 <HAL_UART_RxCpltCallback+0x2ba>
 8004174:	4b1c      	ldr	r3, [pc, #112]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d15c      	bne.n	8004236 <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800417c:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	1c58      	adds	r0, r3, #1
 800418a:	4b17      	ldr	r3, [pc, #92]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	1c59      	adds	r1, r3, #1
 8004198:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	4b12      	ldr	r3, [pc, #72]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80041a8:	9400      	str	r4, [sp, #0]
 80041aa:	f7fc ff25 	bl	8000ff8 <FillRect>
			p1.direction=1;
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 80041b4:	2101      	movs	r1, #1
 80041b6:	480c      	ldr	r0, [pc, #48]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041b8:	f7fe fd06 	bl	8002bc8 <playerCanMove>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d023      	beq.n	800420a <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 80041c2:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	4a06      	ldr	r2, [pc, #24]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041ce:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	2b09      	cmp	r3, #9
 80041d6:	d811      	bhi.n	80041fc <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	3301      	adds	r3, #1
 80041de:	4a02      	ldr	r2, [pc, #8]	@ (80041e8 <HAL_UART_RxCpltCallback+0x26c>)
 80041e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80041e2:	e00e      	b.n	8004202 <HAL_UART_RxCpltCallback+0x286>
 80041e4:	20016e94 	.word	0x20016e94
 80041e8:	20016b94 	.word	0x20016b94
 80041ec:	20016c08 	.word	0x20016c08
 80041f0:	20016b88 	.word	0x20016b88
 80041f4:	200148b4 	.word	0x200148b4
 80041f8:	20012424 	.word	0x20012424
						} else{
						  p1.animationWalkRight=0;
 80041fc:	4b8e      	ldr	r3, [pc, #568]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80041fe:	2200      	movs	r2, #0
 8004200:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 8004202:	488d      	ldr	r0, [pc, #564]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004204:	f7fe ff3e 	bl	8003084 <PlayerAnimation>
 8004208:	e015      	b.n	8004236 <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 800420a:	4b8b      	ldr	r3, [pc, #556]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b0a      	subs	r3, #10
 8004210:	4618      	mov	r0, r3
 8004212:	4b89      	ldr	r3, [pc, #548]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	3b0b      	subs	r3, #11
 8004218:	4619      	mov	r1, r3
 800421a:	2300      	movs	r3, #0
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	2301      	movs	r3, #1
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	2300      	movs	r3, #0
 8004224:	9302      	str	r3, [sp, #8]
 8004226:	230a      	movs	r3, #10
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	4b84      	ldr	r3, [pc, #528]	@ (800443c <HAL_UART_RxCpltCallback+0x4c0>)
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2317      	movs	r3, #23
 8004230:	2216      	movs	r2, #22
 8004232:	f7fc ff95 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 8004236:	4b82      	ldr	r3, [pc, #520]	@ (8004440 <HAL_UART_RxCpltCallback+0x4c4>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b6c      	cmp	r3, #108	@ 0x6c
 800423c:	d15c      	bne.n	80042f8 <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 800423e:	4b7e      	ldr	r3, [pc, #504]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	2b00      	cmp	r3, #0
 8004244:	d158      	bne.n	80042f8 <HAL_UART_RxCpltCallback+0x37c>
 8004246:	4b7c      	ldr	r3, [pc, #496]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d154      	bne.n	80042f8 <HAL_UART_RxCpltCallback+0x37c>
 800424e:	4b7a      	ldr	r3, [pc, #488]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d150      	bne.n	80042f8 <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 8004256:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b77      	ldr	r3, [pc, #476]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	1c58      	adds	r0, r3, #1
 8004264:	4b74      	ldr	r3, [pc, #464]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4b73      	ldr	r3, [pc, #460]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	4b71      	ldr	r3, [pc, #452]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	4b6f      	ldr	r3, [pc, #444]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004282:	9400      	str	r4, [sp, #0]
 8004284:	f7fc feb8 	bl	8000ff8 <FillRect>
			p1.direction=3;
 8004288:	4b6b      	ldr	r3, [pc, #428]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800428a:	2203      	movs	r2, #3
 800428c:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 800428e:	2103      	movs	r1, #3
 8004290:	4869      	ldr	r0, [pc, #420]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004292:	f7fe fc99 	bl	8002bc8 <playerCanMove>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d017      	beq.n	80042cc <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 800429c:	4b66      	ldr	r3, [pc, #408]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b65      	ldr	r3, [pc, #404]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	4a64      	ldr	r2, [pc, #400]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042a8:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 80042aa:	4b63      	ldr	r3, [pc, #396]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d805      	bhi.n	80042be <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 80042b2:	4b61      	ldr	r3, [pc, #388]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	3301      	adds	r3, #1
 80042b8:	4a5f      	ldr	r2, [pc, #380]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80042bc:	e002      	b.n	80042c4 <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 80042be:	4b5e      	ldr	r3, [pc, #376]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 80042c4:	485c      	ldr	r0, [pc, #368]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042c6:	f7fe fedd 	bl	8003084 <PlayerAnimation>
 80042ca:	e015      	b.n	80042f8 <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 80042cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3b0a      	subs	r3, #10
 80042d2:	4618      	mov	r0, r3
 80042d4:	4b58      	ldr	r3, [pc, #352]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	3b0b      	subs	r3, #11
 80042da:	4619      	mov	r1, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	2300      	movs	r3, #0
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9302      	str	r3, [sp, #8]
 80042e8:	230a      	movs	r3, #10
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	4b53      	ldr	r3, [pc, #332]	@ (800443c <HAL_UART_RxCpltCallback+0x4c0>)
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2317      	movs	r3, #23
 80042f2:	2216      	movs	r2, #22
 80042f4:	f7fc ff34 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 80042f8:	4b51      	ldr	r3, [pc, #324]	@ (8004440 <HAL_UART_RxCpltCallback+0x4c4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b62      	cmp	r3, #98	@ 0x62
 80042fe:	d14f      	bne.n	80043a0 <HAL_UART_RxCpltCallback+0x424>
		 if (estadoActual == MENU ) {
 8004300:	4b50      	ldr	r3, [pc, #320]	@ (8004444 <HAL_UART_RxCpltCallback+0x4c8>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d127      	bne.n	800435a <HAL_UART_RxCpltCallback+0x3de>
			 // IMPRIMIR SPRITE DE UN JUGADOR
			 estadoFuturo = SOLO;
 800430a:	4b4f      	ldr	r3, [pc, #316]	@ (8004448 <HAL_UART_RxCpltCallback+0x4cc>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
			 if (nivelActual1==NIVEL1){
 8004310:	4b4e      	ldr	r3, [pc, #312]	@ (800444c <HAL_UART_RxCpltCallback+0x4d0>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d142      	bne.n	80043a0 <HAL_UART_RxCpltCallback+0x424>
			 		//Inicializar enemigo 1
			 		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 800431a:	2303      	movs	r3, #3
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	2313      	movs	r3, #19
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2310      	movs	r3, #16
 8004324:	2250      	movs	r2, #80	@ 0x50
 8004326:	2128      	movs	r1, #40	@ 0x28
 8004328:	4849      	ldr	r0, [pc, #292]	@ (8004450 <HAL_UART_RxCpltCallback+0x4d4>)
 800432a:	f7fd f933 	bl	8001594 <initEnemy1>
			 		//Inicializar enemigo 2
			 		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 800432e:	2303      	movs	r3, #3
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2313      	movs	r3, #19
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2310      	movs	r3, #16
 8004338:	2250      	movs	r2, #80	@ 0x50
 800433a:	21a0      	movs	r1, #160	@ 0xa0
 800433c:	4845      	ldr	r0, [pc, #276]	@ (8004454 <HAL_UART_RxCpltCallback+0x4d8>)
 800433e:	f7fd f929 	bl	8001594 <initEnemy1>
			 		//Inicializar enemigo 3
			 		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8004342:	2303      	movs	r3, #3
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	2313      	movs	r3, #19
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2310      	movs	r3, #16
 800434c:	2250      	movs	r2, #80	@ 0x50
 800434e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004352:	4841      	ldr	r0, [pc, #260]	@ (8004458 <HAL_UART_RxCpltCallback+0x4dc>)
 8004354:	f7fd f91e 	bl	8001594 <initEnemy1>
 8004358:	e022      	b.n	80043a0 <HAL_UART_RxCpltCallback+0x424>
		 	 }
		 else {
			 if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 800435a:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11a      	bne.n	8004398 <HAL_UART_RxCpltCallback+0x41c>
 8004362:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_UART_RxCpltCallback+0x41c>
 800436a:	4b33      	ldr	r3, [pc, #204]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d112      	bne.n	8004398 <HAL_UART_RxCpltCallback+0x41c>
			 			p1.IsAttack=1;
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004374:	2201      	movs	r2, #1
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
			 			p1.animationAttack=0;
 8004378:	4b2f      	ldr	r3, [pc, #188]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	659a      	str	r2, [r3, #88]	@ 0x58
			 			PlayerHit(&p1, &e1_1);
 8004380:	4933      	ldr	r1, [pc, #204]	@ (8004450 <HAL_UART_RxCpltCallback+0x4d4>)
 8004382:	482d      	ldr	r0, [pc, #180]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004384:	f7fe fd9e 	bl	8002ec4 <PlayerHit>
			 			PlayerHit(&p1, &e1_2);
 8004388:	4932      	ldr	r1, [pc, #200]	@ (8004454 <HAL_UART_RxCpltCallback+0x4d8>)
 800438a:	482b      	ldr	r0, [pc, #172]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800438c:	f7fe fd9a 	bl	8002ec4 <PlayerHit>
			 			PlayerHit(&p1, &e1_3);}
 8004390:	4931      	ldr	r1, [pc, #196]	@ (8004458 <HAL_UART_RxCpltCallback+0x4dc>)
 8004392:	4829      	ldr	r0, [pc, #164]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 8004394:	f7fe fd96 	bl	8002ec4 <PlayerHit>
			 			PlayerHit_E2(&p1, &e2_1);
 8004398:	4930      	ldr	r1, [pc, #192]	@ (800445c <HAL_UART_RxCpltCallback+0x4e0>)
 800439a:	4827      	ldr	r0, [pc, #156]	@ (8004438 <HAL_UART_RxCpltCallback+0x4bc>)
 800439c:	f7fd ff6a 	bl	8002274 <PlayerHit_E2>
		 }
	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 80043a0:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <HAL_UART_RxCpltCallback+0x4c4>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b31      	cmp	r3, #49	@ 0x31
 80043a6:	d173      	bne.n	8004490 <HAL_UART_RxCpltCallback+0x514>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80043a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d16f      	bne.n	8004490 <HAL_UART_RxCpltCallback+0x514>
 80043b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d16b      	bne.n	8004490 <HAL_UART_RxCpltCallback+0x514>
 80043b8:	4b29      	ldr	r3, [pc, #164]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d167      	bne.n	8004490 <HAL_UART_RxCpltCallback+0x514>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80043c0:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	1c58      	adds	r0, r3, #1
 80043ce:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	4b23      	ldr	r3, [pc, #140]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80043ec:	9400      	str	r4, [sp, #0]
 80043ee:	f7fc fe03 	bl	8000ff8 <FillRect>
				p2.direction=0;
 80043f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 80043f8:	2102      	movs	r1, #2
 80043fa:	4819      	ldr	r0, [pc, #100]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 80043fc:	f7fe fbe4 	bl	8002bc8 <playerCanMove>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d02e      	beq.n	8004464 <HAL_UART_RxCpltCallback+0x4e8>
					p2.y=p2.y-p2.speed;
 8004406:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	4a13      	ldr	r2, [pc, #76]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 8004412:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 8004414:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004418:	2b09      	cmp	r3, #9
 800441a:	d805      	bhi.n	8004428 <HAL_UART_RxCpltCallback+0x4ac>
							p2.animationWalkUp+=1;
 800441c:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 800441e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004420:	3301      	adds	r3, #1
 8004422:	4a0f      	ldr	r2, [pc, #60]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 8004424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004426:	e002      	b.n	800442e <HAL_UART_RxCpltCallback+0x4b2>
							} else{
							  p2.animationWalkUp=0;
 8004428:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 800442a:	2200      	movs	r2, #0
 800442c:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 800442e:	480c      	ldr	r0, [pc, #48]	@ (8004460 <HAL_UART_RxCpltCallback+0x4e4>)
 8004430:	f7fe fe28 	bl	8003084 <PlayerAnimation>
 8004434:	e02c      	b.n	8004490 <HAL_UART_RxCpltCallback+0x514>
 8004436:	bf00      	nop
 8004438:	20016b94 	.word	0x20016b94
 800443c:	2000fc9c 	.word	0x2000fc9c
 8004440:	20016b88 	.word	0x20016b88
 8004444:	20016a74 	.word	0x20016a74
 8004448:	20016e98 	.word	0x20016e98
 800444c:	20016e99 	.word	0x20016e99
 8004450:	20016c7c 	.word	0x20016c7c
 8004454:	20016cb0 	.word	0x20016cb0
 8004458:	20016ce4 	.word	0x20016ce4
 800445c:	20016db4 	.word	0x20016db4
 8004460:	20016c08 	.word	0x20016c08
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8004464:	4b9a      	ldr	r3, [pc, #616]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3b08      	subs	r3, #8
 800446a:	4618      	mov	r0, r3
 800446c:	4b98      	ldr	r3, [pc, #608]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	3b0d      	subs	r3, #13
 8004472:	4619      	mov	r1, r3
 8004474:	2300      	movs	r3, #0
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	2300      	movs	r3, #0
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	2300      	movs	r3, #0
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	230a      	movs	r3, #10
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	4b93      	ldr	r3, [pc, #588]	@ (80046d4 <HAL_UART_RxCpltCallback+0x758>)
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	231a      	movs	r3, #26
 800448a:	2212      	movs	r2, #18
 800448c:	f7fc fe68 	bl	8001160 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 8004490:	4b91      	ldr	r3, [pc, #580]	@ (80046d8 <HAL_UART_RxCpltCallback+0x75c>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b32      	cmp	r3, #50	@ 0x32
 8004496:	d15c      	bne.n	8004552 <HAL_UART_RxCpltCallback+0x5d6>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8004498:	4b8d      	ldr	r3, [pc, #564]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449c:	2b00      	cmp	r3, #0
 800449e:	d158      	bne.n	8004552 <HAL_UART_RxCpltCallback+0x5d6>
 80044a0:	4b8b      	ldr	r3, [pc, #556]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d154      	bne.n	8004552 <HAL_UART_RxCpltCallback+0x5d6>
 80044a8:	4b89      	ldr	r3, [pc, #548]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d150      	bne.n	8004552 <HAL_UART_RxCpltCallback+0x5d6>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80044b0:	4b87      	ldr	r3, [pc, #540]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b86      	ldr	r3, [pc, #536]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	1c58      	adds	r0, r3, #1
 80044be:	4b84      	ldr	r3, [pc, #528]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	4b83      	ldr	r3, [pc, #524]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	1c59      	adds	r1, r3, #1
 80044cc:	4b80      	ldr	r3, [pc, #512]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	4b7f      	ldr	r3, [pc, #508]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80044dc:	9400      	str	r4, [sp, #0]
 80044de:	f7fc fd8b 	bl	8000ff8 <FillRect>
			p2.direction=1;
 80044e2:	4b7b      	ldr	r3, [pc, #492]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 80044e8:	2101      	movs	r1, #1
 80044ea:	4879      	ldr	r0, [pc, #484]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044ec:	f7fe fb6c 	bl	8002bc8 <playerCanMove>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d017      	beq.n	8004526 <HAL_UART_RxCpltCallback+0x5aa>
				p2.x=p2.x+p2.speed;
 80044f6:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b75      	ldr	r3, [pc, #468]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	4a73      	ldr	r2, [pc, #460]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004502:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 8004504:	4b72      	ldr	r3, [pc, #456]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004508:	2b09      	cmp	r3, #9
 800450a:	d805      	bhi.n	8004518 <HAL_UART_RxCpltCallback+0x59c>
						p2.animationWalkRight+=1;
 800450c:	4b70      	ldr	r3, [pc, #448]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800450e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004510:	3301      	adds	r3, #1
 8004512:	4a6f      	ldr	r2, [pc, #444]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004514:	6493      	str	r3, [r2, #72]	@ 0x48
 8004516:	e002      	b.n	800451e <HAL_UART_RxCpltCallback+0x5a2>
						} else{
						  p2.animationWalkRight=0;
 8004518:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800451a:	2200      	movs	r2, #0
 800451c:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 800451e:	486c      	ldr	r0, [pc, #432]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004520:	f7fe fdb0 	bl	8003084 <PlayerAnimation>
 8004524:	e015      	b.n	8004552 <HAL_UART_RxCpltCallback+0x5d6>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8004526:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b0a      	subs	r3, #10
 800452c:	4618      	mov	r0, r3
 800452e:	4b68      	ldr	r3, [pc, #416]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	3b0b      	subs	r3, #11
 8004534:	4619      	mov	r1, r3
 8004536:	2300      	movs	r3, #0
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	2301      	movs	r3, #1
 800453c:	9303      	str	r3, [sp, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	9302      	str	r3, [sp, #8]
 8004542:	230a      	movs	r3, #10
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	4b65      	ldr	r3, [pc, #404]	@ (80046dc <HAL_UART_RxCpltCallback+0x760>)
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2317      	movs	r3, #23
 800454c:	2216      	movs	r2, #22
 800454e:	f7fc fe07 	bl	8001160 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 8004552:	4b61      	ldr	r3, [pc, #388]	@ (80046d8 <HAL_UART_RxCpltCallback+0x75c>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b33      	cmp	r3, #51	@ 0x33
 8004558:	d175      	bne.n	8004646 <HAL_UART_RxCpltCallback+0x6ca>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 800455a:	4b5d      	ldr	r3, [pc, #372]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	2b00      	cmp	r3, #0
 8004560:	d171      	bne.n	8004646 <HAL_UART_RxCpltCallback+0x6ca>
 8004562:	4b5b      	ldr	r3, [pc, #364]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d16d      	bne.n	8004646 <HAL_UART_RxCpltCallback+0x6ca>
 800456a:	4b59      	ldr	r3, [pc, #356]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d169      	bne.n	8004646 <HAL_UART_RxCpltCallback+0x6ca>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8004572:	4b57      	ldr	r3, [pc, #348]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b56      	ldr	r3, [pc, #344]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	1c58      	adds	r0, r3, #1
 8004580:	4b53      	ldr	r3, [pc, #332]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4b52      	ldr	r3, [pc, #328]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	1c59      	adds	r1, r3, #1
 800458e:	4b50      	ldr	r3, [pc, #320]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	4b4e      	ldr	r3, [pc, #312]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800459e:	9400      	str	r4, [sp, #0]
 80045a0:	f7fc fd2a 	bl	8000ff8 <FillRect>
			p2.direction=2;
 80045a4:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045a6:	2202      	movs	r2, #2
 80045a8:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 80045aa:	2100      	movs	r1, #0
 80045ac:	4848      	ldr	r0, [pc, #288]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045ae:	f7fe fb0b 	bl	8002bc8 <playerCanMove>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_UART_RxCpltCallback+0x66c>
		    p2.y=p2.y+p2.speed;
 80045b8:	4b45      	ldr	r3, [pc, #276]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4b44      	ldr	r3, [pc, #272]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	4a43      	ldr	r2, [pc, #268]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045c4:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 80045c6:	4b42      	ldr	r3, [pc, #264]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	d805      	bhi.n	80045da <HAL_UART_RxCpltCallback+0x65e>
		    		p2.animationWalkDown+=1;
 80045ce:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d2:	3301      	adds	r3, #1
 80045d4:	4a3e      	ldr	r2, [pc, #248]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80045d8:	e002      	b.n	80045e0 <HAL_UART_RxCpltCallback+0x664>
		    			} else{
		    				p2.animationWalkDown=0;
 80045da:	4b3d      	ldr	r3, [pc, #244]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045dc:	2200      	movs	r2, #0
 80045de:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 80045e0:	483b      	ldr	r0, [pc, #236]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045e2:	f7fe fd4f 	bl	8003084 <PlayerAnimation>
 80045e6:	e02e      	b.n	8004646 <HAL_UART_RxCpltCallback+0x6ca>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80045e8:	4b39      	ldr	r3, [pc, #228]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	1c58      	adds	r0, r3, #1
 80045f6:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4b35      	ldr	r3, [pc, #212]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	4b32      	ldr	r3, [pc, #200]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	3301      	adds	r3, #1
 8004610:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004614:	9400      	str	r4, [sp, #0]
 8004616:	f7fc fcef 	bl	8000ff8 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 800461a:	4b2d      	ldr	r3, [pc, #180]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3b08      	subs	r3, #8
 8004620:	4618      	mov	r0, r3
 8004622:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	3b0c      	subs	r3, #12
 8004628:	4619      	mov	r1, r3
 800462a:	2300      	movs	r3, #0
 800462c:	9304      	str	r3, [sp, #16]
 800462e:	2300      	movs	r3, #0
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	2300      	movs	r3, #0
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	230a      	movs	r3, #10
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <HAL_UART_RxCpltCallback+0x764>)
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	231a      	movs	r3, #26
 8004640:	2212      	movs	r2, #18
 8004642:	f7fc fd8d 	bl	8001160 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_UART_RxCpltCallback+0x75c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b34      	cmp	r3, #52	@ 0x34
 800464c:	d167      	bne.n	800471e <HAL_UART_RxCpltCallback+0x7a2>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	2b00      	cmp	r3, #0
 8004654:	d163      	bne.n	800471e <HAL_UART_RxCpltCallback+0x7a2>
 8004656:	4b1e      	ldr	r3, [pc, #120]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d15f      	bne.n	800471e <HAL_UART_RxCpltCallback+0x7a2>
 800465e:	4b1c      	ldr	r3, [pc, #112]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d15b      	bne.n	800471e <HAL_UART_RxCpltCallback+0x7a2>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8004666:	4b1a      	ldr	r3, [pc, #104]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	1c58      	adds	r0, r3, #1
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	1c59      	adds	r1, r3, #1
 8004682:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	3301      	adds	r3, #1
 800468e:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8004692:	9400      	str	r4, [sp, #0]
 8004694:	f7fc fcb0 	bl	8000ff8 <FillRect>
			p2.direction=3;
 8004698:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 800469a:	2203      	movs	r2, #3
 800469c:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 800469e:	2103      	movs	r1, #3
 80046a0:	480b      	ldr	r0, [pc, #44]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046a2:	f7fe fa91 	bl	8002bc8 <playerCanMove>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d022      	beq.n	80046f2 <HAL_UART_RxCpltCallback+0x776>
				p2.x=p2.x-p2.speed;
 80046ac:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	4a06      	ldr	r2, [pc, #24]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046b8:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 80046ba:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	2b09      	cmp	r3, #9
 80046c0:	d810      	bhi.n	80046e4 <HAL_UART_RxCpltCallback+0x768>
						p2.animationWalkLeft+=1;
 80046c2:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a01      	ldr	r2, [pc, #4]	@ (80046d0 <HAL_UART_RxCpltCallback+0x754>)
 80046ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80046cc:	e00d      	b.n	80046ea <HAL_UART_RxCpltCallback+0x76e>
 80046ce:	bf00      	nop
 80046d0:	20016c08 	.word	0x20016c08
 80046d4:	20012424 	.word	0x20012424
 80046d8:	20016b88 	.word	0x20016b88
 80046dc:	2000fc9c 	.word	0x2000fc9c
 80046e0:	200148b4 	.word	0x200148b4
						} else{
						  p2.animationWalkLeft=0;
 80046e4:	4b6d      	ldr	r3, [pc, #436]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 80046ea:	486c      	ldr	r0, [pc, #432]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 80046ec:	f7fe fcca 	bl	8003084 <PlayerAnimation>
 80046f0:	e015      	b.n	800471e <HAL_UART_RxCpltCallback+0x7a2>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 80046f2:	4b6a      	ldr	r3, [pc, #424]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3b0a      	subs	r3, #10
 80046f8:	4618      	mov	r0, r3
 80046fa:	4b68      	ldr	r3, [pc, #416]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	3b0b      	subs	r3, #11
 8004700:	4619      	mov	r1, r3
 8004702:	2300      	movs	r3, #0
 8004704:	9304      	str	r3, [sp, #16]
 8004706:	2300      	movs	r3, #0
 8004708:	9303      	str	r3, [sp, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	9302      	str	r3, [sp, #8]
 800470e:	230a      	movs	r3, #10
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	4b63      	ldr	r3, [pc, #396]	@ (80048a0 <HAL_UART_RxCpltCallback+0x924>)
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2317      	movs	r3, #23
 8004718:	2216      	movs	r2, #22
 800471a:	f7fc fd21 	bl	8001160 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 800471e:	4b61      	ldr	r3, [pc, #388]	@ (80048a4 <HAL_UART_RxCpltCallback+0x928>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b35      	cmp	r3, #53	@ 0x35
 8004724:	d12b      	bne.n	800477e <HAL_UART_RxCpltCallback+0x802>
		if (estadoActual == MENU ) {
 8004726:	4b60      	ldr	r3, [pc, #384]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <HAL_UART_RxCpltCallback+0x7bc>
					 // IMPRIMIR SPRITE DE DOS JUGADORES
			estadoFuturo = DUO;
 8004730:	4b5e      	ldr	r3, [pc, #376]	@ (80048ac <HAL_UART_RxCpltCallback+0x930>)
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e022      	b.n	800477e <HAL_UART_RxCpltCallback+0x802>
		}
		else {
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8004738:	4b58      	ldr	r3, [pc, #352]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11a      	bne.n	8004776 <HAL_UART_RxCpltCallback+0x7fa>
 8004740:	4b56      	ldr	r3, [pc, #344]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 8004742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <HAL_UART_RxCpltCallback+0x7fa>
 8004748:	4b54      	ldr	r3, [pc, #336]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d112      	bne.n	8004776 <HAL_UART_RxCpltCallback+0x7fa>
				p2.IsAttack=1;
 8004750:	4b52      	ldr	r3, [pc, #328]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 8004752:	2201      	movs	r2, #1
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
				p2.animationAttack=0;
 8004756:	4b51      	ldr	r3, [pc, #324]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	659a      	str	r2, [r3, #88]	@ 0x58
				PlayerHit(&p2, &e1_1);
 800475e:	4954      	ldr	r1, [pc, #336]	@ (80048b0 <HAL_UART_RxCpltCallback+0x934>)
 8004760:	484e      	ldr	r0, [pc, #312]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 8004762:	f7fe fbaf 	bl	8002ec4 <PlayerHit>
				PlayerHit(&p2, &e1_2);
 8004766:	4953      	ldr	r1, [pc, #332]	@ (80048b4 <HAL_UART_RxCpltCallback+0x938>)
 8004768:	484c      	ldr	r0, [pc, #304]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 800476a:	f7fe fbab 	bl	8002ec4 <PlayerHit>
				PlayerHit(&p2, &e1_3);}
 800476e:	4952      	ldr	r1, [pc, #328]	@ (80048b8 <HAL_UART_RxCpltCallback+0x93c>)
 8004770:	484a      	ldr	r0, [pc, #296]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 8004772:	f7fe fba7 	bl	8002ec4 <PlayerHit>
				PlayerHit_E2(&p2, &e2_2);
 8004776:	4951      	ldr	r1, [pc, #324]	@ (80048bc <HAL_UART_RxCpltCallback+0x940>)
 8004778:	4848      	ldr	r0, [pc, #288]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 800477a:	f7fd fd7b 	bl	8002274 <PlayerHit_E2>
		}
	}

	if (buffer[0]=='6'){
 800477e:	4b49      	ldr	r3, [pc, #292]	@ (80048a4 <HAL_UART_RxCpltCallback+0x928>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b36      	cmp	r3, #54	@ 0x36
 8004784:	f040 8081 	bne.w	800488a <HAL_UART_RxCpltCallback+0x90e>
		if (estadoActual == MENU){
 8004788:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_UART_RxCpltCallback+0x820>
			estadoActual = estadoFuturo;
 8004792:	4b46      	ldr	r3, [pc, #280]	@ (80048ac <HAL_UART_RxCpltCallback+0x930>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 800479a:	701a      	strb	r2, [r3, #0]
		}
		// Solo cambia a PAUSA si estamos en SOLO o DUO
		if (estadoActual == SOLO || estadoActual == DUO) {
 800479c:	4b42      	ldr	r3, [pc, #264]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d004      	beq.n	80047b0 <HAL_UART_RxCpltCallback+0x834>
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d10d      	bne.n	80047cc <HAL_UART_RxCpltCallback+0x850>
			// Solo cambia si no estamos ya en PAUSA
			if (estadoActual != PAUSA) {
 80047b0:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d067      	beq.n	800488a <HAL_UART_RxCpltCallback+0x90e>
				estadoAnterior = estadoActual;  // Guarda el estado actual antes de cambiar
 80047ba:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	4b3f      	ldr	r3, [pc, #252]	@ (80048c0 <HAL_UART_RxCpltCallback+0x944>)
 80047c2:	701a      	strb	r2, [r3, #0]
				estadoActual = PAUSA;           // Cambia a PAUSA
 80047c4:	4b38      	ldr	r3, [pc, #224]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 80047c6:	2203      	movs	r2, #3
 80047c8:	701a      	strb	r2, [r3, #0]
			if (estadoActual != PAUSA) {
 80047ca:	e05e      	b.n	800488a <HAL_UART_RxCpltCallback+0x90e>
			}
		} else if (estadoActual == PAUSA) {
 80047cc:	4b36      	ldr	r3, [pc, #216]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d159      	bne.n	800488a <HAL_UART_RxCpltCallback+0x90e>
			// Si estamos en PAUSA, regresa al estado anterior
			LCD_Bitmap(0, 0, 320, 240, fondo);
 80047d6:	4b3b      	ldr	r3, [pc, #236]	@ (80048c4 <HAL_UART_RxCpltCallback+0x948>)
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	23f0      	movs	r3, #240	@ 0xf0
 80047dc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80047e0:	2100      	movs	r1, #0
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7fc fc62 	bl	80010ac <LCD_Bitmap>
			if (estadoAnterior == SOLO){
 80047e8:	4b35      	ldr	r3, [pc, #212]	@ (80048c0 <HAL_UART_RxCpltCallback+0x944>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d115      	bne.n	800481e <HAL_UART_RxCpltCallback+0x8a2>
				LCD_Sprite(p1.x - (18 / 2)+2, p1.y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 80047f2:	4b35      	ldr	r3, [pc, #212]	@ (80048c8 <HAL_UART_RxCpltCallback+0x94c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3b07      	subs	r3, #7
 80047f8:	4618      	mov	r0, r3
 80047fa:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <HAL_UART_RxCpltCallback+0x94c>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	3b0f      	subs	r3, #15
 8004800:	4619      	mov	r1, r3
 8004802:	2300      	movs	r3, #0
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	2300      	movs	r3, #0
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	2305      	movs	r3, #5
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	2306      	movs	r3, #6
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	4b2e      	ldr	r3, [pc, #184]	@ (80048cc <HAL_UART_RxCpltCallback+0x950>)
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2317      	movs	r3, #23
 8004818:	2212      	movs	r2, #18
 800481a:	f7fc fca1 	bl	8001160 <LCD_Sprite>
			}
			if (estadoAnterior == DUO){
 800481e:	4b28      	ldr	r3, [pc, #160]	@ (80048c0 <HAL_UART_RxCpltCallback+0x944>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d12b      	bne.n	8004880 <HAL_UART_RxCpltCallback+0x904>
				LCD_Sprite(p1.x - (18 / 2)+2, p1.y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <HAL_UART_RxCpltCallback+0x94c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3b07      	subs	r3, #7
 800482e:	4618      	mov	r0, r3
 8004830:	4b25      	ldr	r3, [pc, #148]	@ (80048c8 <HAL_UART_RxCpltCallback+0x94c>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	3b0f      	subs	r3, #15
 8004836:	4619      	mov	r1, r3
 8004838:	2300      	movs	r3, #0
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	2300      	movs	r3, #0
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	2305      	movs	r3, #5
 8004842:	9302      	str	r3, [sp, #8]
 8004844:	2306      	movs	r3, #6
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <HAL_UART_RxCpltCallback+0x950>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2317      	movs	r3, #23
 800484e:	2212      	movs	r2, #18
 8004850:	f7fc fc86 	bl	8001160 <LCD_Sprite>
				LCD_Sprite(p2.x - (18 / 2)+2, p2.y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3b07      	subs	r3, #7
 800485a:	4618      	mov	r0, r3
 800485c:	4b0f      	ldr	r3, [pc, #60]	@ (800489c <HAL_UART_RxCpltCallback+0x920>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	3b0f      	subs	r3, #15
 8004862:	4619      	mov	r1, r3
 8004864:	2300      	movs	r3, #0
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	2300      	movs	r3, #0
 800486a:	9303      	str	r3, [sp, #12]
 800486c:	2305      	movs	r3, #5
 800486e:	9302      	str	r3, [sp, #8]
 8004870:	2306      	movs	r3, #6
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <HAL_UART_RxCpltCallback+0x950>)
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2317      	movs	r3, #23
 800487a:	2212      	movs	r2, #18
 800487c:	f7fc fc70 	bl	8001160 <LCD_Sprite>
			}

			estadoActual = estadoAnterior; // Restaura el estado anterior
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <HAL_UART_RxCpltCallback+0x944>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <HAL_UART_RxCpltCallback+0x92c>)
 8004888:	701a      	strb	r2, [r3, #0]
		}
	}

	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 800488a:	2201      	movs	r2, #1
 800488c:	4905      	ldr	r1, [pc, #20]	@ (80048a4 <HAL_UART_RxCpltCallback+0x928>)
 800488e:	4810      	ldr	r0, [pc, #64]	@ (80048d0 <HAL_UART_RxCpltCallback+0x954>)
 8004890:	f001 fbe7 	bl	8006062 <HAL_UART_Receive_IT>
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	20016c08 	.word	0x20016c08
 80048a0:	2000fc9c 	.word	0x2000fc9c
 80048a4:	20016b88 	.word	0x20016b88
 80048a8:	20016a74 	.word	0x20016a74
 80048ac:	20016e98 	.word	0x20016e98
 80048b0:	20016c7c 	.word	0x20016c7c
 80048b4:	20016cb0 	.word	0x20016cb0
 80048b8:	20016ce4 	.word	0x20016ce4
 80048bc:	20016df8 	.word	0x20016df8
 80048c0:	20016a75 	.word	0x20016a75
 80048c4:	0802c718 	.word	0x0802c718
 80048c8:	20016b94 	.word	0x20016b94
 80048cc:	20007df0 	.word	0x20007df0
 80048d0:	20016b40 	.word	0x20016b40

080048d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048d8:	b672      	cpsid	i
}
 80048da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <Error_Handler+0x8>

080048e0 <HAL_MspInit>:
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	4b10      	ldr	r3, [pc, #64]	@ (800492c <HAL_MspInit+0x4c>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	4a0f      	ldr	r2, [pc, #60]	@ (800492c <HAL_MspInit+0x4c>)
 80048f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <HAL_MspInit+0x4c>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4b09      	ldr	r3, [pc, #36]	@ (800492c <HAL_MspInit+0x4c>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	4a08      	ldr	r2, [pc, #32]	@ (800492c <HAL_MspInit+0x4c>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	@ 0x40
 8004912:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_MspInit+0x4c>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800

08004930 <HAL_SPI_MspInit>:
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	611a      	str	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a19      	ldr	r2, [pc, #100]	@ (80049b4 <HAL_SPI_MspInit+0x84>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d12b      	bne.n	80049aa <HAL_SPI_MspInit+0x7a>
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	4b18      	ldr	r3, [pc, #96]	@ (80049b8 <HAL_SPI_MspInit+0x88>)
 8004958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495a:	4a17      	ldr	r2, [pc, #92]	@ (80049b8 <HAL_SPI_MspInit+0x88>)
 800495c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004960:	6453      	str	r3, [r2, #68]	@ 0x44
 8004962:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <HAL_SPI_MspInit+0x88>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <HAL_SPI_MspInit+0x88>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	4a10      	ldr	r2, [pc, #64]	@ (80049b8 <HAL_SPI_MspInit+0x88>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6313      	str	r3, [r2, #48]	@ 0x30
 800497e:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_SPI_MspInit+0x88>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	23e0      	movs	r3, #224	@ 0xe0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	2302      	movs	r3, #2
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	2303      	movs	r3, #3
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	2305      	movs	r3, #5
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	4619      	mov	r1, r3
 80049a4:	4805      	ldr	r0, [pc, #20]	@ (80049bc <HAL_SPI_MspInit+0x8c>)
 80049a6:	f000 fb73 	bl	8005090 <HAL_GPIO_Init>
 80049aa:	bf00      	nop
 80049ac:	3728      	adds	r7, #40	@ 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40013000 	.word	0x40013000
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40020000 	.word	0x40020000

080049c0 <HAL_UART_MspInit>:
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	@ 0x30
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	f107 031c 	add.w	r3, r7, #28
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a49      	ldr	r2, [pc, #292]	@ (8004b04 <HAL_UART_MspInit+0x144>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d153      	bne.n	8004a8a <HAL_UART_MspInit+0xca>
 80049e2:	2300      	movs	r3, #0
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	4b48      	ldr	r3, [pc, #288]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	4a47      	ldr	r2, [pc, #284]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 80049ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049f2:	4b45      	ldr	r3, [pc, #276]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	4b41      	ldr	r3, [pc, #260]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	4a40      	ldr	r2, [pc, #256]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a08:	f043 0304 	orr.w	r3, r3, #4
 8004a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	4a39      	ldr	r2, [pc, #228]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a2a:	4b37      	ldr	r3, [pc, #220]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a44:	2303      	movs	r3, #3
 8004a46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a48:	2308      	movs	r3, #8
 8004a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4c:	f107 031c 	add.w	r3, r7, #28
 8004a50:	4619      	mov	r1, r3
 8004a52:	482e      	ldr	r0, [pc, #184]	@ (8004b0c <HAL_UART_MspInit+0x14c>)
 8004a54:	f000 fb1c 	bl	8005090 <HAL_GPIO_Init>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	623b      	str	r3, [r7, #32]
 8004a60:	2300      	movs	r3, #0
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a64:	2303      	movs	r3, #3
 8004a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a68:	2308      	movs	r3, #8
 8004a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6c:	f107 031c 	add.w	r3, r7, #28
 8004a70:	4619      	mov	r1, r3
 8004a72:	4827      	ldr	r0, [pc, #156]	@ (8004b10 <HAL_UART_MspInit+0x150>)
 8004a74:	f000 fb0c 	bl	8005090 <HAL_GPIO_Init>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2035      	movs	r0, #53	@ 0x35
 8004a7e:	f000 fa3e 	bl	8004efe <HAL_NVIC_SetPriority>
 8004a82:	2035      	movs	r0, #53	@ 0x35
 8004a84:	f000 fa57 	bl	8004f36 <HAL_NVIC_EnableIRQ>
 8004a88:	e038      	b.n	8004afc <HAL_UART_MspInit+0x13c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a21      	ldr	r2, [pc, #132]	@ (8004b14 <HAL_UART_MspInit+0x154>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d133      	bne.n	8004afc <HAL_UART_MspInit+0x13c>
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aa4:	4b18      	ldr	r3, [pc, #96]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	4a13      	ldr	r2, [pc, #76]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac0:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <HAL_UART_MspInit+0x148>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	230c      	movs	r3, #12
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad8:	2303      	movs	r3, #3
 8004ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004adc:	2307      	movs	r3, #7
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae0:	f107 031c 	add.w	r3, r7, #28
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	480c      	ldr	r0, [pc, #48]	@ (8004b18 <HAL_UART_MspInit+0x158>)
 8004ae8:	f000 fad2 	bl	8005090 <HAL_GPIO_Init>
 8004aec:	2200      	movs	r2, #0
 8004aee:	2100      	movs	r1, #0
 8004af0:	2026      	movs	r0, #38	@ 0x26
 8004af2:	f000 fa04 	bl	8004efe <HAL_NVIC_SetPriority>
 8004af6:	2026      	movs	r0, #38	@ 0x26
 8004af8:	f000 fa1d 	bl	8004f36 <HAL_NVIC_EnableIRQ>
 8004afc:	bf00      	nop
 8004afe:	3730      	adds	r7, #48	@ 0x30
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40005000 	.word	0x40005000
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40020800 	.word	0x40020800
 8004b10:	40020c00 	.word	0x40020c00
 8004b14:	40004400 	.word	0x40004400
 8004b18:	40020000 	.word	0x40020000

08004b1c <NMI_Handler>:
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <NMI_Handler+0x4>

08004b24 <HardFault_Handler>:
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <HardFault_Handler+0x4>

08004b2c <MemManage_Handler>:
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <MemManage_Handler+0x4>

08004b34 <BusFault_Handler>:
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <BusFault_Handler+0x4>

08004b3c <UsageFault_Handler>:
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <UsageFault_Handler+0x4>

08004b44 <SVC_Handler>:
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <DebugMon_Handler>:
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <PendSV_Handler>:
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <SysTick_Handler>:
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	f000 f8a5 	bl	8004cc0 <HAL_IncTick>
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <USART2_IRQHandler>:
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4802      	ldr	r0, [pc, #8]	@ (8004b8c <USART2_IRQHandler+0x10>)
 8004b82:	f001 fa93 	bl	80060ac <HAL_UART_IRQHandler>
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20016b40 	.word	0x20016b40

08004b90 <UART5_IRQHandler>:
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4802      	ldr	r0, [pc, #8]	@ (8004ba0 <UART5_IRQHandler+0x10>)
 8004b96:	f001 fa89 	bl	80060ac <HAL_UART_IRQHandler>
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20016af8 	.word	0x20016af8

08004ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ba8:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <SystemInit+0x20>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	4a05      	ldr	r2, [pc, #20]	@ (8004bc4 <SystemInit+0x20>)
 8004bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004bcc:	f7ff ffea 	bl	8004ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bd0:	480c      	ldr	r0, [pc, #48]	@ (8004c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004bd2:	490d      	ldr	r1, [pc, #52]	@ (8004c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bd8:	e002      	b.n	8004be0 <LoopCopyDataInit>

08004bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bde:	3304      	adds	r3, #4

08004be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004be4:	d3f9      	bcc.n	8004bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004be6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004be8:	4c0a      	ldr	r4, [pc, #40]	@ (8004c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bec:	e001      	b.n	8004bf2 <LoopFillZerobss>

08004bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bf0:	3204      	adds	r2, #4

08004bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bf4:	d3fb      	bcc.n	8004bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004bf6:	f002 f95f 	bl	8006eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bfa:	f7fe fd1d 	bl	8003638 <main>
  bx  lr    
 8004bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c08:	20016a84 	.word	0x20016a84
  ldr r2, =_sidata
 8004c0c:	08051f40 	.word	0x08051f40
  ldr r2, =_sbss
 8004c10:	20016a84 	.word	0x20016a84
  ldr r4, =_ebss
 8004c14:	20016ea4 	.word	0x20016ea4

08004c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c18:	e7fe      	b.n	8004c18 <ADC_IRQHandler>
	...

08004c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c20:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <HAL_Init+0x40>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <HAL_Init+0x40>)
 8004c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_Init+0x40>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_Init+0x40>)
 8004c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c38:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <HAL_Init+0x40>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a07      	ldr	r2, [pc, #28]	@ (8004c5c <HAL_Init+0x40>)
 8004c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c44:	2003      	movs	r0, #3
 8004c46:	f000 f94f 	bl	8004ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c4a:	200f      	movs	r0, #15
 8004c4c:	f000 f808 	bl	8004c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c50:	f7ff fe46 	bl	80048e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00

08004c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c68:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <HAL_InitTick+0x54>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_InitTick+0x58>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f967 	bl	8004f52 <HAL_SYSTICK_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00e      	b.n	8004cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	d80a      	bhi.n	8004caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c94:	2200      	movs	r2, #0
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f000 f92f 	bl	8004efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ca0:	4a06      	ldr	r2, [pc, #24]	@ (8004cbc <HAL_InitTick+0x5c>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20016a78 	.word	0x20016a78
 8004cb8:	20016a80 	.word	0x20016a80
 8004cbc:	20016a7c 	.word	0x20016a7c

08004cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_IncTick+0x20>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_IncTick+0x24>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	4a04      	ldr	r2, [pc, #16]	@ (8004ce4 <HAL_IncTick+0x24>)
 8004cd2:	6013      	str	r3, [r2, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20016a80 	.word	0x20016a80
 8004ce4:	20016ea0 	.word	0x20016ea0

08004ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return uwTick;
 8004cec:	4b03      	ldr	r3, [pc, #12]	@ (8004cfc <HAL_GetTick+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20016ea0 	.word	0x20016ea0

08004d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d08:	f7ff ffee 	bl	8004ce8 <HAL_GetTick>
 8004d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d005      	beq.n	8004d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <HAL_Delay+0x44>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d26:	bf00      	nop
 8004d28:	f7ff ffde 	bl	8004ce8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d8f7      	bhi.n	8004d28 <HAL_Delay+0x28>
  {
  }
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20016a80 	.word	0x20016a80

08004d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d58:	4b0c      	ldr	r3, [pc, #48]	@ (8004d8c <__NVIC_SetPriorityGrouping+0x44>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d64:	4013      	ands	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d7a:	4a04      	ldr	r2, [pc, #16]	@ (8004d8c <__NVIC_SetPriorityGrouping+0x44>)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	60d3      	str	r3, [r2, #12]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d94:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <__NVIC_GetPriorityGrouping+0x18>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 0307 	and.w	r3, r3, #7
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000ed00 	.word	0xe000ed00

08004dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	db0b      	blt.n	8004dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	f003 021f 	and.w	r2, r3, #31
 8004dc4:	4907      	ldr	r1, [pc, #28]	@ (8004de4 <__NVIC_EnableIRQ+0x38>)
 8004dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2001      	movs	r0, #1
 8004dce:	fa00 f202 	lsl.w	r2, r0, r2
 8004dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000e100 	.word	0xe000e100

08004de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db0a      	blt.n	8004e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	490c      	ldr	r1, [pc, #48]	@ (8004e34 <__NVIC_SetPriority+0x4c>)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e10:	e00a      	b.n	8004e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4908      	ldr	r1, [pc, #32]	@ (8004e38 <__NVIC_SetPriority+0x50>)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	0112      	lsls	r2, r2, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	761a      	strb	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000e100 	.word	0xe000e100
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	@ 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	bf28      	it	cs
 8004e5a:	2304      	movcs	r3, #4
 8004e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d902      	bls.n	8004e6c <NVIC_EncodePriority+0x30>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3b03      	subs	r3, #3
 8004e6a:	e000      	b.n	8004e6e <NVIC_EncodePriority+0x32>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	401a      	ands	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	4313      	orrs	r3, r2
         );
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb4:	d301      	bcc.n	8004eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e00f      	b.n	8004eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <SysTick_Config+0x40>)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec2:	210f      	movs	r1, #15
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	f7ff ff8e 	bl	8004de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <SysTick_Config+0x40>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed2:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <SysTick_Config+0x40>)
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000e010 	.word	0xe000e010

08004ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ff29 	bl	8004d48 <__NVIC_SetPriorityGrouping>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	4603      	mov	r3, r0
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f10:	f7ff ff3e 	bl	8004d90 <__NVIC_GetPriorityGrouping>
 8004f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7ff ff8e 	bl	8004e3c <NVIC_EncodePriority>
 8004f20:	4602      	mov	r2, r0
 8004f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ff5d 	bl	8004de8 <__NVIC_SetPriority>
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff31 	bl	8004dac <__NVIC_EnableIRQ>
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ffa2 	bl	8004ea4 <SysTick_Config>
 8004f60:	4603      	mov	r3, r0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f78:	f7ff feb6 	bl	8004ce8 <HAL_GetTick>
 8004f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d008      	beq.n	8004f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2280      	movs	r2, #128	@ 0x80
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e052      	b.n	8005042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0216 	bic.w	r2, r2, #22
 8004faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <HAL_DMA_Abort+0x62>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0208 	bic.w	r2, r2, #8
 8004fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fec:	e013      	b.n	8005016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fee:	f7ff fe7b 	bl	8004ce8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b05      	cmp	r3, #5
 8004ffa:	d90c      	bls.n	8005016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2203      	movs	r2, #3
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e015      	b.n	8005042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e4      	bne.n	8004fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	223f      	movs	r2, #63	@ 0x3f
 800502a:	409a      	lsls	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d004      	beq.n	8005068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2280      	movs	r2, #128	@ 0x80
 8005062:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e00c      	b.n	8005082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2205      	movs	r2, #5
 800506c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	@ 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e165      	b.n	8005378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050ac:	2201      	movs	r2, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f040 8154 	bne.w	8005372 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d005      	beq.n	80050e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d130      	bne.n	8005144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005118:	2201      	movs	r2, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 0201 	and.w	r2, r3, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d017      	beq.n	8005180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2203      	movs	r2, #3
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d123      	bne.n	80051d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80ae 	beq.w	8005372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	4b5d      	ldr	r3, [pc, #372]	@ (8005390 <HAL_GPIO_Init+0x300>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	4a5c      	ldr	r2, [pc, #368]	@ (8005390 <HAL_GPIO_Init+0x300>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005224:	6453      	str	r3, [r2, #68]	@ 0x44
 8005226:	4b5a      	ldr	r3, [pc, #360]	@ (8005390 <HAL_GPIO_Init+0x300>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005232:	4a58      	ldr	r2, [pc, #352]	@ (8005394 <HAL_GPIO_Init+0x304>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4f      	ldr	r2, [pc, #316]	@ (8005398 <HAL_GPIO_Init+0x308>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d025      	beq.n	80052aa <HAL_GPIO_Init+0x21a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4e      	ldr	r2, [pc, #312]	@ (800539c <HAL_GPIO_Init+0x30c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01f      	beq.n	80052a6 <HAL_GPIO_Init+0x216>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a4d      	ldr	r2, [pc, #308]	@ (80053a0 <HAL_GPIO_Init+0x310>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d019      	beq.n	80052a2 <HAL_GPIO_Init+0x212>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4c      	ldr	r2, [pc, #304]	@ (80053a4 <HAL_GPIO_Init+0x314>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_GPIO_Init+0x20e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a4b      	ldr	r2, [pc, #300]	@ (80053a8 <HAL_GPIO_Init+0x318>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00d      	beq.n	800529a <HAL_GPIO_Init+0x20a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a4a      	ldr	r2, [pc, #296]	@ (80053ac <HAL_GPIO_Init+0x31c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <HAL_GPIO_Init+0x206>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a49      	ldr	r2, [pc, #292]	@ (80053b0 <HAL_GPIO_Init+0x320>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <HAL_GPIO_Init+0x202>
 800528e:	2306      	movs	r3, #6
 8005290:	e00c      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 8005292:	2307      	movs	r3, #7
 8005294:	e00a      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 8005296:	2305      	movs	r3, #5
 8005298:	e008      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 800529a:	2304      	movs	r3, #4
 800529c:	e006      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 800529e:	2303      	movs	r3, #3
 80052a0:	e004      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e002      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_GPIO_Init+0x21c>
 80052aa:	2300      	movs	r3, #0
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	f002 0203 	and.w	r2, r2, #3
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	4093      	lsls	r3, r2
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052bc:	4935      	ldr	r1, [pc, #212]	@ (8005394 <HAL_GPIO_Init+0x304>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	3302      	adds	r3, #2
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ca:	4b3a      	ldr	r3, [pc, #232]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ee:	4a31      	ldr	r2, [pc, #196]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f4:	4b2f      	ldr	r3, [pc, #188]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005318:	4a26      	ldr	r2, [pc, #152]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800531e:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005342:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005348:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536c:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	f67f ae96 	bls.w	80050ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3724      	adds	r7, #36	@ 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800
 8005394:	40013800 	.word	0x40013800
 8005398:	40020000 	.word	0x40020000
 800539c:	40020400 	.word	0x40020400
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020c00 	.word	0x40020c00
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40021400 	.word	0x40021400
 80053b0:	40021800 	.word	0x40021800
 80053b4:	40013c00 	.word	0x40013c00

080053b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	807b      	strh	r3, [r7, #2]
 80053c4:	4613      	mov	r3, r2
 80053c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053c8:	787b      	ldrb	r3, [r7, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ce:	887a      	ldrh	r2, [r7, #2]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053d4:	e003      	b.n	80053de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	041a      	lsls	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0cc      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005400:	4b68      	ldr	r3, [pc, #416]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d90c      	bls.n	8005428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b65      	ldr	r3, [pc, #404]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b63      	ldr	r3, [pc, #396]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0b8      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005440:	4b59      	ldr	r3, [pc, #356]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4a58      	ldr	r2, [pc, #352]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800544a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005458:	4b53      	ldr	r3, [pc, #332]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4a52      	ldr	r2, [pc, #328]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005464:	4b50      	ldr	r3, [pc, #320]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	494d      	ldr	r1, [pc, #308]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d044      	beq.n	800550c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	4b47      	ldr	r3, [pc, #284]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d119      	bne.n	80054ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e07f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054aa:	4b3f      	ldr	r3, [pc, #252]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e06f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ba:	4b3b      	ldr	r3, [pc, #236]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e067      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ca:	4b37      	ldr	r3, [pc, #220]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f023 0203 	bic.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4934      	ldr	r1, [pc, #208]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054dc:	f7ff fc04 	bl	8004ce8 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e4:	f7ff fc00 	bl	8004ce8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e04f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	4b2b      	ldr	r3, [pc, #172]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 020c 	and.w	r2, r3, #12
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	429a      	cmp	r2, r3
 800550a:	d1eb      	bne.n	80054e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d20c      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551a:	4b22      	ldr	r3, [pc, #136]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b20      	ldr	r3, [pc, #128]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e032      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4916      	ldr	r1, [pc, #88]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555e:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	490e      	ldr	r1, [pc, #56]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005572:	f000 f855 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 8005576:	4602      	mov	r2, r0
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	490a      	ldr	r1, [pc, #40]	@ (80055ac <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	5ccb      	ldrb	r3, [r1, r3]
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fb64 	bl	8004c60 <HAL_InitTick>

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023c00 	.word	0x40023c00
 80055a8:	40023800 	.word	0x40023800
 80055ac:	08051f18 	.word	0x08051f18
 80055b0:	20016a78 	.word	0x20016a78
 80055b4:	20016a7c 	.word	0x20016a7c

080055b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055bc:	4b03      	ldr	r3, [pc, #12]	@ (80055cc <HAL_RCC_GetHCLKFreq+0x14>)
 80055be:	681b      	ldr	r3, [r3, #0]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20016a78 	.word	0x20016a78

080055d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055d4:	f7ff fff0 	bl	80055b8 <HAL_RCC_GetHCLKFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	0a9b      	lsrs	r3, r3, #10
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	4903      	ldr	r1, [pc, #12]	@ (80055f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40023800 	.word	0x40023800
 80055f4:	08051f28 	.word	0x08051f28

080055f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055fc:	f7ff ffdc 	bl	80055b8 <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	0b5b      	lsrs	r3, r3, #13
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4903      	ldr	r1, [pc, #12]	@ (800561c <HAL_RCC_GetPCLK2Freq+0x24>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	08051f28 	.word	0x08051f28

08005620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b0a6      	sub	sp, #152	@ 0x98
 8005626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005646:	4bc8      	ldr	r3, [pc, #800]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b0c      	cmp	r3, #12
 8005650:	f200 817e 	bhi.w	8005950 <HAL_RCC_GetSysClockFreq+0x330>
 8005654:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005691 	.word	0x08005691
 8005660:	08005951 	.word	0x08005951
 8005664:	08005951 	.word	0x08005951
 8005668:	08005951 	.word	0x08005951
 800566c:	08005699 	.word	0x08005699
 8005670:	08005951 	.word	0x08005951
 8005674:	08005951 	.word	0x08005951
 8005678:	08005951 	.word	0x08005951
 800567c:	080056a1 	.word	0x080056a1
 8005680:	08005951 	.word	0x08005951
 8005684:	08005951 	.word	0x08005951
 8005688:	08005951 	.word	0x08005951
 800568c:	0800580b 	.word	0x0800580b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005690:	4bb6      	ldr	r3, [pc, #728]	@ (800596c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8005696:	e15f      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005698:	4bb5      	ldr	r3, [pc, #724]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x350>)
 800569a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800569e:	e15b      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a0:	4bb1      	ldr	r3, [pc, #708]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ac:	4bae      	ldr	r3, [pc, #696]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d031      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b8:	4bab      	ldr	r3, [pc, #684]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	2200      	movs	r2, #0
 80056c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80056cc:	2300      	movs	r3, #0
 80056ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80056d0:	4ba7      	ldr	r3, [pc, #668]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x350>)
 80056d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80056d6:	462a      	mov	r2, r5
 80056d8:	fb03 f202 	mul.w	r2, r3, r2
 80056dc:	2300      	movs	r3, #0
 80056de:	4621      	mov	r1, r4
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	4aa2      	ldr	r2, [pc, #648]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x350>)
 80056e8:	4621      	mov	r1, r4
 80056ea:	fba1 1202 	umull	r1, r2, r1, r2
 80056ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056f0:	460a      	mov	r2, r1
 80056f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80056f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056f6:	4413      	add	r3, r2
 80056f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056fe:	2200      	movs	r2, #0
 8005700:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005702:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005704:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005708:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800570c:	f7fa ff88 	bl	8000620 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800571a:	e064      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571c:	4b92      	ldr	r3, [pc, #584]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	099b      	lsrs	r3, r3, #6
 8005722:	2200      	movs	r2, #0
 8005724:	653b      	str	r3, [r7, #80]	@ 0x50
 8005726:	657a      	str	r2, [r7, #84]	@ 0x54
 8005728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800572a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005730:	2300      	movs	r3, #0
 8005732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005734:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005738:	4622      	mov	r2, r4
 800573a:	462b      	mov	r3, r5
 800573c:	f04f 0000 	mov.w	r0, #0
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	0159      	lsls	r1, r3, #5
 8005746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800574a:	0150      	lsls	r0, r2, #5
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4621      	mov	r1, r4
 8005752:	1a51      	subs	r1, r2, r1
 8005754:	6139      	str	r1, [r7, #16]
 8005756:	4629      	mov	r1, r5
 8005758:	eb63 0301 	sbc.w	r3, r3, r1
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800576a:	4659      	mov	r1, fp
 800576c:	018b      	lsls	r3, r1, #6
 800576e:	4651      	mov	r1, sl
 8005770:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005774:	4651      	mov	r1, sl
 8005776:	018a      	lsls	r2, r1, #6
 8005778:	4651      	mov	r1, sl
 800577a:	ebb2 0801 	subs.w	r8, r2, r1
 800577e:	4659      	mov	r1, fp
 8005780:	eb63 0901 	sbc.w	r9, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005790:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005794:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005798:	4690      	mov	r8, r2
 800579a:	4699      	mov	r9, r3
 800579c:	4623      	mov	r3, r4
 800579e:	eb18 0303 	adds.w	r3, r8, r3
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	462b      	mov	r3, r5
 80057a6:	eb49 0303 	adc.w	r3, r9, r3
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057b8:	4629      	mov	r1, r5
 80057ba:	028b      	lsls	r3, r1, #10
 80057bc:	4621      	mov	r1, r4
 80057be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057c2:	4621      	mov	r1, r4
 80057c4:	028a      	lsls	r2, r1, #10
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ce:	2200      	movs	r2, #0
 80057d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80057d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057d8:	f7fa ff22 	bl	8000620 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057e6:	4b60      	ldr	r3, [pc, #384]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	0c1b      	lsrs	r3, r3, #16
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	3301      	adds	r3, #1
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80057f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005808:	e0a6      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800580a:	4b57      	ldr	r3, [pc, #348]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005816:	4b54      	ldr	r3, [pc, #336]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02a      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005822:	4b51      	ldr	r3, [pc, #324]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	2200      	movs	r2, #0
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005834:	2100      	movs	r1, #0
 8005836:	4b4e      	ldr	r3, [pc, #312]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x350>)
 8005838:	fb03 f201 	mul.w	r2, r3, r1
 800583c:	2300      	movs	r3, #0
 800583e:	fb00 f303 	mul.w	r3, r0, r3
 8005842:	4413      	add	r3, r2
 8005844:	4a4a      	ldr	r2, [pc, #296]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x350>)
 8005846:	fba0 1202 	umull	r1, r2, r0, r2
 800584a:	677a      	str	r2, [r7, #116]	@ 0x74
 800584c:	460a      	mov	r2, r1
 800584e:	673a      	str	r2, [r7, #112]	@ 0x70
 8005850:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005852:	4413      	add	r3, r2
 8005854:	677b      	str	r3, [r7, #116]	@ 0x74
 8005856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800585a:	2200      	movs	r2, #0
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
 800585e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005860:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005868:	f7fa feda 	bl	8000620 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4613      	mov	r3, r2
 8005872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005876:	e05b      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005878:	4b3b      	ldr	r3, [pc, #236]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	099b      	lsrs	r3, r3, #6
 800587e:	2200      	movs	r2, #0
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	2300      	movs	r3, #0
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	f04f 0000 	mov.w	r0, #0
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	0159      	lsls	r1, r3, #5
 80058a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058a6:	0150      	lsls	r0, r2, #5
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4641      	mov	r1, r8
 80058ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80058b2:	4649      	mov	r1, r9
 80058b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058cc:	ebb2 040a 	subs.w	r4, r2, sl
 80058d0:	eb63 050b 	sbc.w	r5, r3, fp
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	00eb      	lsls	r3, r5, #3
 80058de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058e2:	00e2      	lsls	r2, r4, #3
 80058e4:	4614      	mov	r4, r2
 80058e6:	461d      	mov	r5, r3
 80058e8:	4643      	mov	r3, r8
 80058ea:	18e3      	adds	r3, r4, r3
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	464b      	mov	r3, r9
 80058f0:	eb45 0303 	adc.w	r3, r5, r3
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005902:	4629      	mov	r1, r5
 8005904:	028b      	lsls	r3, r1, #10
 8005906:	4621      	mov	r1, r4
 8005908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800590c:	4621      	mov	r1, r4
 800590e:	028a      	lsls	r2, r1, #10
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005918:	2200      	movs	r2, #0
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	61fa      	str	r2, [r7, #28]
 800591e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005922:	f7fa fe7d 	bl	8000620 <__aeabi_uldivmod>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4613      	mov	r3, r2
 800592c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005930:	4b0d      	ldr	r3, [pc, #52]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x348>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	0f1b      	lsrs	r3, r3, #28
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800593e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005942:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800594e:	e003      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005950:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005958:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800595c:	4618      	mov	r0, r3
 800595e:	3798      	adds	r7, #152	@ 0x98
 8005960:	46bd      	mov	sp, r7
 8005962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005966:	bf00      	nop
 8005968:	40023800 	.word	0x40023800
 800596c:	00f42400 	.word	0x00f42400
 8005970:	017d7840 	.word	0x017d7840

08005974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e28d      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8083 	beq.w	8005a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005994:	4b94      	ldr	r3, [pc, #592]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b04      	cmp	r3, #4
 800599e:	d019      	beq.n	80059d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059a0:	4b91      	ldr	r3, [pc, #580]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059ac:	4b8e      	ldr	r3, [pc, #568]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059b8:	d00c      	beq.n	80059d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ba:	4b8b      	ldr	r3, [pc, #556]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d112      	bne.n	80059ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c6:	4b88      	ldr	r3, [pc, #544]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059d2:	d10b      	bne.n	80059ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	4b84      	ldr	r3, [pc, #528]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05b      	beq.n	8005a98 <HAL_RCC_OscConfig+0x124>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d157      	bne.n	8005a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e25a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f4:	d106      	bne.n	8005a04 <HAL_RCC_OscConfig+0x90>
 80059f6:	4b7c      	ldr	r3, [pc, #496]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7b      	ldr	r2, [pc, #492]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e01d      	b.n	8005a40 <HAL_RCC_OscConfig+0xcc>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCC_OscConfig+0xb4>
 8005a0e:	4b76      	ldr	r3, [pc, #472]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a75      	ldr	r2, [pc, #468]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	4b73      	ldr	r3, [pc, #460]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a72      	ldr	r2, [pc, #456]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e00b      	b.n	8005a40 <HAL_RCC_OscConfig+0xcc>
 8005a28:	4b6f      	ldr	r3, [pc, #444]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4b6c      	ldr	r3, [pc, #432]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a6b      	ldr	r2, [pc, #428]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d013      	beq.n	8005a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7ff f94e 	bl	8004ce8 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a50:	f7ff f94a 	bl	8004ce8 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	@ 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e21f      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	4b61      	ldr	r3, [pc, #388]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <HAL_RCC_OscConfig+0xdc>
 8005a6e:	e014      	b.n	8005a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7ff f93a 	bl	8004ce8 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a78:	f7ff f936 	bl	8004ce8 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	@ 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e20b      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8a:	4b57      	ldr	r3, [pc, #348]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x104>
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d06f      	beq.n	8005b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005aa6:	4b50      	ldr	r3, [pc, #320]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d017      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d105      	bne.n	8005aca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005abe:	4b4a      	ldr	r3, [pc, #296]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aca:	4b47      	ldr	r3, [pc, #284]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d11c      	bne.n	8005b10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ad6:	4b44      	ldr	r3, [pc, #272]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d116      	bne.n	8005b10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ae2:	4b41      	ldr	r3, [pc, #260]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_RCC_OscConfig+0x186>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d001      	beq.n	8005afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e1d3      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afa:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4937      	ldr	r1, [pc, #220]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0e:	e03a      	b.n	8005b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b18:	4b34      	ldr	r3, [pc, #208]	@ (8005bec <HAL_RCC_OscConfig+0x278>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1e:	f7ff f8e3 	bl	8004ce8 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b26:	f7ff f8df 	bl	8004ce8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e1b4      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b38:	4b2b      	ldr	r3, [pc, #172]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b44:	4b28      	ldr	r3, [pc, #160]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4925      	ldr	r1, [pc, #148]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
 8005b58:	e015      	b.n	8005b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <HAL_RCC_OscConfig+0x278>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7ff f8c2 	bl	8004ce8 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b68:	f7ff f8be 	bl	8004ce8 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e193      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d036      	beq.n	8005c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d016      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7ff f8a2 	bl	8004ce8 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba8:	f7ff f89e 	bl	8004ce8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e173      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bba:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x234>
 8005bc6:	e01b      	b.n	8005c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc8:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <HAL_RCC_OscConfig+0x27c>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7ff f88b 	bl	8004ce8 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd4:	e00e      	b.n	8005bf4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7ff f887 	bl	8004ce8 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d907      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e15c      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
 8005be8:	40023800 	.word	0x40023800
 8005bec:	42470000 	.word	0x42470000
 8005bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1ea      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8097 	beq.w	8005d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c12:	4b83      	ldr	r3, [pc, #524]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	4b7f      	ldr	r3, [pc, #508]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	4a7e      	ldr	r2, [pc, #504]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c36:	60bb      	str	r3, [r7, #8]
 8005c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	4b79      	ldr	r3, [pc, #484]	@ (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d118      	bne.n	8005c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c4a:	4b76      	ldr	r3, [pc, #472]	@ (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a75      	ldr	r2, [pc, #468]	@ (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c56:	f7ff f847 	bl	8004ce8 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5e:	f7ff f843 	bl	8004ce8 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e118      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	4b6c      	ldr	r3, [pc, #432]	@ (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d106      	bne.n	8005c92 <HAL_RCC_OscConfig+0x31e>
 8005c84:	4b66      	ldr	r3, [pc, #408]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c88:	4a65      	ldr	r2, [pc, #404]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c90:	e01c      	b.n	8005ccc <HAL_RCC_OscConfig+0x358>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x340>
 8005c9a:	4b61      	ldr	r3, [pc, #388]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9e:	4a60      	ldr	r2, [pc, #384]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	4a5d      	ldr	r2, [pc, #372]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb2:	e00b      	b.n	8005ccc <HAL_RCC_OscConfig+0x358>
 8005cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb8:	4a59      	ldr	r2, [pc, #356]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc0:	4b57      	ldr	r3, [pc, #348]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc4:	4a56      	ldr	r2, [pc, #344]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cc6:	f023 0304 	bic.w	r3, r3, #4
 8005cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d015      	beq.n	8005d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd4:	f7ff f808 	bl	8004ce8 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cdc:	f7ff f804 	bl	8004ce8 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e0d7      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0ee      	beq.n	8005cdc <HAL_RCC_OscConfig+0x368>
 8005cfe:	e014      	b.n	8005d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7fe fff2 	bl	8004ce8 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d08:	f7fe ffee 	bl	8004ce8 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0c1      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1e:	4b40      	ldr	r3, [pc, #256]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1ee      	bne.n	8005d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d30:	4b3b      	ldr	r3, [pc, #236]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	4a3a      	ldr	r2, [pc, #232]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80ad 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d46:	4b36      	ldr	r3, [pc, #216]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d060      	beq.n	8005e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d145      	bne.n	8005de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5a:	4b33      	ldr	r3, [pc, #204]	@ (8005e28 <HAL_RCC_OscConfig+0x4b4>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fe ffc2 	bl	8004ce8 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fe ffbe 	bl	8004ce8 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e093      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7a:	4b29      	ldr	r3, [pc, #164]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	061b      	lsls	r3, r3, #24
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	071b      	lsls	r3, r3, #28
 8005db2:	491b      	ldr	r1, [pc, #108]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005db8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e28 <HAL_RCC_OscConfig+0x4b4>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fe ff93 	bl	8004ce8 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc6:	f7fe ff8f 	bl	8004ce8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e064      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd8:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x452>
 8005de4:	e05c      	b.n	8005ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de6:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <HAL_RCC_OscConfig+0x4b4>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fe ff7c 	bl	8004ce8 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df4:	f7fe ff78 	bl	8004ce8 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e04d      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x480>
 8005e12:	e045      	b.n	8005ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d107      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e040      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
 8005e20:	40023800 	.word	0x40023800
 8005e24:	40007000 	.word	0x40007000
 8005e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005eac <HAL_RCC_OscConfig+0x538>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d030      	beq.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d129      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d122      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d119      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	3b01      	subs	r3, #1
 8005e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d10f      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800

08005eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e07b      	b.n	8005fba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d108      	bne.n	8005edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
 8005eda:	e005      	b.n	8005ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fe fd14 	bl	8004930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6c:	ea42 0103 	orr.w	r1, r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	f003 0104 	and.w	r1, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	f003 0210 	and.w	r2, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e042      	b.n	800605a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fe fce9 	bl	80049c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2224      	movs	r2, #36	@ 0x24
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006004:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fcda 	bl	80069c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800601a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800602a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800603a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	4613      	mov	r3, r2
 800606e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b20      	cmp	r3, #32
 800607a:	d112      	bne.n	80060a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_UART_Receive_IT+0x26>
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e00b      	b.n	80060a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	461a      	mov	r2, r3
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fab9 	bl	8006610 <UART_Start_Receive_IT>
 800609e:	4603      	mov	r3, r0
 80060a0:	e000      	b.n	80060a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b0ba      	sub	sp, #232	@ 0xe8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80060ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10f      	bne.n	8006112 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <HAL_UART_IRQHandler+0x66>
 80060fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb99 	bl	8006842 <UART_Receive_IT>
      return;
 8006110:	e25b      	b.n	80065ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 80de 	beq.w	80062d8 <HAL_UART_IRQHandler+0x22c>
 800611c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80d1 	beq.w	80062d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_UART_IRQHandler+0xae>
 8006142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006152:	f043 0201 	orr.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <HAL_UART_IRQHandler+0xd2>
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006176:	f043 0202 	orr.w	r2, r3, #2
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_UART_IRQHandler+0xf6>
 800618a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619a:	f043 0204 	orr.w	r2, r3, #4
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d011      	beq.n	80061d2 <HAL_UART_IRQHandler+0x126>
 80061ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	f043 0208 	orr.w	r2, r3, #8
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 81f2 	beq.w	80065c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_UART_IRQHandler+0x14e>
 80061e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb24 	bl	8006842 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006204:	2b40      	cmp	r3, #64	@ 0x40
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <HAL_UART_IRQHandler+0x17a>
 800621e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d04f      	beq.n	80062c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa2c 	bl	8006684 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d141      	bne.n	80062be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006266:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800626a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800627e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d9      	bne.n	800623a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d013      	beq.n	80062b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	4a7e      	ldr	r2, [pc, #504]	@ (800648c <HAL_UART_IRQHandler+0x3e0>)
 8006294:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fed5 	bl	800504a <HAL_DMA_Abort_IT>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	e00e      	b.n	80062d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f994 	bl	80065e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	e00a      	b.n	80062d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f990 	bl	80065e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c4:	e006      	b.n	80062d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f98c 	bl	80065e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062d2:	e175      	b.n	80065c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d4:	bf00      	nop
    return;
 80062d6:	e173      	b.n	80065c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f040 814f 	bne.w	8006580 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8148 	beq.w	8006580 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8141 	beq.w	8006580 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631e:	2b40      	cmp	r3, #64	@ 0x40
 8006320:	f040 80b6 	bne.w	8006490 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006330:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8145 	beq.w	80065c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800633e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006342:	429a      	cmp	r2, r3
 8006344:	f080 813e 	bcs.w	80065c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800634e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800635a:	f000 8088 	beq.w	800646e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800637c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800638a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800638e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006396:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1d9      	bne.n	800635e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3314      	adds	r3, #20
 80063ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e1      	bne.n	80063aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3314      	adds	r3, #20
 80063ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3314      	adds	r3, #20
 8006406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800640a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800640c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006410:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e3      	bne.n	80063e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800643c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006450:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006452:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006456:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800645e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e3      	bne.n	800642c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe fd7e 	bl	8004f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800647c:	b29b      	uxth	r3, r3
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	b29b      	uxth	r3, r3
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f8b7 	bl	80065f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800648a:	e09b      	b.n	80065c4 <HAL_UART_IRQHandler+0x518>
 800648c:	0800674b 	.word	0x0800674b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006498:	b29b      	uxth	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 808e 	beq.w	80065c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8089 	beq.w	80065c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80064da:	647a      	str	r2, [r7, #68]	@ 0x44
 80064dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006512:	633a      	str	r2, [r7, #48]	@ 0x30
 8006514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60fb      	str	r3, [r7, #12]
   return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	617b      	str	r3, [r7, #20]
   return(result);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f83d 	bl	80065f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800657e:	e023      	b.n	80065c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <HAL_UART_IRQHandler+0x4f4>
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f8ea 	bl	8006772 <UART_Transmit_IT>
    return;
 800659e:	e014      	b.n	80065ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <HAL_UART_IRQHandler+0x51e>
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f92a 	bl	8006812 <UART_EndTransmit_IT>
    return;
 80065be:	e004      	b.n	80065ca <HAL_UART_IRQHandler+0x51e>
    return;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <HAL_UART_IRQHandler+0x51e>
      return;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <HAL_UART_IRQHandler+0x51e>
      return;
 80065c8:	bf00      	nop
  }
}
 80065ca:	37e8      	adds	r7, #232	@ 0xe8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2222      	movs	r2, #34	@ 0x22
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d007      	beq.n	8006656 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006654:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0220 	orr.w	r2, r2, #32
 8006674:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b095      	sub	sp, #84	@ 0x54
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d119      	bne.n	8006730 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60bb      	str	r3, [r7, #8]
   return(result);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f023 0310 	bic.w	r3, r3, #16
 8006712:	647b      	str	r3, [r7, #68]	@ 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800671c:	61ba      	str	r2, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	613b      	str	r3, [r7, #16]
   return(result);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800673e:	bf00      	nop
 8006740:	3754      	adds	r7, #84	@ 0x54
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006756:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff ff3d 	bl	80065e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b21      	cmp	r3, #33	@ 0x21
 8006784:	d13e      	bne.n	8006804 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800678e:	d114      	bne.n	80067ba <UART_Transmit_IT+0x48>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d110      	bne.n	80067ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	1c9a      	adds	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	621a      	str	r2, [r3, #32]
 80067b8:	e008      	b.n	80067cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6211      	str	r1, [r2, #32]
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4619      	mov	r1, r3
 80067da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10f      	bne.n	8006800 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	e000      	b.n	8006806 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006804:	2302      	movs	r3, #2
  }
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006828:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fecc 	bl	80065d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08c      	sub	sp, #48	@ 0x30
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b22      	cmp	r3, #34	@ 0x22
 8006854:	f040 80ae 	bne.w	80069b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006860:	d117      	bne.n	8006892 <UART_Receive_IT+0x50>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d113      	bne.n	8006892 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006880:	b29a      	uxth	r2, r3
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006890:	e026      	b.n	80068e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a4:	d007      	beq.n	80068b6 <UART_Receive_IT+0x74>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <UART_Receive_IT+0x82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e008      	b.n	80068d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d15d      	bne.n	80069b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0220 	bic.w	r2, r2, #32
 8006902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006936:	2b01      	cmp	r3, #1
 8006938:	d135      	bne.n	80069a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	613b      	str	r3, [r7, #16]
   return(result);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006960:	623a      	str	r2, [r7, #32]
 8006962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	69f9      	ldr	r1, [r7, #28]
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	61bb      	str	r3, [r7, #24]
   return(result);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b10      	cmp	r3, #16
 8006980:	d10a      	bne.n	8006998 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff fe2a 	bl	80065f8 <HAL_UARTEx_RxEventCallback>
 80069a4:	e002      	b.n	80069ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fd fae8 	bl	8003f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	e002      	b.n	80069b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e000      	b.n	80069b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
  }
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3730      	adds	r7, #48	@ 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b0c0      	sub	sp, #256	@ 0x100
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	68d9      	ldr	r1, [r3, #12]
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	ea40 0301 	orr.w	r3, r0, r1
 80069e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a18:	f021 010c 	bic.w	r1, r1, #12
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a26:	430b      	orrs	r3, r1
 8006a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3a:	6999      	ldr	r1, [r3, #24]
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	ea40 0301 	orr.w	r3, r0, r1
 8006a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d005      	beq.n	8006a60 <UART_SetConfig+0xa0>
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c90 <UART_SetConfig+0x2d0>)
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d104      	bne.n	8006a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fe fdca 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 8006a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a68:	e003      	b.n	8006a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fe fdb1 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a7c:	f040 810c 	bne.w	8006c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a92:	4622      	mov	r2, r4
 8006a94:	462b      	mov	r3, r5
 8006a96:	1891      	adds	r1, r2, r2
 8006a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a9a:	415b      	adcs	r3, r3
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	eb12 0801 	adds.w	r8, r2, r1
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	eb43 0901 	adc.w	r9, r3, r1
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ac2:	4690      	mov	r8, r2
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	eb18 0303 	adds.w	r3, r8, r3
 8006acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	eb49 0303 	adc.w	r3, r9, r3
 8006ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006aee:	460b      	mov	r3, r1
 8006af0:	18db      	adds	r3, r3, r3
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af4:	4613      	mov	r3, r2
 8006af6:	eb42 0303 	adc.w	r3, r2, r3
 8006afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b04:	f7f9 fd8c 	bl	8000620 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b61      	ldr	r3, [pc, #388]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b30:	415b      	adcs	r3, r3
 8006b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b38:	4641      	mov	r1, r8
 8006b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b3e:	4649      	mov	r1, r9
 8006b40:	eb43 0b01 	adc.w	fp, r3, r1
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b58:	4692      	mov	sl, r2
 8006b5a:	469b      	mov	fp, r3
 8006b5c:	4643      	mov	r3, r8
 8006b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b66:	464b      	mov	r3, r9
 8006b68:	eb4b 0303 	adc.w	r3, fp, r3
 8006b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b84:	460b      	mov	r3, r1
 8006b86:	18db      	adds	r3, r3, r3
 8006b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b9a:	f7f9 fd41 	bl	8000620 <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	2264      	movs	r2, #100	@ 0x64
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	1acb      	subs	r3, r1, r3
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bba:	4b36      	ldr	r3, [pc, #216]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bc8:	441c      	add	r4, r3
 8006bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006be4:	415b      	adcs	r3, r3
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bec:	4641      	mov	r1, r8
 8006bee:	1851      	adds	r1, r2, r1
 8006bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c04:	4659      	mov	r1, fp
 8006c06:	00cb      	lsls	r3, r1, #3
 8006c08:	4651      	mov	r1, sl
 8006c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0e:	4651      	mov	r1, sl
 8006c10:	00ca      	lsls	r2, r1, #3
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	4642      	mov	r2, r8
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c20:	464b      	mov	r3, r9
 8006c22:	460a      	mov	r2, r1
 8006c24:	eb42 0303 	adc.w	r3, r2, r3
 8006c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c40:	460b      	mov	r3, r1
 8006c42:	18db      	adds	r3, r3, r3
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c46:	4613      	mov	r3, r2
 8006c48:	eb42 0303 	adc.w	r3, r2, r3
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c56:	f7f9 fce3 	bl	8000620 <__aeabi_uldivmod>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006c60:	fba3 1302 	umull	r1, r3, r3, r2
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	2164      	movs	r1, #100	@ 0x64
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	3332      	adds	r3, #50	@ 0x32
 8006c72:	4a08      	ldr	r2, [pc, #32]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	f003 0207 	and.w	r2, r3, #7
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4422      	add	r2, r4
 8006c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c88:	e106      	b.n	8006e98 <UART_SetConfig+0x4d8>
 8006c8a:	bf00      	nop
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	40011400 	.word	0x40011400
 8006c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	1891      	adds	r1, r2, r2
 8006cb0:	6239      	str	r1, [r7, #32]
 8006cb2:	415b      	adcs	r3, r3
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cba:	4641      	mov	r1, r8
 8006cbc:	1854      	adds	r4, r2, r1
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	eb43 0501 	adc.w	r5, r3, r1
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	00eb      	lsls	r3, r5, #3
 8006cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd2:	00e2      	lsls	r2, r4, #3
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	4643      	mov	r3, r8
 8006cda:	18e3      	adds	r3, r4, r3
 8006cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	eb45 0303 	adc.w	r3, r5, r3
 8006ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d06:	4629      	mov	r1, r5
 8006d08:	008b      	lsls	r3, r1, #2
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d10:	4621      	mov	r1, r4
 8006d12:	008a      	lsls	r2, r1, #2
 8006d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d18:	f7f9 fc82 	bl	8000620 <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4b60      	ldr	r3, [pc, #384]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006d22:	fba3 2302 	umull	r2, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	011c      	lsls	r4, r3, #4
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	61b9      	str	r1, [r7, #24]
 8006d44:	415b      	adcs	r3, r3
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6139      	str	r1, [r7, #16]
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d80:	464b      	mov	r3, r9
 8006d82:	460a      	mov	r2, r1
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006da4:	4649      	mov	r1, r9
 8006da6:	008b      	lsls	r3, r1, #2
 8006da8:	4641      	mov	r1, r8
 8006daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dae:	4641      	mov	r1, r8
 8006db0:	008a      	lsls	r2, r1, #2
 8006db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006db6:	f7f9 fc33 	bl	8000620 <__aeabi_uldivmod>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4b38      	ldr	r3, [pc, #224]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2264      	movs	r2, #100	@ 0x64
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	1acb      	subs	r3, r1, r3
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	3332      	adds	r3, #50	@ 0x32
 8006dd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006de0:	441c      	add	r4, r3
 8006de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de6:	2200      	movs	r2, #0
 8006de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	1891      	adds	r1, r2, r2
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	415b      	adcs	r3, r3
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e00:	4641      	mov	r1, r8
 8006e02:	1851      	adds	r1, r2, r1
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	4649      	mov	r1, r9
 8006e08:	414b      	adcs	r3, r1
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	00cb      	lsls	r3, r1, #3
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e22:	4651      	mov	r1, sl
 8006e24:	00ca      	lsls	r2, r1, #3
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e32:	464b      	mov	r3, r9
 8006e34:	460a      	mov	r2, r1
 8006e36:	eb42 0303 	adc.w	r3, r2, r3
 8006e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e54:	4649      	mov	r1, r9
 8006e56:	008b      	lsls	r3, r1, #2
 8006e58:	4641      	mov	r1, r8
 8006e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5e:	4641      	mov	r1, r8
 8006e60:	008a      	lsls	r2, r1, #2
 8006e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e66:	f7f9 fbdb 	bl	8000620 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	@ 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	3332      	adds	r3, #50	@ 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4422      	add	r2, r4
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea4:	51eb851f 	.word	0x51eb851f

08006ea8 <memset>:
 8006ea8:	4402      	add	r2, r0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d100      	bne.n	8006eb2 <memset+0xa>
 8006eb0:	4770      	bx	lr
 8006eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb6:	e7f9      	b.n	8006eac <memset+0x4>

08006eb8 <__libc_init_array>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4d0d      	ldr	r5, [pc, #52]	@ (8006ef0 <__libc_init_array+0x38>)
 8006ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef4 <__libc_init_array+0x3c>)
 8006ebe:	1b64      	subs	r4, r4, r5
 8006ec0:	10a4      	asrs	r4, r4, #2
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	42a6      	cmp	r6, r4
 8006ec6:	d109      	bne.n	8006edc <__libc_init_array+0x24>
 8006ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ef8 <__libc_init_array+0x40>)
 8006eca:	4c0c      	ldr	r4, [pc, #48]	@ (8006efc <__libc_init_array+0x44>)
 8006ecc:	f000 f818 	bl	8006f00 <_init>
 8006ed0:	1b64      	subs	r4, r4, r5
 8006ed2:	10a4      	asrs	r4, r4, #2
 8006ed4:	2600      	movs	r6, #0
 8006ed6:	42a6      	cmp	r6, r4
 8006ed8:	d105      	bne.n	8006ee6 <__libc_init_array+0x2e>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee0:	4798      	blx	r3
 8006ee2:	3601      	adds	r6, #1
 8006ee4:	e7ee      	b.n	8006ec4 <__libc_init_array+0xc>
 8006ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eea:	4798      	blx	r3
 8006eec:	3601      	adds	r6, #1
 8006eee:	e7f2      	b.n	8006ed6 <__libc_init_array+0x1e>
 8006ef0:	08051f38 	.word	0x08051f38
 8006ef4:	08051f38 	.word	0x08051f38
 8006ef8:	08051f38 	.word	0x08051f38
 8006efc:	08051f3c 	.word	0x08051f3c

08006f00 <_init>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr

08006f0c <_fini>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	bf00      	nop
 8006f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f12:	bc08      	pop	{r3}
 8006f14:	469e      	mov	lr, r3
 8006f16:	4770      	bx	lr
