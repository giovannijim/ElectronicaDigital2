
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006218  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025818  080063e0  080063e0  000073e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bbf8  0802bbf8  000423a0  2**0
                  CONTENTS
  4 .ARM          00000008  0802bbf8  0802bbf8  0002cbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bc00  0802bc00  000423a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bc00  0802bc00  0002cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802bc04  0802bc04  0002cc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000153a0  20000000  0802bc08  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200153a0  08040fa8  000423a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001571c  08040fa8  0004271c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000423a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfa7  00000000  00000000  000423d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0004e377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00050188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021074  00000000  00000000  00050be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e5a4  00000000  00000000  00071c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cc1c7  00000000  00000000  000801f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0014c3bf  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000874  00000000  00000000  0014c402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002adc  00000000  00000000  0014cc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0014f754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200153a0 	.word	0x200153a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080063c8 	.word	0x080063c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200153a4 	.word	0x200153a4
 8000204:	080063c8 	.word	0x080063c8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f003 ffb1 	bl	8004880 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f003 ffac 	bl	8004880 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f003 ffa7 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f003 fc48 	bl	80041c8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f003 ff9f 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000942:	2014      	movs	r0, #20
 8000944:	f003 fc40 	bl	80041c8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f003 ff97 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f003 fc38 	bl	80041c8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f003 ff8f 	bl	8004880 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x20);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f003 fc27 	bl	80041c8 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x71);
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x19);
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x07);
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x10);
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x01);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x44);
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x67);
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x06);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x24);
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x37);
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x40);
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x03);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x80);
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x3F);
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0xE0);
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f003 fb76 	bl	80041c8 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f003 fb70 	bl	80041c8 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f003 fec4 	bl	8004880 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f003 feb2 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f003 fead 	bl	8004880 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f003 fea2 	bl	8004880 <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f003 fe9b 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f003 fe91 	bl	8004880 <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f003 fe8b 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f003 fe80 	bl	8004880 <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f003 fe79 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f003 fe6f 	bl	8004880 <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f003 fe69 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f003 fe5f 	bl	8004880 <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f003 fe59 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f003 fe4f 	bl	8004880 <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f003 fe49 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f003 fe3e 	bl	8004880 <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f003 fe37 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f003 fe2d 	bl	8004880 <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f003 fe26 	bl	8004880 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f003 fe21 	bl	8004880 <HAL_GPIO_WritePin>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f003 fe0c 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f003 fe07 	bl	8004880 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f003 fdfc 	bl	8004880 <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f003 fdf5 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f003 fdeb 	bl	8004880 <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f003 fde5 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f003 fdda 	bl	8004880 <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f003 fdd3 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f003 fdc9 	bl	8004880 <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f003 fdc3 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f003 fdb9 	bl	8004880 <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f003 fdb3 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f003 fda9 	bl	8004880 <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f003 fda3 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f003 fd98 	bl	8004880 <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f003 fd91 	bl	8004880 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f003 fd87 	bl	8004880 <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f003 fd80 	bl	8004880 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f003 fd7b 	bl	8004880 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y1);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f003 fd24 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f003 fd1f 	bl	8004880 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f003 fcf5 	bl	8004880 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <H_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <H_line+0x78>)
 8000ec2:	f003 fcdd 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4816      	ldr	r0, [pc, #88]	@ (8000f24 <H_line+0x7c>)
 8000ecc:	f003 fcd8 	bl	8004880 <HAL_GPIO_WritePin>
	l = l + x;
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ff5e 	bl	8000da0 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00d      	b.n	8000f06 <H_line+0x5e>
		LCD_DATA(c >> 8);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feaf 	bl	8000c54 <LCD_DATA>
		LCD_DATA(c);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feaa 	bl	8000c54 <LCD_DATA>
	for (i = 0; i < l; i++) {
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3ed      	bcc.n	8000eea <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2101      	movs	r1, #1
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <H_line+0x7c>)
 8000f14:	f003 fcb4 	bl	8004880 <HAL_GPIO_WritePin>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400

08000f28 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000f36:	202c      	movs	r0, #44	@ 0x2c
 8000f38:	f7ff fde6 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <V_line+0x78>)
 8000f42:	f003 fc9d 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <V_line+0x7c>)
 8000f4c:	f003 fc98 	bl	8004880 <HAL_GPIO_WritePin>
	l = l + y;
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ff1e 	bl	8000da0 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00d      	b.n	8000f86 <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe6f 	bl	8000c54 <LCD_DATA>
		LCD_DATA(c);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe6a 	bl	8000c54 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d9ed      	bls.n	8000f6a <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <V_line+0x7c>)
 8000f94:	f003 fc74 	bl	8004880 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Rect>:
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	H_line(x, y, w, c);
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff73 	bl	8000ea8 <H_line>
	H_line(x, y + h, w, c);
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	18d1      	adds	r1, r2, r3
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ff6b 	bl	8000ea8 <H_line>
	V_line(x, y, h, c);
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ffa5 	bl	8000f28 <V_line>
	V_line(x + w, y, h, c);
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f7ff ff9d 	bl	8000f28 <V_line>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001006:	202c      	movs	r0, #44	@ 0x2c
 8001008:	f7ff fd7e 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4824      	ldr	r0, [pc, #144]	@ (80010a4 <FillRect+0xac>)
 8001012:	f003 fc35 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <FillRect+0xb0>)
 800101c:	f003 fc30 	bl	8004880 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3b01      	subs	r3, #1
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff feb0 	bl	8000da0 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	e01a      	b.n	800108a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e010      	b.n	800107c <FillRect+0x84>
			LCD_DATA(c >> 8);
 800105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fdf7 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8001066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fdf2 	bl	8000c54 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	3b02      	subs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3301      	adds	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8ea      	bhi.n	800105a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	3301      	adds	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8e0      	bhi.n	8001054 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2101      	movs	r1, #1
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <FillRect+0xb0>)
 8001098:	f003 fbf2 	bl	8004880 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80010ba:	202c      	movs	r0, #44	@ 0x2c
 80010bc:	f7ff fd24 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	4824      	ldr	r0, [pc, #144]	@ (8001158 <LCD_Bitmap+0xac>)
 80010c6:	f003 fbdb 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2101      	movs	r1, #1
 80010ce:	4823      	ldr	r0, [pc, #140]	@ (800115c <LCD_Bitmap+0xb0>)
 80010d0:	f003 fbd6 	bl	8004880 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fe56 	bl	8000da0 <SetWindows>
	unsigned int k = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	e01e      	b.n	800113c <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e014      	b.n	800112e <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fda1 	bl	8000c54 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd99 	bl	8000c54 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	3302      	adds	r3, #2
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d8e6      	bhi.n	8001104 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	3301      	adds	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8dc      	bhi.n	80010fe <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <LCD_Bitmap+0xb0>)
 800114a:	f003 fb99 	bl	8004880 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400

08001160 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 800116e:	202c      	movs	r0, #44	@ 0x2c
 8001170:	f7ff fcca 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <LCD_Sprite+0x150>)
 800117a:	f003 fb81 	bl	8004880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	484c      	ldr	r0, [pc, #304]	@ (80012b4 <LCD_Sprite+0x154>)
 8001184:	f003 fb7c 	bl	8004880 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1e5a      	subs	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f7ff fdfc 	bl	8000da0 <SetWindows>
	int k = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	613b      	str	r3, [r7, #16]
	if (flip) {
 80011b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d03a      	beq.n	8001234 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c2:	e032      	b.n	800122a <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 80011c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	fb03 f202 	mul.w	r2, r3, r2
 80011cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	fb01 f303 	mul.w	r3, r1, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e8:	4413      	add	r3, r2
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f0:	e014      	b.n	800121c <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd2a 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd22 	bl	8000c54 <LCD_DATA>
				k = k - 2;
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	3b02      	subs	r3, #2
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbe6      	blt.n	80011f2 <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001226:	3301      	adds	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800122a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbc8      	blt.n	80011c4 <LCD_Sprite+0x64>
 8001232:	e034      	b.n	800129e <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	e02d      	b.n	8001296 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	e014      	b.n	8001288 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001262:	4413      	add	r3, r2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fcf4 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 800126c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126e:	3301      	adds	r3, #1
 8001270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcec 	bl	8000c54 <LCD_DATA>
				k = k + 2;
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	3302      	adds	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbe6      	blt.n	800125e <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	3301      	adds	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbcd      	blt.n	800123a <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <LCD_Sprite+0x154>)
 80012a4:	f003 faec 	bl	8004880 <HAL_GPIO_WritePin>
}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400

080012b8 <animation_e1_control>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d131      	bne.n	800134c <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	dd1b      	ble.n	8001326 <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	dc13      	bgt.n	800131c <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8e9 	bl	80004d0 <__aeabi_f2d>
 80012fe:	a316      	add	r3, pc, #88	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7fe ff86 	bl	8000214 <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff f936 	bl	8000580 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 800131a:	e017      	b.n	800134c <animation_e1_control+0x94>
				enemy->animationV=0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001324:	e012      	b.n	800134c <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_f2d>
 8001330:	a309      	add	r3, pc, #36	@ (adr r3, 8001358 <animation_e1_control+0xa0>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7fe ff6d 	bl	8000214 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fb99999 	.word	0x3fb99999

08001360 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	@ 0x2c
 8001364:	af06      	add	r7, sp, #24
 8001366:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 80a6 	bne.w	80014de <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b04      	cmp	r3, #4
 8001396:	f340 80a2 	ble.w	80014de <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3b06      	subs	r3, #6
 80013a0:	4618      	mov	r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3b09      	subs	r3, #9
 80013a8:	4619      	mov	r1, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	9304      	str	r3, [sp, #16]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9303      	str	r3, [sp, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2310      	movs	r3, #16
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <animation_e1+0x188>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2313      	movs	r3, #19
 80013c0:	2210      	movs	r2, #16
 80013c2:	f7ff fecd 	bl	8001160 <LCD_Sprite>
		    if (DrawHitbox==1){
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <animation_e1+0x18c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d113      	bne.n	80013f6 <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	1ad0      	subs	r0, r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2400      	movs	r4, #0
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	f7ff fdd9 	bl	8000fa8 <Rect>
		    }
		    if (DrawHitbox==2){
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <animation_e1+0x18c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d12b      	bne.n	8001456 <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6998      	ldr	r0, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6859      	ldr	r1, [r3, #4]
 8001406:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2201      	movs	r2, #1
 8001410:	f7ff fdf2 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	f7ff fde7 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a19      	ldr	r1, [r3, #32]
 8001432:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2201      	movs	r2, #1
 800143c:	f7ff fddc 	bl	8000ff8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001448:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	2201      	movs	r2, #1
 8001452:	f7ff fdd1 	bl	8000ff8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <animation_e1+0x18c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d13f      	bne.n	80014de <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	1ad0      	subs	r0, r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	1ad1      	subs	r1, r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2400      	movs	r4, #0
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	f7ff fd91 	bl	8000fa8 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6998      	ldr	r0, [r3, #24]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	2201      	movs	r2, #1
 8001498:	f7ff fdae 	bl	8000ff8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69d8      	ldr	r0, [r3, #28]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2201      	movs	r2, #1
 80014ae:	f7ff fda3 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a19      	ldr	r1, [r3, #32]
 80014ba:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	2201      	movs	r2, #1
 80014c4:	f7ff fd98 	bl	8000ff8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80014d0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f7ff fd8d 	bl	8000ff8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000a1a8 	.word	0x2000a1a8
 80014ec:	20015717 	.word	0x20015717

080014f0 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af06      	add	r7, sp, #24
 80014f6:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001502:	ee17 3a90 	vmov	r3, s15
 8001506:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d134      	bne.n	800157a <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	dc29      	bgt.n	800156a <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3b06      	subs	r3, #6
 800151c:	4618      	mov	r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	3b0c      	subs	r3, #12
 8001524:	4619      	mov	r1, r3
 8001526:	2300      	movs	r3, #0
 8001528:	9304      	str	r3, [sp, #16]
 800152a:	2300      	movs	r3, #0
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	230b      	movs	r3, #11
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <animation_e1_die+0xa0>)
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2319      	movs	r3, #25
 800153c:	220e      	movs	r2, #14
 800153e:	f7ff fe0f 	bl	8001160 <LCD_Sprite>
				enemy->animationDie+=0.2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffc2 	bl	80004d0 <__aeabi_f2d>
 800154c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001588 <animation_e1_die+0x98>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fe5f 	bl	8000214 <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f80f 	bl	8000580 <__aeabi_d2f>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 8001568:	e007      	b.n	800157a <animation_e1_die+0x8a>
					enemy->x=5000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001578:	605a      	str	r2, [r3, #4]
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	9999999a 	.word	0x9999999a
 800158c:	3fc99999 	.word	0x3fc99999
 8001590:	2000c7a8 	.word	0x2000c7a8

08001594 <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08b      	sub	sp, #44	@ 0x2c
 8001598:	af06      	add	r7, sp, #24
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <initEnemy1+0x1d4>)
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a65      	ldr	r2, [pc, #404]	@ (800176c <initEnemy1+0x1d8>)
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	441a      	add	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	441a      	add	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3b08      	subs	r3, #8
 8001620:	4618      	mov	r0, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	3b09      	subs	r3, #9
 8001628:	4619      	mov	r1, r3
 800162a:	2300      	movs	r3, #0
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	2300      	movs	r3, #0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2310      	movs	r3, #16
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b4d      	ldr	r3, [pc, #308]	@ (8001770 <initEnemy1+0x1dc>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2313      	movs	r3, #19
 8001640:	2210      	movs	r2, #16
 8001642:	f7ff fd8d 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001646:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <initEnemy1+0x1e0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d113      	bne.n	8001676 <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	1ad0      	subs	r0, r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2400      	movs	r4, #0
 8001670:	9400      	str	r4, [sp, #0]
 8001672:	f7ff fc99 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <initEnemy1+0x1e0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d12b      	bne.n	80016d6 <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6998      	ldr	r0, [r3, #24]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2201      	movs	r2, #1
 8001690:	f7ff fcb2 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	69d8      	ldr	r0, [r3, #28]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2201      	movs	r2, #1
 80016a6:	f7ff fca7 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a19      	ldr	r1, [r3, #32]
 80016b2:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2201      	movs	r2, #1
 80016bc:	f7ff fc9c 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80016c8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2201      	movs	r2, #1
 80016d2:	f7ff fc91 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <initEnemy1+0x1e0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d13f      	bne.n	800175e <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	1ad0      	subs	r0, r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	1ad1      	subs	r1, r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2400      	movs	r4, #0
 8001700:	9400      	str	r4, [sp, #0]
 8001702:	f7ff fc51 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6998      	ldr	r0, [r3, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2201      	movs	r2, #1
 8001718:	f7ff fc6e 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	69d8      	ldr	r0, [r3, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	2201      	movs	r2, #1
 800172e:	f7ff fc63 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a19      	ldr	r1, [r3, #32]
 800173a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2201      	movs	r2, #1
 8001744:	f7ff fc58 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001750:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fc4d 	bl	8000ff8 <FillRect>
        }



}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	40a00000 	.word	0x40a00000
 800176c:	41400000 	.word	0x41400000
 8001770:	2000a1a8 	.word	0x2000a1a8
 8001774:	20015717 	.word	0x20015717

08001778 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 8251 	bne.w	8001c32 <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	2b03      	cmp	r3, #3
 8001796:	f200 824c 	bhi.w	8001c32 <ColisionPlayer_e1+0x4ba>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <ColisionPlayer_e1+0x28>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080018cf 	.word	0x080018cf
 80017a8:	080019ed 	.word	0x080019ed
 80017ac:	08001b0b 	.word	0x08001b0b
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	3b0c      	subs	r3, #12
 80017b4:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f0c0 8231 	bcc.w	8001c24 <ColisionPlayer_e1+0x4ac>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f200 822b 	bhi.w	8001c24 <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d323      	bcc.n	8001822 <ColisionPlayer_e1+0xaa>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d81d      	bhi.n	8001822 <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	1d5a      	adds	r2, r3, #5
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2201      	movs	r2, #1
 80017f4:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e208      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	429a      	cmp	r2, r3
 800182c:	d323      	bcc.n	8001876 <ColisionPlayer_e1+0xfe>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	429a      	cmp	r2, r3
 8001838:	d81d      	bhi.n	8001876 <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	1d5a      	adds	r2, r3, #5
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d106      	bne.n	8001872 <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e1de      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	429a      	cmp	r2, r3
 8001880:	f0c0 81d0 	bcc.w	8001c24 <ColisionPlayer_e1+0x4ac>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f200 81c9 	bhi.w	8001c24 <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	1d5a      	adds	r2, r3, #5
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2201      	movs	r2, #1
 80018a0:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	1e5a      	subs	r2, r3, #1
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e1b2      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	f200 81a4 	bhi.w	8001c28 <ColisionPlayer_e1+0x4b0>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	f0c0 819e 	bcc.w	8001c28 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d323      	bcc.n	8001940 <ColisionPlayer_e1+0x1c8>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	429a      	cmp	r2, r3
 8001902:	d81d      	bhi.n	8001940 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1f5a      	subs	r2, r3, #5
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2201      	movs	r2, #1
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800193c:	2300      	movs	r3, #0
 800193e:	e179      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d323      	bcc.n	8001994 <ColisionPlayer_e1+0x21c>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	429a      	cmp	r2, r3
 8001956:	d81d      	bhi.n	8001994 <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1f5a      	subs	r2, r3, #5
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2201      	movs	r2, #1
 8001966:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001990:	2300      	movs	r3, #0
 8001992:	e14f      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	429a      	cmp	r2, r3
 800199e:	f0c0 8143 	bcc.w	8001c28 <ColisionPlayer_e1+0x4b0>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f200 813c 	bhi.w	8001c28 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1f5a      	subs	r2, r3, #5
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2201      	movs	r2, #1
 80019be:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e123      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	330c      	adds	r3, #12
 80019f0:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f200 8117 	bhi.w	8001c2c <ColisionPlayer_e1+0x4b4>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f0c0 8111 	bcc.w	8001c2c <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d323      	bcc.n	8001a5e <ColisionPlayer_e1+0x2e6>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d81d      	bhi.n	8001a5e <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	1f5a      	subs	r2, r3, #5
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d106      	bne.n	8001a5a <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e0ea      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d323      	bcc.n	8001ab2 <ColisionPlayer_e1+0x33a>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d81d      	bhi.n	8001ab2 <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	1f5a      	subs	r2, r3, #5
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2201      	movs	r2, #1
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d106      	bne.n	8001aae <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e0c0      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	f0c0 80b6 	bcc.w	8001c2c <ColisionPlayer_e1+0x4b4>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f200 80af 	bhi.w	8001c2c <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	1f5a      	subs	r2, r3, #5
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2201      	movs	r2, #1
 8001adc:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e094      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3b0c      	subs	r3, #12
 8001b0e:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	f0c0 808a 	bcc.w	8001c30 <ColisionPlayer_e1+0x4b8>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	f200 8084 	bhi.w	8001c30 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d323      	bcc.n	8001b7c <ColisionPlayer_e1+0x404>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d81d      	bhi.n	8001b7c <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1d5a      	adds	r2, r3, #5
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e05b      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d323      	bcc.n	8001bd0 <ColisionPlayer_e1+0x458>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d81d      	bhi.n	8001bd0 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1d5a      	adds	r2, r3, #5
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e031      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Left && player->y<=enemy->e1Right){
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d329      	bcc.n	8001c30 <ColisionPlayer_e1+0x4b8>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d823      	bhi.n	8001c30 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1d5a      	adds	r2, r3, #5
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e007      	b.n	8001c34 <ColisionPlayer_e1+0x4bc>
					break;
 8001c24:	bf00      	nop
 8001c26:	e004      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
					break;
 8001c28:	bf00      	nop
 8001c2a:	e002      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
					break;
 8001c2c:	bf00      	nop
 8001c2e:	e000      	b.n	8001c32 <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 8001c30:	bf00      	nop
			return 1;
			}
	}
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3724      	adds	r7, #36	@ 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af06      	add	r7, sp, #24
 8001c46:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	1ad2      	subs	r2, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	1ad2      	subs	r2, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	441a      	add	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	3b0a      	subs	r3, #10
 8001c96:	4619      	mov	r1, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9304      	str	r3, [sp, #16]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <Hitbox_e2+0x194>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2314      	movs	r3, #20
 8001cae:	2210      	movs	r2, #16
 8001cb0:	f7ff fa56 	bl	8001160 <LCD_Sprite>

    if (DrawHitbox==1){
 8001cb4:	4b48      	ldr	r3, [pc, #288]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d113      	bne.n	8001ce4 <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	1ad0      	subs	r0, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	1ad1      	subs	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2400      	movs	r4, #0
 8001cde:	9400      	str	r4, [sp, #0]
 8001ce0:	f7ff f962 	bl	8000fa8 <Rect>
    }
    if (DrawHitbox==2){
 8001ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d12b      	bne.n	8001d44 <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6998      	ldr	r0, [r3, #24]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f7ff f97b 	bl	8000ff8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69d8      	ldr	r0, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	2201      	movs	r2, #1
 8001d14:	f7ff f970 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f7ff f965 	bl	8000ff8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d36:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f7ff f95a 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <Hitbox_e2+0x198>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d13f      	bne.n	8001dcc <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	1ad0      	subs	r0, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	1ad1      	subs	r1, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	9400      	str	r4, [sp, #0]
 8001d70:	f7ff f91a 	bl	8000fa8 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6998      	ldr	r0, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2301      	movs	r3, #1
 8001d84:	2201      	movs	r2, #1
 8001d86:	f7ff f937 	bl	8000ff8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69d8      	ldr	r0, [r3, #28]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f7ff f92c 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a19      	ldr	r1, [r3, #32]
 8001da8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2301      	movs	r3, #1
 8001db0:	2201      	movs	r2, #1
 8001db2:	f7ff f921 	bl	8000ff8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001dbe:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f7ff f916 	bl	8000ff8 <FillRect>
        }
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20015717 	.word	0x20015717

08001ddc <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <initEnemy2+0x6c>)
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <initEnemy2+0x70>)
 8001e26:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40400000 	.word	0x40400000
 8001e4c:	40c00000 	.word	0x40c00000

08001e50 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 8109 	bne.w	8002076 <moveE2+0x226>
		if (enemy->delay==100000){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001e6a:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002080 <moveE2+0x230>
 8001e6e:	eef4 7a47 	vcmp.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	f040 80ef 	bne.w	8002058 <moveE2+0x208>
			switch(enemy->move){
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 80f9 	bhi.w	8002076 <moveE2+0x226>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <moveE2+0x3c>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001f0d 	.word	0x08001f0d
 8001e94:	08001f7d 	.word	0x08001f7d
 8001e98:	08001fed 	.word	0x08001fed
			case 0: //Derecha
				int futureX_D=player->x+50;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3332      	adds	r3, #50	@ 0x32
 8001ea2:	60bb      	str	r3, [r7, #8]
				if (futureX_D>player->limitWidth-20){
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	f1a3 0214 	sub.w	r2, r3, #20
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d209      	bcs.n	8001ec6 <moveE2+0x76>
					enemy->move+=1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffc6 	bl	8001e50 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001ec4:	e0d7      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1a3 0008 	sub.w	r0, r3, #8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f1a3 010a 	sub.w	r1, r3, #10
 8001ed6:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2314      	movs	r3, #20
 8001ede:	2210      	movs	r2, #16
 8001ee0:	f7ff f88a 	bl	8000ff8 <FillRect>
					enemy->x=futureX_D;
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fe9b 	bl	8001c40 <Hitbox_e2>
				break;
 8001f0a:	e0b4      	b.n	8002076 <moveE2+0x226>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	3332      	adds	r3, #50	@ 0x32
 8001f12:	60fb      	str	r3, [r7, #12]
				if (futureY_A>player->limitHeight-20){
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	f1a3 0214 	sub.w	r2, r3, #20
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d209      	bcs.n	8001f36 <moveE2+0xe6>
					enemy->move+=1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff8e 	bl	8001e50 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001f34:	e09f      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1a3 0008 	sub.w	r0, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f1a3 010a 	sub.w	r1, r3, #10
 8001f46:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2314      	movs	r3, #20
 8001f4e:	2210      	movs	r2, #16
 8001f50:	f7ff f852 	bl	8000ff8 <FillRect>
					enemy->y=futureY_A;
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fe63 	bl	8001c40 <Hitbox_e2>
				break;
 8001f7a:	e07c      	b.n	8002076 <moveE2+0x226>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3b32      	subs	r3, #50	@ 0x32
 8001f82:	613b      	str	r3, [r7, #16]
				if (futureX_I<player->limitWidth_i+20){
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f103 0214 	add.w	r2, r3, #20
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d909      	bls.n	8001fa6 <moveE2+0x156>
						enemy->move+=1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff56 	bl	8001e50 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8001fa4:	e067      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1a3 0008 	sub.w	r0, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f1a3 010a 	sub.w	r1, r3, #10
 8001fb6:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2314      	movs	r3, #20
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	f7ff f81a 	bl	8000ff8 <FillRect>
					enemy->x=futureX_I;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fe2b 	bl	8001c40 <Hitbox_e2>
				break;
 8001fea:	e044      	b.n	8002076 <moveE2+0x226>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	3b32      	subs	r3, #50	@ 0x32
 8001ff2:	617b      	str	r3, [r7, #20]
				if (futureY_U>player->limitHeight+20){
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	f103 0214 	add.w	r2, r3, #20
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d209      	bcs.n	8002016 <moveE2+0x1c6>
					enemy->move+=1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ff1e 	bl	8001e50 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002014:	e02f      	b.n	8002076 <moveE2+0x226>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xF66B);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1a3 0008 	sub.w	r0, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f1a3 010a 	sub.w	r1, r3, #10
 8002026:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2314      	movs	r3, #20
 800202e:	2210      	movs	r2, #16
 8002030:	f7fe ffe2 	bl	8000ff8 <FillRect>
					enemy->y=futureY_U;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fdf5 	bl	8001c40 <Hitbox_e2>
				break;
 8002056:	e00e      	b.n	8002076 <moveE2+0x226>
			}
		}else{
			if (enemy->delay==200000){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800205e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002084 <moveE2+0x234>
 8002062:	eef4 7a47 	vcmp.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d104      	bne.n	8002076 <moveE2+0x226>
				enemy->delay=0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002074:	e7ff      	b.n	8002076 <moveE2+0x226>
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	47c35000 	.word	0x47c35000
 8002084:	48435000 	.word	0x48435000

08002088 <E2_Appear>:

void E2_Appear(enemy_type2* enemy){
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af06      	add	r7, sp, #24
 800208e:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d12b      	bne.n	8002100 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	dc28      	bgt.n	8002100 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3b08      	subs	r3, #8
 80020b4:	4618      	mov	r0, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	3b0a      	subs	r3, #10
 80020bc:	4619      	mov	r1, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	2305      	movs	r3, #5
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <E2_Appear+0x88>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2314      	movs	r3, #20
 80020d4:	2210      	movs	r2, #16
 80020d6:	f7ff f843 	bl	8001160 <LCD_Sprite>
			enemy->animationV+=0.05;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9f6 	bl	80004d0 <__aeabi_f2d>
 80020e4:	a308      	add	r3, pc, #32	@ (adr r3, 8002108 <E2_Appear+0x80>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe f893 	bl	8000214 <__adddf3>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fa43 	bl	8000580 <__aeabi_d2f>
 80020fa:	4602      	mov	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	9999999a 	.word	0x9999999a
 800210c:	3fa99999 	.word	0x3fa99999
 8002110:	20000000 	.word	0x20000000
 8002114:	00000000 	.word	0x00000000

08002118 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af06      	add	r7, sp, #24
 800211e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d13b      	bne.n	80021a0 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800212e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002132:	ee17 3a90 	vmov	r3, s15
 8002136:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d12f      	bne.n	80021a0 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b02      	cmp	r3, #2
 8002144:	dc29      	bgt.n	800219a <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3b0e      	subs	r3, #14
 800214c:	4618      	mov	r0, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	3b0c      	subs	r3, #12
 8002154:	4619      	mov	r1, r3
 8002156:	2300      	movs	r3, #0
 8002158:	9304      	str	r3, [sp, #16]
 800215a:	2300      	movs	r3, #0
 800215c:	9303      	str	r3, [sp, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2303      	movs	r3, #3
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <E2_Hurt+0x98>)
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2319      	movs	r3, #25
 800216c:	221c      	movs	r2, #28
 800216e:	f7fe fff7 	bl	8001160 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9aa 	bl	80004d0 <__aeabi_f2d>
 800217c:	a30a      	add	r3, pc, #40	@ (adr r3, 80021a8 <E2_Hurt+0x90>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f847 	bl	8000214 <__adddf3>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe f9f7 	bl	8000580 <__aeabi_d2f>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002198:	e002      	b.n	80021a0 <E2_Hurt+0x88>
					enemy->isHurt=0;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	9999999a 	.word	0x9999999a
 80021ac:	3fa99999 	.word	0x3fa99999
 80021b0:	20000c80 	.word	0x20000c80
 80021b4:	00000000 	.word	0x00000000

080021b8 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af06      	add	r7, sp, #24
 80021be:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80021c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ca:	ee17 3a90 	vmov	r3, s15
 80021ce:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d143      	bne.n	8002260 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	dc29      	bgt.n	8002232 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3b0c      	subs	r3, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	3b0b      	subs	r3, #11
 80021ec:	4619      	mov	r1, r3
 80021ee:	2300      	movs	r3, #0
 80021f0:	9304      	str	r3, [sp, #16]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2306      	movs	r3, #6
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <E2_Die+0xb8>)
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2317      	movs	r3, #23
 8002204:	221a      	movs	r2, #26
 8002206:	f7fe ffab 	bl	8001160 <LCD_Sprite>
					enemy->animationDie+=0.2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f95e 	bl	80004d0 <__aeabi_f2d>
 8002214:	a314      	add	r3, pc, #80	@ (adr r3, 8002268 <E2_Die+0xb0>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fd fffb 	bl	8000214 <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe f9ab 	bl	8000580 <__aeabi_d2f>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xF66B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002230:	e016      	b.n	8002260 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xF66B);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1a3 000c 	sub.w	r0, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f1a3 010b 	sub.w	r1, r3, #11
 8002242:	f24f 636b 	movw	r3, #63083	@ 0xf66b
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2317      	movs	r3, #23
 800224a:	221a      	movs	r2, #26
 800224c:	f7fe fed4 	bl	8000ff8 <FillRect>
						enemy->x=5000;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	605a      	str	r2, [r3, #4]
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	9999999a 	.word	0x9999999a
 800226c:	3fc99999 	.word	0x3fc99999
 8002270:	20001ce8 	.word	0x20001ce8

08002274 <PlayerHit_E2>:


void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 80f0 	bne.w	8002468 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	2b03      	cmp	r3, #3
 800228e:	f200 80eb 	bhi.w	8002468 <PlayerHit_E2+0x1f4>
 8002292:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <PlayerHit_E2+0x24>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022a9 	.word	0x080022a9
 800229c:	0800238b 	.word	0x0800238b
 80022a0:	0800231b 	.word	0x0800231b
 80022a4:	080023f3 	.word	0x080023f3
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	3b0f      	subs	r3, #15
 80022ae:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	f0c0 80cf 	bcc.w	800245a <PlayerHit_E2+0x1e6>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	f200 80c9 	bhi.w	800245a <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	3b05      	subs	r3, #5
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f0c0 80c1 	bcc.w	800245a <PlayerHit_E2+0x1e6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	3305      	adds	r3, #5
 80022e2:	429a      	cmp	r2, r3
 80022e4:	f200 80b9 	bhi.w	800245a <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 80a8 	bne.w	800245a <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002318:	e09f      	b.n	800245a <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	330f      	adds	r3, #15
 8002320:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	f0c0 8098 	bcc.w	800245e <PlayerHit_E2+0x1ea>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	f200 8092 	bhi.w	800245e <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	3b05      	subs	r3, #5
 8002344:	429a      	cmp	r2, r3
 8002346:	f0c0 808a 	bcc.w	800245e <PlayerHit_E2+0x1ea>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	3305      	adds	r3, #5
 8002354:	429a      	cmp	r2, r3
 8002356:	f200 8082 	bhi.w	800245e <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	1e5a      	subs	r2, r3, #1
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d171      	bne.n	800245e <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002388:	e069      	b.n	800245e <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d362      	bcc.n	8002462 <PlayerHit_E2+0x1ee>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d85d      	bhi.n	8002462 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	3b0f      	subs	r3, #15
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d356      	bcc.n	8002462 <PlayerHit_E2+0x1ee>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	3314      	adds	r3, #20
 80023be:	429a      	cmp	r2, r3
 80023c0:	d84f      	bhi.n	8002462 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d13f      	bne.n	8002462 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 80023f0:	e037      	b.n	8002462 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3b14      	subs	r3, #20
 80023f8:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d330      	bcc.n	8002466 <PlayerHit_E2+0x1f2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	429a      	cmp	r2, r3
 800240c:	d82b      	bhi.n	8002466 <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	3b0f      	subs	r3, #15
 8002418:	429a      	cmp	r2, r3
 800241a:	d324      	bcc.n	8002466 <PlayerHit_E2+0x1f2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	3314      	adds	r3, #20
 8002426:	429a      	cmp	r2, r3
 8002428:	d81d      	bhi.n	8002466 <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002458:	e005      	b.n	8002466 <PlayerHit_E2+0x1f2>
			break;
 800245a:	bf00      	nop
 800245c:	e004      	b.n	8002468 <PlayerHit_E2+0x1f4>
				break;
 800245e:	bf00      	nop
 8002460:	e002      	b.n	8002468 <PlayerHit_E2+0x1f4>
				break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <PlayerHit_E2+0x1f4>
							break;
 8002466:	bf00      	nop
						}
		}
	}
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <initPlayer>:


/* Funciones Jugador ---------------------------------------------------*/
void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af06      	add	r7, sp, #24
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	611a      	str	r2, [r3, #16]
    player->life = life;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a3a      	ldr	r2, [r7, #32]
 80024a4:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2202      	movs	r2, #2
 80024b6:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002584 <initPlayer+0x110>)
 80024d4:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a2a      	ldr	r2, [pc, #168]	@ (8002588 <initPlayer+0x114>)
 80024e0:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80024e8:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+1, player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3b08      	subs	r3, #8
 80024fc:	4618      	mov	r0, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	3b0b      	subs	r3, #11
 8002504:	4619      	mov	r1, r3
 8002506:	2300      	movs	r3, #0
 8002508:	9304      	str	r3, [sp, #16]
 800250a:	2300      	movs	r3, #0
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	2305      	movs	r3, #5
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	2306      	movs	r3, #6
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <initPlayer+0x118>)
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2317      	movs	r3, #23
 800251c:	2212      	movs	r2, #18
 800251e:	f7fe fe1f 	bl	8001160 <LCD_Sprite>
    FillRect(player->x , player->y, 1, 1, 0x000000);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	2201      	movs	r2, #1
 8002532:	f7fe fd61 	bl	8000ff8 <FillRect>

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	635a      	str	r2, [r3, #52]	@ 0x34
    FillRect(player->playerRight , player->y, 1, 1, 0x0420); //Derecha
    FillRect(player->x , player->playerUp, 1, 1, 0xFFFFFF); //Arriba
    FillRect(player->x , player->playerDown, 1, 1, 0x0420); //Abajo*/


}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40e00000 	.word	0x40e00000
 8002588:	40400000 	.word	0x40400000
 800258c:	20006710 	.word	0x20006710

08002590 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d851      	bhi.n	8002646 <playerCanMove+0xb6>
 80025a2:	a201      	add	r2, pc, #4	@ (adr r2, 80025a8 <playerCanMove+0x18>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025d7 	.word	0x080025d7
 80025b0:	080025f9 	.word	0x080025f9
 80025b4:	0800261b 	.word	0x0800261b
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	1ad2      	subs	r2, r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b12      	cmp	r3, #18
 80025d0:	dc34      	bgt.n	800263c <playerCanMove+0xac>
			return 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e094      	b.n	8002700 <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	441a      	add	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d825      	bhi.n	8002640 <playerCanMove+0xb0>
			return 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e083      	b.n	8002700 <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	429a      	cmp	r2, r3
 8002614:	d816      	bhi.n	8002644 <playerCanMove+0xb4>
			return 0;
 8002616:	2300      	movs	r3, #0
 8002618:	e072      	b.n	8002700 <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	429a      	cmp	r2, r3
 8002636:	d306      	bcc.n	8002646 <playerCanMove+0xb6>
			return 0;
 8002638:	2300      	movs	r3, #0
 800263a:	e061      	b.n	8002700 <playerCanMove+0x170>
		break;
 800263c:	bf00      	nop
 800263e:	e002      	b.n	8002646 <playerCanMove+0xb6>
		break;
 8002640:	bf00      	nop
 8002642:	e000      	b.n	8002646 <playerCanMove+0xb6>
		break;
 8002644:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002656:	2b01      	cmp	r3, #1
 8002658:	d126      	bne.n	80026a8 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4828      	ldr	r0, [pc, #160]	@ (8002708 <playerCanMove+0x178>)
 8002666:	f7ff f887 	bl	8001778 <ColisionPlayer_e1>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <playerCanMove+0xe4>
    	return 0;
 8002670:	2300      	movs	r3, #0
 8002672:	e045      	b.n	8002700 <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4823      	ldr	r0, [pc, #140]	@ (800270c <playerCanMove+0x17c>)
 8002680:	f7ff f87a 	bl	8001778 <ColisionPlayer_e1>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <playerCanMove+0xfe>
        	return 0;
 800268a:	2300      	movs	r3, #0
 800268c:	e038      	b.n	8002700 <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	481d      	ldr	r0, [pc, #116]	@ (8002710 <playerCanMove+0x180>)
 800269a:	f7ff f86d 	bl	8001778 <ColisionPlayer_e1>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <playerCanMove+0x118>
        	return 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e02b      	b.n	8002700 <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d126      	bne.n	80026fe <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4816      	ldr	r0, [pc, #88]	@ (8002714 <playerCanMove+0x184>)
 80026bc:	f7ff f85c 	bl	8001778 <ColisionPlayer_e1>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <playerCanMove+0x13a>
       	return 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e01a      	b.n	8002700 <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4810      	ldr	r0, [pc, #64]	@ (8002718 <playerCanMove+0x188>)
 80026d6:	f7ff f84f 	bl	8001778 <ColisionPlayer_e1>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <playerCanMove+0x154>
           	return 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e00d      	b.n	8002700 <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	480b      	ldr	r0, [pc, #44]	@ (800271c <playerCanMove+0x18c>)
 80026f0:	f7ff f842 	bl	8001778 <ColisionPlayer_e1>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <playerCanMove+0x16e>
           	return 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20015598 	.word	0x20015598
 800270c:	200155cc 	.word	0x200155cc
 8002710:	20015600 	.word	0x20015600
 8002714:	20015634 	.word	0x20015634
 8002718:	20015668 	.word	0x20015668
 800271c:	2001569c 	.word	0x2001569c

08002720 <HitboxPlayer>:

void HitboxPlayer(player* player){
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b085      	sub	sp, #20
 8002724:	af02      	add	r7, sp, #8
 8002726:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	441a      	add	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 8002768:	4b47      	ldr	r3, [pc, #284]	@ (8002888 <HitboxPlayer+0x168>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d113      	bne.n	8002798 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	1ad0      	subs	r0, r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	1ad1      	subs	r1, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2400      	movs	r4, #0
 8002792:	9400      	str	r4, [sp, #0]
 8002794:	f7fe fc08 	bl	8000fa8 <Rect>
        }
    if (DrawHitbox==2){
 8002798:	4b3b      	ldr	r3, [pc, #236]	@ (8002888 <HitboxPlayer+0x168>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d12b      	bne.n	80027f8 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	2201      	movs	r2, #1
 80027b2:	f7fe fc21 	bl	8000ff8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	2201      	movs	r2, #1
 80027c8:	f7fe fc16 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80027d4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2301      	movs	r3, #1
 80027dc:	2201      	movs	r2, #1
 80027de:	f7fe fc0b 	bl	8000ff8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ea:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2301      	movs	r3, #1
 80027f2:	2201      	movs	r2, #1
 80027f4:	f7fe fc00 	bl	8000ff8 <FillRect>
    }
    if (DrawHitbox==3){
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <HitboxPlayer+0x168>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d13f      	bne.n	8002880 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	1ad0      	subs	r0, r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	1ad1      	subs	r1, r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2400      	movs	r4, #0
 8002822:	9400      	str	r4, [sp, #0]
 8002824:	f7fe fbc0 	bl	8000fa8 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	2201      	movs	r2, #1
 800283a:	f7fe fbdd 	bl	8000ff8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	2201      	movs	r2, #1
 8002850:	f7fe fbd2 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800285c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2301      	movs	r3, #1
 8002864:	2201      	movs	r2, #1
 8002866:	f7fe fbc7 	bl	8000ff8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002872:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	2201      	movs	r2, #1
 800287c:	f7fe fbbc 	bl	8000ff8 <FillRect>

        }
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	20015717 	.word	0x20015717

0800288c <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 80d0 	bne.w	8002a40 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	f200 80cb 	bhi.w	8002a40 <PlayerHit+0x1b4>
 80028aa:	a201      	add	r2, pc, #4	@ (adr r2, 80028b0 <PlayerHit+0x24>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	0800297f 	.word	0x0800297f
 80028b8:	08002925 	.word	0x08002925
 80028bc:	080029d9 	.word	0x080029d9
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	3b0f      	subs	r3, #15
 80028c6:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	f0c0 80af 	bcc.w	8002a32 <PlayerHit+0x1a6>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	f200 80a9 	bhi.w	8002a32 <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	3b05      	subs	r3, #5
 80028ea:	429a      	cmp	r2, r3
 80028ec:	f0c0 80a1 	bcc.w	8002a32 <PlayerHit+0x1a6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	3305      	adds	r3, #5
 80028fa:	429a      	cmp	r2, r3
 80028fc:	f200 8099 	bhi.w	8002a32 <PlayerHit+0x1a6>
						enemy->health -= 1;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 808f 	bne.w	8002a32 <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 8002922:	e086      	b.n	8002a32 <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	330f      	adds	r3, #15
 800292a:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	429a      	cmp	r2, r3
 8002934:	d37f      	bcc.n	8002a36 <PlayerHit+0x1aa>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d87a      	bhi.n	8002a36 <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	3b05      	subs	r3, #5
 800294a:	429a      	cmp	r2, r3
 800294c:	d373      	bcc.n	8002a36 <PlayerHit+0x1aa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	3305      	adds	r3, #5
 8002958:	429a      	cmp	r2, r3
 800295a:	d86c      	bhi.n	8002a36 <PlayerHit+0x1aa>
						enemy->health -= 1;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d163      	bne.n	8002a36 <PlayerHit+0x1aa>
							enemy->isAlive=0;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 800297c:	e05b      	b.n	8002a36 <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3314      	adds	r3, #20
 8002984:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d354      	bcc.n	8002a3a <PlayerHit+0x1ae>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	429a      	cmp	r2, r3
 8002998:	d84f      	bhi.n	8002a3a <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	3b0f      	subs	r3, #15
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d348      	bcc.n	8002a3a <PlayerHit+0x1ae>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	3314      	adds	r3, #20
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d841      	bhi.n	8002a3a <PlayerHit+0x1ae>
						enemy->health -= 1;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d138      	bne.n	8002a3a <PlayerHit+0x1ae>
							enemy->isAlive=0;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 80029d6:	e030      	b.n	8002a3a <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3b14      	subs	r3, #20
 80029de:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d329      	bcc.n	8002a3e <PlayerHit+0x1b2>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d824      	bhi.n	8002a3e <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	3b0f      	subs	r3, #15
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d31d      	bcc.n	8002a3e <PlayerHit+0x1b2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d816      	bhi.n	8002a3e <PlayerHit+0x1b2>
									enemy->health -= 1;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <PlayerHit+0x1b2>
										enemy->isAlive=0;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8002a30:	e005      	b.n	8002a3e <PlayerHit+0x1b2>
			break;
 8002a32:	bf00      	nop
 8002a34:	e004      	b.n	8002a40 <PlayerHit+0x1b4>
				break;
 8002a36:	bf00      	nop
 8002a38:	e002      	b.n	8002a40 <PlayerHit+0x1b4>
				break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <PlayerHit+0x1b4>
							break;
 8002a3e:	bf00      	nop
						}
		}
	}
}
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <PlayerAnimation>:

void PlayerAnimation(player* player){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af06      	add	r7, sp, #24
 8002a52:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d16f      	bne.n	8002b3c <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d117      	bne.n	8002a94 <PlayerAnimation+0x48>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3b08      	subs	r3, #8
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	3b0d      	subs	r3, #13
 8002a72:	4619      	mov	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9303      	str	r3, [sp, #12]
 8002a82:	9202      	str	r2, [sp, #8]
 8002a84:	230a      	movs	r3, #10
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <PlayerAnimation+0xf8>)
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	231a      	movs	r3, #26
 8002a8e:	2212      	movs	r2, #18
 8002a90:	f7fe fb66 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==1){
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d117      	bne.n	8002acc <PlayerAnimation+0x80>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3b0a      	subs	r3, #10
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	3b0b      	subs	r3, #11
 8002aaa:	4619      	mov	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	9303      	str	r3, [sp, #12]
 8002aba:	9202      	str	r2, [sp, #8]
 8002abc:	230a      	movs	r3, #10
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <PlayerAnimation+0xfc>)
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2317      	movs	r3, #23
 8002ac6:	2216      	movs	r2, #22
 8002ac8:	f7fe fb4a 	bl	8001160 <LCD_Sprite>
		}
		if (player->direction==2){
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d117      	bne.n	8002b04 <PlayerAnimation+0xb8>
			//FillRect(p1.x - (18 / 2), p1.y - (26 / 2), 18, 26,0xFFFFFF);
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3b08      	subs	r3, #8
 8002ada:	4618      	mov	r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	3b0b      	subs	r3, #11
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2300      	movs	r3, #0
 8002aec:	9304      	str	r3, [sp, #16]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9303      	str	r3, [sp, #12]
 8002af2:	9202      	str	r2, [sp, #8]
 8002af4:	230a      	movs	r3, #10
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <PlayerAnimation+0x100>)
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2318      	movs	r3, #24
 8002afe:	2212      	movs	r2, #18
 8002b00:	f7fe fb2e 	bl	8001160 <LCD_Sprite>
			}
		if (player->direction==3){
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d117      	bne.n	8002b3c <PlayerAnimation+0xf0>
			//FillRect(p1.x - (22 / 2), p1.y - (23 / 2), 22, 23,0xFFFFFF);
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3b0a      	subs	r3, #10
 8002b12:	4618      	mov	r0, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	3b0b      	subs	r3, #11
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	461a      	mov	r2, r3
 8002b22:	2300      	movs	r3, #0
 8002b24:	9304      	str	r3, [sp, #16]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9303      	str	r3, [sp, #12]
 8002b2a:	9202      	str	r2, [sp, #8]
 8002b2c:	230a      	movs	r3, #10
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <PlayerAnimation+0xfc>)
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2317      	movs	r3, #23
 8002b36:	2216      	movs	r2, #22
 8002b38:	f7fe fb12 	bl	8001160 <LCD_Sprite>
			}
	}
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20010d44 	.word	0x20010d44
 8002b48:	2000e5bc 	.word	0x2000e5bc
 8002b4c:	200131d4 	.word	0x200131d4

08002b50 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af06      	add	r7, sp, #24
 8002b56:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b62:	ee17 3a90 	vmov	r3, s15
 8002b66:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f040 8082 	bne.w	8002c76 <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	dc7b      	bgt.n	8002c70 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d115      	bne.n	8002bac <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3b08      	subs	r3, #8
 8002b86:	4618      	mov	r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	3b0b      	subs	r3, #11
 8002b8e:	4619      	mov	r1, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	2300      	movs	r3, #0
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <PlayerAttackAnimation+0x138>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2316      	movs	r3, #22
 8002ba6:	2212      	movs	r2, #18
 8002ba8:	f7fe fada 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d115      	bne.n	8002be0 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3b09      	subs	r3, #9
 8002bba:	4618      	mov	r0, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	3b0b      	subs	r3, #11
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9304      	str	r3, [sp, #16]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	9303      	str	r3, [sp, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	2306      	movs	r3, #6
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <PlayerAttackAnimation+0x13c>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2316      	movs	r3, #22
 8002bda:	2214      	movs	r2, #20
 8002bdc:	f7fe fac0 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d115      	bne.n	8002c14 <PlayerAttackAnimation+0xc4>

				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3b08      	subs	r3, #8
 8002bee:	4618      	mov	r0, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	3b0b      	subs	r3, #11
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9304      	str	r3, [sp, #16]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9303      	str	r3, [sp, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	9302      	str	r3, [sp, #8]
 8002c04:	2306      	movs	r3, #6
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <PlayerAttackAnimation+0x140>)
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2317      	movs	r3, #23
 8002c0e:	2212      	movs	r2, #18
 8002c10:	f7fe faa6 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d115      	bne.n	8002c48 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3b09      	subs	r3, #9
 8002c22:	4618      	mov	r0, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	3b0b      	subs	r3, #11
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9304      	str	r3, [sp, #16]
 8002c30:	2300      	movs	r3, #0
 8002c32:	9303      	str	r3, [sp, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	9302      	str	r3, [sp, #8]
 8002c38:	2306      	movs	r3, #6
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <PlayerAttackAnimation+0x13c>)
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2316      	movs	r3, #22
 8002c42:	2214      	movs	r2, #20
 8002c44:	f7fe fa8c 	bl	8001160 <LCD_Sprite>
					}
			player->animationAttack+=0.2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc3f 	bl	80004d0 <__aeabi_f2d>
 8002c52:	a30b      	add	r3, pc, #44	@ (adr r3, 8002c80 <PlayerAttackAnimation+0x130>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fadc 	bl	8000214 <__adddf3>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f7fd fc8c 	bl	8000580 <__aeabi_d2f>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 8002c6e:	e002      	b.n	8002c76 <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	9999999a 	.word	0x9999999a
 8002c84:	3fc99999 	.word	0x3fc99999
 8002c88:	20008f18 	.word	0x20008f18
 8002c8c:	20007a78 	.word	0x20007a78
 8002c90:	20006710 	.word	0x20006710
 8002c94:	00000000 	.word	0x00000000

08002c98 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af06      	add	r7, sp, #24
 8002c9e:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002caa:	ee17 3a90 	vmov	r3, s15
 8002cae:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	f040 8082 	bne.w	8002dbe <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	dc7b      	bgt.n	8002db8 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d115      	bne.n	8002cf4 <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3b08      	subs	r3, #8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	3b0a      	subs	r3, #10
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9303      	str	r3, [sp, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <PlayerDamageAnimation+0x138>)
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2314      	movs	r3, #20
 8002cee:	2212      	movs	r2, #18
 8002cf0:	f7fe fa36 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==1){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d115      	bne.n	8002d28 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3b09      	subs	r3, #9
 8002d02:	4618      	mov	r0, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	3b0a      	subs	r3, #10
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9304      	str	r3, [sp, #16]
 8002d10:	2301      	movs	r3, #1
 8002d12:	9303      	str	r3, [sp, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	2303      	movs	r3, #3
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <PlayerDamageAnimation+0x13c>)
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2315      	movs	r3, #21
 8002d22:	2214      	movs	r2, #20
 8002d24:	f7fe fa1c 	bl	8001160 <LCD_Sprite>
			}
			if (player->direction==2){
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d115      	bne.n	8002d5c <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3b09      	subs	r3, #9
 8002d36:	4618      	mov	r0, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	3b0a      	subs	r3, #10
 8002d3e:	4619      	mov	r1, r3
 8002d40:	2300      	movs	r3, #0
 8002d42:	9304      	str	r3, [sp, #16]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9303      	str	r3, [sp, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	9302      	str	r3, [sp, #8]
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <PlayerDamageAnimation+0x140>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2315      	movs	r3, #21
 8002d56:	2214      	movs	r2, #20
 8002d58:	f7fe fa02 	bl	8001160 <LCD_Sprite>
					}
			if (player->direction==3){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d115      	bne.n	8002d90 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b09      	subs	r3, #9
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	3b0a      	subs	r3, #10
 8002d72:	4619      	mov	r1, r3
 8002d74:	2300      	movs	r3, #0
 8002d76:	9304      	str	r3, [sp, #16]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2303      	movs	r3, #3
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <PlayerDamageAnimation+0x13c>)
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2315      	movs	r3, #21
 8002d8a:	2214      	movs	r2, #20
 8002d8c:	f7fe f9e8 	bl	8001160 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fb9b 	bl	80004d0 <__aeabi_f2d>
 8002d9a:	a30b      	add	r3, pc, #44	@ (adr r3, 8002dc8 <PlayerDamageAnimation+0x130>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd fa38 	bl	8000214 <__adddf3>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fbe8 	bl	8000580 <__aeabi_d2f>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 8002db6:	e002      	b.n	8002dbe <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	9999999a 	.word	0x9999999a
 8002dcc:	3fc99999 	.word	0x3fc99999
 8002dd0:	200038f0 	.word	0x200038f0
 8002dd4:	20004160 	.word	0x20004160
 8002dd8:	20004b38 	.word	0x20004b38
 8002ddc:	00000000 	.word	0x00000000

08002de0 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af06      	add	r7, sp, #24
 8002de6:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df2:	ee17 3a90 	vmov	r3, s15
 8002df6:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12b      	bne.n	8002e58 <PlayerDieAnimation+0x78>
		if (variableAnimationDie<4){
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	dc28      	bgt.n	8002e58 <PlayerDieAnimation+0x78>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3b0b      	subs	r3, #11
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	3b0c      	subs	r3, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	9304      	str	r3, [sp, #16]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9303      	str	r3, [sp, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	2304      	movs	r3, #4
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <PlayerDieAnimation+0x88>)
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2318      	movs	r3, #24
 8002e2c:	2218      	movs	r2, #24
 8002e2e:	f7fe f997 	bl	8001160 <LCD_Sprite>
			player->animationDie+=0.2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb4a 	bl	80004d0 <__aeabi_f2d>
 8002e3c:	a308      	add	r3, pc, #32	@ (adr r3, 8002e60 <PlayerDieAnimation+0x80>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f7fd f9e7 	bl	8000214 <__adddf3>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fb97 	bl	8000580 <__aeabi_d2f>
 8002e52:	4602      	mov	r2, r0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	9999999a 	.word	0x9999999a
 8002e64:	3fc99999 	.word	0x3fc99999
 8002e68:	20005510 	.word	0x20005510

08002e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8002e72:	f001 f937 	bl	80040e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e76:	f000 fa23 	bl	80032c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e7a:	f000 fb17 	bl	80034ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8002e7e:	f000 fa8b 	bl	8003398 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002e82:	f000 fae9 	bl	8003458 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8002e86:	f000 fabd 	bl	8003404 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8002e8a:	f7fd fd41 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fd ffc6 	bl	8000e20 <LCD_Clear>

	//Fondo
	FillRect(0, 0, 319, 239, 0xFFFF);
 8002e94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	23ef      	movs	r3, #239	@ 0xef
 8002e9c:	f240 123f 	movw	r2, #319	@ 0x13f
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe f8a8 	bl	8000ff8 <FillRect>
	LCD_Bitmap(0, 0, 320, 240, fondo);
 8002ea8:	4bb0      	ldr	r3, [pc, #704]	@ (800316c <main+0x300>)
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	23f0      	movs	r3, #240	@ 0xf0
 8002eae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe f8f9 	bl	80010ac <LCD_Bitmap>

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	  // Activar bandera interrupcion
	  HAL_UART_Receive_IT(&huart5, buffer, 1);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	49ac      	ldr	r1, [pc, #688]	@ (8003170 <main+0x304>)
 8002ebe:	48ad      	ldr	r0, [pc, #692]	@ (8003174 <main+0x308>)
 8002ec0:	f002 fb33 	bl	800552a <HAL_UART_Receive_IT>
	  modo=2;
 8002ec4:	4bac      	ldr	r3, [pc, #688]	@ (8003178 <main+0x30c>)
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
	  fase_p1=1;
 8002eca:	4bac      	ldr	r3, [pc, #688]	@ (800317c <main+0x310>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
	  fase_p2=1;
 8002ed0:	4bab      	ldr	r3, [pc, #684]	@ (8003180 <main+0x314>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]


	  if (modo==1){
 8002ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8003178 <main+0x30c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d15f      	bne.n	8002f9e <main+0x132>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8002ede:	2312      	movs	r3, #18
 8002ee0:	9305      	str	r3, [sp, #20]
 8002ee2:	23dc      	movs	r3, #220	@ 0xdc
 8002ee4:	9304      	str	r3, [sp, #16]
 8002ee6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002eea:	9303      	str	r3, [sp, #12]
 8002eec:	2303      	movs	r3, #3
 8002eee:	9302      	str	r3, [sp, #8]
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	231e      	movs	r3, #30
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2316      	movs	r3, #22
 8002efa:	22c8      	movs	r2, #200	@ 0xc8
 8002efc:	21a0      	movs	r1, #160	@ 0xa0
 8002efe:	48a1      	ldr	r0, [pc, #644]	@ (8003184 <main+0x318>)
 8002f00:	f7ff fab8 	bl	8002474 <initPlayer>
		initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8002f04:	2312      	movs	r3, #18
 8002f06:	9305      	str	r3, [sp, #20]
 8002f08:	23dc      	movs	r3, #220	@ 0xdc
 8002f0a:	9304      	str	r3, [sp, #16]
 8002f0c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	2303      	movs	r3, #3
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	2305      	movs	r3, #5
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	231e      	movs	r3, #30
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2316      	movs	r3, #22
 8002f20:	22c8      	movs	r2, #200	@ 0xc8
 8002f22:	21a0      	movs	r1, #160	@ 0xa0
 8002f24:	4898      	ldr	r0, [pc, #608]	@ (8003188 <main+0x31c>)
 8002f26:	f7ff faa5 	bl	8002474 <initPlayer>
		p1.PlayerNum=1;
 8002f2a:	4b96      	ldr	r3, [pc, #600]	@ (8003184 <main+0x318>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 8002f30:	4b95      	ldr	r3, [pc, #596]	@ (8003188 <main+0x31c>)
 8002f32:	2202      	movs	r2, #2
 8002f34:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.isAlive=0;
 8002f36:	4b94      	ldr	r3, [pc, #592]	@ (8003188 <main+0x31c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]

	    if (fase_p1==1){
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800317c <main+0x310>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d11e      	bne.n	8002f82 <main+0x116>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8002f44:	2303      	movs	r3, #3
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2313      	movs	r3, #19
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	2250      	movs	r2, #80	@ 0x50
 8002f50:	2128      	movs	r1, #40	@ 0x28
 8002f52:	488e      	ldr	r0, [pc, #568]	@ (800318c <main+0x320>)
 8002f54:	f7fe fb1e 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8002f58:	2303      	movs	r3, #3
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2313      	movs	r3, #19
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2310      	movs	r3, #16
 8002f62:	2250      	movs	r2, #80	@ 0x50
 8002f64:	21a0      	movs	r1, #160	@ 0xa0
 8002f66:	488a      	ldr	r0, [pc, #552]	@ (8003190 <main+0x324>)
 8002f68:	f7fe fb14 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2313      	movs	r3, #19
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2310      	movs	r3, #16
 8002f76:	2250      	movs	r2, #80	@ 0x50
 8002f78:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002f7c:	4885      	ldr	r0, [pc, #532]	@ (8003194 <main+0x328>)
 8002f7e:	f7fe fb09 	bl	8001594 <initEnemy1>

		  if (fase_p1==2){
 8002f82:	4b7e      	ldr	r3, [pc, #504]	@ (800317c <main+0x310>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d109      	bne.n	8002f9e <main+0x132>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	2314      	movs	r3, #20
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2310      	movs	r3, #16
 8002f94:	2250      	movs	r2, #80	@ 0x50
 8002f96:	21a0      	movs	r1, #160	@ 0xa0
 8002f98:	487f      	ldr	r0, [pc, #508]	@ (8003198 <main+0x32c>)
 8002f9a:	f7fe ff1f 	bl	8001ddc <initEnemy2>
			  }
		  }
	  if (modo==2){
 8002f9e:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <main+0x30c>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d160      	bne.n	8003068 <main+0x1fc>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	22f0      	movs	r2, #240	@ 0xf0
 8002faa:	2100      	movs	r1, #0
 8002fac:	20a0      	movs	r0, #160	@ 0xa0
 8002fae:	f7fd ffbb 	bl	8000f28 <V_line>
		initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	9305      	str	r3, [sp, #20]
 8002fb6:	23dc      	movs	r3, #220	@ 0xdc
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	23a0      	movs	r3, #160	@ 0xa0
 8002fbc:	9303      	str	r3, [sp, #12]
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	9302      	str	r3, [sp, #8]
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	231e      	movs	r3, #30
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2316      	movs	r3, #22
 8002fcc:	22c8      	movs	r2, #200	@ 0xc8
 8002fce:	2150      	movs	r1, #80	@ 0x50
 8002fd0:	486c      	ldr	r0, [pc, #432]	@ (8003184 <main+0x318>)
 8002fd2:	f7ff fa4f 	bl	8002474 <initPlayer>
		initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 8002fd6:	23a0      	movs	r3, #160	@ 0xa0
 8002fd8:	9305      	str	r3, [sp, #20]
 8002fda:	23dc      	movs	r3, #220	@ 0xdc
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002fe2:	9303      	str	r3, [sp, #12]
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	2305      	movs	r3, #5
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	231e      	movs	r3, #30
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2316      	movs	r3, #22
 8002ff2:	22c8      	movs	r2, #200	@ 0xc8
 8002ff4:	21f0      	movs	r1, #240	@ 0xf0
 8002ff6:	4864      	ldr	r0, [pc, #400]	@ (8003188 <main+0x31c>)
 8002ff8:	f7ff fa3c 	bl	8002474 <initPlayer>
		p1.PlayerNum=1;
 8002ffc:	4b61      	ldr	r3, [pc, #388]	@ (8003184 <main+0x318>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 8003002:	4b61      	ldr	r3, [pc, #388]	@ (8003188 <main+0x31c>)
 8003004:	2202      	movs	r2, #2
 8003006:	671a      	str	r2, [r3, #112]	@ 0x70

		if (fase_p1==1){
 8003008:	4b5c      	ldr	r3, [pc, #368]	@ (800317c <main+0x310>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d11d      	bne.n	800304c <main+0x1e0>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 30, 80, 16, 19, 3);
 8003010:	2303      	movs	r3, #3
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	2313      	movs	r3, #19
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2310      	movs	r3, #16
 800301a:	2250      	movs	r2, #80	@ 0x50
 800301c:	211e      	movs	r1, #30
 800301e:	485b      	ldr	r0, [pc, #364]	@ (800318c <main+0x320>)
 8003020:	f7fe fab8 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2,90, 100, 16, 19, 3);
 8003024:	2303      	movs	r3, #3
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	2313      	movs	r3, #19
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2310      	movs	r3, #16
 800302e:	2264      	movs	r2, #100	@ 0x64
 8003030:	215a      	movs	r1, #90	@ 0x5a
 8003032:	4857      	ldr	r0, [pc, #348]	@ (8003190 <main+0x324>)
 8003034:	f7fe faae 	bl	8001594 <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3,150, 120, 16, 19, 3);}
 8003038:	2303      	movs	r3, #3
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2313      	movs	r3, #19
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2310      	movs	r3, #16
 8003042:	2278      	movs	r2, #120	@ 0x78
 8003044:	2196      	movs	r1, #150	@ 0x96
 8003046:	4853      	ldr	r0, [pc, #332]	@ (8003194 <main+0x328>)
 8003048:	f7fe faa4 	bl	8001594 <initEnemy1>
		  if (fase_p1==2){
 800304c:	4b4b      	ldr	r3, [pc, #300]	@ (800317c <main+0x310>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d109      	bne.n	8003068 <main+0x1fc>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 8003054:	2303      	movs	r3, #3
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2314      	movs	r3, #20
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2310      	movs	r3, #16
 800305e:	2250      	movs	r2, #80	@ 0x50
 8003060:	21a0      	movs	r1, #160	@ 0xa0
 8003062:	484d      	ldr	r0, [pc, #308]	@ (8003198 <main+0x32c>)
 8003064:	f7fe feba 	bl	8001ddc <initEnemy2>
			  }
		  }

	  if (fase_p2==1){
 8003068:	4b45      	ldr	r3, [pc, #276]	@ (8003180 <main+0x314>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d11e      	bne.n	80030ae <main+0x242>
	  			//Inicializar enemigo 1
	  			initEnemy1(&e1_4, 170, 120, 16, 19, 3);
 8003070:	2303      	movs	r3, #3
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2313      	movs	r3, #19
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2310      	movs	r3, #16
 800307a:	2278      	movs	r2, #120	@ 0x78
 800307c:	21aa      	movs	r1, #170	@ 0xaa
 800307e:	4847      	ldr	r0, [pc, #284]	@ (800319c <main+0x330>)
 8003080:	f7fe fa88 	bl	8001594 <initEnemy1>
	  			//Inicializar enemigo 2
	  			initEnemy1(&e1_5,230, 100, 16, 19, 3);
 8003084:	2303      	movs	r3, #3
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	2313      	movs	r3, #19
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2310      	movs	r3, #16
 800308e:	2264      	movs	r2, #100	@ 0x64
 8003090:	21e6      	movs	r1, #230	@ 0xe6
 8003092:	4843      	ldr	r0, [pc, #268]	@ (80031a0 <main+0x334>)
 8003094:	f7fe fa7e 	bl	8001594 <initEnemy1>
	  			//Inicializar enemigo 3
	  			initEnemy1(&e1_6,290, 80, 16, 19, 3);}
 8003098:	2303      	movs	r3, #3
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	2313      	movs	r3, #19
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2310      	movs	r3, #16
 80030a2:	2250      	movs	r2, #80	@ 0x50
 80030a4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80030a8:	483e      	ldr	r0, [pc, #248]	@ (80031a4 <main+0x338>)
 80030aa:	f7fe fa73 	bl	8001594 <initEnemy1>

	  		  if (fase_p2==2){
 80030ae:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <main+0x314>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d109      	bne.n	80030ca <main+0x25e>
	  			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 80030b6:	2303      	movs	r3, #3
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2314      	movs	r3, #20
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2310      	movs	r3, #16
 80030c0:	2250      	movs	r2, #80	@ 0x50
 80030c2:	21a0      	movs	r1, #160	@ 0xa0
 80030c4:	4834      	ldr	r0, [pc, #208]	@ (8003198 <main+0x32c>)
 80030c6:	f7fe fe89 	bl	8001ddc <initEnemy2>
	  			  }

	  HitboxPlayer(&p1);
 80030ca:	482e      	ldr	r0, [pc, #184]	@ (8003184 <main+0x318>)
 80030cc:	f7ff fb28 	bl	8002720 <HitboxPlayer>
	  HitboxPlayer(&p2);
 80030d0:	482d      	ldr	r0, [pc, #180]	@ (8003188 <main+0x31c>)
 80030d2:	f7ff fb25 	bl	8002720 <HitboxPlayer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (modo==1){
 80030d6:	4b28      	ldr	r3, [pc, #160]	@ (8003178 <main+0x30c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d16d      	bne.n	80031ba <main+0x34e>
		if (fase_p1==1){
 80030de:	4b27      	ldr	r3, [pc, #156]	@ (800317c <main+0x310>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d126      	bne.n	8003134 <main+0x2c8>
			if(e1_1.isAlive==1){
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <main+0x320>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <main+0x28e>
					animation_e1(&e1_1);
 80030ee:	4827      	ldr	r0, [pc, #156]	@ (800318c <main+0x320>)
 80030f0:	f7fe f936 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_1);}
 80030f4:	4825      	ldr	r0, [pc, #148]	@ (800318c <main+0x320>)
 80030f6:	f7fe f8df 	bl	80012b8 <animation_e1_control>
			if(e1_2.isAlive==1){
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <main+0x324>)
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d105      	bne.n	800310e <main+0x2a2>
				animation_e1(&e1_2);
 8003102:	4823      	ldr	r0, [pc, #140]	@ (8003190 <main+0x324>)
 8003104:	f7fe f92c 	bl	8001360 <animation_e1>
				animation_e1_control(&e1_2);}
 8003108:	4821      	ldr	r0, [pc, #132]	@ (8003190 <main+0x324>)
 800310a:	f7fe f8d5 	bl	80012b8 <animation_e1_control>

			if(e1_2.isAlive==1){
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <main+0x324>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <main+0x2b6>
				animation_e1(&e1_3);
 8003116:	481f      	ldr	r0, [pc, #124]	@ (8003194 <main+0x328>)
 8003118:	f7fe f922 	bl	8001360 <animation_e1>
				animation_e1_control(&e1_3);}
 800311c:	481d      	ldr	r0, [pc, #116]	@ (8003194 <main+0x328>)
 800311e:	f7fe f8cb 	bl	80012b8 <animation_e1_control>

			animation_e1_die(&e1_1);
 8003122:	481a      	ldr	r0, [pc, #104]	@ (800318c <main+0x320>)
 8003124:	f7fe f9e4 	bl	80014f0 <animation_e1_die>
			animation_e1_die(&e1_2);
 8003128:	4819      	ldr	r0, [pc, #100]	@ (8003190 <main+0x324>)
 800312a:	f7fe f9e1 	bl	80014f0 <animation_e1_die>
			animation_e1_die(&e1_3);
 800312e:	4819      	ldr	r0, [pc, #100]	@ (8003194 <main+0x328>)
 8003130:	f7fe f9de 	bl	80014f0 <animation_e1_die>
		}

		if (fase_p1==2){
 8003134:	4b11      	ldr	r3, [pc, #68]	@ (800317c <main+0x310>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d135      	bne.n	80031a8 <main+0x33c>
			moveE2(&e2_1, &p1);
 800313c:	4911      	ldr	r1, [pc, #68]	@ (8003184 <main+0x318>)
 800313e:	4816      	ldr	r0, [pc, #88]	@ (8003198 <main+0x32c>)
 8003140:	f7fe fe86 	bl	8001e50 <moveE2>
			e2_1.delay+=0.5; //1
 8003144:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <main+0x32c>)
 8003146:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800314a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800314e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <main+0x32c>)
 8003154:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			E2_Appear(&e2_1);
 8003158:	480f      	ldr	r0, [pc, #60]	@ (8003198 <main+0x32c>)
 800315a:	f7fe ff95 	bl	8002088 <E2_Appear>
			E2_Hurt(&e2_1);
 800315e:	480e      	ldr	r0, [pc, #56]	@ (8003198 <main+0x32c>)
 8003160:	f7fe ffda 	bl	8002118 <E2_Hurt>
			E2_Die(&e2_1);
 8003164:	480c      	ldr	r0, [pc, #48]	@ (8003198 <main+0x32c>)
 8003166:	f7ff f827 	bl	80021b8 <E2_Die>
 800316a:	e01d      	b.n	80031a8 <main+0x33c>
 800316c:	080063e0 	.word	0x080063e0
 8003170:	200154a4 	.word	0x200154a4
 8003174:	20015414 	.word	0x20015414
 8003178:	20015714 	.word	0x20015714
 800317c:	20015715 	.word	0x20015715
 8003180:	20015716 	.word	0x20015716
 8003184:	200154b0 	.word	0x200154b0
 8003188:	20015524 	.word	0x20015524
 800318c:	20015598 	.word	0x20015598
 8003190:	200155cc 	.word	0x200155cc
 8003194:	20015600 	.word	0x20015600
 8003198:	200156d0 	.word	0x200156d0
 800319c:	20015634 	.word	0x20015634
 80031a0:	20015668 	.word	0x20015668
 80031a4:	2001569c 	.word	0x2001569c
		}

		PlayerAttackAnimation(&p1);
 80031a8:	483a      	ldr	r0, [pc, #232]	@ (8003294 <main+0x428>)
 80031aa:	f7ff fcd1 	bl	8002b50 <PlayerAttackAnimation>
		PlayerDamageAnimation(&p1);
 80031ae:	4839      	ldr	r0, [pc, #228]	@ (8003294 <main+0x428>)
 80031b0:	f7ff fd72 	bl	8002c98 <PlayerDamageAnimation>
		PlayerDieAnimation(&p1);
 80031b4:	4837      	ldr	r0, [pc, #220]	@ (8003294 <main+0x428>)
 80031b6:	f7ff fe13 	bl	8002de0 <PlayerDieAnimation>
		}
		if (modo==2){
 80031ba:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <main+0x42c>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d189      	bne.n	80030d6 <main+0x26a>

			if (fase_p1==1){
 80031c2:	4b36      	ldr	r3, [pc, #216]	@ (800329c <main+0x430>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d126      	bne.n	8003218 <main+0x3ac>
				if(e1_1.isAlive==1){
 80031ca:	4b35      	ldr	r3, [pc, #212]	@ (80032a0 <main+0x434>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <main+0x372>
						animation_e1(&e1_1);
 80031d2:	4833      	ldr	r0, [pc, #204]	@ (80032a0 <main+0x434>)
 80031d4:	f7fe f8c4 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_1);}
 80031d8:	4831      	ldr	r0, [pc, #196]	@ (80032a0 <main+0x434>)
 80031da:	f7fe f86d 	bl	80012b8 <animation_e1_control>
				if(e1_2.isAlive==1){
 80031de:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <main+0x438>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <main+0x386>
					animation_e1(&e1_2);
 80031e6:	482f      	ldr	r0, [pc, #188]	@ (80032a4 <main+0x438>)
 80031e8:	f7fe f8ba 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_2);}
 80031ec:	482d      	ldr	r0, [pc, #180]	@ (80032a4 <main+0x438>)
 80031ee:	f7fe f863 	bl	80012b8 <animation_e1_control>

				if(e1_2.isAlive==1){
 80031f2:	4b2c      	ldr	r3, [pc, #176]	@ (80032a4 <main+0x438>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <main+0x39a>
					animation_e1(&e1_3);
 80031fa:	482b      	ldr	r0, [pc, #172]	@ (80032a8 <main+0x43c>)
 80031fc:	f7fe f8b0 	bl	8001360 <animation_e1>
					animation_e1_control(&e1_3);}
 8003200:	4829      	ldr	r0, [pc, #164]	@ (80032a8 <main+0x43c>)
 8003202:	f7fe f859 	bl	80012b8 <animation_e1_control>
				animation_e1_die(&e1_1);
 8003206:	4826      	ldr	r0, [pc, #152]	@ (80032a0 <main+0x434>)
 8003208:	f7fe f972 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_2);
 800320c:	4825      	ldr	r0, [pc, #148]	@ (80032a4 <main+0x438>)
 800320e:	f7fe f96f 	bl	80014f0 <animation_e1_die>
				animation_e1_die(&e1_3);
 8003212:	4825      	ldr	r0, [pc, #148]	@ (80032a8 <main+0x43c>)
 8003214:	f7fe f96c 	bl	80014f0 <animation_e1_die>
			}

				if (fase_p2==1){
 8003218:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <main+0x440>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d126      	bne.n	800326e <main+0x402>
					if(e1_4.isAlive==1){
 8003220:	4b23      	ldr	r3, [pc, #140]	@ (80032b0 <main+0x444>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <main+0x3c8>
							animation_e1(&e1_4);
 8003228:	4821      	ldr	r0, [pc, #132]	@ (80032b0 <main+0x444>)
 800322a:	f7fe f899 	bl	8001360 <animation_e1>
							animation_e1_control(&e1_4);}
 800322e:	4820      	ldr	r0, [pc, #128]	@ (80032b0 <main+0x444>)
 8003230:	f7fe f842 	bl	80012b8 <animation_e1_control>
					if(e1_5.isAlive==1){
 8003234:	4b1f      	ldr	r3, [pc, #124]	@ (80032b4 <main+0x448>)
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <main+0x3dc>
						animation_e1(&e1_5);
 800323c:	481d      	ldr	r0, [pc, #116]	@ (80032b4 <main+0x448>)
 800323e:	f7fe f88f 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_5);}
 8003242:	481c      	ldr	r0, [pc, #112]	@ (80032b4 <main+0x448>)
 8003244:	f7fe f838 	bl	80012b8 <animation_e1_control>

					if(e1_6.isAlive==1){
 8003248:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <main+0x44c>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <main+0x3f0>
						animation_e1(&e1_6);
 8003250:	4819      	ldr	r0, [pc, #100]	@ (80032b8 <main+0x44c>)
 8003252:	f7fe f885 	bl	8001360 <animation_e1>
						animation_e1_control(&e1_6);}
 8003256:	4818      	ldr	r0, [pc, #96]	@ (80032b8 <main+0x44c>)
 8003258:	f7fe f82e 	bl	80012b8 <animation_e1_control>
					animation_e1_die(&e1_4);
 800325c:	4814      	ldr	r0, [pc, #80]	@ (80032b0 <main+0x444>)
 800325e:	f7fe f947 	bl	80014f0 <animation_e1_die>
					animation_e1_die(&e1_5);
 8003262:	4814      	ldr	r0, [pc, #80]	@ (80032b4 <main+0x448>)
 8003264:	f7fe f944 	bl	80014f0 <animation_e1_die>
					animation_e1_die(&e1_6);
 8003268:	4813      	ldr	r0, [pc, #76]	@ (80032b8 <main+0x44c>)
 800326a:	f7fe f941 	bl	80014f0 <animation_e1_die>
			}

			PlayerAttackAnimation(&p1);
 800326e:	4809      	ldr	r0, [pc, #36]	@ (8003294 <main+0x428>)
 8003270:	f7ff fc6e 	bl	8002b50 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8003274:	4807      	ldr	r0, [pc, #28]	@ (8003294 <main+0x428>)
 8003276:	f7ff fd0f 	bl	8002c98 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 800327a:	4806      	ldr	r0, [pc, #24]	@ (8003294 <main+0x428>)
 800327c:	f7ff fdb0 	bl	8002de0 <PlayerDieAnimation>

			PlayerAttackAnimation(&p2);
 8003280:	480e      	ldr	r0, [pc, #56]	@ (80032bc <main+0x450>)
 8003282:	f7ff fc65 	bl	8002b50 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p2);
 8003286:	480d      	ldr	r0, [pc, #52]	@ (80032bc <main+0x450>)
 8003288:	f7ff fd06 	bl	8002c98 <PlayerDamageAnimation>
			PlayerDieAnimation(&p2);
 800328c:	480b      	ldr	r0, [pc, #44]	@ (80032bc <main+0x450>)
 800328e:	f7ff fda7 	bl	8002de0 <PlayerDieAnimation>
		if (modo==1){
 8003292:	e720      	b.n	80030d6 <main+0x26a>
 8003294:	200154b0 	.word	0x200154b0
 8003298:	20015714 	.word	0x20015714
 800329c:	20015715 	.word	0x20015715
 80032a0:	20015598 	.word	0x20015598
 80032a4:	200155cc 	.word	0x200155cc
 80032a8:	20015600 	.word	0x20015600
 80032ac:	20015716 	.word	0x20015716
 80032b0:	20015634 	.word	0x20015634
 80032b4:	20015668 	.word	0x20015668
 80032b8:	2001569c 	.word	0x2001569c
 80032bc:	20015524 	.word	0x20015524

080032c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b094      	sub	sp, #80	@ 0x50
 80032c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	2234      	movs	r2, #52	@ 0x34
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 f84e 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <SystemClock_Config+0xd0>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <SystemClock_Config+0xd0>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f4:	4b26      	ldr	r3, [pc, #152]	@ (8003390 <SystemClock_Config+0xd0>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003300:	2300      	movs	r3, #0
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4b23      	ldr	r3, [pc, #140]	@ (8003394 <SystemClock_Config+0xd4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800330c:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <SystemClock_Config+0xd4>)
 800330e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <SystemClock_Config+0xd4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003320:	2302      	movs	r3, #2
 8003322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003324:	2301      	movs	r3, #1
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003328:	2310      	movs	r3, #16
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800332c:	2302      	movs	r3, #2
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003330:	2300      	movs	r3, #0
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003334:	2308      	movs	r3, #8
 8003336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003338:	2350      	movs	r3, #80	@ 0x50
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800333c:	2302      	movs	r3, #2
 800333e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003340:	2302      	movs	r3, #2
 8003342:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003344:	2302      	movs	r3, #2
 8003346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fd75 	bl	8004e3c <HAL_RCC_OscConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003358:	f000 fd20 	bl	8003d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800335c:	230f      	movs	r3, #15
 800335e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003360:	2302      	movs	r3, #2
 8003362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800336c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	2102      	movs	r1, #2
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fa9b 	bl	80048b4 <HAL_RCC_ClockConfig>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003384:	f000 fd0a 	bl	8003d9c <Error_Handler>
  }
}
 8003388:	bf00      	nop
 800338a:	3750      	adds	r7, #80	@ 0x50
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000

08003398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800339c:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <MX_SPI1_Init+0x64>)
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <MX_SPI1_Init+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033aa:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033b0:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ca:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033d0:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033d6:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033d8:	2200      	movs	r2, #0
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033dc:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033e4:	220a      	movs	r2, #10
 80033e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033e8:	4804      	ldr	r0, [pc, #16]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033ea:	f001 ffc5 	bl	8005378 <HAL_SPI_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033f4:	f000 fcd2 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200153bc 	.word	0x200153bc
 8003400:	40013000 	.word	0x40013000

08003404 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <MX_UART5_Init+0x4c>)
 800340a:	4a12      	ldr	r2, [pc, #72]	@ (8003454 <MX_UART5_Init+0x50>)
 800340c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800340e:	4b10      	ldr	r3, [pc, #64]	@ (8003450 <MX_UART5_Init+0x4c>)
 8003410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003414:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <MX_UART5_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <MX_UART5_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <MX_UART5_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <MX_UART5_Init+0x4c>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <MX_UART5_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <MX_UART5_Init+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800343a:	4805      	ldr	r0, [pc, #20]	@ (8003450 <MX_UART5_Init+0x4c>)
 800343c:	f002 f825 	bl	800548a <HAL_UART_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003446:	f000 fca9 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20015414 	.word	0x20015414
 8003454:	40005000 	.word	0x40005000

08003458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <MX_USART2_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003490:	f001 fffb 	bl	800548a <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f000 fc7f 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2001545c 	.word	0x2001545c
 80034a8:	40004400 	.word	0x40004400

080034ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	@ 0x28
 80034b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	4b42      	ldr	r3, [pc, #264]	@ (80035d0 <MX_GPIO_Init+0x124>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a41      	ldr	r2, [pc, #260]	@ (80035d0 <MX_GPIO_Init+0x124>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b3f      	ldr	r3, [pc, #252]	@ (80035d0 <MX_GPIO_Init+0x124>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <MX_GPIO_Init+0x124>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	4a3a      	ldr	r2, [pc, #232]	@ (80035d0 <MX_GPIO_Init+0x124>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ee:	4b38      	ldr	r3, [pc, #224]	@ (80035d0 <MX_GPIO_Init+0x124>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <MX_GPIO_Init+0x124>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a33      	ldr	r2, [pc, #204]	@ (80035d0 <MX_GPIO_Init+0x124>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <MX_GPIO_Init+0x124>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <MX_GPIO_Init+0x124>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <MX_GPIO_Init+0x124>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b2a      	ldr	r3, [pc, #168]	@ (80035d0 <MX_GPIO_Init+0x124>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4b26      	ldr	r3, [pc, #152]	@ (80035d0 <MX_GPIO_Init+0x124>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a25      	ldr	r2, [pc, #148]	@ (80035d0 <MX_GPIO_Init+0x124>)
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b23      	ldr	r3, [pc, #140]	@ (80035d0 <MX_GPIO_Init+0x124>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	2182      	movs	r1, #130	@ 0x82
 8003552:	4820      	ldr	r0, [pc, #128]	@ (80035d4 <MX_GPIO_Init+0x128>)
 8003554:	f001 f994 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8003558:	2200      	movs	r2, #0
 800355a:	f240 7113 	movw	r1, #1811	@ 0x713
 800355e:	481e      	ldr	r0, [pc, #120]	@ (80035d8 <MX_GPIO_Init+0x12c>)
 8003560:	f001 f98e 	bl	8004880 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8003564:	2200      	movs	r2, #0
 8003566:	f240 4179 	movw	r1, #1145	@ 0x479
 800356a:	481c      	ldr	r0, [pc, #112]	@ (80035dc <MX_GPIO_Init+0x130>)
 800356c:	f001 f988 	bl	8004880 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8003570:	2382      	movs	r3, #130	@ 0x82
 8003572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003574:	2301      	movs	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4619      	mov	r1, r3
 8003586:	4813      	ldr	r0, [pc, #76]	@ (80035d4 <MX_GPIO_Init+0x128>)
 8003588:	f000 ffe6 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800358c:	f240 7313 	movw	r3, #1811	@ 0x713
 8003590:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003592:	2301      	movs	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800359a:	2302      	movs	r3, #2
 800359c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	480c      	ldr	r0, [pc, #48]	@ (80035d8 <MX_GPIO_Init+0x12c>)
 80035a6:	f000 ffd7 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80035aa:	f240 4379 	movw	r3, #1145	@ 0x479
 80035ae:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b8:	2302      	movs	r3, #2
 80035ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_GPIO_Init+0x130>)
 80035c4:	f000 ffc8 	bl	8004558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035c8:	bf00      	nop
 80035ca:	3728      	adds	r7, #40	@ 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020800 	.word	0x40020800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400

080035e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af06      	add	r7, sp, #24
 80035e6:	6078      	str	r0, [r7, #4]
	if (modo==1){
 80035e8:	4b97      	ldr	r3, [pc, #604]	@ (8003848 <HAL_UART_RxCpltCallback+0x268>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d102      	bne.n	80035f6 <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 80035f0:	4896      	ldr	r0, [pc, #600]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80035f2:	f7ff f895 	bl	8002720 <HitboxPlayer>
	if (modo==2){
 80035f6:	4b94      	ldr	r3, [pc, #592]	@ (8003848 <HAL_UART_RxCpltCallback+0x268>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d105      	bne.n	800360a <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 80035fe:	4893      	ldr	r0, [pc, #588]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003600:	f7ff f88e 	bl	8002720 <HitboxPlayer>
		HitboxPlayer(&p2);
 8003604:	4892      	ldr	r0, [pc, #584]	@ (8003850 <HAL_UART_RxCpltCallback+0x270>)
 8003606:	f7ff f88b 	bl	8002720 <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 800360a:	4b92      	ldr	r3, [pc, #584]	@ (8003854 <HAL_UART_RxCpltCallback+0x274>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b64      	cmp	r3, #100	@ 0x64
 8003610:	d175      	bne.n	80036fe <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003612:	4b8e      	ldr	r3, [pc, #568]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	2b00      	cmp	r3, #0
 8003618:	d171      	bne.n	80036fe <HAL_UART_RxCpltCallback+0x11e>
 800361a:	4b8c      	ldr	r3, [pc, #560]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d16d      	bne.n	80036fe <HAL_UART_RxCpltCallback+0x11e>
 8003622:	4b8a      	ldr	r3, [pc, #552]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d169      	bne.n	80036fe <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 800362a:	4b88      	ldr	r3, [pc, #544]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b87      	ldr	r3, [pc, #540]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	1c58      	adds	r0, r3, #1
 8003638:	4b84      	ldr	r3, [pc, #528]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4b83      	ldr	r3, [pc, #524]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	1c59      	adds	r1, r3, #1
 8003646:	4b81      	ldr	r3, [pc, #516]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	4b7f      	ldr	r3, [pc, #508]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	3301      	adds	r3, #1
 8003652:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003656:	9400      	str	r4, [sp, #0]
 8003658:	f7fd fcce 	bl	8000ff8 <FillRect>
			p1.direction=2;
 800365c:	4b7b      	ldr	r3, [pc, #492]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800365e:	2202      	movs	r2, #2
 8003660:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8003662:	2100      	movs	r1, #0
 8003664:	4879      	ldr	r0, [pc, #484]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003666:	f7fe ff93 	bl	8002590 <playerCanMove>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 8003670:	4b76      	ldr	r3, [pc, #472]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4b75      	ldr	r3, [pc, #468]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4413      	add	r3, r2
 800367a:	4a74      	ldr	r2, [pc, #464]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800367c:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 800367e:	4b73      	ldr	r3, [pc, #460]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003682:	2b09      	cmp	r3, #9
 8003684:	d805      	bhi.n	8003692 <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 8003686:	4b71      	ldr	r3, [pc, #452]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368a:	3301      	adds	r3, #1
 800368c:	4a6f      	ldr	r2, [pc, #444]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800368e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003690:	e002      	b.n	8003698 <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 8003692:	4b6e      	ldr	r3, [pc, #440]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003694:	2200      	movs	r2, #0
 8003696:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 8003698:	486c      	ldr	r0, [pc, #432]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800369a:	f7ff f9d7 	bl	8002a4c <PlayerAnimation>
 800369e:	e02e      	b.n	80036fe <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 80036a0:	4b6a      	ldr	r3, [pc, #424]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b69      	ldr	r3, [pc, #420]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	1c58      	adds	r0, r3, #1
 80036ae:	4b67      	ldr	r3, [pc, #412]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4b66      	ldr	r3, [pc, #408]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	1c59      	adds	r1, r3, #1
 80036bc:	4b63      	ldr	r3, [pc, #396]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	4b62      	ldr	r3, [pc, #392]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	3301      	adds	r3, #1
 80036c8:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80036cc:	9400      	str	r4, [sp, #0]
 80036ce:	f7fd fc93 	bl	8000ff8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 80036d2:	4b5e      	ldr	r3, [pc, #376]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3b08      	subs	r3, #8
 80036d8:	4618      	mov	r0, r3
 80036da:	4b5c      	ldr	r3, [pc, #368]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	3b0c      	subs	r3, #12
 80036e0:	4619      	mov	r1, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9303      	str	r3, [sp, #12]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	230a      	movs	r3, #10
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_UART_RxCpltCallback+0x278>)
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	231a      	movs	r3, #26
 80036f8:	2212      	movs	r2, #18
 80036fa:	f7fd fd31 	bl	8001160 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 80036fe:	4b55      	ldr	r3, [pc, #340]	@ (8003854 <HAL_UART_RxCpltCallback+0x274>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b75      	cmp	r3, #117	@ 0x75
 8003704:	d15c      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003706:	4b51      	ldr	r3, [pc, #324]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	2b00      	cmp	r3, #0
 800370c:	d158      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x1e0>
 800370e:	4b4f      	ldr	r3, [pc, #316]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d154      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x1e0>
 8003716:	4b4d      	ldr	r3, [pc, #308]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d150      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 800371e:	4b4b      	ldr	r3, [pc, #300]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	1c58      	adds	r0, r3, #1
 800372c:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4b46      	ldr	r3, [pc, #280]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	1c59      	adds	r1, r3, #1
 800373a:	4b44      	ldr	r3, [pc, #272]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	4b42      	ldr	r3, [pc, #264]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800374a:	9400      	str	r4, [sp, #0]
 800374c:	f7fd fc54 	bl	8000ff8 <FillRect>
			p1.direction=0;
 8003750:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003752:	2200      	movs	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8003756:	2102      	movs	r1, #2
 8003758:	483c      	ldr	r0, [pc, #240]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800375a:	f7fe ff19 	bl	8002590 <playerCanMove>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d017      	beq.n	8003794 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8003764:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	4b38      	ldr	r3, [pc, #224]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	4a37      	ldr	r2, [pc, #220]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003770:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8003772:	4b36      	ldr	r3, [pc, #216]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	2b09      	cmp	r3, #9
 8003778:	d805      	bhi.n	8003786 <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 800377a:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	3301      	adds	r3, #1
 8003780:	4a32      	ldr	r2, [pc, #200]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003784:	e002      	b.n	800378c <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003788:	2200      	movs	r2, #0
 800378a:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 800378c:	482f      	ldr	r0, [pc, #188]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800378e:	f7ff f95d 	bl	8002a4c <PlayerAnimation>
 8003792:	e015      	b.n	80037c0 <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8003794:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3b08      	subs	r3, #8
 800379a:	4618      	mov	r0, r3
 800379c:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	3b0d      	subs	r3, #13
 80037a2:	4619      	mov	r1, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	9304      	str	r3, [sp, #16]
 80037a8:	2300      	movs	r3, #0
 80037aa:	9303      	str	r3, [sp, #12]
 80037ac:	2300      	movs	r3, #0
 80037ae:	9302      	str	r3, [sp, #8]
 80037b0:	230a      	movs	r3, #10
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <HAL_UART_RxCpltCallback+0x27c>)
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	231a      	movs	r3, #26
 80037ba:	2212      	movs	r2, #18
 80037bc:	f7fd fcd0 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 80037c0:	4b24      	ldr	r3, [pc, #144]	@ (8003854 <HAL_UART_RxCpltCallback+0x274>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b72      	cmp	r3, #114	@ 0x72
 80037c6:	d168      	bne.n	800389a <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80037c8:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d164      	bne.n	800389a <HAL_UART_RxCpltCallback+0x2ba>
 80037d0:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d160      	bne.n	800389a <HAL_UART_RxCpltCallback+0x2ba>
 80037d8:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d15c      	bne.n	800389a <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	1c58      	adds	r0, r3, #1
 80037ee:	4b17      	ldr	r3, [pc, #92]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	1c59      	adds	r1, r3, #1
 80037fc:	4b13      	ldr	r3, [pc, #76]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	3301      	adds	r3, #1
 8003808:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 800380c:	9400      	str	r4, [sp, #0]
 800380e:	f7fd fbf3 	bl	8000ff8 <FillRect>
			p1.direction=1;
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003814:	2201      	movs	r2, #1
 8003816:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8003818:	2101      	movs	r1, #1
 800381a:	480c      	ldr	r0, [pc, #48]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800381c:	f7fe feb8 	bl	8002590 <playerCanMove>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d023      	beq.n	800386e <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b08      	ldr	r3, [pc, #32]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	4413      	add	r3, r2
 8003830:	4a06      	ldr	r2, [pc, #24]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003832:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003838:	2b09      	cmp	r3, #9
 800383a:	d811      	bhi.n	8003860 <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 800383e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003840:	3301      	adds	r3, #1
 8003842:	4a02      	ldr	r2, [pc, #8]	@ (800384c <HAL_UART_RxCpltCallback+0x26c>)
 8003844:	6493      	str	r3, [r2, #72]	@ 0x48
 8003846:	e00e      	b.n	8003866 <HAL_UART_RxCpltCallback+0x286>
 8003848:	20015714 	.word	0x20015714
 800384c:	200154b0 	.word	0x200154b0
 8003850:	20015524 	.word	0x20015524
 8003854:	200154a4 	.word	0x200154a4
 8003858:	200131d4 	.word	0x200131d4
 800385c:	20010d44 	.word	0x20010d44
						} else{
						  p1.animationWalkRight=0;
 8003860:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003862:	2200      	movs	r2, #0
 8003864:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 8003866:	4876      	ldr	r0, [pc, #472]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003868:	f7ff f8f0 	bl	8002a4c <PlayerAnimation>
 800386c:	e015      	b.n	800389a <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 800386e:	4b74      	ldr	r3, [pc, #464]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b0a      	subs	r3, #10
 8003874:	4618      	mov	r0, r3
 8003876:	4b72      	ldr	r3, [pc, #456]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	3b0b      	subs	r3, #11
 800387c:	4619      	mov	r1, r3
 800387e:	2300      	movs	r3, #0
 8003880:	9304      	str	r3, [sp, #16]
 8003882:	2301      	movs	r3, #1
 8003884:	9303      	str	r3, [sp, #12]
 8003886:	2300      	movs	r3, #0
 8003888:	9302      	str	r3, [sp, #8]
 800388a:	230a      	movs	r3, #10
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a44 <HAL_UART_RxCpltCallback+0x464>)
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2317      	movs	r3, #23
 8003894:	2216      	movs	r2, #22
 8003896:	f7fd fc63 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 800389a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a48 <HAL_UART_RxCpltCallback+0x468>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b6c      	cmp	r3, #108	@ 0x6c
 80038a0:	d15c      	bne.n	800395c <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80038a2:	4b67      	ldr	r3, [pc, #412]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d158      	bne.n	800395c <HAL_UART_RxCpltCallback+0x37c>
 80038aa:	4b65      	ldr	r3, [pc, #404]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d154      	bne.n	800395c <HAL_UART_RxCpltCallback+0x37c>
 80038b2:	4b63      	ldr	r3, [pc, #396]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d150      	bne.n	800395c <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFFFFFF);
 80038ba:	4b61      	ldr	r3, [pc, #388]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b60      	ldr	r3, [pc, #384]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	1c58      	adds	r0, r3, #1
 80038c8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	1c59      	adds	r1, r3, #1
 80038d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	4b58      	ldr	r3, [pc, #352]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80038e6:	9400      	str	r4, [sp, #0]
 80038e8:	f7fd fb86 	bl	8000ff8 <FillRect>
			p1.direction=3;
 80038ec:	4b54      	ldr	r3, [pc, #336]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038ee:	2203      	movs	r2, #3
 80038f0:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 80038f2:	2103      	movs	r1, #3
 80038f4:	4852      	ldr	r0, [pc, #328]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80038f6:	f7fe fe4b 	bl	8002590 <playerCanMove>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 8003900:	4b4f      	ldr	r3, [pc, #316]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800390c:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 800390e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	2b09      	cmp	r3, #9
 8003914:	d805      	bhi.n	8003922 <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 8003916:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	3301      	adds	r3, #1
 800391c:	4a48      	ldr	r2, [pc, #288]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800391e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003920:	e002      	b.n	8003928 <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003924:	2200      	movs	r2, #0
 8003926:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 8003928:	4845      	ldr	r0, [pc, #276]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800392a:	f7ff f88f 	bl	8002a4c <PlayerAnimation>
 800392e:	e015      	b.n	800395c <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8003930:	4b43      	ldr	r3, [pc, #268]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b0a      	subs	r3, #10
 8003936:	4618      	mov	r0, r3
 8003938:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	3b0b      	subs	r3, #11
 800393e:	4619      	mov	r1, r3
 8003940:	2300      	movs	r3, #0
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	2300      	movs	r3, #0
 8003946:	9303      	str	r3, [sp, #12]
 8003948:	2300      	movs	r3, #0
 800394a:	9302      	str	r3, [sp, #8]
 800394c:	230a      	movs	r3, #10
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	4b3c      	ldr	r3, [pc, #240]	@ (8003a44 <HAL_UART_RxCpltCallback+0x464>)
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2317      	movs	r3, #23
 8003956:	2216      	movs	r2, #22
 8003958:	f7fd fc02 	bl	8001160 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 800395c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a48 <HAL_UART_RxCpltCallback+0x468>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b62      	cmp	r3, #98	@ 0x62
 8003962:	d122      	bne.n	80039aa <HAL_UART_RxCpltCallback+0x3ca>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11a      	bne.n	80039a2 <HAL_UART_RxCpltCallback+0x3c2>
 800396c:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800396e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <HAL_UART_RxCpltCallback+0x3c2>
 8003974:	4b32      	ldr	r3, [pc, #200]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d112      	bne.n	80039a2 <HAL_UART_RxCpltCallback+0x3c2>
			p1.IsAttack=1;
 800397c:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800397e:	2201      	movs	r2, #1
 8003980:	655a      	str	r2, [r3, #84]	@ 0x54
			p1.animationAttack=0;
 8003982:	4b2f      	ldr	r3, [pc, #188]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	659a      	str	r2, [r3, #88]	@ 0x58
			PlayerHit(&p1, &e1_1);
 800398a:	4930      	ldr	r1, [pc, #192]	@ (8003a4c <HAL_UART_RxCpltCallback+0x46c>)
 800398c:	482c      	ldr	r0, [pc, #176]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800398e:	f7fe ff7d 	bl	800288c <PlayerHit>
			PlayerHit(&p1, &e1_2);
 8003992:	492f      	ldr	r1, [pc, #188]	@ (8003a50 <HAL_UART_RxCpltCallback+0x470>)
 8003994:	482a      	ldr	r0, [pc, #168]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 8003996:	f7fe ff79 	bl	800288c <PlayerHit>
			PlayerHit(&p1, &e1_3);}
 800399a:	492e      	ldr	r1, [pc, #184]	@ (8003a54 <HAL_UART_RxCpltCallback+0x474>)
 800399c:	4828      	ldr	r0, [pc, #160]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 800399e:	f7fe ff75 	bl	800288c <PlayerHit>
			PlayerHit_E2(&p1, &e2_1);
 80039a2:	492d      	ldr	r1, [pc, #180]	@ (8003a58 <HAL_UART_RxCpltCallback+0x478>)
 80039a4:	4826      	ldr	r0, [pc, #152]	@ (8003a40 <HAL_UART_RxCpltCallback+0x460>)
 80039a6:	f7fe fc65 	bl	8002274 <PlayerHit_E2>

	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 80039aa:	4b27      	ldr	r3, [pc, #156]	@ (8003a48 <HAL_UART_RxCpltCallback+0x468>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b31      	cmp	r3, #49	@ 0x31
 80039b0:	d16c      	bne.n	8003a8c <HAL_UART_RxCpltCallback+0x4ac>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80039b2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d168      	bne.n	8003a8c <HAL_UART_RxCpltCallback+0x4ac>
 80039ba:	4b28      	ldr	r3, [pc, #160]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d164      	bne.n	8003a8c <HAL_UART_RxCpltCallback+0x4ac>
 80039c2:	4b26      	ldr	r3, [pc, #152]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d160      	bne.n	8003a8c <HAL_UART_RxCpltCallback+0x4ac>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 80039ca:	4b24      	ldr	r3, [pc, #144]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	1c58      	adds	r0, r3, #1
 80039d8:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	3301      	adds	r3, #1
 80039f2:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 80039f6:	9400      	str	r4, [sp, #0]
 80039f8:	f7fd fafe 	bl	8000ff8 <FillRect>
				p2.direction=0;
 80039fc:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 8003a02:	2102      	movs	r1, #2
 8003a04:	4815      	ldr	r0, [pc, #84]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a06:	f7fe fdc3 	bl	8002590 <playerCanMove>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d027      	beq.n	8003a60 <HAL_UART_RxCpltCallback+0x480>
					p2.y=p2.y-p2.speed;
 8003a10:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	4a10      	ldr	r2, [pc, #64]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a1c:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	2b09      	cmp	r3, #9
 8003a24:	d805      	bhi.n	8003a32 <HAL_UART_RxCpltCallback+0x452>
							p2.animationWalkUp+=1;
 8003a26:	4b0d      	ldr	r3, [pc, #52]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a30:	e002      	b.n	8003a38 <HAL_UART_RxCpltCallback+0x458>
							} else{
							  p2.animationWalkUp=0;
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 8003a38:	4808      	ldr	r0, [pc, #32]	@ (8003a5c <HAL_UART_RxCpltCallback+0x47c>)
 8003a3a:	f7ff f807 	bl	8002a4c <PlayerAnimation>
 8003a3e:	e025      	b.n	8003a8c <HAL_UART_RxCpltCallback+0x4ac>
 8003a40:	200154b0 	.word	0x200154b0
 8003a44:	2000e5bc 	.word	0x2000e5bc
 8003a48:	200154a4 	.word	0x200154a4
 8003a4c:	20015598 	.word	0x20015598
 8003a50:	200155cc 	.word	0x200155cc
 8003a54:	20015600 	.word	0x20015600
 8003a58:	200156d0 	.word	0x200156d0
 8003a5c:	20015524 	.word	0x20015524
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8003a60:	4b9a      	ldr	r3, [pc, #616]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3b08      	subs	r3, #8
 8003a66:	4618      	mov	r0, r3
 8003a68:	4b98      	ldr	r3, [pc, #608]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	3b0d      	subs	r3, #13
 8003a6e:	4619      	mov	r1, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	9304      	str	r3, [sp, #16]
 8003a74:	2300      	movs	r3, #0
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9302      	str	r3, [sp, #8]
 8003a7c:	230a      	movs	r3, #10
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	4b93      	ldr	r3, [pc, #588]	@ (8003cd0 <HAL_UART_RxCpltCallback+0x6f0>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	231a      	movs	r3, #26
 8003a86:	2212      	movs	r2, #18
 8003a88:	f7fd fb6a 	bl	8001160 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 8003a8c:	4b91      	ldr	r3, [pc, #580]	@ (8003cd4 <HAL_UART_RxCpltCallback+0x6f4>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b32      	cmp	r3, #50	@ 0x32
 8003a92:	d15c      	bne.n	8003b4e <HAL_UART_RxCpltCallback+0x56e>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8003a94:	4b8d      	ldr	r3, [pc, #564]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d158      	bne.n	8003b4e <HAL_UART_RxCpltCallback+0x56e>
 8003a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d154      	bne.n	8003b4e <HAL_UART_RxCpltCallback+0x56e>
 8003aa4:	4b89      	ldr	r3, [pc, #548]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d150      	bne.n	8003b4e <HAL_UART_RxCpltCallback+0x56e>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 8003aac:	4b87      	ldr	r3, [pc, #540]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b86      	ldr	r3, [pc, #536]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	1c58      	adds	r0, r3, #1
 8003aba:	4b84      	ldr	r3, [pc, #528]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4b83      	ldr	r3, [pc, #524]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	1c59      	adds	r1, r3, #1
 8003ac8:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	4b7f      	ldr	r3, [pc, #508]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003ad8:	9400      	str	r4, [sp, #0]
 8003ada:	f7fd fa8d 	bl	8000ff8 <FillRect>
			p2.direction=1;
 8003ade:	4b7b      	ldr	r3, [pc, #492]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4879      	ldr	r0, [pc, #484]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003ae8:	f7fe fd52 	bl	8002590 <playerCanMove>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <HAL_UART_RxCpltCallback+0x542>
				p2.x=p2.x+p2.speed;
 8003af2:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b75      	ldr	r3, [pc, #468]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	4a73      	ldr	r2, [pc, #460]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003afe:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 8003b00:	4b72      	ldr	r3, [pc, #456]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	d805      	bhi.n	8003b14 <HAL_UART_RxCpltCallback+0x534>
						p2.animationWalkRight+=1;
 8003b08:	4b70      	ldr	r3, [pc, #448]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a6f      	ldr	r2, [pc, #444]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b10:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b12:	e002      	b.n	8003b1a <HAL_UART_RxCpltCallback+0x53a>
						} else{
						  p2.animationWalkRight=0;
 8003b14:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 8003b1a:	486c      	ldr	r0, [pc, #432]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b1c:	f7fe ff96 	bl	8002a4c <PlayerAnimation>
 8003b20:	e015      	b.n	8003b4e <HAL_UART_RxCpltCallback+0x56e>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8003b22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3b0a      	subs	r3, #10
 8003b28:	4618      	mov	r0, r3
 8003b2a:	4b68      	ldr	r3, [pc, #416]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	3b0b      	subs	r3, #11
 8003b30:	4619      	mov	r1, r3
 8003b32:	2300      	movs	r3, #0
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	2301      	movs	r3, #1
 8003b38:	9303      	str	r3, [sp, #12]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9302      	str	r3, [sp, #8]
 8003b3e:	230a      	movs	r3, #10
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	4b65      	ldr	r3, [pc, #404]	@ (8003cd8 <HAL_UART_RxCpltCallback+0x6f8>)
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2317      	movs	r3, #23
 8003b48:	2216      	movs	r2, #22
 8003b4a:	f7fd fb09 	bl	8001160 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 8003b4e:	4b61      	ldr	r3, [pc, #388]	@ (8003cd4 <HAL_UART_RxCpltCallback+0x6f4>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b33      	cmp	r3, #51	@ 0x33
 8003b54:	d175      	bne.n	8003c42 <HAL_UART_RxCpltCallback+0x662>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8003b56:	4b5d      	ldr	r3, [pc, #372]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d171      	bne.n	8003c42 <HAL_UART_RxCpltCallback+0x662>
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d16d      	bne.n	8003c42 <HAL_UART_RxCpltCallback+0x662>
 8003b66:	4b59      	ldr	r3, [pc, #356]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d169      	bne.n	8003c42 <HAL_UART_RxCpltCallback+0x662>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 8003b6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b56      	ldr	r3, [pc, #344]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	1c58      	adds	r0, r3, #1
 8003b7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	4b52      	ldr	r3, [pc, #328]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	4b50      	ldr	r3, [pc, #320]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4b4e      	ldr	r3, [pc, #312]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003b9a:	9400      	str	r4, [sp, #0]
 8003b9c:	f7fd fa2c 	bl	8000ff8 <FillRect>
			p2.direction=2;
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4848      	ldr	r0, [pc, #288]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003baa:	f7fe fcf1 	bl	8002590 <playerCanMove>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d017      	beq.n	8003be4 <HAL_UART_RxCpltCallback+0x604>
		    p2.y=p2.y+p2.speed;
 8003bb4:	4b45      	ldr	r3, [pc, #276]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	4b44      	ldr	r3, [pc, #272]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a43      	ldr	r2, [pc, #268]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bc0:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 8003bc2:	4b42      	ldr	r3, [pc, #264]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc6:	2b09      	cmp	r3, #9
 8003bc8:	d805      	bhi.n	8003bd6 <HAL_UART_RxCpltCallback+0x5f6>
		    		p2.animationWalkDown+=1;
 8003bca:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd4:	e002      	b.n	8003bdc <HAL_UART_RxCpltCallback+0x5fc>
		    			} else{
		    				p2.animationWalkDown=0;
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 8003bdc:	483b      	ldr	r0, [pc, #236]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bde:	f7fe ff35 	bl	8002a4c <PlayerAnimation>
 8003be2:	e02e      	b.n	8003c42 <HAL_UART_RxCpltCallback+0x662>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 8003be4:	4b39      	ldr	r3, [pc, #228]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	1c58      	adds	r0, r3, #1
 8003bf2:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	4b35      	ldr	r3, [pc, #212]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	1c59      	adds	r1, r3, #1
 8003c00:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	4b31      	ldr	r3, [pc, #196]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003c10:	9400      	str	r4, [sp, #0]
 8003c12:	f7fd f9f1 	bl	8000ff8 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 8003c16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3b08      	subs	r3, #8
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	3b0c      	subs	r3, #12
 8003c24:	4619      	mov	r1, r3
 8003c26:	2300      	movs	r3, #0
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9303      	str	r3, [sp, #12]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9302      	str	r3, [sp, #8]
 8003c32:	230a      	movs	r3, #10
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	4b29      	ldr	r3, [pc, #164]	@ (8003cdc <HAL_UART_RxCpltCallback+0x6fc>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	231a      	movs	r3, #26
 8003c3c:	2212      	movs	r2, #18
 8003c3e:	f7fd fa8f 	bl	8001160 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 8003c42:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <HAL_UART_RxCpltCallback+0x6f4>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b34      	cmp	r3, #52	@ 0x34
 8003c48:	d167      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x73a>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d163      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x73a>
 8003c52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d15f      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x73a>
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d15b      	bne.n	8003d1a <HAL_UART_RxCpltCallback+0x73a>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFFFFFF);
 8003c62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	1c58      	adds	r0, r3, #1
 8003c70:	4b16      	ldr	r3, [pc, #88]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f06f 447f 	mvn.w	r4, #4278190080	@ 0xff000000
 8003c8e:	9400      	str	r4, [sp, #0]
 8003c90:	f7fd f9b2 	bl	8000ff8 <FillRect>
			p2.direction=3;
 8003c94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c96:	2203      	movs	r2, #3
 8003c98:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	480b      	ldr	r0, [pc, #44]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003c9e:	f7fe fc77 	bl	8002590 <playerCanMove>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d022      	beq.n	8003cee <HAL_UART_RxCpltCallback+0x70e>
				p2.x=p2.x-p2.speed;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b07      	ldr	r3, [pc, #28]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	4a06      	ldr	r2, [pc, #24]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003cb4:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 8003cb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	d810      	bhi.n	8003ce0 <HAL_UART_RxCpltCallback+0x700>
						p2.animationWalkLeft+=1;
 8003cbe:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	4a01      	ldr	r2, [pc, #4]	@ (8003ccc <HAL_UART_RxCpltCallback+0x6ec>)
 8003cc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cc8:	e00d      	b.n	8003ce6 <HAL_UART_RxCpltCallback+0x706>
 8003cca:	bf00      	nop
 8003ccc:	20015524 	.word	0x20015524
 8003cd0:	20010d44 	.word	0x20010d44
 8003cd4:	200154a4 	.word	0x200154a4
 8003cd8:	2000e5bc 	.word	0x2000e5bc
 8003cdc:	200131d4 	.word	0x200131d4
						} else{
						  p2.animationWalkLeft=0;
 8003ce0:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 8003ce6:	4825      	ldr	r0, [pc, #148]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003ce8:	f7fe feb0 	bl	8002a4c <PlayerAnimation>
 8003cec:	e015      	b.n	8003d1a <HAL_UART_RxCpltCallback+0x73a>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3b0a      	subs	r3, #10
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	3b0b      	subs	r3, #11
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	2300      	movs	r3, #0
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <HAL_UART_RxCpltCallback+0x7a0>)
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2317      	movs	r3, #23
 8003d14:	2216      	movs	r2, #22
 8003d16:	f7fd fa23 	bl	8001160 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d84 <HAL_UART_RxCpltCallback+0x7a4>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b35      	cmp	r3, #53	@ 0x35
 8003d20:	d122      	bne.n	8003d68 <HAL_UART_RxCpltCallback+0x788>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 8003d22:	4b16      	ldr	r3, [pc, #88]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11a      	bne.n	8003d60 <HAL_UART_RxCpltCallback+0x780>
 8003d2a:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <HAL_UART_RxCpltCallback+0x780>
 8003d32:	4b12      	ldr	r3, [pc, #72]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d112      	bne.n	8003d60 <HAL_UART_RxCpltCallback+0x780>
			p2.IsAttack=1;
 8003d3a:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
			p2.animationAttack=0;
 8003d40:	4b0e      	ldr	r3, [pc, #56]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	659a      	str	r2, [r3, #88]	@ 0x58
			PlayerHit(&p2, &e1_1);
 8003d48:	490f      	ldr	r1, [pc, #60]	@ (8003d88 <HAL_UART_RxCpltCallback+0x7a8>)
 8003d4a:	480c      	ldr	r0, [pc, #48]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d4c:	f7fe fd9e 	bl	800288c <PlayerHit>
			PlayerHit(&p2, &e1_2);
 8003d50:	490e      	ldr	r1, [pc, #56]	@ (8003d8c <HAL_UART_RxCpltCallback+0x7ac>)
 8003d52:	480a      	ldr	r0, [pc, #40]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d54:	f7fe fd9a 	bl	800288c <PlayerHit>
			PlayerHit(&p2, &e1_3);}
 8003d58:	490d      	ldr	r1, [pc, #52]	@ (8003d90 <HAL_UART_RxCpltCallback+0x7b0>)
 8003d5a:	4808      	ldr	r0, [pc, #32]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d5c:	f7fe fd96 	bl	800288c <PlayerHit>
			PlayerHit_E2(&p2, &e2_1);
 8003d60:	490c      	ldr	r1, [pc, #48]	@ (8003d94 <HAL_UART_RxCpltCallback+0x7b4>)
 8003d62:	4806      	ldr	r0, [pc, #24]	@ (8003d7c <HAL_UART_RxCpltCallback+0x79c>)
 8003d64:	f7fe fa86 	bl	8002274 <PlayerHit_E2>
	}


	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart5, buffer, 1);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4906      	ldr	r1, [pc, #24]	@ (8003d84 <HAL_UART_RxCpltCallback+0x7a4>)
 8003d6c:	480a      	ldr	r0, [pc, #40]	@ (8003d98 <HAL_UART_RxCpltCallback+0x7b8>)
 8003d6e:	f001 fbdc 	bl	800552a <HAL_UART_Receive_IT>
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20015524 	.word	0x20015524
 8003d80:	2000e5bc 	.word	0x2000e5bc
 8003d84:	200154a4 	.word	0x200154a4
 8003d88:	20015598 	.word	0x20015598
 8003d8c:	200155cc 	.word	0x200155cc
 8003d90:	20015600 	.word	0x20015600
 8003d94:	200156d0 	.word	0x200156d0
 8003d98:	20015414 	.word	0x20015414

08003d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003da0:	b672      	cpsid	i
}
 8003da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <Error_Handler+0x8>

08003da8 <HAL_MspInit>:
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <HAL_MspInit+0x4c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	4a0f      	ldr	r2, [pc, #60]	@ (8003df4 <HAL_MspInit+0x4c>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <HAL_MspInit+0x4c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_MspInit+0x4c>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <HAL_MspInit+0x4c>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_MspInit+0x4c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_SPI_MspInit>:
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	@ 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <HAL_SPI_MspInit+0x84>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12b      	bne.n	8003e72 <HAL_SPI_MspInit+0x7a>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	4a17      	ldr	r2, [pc, #92]	@ (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e2a:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4a10      	ldr	r2, [pc, #64]	@ (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e46:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_SPI_MspInit+0x88>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	23e0      	movs	r3, #224	@ 0xe0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	2302      	movs	r3, #2
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	2303      	movs	r3, #3
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	2305      	movs	r3, #5
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4805      	ldr	r0, [pc, #20]	@ (8003e84 <HAL_SPI_MspInit+0x8c>)
 8003e6e:	f000 fb73 	bl	8004558 <HAL_GPIO_Init>
 8003e72:	bf00      	nop
 8003e74:	3728      	adds	r7, #40	@ 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40013000 	.word	0x40013000
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40020000 	.word	0x40020000

08003e88 <HAL_UART_MspInit>:
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	@ 0x30
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	f107 031c 	add.w	r3, r7, #28
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a49      	ldr	r2, [pc, #292]	@ (8003fcc <HAL_UART_MspInit+0x144>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d153      	bne.n	8003f52 <HAL_UART_MspInit+0xca>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	4a47      	ldr	r2, [pc, #284]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003eb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eba:	4b45      	ldr	r3, [pc, #276]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	4b41      	ldr	r3, [pc, #260]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	4a40      	ldr	r2, [pc, #256]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	4a39      	ldr	r2, [pc, #228]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef2:	4b37      	ldr	r3, [pc, #220]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	2302      	movs	r3, #2
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f10:	2308      	movs	r3, #8
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f14:	f107 031c 	add.w	r3, r7, #28
 8003f18:	4619      	mov	r1, r3
 8003f1a:	482e      	ldr	r0, [pc, #184]	@ (8003fd4 <HAL_UART_MspInit+0x14c>)
 8003f1c:	f000 fb1c 	bl	8004558 <HAL_GPIO_Init>
 8003f20:	2304      	movs	r3, #4
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	2302      	movs	r3, #2
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f30:	2308      	movs	r3, #8
 8003f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4827      	ldr	r0, [pc, #156]	@ (8003fd8 <HAL_UART_MspInit+0x150>)
 8003f3c:	f000 fb0c 	bl	8004558 <HAL_GPIO_Init>
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	2035      	movs	r0, #53	@ 0x35
 8003f46:	f000 fa3e 	bl	80043c6 <HAL_NVIC_SetPriority>
 8003f4a:	2035      	movs	r0, #53	@ 0x35
 8003f4c:	f000 fa57 	bl	80043fe <HAL_NVIC_EnableIRQ>
 8003f50:	e038      	b.n	8003fc4 <HAL_UART_MspInit+0x13c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a21      	ldr	r2, [pc, #132]	@ (8003fdc <HAL_UART_MspInit+0x154>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d133      	bne.n	8003fc4 <HAL_UART_MspInit+0x13c>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6c:	4b18      	ldr	r3, [pc, #96]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	4b14      	ldr	r3, [pc, #80]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	4a13      	ldr	r2, [pc, #76]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <HAL_UART_MspInit+0x148>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	230c      	movs	r3, #12
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	2302      	movs	r3, #2
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	4619      	mov	r1, r3
 8003fae:	480c      	ldr	r0, [pc, #48]	@ (8003fe0 <HAL_UART_MspInit+0x158>)
 8003fb0:	f000 fad2 	bl	8004558 <HAL_GPIO_Init>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2026      	movs	r0, #38	@ 0x26
 8003fba:	f000 fa04 	bl	80043c6 <HAL_NVIC_SetPriority>
 8003fbe:	2026      	movs	r0, #38	@ 0x26
 8003fc0:	f000 fa1d 	bl	80043fe <HAL_NVIC_EnableIRQ>
 8003fc4:	bf00      	nop
 8003fc6:	3730      	adds	r7, #48	@ 0x30
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40005000 	.word	0x40005000
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40020000 	.word	0x40020000

08003fe4 <NMI_Handler>:
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <NMI_Handler+0x4>

08003fec <HardFault_Handler>:
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <HardFault_Handler+0x4>

08003ff4 <MemManage_Handler>:
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <MemManage_Handler+0x4>

08003ffc <BusFault_Handler>:
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <BusFault_Handler+0x4>

08004004 <UsageFault_Handler>:
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <UsageFault_Handler+0x4>

0800400c <SVC_Handler>:
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <DebugMon_Handler>:
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <PendSV_Handler>:
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <SysTick_Handler>:
 8004036:	b580      	push	{r7, lr}
 8004038:	af00      	add	r7, sp, #0
 800403a:	f000 f8a5 	bl	8004188 <HAL_IncTick>
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <USART2_IRQHandler>:
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
 8004048:	4802      	ldr	r0, [pc, #8]	@ (8004054 <USART2_IRQHandler+0x10>)
 800404a:	f001 fa93 	bl	8005574 <HAL_UART_IRQHandler>
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2001545c 	.word	0x2001545c

08004058 <UART5_IRQHandler>:
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
 800405c:	4802      	ldr	r0, [pc, #8]	@ (8004068 <UART5_IRQHandler+0x10>)
 800405e:	f001 fa89 	bl	8005574 <HAL_UART_IRQHandler>
 8004062:	bf00      	nop
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20015414 	.word	0x20015414

0800406c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <SystemInit+0x20>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	4a05      	ldr	r2, [pc, #20]	@ (800408c <SystemInit+0x20>)
 8004078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800407c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004094:	f7ff ffea 	bl	800406c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004098:	480c      	ldr	r0, [pc, #48]	@ (80040cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800409a:	490d      	ldr	r1, [pc, #52]	@ (80040d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800409e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a0:	e002      	b.n	80040a8 <LoopCopyDataInit>

080040a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040a6:	3304      	adds	r3, #4

080040a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040ac:	d3f9      	bcc.n	80040a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ae:	4a0a      	ldr	r2, [pc, #40]	@ (80040d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b0:	4c0a      	ldr	r4, [pc, #40]	@ (80040dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80040b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b4:	e001      	b.n	80040ba <LoopFillZerobss>

080040b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040b8:	3204      	adds	r2, #4

080040ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040bc:	d3fb      	bcc.n	80040b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80040be:	f002 f95f 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040c2:	f7fe fed3 	bl	8002e6c <main>
  bx  lr    
 80040c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d0:	200153a0 	.word	0x200153a0
  ldr r2, =_sidata
 80040d4:	0802bc08 	.word	0x0802bc08
  ldr r2, =_sbss
 80040d8:	200153a0 	.word	0x200153a0
  ldr r4, =_ebss
 80040dc:	2001571c 	.word	0x2001571c

080040e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e0:	e7fe      	b.n	80040e0 <ADC_IRQHandler>
	...

080040e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <HAL_Init+0x40>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <HAL_Init+0x40>)
 80040ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <HAL_Init+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004124 <HAL_Init+0x40>)
 80040fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004100:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <HAL_Init+0x40>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a07      	ldr	r2, [pc, #28]	@ (8004124 <HAL_Init+0x40>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800410c:	2003      	movs	r0, #3
 800410e:	f000 f94f 	bl	80043b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004112:	200f      	movs	r0, #15
 8004114:	f000 f808 	bl	8004128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004118:	f7ff fe46 	bl	8003da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023c00 	.word	0x40023c00

08004128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004130:	4b12      	ldr	r3, [pc, #72]	@ (800417c <HAL_InitTick+0x54>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_InitTick+0x58>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800413e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f967 	bl	800441a <HAL_SYSTICK_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e00e      	b.n	8004174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0f      	cmp	r3, #15
 800415a:	d80a      	bhi.n	8004172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800415c:	2200      	movs	r2, #0
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	f000 f92f 	bl	80043c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004168:	4a06      	ldr	r2, [pc, #24]	@ (8004184 <HAL_InitTick+0x5c>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20015394 	.word	0x20015394
 8004180:	2001539c 	.word	0x2001539c
 8004184:	20015398 	.word	0x20015398

08004188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_IncTick+0x20>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_IncTick+0x24>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4413      	add	r3, r2
 8004198:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <HAL_IncTick+0x24>)
 800419a:	6013      	str	r3, [r2, #0]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2001539c 	.word	0x2001539c
 80041ac:	20015718 	.word	0x20015718

080041b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return uwTick;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_GetTick+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20015718 	.word	0x20015718

080041c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff ffee 	bl	80041b0 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d005      	beq.n	80041ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <HAL_Delay+0x44>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041ee:	bf00      	nop
 80041f0:	f7ff ffde 	bl	80041b0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d8f7      	bhi.n	80041f0 <HAL_Delay+0x28>
  {
  }
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	2001539c 	.word	0x2001539c

08004210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800422c:	4013      	ands	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800423c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004242:	4a04      	ldr	r2, [pc, #16]	@ (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800425c:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <__NVIC_GetPriorityGrouping+0x18>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0307 	and.w	r3, r3, #7
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db0b      	blt.n	800429e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	4907      	ldr	r1, [pc, #28]	@ (80042ac <__NVIC_EnableIRQ+0x38>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2001      	movs	r0, #1
 8004296:	fa00 f202 	lsl.w	r2, r0, r2
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db0a      	blt.n	80042da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	490c      	ldr	r1, [pc, #48]	@ (80042fc <__NVIC_SetPriority+0x4c>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	440b      	add	r3, r1
 80042d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d8:	e00a      	b.n	80042f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4908      	ldr	r1, [pc, #32]	@ (8004300 <__NVIC_SetPriority+0x50>)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	3b04      	subs	r3, #4
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	440b      	add	r3, r1
 80042ee:	761a      	strb	r2, [r3, #24]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000e100 	.word	0xe000e100
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	@ 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f1c3 0307 	rsb	r3, r3, #7
 800431e:	2b04      	cmp	r3, #4
 8004320:	bf28      	it	cs
 8004322:	2304      	movcs	r3, #4
 8004324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3304      	adds	r3, #4
 800432a:	2b06      	cmp	r3, #6
 800432c:	d902      	bls.n	8004334 <NVIC_EncodePriority+0x30>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3b03      	subs	r3, #3
 8004332:	e000      	b.n	8004336 <NVIC_EncodePriority+0x32>
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	401a      	ands	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800434c:	f04f 31ff 	mov.w	r1, #4294967295
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	43d9      	mvns	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	4313      	orrs	r3, r2
         );
}
 800435e:	4618      	mov	r0, r3
 8004360:	3724      	adds	r7, #36	@ 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800437c:	d301      	bcc.n	8004382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800437e:	2301      	movs	r3, #1
 8004380:	e00f      	b.n	80043a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004382:	4a0a      	ldr	r2, [pc, #40]	@ (80043ac <SysTick_Config+0x40>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3b01      	subs	r3, #1
 8004388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438a:	210f      	movs	r1, #15
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	f7ff ff8e 	bl	80042b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <SysTick_Config+0x40>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439a:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <SysTick_Config+0x40>)
 800439c:	2207      	movs	r2, #7
 800439e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	e000e010 	.word	0xe000e010

080043b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff29 	bl	8004210 <__NVIC_SetPriorityGrouping>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043d8:	f7ff ff3e 	bl	8004258 <__NVIC_GetPriorityGrouping>
 80043dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	6978      	ldr	r0, [r7, #20]
 80043e4:	f7ff ff8e 	bl	8004304 <NVIC_EncodePriority>
 80043e8:	4602      	mov	r2, r0
 80043ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff5d 	bl	80042b0 <__NVIC_SetPriority>
}
 80043f6:	bf00      	nop
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	4603      	mov	r3, r0
 8004406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff31 	bl	8004274 <__NVIC_EnableIRQ>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ffa2 	bl	800436c <SysTick_Config>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004440:	f7ff feb6 	bl	80041b0 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d008      	beq.n	8004464 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2280      	movs	r2, #128	@ 0x80
 8004456:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e052      	b.n	800450a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0216 	bic.w	r2, r2, #22
 8004472:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004482:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <HAL_DMA_Abort+0x62>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0208 	bic.w	r2, r2, #8
 80044a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b4:	e013      	b.n	80044de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044b6:	f7ff fe7b 	bl	80041b0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d90c      	bls.n	80044de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2203      	movs	r2, #3
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e015      	b.n	800450a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e4      	bne.n	80044b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f0:	223f      	movs	r2, #63	@ 0x3f
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d004      	beq.n	8004530 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2280      	movs	r2, #128	@ 0x80
 800452a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e00c      	b.n	800454a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2205      	movs	r2, #5
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	@ 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e165      	b.n	8004840 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004574:	2201      	movs	r2, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	f040 8154 	bne.w	800483a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d005      	beq.n	80045aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d130      	bne.n	800460c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e0:	2201      	movs	r2, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 0201 	and.w	r2, r3, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d017      	beq.n	8004648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d123      	bne.n	800469c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	08da      	lsrs	r2, r3, #3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3208      	adds	r2, #8
 800465c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	220f      	movs	r2, #15
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	69b9      	ldr	r1, [r7, #24]
 8004698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0203 	and.w	r2, r3, #3
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ae 	beq.w	800483a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004858 <HAL_GPIO_Init+0x300>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004858 <HAL_GPIO_Init+0x300>)
 80046e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004858 <HAL_GPIO_Init+0x300>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046fa:	4a58      	ldr	r2, [pc, #352]	@ (800485c <HAL_GPIO_Init+0x304>)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4f      	ldr	r2, [pc, #316]	@ (8004860 <HAL_GPIO_Init+0x308>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d025      	beq.n	8004772 <HAL_GPIO_Init+0x21a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4e      	ldr	r2, [pc, #312]	@ (8004864 <HAL_GPIO_Init+0x30c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <HAL_GPIO_Init+0x216>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4d      	ldr	r2, [pc, #308]	@ (8004868 <HAL_GPIO_Init+0x310>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d019      	beq.n	800476a <HAL_GPIO_Init+0x212>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4c      	ldr	r2, [pc, #304]	@ (800486c <HAL_GPIO_Init+0x314>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_GPIO_Init+0x20e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4b      	ldr	r2, [pc, #300]	@ (8004870 <HAL_GPIO_Init+0x318>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00d      	beq.n	8004762 <HAL_GPIO_Init+0x20a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4a      	ldr	r2, [pc, #296]	@ (8004874 <HAL_GPIO_Init+0x31c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <HAL_GPIO_Init+0x206>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a49      	ldr	r2, [pc, #292]	@ (8004878 <HAL_GPIO_Init+0x320>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_GPIO_Init+0x202>
 8004756:	2306      	movs	r3, #6
 8004758:	e00c      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800475a:	2307      	movs	r3, #7
 800475c:	e00a      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800475e:	2305      	movs	r3, #5
 8004760:	e008      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 8004762:	2304      	movs	r3, #4
 8004764:	e006      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 8004766:	2303      	movs	r3, #3
 8004768:	e004      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800476a:	2302      	movs	r3, #2
 800476c:	e002      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_GPIO_Init+0x21c>
 8004772:	2300      	movs	r3, #0
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	f002 0203 	and.w	r2, r2, #3
 800477a:	0092      	lsls	r2, r2, #2
 800477c:	4093      	lsls	r3, r2
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004784:	4935      	ldr	r1, [pc, #212]	@ (800485c <HAL_GPIO_Init+0x304>)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	3302      	adds	r3, #2
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004792:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <HAL_GPIO_Init+0x324>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047b6:	4a31      	ldr	r2, [pc, #196]	@ (800487c <HAL_GPIO_Init+0x324>)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047bc:	4b2f      	ldr	r3, [pc, #188]	@ (800487c <HAL_GPIO_Init+0x324>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047e0:	4a26      	ldr	r2, [pc, #152]	@ (800487c <HAL_GPIO_Init+0x324>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047e6:	4b25      	ldr	r3, [pc, #148]	@ (800487c <HAL_GPIO_Init+0x324>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800480a:	4a1c      	ldr	r2, [pc, #112]	@ (800487c <HAL_GPIO_Init+0x324>)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004810:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <HAL_GPIO_Init+0x324>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004834:	4a11      	ldr	r2, [pc, #68]	@ (800487c <HAL_GPIO_Init+0x324>)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	f67f ae96 	bls.w	8004574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3724      	adds	r7, #36	@ 0x24
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	40013800 	.word	0x40013800
 8004860:	40020000 	.word	0x40020000
 8004864:	40020400 	.word	0x40020400
 8004868:	40020800 	.word	0x40020800
 800486c:	40020c00 	.word	0x40020c00
 8004870:	40021000 	.word	0x40021000
 8004874:	40021400 	.word	0x40021400
 8004878:	40021800 	.word	0x40021800
 800487c:	40013c00 	.word	0x40013c00

08004880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
 800488c:	4613      	mov	r3, r2
 800488e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004890:	787b      	ldrb	r3, [r7, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800489c:	e003      	b.n	80048a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800489e:	887b      	ldrh	r3, [r7, #2]
 80048a0:	041a      	lsls	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	619a      	str	r2, [r3, #24]
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0cc      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c8:	4b68      	ldr	r3, [pc, #416]	@ (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d90c      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d6:	4b65      	ldr	r3, [pc, #404]	@ (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b63      	ldr	r3, [pc, #396]	@ (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b8      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004908:	4b59      	ldr	r3, [pc, #356]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a58      	ldr	r2, [pc, #352]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004920:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a52      	ldr	r2, [pc, #328]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800492a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	4b50      	ldr	r3, [pc, #320]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	494d      	ldr	r1, [pc, #308]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d044      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b47      	ldr	r3, [pc, #284]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d119      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d003      	beq.n	8004972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496e:	2b03      	cmp	r3, #3
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b3f      	ldr	r3, [pc, #252]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e06f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	4b3b      	ldr	r3, [pc, #236]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e067      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004992:	4b37      	ldr	r3, [pc, #220]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4934      	ldr	r1, [pc, #208]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049a4:	f7ff fc04 	bl	80041b0 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7ff fc00 	bl	80041b0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e04f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 020c 	and.w	r2, r3, #12
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1eb      	bne.n	80049ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b25      	ldr	r3, [pc, #148]	@ (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d20c      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b22      	ldr	r3, [pc, #136]	@ (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b20      	ldr	r3, [pc, #128]	@ (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e032      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4b19      	ldr	r3, [pc, #100]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4916      	ldr	r1, [pc, #88]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a26:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	490e      	ldr	r1, [pc, #56]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a3a:	f000 f855 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	490a      	ldr	r1, [pc, #40]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	5ccb      	ldrb	r3, [r1, r3]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a56:	4b09      	ldr	r3, [pc, #36]	@ (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fb64 	bl	8004128 <HAL_InitTick>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00
 8004a70:	40023800 	.word	0x40023800
 8004a74:	0802bbe0 	.word	0x0802bbe0
 8004a78:	20015394 	.word	0x20015394
 8004a7c:	20015398 	.word	0x20015398

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20015394 	.word	0x20015394

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0a9b      	lsrs	r3, r3, #10
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4903      	ldr	r1, [pc, #12]	@ (8004abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	0802bbf0 	.word	0x0802bbf0

08004ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ac4:	f7ff ffdc 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0b5b      	lsrs	r3, r3, #13
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	@ (8004ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	0802bbf0 	.word	0x0802bbf0

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b0a6      	sub	sp, #152	@ 0x98
 8004aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b0e:	4bc8      	ldr	r3, [pc, #800]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	f200 817e 	bhi.w	8004e18 <HAL_RCC_GetSysClockFreq+0x330>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004e19 	.word	0x08004e19
 8004b2c:	08004e19 	.word	0x08004e19
 8004b30:	08004e19 	.word	0x08004e19
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	08004e19 	.word	0x08004e19
 8004b3c:	08004e19 	.word	0x08004e19
 8004b40:	08004e19 	.word	0x08004e19
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004e19 	.word	0x08004e19
 8004b4c:	08004e19 	.word	0x08004e19
 8004b50:	08004e19 	.word	0x08004e19
 8004b54:	08004cd3 	.word	0x08004cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4bb6      	ldr	r3, [pc, #728]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8004b5e:	e15f      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b60:	4bb5      	ldr	r3, [pc, #724]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b66:	e15b      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4bb1      	ldr	r3, [pc, #708]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b74:	4bae      	ldr	r3, [pc, #696]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d031      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b80:	4bab      	ldr	r3, [pc, #684]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	2200      	movs	r2, #0
 8004b88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b94:	2300      	movs	r3, #0
 8004b96:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b98:	4ba7      	ldr	r3, [pc, #668]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	fb03 f202 	mul.w	r2, r3, r2
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	4aa2      	ldr	r2, [pc, #648]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	fba1 1202 	umull	r1, r2, r1, r2
 8004bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bb8:	460a      	mov	r2, r1
 8004bba:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004bbc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bbe:	4413      	add	r3, r2
 8004bc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004bcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004bd4:	f7fb fd24 	bl	8000620 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004be2:	e064      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be4:	4b92      	ldr	r3, [pc, #584]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	099b      	lsrs	r3, r3, #6
 8004bea:	2200      	movs	r2, #0
 8004bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bee:	657a      	str	r2, [r7, #84]	@ 0x54
 8004bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004c00:	4622      	mov	r2, r4
 8004c02:	462b      	mov	r3, r5
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	0159      	lsls	r1, r3, #5
 8004c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c12:	0150      	lsls	r0, r2, #5
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4621      	mov	r1, r4
 8004c1a:	1a51      	subs	r1, r2, r1
 8004c1c:	6139      	str	r1, [r7, #16]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	eb63 0301 	sbc.w	r3, r3, r1
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c32:	4659      	mov	r1, fp
 8004c34:	018b      	lsls	r3, r1, #6
 8004c36:	4651      	mov	r1, sl
 8004c38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	018a      	lsls	r2, r1, #6
 8004c40:	4651      	mov	r1, sl
 8004c42:	ebb2 0801 	subs.w	r8, r2, r1
 8004c46:	4659      	mov	r1, fp
 8004c48:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c60:	4690      	mov	r8, r2
 8004c62:	4699      	mov	r9, r3
 8004c64:	4623      	mov	r3, r4
 8004c66:	eb18 0303 	adds.w	r3, r8, r3
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	eb49 0303 	adc.w	r3, r9, r3
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c80:	4629      	mov	r1, r5
 8004c82:	028b      	lsls	r3, r1, #10
 8004c84:	4621      	mov	r1, r4
 8004c86:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	028a      	lsls	r2, r1, #10
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c96:	2200      	movs	r2, #0
 8004c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ca0:	f7fb fcbe 	bl	8000620 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cae:	4b60      	ldr	r3, [pc, #384]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8004cc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004cd0:	e0a6      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd2:	4b57      	ldr	r3, [pc, #348]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cde:	4b54      	ldr	r3, [pc, #336]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d02a      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cea:	4b51      	ldr	r3, [pc, #324]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d00:	fb03 f201 	mul.w	r2, r3, r1
 8004d04:	2300      	movs	r3, #0
 8004d06:	fb00 f303 	mul.w	r3, r0, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d0e:	fba0 1202 	umull	r1, r2, r0, r2
 8004d12:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d14:	460a      	mov	r2, r1
 8004d16:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d18:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d1a:	4413      	add	r3, r2
 8004d1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d22:	2200      	movs	r2, #0
 8004d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d26:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004d2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004d30:	f7fb fc76 	bl	8000620 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d3e:	e05b      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d40:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	099b      	lsrs	r3, r3, #6
 8004d46:	2200      	movs	r2, #0
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	2300      	movs	r3, #0
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	f04f 0000 	mov.w	r0, #0
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	0159      	lsls	r1, r3, #5
 8004d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6e:	0150      	lsls	r0, r2, #5
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4641      	mov	r1, r8
 8004d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d94:	ebb2 040a 	subs.w	r4, r2, sl
 8004d98:	eb63 050b 	sbc.w	r5, r3, fp
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	00eb      	lsls	r3, r5, #3
 8004da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004daa:	00e2      	lsls	r2, r4, #3
 8004dac:	4614      	mov	r4, r2
 8004dae:	461d      	mov	r5, r3
 8004db0:	4643      	mov	r3, r8
 8004db2:	18e3      	adds	r3, r4, r3
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	464b      	mov	r3, r9
 8004db8:	eb45 0303 	adc.w	r3, r5, r3
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dca:	4629      	mov	r1, r5
 8004dcc:	028b      	lsls	r3, r1, #10
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	028a      	lsls	r2, r1, #10
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de0:	2200      	movs	r2, #0
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dea:	f7fb fc19 	bl	8000620 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4613      	mov	r3, r2
 8004df4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004df8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	0f1b      	lsrs	r3, r3, #28
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8004e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e16:	e003      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3798      	adds	r7, #152	@ 0x98
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	017d7840 	.word	0x017d7840

08004e3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e28d      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8083 	beq.w	8004f62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e5c:	4b94      	ldr	r3, [pc, #592]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d019      	beq.n	8004e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e68:	4b91      	ldr	r3, [pc, #580]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d106      	bne.n	8004e82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e74:	4b8e      	ldr	r3, [pc, #568]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e80:	d00c      	beq.n	8004e9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e82:	4b8b      	ldr	r3, [pc, #556]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d112      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8e:	4b88      	ldr	r3, [pc, #544]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	4b84      	ldr	r3, [pc, #528]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05b      	beq.n	8004f60 <HAL_RCC_OscConfig+0x124>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d157      	bne.n	8004f60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e25a      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_OscConfig+0x90>
 8004ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xcc>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xb4>
 8004ed6:	4b76      	ldr	r3, [pc, #472]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a75      	ldr	r2, [pc, #468]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b73      	ldr	r3, [pc, #460]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a72      	ldr	r2, [pc, #456]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xcc>
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b6c      	ldr	r3, [pc, #432]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6b      	ldr	r2, [pc, #428]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7ff f94e 	bl	80041b0 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7ff f94a 	bl	80041b0 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e21f      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b61      	ldr	r3, [pc, #388]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xdc>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7ff f93a 	bl	80041b0 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f40:	f7ff f936 	bl	80041b0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	@ 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e20b      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	4b57      	ldr	r3, [pc, #348]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x104>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d06f      	beq.n	800504e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f6e:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d105      	bne.n	8004f92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f86:	4b4a      	ldr	r3, [pc, #296]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d11c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9e:	4b44      	ldr	r3, [pc, #272]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004faa:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x186>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e1d3      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4937      	ldr	r1, [pc, #220]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	e03a      	b.n	800504e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d020      	beq.n	8005022 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b34      	ldr	r3, [pc, #208]	@ (80050b4 <HAL_RCC_OscConfig+0x278>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7ff f8e3 	bl	80041b0 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fee:	f7ff f8df 	bl	80041b0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e1b4      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	4b2b      	ldr	r3, [pc, #172]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500c:	4b28      	ldr	r3, [pc, #160]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4925      	ldr	r1, [pc, #148]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
 8005020:	e015      	b.n	800504e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005022:	4b24      	ldr	r3, [pc, #144]	@ (80050b4 <HAL_RCC_OscConfig+0x278>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7ff f8c2 	bl	80041b0 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005030:	f7ff f8be 	bl	80041b0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e193      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	4b1b      	ldr	r3, [pc, #108]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d036      	beq.n	80050c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005062:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7ff f8a2 	bl	80041b0 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005070:	f7ff f89e 	bl	80041b0 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e173      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <HAL_RCC_OscConfig+0x274>)
 8005084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x234>
 800508e:	e01b      	b.n	80050c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005090:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <HAL_RCC_OscConfig+0x27c>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7ff f88b 	bl	80041b0 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	e00e      	b.n	80050bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509e:	f7ff f887 	bl	80041b0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d907      	bls.n	80050bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e15c      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
 80050b0:	40023800 	.word	0x40023800
 80050b4:	42470000 	.word	0x42470000
 80050b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	4b8a      	ldr	r3, [pc, #552]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ea      	bne.n	800509e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8097 	beq.w	8005204 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050da:	4b83      	ldr	r3, [pc, #524]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	4b7f      	ldr	r3, [pc, #508]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	4a7e      	ldr	r2, [pc, #504]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050f6:	4b7c      	ldr	r3, [pc, #496]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b79      	ldr	r3, [pc, #484]	@ (80052ec <HAL_RCC_OscConfig+0x4b0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d118      	bne.n	8005144 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b76      	ldr	r3, [pc, #472]	@ (80052ec <HAL_RCC_OscConfig+0x4b0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a75      	ldr	r2, [pc, #468]	@ (80052ec <HAL_RCC_OscConfig+0x4b0>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511e:	f7ff f847 	bl	80041b0 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005126:	f7ff f843 	bl	80041b0 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e118      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	4b6c      	ldr	r3, [pc, #432]	@ (80052ec <HAL_RCC_OscConfig+0x4b0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x31e>
 800514c:	4b66      	ldr	r3, [pc, #408]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005150:	4a65      	ldr	r2, [pc, #404]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	@ 0x70
 8005158:	e01c      	b.n	8005194 <HAL_RCC_OscConfig+0x358>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x340>
 8005162:	4b61      	ldr	r3, [pc, #388]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	4a60      	ldr	r2, [pc, #384]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	6713      	str	r3, [r2, #112]	@ 0x70
 800516e:	4b5e      	ldr	r3, [pc, #376]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	4a5d      	ldr	r2, [pc, #372]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
 800517a:	e00b      	b.n	8005194 <HAL_RCC_OscConfig+0x358>
 800517c:	4b5a      	ldr	r3, [pc, #360]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005180:	4a59      	ldr	r2, [pc, #356]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	6713      	str	r3, [r2, #112]	@ 0x70
 8005188:	4b57      	ldr	r3, [pc, #348]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	4a56      	ldr	r2, [pc, #344]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800518e:	f023 0304 	bic.w	r3, r3, #4
 8005192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7ff f808 	bl	80041b0 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7ff f804 	bl	80041b0 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e0d7      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	4b4b      	ldr	r3, [pc, #300]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0ee      	beq.n	80051a4 <HAL_RCC_OscConfig+0x368>
 80051c6:	e014      	b.n	80051f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fe fff2 	bl	80041b0 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fe ffee 	bl	80041b0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e0c1      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e6:	4b40      	ldr	r3, [pc, #256]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ee      	bne.n	80051d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f8:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	4a3a      	ldr	r2, [pc, #232]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80051fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80ad 	beq.w	8005368 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800520e:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b08      	cmp	r3, #8
 8005218:	d060      	beq.n	80052dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d145      	bne.n	80052ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b33      	ldr	r3, [pc, #204]	@ (80052f0 <HAL_RCC_OscConfig+0x4b4>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fe ffc2 	bl	80041b0 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005230:	f7fe ffbe 	bl	80041b0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e093      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b29      	ldr	r3, [pc, #164]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	071b      	lsls	r3, r3, #28
 800527a:	491b      	ldr	r1, [pc, #108]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005280:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <HAL_RCC_OscConfig+0x4b4>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fe ff93 	bl	80041b0 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528e:	f7fe ff8f 	bl	80041b0 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e064      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a0:	4b11      	ldr	r3, [pc, #68]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x452>
 80052ac:	e05c      	b.n	8005368 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <HAL_RCC_OscConfig+0x4b4>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fe ff7c 	bl	80041b0 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fe ff78 	bl	80041b0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e04d      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <HAL_RCC_OscConfig+0x4ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x480>
 80052da:	e045      	b.n	8005368 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e040      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40007000 	.word	0x40007000
 80052f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <HAL_RCC_OscConfig+0x538>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d030      	beq.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d129      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d122      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800532a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800532c:	4293      	cmp	r3, r2
 800532e:	d119      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	3b01      	subs	r3, #1
 800533e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d10f      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07b      	b.n	8005482 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539a:	d009      	beq.n	80053b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	61da      	str	r2, [r3, #28]
 80053a2:	e005      	b.n	80053b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fe fd14 	bl	8003df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005434:	ea42 0103 	orr.w	r1, r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0104 	and.w	r1, r3, #4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	f003 0210 	and.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e042      	b.n	8005522 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fe fce9 	bl	8003e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	@ 0x24
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fcda 	bl	8005e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005502:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	4613      	mov	r3, r2
 8005536:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	d112      	bne.n	800556a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_UART_Receive_IT+0x26>
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e00b      	b.n	800556c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	461a      	mov	r2, r3
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fab9 	bl	8005ad8 <UART_Start_Receive_IT>
 8005566:	4603      	mov	r3, r0
 8005568:	e000      	b.n	800556c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800556a:	2302      	movs	r3, #2
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b0ba      	sub	sp, #232	@ 0xe8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_UART_IRQHandler+0x66>
 80055c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fb99 	bl	8005d0a <UART_Receive_IT>
      return;
 80055d8:	e25b      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80de 	beq.w	80057a0 <HAL_UART_IRQHandler+0x22c>
 80055e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80d1 	beq.w	80057a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_UART_IRQHandler+0xae>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_UART_IRQHandler+0xd2>
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	f043 0202 	orr.w	r2, r3, #2
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_UART_IRQHandler+0xf6>
 8005652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d011      	beq.n	800569a <HAL_UART_IRQHandler+0x126>
 8005676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	f043 0208 	orr.w	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 81f2 	beq.w	8005a88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_UART_IRQHandler+0x14e>
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb24 	bl	8005d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b40      	cmp	r3, #64	@ 0x40
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <HAL_UART_IRQHandler+0x17a>
 80056e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d04f      	beq.n	800578e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa2c 	bl	8005b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d141      	bne.n	8005786 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800571c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3314      	adds	r3, #20
 800572a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800572e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800573a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1d9      	bne.n	8005702 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d013      	beq.n	800577e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575a:	4a7e      	ldr	r2, [pc, #504]	@ (8005954 <HAL_UART_IRQHandler+0x3e0>)
 800575c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fed5 	bl	8004512 <HAL_DMA_Abort_IT>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d016      	beq.n	800579c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	e00e      	b.n	800579c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f994 	bl	8005aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005784:	e00a      	b.n	800579c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f990 	bl	8005aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	e006      	b.n	800579c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f98c 	bl	8005aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800579a:	e175      	b.n	8005a88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	bf00      	nop
    return;
 800579e:	e173      	b.n	8005a88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	f040 814f 	bne.w	8005a48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8148 	beq.w	8005a48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8141 	beq.w	8005a48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e6:	2b40      	cmp	r3, #64	@ 0x40
 80057e8:	f040 80b6 	bne.w	8005958 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8145 	beq.w	8005a8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800580a:	429a      	cmp	r2, r3
 800580c:	f080 813e 	bcs.w	8005a8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005816:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005822:	f000 8088 	beq.w	8005936 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800583c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800585e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800586a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1d9      	bne.n	8005826 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005896:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800589a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800589e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e1      	bne.n	8005872 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3314      	adds	r3, #20
 80058ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e3      	bne.n	80058ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005918:	65ba      	str	r2, [r7, #88]	@ 0x58
 800591a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800591e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e3      	bne.n	80058f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fd7e 	bl	8004432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005944:	b29b      	uxth	r3, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	b29b      	uxth	r3, r3
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8b7 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005952:	e09b      	b.n	8005a8c <HAL_UART_IRQHandler+0x518>
 8005954:	08005c13 	.word	0x08005c13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005960:	b29b      	uxth	r3, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 808e 	beq.w	8005a90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8089 	beq.w	8005a90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	330c      	adds	r3, #12
 800599e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80059a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e3      	bne.n	800597e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	623b      	str	r3, [r7, #32]
   return(result);
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059da:	633a      	str	r2, [r7, #48]	@ 0x30
 80059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e3      	bne.n	80059b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a20:	61fa      	str	r2, [r7, #28]
 8005a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e3      	bne.n	80059fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f83d 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a46:	e023      	b.n	8005a90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_UART_IRQHandler+0x4f4>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8ea 	bl	8005c3a <UART_Transmit_IT>
    return;
 8005a66:	e014      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <HAL_UART_IRQHandler+0x51e>
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f92a 	bl	8005cda <UART_EndTransmit_IT>
    return;
 8005a86:	e004      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a90:	bf00      	nop
  }
}
 8005a92:	37e8      	adds	r7, #232	@ 0xe8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2222      	movs	r2, #34	@ 0x22
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0220 	orr.w	r2, r2, #32
 8005b3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b095      	sub	sp, #84	@ 0x54
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b74:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e5      	bne.n	8005b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d119      	bne.n	8005bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f023 0310 	bic.w	r3, r3, #16
 8005bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be4:	61ba      	str	r2, [r7, #24]
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c06:	bf00      	nop
 8005c08:	3754      	adds	r7, #84	@ 0x54
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff ff3d 	bl	8005aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b21      	cmp	r3, #33	@ 0x21
 8005c4c:	d13e      	bne.n	8005ccc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c56:	d114      	bne.n	8005c82 <UART_Transmit_IT+0x48>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d110      	bne.n	8005c82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]
 8005c80:	e008      	b.n	8005c94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6211      	str	r1, [r2, #32]
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10f      	bne.n	8005cc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fecc 	bl	8005a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b08c      	sub	sp, #48	@ 0x30
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b22      	cmp	r3, #34	@ 0x22
 8005d1c:	f040 80ae 	bne.w	8005e7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d117      	bne.n	8005d5a <UART_Receive_IT+0x50>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d113      	bne.n	8005d5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d58:	e026      	b.n	8005da8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6c:	d007      	beq.n	8005d7e <UART_Receive_IT+0x74>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <UART_Receive_IT+0x82>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	e008      	b.n	8005d9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4619      	mov	r1, r3
 8005db6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d15d      	bne.n	8005e78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0220 	bic.w	r2, r2, #32
 8005dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d135      	bne.n	8005e6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	330c      	adds	r3, #12
 8005e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e28:	623a      	str	r2, [r7, #32]
 8005e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e5      	bne.n	8005e08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d10a      	bne.n	8005e60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fe2a 	bl	8005ac0 <HAL_UARTEx_RxEventCallback>
 8005e6c:	e002      	b.n	8005e74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fd fbb6 	bl	80035e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e002      	b.n	8005e7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3730      	adds	r7, #48	@ 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b0c0      	sub	sp, #256	@ 0x100
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	68d9      	ldr	r1, [r3, #12]
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	ea40 0301 	orr.w	r3, r0, r1
 8005eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ee0:	f021 010c 	bic.w	r1, r1, #12
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	6999      	ldr	r1, [r3, #24]
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	ea40 0301 	orr.w	r3, r0, r1
 8005f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b8f      	ldr	r3, [pc, #572]	@ (8006154 <UART_SetConfig+0x2cc>)
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d005      	beq.n	8005f28 <UART_SetConfig+0xa0>
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b8d      	ldr	r3, [pc, #564]	@ (8006158 <UART_SetConfig+0x2d0>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d104      	bne.n	8005f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fe fdca 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8005f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f30:	e003      	b.n	8005f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f32:	f7fe fdb1 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f44:	f040 810c 	bne.w	8006160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f62:	415b      	adcs	r3, r3
 8005f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	eb12 0801 	adds.w	r8, r2, r1
 8005f70:	4629      	mov	r1, r5
 8005f72:	eb43 0901 	adc.w	r9, r3, r1
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f8a:	4690      	mov	r8, r2
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	eb18 0303 	adds.w	r3, r8, r3
 8005f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f98:	462b      	mov	r3, r5
 8005f9a:	eb49 0303 	adc.w	r3, r9, r3
 8005f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	18db      	adds	r3, r3, r3
 8005fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	eb42 0303 	adc.w	r3, r2, r3
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fcc:	f7fa fb28 	bl	8000620 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4b61      	ldr	r3, [pc, #388]	@ (800615c <UART_SetConfig+0x2d4>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011c      	lsls	r4, r3, #4
 8005fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	1891      	adds	r1, r2, r2
 8005ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ff8:	415b      	adcs	r3, r3
 8005ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006000:	4641      	mov	r1, r8
 8006002:	eb12 0a01 	adds.w	sl, r2, r1
 8006006:	4649      	mov	r1, r9
 8006008:	eb43 0b01 	adc.w	fp, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800601c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006020:	4692      	mov	sl, r2
 8006022:	469b      	mov	fp, r3
 8006024:	4643      	mov	r3, r8
 8006026:	eb1a 0303 	adds.w	r3, sl, r3
 800602a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800602e:	464b      	mov	r3, r9
 8006030:	eb4b 0303 	adc.w	r3, fp, r3
 8006034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800604c:	460b      	mov	r3, r1
 800604e:	18db      	adds	r3, r3, r3
 8006050:	643b      	str	r3, [r7, #64]	@ 0x40
 8006052:	4613      	mov	r3, r2
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	647b      	str	r3, [r7, #68]	@ 0x44
 800605a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800605e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006062:	f7fa fadd 	bl	8000620 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4611      	mov	r1, r2
 800606c:	4b3b      	ldr	r3, [pc, #236]	@ (800615c <UART_SetConfig+0x2d4>)
 800606e:	fba3 2301 	umull	r2, r3, r3, r1
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	2264      	movs	r2, #100	@ 0x64
 8006076:	fb02 f303 	mul.w	r3, r2, r3
 800607a:	1acb      	subs	r3, r1, r3
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006082:	4b36      	ldr	r3, [pc, #216]	@ (800615c <UART_SetConfig+0x2d4>)
 8006084:	fba3 2302 	umull	r2, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006090:	441c      	add	r4, r3
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006096:	2200      	movs	r2, #0
 8006098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800609c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060ac:	415b      	adcs	r3, r3
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060b4:	4641      	mov	r1, r8
 80060b6:	1851      	adds	r1, r2, r1
 80060b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80060ba:	4649      	mov	r1, r9
 80060bc:	414b      	adcs	r3, r1
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060cc:	4659      	mov	r1, fp
 80060ce:	00cb      	lsls	r3, r1, #3
 80060d0:	4651      	mov	r1, sl
 80060d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060d6:	4651      	mov	r1, sl
 80060d8:	00ca      	lsls	r2, r1, #3
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	4642      	mov	r2, r8
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060e8:	464b      	mov	r3, r9
 80060ea:	460a      	mov	r2, r1
 80060ec:	eb42 0303 	adc.w	r3, r2, r3
 80060f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006108:	460b      	mov	r3, r1
 800610a:	18db      	adds	r3, r3, r3
 800610c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800610e:	4613      	mov	r3, r2
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800611a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800611e:	f7fa fa7f 	bl	8000620 <__aeabi_uldivmod>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <UART_SetConfig+0x2d4>)
 8006128:	fba3 1302 	umull	r1, r3, r3, r2
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	2164      	movs	r1, #100	@ 0x64
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	3332      	adds	r3, #50	@ 0x32
 800613a:	4a08      	ldr	r2, [pc, #32]	@ (800615c <UART_SetConfig+0x2d4>)
 800613c:	fba2 2303 	umull	r2, r3, r2, r3
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	f003 0207 	and.w	r2, r3, #7
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4422      	add	r2, r4
 800614e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006150:	e106      	b.n	8006360 <UART_SetConfig+0x4d8>
 8006152:	bf00      	nop
 8006154:	40011000 	.word	0x40011000
 8006158:	40011400 	.word	0x40011400
 800615c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800616a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800616e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	1891      	adds	r1, r2, r2
 8006178:	6239      	str	r1, [r7, #32]
 800617a:	415b      	adcs	r3, r3
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
 800617e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006182:	4641      	mov	r1, r8
 8006184:	1854      	adds	r4, r2, r1
 8006186:	4649      	mov	r1, r9
 8006188:	eb43 0501 	adc.w	r5, r3, r1
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	00eb      	lsls	r3, r5, #3
 8006196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619a:	00e2      	lsls	r2, r4, #3
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	18e3      	adds	r3, r4, r3
 80061a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061a8:	464b      	mov	r3, r9
 80061aa:	eb45 0303 	adc.w	r3, r5, r3
 80061ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061ce:	4629      	mov	r1, r5
 80061d0:	008b      	lsls	r3, r1, #2
 80061d2:	4621      	mov	r1, r4
 80061d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d8:	4621      	mov	r1, r4
 80061da:	008a      	lsls	r2, r1, #2
 80061dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061e0:	f7fa fa1e 	bl	8000620 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4b60      	ldr	r3, [pc, #384]	@ (800636c <UART_SetConfig+0x4e4>)
 80061ea:	fba3 2302 	umull	r2, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	011c      	lsls	r4, r3, #4
 80061f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	1891      	adds	r1, r2, r2
 800620a:	61b9      	str	r1, [r7, #24]
 800620c:	415b      	adcs	r3, r3
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006214:	4641      	mov	r1, r8
 8006216:	1851      	adds	r1, r2, r1
 8006218:	6139      	str	r1, [r7, #16]
 800621a:	4649      	mov	r1, r9
 800621c:	414b      	adcs	r3, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800622c:	4659      	mov	r1, fp
 800622e:	00cb      	lsls	r3, r1, #3
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006236:	4651      	mov	r1, sl
 8006238:	00ca      	lsls	r2, r1, #3
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	4603      	mov	r3, r0
 8006240:	4642      	mov	r2, r8
 8006242:	189b      	adds	r3, r3, r2
 8006244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006248:	464b      	mov	r3, r9
 800624a:	460a      	mov	r2, r1
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800625e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800626c:	4649      	mov	r1, r9
 800626e:	008b      	lsls	r3, r1, #2
 8006270:	4641      	mov	r1, r8
 8006272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006276:	4641      	mov	r1, r8
 8006278:	008a      	lsls	r2, r1, #2
 800627a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800627e:	f7fa f9cf 	bl	8000620 <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4611      	mov	r1, r2
 8006288:	4b38      	ldr	r3, [pc, #224]	@ (800636c <UART_SetConfig+0x4e4>)
 800628a:	fba3 2301 	umull	r2, r3, r3, r1
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2264      	movs	r2, #100	@ 0x64
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	1acb      	subs	r3, r1, r3
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	3332      	adds	r3, #50	@ 0x32
 800629c:	4a33      	ldr	r2, [pc, #204]	@ (800636c <UART_SetConfig+0x4e4>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062a8:	441c      	add	r4, r3
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ae:	2200      	movs	r2, #0
 80062b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80062b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	1891      	adds	r1, r2, r2
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	415b      	adcs	r3, r3
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062c8:	4641      	mov	r1, r8
 80062ca:	1851      	adds	r1, r2, r1
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	4649      	mov	r1, r9
 80062d0:	414b      	adcs	r3, r1
 80062d2:	607b      	str	r3, [r7, #4]
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062e0:	4659      	mov	r1, fp
 80062e2:	00cb      	lsls	r3, r1, #3
 80062e4:	4651      	mov	r1, sl
 80062e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ea:	4651      	mov	r1, sl
 80062ec:	00ca      	lsls	r2, r1, #3
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	4642      	mov	r2, r8
 80062f6:	189b      	adds	r3, r3, r2
 80062f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062fa:	464b      	mov	r3, r9
 80062fc:	460a      	mov	r2, r1
 80062fe:	eb42 0303 	adc.w	r3, r2, r3
 8006302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	663b      	str	r3, [r7, #96]	@ 0x60
 800630e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800631c:	4649      	mov	r1, r9
 800631e:	008b      	lsls	r3, r1, #2
 8006320:	4641      	mov	r1, r8
 8006322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006326:	4641      	mov	r1, r8
 8006328:	008a      	lsls	r2, r1, #2
 800632a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800632e:	f7fa f977 	bl	8000620 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <UART_SetConfig+0x4e4>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	@ 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	3332      	adds	r3, #50	@ 0x32
 800634a:	4a08      	ldr	r2, [pc, #32]	@ (800636c <UART_SetConfig+0x4e4>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 020f 	and.w	r2, r3, #15
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4422      	add	r2, r4
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	bf00      	nop
 8006362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636c:	51eb851f 	.word	0x51eb851f

08006370 <memset>:
 8006370:	4402      	add	r2, r0
 8006372:	4603      	mov	r3, r0
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	f803 1b01 	strb.w	r1, [r3], #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	@ (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	@ (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	@ (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	@ (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 f818 	bl	80063c8 <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	0802bc00 	.word	0x0802bc00
 80063bc:	0802bc00 	.word	0x0802bc00
 80063c0:	0802bc00 	.word	0x0802bc00
 80063c4:	0802bc04 	.word	0x0802bc04

080063c8 <_init>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr

080063d4 <_fini>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr
