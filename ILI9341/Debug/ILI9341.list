
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800d0c4  0800d0c4  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d64c  0800d64c  00025aec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d64c  0800d64c  0000e64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d654  0800d654  00025aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d654  0800d654  0000e654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d658  0800d658  0000e658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00016aec  20000000  0800d65c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006390  20016aec  08024148  00025aec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ce7c  08024148  00025e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015869  00000000  00000000  00025b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e2  00000000  00000000  0003b385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  0003f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024807  00000000  00000000  00040912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c571  00000000  00000000  00065119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74f8  00000000  00000000  0008168a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158b82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  00158bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20016aec 	.word	0x20016aec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d0ac 	.word	0x0800d0ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20016af0 	.word	0x20016af0
 800020c:	0800d0ac 	.word	0x0800d0ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2f>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000640:	bf24      	itt	cs
 8000642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800064a:	d90d      	bls.n	8000668 <__aeabi_d2f+0x30>
 800064c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000658:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800065c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000660:	bf08      	it	eq
 8000662:	f020 0001 	biceq.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800066c:	d121      	bne.n	80006b2 <__aeabi_d2f+0x7a>
 800066e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000672:	bfbc      	itt	lt
 8000674:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000678:	4770      	bxlt	lr
 800067a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000682:	f1c2 0218 	rsb	r2, r2, #24
 8000686:	f1c2 0c20 	rsb	ip, r2, #32
 800068a:	fa10 f30c 	lsls.w	r3, r0, ip
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	bf18      	it	ne
 8000694:	f040 0001 	orrne.w	r0, r0, #1
 8000698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800069c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006a4:	ea40 000c 	orr.w	r0, r0, ip
 80006a8:	fa23 f302 	lsr.w	r3, r3, r2
 80006ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006b0:	e7cc      	b.n	800064c <__aeabi_d2f+0x14>
 80006b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006b6:	d107      	bne.n	80006c8 <__aeabi_d2f+0x90>
 80006b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006bc:	bf1e      	ittt	ne
 80006be:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006c2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006c6:	4770      	bxne	lr
 80006c8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__aeabi_uldivmod>:
 80006d8:	b953      	cbnz	r3, 80006f0 <__aeabi_uldivmod+0x18>
 80006da:	b94a      	cbnz	r2, 80006f0 <__aeabi_uldivmod+0x18>
 80006dc:	2900      	cmp	r1, #0
 80006de:	bf08      	it	eq
 80006e0:	2800      	cmpeq	r0, #0
 80006e2:	bf1c      	itt	ne
 80006e4:	f04f 31ff 	movne.w	r1, #4294967295
 80006e8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ec:	f000 b96a 	b.w	80009c4 <__aeabi_idiv0>
 80006f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006f8:	f000 f806 	bl	8000708 <__udivmoddi4>
 80006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000704:	b004      	add	sp, #16
 8000706:	4770      	bx	lr

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <SELECT+0x18>)
 80009d2:	f005 fe8f 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f005 fb24 	bl	8006024 <HAL_Delay>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020400 	.word	0x40020400

080009e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2140      	movs	r1, #64	@ 0x40
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <DESELECT+0x18>)
 80009ee:	f005 fe81 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f005 fb16 	bl	8006024 <HAL_Delay>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020400 	.word	0x40020400

08000a00 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a0a:	bf00      	nop
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <SPI_TxByte+0x30>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d1f8      	bne.n	8000a0c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <SPI_TxByte+0x30>)
 8000a22:	f006 fc6c 	bl	80072fe <HAL_SPI_Transmit>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20016b10 	.word	0x20016b10

08000a34 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a40:	bf00      	nop
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <SPI_TxBuffer+0x30>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d1f8      	bne.n	8000a42 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a50:	887a      	ldrh	r2, [r7, #2]
 8000a52:	2364      	movs	r3, #100	@ 0x64
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <SPI_TxBuffer+0x30>)
 8000a58:	f006 fc51 	bl	80072fe <HAL_SPI_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20016b10 	.word	0x20016b10

08000a68 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000a6e:	23ff      	movs	r3, #255	@ 0xff
 8000a70:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a72:	bf00      	nop
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <SPI_RxByte+0x34>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d1f8      	bne.n	8000a74 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a82:	1dba      	adds	r2, r7, #6
 8000a84:	1df9      	adds	r1, r7, #7
 8000a86:	2364      	movs	r3, #100	@ 0x64
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SPI_RxByte+0x34>)
 8000a8e:	f006 fd79 	bl	8007584 <HAL_SPI_TransmitReceive>

	return data;
 8000a92:	79bb      	ldrb	r3, [r7, #6]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20016b10 	.word	0x20016b10

08000aa0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000aa8:	f7ff ffde 	bl	8000a68 <SPI_RxByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	701a      	strb	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <SD_ReadyWait+0x30>)
 8000ac4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ac8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000aca:	f7ff ffcd 	bl	8000a68 <SPI_RxByte>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2bff      	cmp	r3, #255	@ 0xff
 8000ad6:	d003      	beq.n	8000ae0 <SD_ReadyWait+0x24>
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SD_ReadyWait+0x30>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f4      	bne.n	8000aca <SD_ReadyWait+0xe>

	return res;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20016b0a 	.word	0x20016b0a

08000af0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000af6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000afa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000afc:	f7ff ff72 	bl	80009e4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	e005      	b.n	8000b12 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000b06:	20ff      	movs	r0, #255	@ 0xff
 8000b08:	f7ff ff7a 	bl	8000a00 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	ddf6      	ble.n	8000b06 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000b18:	f7ff ff56 	bl	80009c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000b30:	2395      	movs	r3, #149	@ 0x95
 8000b32:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000b34:	463b      	mov	r3, r7
 8000b36:	2106      	movs	r1, #6
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff7b 	bl	8000a34 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b3e:	e002      	b.n	8000b46 <SD_PowerOn+0x56>
	{
		cnt--;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b46:	f7ff ff8f 	bl	8000a68 <SPI_RxByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d002      	beq.n	8000b56 <SD_PowerOn+0x66>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f4      	bne.n	8000b40 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000b56:	f7ff ff45 	bl	80009e4 <DESELECT>
	SPI_TxByte(0XFF);
 8000b5a:	20ff      	movs	r0, #255	@ 0xff
 8000b5c:	f7ff ff50 	bl	8000a00 <SPI_TxByte>

	PowerFlag = 1;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <SD_PowerOn+0x80>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20016b0d 	.word	0x20016b0d

08000b74 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <SD_PowerOff+0x14>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20016b0d 	.word	0x20016b0d

08000b8c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <SD_CheckPower+0x14>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20016b0d 	.word	0x20016b0d

08000ba4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SD_RxDataBlock+0x58>)
 8000bb0:	22c8      	movs	r2, #200	@ 0xc8
 8000bb2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000bb4:	f7ff ff58 	bl	8000a68 <SPI_RxByte>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d103      	bne.n	8000bca <SD_RxDataBlock+0x26>
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <SD_RxDataBlock+0x58>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f4      	bne.n	8000bb4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bce:	d001      	beq.n	8000bd4 <SD_RxDataBlock+0x30>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e00f      	b.n	8000bf4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff60 	bl	8000aa0 <SPI_RxBytePtr>
	} while(len--);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	1e5a      	subs	r2, r3, #1
 8000be4:	603a      	str	r2, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f4      	bne.n	8000bd4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000bea:	f7ff ff3d 	bl	8000a68 <SPI_RxByte>
	SPI_RxByte();
 8000bee:	f7ff ff3b 	bl	8000a68 <SPI_RxByte>

	return TRUE;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20016b08 	.word	0x20016b08

08000c00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000c10:	f7ff ff54 	bl	8000abc <SD_ReadyWait>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2bff      	cmp	r3, #255	@ 0xff
 8000c18:	d001      	beq.n	8000c1e <SD_TxDataBlock+0x1e>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e02f      	b.n	8000c7e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff feed 	bl	8000a00 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2bfd      	cmp	r3, #253	@ 0xfd
 8000c2a:	d020      	beq.n	8000c6e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000c2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff feff 	bl	8000a34 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000c36:	f7ff ff17 	bl	8000a68 <SPI_RxByte>
		SPI_RxByte();
 8000c3a:	f7ff ff15 	bl	8000a68 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000c3e:	e00b      	b.n	8000c58 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000c40:	f7ff ff12 	bl	8000a68 <SPI_RxByte>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d006      	beq.n	8000c60 <SD_TxDataBlock+0x60>
			i++;
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	3301      	adds	r3, #1
 8000c56:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	2b40      	cmp	r3, #64	@ 0x40
 8000c5c:	d9f0      	bls.n	8000c40 <SD_TxDataBlock+0x40>
 8000c5e:	e000      	b.n	8000c62 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000c60:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000c62:	bf00      	nop
 8000c64:	f7ff ff00 	bl	8000a68 <SPI_RxByte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0fa      	beq.n	8000c64 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	2b05      	cmp	r3, #5
 8000c76:	d101      	bne.n	8000c7c <SD_TxDataBlock+0x7c>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	6039      	str	r1, [r7, #0]
 8000c90:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c92:	f7ff ff13 	bl	8000abc <SD_ReadyWait>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2bff      	cmp	r3, #255	@ 0xff
 8000c9a:	d001      	beq.n	8000ca0 <SD_SendCmd+0x1a>
 8000c9c:	23ff      	movs	r3, #255	@ 0xff
 8000c9e:	e042      	b.n	8000d26 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff feac 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	0e1b      	lsrs	r3, r3, #24
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fea6 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fea0 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fe9a 	bl	8000a00 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe95 	bl	8000a00 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b40      	cmp	r3, #64	@ 0x40
 8000cda:	d102      	bne.n	8000ce2 <SD_SendCmd+0x5c>
 8000cdc:	2395      	movs	r3, #149	@ 0x95
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e007      	b.n	8000cf2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b48      	cmp	r3, #72	@ 0x48
 8000ce6:	d102      	bne.n	8000cee <SD_SendCmd+0x68>
 8000ce8:	2387      	movs	r3, #135	@ 0x87
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e001      	b.n	8000cf2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe83 	bl	8000a00 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b4c      	cmp	r3, #76	@ 0x4c
 8000cfe:	d101      	bne.n	8000d04 <SD_SendCmd+0x7e>
 8000d00:	f7ff feb2 	bl	8000a68 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000d04:	230a      	movs	r3, #10
 8000d06:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000d08:	f7ff feae 	bl	8000a68 <SPI_RxByte>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000d10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da05      	bge.n	8000d24 <SD_SendCmd+0x9e>
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f1      	bne.n	8000d08 <SD_SendCmd+0x82>

	return res;
 8000d24:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SD_disk_initialize+0x14>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0d1      	b.n	8000ee8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000d44:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <SD_disk_initialize+0x2a>
 8000d52:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	e0c6      	b.n	8000ee8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000d5a:	f7ff fec9 	bl	8000af0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000d5e:	f7ff fe33 	bl	80009c8 <SELECT>

	/* check disk type */
	type = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000d66:	2100      	movs	r1, #0
 8000d68:	2040      	movs	r0, #64	@ 0x40
 8000d6a:	f7ff ff8c 	bl	8000c86 <SD_SendCmd>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 80a1 	bne.w	8000eb8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000d76:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000d78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d7c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d7e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000d82:	2048      	movs	r0, #72	@ 0x48
 8000d84:	f7ff ff7f 	bl	8000c86 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d155      	bne.n	8000e3a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e00c      	b.n	8000dae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000d94:	7bfc      	ldrb	r4, [r7, #15]
 8000d96:	f7ff fe67 	bl	8000a68 <SPI_RxByte>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f104 0310 	add.w	r3, r4, #16
 8000da2:	443b      	add	r3, r7
 8000da4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d9ef      	bls.n	8000d94 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000db4:	7abb      	ldrb	r3, [r7, #10]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d17e      	bne.n	8000eb8 <SD_disk_initialize+0x188>
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	2baa      	cmp	r3, #170	@ 0xaa
 8000dbe:	d17b      	bne.n	8000eb8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2077      	movs	r0, #119	@ 0x77
 8000dc4:	f7ff ff5f 	bl	8000c86 <SD_SendCmd>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d807      	bhi.n	8000dde <SD_disk_initialize+0xae>
 8000dce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000dd2:	2069      	movs	r0, #105	@ 0x69
 8000dd4:	f7ff ff57 	bl	8000c86 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000dde:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1ec      	bne.n	8000dc0 <SD_disk_initialize+0x90>
 8000de6:	e000      	b.n	8000dea <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000de8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000dea:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d062      	beq.n	8000eb8 <SD_disk_initialize+0x188>
 8000df2:	2100      	movs	r1, #0
 8000df4:	207a      	movs	r0, #122	@ 0x7a
 8000df6:	f7ff ff46 	bl	8000c86 <SD_SendCmd>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d15b      	bne.n	8000eb8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e00c      	b.n	8000e20 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000e06:	7bfc      	ldrb	r4, [r7, #15]
 8000e08:	f7ff fe2e 	bl	8000a68 <SPI_RxByte>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f104 0310 	add.w	r3, r4, #16
 8000e14:	443b      	add	r3, r7
 8000e16:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d9ef      	bls.n	8000e06 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e26:	7a3b      	ldrb	r3, [r7, #8]
 8000e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SD_disk_initialize+0x104>
 8000e30:	230c      	movs	r3, #12
 8000e32:	e000      	b.n	8000e36 <SD_disk_initialize+0x106>
 8000e34:	2304      	movs	r3, #4
 8000e36:	73bb      	strb	r3, [r7, #14]
 8000e38:	e03e      	b.n	8000eb8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2077      	movs	r0, #119	@ 0x77
 8000e3e:	f7ff ff22 	bl	8000c86 <SD_SendCmd>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d808      	bhi.n	8000e5a <SD_disk_initialize+0x12a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2069      	movs	r0, #105	@ 0x69
 8000e4c:	f7ff ff1b 	bl	8000c86 <SD_SendCmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d801      	bhi.n	8000e5a <SD_disk_initialize+0x12a>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e000      	b.n	8000e5c <SD_disk_initialize+0x12c>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d10e      	bne.n	8000e82 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e64:	2100      	movs	r1, #0
 8000e66:	2077      	movs	r0, #119	@ 0x77
 8000e68:	f7ff ff0d 	bl	8000c86 <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d80e      	bhi.n	8000e90 <SD_disk_initialize+0x160>
 8000e72:	2100      	movs	r1, #0
 8000e74:	2069      	movs	r0, #105	@ 0x69
 8000e76:	f7ff ff06 	bl	8000c86 <SD_SendCmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d107      	bne.n	8000e90 <SD_disk_initialize+0x160>
 8000e80:	e00c      	b.n	8000e9c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e82:	2100      	movs	r1, #0
 8000e84:	2041      	movs	r0, #65	@ 0x41
 8000e86:	f7ff fefe 	bl	8000c86 <SD_SendCmd>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e2      	bne.n	8000e5e <SD_disk_initialize+0x12e>
 8000e98:	e000      	b.n	8000e9c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e9a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <SD_disk_initialize+0x1c4>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <SD_disk_initialize+0x184>
 8000ea4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea8:	2050      	movs	r0, #80	@ 0x50
 8000eaa:	f7ff feec 	bl	8000c86 <SD_SendCmd>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SD_disk_initialize+0x188>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <SD_disk_initialize+0x1c8>)
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ebe:	f7ff fd91 	bl	80009e4 <DESELECT>
	SPI_RxByte();
 8000ec2:	f7ff fdd1 	bl	8000a68 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e001      	b.n	8000ee2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ede:	f7ff fe49 	bl	8000b74 <SD_PowerOff>
	}

	return Stat;
 8000ee2:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <SD_disk_initialize+0x1c0>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b2db      	uxtb	r3, r3
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20016b08 	.word	0x20016b08
 8000ef8:	20016b0c 	.word	0x20016b0c

08000efc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SD_disk_status+0x14>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e002      	b.n	8000f16 <SD_disk_status+0x1a>
	return Stat;
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SD_disk_status+0x28>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d102      	bne.n	8000f44 <SD_disk_read+0x1c>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <SD_disk_read+0x20>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e051      	b.n	8000fec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <SD_disk_read+0xcc>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SD_disk_read+0x32>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e048      	b.n	8000fec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <SD_disk_read+0xd0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <SD_disk_read+0x44>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f6c:	f7ff fd2c 	bl	80009c8 <SELECT>

	if (count == 1)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d111      	bne.n	8000f9a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2051      	movs	r0, #81	@ 0x51
 8000f7a:	f7ff fe84 	bl	8000c86 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d129      	bne.n	8000fd8 <SD_disk_read+0xb0>
 8000f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff fe0b 	bl	8000ba4 <SD_RxDataBlock>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <SD_disk_read+0xb0>
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	e01e      	b.n	8000fd8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	2052      	movs	r0, #82	@ 0x52
 8000f9e:	f7ff fe72 	bl	8000c86 <SD_SendCmd>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d117      	bne.n	8000fd8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fdf9 	bl	8000ba4 <SD_RxDataBlock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00a      	beq.n	8000fce <SD_disk_read+0xa6>
				buff += 512;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000fbe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1ed      	bne.n	8000fa8 <SD_disk_read+0x80>
 8000fcc:	e000      	b.n	8000fd0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000fce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	204c      	movs	r0, #76	@ 0x4c
 8000fd4:	f7ff fe57 	bl	8000c86 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000fd8:	f7ff fd04 	bl	80009e4 <DESELECT>
	SPI_RxByte();
 8000fdc:	f7ff fd44 	bl	8000a68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf14      	ite	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	2300      	moveq	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20016b0c 	.word	0x20016b0c

08000ffc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <SD_disk_write+0x1c>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <SD_disk_write+0x20>
 8001018:	2304      	movs	r3, #4
 800101a:	e06b      	b.n	80010f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <SD_disk_write+0x100>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SD_disk_write+0x32>
 800102a:	2303      	movs	r3, #3
 800102c:	e062      	b.n	80010f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800102e:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <SD_disk_write+0x100>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SD_disk_write+0x44>
 800103c:	2302      	movs	r3, #2
 800103e:	e059      	b.n	80010f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <SD_disk_write+0x104>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <SD_disk_write+0x56>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	607b      	str	r3, [r7, #4]

	SELECT();
 8001052:	f7ff fcb9 	bl	80009c8 <SELECT>

	if (count == 1)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d110      	bne.n	800107e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	2058      	movs	r0, #88	@ 0x58
 8001060:	f7ff fe11 	bl	8000c86 <SD_SendCmd>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d13a      	bne.n	80010e0 <SD_disk_write+0xe4>
 800106a:	21fe      	movs	r1, #254	@ 0xfe
 800106c:	68b8      	ldr	r0, [r7, #8]
 800106e:	f7ff fdc7 	bl	8000c00 <SD_TxDataBlock>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d033      	beq.n	80010e0 <SD_disk_write+0xe4>
			count = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	e030      	b.n	80010e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <SD_disk_write+0x104>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	2077      	movs	r0, #119	@ 0x77
 800108e:	f7ff fdfa 	bl	8000c86 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	2057      	movs	r0, #87	@ 0x57
 8001096:	f7ff fdf6 	bl	8000c86 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	2059      	movs	r0, #89	@ 0x59
 800109e:	f7ff fdf2 	bl	8000c86 <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11b      	bne.n	80010e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010a8:	21fc      	movs	r1, #252	@ 0xfc
 80010aa:	68b8      	ldr	r0, [r7, #8]
 80010ac:	f7ff fda8 	bl	8000c00 <SD_TxDataBlock>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <SD_disk_write+0xd0>
				buff += 512;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80010bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ee      	bne.n	80010a8 <SD_disk_write+0xac>
 80010ca:	e000      	b.n	80010ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80010ce:	21fd      	movs	r1, #253	@ 0xfd
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fd95 	bl	8000c00 <SD_TxDataBlock>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80010e0:	f7ff fc80 	bl	80009e4 <DESELECT>
	SPI_RxByte();
 80010e4:	f7ff fcc0 	bl	8000a68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20016b0c 	.word	0x20016b0c

08001104 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	603a      	str	r2, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	460b      	mov	r3, r1
 8001112:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SD_disk_ioctl+0x1e>
 800111e:	2304      	movs	r3, #4
 8001120:	e113      	b.n	800134a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d124      	bne.n	8001178 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d012      	beq.n	800115c <SD_disk_ioctl+0x58>
 8001136:	2b02      	cmp	r3, #2
 8001138:	dc1a      	bgt.n	8001170 <SD_disk_ioctl+0x6c>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <SD_disk_ioctl+0x40>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d006      	beq.n	8001150 <SD_disk_ioctl+0x4c>
 8001142:	e015      	b.n	8001170 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001144:	f7ff fd16 	bl	8000b74 <SD_PowerOff>
			res = RES_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800114e:	e0fa      	b.n	8001346 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001150:	f7ff fcce 	bl	8000af0 <SD_PowerOn>
			res = RES_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800115a:	e0f4      	b.n	8001346 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	1c5c      	adds	r4, r3, #1
 8001160:	f7ff fd14 	bl	8000b8c <SD_CheckPower>
 8001164:	4603      	mov	r3, r0
 8001166:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800116e:	e0ea      	b.n	8001346 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001170:	2304      	movs	r3, #4
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001176:	e0e6      	b.n	8001346 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001178:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <SD_disk_ioctl+0x250>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SD_disk_ioctl+0x86>
 8001186:	2303      	movs	r3, #3
 8001188:	e0df      	b.n	800134a <SD_disk_ioctl+0x246>

		SELECT();
 800118a:	f7ff fc1d 	bl	80009c8 <SELECT>

		switch (ctrl)
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b0d      	cmp	r3, #13
 8001192:	f200 80c9 	bhi.w	8001328 <SD_disk_ioctl+0x224>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <SD_disk_ioctl+0x98>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	08001293 	.word	0x08001293
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	08001283 	.word	0x08001283
 80011a8:	08001329 	.word	0x08001329
 80011ac:	08001329 	.word	0x08001329
 80011b0:	08001329 	.word	0x08001329
 80011b4:	08001329 	.word	0x08001329
 80011b8:	08001329 	.word	0x08001329
 80011bc:	08001329 	.word	0x08001329
 80011c0:	08001329 	.word	0x08001329
 80011c4:	08001329 	.word	0x08001329
 80011c8:	080012a5 	.word	0x080012a5
 80011cc:	080012c9 	.word	0x080012c9
 80011d0:	080012ed 	.word	0x080012ed
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011d4:	2100      	movs	r1, #0
 80011d6:	2049      	movs	r0, #73	@ 0x49
 80011d8:	f7ff fd55 	bl	8000c86 <SD_SendCmd>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80a6 	bne.w	8001330 <SD_disk_ioctl+0x22c>
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2110      	movs	r1, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fcda 	bl	8000ba4 <SD_RxDataBlock>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809c 	beq.w	8001330 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80011f8:	7b3b      	ldrb	r3, [r7, #12]
 80011fa:	099b      	lsrs	r3, r3, #6
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10d      	bne.n	800121e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	461a      	mov	r2, r3
 8001206:	7d3b      	ldrb	r3, [r7, #20]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	3301      	adds	r3, #1
 8001212:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001214:	8bfb      	ldrh	r3, [r7, #30]
 8001216:	029a      	lsls	r2, r3, #10
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e02d      	b.n	800127a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	09db      	lsrs	r3, r3, #7
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b2da      	uxtb	r2, r3
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0306 	and.w	r3, r3, #6
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3302      	adds	r3, #2
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001246:	7d3b      	ldrb	r3, [r7, #20]
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	7cbb      	ldrb	r3, [r7, #18]
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	b29b      	uxth	r3, r3
 800125e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800126c:	8bfa      	ldrh	r2, [r7, #30]
 800126e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001272:	3b09      	subs	r3, #9
 8001274:	409a      	lsls	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001280:	e056      	b.n	8001330 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001288:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001290:	e055      	b.n	800133e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001292:	f7ff fc13 	bl	8000abc <SD_ReadyWait>
 8001296:	4603      	mov	r3, r0
 8001298:	2bff      	cmp	r3, #255	@ 0xff
 800129a:	d14b      	bne.n	8001334 <SD_disk_ioctl+0x230>
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012a2:	e047      	b.n	8001334 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012a4:	2100      	movs	r1, #0
 80012a6:	2049      	movs	r0, #73	@ 0x49
 80012a8:	f7ff fced 	bl	8000c86 <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d142      	bne.n	8001338 <SD_disk_ioctl+0x234>
 80012b2:	2110      	movs	r1, #16
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f7ff fc75 	bl	8000ba4 <SD_RxDataBlock>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03b      	beq.n	8001338 <SD_disk_ioctl+0x234>
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012c6:	e037      	b.n	8001338 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012c8:	2100      	movs	r1, #0
 80012ca:	204a      	movs	r0, #74	@ 0x4a
 80012cc:	f7ff fcdb 	bl	8000c86 <SD_SendCmd>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d132      	bne.n	800133c <SD_disk_ioctl+0x238>
 80012d6:	2110      	movs	r1, #16
 80012d8:	6a38      	ldr	r0, [r7, #32]
 80012da:	f7ff fc63 	bl	8000ba4 <SD_RxDataBlock>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02b      	beq.n	800133c <SD_disk_ioctl+0x238>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80012ea:	e027      	b.n	800133c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80012ec:	2100      	movs	r1, #0
 80012ee:	207a      	movs	r0, #122	@ 0x7a
 80012f0:	f7ff fcc9 	bl	8000c86 <SD_SendCmd>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001300:	e00b      	b.n	800131a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001302:	6a3c      	ldr	r4, [r7, #32]
 8001304:	1c63      	adds	r3, r4, #1
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	f7ff fbae 	bl	8000a68 <SPI_RxByte>
 800130c:	4603      	mov	r3, r0
 800130e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001314:	3301      	adds	r3, #1
 8001316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800131a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800131e:	2b03      	cmp	r3, #3
 8001320:	d9ef      	bls.n	8001302 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001328:	2304      	movs	r3, #4
 800132a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800132e:	e006      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 8001330:	bf00      	nop
 8001332:	e004      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <SD_disk_ioctl+0x23a>
			break;
 800133c:	bf00      	nop
		}

		DESELECT();
 800133e:	f7ff fb51 	bl	80009e4 <DESELECT>
		SPI_RxByte();
 8001342:	f7ff fb91 	bl	8000a68 <SPI_RxByte>
	}

	return res;
 8001346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800134a:	4618      	mov	r0, r3
 800134c:	372c      	adds	r7, #44	@ 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000

08001358 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2101      	movs	r1, #1
 8001360:	4878      	ldr	r0, [pc, #480]	@ (8001544 <LCD_Init+0x1ec>)
 8001362:	f005 f9c7 	bl	80066f4 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8001366:	2201      	movs	r2, #1
 8001368:	2113      	movs	r1, #19
 800136a:	4877      	ldr	r0, [pc, #476]	@ (8001548 <LCD_Init+0x1f0>)
 800136c:	f005 f9c2 	bl	80066f4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2102      	movs	r1, #2
 8001374:	4875      	ldr	r0, [pc, #468]	@ (800154c <LCD_Init+0x1f4>)
 8001376:	f005 f9bd 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800137a:	2005      	movs	r0, #5
 800137c:	f004 fe52 	bl	8006024 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2102      	movs	r1, #2
 8001384:	4871      	ldr	r0, [pc, #452]	@ (800154c <LCD_Init+0x1f4>)
 8001386:	f005 f9b5 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800138a:	2014      	movs	r0, #20
 800138c:	f004 fe4a 	bl	8006024 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2102      	movs	r1, #2
 8001394:	486d      	ldr	r0, [pc, #436]	@ (800154c <LCD_Init+0x1f4>)
 8001396:	f005 f9ad 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800139a:	2096      	movs	r0, #150	@ 0x96
 800139c:	f004 fe42 	bl	8006024 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4867      	ldr	r0, [pc, #412]	@ (8001544 <LCD_Init+0x1ec>)
 80013a6:	f005 f9a5 	bl	80066f4 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 80013aa:	20e9      	movs	r0, #233	@ 0xe9
 80013ac:	f000 f8d0 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x20);
 80013b0:	2020      	movs	r0, #32
 80013b2:	f000 f973 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 80013b6:	2011      	movs	r0, #17
 80013b8:	f000 f8ca 	bl	8001550 <LCD_CMD>
	HAL_Delay(100);
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f004 fe31 	bl	8006024 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 80013c2:	20d1      	movs	r0, #209	@ 0xd1
 80013c4:	f000 f8c4 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f967 	bl	800169c <LCD_DATA>
	LCD_DATA(0x71);
 80013ce:	2071      	movs	r0, #113	@ 0x71
 80013d0:	f000 f964 	bl	800169c <LCD_DATA>
	LCD_DATA(0x19);
 80013d4:	2019      	movs	r0, #25
 80013d6:	f000 f961 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 80013da:	20d0      	movs	r0, #208	@ 0xd0
 80013dc:	f000 f8b8 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x07);
 80013e0:	2007      	movs	r0, #7
 80013e2:	f000 f95b 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 f958 	bl	800169c <LCD_DATA>
	LCD_DATA(0x08);
 80013ec:	2008      	movs	r0, #8
 80013ee:	f000 f955 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80013f2:	2036      	movs	r0, #54	@ 0x36
 80013f4:	f000 f8ac 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80013f8:	20e8      	movs	r0, #232	@ 0xe8
 80013fa:	f000 f94f 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80013fe:	203a      	movs	r0, #58	@ 0x3a
 8001400:	f000 f8a6 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8001404:	2005      	movs	r0, #5
 8001406:	f000 f949 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 800140a:	20c1      	movs	r0, #193	@ 0xc1
 800140c:	f000 f8a0 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x10);
 8001410:	2010      	movs	r0, #16
 8001412:	f000 f943 	bl	800169c <LCD_DATA>
	LCD_DATA(0x10);
 8001416:	2010      	movs	r0, #16
 8001418:	f000 f940 	bl	800169c <LCD_DATA>
	LCD_DATA(0x02);
 800141c:	2002      	movs	r0, #2
 800141e:	f000 f93d 	bl	800169c <LCD_DATA>
	LCD_DATA(0x02);
 8001422:	2002      	movs	r0, #2
 8001424:	f000 f93a 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8001428:	20c0      	movs	r0, #192	@ 0xc0
 800142a:	f000 f891 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f934 	bl	800169c <LCD_DATA>
	LCD_DATA(0x35);
 8001434:	2035      	movs	r0, #53	@ 0x35
 8001436:	f000 f931 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f92e 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f000 f92b 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f928 	bl	800169c <LCD_DATA>
	LCD_DATA(0x02);
 800144c:	2002      	movs	r0, #2
 800144e:	f000 f925 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8001452:	20c5      	movs	r0, #197	@ 0xc5
 8001454:	f000 f87c 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8001458:	2004      	movs	r0, #4
 800145a:	f000 f91f 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 800145e:	20d2      	movs	r0, #210	@ 0xd2
 8001460:	f000 f876 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x01);
 8001464:	2001      	movs	r0, #1
 8001466:	f000 f919 	bl	800169c <LCD_DATA>
	LCD_DATA(0x44);
 800146a:	2044      	movs	r0, #68	@ 0x44
 800146c:	f000 f916 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8001470:	20c8      	movs	r0, #200	@ 0xc8
 8001472:	f000 f86d 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x04);
 8001476:	2004      	movs	r0, #4
 8001478:	f000 f910 	bl	800169c <LCD_DATA>
	LCD_DATA(0x67);
 800147c:	2067      	movs	r0, #103	@ 0x67
 800147e:	f000 f90d 	bl	800169c <LCD_DATA>
	LCD_DATA(0x35);
 8001482:	2035      	movs	r0, #53	@ 0x35
 8001484:	f000 f90a 	bl	800169c <LCD_DATA>
	LCD_DATA(0x04);
 8001488:	2004      	movs	r0, #4
 800148a:	f000 f907 	bl	800169c <LCD_DATA>
	LCD_DATA(0x08);
 800148e:	2008      	movs	r0, #8
 8001490:	f000 f904 	bl	800169c <LCD_DATA>
	LCD_DATA(0x06);
 8001494:	2006      	movs	r0, #6
 8001496:	f000 f901 	bl	800169c <LCD_DATA>
	LCD_DATA(0x24);
 800149a:	2024      	movs	r0, #36	@ 0x24
 800149c:	f000 f8fe 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 f8fb 	bl	800169c <LCD_DATA>
	LCD_DATA(0x37);
 80014a6:	2037      	movs	r0, #55	@ 0x37
 80014a8:	f000 f8f8 	bl	800169c <LCD_DATA>
	LCD_DATA(0x40);
 80014ac:	2040      	movs	r0, #64	@ 0x40
 80014ae:	f000 f8f5 	bl	800169c <LCD_DATA>
	LCD_DATA(0x03);
 80014b2:	2003      	movs	r0, #3
 80014b4:	f000 f8f2 	bl	800169c <LCD_DATA>
	LCD_DATA(0x10);
 80014b8:	2010      	movs	r0, #16
 80014ba:	f000 f8ef 	bl	800169c <LCD_DATA>
	LCD_DATA(0x08);
 80014be:	2008      	movs	r0, #8
 80014c0:	f000 f8ec 	bl	800169c <LCD_DATA>
	LCD_DATA(0x80);
 80014c4:	2080      	movs	r0, #128	@ 0x80
 80014c6:	f000 f8e9 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f8e6 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80014d0:	202a      	movs	r0, #42	@ 0x2a
 80014d2:	f000 f83d 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f8e0 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f8dd 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 f8da 	bl	800169c <LCD_DATA>
	//LCD_DATA(0x3F);
	LCD_DATA(0xEF);
 80014e8:	20ef      	movs	r0, #239	@ 0xef
 80014ea:	f000 f8d7 	bl	800169c <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 80014ee:	202b      	movs	r0, #43	@ 0x2b
 80014f0:	f000 f82e 	bl	8001550 <LCD_CMD>
	LCD_DATA(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f8d1 	bl	800169c <LCD_DATA>
	LCD_DATA(0x00);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f8ce 	bl	800169c <LCD_DATA>
	LCD_DATA(0x01);
 8001500:	2001      	movs	r0, #1
 8001502:	f000 f8cb 	bl	800169c <LCD_DATA>
	//LCD_DATA(0xE0);
	LCD_DATA(0x3F);
 8001506:	203f      	movs	r0, #63	@ 0x3f
 8001508:	f000 f8c8 	bl	800169c <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 800150c:	2029      	movs	r0, #41	@ 0x29
 800150e:	f000 f81f 	bl	8001550 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8001512:	202c      	movs	r0, #44	@ 0x2c
 8001514:	f000 f81c 	bl	8001550 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001518:	2020      	movs	r0, #32
 800151a:	f000 f819 	bl	8001550 <LCD_CMD>
	HAL_Delay(120);
 800151e:	2078      	movs	r0, #120	@ 0x78
 8001520:	f004 fd80 	bl	8006024 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001524:	2011      	movs	r0, #17
 8001526:	f000 f813 	bl	8001550 <LCD_CMD>
	HAL_Delay(120);
 800152a:	2078      	movs	r0, #120	@ 0x78
 800152c:	f004 fd7a 	bl	8006024 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8001530:	2029      	movs	r0, #41	@ 0x29
 8001532:	f000 f80d 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2101      	movs	r1, #1
 800153a:	4802      	ldr	r0, [pc, #8]	@ (8001544 <LCD_Init+0x1ec>)
 800153c:	f005 f8da 	bl	80066f4 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020400 	.word	0x40020400
 8001548:	40020000 	.word	0x40020000
 800154c:	40020800 	.word	0x40020800

08001550 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	484c      	ldr	r0, [pc, #304]	@ (8001690 <LCD_CMD+0x140>)
 8001560:	f005 f8c8 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2102      	movs	r1, #2
 8001568:	4849      	ldr	r0, [pc, #292]	@ (8001690 <LCD_CMD+0x140>)
 800156a:	f005 f8c3 	bl	80066f4 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157e:	4844      	ldr	r0, [pc, #272]	@ (8001690 <LCD_CMD+0x140>)
 8001580:	f005 f8b8 	bl	80066f4 <HAL_GPIO_WritePin>
 8001584:	e005      	b.n	8001592 <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158c:	4840      	ldr	r0, [pc, #256]	@ (8001690 <LCD_CMD+0x140>)
 800158e:	f005 f8b1 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	483c      	ldr	r0, [pc, #240]	@ (8001694 <LCD_CMD+0x144>)
 80015a2:	f005 f8a7 	bl	80066f4 <HAL_GPIO_WritePin>
 80015a6:	e004      	b.n	80015b2 <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	4839      	ldr	r0, [pc, #228]	@ (8001694 <LCD_CMD+0x144>)
 80015ae:	f005 f8a1 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c2:	4833      	ldr	r0, [pc, #204]	@ (8001690 <LCD_CMD+0x140>)
 80015c4:	f005 f896 	bl	80066f4 <HAL_GPIO_WritePin>
 80015c8:	e005      	b.n	80015d6 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d0:	482f      	ldr	r0, [pc, #188]	@ (8001690 <LCD_CMD+0x140>)
 80015d2:	f005 f88f 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	482c      	ldr	r0, [pc, #176]	@ (8001698 <LCD_CMD+0x148>)
 80015e6:	f005 f885 	bl	80066f4 <HAL_GPIO_WritePin>
 80015ea:	e004      	b.n	80015f6 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2108      	movs	r1, #8
 80015f0:	4829      	ldr	r0, [pc, #164]	@ (8001698 <LCD_CMD+0x148>)
 80015f2:	f005 f87f 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	4824      	ldr	r0, [pc, #144]	@ (8001698 <LCD_CMD+0x148>)
 8001606:	f005 f875 	bl	80066f4 <HAL_GPIO_WritePin>
 800160a:	e004      	b.n	8001616 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2120      	movs	r1, #32
 8001610:	4821      	ldr	r0, [pc, #132]	@ (8001698 <LCD_CMD+0x148>)
 8001612:	f005 f86f 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2110      	movs	r1, #16
 8001624:	481c      	ldr	r0, [pc, #112]	@ (8001698 <LCD_CMD+0x148>)
 8001626:	f005 f865 	bl	80066f4 <HAL_GPIO_WritePin>
 800162a:	e004      	b.n	8001636 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2110      	movs	r1, #16
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <LCD_CMD+0x148>)
 8001632:	f005 f85f 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001646:	4814      	ldr	r0, [pc, #80]	@ (8001698 <LCD_CMD+0x148>)
 8001648:	f005 f854 	bl	80066f4 <HAL_GPIO_WritePin>
 800164c:	e005      	b.n	800165a <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001654:	4810      	ldr	r0, [pc, #64]	@ (8001698 <LCD_CMD+0x148>)
 8001656:	f005 f84d 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da06      	bge.n	8001670 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <LCD_CMD+0x140>)
 800166a:	f005 f843 	bl	80066f4 <HAL_GPIO_WritePin>
 800166e:	e005      	b.n	800167c <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <LCD_CMD+0x140>)
 8001678:	f005 f83c 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2102      	movs	r1, #2
 8001680:	4803      	ldr	r0, [pc, #12]	@ (8001690 <LCD_CMD+0x140>)
 8001682:	f005 f837 	bl	80066f4 <HAL_GPIO_WritePin>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000
 8001694:	40020800 	.word	0x40020800
 8001698:	40020400 	.word	0x40020400

0800169c <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2110      	movs	r1, #16
 80016aa:	484c      	ldr	r0, [pc, #304]	@ (80017dc <LCD_DATA+0x140>)
 80016ac:	f005 f822 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4849      	ldr	r0, [pc, #292]	@ (80017dc <LCD_DATA+0x140>)
 80016b6:	f005 f81d 	bl	80066f4 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ca:	4844      	ldr	r0, [pc, #272]	@ (80017dc <LCD_DATA+0x140>)
 80016cc:	f005 f812 	bl	80066f4 <HAL_GPIO_WritePin>
 80016d0:	e005      	b.n	80016de <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d8:	4840      	ldr	r0, [pc, #256]	@ (80017dc <LCD_DATA+0x140>)
 80016da:	f005 f80b 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	483c      	ldr	r0, [pc, #240]	@ (80017e0 <LCD_DATA+0x144>)
 80016ee:	f005 f801 	bl	80066f4 <HAL_GPIO_WritePin>
 80016f2:	e004      	b.n	80016fe <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	4839      	ldr	r0, [pc, #228]	@ (80017e0 <LCD_DATA+0x144>)
 80016fa:	f004 fffb 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800170e:	4833      	ldr	r0, [pc, #204]	@ (80017dc <LCD_DATA+0x140>)
 8001710:	f004 fff0 	bl	80066f4 <HAL_GPIO_WritePin>
 8001714:	e005      	b.n	8001722 <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800171c:	482f      	ldr	r0, [pc, #188]	@ (80017dc <LCD_DATA+0x140>)
 800171e:	f004 ffe9 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2108      	movs	r1, #8
 8001730:	482c      	ldr	r0, [pc, #176]	@ (80017e4 <LCD_DATA+0x148>)
 8001732:	f004 ffdf 	bl	80066f4 <HAL_GPIO_WritePin>
 8001736:	e004      	b.n	8001742 <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	4829      	ldr	r0, [pc, #164]	@ (80017e4 <LCD_DATA+0x148>)
 800173e:	f004 ffd9 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	4824      	ldr	r0, [pc, #144]	@ (80017e4 <LCD_DATA+0x148>)
 8001752:	f004 ffcf 	bl	80066f4 <HAL_GPIO_WritePin>
 8001756:	e004      	b.n	8001762 <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2120      	movs	r1, #32
 800175c:	4821      	ldr	r0, [pc, #132]	@ (80017e4 <LCD_DATA+0x148>)
 800175e:	f004 ffc9 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <LCD_DATA+0x148>)
 8001772:	f004 ffbf 	bl	80066f4 <HAL_GPIO_WritePin>
 8001776:	e004      	b.n	8001782 <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2110      	movs	r1, #16
 800177c:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <LCD_DATA+0x148>)
 800177e:	f004 ffb9 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <LCD_DATA+0x148>)
 8001794:	f004 ffae 	bl	80066f4 <HAL_GPIO_WritePin>
 8001798:	e005      	b.n	80017a6 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <LCD_DATA+0x148>)
 80017a2:	f004 ffa7 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da06      	bge.n	80017bc <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <LCD_DATA+0x140>)
 80017b6:	f004 ff9d 	bl	80066f4 <HAL_GPIO_WritePin>
 80017ba:	e005      	b.n	80017c8 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c2:	4806      	ldr	r0, [pc, #24]	@ (80017dc <LCD_DATA+0x140>)
 80017c4:	f004 ff96 	bl	80066f4 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2102      	movs	r1, #2
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <LCD_DATA+0x140>)
 80017ce:	f004 ff91 	bl	80066f4 <HAL_GPIO_WritePin>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020400 	.word	0x40020400

080017e8 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80017f6:	202a      	movs	r0, #42	@ 0x2a
 80017f8:	f7ff feaa 	bl	8001550 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff4a 	bl	800169c <LCD_DATA>
	LCD_DATA(x1);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff45 	bl	800169c <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff3f 	bl	800169c <LCD_DATA>
	LCD_DATA(x2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff3a 	bl	800169c <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001828:	202b      	movs	r0, #43	@ 0x2b
 800182a:	f7ff fe91 	bl	8001550 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <LCD_DATA>
	LCD_DATA(y1);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff2c 	bl	800169c <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff26 	bl	800169c <LCD_DATA>
	LCD_DATA(y2);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff21 	bl	800169c <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 800185a:	202c      	movs	r0, #44	@ 0x2c
 800185c:	f7ff fe78 	bl	8001550 <LCD_CMD>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <H_line>:
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8001876:	202c      	movs	r0, #44	@ 0x2c
 8001878:	f7ff fe6a 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2110      	movs	r1, #16
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <H_line+0x78>)
 8001882:	f004 ff37 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	4816      	ldr	r0, [pc, #88]	@ (80018e4 <H_line+0x7c>)
 800188c:	f004 ff32 	bl	80066f4 <HAL_GPIO_WritePin>
	l = l + x;
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff ffa2 	bl	80017e8 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00d      	b.n	80018c6 <H_line+0x5e>
		LCD_DATA(c >> 8);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fef3 	bl	800169c <LCD_DATA>
		LCD_DATA(c);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff feee 	bl	800169c <LCD_DATA>
	for (i = 0; i < l; i++) {
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d3ed      	bcc.n	80018aa <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <H_line+0x7c>)
 80018d4:	f004 ff0e 	bl	80066f4 <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400

080018e8 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 80018f6:	202c      	movs	r0, #44	@ 0x2c
 80018f8:	f7ff fe2a 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <V_line+0x78>)
 8001902:	f004 fef7 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2101      	movs	r1, #1
 800190a:	4816      	ldr	r0, [pc, #88]	@ (8001964 <V_line+0x7c>)
 800190c:	f004 fef2 	bl	80066f4 <HAL_GPIO_WritePin>
	l = l + y;
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4413      	add	r3, r2
 8001916:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff ff62 	bl	80017e8 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00d      	b.n	8001946 <V_line+0x5e>
		LCD_DATA(c >> 8);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff feb3 	bl	800169c <LCD_DATA>
		LCD_DATA(c);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff feae 	bl	800169c <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d9ed      	bls.n	800192a <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2101      	movs	r1, #1
 8001952:	4804      	ldr	r0, [pc, #16]	@ (8001964 <V_line+0x7c>)
 8001954:	f004 fece 	bl	80066f4 <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400

08001968 <Rect>:
//***************************************************************************************************************************************
// Función para dibujar un rectángulo - parámetros ( coordenada x, cordenada y, ancho, alto, color)
//***************************************************************************************************************************************
void Rect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
	H_line(x, y, w, c);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff ff73 	bl	8001868 <H_line>
	H_line(x, y + h, w, c);
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	18d1      	adds	r1, r2, r3
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff6b 	bl	8001868 <H_line>
	V_line(x, y, h, c);
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ffa5 	bl	80018e8 <V_line>
	V_line(x + w, y, h, c);
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	18d0      	adds	r0, r2, r3
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	f7ff ff9d 	bl	80018e8 <V_line>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80019c6:	202c      	movs	r0, #44	@ 0x2c
 80019c8:	f7ff fdc2 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2110      	movs	r1, #16
 80019d0:	4824      	ldr	r0, [pc, #144]	@ (8001a64 <FillRect+0xac>)
 80019d2:	f004 fe8f 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2101      	movs	r1, #1
 80019da:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <FillRect+0xb0>)
 80019dc:	f004 fe8a 	bl	80066f4 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1e5a      	subs	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fef4 	bl	80017e8 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	e01a      	b.n	8001a4a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e010      	b.n	8001a3c <FillRect+0x84>
			LCD_DATA(c >> 8);
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fe3b 	bl	800169c <LCD_DATA>
			LCD_DATA(c);
 8001a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe36 	bl	800169c <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	3b02      	subs	r3, #2
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8ea      	bhi.n	8001a1a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	3301      	adds	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d8e0      	bhi.n	8001a14 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2101      	movs	r1, #1
 8001a56:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <FillRect+0xb0>)
 8001a58:	f004 fe4c 	bl	80066f4 <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	@ 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400

08001a6c <LCD_Bitmap>:
	}
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned char bitmap[]) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2C); // write_memory_start
 8001a7a:	202c      	movs	r0, #44	@ 0x2c
 8001a7c:	f7ff fd68 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2110      	movs	r1, #16
 8001a84:	4822      	ldr	r0, [pc, #136]	@ (8001b10 <LCD_Bitmap+0xa4>)
 8001a86:	f004 fe35 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4821      	ldr	r0, [pc, #132]	@ (8001b14 <LCD_Bitmap+0xa8>)
 8001a90:	f004 fe30 	bl	80066f4 <HAL_GPIO_WritePin>

	unsigned int k = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
	SetWindows(x, y, x + width - 1, y + height - 1);
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fe9b 	bl	80017e8 <SetWindows>

	// Intercambiar el recorrido de 'i' y 'j' para ajustar la orientación horizontal
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e01e      	b.n	8001af6 <LCD_Bitmap+0x8a>
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e014      	b.n	8001ae8 <LCD_Bitmap+0x7c>
			LCD_DATA(bitmap[k]);
 8001abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fde8 	bl	800169c <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fde0 	bl	800169c <LCD_DATA>
			k += 2;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < width; j++) {   // Recorrer las columnas de la imagen (ahora las filas en pantalla horizontal)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8e6      	bhi.n	8001abe <LCD_Bitmap+0x52>
	for (int i = 0; i < height; i++) {      // Recorrer las filas de la imagen (ahora las columnas en pantalla horizontal)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8dc      	bhi.n	8001ab8 <LCD_Bitmap+0x4c>
		}
	}

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2101      	movs	r1, #1
 8001b02:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <LCD_Bitmap+0xa8>)
 8001b04:	f004 fdf6 	bl	80066f4 <HAL_GPIO_WritePin>
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400

08001b18 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001b26:	202c      	movs	r0, #44	@ 0x2c
 8001b28:	f7ff fd12 	bl	8001550 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2110      	movs	r1, #16
 8001b30:	484d      	ldr	r0, [pc, #308]	@ (8001c68 <LCD_Sprite+0x150>)
 8001b32:	f004 fddf 	bl	80066f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	484c      	ldr	r0, [pc, #304]	@ (8001c6c <LCD_Sprite+0x154>)
 8001b3c:	f004 fdda 	bl	80066f4 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f7ff fe44 	bl	80017e8 <SetWindows>
	int k = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	613b      	str	r3, [r7, #16]
	if (flip) {
 8001b6e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03a      	beq.n	8001bec <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	e032      	b.n	8001be2 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8001b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	fb03 f202 	mul.w	r2, r3, r2
 8001b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba0:	4413      	add	r3, r2
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba8:	e014      	b.n	8001bd4 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8001baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd72 	bl	800169c <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fd6a 	bl	800169c <LCD_DATA>
				k = k - 2;
 8001bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bca:	3b02      	subs	r3, #2
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbe6      	blt.n	8001baa <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	3301      	adds	r3, #1
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dbc8      	blt.n	8001b7c <LCD_Sprite+0x64>
 8001bea:	e034      	b.n	8001c56 <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	e02d      	b.n	8001c4e <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	fb03 f202 	mul.w	r2, r3, r2
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001c0a:	4413      	add	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	e014      	b.n	8001c40 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8001c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd3c 	bl	800169c <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	3301      	adds	r3, #1
 8001c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fd34 	bl	800169c <LCD_DATA>
				k = k + 2;
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	3302      	adds	r3, #2
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbe6      	blt.n	8001c16 <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbcd      	blt.n	8001bf2 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <LCD_Sprite+0x154>)
 8001c5c:	f004 fd4a 	bl	80066f4 <HAL_GPIO_WritePin>
}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	@ 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400

08001c70 <transmit_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void transmit_uart(char *string){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint8_t len=strlen(string);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7fe fac9 	bl	8000210 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, (uint8_t*)string, len, 200);
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	23c8      	movs	r3, #200	@ 0xc8
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <transmit_uart+0x28>)
 8001c8c:	f006 fde8 	bl	8008860 <HAL_UART_Transmit>
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20017c30 	.word	0x20017c30

08001c9c <CargarBitmaps_SD>:

// Función para leer una imagen desde la SD
int CargarBitmaps_SD(const char* filename) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ca8:	f843 0c3c 	str.w	r0, [r3, #-60]
    FIL fil;
    UINT bytes_read;
    FRESULT fres;
    // Montar SD
    fres = f_mount(&fs, "/", 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	4936      	ldr	r1, [pc, #216]	@ (8001d88 <CargarBitmaps_SD+0xec>)
 8001cb0:	4836      	ldr	r0, [pc, #216]	@ (8001d8c <CargarBitmaps_SD+0xf0>)
 8001cb2:	f00a f823 	bl	800bcfc <f_mount>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cbc:	f102 021f 	add.w	r2, r2, #31
 8001cc0:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK){
 8001cc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cc6:	f103 031f 	add.w	r3, r3, #31
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <CargarBitmaps_SD+0x3a>
    	transmit_uart("SD MONTADA\n");
 8001cd0:	482f      	ldr	r0, [pc, #188]	@ (8001d90 <CargarBitmaps_SD+0xf4>)
 8001cd2:	f7ff ffcd 	bl	8001c70 <transmit_uart>
    }

    // Abrir el archivo desde la SD
    fres = f_open(&fil, filename, FA_READ);
 8001cd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	3b14      	subs	r3, #20
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00a f84d 	bl	800bd88 <f_open>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cf4:	f102 021f 	add.w	r2, r2, #31
 8001cf8:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8001cfa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cfe:	f103 031f 	add.w	r3, r3, #31
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <CargarBitmaps_SD+0x76>
       transmit_uart("Error al abrir el archivo en la SD\n");
 8001d08:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <CargarBitmaps_SD+0xf8>)
 8001d0a:	f7ff ffb1 	bl	8001c70 <transmit_uart>
        return 0;  // Error al abrir el archivo
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e035      	b.n	8001d7e <CargarBitmaps_SD+0xe2>
    }
    transmit_uart("Se abrio el archivo\n");
 8001d12:	4821      	ldr	r0, [pc, #132]	@ (8001d98 <CargarBitmaps_SD+0xfc>)
 8001d14:	f7ff ffac 	bl	8001c70 <transmit_uart>
    // Leer los datos del archivo y almacenarlos en la variable play
    fres = f_read(&fil, fragmento_imagen, 19200, &bytes_read);
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	3b18      	subs	r3, #24
 8001d1e:	f107 0020 	add.w	r0, r7, #32
 8001d22:	3814      	subs	r0, #20
 8001d24:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001d28:	491c      	ldr	r1, [pc, #112]	@ (8001d9c <CargarBitmaps_SD+0x100>)
 8001d2a:	f00a f9f5 	bl	800c118 <f_read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d34:	f102 021f 	add.w	r2, r2, #31
 8001d38:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytes_read == 0) {
 8001d3a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d3e:	f103 031f 	add.w	r3, r3, #31
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <CargarBitmaps_SD+0xb8>
 8001d48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d4c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <CargarBitmaps_SD+0xce>
       transmit_uart("Error al leer la imagen desde la SD\n");
 8001d54:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <CargarBitmaps_SD+0x104>)
 8001d56:	f7ff ff8b 	bl	8001c70 <transmit_uart>
        f_close(&fil);
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	3b14      	subs	r3, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00a fbb6 	bl	800c4d2 <f_close>
        return 0;  // Error al leer el archivo
 8001d66:	2300      	movs	r3, #0
 8001d68:	e009      	b.n	8001d7e <CargarBitmaps_SD+0xe2>
    }

    // Cerrar el archivo
    f_close(&fil);
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	3b14      	subs	r3, #20
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00a fbae 	bl	800c4d2 <f_close>
    transmit_uart("TERMINO DE CARGAR IMAGEN\n");
 8001d76:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <CargarBitmaps_SD+0x108>)
 8001d78:	f7ff ff7a 	bl	8001c70 <transmit_uart>
   // transmit_uart("Imagen cargada correctamente desde la SD a la variable play\n");
    return 1;  // Éxito
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	0800d0c4 	.word	0x0800d0c4
 8001d8c:	20016b68 	.word	0x20016b68
 8001d90:	0800d0c8 	.word	0x0800d0c8
 8001d94:	0800d0d4 	.word	0x0800d0d4
 8001d98:	0800d0f8 	.word	0x0800d0f8
 8001d9c:	20017c78 	.word	0x20017c78
 8001da0:	0800d110 	.word	0x0800d110
 8001da4:	0800d138 	.word	0x0800d138

08001da8 <setPWM_Frequency>:

/*---------Sonido---------------------*/

// Función para cambiar la frecuencia del PWM (ajusta el periodo)
void setPWM_Frequency(uint32_t frequency) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    uint32_t timer_clock = 1000000; // 1 MHz (depende de tu configuración)
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <setPWM_Frequency+0x3c>)
 8001db2:	60fb      	str	r3, [r7, #12]
    uint32_t period = (timer_clock / frequency) - 1;
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]

    // Cambiar el periodo (Auto-Reload Register)
    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <setPWM_Frequency+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <setPWM_Frequency+0x40>)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	60d3      	str	r3, [r2, #12]

    // Reiniciar el timer para aplicar el cambio de frecuencia
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <setPWM_Frequency+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	000f4240 	.word	0x000f4240
 8001de8:	20017ba0 	.word	0x20017ba0

08001dec <setPWM_DutyCycle>:

// Función para cambiar el duty cycle
void setPWM_DutyCycle(uint16_t dutyCycle) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, dutyCycle);
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <setPWM_DutyCycle+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20017ba0 	.word	0x20017ba0

08001e10 <animation_e1_control>:



/* Funciones Enemigo tipo 1 ---------------------------------------------------*/
void animation_e1_control(enemy_type1* enemy){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	int variableAnimationDV = enemy->animationDV;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	ee17 3a90 	vmov	r3, s15
 8001e26:	60fb      	str	r3, [r7, #12]
	int variableAnimationV= enemy->animationV;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e32:	ee17 3a90 	vmov	r3, s15
 8001e36:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d131      	bne.n	8001ea4 <animation_e1_control+0x94>
		if (variableAnimationDV>4){
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	dd1b      	ble.n	8001e7e <animation_e1_control+0x6e>
			if (variableAnimationV<16){
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	dc13      	bgt.n	8001e74 <animation_e1_control+0x64>
				enemy->animationV+=0.1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	a316      	add	r3, pc, #88	@ (adr r3, 8001eb0 <animation_e1_control+0xa0>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fa36 	bl	80002cc <__adddf3>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fbe6 	bl	8000638 <__aeabi_d2f>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		} else{
			enemy->animationDV+=0.1;
		}
	}
}
 8001e72:	e017      	b.n	8001ea4 <animation_e1_control+0x94>
				enemy->animationV=0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e7c:	e012      	b.n	8001ea4 <animation_e1_control+0x94>
			enemy->animationDV+=0.1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb80 	bl	8000588 <__aeabi_f2d>
 8001e88:	a309      	add	r3, pc, #36	@ (adr r3, 8001eb0 <animation_e1_control+0xa0>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fa1d 	bl	80002cc <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fbcd 	bl	8000638 <__aeabi_d2f>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	f3af 8000 	nop.w
 8001eb0:	9999999a 	.word	0x9999999a
 8001eb4:	3fb99999 	.word	0x3fb99999

08001eb8 <animation_e1>:

void animation_e1(enemy_type1* enemy){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b08b      	sub	sp, #44	@ 0x2c
 8001ebc:	af06      	add	r7, sp, #24
 8001ebe:	6078      	str	r0, [r7, #4]
	int variableAnimationV=enemy->animationV;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eca:	ee17 3a90 	vmov	r3, s15
 8001ece:	60fb      	str	r3, [r7, #12]
	int variableAnimationDV = enemy->animationDV;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eda:	ee17 3a90 	vmov	r3, s15
 8001ede:	60bb      	str	r3, [r7, #8]
	if (enemy->isAlive==1){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f040 80a6 	bne.w	8002036 <animation_e1+0x17e>
		if (variableAnimationDV>4){
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	f340 80a2 	ble.w	8002036 <animation_e1+0x17e>
			LCD_Sprite(enemy->x - (16 / 2)+2, enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, variableAnimationV, 0, 0);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3b06      	subs	r3, #6
 8001ef8:	4618      	mov	r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	3b09      	subs	r3, #9
 8001f00:	4619      	mov	r1, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	9304      	str	r3, [sp, #16]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9303      	str	r3, [sp, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	2310      	movs	r3, #16
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	4b4b      	ldr	r3, [pc, #300]	@ (8002040 <animation_e1+0x188>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2313      	movs	r3, #19
 8001f18:	2210      	movs	r2, #16
 8001f1a:	f7ff fdfd 	bl	8001b18 <LCD_Sprite>
		    if (DrawHitbox==1){
 8001f1e:	4b49      	ldr	r3, [pc, #292]	@ (8002044 <animation_e1+0x18c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d113      	bne.n	8001f4e <animation_e1+0x96>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	085b      	lsrs	r3, r3, #1
 8001f30:	1ad0      	subs	r0, r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	1ad1      	subs	r1, r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2400      	movs	r4, #0
 8001f48:	9400      	str	r4, [sp, #0]
 8001f4a:	f7ff fd0d 	bl	8001968 <Rect>
		    }
		    if (DrawHitbox==2){
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002044 <animation_e1+0x18c>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d12b      	bne.n	8001fae <animation_e1+0xf6>
		    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6998      	ldr	r0, [r3, #24]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	2201      	movs	r2, #1
 8001f68:	f7ff fd26 	bl	80019b8 <FillRect>
		    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69d8      	ldr	r0, [r3, #28]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f7ff fd1b 	bl	80019b8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a19      	ldr	r1, [r3, #32]
 8001f8a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	2201      	movs	r2, #1
 8001f94:	f7ff fd10 	bl	80019b8 <FillRect>
		    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001fa0:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f7ff fd05 	bl	80019b8 <FillRect>
		    }
		    if (DrawHitbox==3){
 8001fae:	4b25      	ldr	r3, [pc, #148]	@ (8002044 <animation_e1+0x18c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d13f      	bne.n	8002036 <animation_e1+0x17e>
		    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	1ad0      	subs	r0, r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	1ad1      	subs	r1, r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	9400      	str	r4, [sp, #0]
 8001fda:	f7ff fcc5 	bl	8001968 <Rect>
				FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6998      	ldr	r0, [r3, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f7ff fce2 	bl	80019b8 <FillRect>
				FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69d8      	ldr	r0, [r3, #28]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	2201      	movs	r2, #1
 8002006:	f7ff fcd7 	bl	80019b8 <FillRect>
				FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a19      	ldr	r1, [r3, #32]
 8002012:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	2201      	movs	r2, #1
 800201c:	f7ff fccc 	bl	80019b8 <FillRect>
				FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002028:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	2201      	movs	r2, #1
 8002032:	f7ff fcc1 	bl	80019b8 <FillRect>
		        }
			//FillRect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0xFF0000);  // Color rojo
		}
	}
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop
 8002040:	2000b88c 	.word	0x2000b88c
 8002044:	2001cadf 	.word	0x2001cadf

08002048 <animation_e1_die>:

void animation_e1_die(enemy_type1* enemy){
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af06      	add	r7, sp, #24
 800204e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205a:	ee17 3a90 	vmov	r3, s15
 800205e:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==0){
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d134      	bne.n	80020d2 <animation_e1_die+0x8a>
			if (variableAnimationDie<11){
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b0a      	cmp	r3, #10
 800206c:	dc29      	bgt.n	80020c2 <animation_e1_die+0x7a>
				LCD_Sprite(enemy->x - (14 / 2)+1, enemy->y - (25 / 2), 14,25, E1_Die14x25_11, 11, variableAnimationDie, 0, 0);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3b06      	subs	r3, #6
 8002074:	4618      	mov	r0, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	3b0c      	subs	r3, #12
 800207c:	4619      	mov	r1, r3
 800207e:	2300      	movs	r3, #0
 8002080:	9304      	str	r3, [sp, #16]
 8002082:	2300      	movs	r3, #0
 8002084:	9303      	str	r3, [sp, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	230b      	movs	r3, #11
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <animation_e1_die+0xa0>)
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2319      	movs	r3, #25
 8002094:	220e      	movs	r2, #14
 8002096:	f7ff fd3f 	bl	8001b18 <LCD_Sprite>
				enemy->animationDie+=0.2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa72 	bl	8000588 <__aeabi_f2d>
 80020a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80020e0 <animation_e1_die+0x98>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe f90f 	bl	80002cc <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fabf 	bl	8000638 <__aeabi_d2f>
 80020ba:	4602      	mov	r2, r0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
				}else{
					enemy->x=5000;
					enemy->y=5000;
				}
			}
}
 80020c0:	e007      	b.n	80020d2 <animation_e1_die+0x8a>
					enemy->x=5000;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	601a      	str	r2, [r3, #0]
					enemy->y=5000;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d0:	605a      	str	r2, [r3, #4]
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	f3af 8000 	nop.w
 80020e0:	9999999a 	.word	0x9999999a
 80020e4:	3fc99999 	.word	0x3fc99999
 80020e8:	2000de8c 	.word	0x2000de8c

080020ec <initEnemy1>:

void initEnemy1(enemy_type1* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08b      	sub	sp, #44	@ 0x2c
 80020f0:	af06      	add	r7, sp, #24
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a3a      	ldr	r2, [r7, #32]
 8002110:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002116:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationV = 0;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 5;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a65      	ldr	r2, [pc, #404]	@ (80022c0 <initEnemy1+0x1d4>)
 800212a:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->animationDie=12;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a65      	ldr	r2, [pc, #404]	@ (80022c4 <initEnemy1+0x1d8>)
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	441a      	add	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	1ad2      	subs	r2, r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	441a      	add	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (19 / 2), 16, 19, E1_Ide256x19_16, 16, 0, 0, 0);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3b08      	subs	r3, #8
 8002178:	4618      	mov	r0, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	3b09      	subs	r3, #9
 8002180:	4619      	mov	r1, r3
 8002182:	2300      	movs	r3, #0
 8002184:	9304      	str	r3, [sp, #16]
 8002186:	2300      	movs	r3, #0
 8002188:	9303      	str	r3, [sp, #12]
 800218a:	2300      	movs	r3, #0
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2310      	movs	r3, #16
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <initEnemy1+0x1dc>)
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2313      	movs	r3, #19
 8002198:	2210      	movs	r2, #16
 800219a:	f7ff fcbd 	bl	8001b18 <LCD_Sprite>

    if (DrawHitbox==1){
 800219e:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <initEnemy1+0x1e0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d113      	bne.n	80021ce <initEnemy1+0xe2>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	1ad0      	subs	r0, r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	1ad1      	subs	r1, r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2400      	movs	r4, #0
 80021c8:	9400      	str	r4, [sp, #0]
 80021ca:	f7ff fbcd 	bl	8001968 <Rect>
    }
    if (DrawHitbox==2){
 80021ce:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <initEnemy1+0x1e0>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d12b      	bne.n	800222e <initEnemy1+0x142>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6998      	ldr	r0, [r3, #24]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2301      	movs	r3, #1
 80021e6:	2201      	movs	r2, #1
 80021e8:	f7ff fbe6 	bl	80019b8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69d8      	ldr	r0, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	2201      	movs	r2, #1
 80021fe:	f7ff fbdb 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a19      	ldr	r1, [r3, #32]
 800220a:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	2201      	movs	r2, #1
 8002214:	f7ff fbd0 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002220:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	2201      	movs	r2, #1
 800222a:	f7ff fbc5 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 800222e:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <initEnemy1+0x1e0>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d13f      	bne.n	80022b6 <initEnemy1+0x1ca>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	1ad0      	subs	r0, r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	1ad1      	subs	r1, r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2400      	movs	r4, #0
 8002258:	9400      	str	r4, [sp, #0]
 800225a:	f7ff fb85 	bl	8001968 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6998      	ldr	r0, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	f7ff fba2 	bl	80019b8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	69d8      	ldr	r0, [r3, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	2201      	movs	r2, #1
 8002286:	f7ff fb97 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a19      	ldr	r1, [r3, #32]
 8002292:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2301      	movs	r3, #1
 800229a:	2201      	movs	r2, #1
 800229c:	f7ff fb8c 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022a8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	2201      	movs	r2, #1
 80022b2:	f7ff fb81 	bl	80019b8 <FillRect>
        }
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	bf00      	nop
 80022c0:	40a00000 	.word	0x40a00000
 80022c4:	41400000 	.word	0x41400000
 80022c8:	2000b88c 	.word	0x2000b88c
 80022cc:	2001cadf 	.word	0x2001cadf

080022d0 <ColisionPlayer_e1>:

int ColisionPlayer_e1(enemy_type1* enemy, player* player,int direction, int x, int y){
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	@ 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
	// Verificar colisión con el enemigo basado en la dirección de movimiento
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	if (enemy->isAlive==1){
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f040 8251 	bne.w	800278a <ColisionPlayer_e1+0x4ba>
		switch (player->direction) {
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	f200 824c 	bhi.w	800278a <ColisionPlayer_e1+0x4ba>
 80022f2:	a201      	add	r2, pc, #4	@ (adr r2, 80022f8 <ColisionPlayer_e1+0x28>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002309 	.word	0x08002309
 80022fc:	08002427 	.word	0x08002427
 8002300:	08002545 	.word	0x08002545
 8002304:	08002663 	.word	0x08002663
				case 0: // Movimiento hacia arriba
					int y_u= y-12;
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	3b0c      	subs	r3, #12
 800230c:	613b      	str	r3, [r7, #16]
					if (y_u<=enemy->e1Down && y_u>=enemy->e1Up){
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	f0c0 8231 	bcc.w	800277c <ColisionPlayer_e1+0x4ac>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	f200 822b 	bhi.w	800277c <ColisionPlayer_e1+0x4ac>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	429a      	cmp	r2, r3
 8002330:	d323      	bcc.n	800237a <ColisionPlayer_e1+0xaa>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	429a      	cmp	r2, r3
 800233c:	d81d      	bhi.n	800237a <ColisionPlayer_e1+0xaa>
							player->y=player->y+5;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	1d5a      	adds	r2, r3, #5
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2201      	movs	r2, #1
 800234c:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <ColisionPlayer_e1+0xa6>
								player->isAlive=0;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002376:	2300      	movs	r3, #0
 8002378:	e208      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	429a      	cmp	r2, r3
 8002384:	d323      	bcc.n	80023ce <ColisionPlayer_e1+0xfe>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	429a      	cmp	r2, r3
 8002390:	d81d      	bhi.n	80023ce <ColisionPlayer_e1+0xfe>
							player->y=player->y+5;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	1d5a      	adds	r2, r3, #5
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2201      	movs	r2, #1
 80023a0:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <ColisionPlayer_e1+0xfa>
								player->isAlive=0;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e1de      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	f0c0 81d0 	bcc.w	800277c <ColisionPlayer_e1+0x4ac>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f200 81c9 	bhi.w	800277c <ColisionPlayer_e1+0x4ac>
							player->y=player->y+5;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	1d5a      	adds	r2, r3, #5
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2201      	movs	r2, #1
 80023f8:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <ColisionPlayer_e1+0x152>
								player->isAlive=0;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002422:	2300      	movs	r3, #0
 8002424:	e1b2      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
					}
					break;
				case 1: //Movimiento hacia derecha
					int x_r=x+12;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	617b      	str	r3, [r7, #20]
					if (x_r>=enemy->e1Left && x_r<=enemy->e1Right){
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	f200 81a4 	bhi.w	8002780 <ColisionPlayer_e1+0x4b0>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	f0c0 819e 	bcc.w	8002780 <ColisionPlayer_e1+0x4b0>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d323      	bcc.n	8002498 <ColisionPlayer_e1+0x1c8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	429a      	cmp	r2, r3
 800245a:	d81d      	bhi.n	8002498 <ColisionPlayer_e1+0x1c8>
							player->x=player->x-5;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1f5a      	subs	r2, r3, #5
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2201      	movs	r2, #1
 800246a:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <ColisionPlayer_e1+0x1c4>
								player->isAlive=0;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002494:	2300      	movs	r3, #0
 8002496:	e179      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d323      	bcc.n	80024ec <ColisionPlayer_e1+0x21c>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d81d      	bhi.n	80024ec <ColisionPlayer_e1+0x21c>
							player->x=player->x-5;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1f5a      	subs	r2, r3, #5
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2201      	movs	r2, #1
 80024be:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <ColisionPlayer_e1+0x218>
								player->isAlive=0;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e14f      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Up && player->y<=enemy->e1Down){
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f0c0 8143 	bcc.w	8002780 <ColisionPlayer_e1+0x4b0>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	429a      	cmp	r2, r3
 8002504:	f200 813c 	bhi.w	8002780 <ColisionPlayer_e1+0x4b0>
							player->x=player->x-5;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	1f5a      	subs	r2, r3, #5
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <ColisionPlayer_e1+0x270>
								player->isAlive=0;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002540:	2300      	movs	r3, #0
 8002542:	e123      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
					}

					break;
				case 2: //Movimiento hacia abajo
					int y_d= y+12;
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	330c      	adds	r3, #12
 8002548:	61bb      	str	r3, [r7, #24]
					if (y_d>=enemy->e1Up && y_d<=enemy->e1Down){
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	429a      	cmp	r2, r3
 8002552:	f200 8117 	bhi.w	8002784 <ColisionPlayer_e1+0x4b4>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	429a      	cmp	r2, r3
 800255e:	f0c0 8111 	bcc.w	8002784 <ColisionPlayer_e1+0x4b4>
						if(player->playerLeft>=enemy->e1Left && player->playerLeft<=enemy->e1Right){
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	429a      	cmp	r2, r3
 800256c:	d323      	bcc.n	80025b6 <ColisionPlayer_e1+0x2e6>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	429a      	cmp	r2, r3
 8002578:	d81d      	bhi.n	80025b6 <ColisionPlayer_e1+0x2e6>
							player->y=player->y-5;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	1f5a      	subs	r2, r3, #5
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2201      	movs	r2, #1
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <ColisionPlayer_e1+0x2e2>
								player->isAlive=0;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e0ea      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if(player->playerRight>=enemy->e1Left && player->playerRight<=enemy->e1Right){
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d323      	bcc.n	800260a <ColisionPlayer_e1+0x33a>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d81d      	bhi.n	800260a <ColisionPlayer_e1+0x33a>
							player->y=player->y-5;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	1f5a      	subs	r2, r3, #5
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2201      	movs	r2, #1
 80025dc:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <ColisionPlayer_e1+0x336>
								player->isAlive=0;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002606:	2300      	movs	r3, #0
 8002608:	e0c0      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if (player->x>=enemy->e1Left && player->x<=enemy->e1Right){
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	429a      	cmp	r2, r3
 8002614:	f0c0 80b6 	bcc.w	8002784 <ColisionPlayer_e1+0x4b4>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	429a      	cmp	r2, r3
 8002622:	f200 80af 	bhi.w	8002784 <ColisionPlayer_e1+0x4b4>
							player->y=player->y-5;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	1f5a      	subs	r2, r3, #5
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	605a      	str	r2, [r3, #4]
							player->IsDamage=1;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2201      	movs	r2, #1
 8002634:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <ColisionPlayer_e1+0x38e>
								player->isAlive=0;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 800265e:	2300      	movs	r3, #0
 8002660:	e094      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
					 }
					break;
				case 3: //Movimiento hacia izquierda
					int x_l=x-12;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3b0c      	subs	r3, #12
 8002666:	61fb      	str	r3, [r7, #28]
					if (x_l<=enemy->e1Right && x_l>=enemy->e1Left){
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	429a      	cmp	r2, r3
 8002670:	f0c0 808a 	bcc.w	8002788 <ColisionPlayer_e1+0x4b8>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	429a      	cmp	r2, r3
 800267c:	f200 8084 	bhi.w	8002788 <ColisionPlayer_e1+0x4b8>
						if (player->playerUp>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	429a      	cmp	r2, r3
 800268a:	d323      	bcc.n	80026d4 <ColisionPlayer_e1+0x404>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	429a      	cmp	r2, r3
 8002696:	d81d      	bhi.n	80026d4 <ColisionPlayer_e1+0x404>
							player->x=player->x+5;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1d5a      	adds	r2, r3, #5
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2201      	movs	r2, #1
 80026a6:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <ColisionPlayer_e1+0x400>
								player->isAlive=0;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e05b      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if (player->playerDown>=enemy->e1Up && player->playerUp<=enemy->e1Down){
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d323      	bcc.n	8002728 <ColisionPlayer_e1+0x458>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d81d      	bhi.n	8002728 <ColisionPlayer_e1+0x458>
							player->x=player->x+5;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1d5a      	adds	r2, r3, #5
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2201      	movs	r2, #1
 80026fa:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <ColisionPlayer_e1+0x454>
								player->isAlive=0;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002724:	2300      	movs	r3, #0
 8002726:	e031      	b.n	800278c <ColisionPlayer_e1+0x4bc>
						}
						if (player->y>=enemy->e1Up && player->y<=enemy->e1Down){
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	429a      	cmp	r2, r3
 8002732:	d329      	bcc.n	8002788 <ColisionPlayer_e1+0x4b8>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	429a      	cmp	r2, r3
 800273e:	d823      	bhi.n	8002788 <ColisionPlayer_e1+0x4b8>
							player->x=player->x+5;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1d5a      	adds	r2, r3, #5
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	601a      	str	r2, [r3, #0]
							player->IsDamage=1;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2201      	movs	r2, #1
 800274e:	65da      	str	r2, [r3, #92]	@ 0x5c
							player->animationDamage=0;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	661a      	str	r2, [r3, #96]	@ 0x60
							player->life-=1;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	615a      	str	r2, [r3, #20]
							if (player->life==0){
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <ColisionPlayer_e1+0x4a8>
								player->isAlive=0;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	61da      	str	r2, [r3, #28]
								player->animationDie=0;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	669a      	str	r2, [r3, #104]	@ 0x68
							}
							return 0;
 8002778:	2300      	movs	r3, #0
 800277a:	e007      	b.n	800278c <ColisionPlayer_e1+0x4bc>
					break;
 800277c:	bf00      	nop
 800277e:	e004      	b.n	800278a <ColisionPlayer_e1+0x4ba>
					break;
 8002780:	bf00      	nop
 8002782:	e002      	b.n	800278a <ColisionPlayer_e1+0x4ba>
					break;
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <ColisionPlayer_e1+0x4ba>
						}
					}
					break;
 8002788:	bf00      	nop
			return 1;
			}
	}
	return 1;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3724      	adds	r7, #36	@ 0x24
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <Hitbox_e2>:

/* Funciones Enemigo tipo 2 -------------------------------------------*/

void Hitbox_e2(enemy_type2* enemy){
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af06      	add	r7, sp, #24
 800279e:	6078      	str	r0, [r7, #4]
    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	441a      	add	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

    // Dibujar el enemigo en pantalla
    LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, 4, 0, 0);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3b08      	subs	r3, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	3b0a      	subs	r3, #10
 80027ee:	4619      	mov	r1, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	9304      	str	r3, [sp, #16]
 80027f4:	2300      	movs	r3, #0
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	2304      	movs	r3, #4
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	2305      	movs	r3, #5
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <Hitbox_e2+0x194>)
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2314      	movs	r3, #20
 8002806:	2210      	movs	r2, #16
 8002808:	f7ff f986 	bl	8001b18 <LCD_Sprite>

    if (DrawHitbox==1){
 800280c:	4b48      	ldr	r3, [pc, #288]	@ (8002930 <Hitbox_e2+0x198>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d113      	bne.n	800283c <Hitbox_e2+0xa4>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	1ad0      	subs	r0, r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	1ad1      	subs	r1, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2400      	movs	r4, #0
 8002836:	9400      	str	r4, [sp, #0]
 8002838:	f7ff f896 	bl	8001968 <Rect>
    }
    if (DrawHitbox==2){
 800283c:	4b3c      	ldr	r3, [pc, #240]	@ (8002930 <Hitbox_e2+0x198>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d12b      	bne.n	800289c <Hitbox_e2+0x104>
    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6998      	ldr	r0, [r3, #24]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2301      	movs	r3, #1
 8002854:	2201      	movs	r2, #1
 8002856:	f7ff f8af 	bl	80019b8 <FillRect>
    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69d8      	ldr	r0, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2301      	movs	r3, #1
 800286a:	2201      	movs	r2, #1
 800286c:	f7ff f8a4 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a19      	ldr	r1, [r3, #32]
 8002878:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2301      	movs	r3, #1
 8002880:	2201      	movs	r2, #1
 8002882:	f7ff f899 	bl	80019b8 <FillRect>
    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800288e:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2301      	movs	r3, #1
 8002896:	2201      	movs	r2, #1
 8002898:	f7ff f88e 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 800289c:	4b24      	ldr	r3, [pc, #144]	@ (8002930 <Hitbox_e2+0x198>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d13f      	bne.n	8002924 <Hitbox_e2+0x18c>
    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	1ad0      	subs	r0, r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	1ad1      	subs	r1, r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2400      	movs	r4, #0
 80028c6:	9400      	str	r4, [sp, #0]
 80028c8:	f7ff f84e 	bl	8001968 <Rect>
		FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6998      	ldr	r0, [r3, #24]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2301      	movs	r3, #1
 80028dc:	2201      	movs	r2, #1
 80028de:	f7ff f86b 	bl	80019b8 <FillRect>
		FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69d8      	ldr	r0, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2301      	movs	r3, #1
 80028f2:	2201      	movs	r2, #1
 80028f4:	f7ff f860 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a19      	ldr	r1, [r3, #32]
 8002900:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2301      	movs	r3, #1
 8002908:	2201      	movs	r2, #1
 800290a:	f7ff f855 	bl	80019b8 <FillRect>
		FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002916:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2301      	movs	r3, #1
 800291e:	2201      	movs	r2, #1
 8002920:	f7ff f84a 	bl	80019b8 <FillRect>
        }
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	200016e4 	.word	0x200016e4
 8002930:	2001cadf 	.word	0x2001cadf

08002934 <initEnemy2>:

void initEnemy2(enemy_type2* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health) {
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	601a      	str	r2, [r3, #0]
    enemy->y = startY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]
    enemy->height = height;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	60da      	str	r2, [r3, #12]

    // Inicializar la vida y el estado
    enemy->health = health;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	611a      	str	r2, [r3, #16]
    enemy->isAlive = 1;  // El enemigo comienza vivo
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	615a      	str	r2, [r3, #20]
    enemy->move=0;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	63da      	str	r2, [r3, #60]	@ 0x3c

    //Animación
    enemy->animationV = 0;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationDV = 3;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <initEnemy2+0x6c>)
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->animationDie=6;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <initEnemy2+0x70>)
 800297e:	635a      	str	r2, [r3, #52]	@ 0x34

    //Movimiento
    enemy->IsMove=0;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->move=0;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	63da      	str	r2, [r3, #60]	@ 0x3c
    enemy->delay=0;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40400000 	.word	0x40400000
 80029a4:	40c00000 	.word	0x40c00000

080029a8 <moveE2>:

void moveE2(enemy_type2* enemy, player* player){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
	if (enemy->isHurt==0){
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8105 	bne.w	8002bc6 <moveE2+0x21e>
		int delay_s=enemy->delay;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80029c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c6:	ee17 3a90 	vmov	r3, s15
 80029ca:	61fb      	str	r3, [r7, #28]
		if (delay_s==100000){ //
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4a80      	ldr	r2, [pc, #512]	@ (8002bd0 <moveE2+0x228>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f040 80ef 	bne.w	8002bb4 <moveE2+0x20c>
			switch(enemy->move){
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	2b03      	cmp	r3, #3
 80029dc:	f200 80f3 	bhi.w	8002bc6 <moveE2+0x21e>
 80029e0:	a201      	add	r2, pc, #4	@ (adr r2, 80029e8 <moveE2+0x40>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a69 	.word	0x08002a69
 80029f0:	08002ad9 	.word	0x08002ad9
 80029f4:	08002b49 	.word	0x08002b49
			case 0: //Derecha
				int futureX_D=player->x+50;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3332      	adds	r3, #50	@ 0x32
 80029fe:	60fb      	str	r3, [r7, #12]
				if (futureX_D>player->limitWidth-20){
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	f1a3 0214 	sub.w	r2, r3, #20
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d209      	bcs.n	8002a22 <moveE2+0x7a>
					enemy->move+=1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002a18:	6839      	ldr	r1, [r7, #0]
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffc4 	bl	80029a8 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002a20:	e0d1      	b.n	8002bc6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1a3 0008 	sub.w	r0, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f1a3 010a 	sub.w	r1, r3, #10
 8002a32:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2314      	movs	r3, #20
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	f7fe ffbc 	bl	80019b8 <FillRect>
					enemy->x=futureX_D;
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fe99 	bl	8002798 <Hitbox_e2>
				break;
 8002a66:	e0ae      	b.n	8002bc6 <moveE2+0x21e>
			case 1: //Abajo
				int futureY_A=player->y+50;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	3332      	adds	r3, #50	@ 0x32
 8002a6e:	613b      	str	r3, [r7, #16]
				if (futureY_A>player->limitHeight-20){
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	f1a3 0214 	sub.w	r2, r3, #20
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d209      	bcs.n	8002a92 <moveE2+0xea>
					enemy->move+=1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff8c 	bl	80029a8 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002a90:	e099      	b.n	8002bc6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1a3 0008 	sub.w	r0, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f1a3 010a 	sub.w	r1, r3, #10
 8002aa2:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2314      	movs	r3, #20
 8002aaa:	2210      	movs	r2, #16
 8002aac:	f7fe ff84 	bl	80019b8 <FillRect>
					enemy->y=futureY_A;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fe61 	bl	8002798 <Hitbox_e2>
				break;
 8002ad6:	e076      	b.n	8002bc6 <moveE2+0x21e>
			case 2: //Izquierda
				int futureX_I=player->x-50;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3b32      	subs	r3, #50	@ 0x32
 8002ade:	617b      	str	r3, [r7, #20]
				if (futureX_I<player->limitWidth_i+20){
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f103 0214 	add.w	r2, r3, #20
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d909      	bls.n	8002b02 <moveE2+0x15a>
						enemy->move+=1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	63da      	str	r2, [r3, #60]	@ 0x3c
						moveE2(enemy,player);
 8002af8:	6839      	ldr	r1, [r7, #0]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff54 	bl	80029a8 <moveE2>
					enemy->y=player->y;
					enemy->animationV=0;
					enemy->move+=1;
					Hitbox_e2(enemy);
				}
				break;
 8002b00:	e061      	b.n	8002bc6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1a3 0008 	sub.w	r0, r3, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f1a3 010a 	sub.w	r1, r3, #10
 8002b12:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2314      	movs	r3, #20
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	f7fe ff4c 	bl	80019b8 <FillRect>
					enemy->x=futureX_I;
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
					enemy->y=player->y;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]
					enemy->animationV=0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move+=1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fe29 	bl	8002798 <Hitbox_e2>
				break;
 8002b46:	e03e      	b.n	8002bc6 <moveE2+0x21e>
			case 3: //Arriba
				int futureY_U=player->y-50;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	3b32      	subs	r3, #50	@ 0x32
 8002b4e:	61bb      	str	r3, [r7, #24]
				if (futureY_U>player->limitHeight+20){
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	f103 0214 	add.w	r2, r3, #20
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d209      	bcs.n	8002b72 <moveE2+0x1ca>
					enemy->move+=1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	63da      	str	r2, [r3, #60]	@ 0x3c
					moveE2(enemy,player);
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff1c 	bl	80029a8 <moveE2>
					enemy->x=player->x;
					enemy->animationV=0;
					enemy->move=0;
					Hitbox_e2(enemy);
				}
				break;
 8002b70:	e029      	b.n	8002bc6 <moveE2+0x21e>
					FillRect(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20,0xFE8B);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1a3 0008 	sub.w	r0, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f1a3 010a 	sub.w	r1, r3, #10
 8002b82:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2314      	movs	r3, #20
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	f7fe ff14 	bl	80019b8 <FillRect>
					enemy->y=futureY_U;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	605a      	str	r2, [r3, #4]
					enemy->x=player->x;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
					enemy->animationV=0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28
					enemy->move=0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63da      	str	r2, [r3, #60]	@ 0x3c
					Hitbox_e2(enemy);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fdf3 	bl	8002798 <Hitbox_e2>
				break;
 8002bb2:	e008      	b.n	8002bc6 <moveE2+0x21e>
			}
		}else{
			if (delay_s==200000){ //
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <moveE2+0x22c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d104      	bne.n	8002bc6 <moveE2+0x21e>
				enemy->delay=0;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}
	}
}
 8002bc4:	e7ff      	b.n	8002bc6 <moveE2+0x21e>
 8002bc6:	bf00      	nop
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	00030d40 	.word	0x00030d40

08002bd8 <E2_Appear>:
			}
		}
	}
}

void E2_Appear(enemy_type2* enemy){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af06      	add	r7, sp, #24
 8002bde:	6078      	str	r0, [r7, #4]
	int variableAnimationAppear=enemy->animationV;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	60fb      	str	r3, [r7, #12]
	if (enemy->isAlive==1){
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d12b      	bne.n	8002c50 <E2_Appear+0x78>
		if (variableAnimationAppear<5){
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	dc28      	bgt.n	8002c50 <E2_Appear+0x78>
			LCD_Sprite(enemy->x - (16 / 2), enemy->y - (20/ 2), 16, 20, E2_Ide16x20_5, 5, variableAnimationAppear, 0, 0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3b08      	subs	r3, #8
 8002c04:	4618      	mov	r0, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	3b0a      	subs	r3, #10
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9303      	str	r3, [sp, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	9302      	str	r3, [sp, #8]
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <E2_Appear+0x88>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2314      	movs	r3, #20
 8002c24:	2210      	movs	r2, #16
 8002c26:	f7fe ff77 	bl	8001b18 <LCD_Sprite>
			enemy->animationV+=0.05;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fcaa 	bl	8000588 <__aeabi_f2d>
 8002c34:	a308      	add	r3, pc, #32	@ (adr r3, 8002c58 <E2_Appear+0x80>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fb47 	bl	80002cc <__adddf3>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fd fcf7 	bl	8000638 <__aeabi_d2f>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	@ 0x28
			}
		}
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	9999999a 	.word	0x9999999a
 8002c5c:	3fa99999 	.word	0x3fa99999
 8002c60:	200016e4 	.word	0x200016e4
 8002c64:	00000000 	.word	0x00000000

08002c68 <E2_Hurt>:

void E2_Hurt(enemy_type2* enemy){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af06      	add	r7, sp, #24
 8002c6e:	6078      	str	r0, [r7, #4]
	if (enemy->isHurt==1){
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d13b      	bne.n	8002cf0 <E2_Hurt+0x88>
		int variableAnimationHurt=enemy->animationDV;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c82:	ee17 3a90 	vmov	r3, s15
 8002c86:	60fb      	str	r3, [r7, #12]
		if (enemy->isAlive==1){
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d12f      	bne.n	8002cf0 <E2_Hurt+0x88>
			if (variableAnimationHurt<3){
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	dc29      	bgt.n	8002cea <E2_Hurt+0x82>
				LCD_Sprite(enemy->x - (28 / 2), enemy->y - (25/ 2), 28, 25, E2_Damage28x25, 3, variableAnimationHurt, 0, 0);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3b0e      	subs	r3, #14
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	3b0c      	subs	r3, #12
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9303      	str	r3, [sp, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <E2_Hurt+0x98>)
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2319      	movs	r3, #25
 8002cbc:	221c      	movs	r2, #28
 8002cbe:	f7fe ff2b 	bl	8001b18 <LCD_Sprite>
				enemy->animationDV+=0.05;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc5e 	bl	8000588 <__aeabi_f2d>
 8002ccc:	a30a      	add	r3, pc, #40	@ (adr r3, 8002cf8 <E2_Hurt+0x90>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fafb 	bl	80002cc <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd fcab 	bl	8000638 <__aeabi_d2f>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
				} else{
					enemy->isHurt=0;
				}
			}
	}
}
 8002ce8:	e002      	b.n	8002cf0 <E2_Hurt+0x88>
					enemy->isHurt=0;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	9999999a 	.word	0x9999999a
 8002cfc:	3fa99999 	.word	0x3fa99999
 8002d00:	20002364 	.word	0x20002364
 8002d04:	00000000 	.word	0x00000000

08002d08 <E2_Die>:

void E2_Die(enemy_type2* enemy){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af06      	add	r7, sp, #24
 8002d0e:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=enemy->animationDie;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d1a:	ee17 3a90 	vmov	r3, s15
 8002d1e:	60fb      	str	r3, [r7, #12]
			if (enemy->isAlive==0){
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d143      	bne.n	8002db0 <E2_Die+0xa8>
				if (variableAnimationDie<6){
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	dc29      	bgt.n	8002d82 <E2_Die+0x7a>
					LCD_Sprite(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, E2_Die26x23, 6, variableAnimationDie, 0, 0);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b0c      	subs	r3, #12
 8002d34:	4618      	mov	r0, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3b0b      	subs	r3, #11
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9304      	str	r3, [sp, #16]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9303      	str	r3, [sp, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	9302      	str	r3, [sp, #8]
 8002d4a:	2306      	movs	r3, #6
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc0 <E2_Die+0xb8>)
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2317      	movs	r3, #23
 8002d54:	221a      	movs	r2, #26
 8002d56:	f7fe fedf 	bl	8001b18 <LCD_Sprite>
					enemy->animationDie+=0.2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc12 	bl	8000588 <__aeabi_f2d>
 8002d64:	a314      	add	r3, pc, #80	@ (adr r3, 8002db8 <E2_Die+0xb0>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd faaf 	bl	80002cc <__adddf3>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd fc5f 	bl	8000638 <__aeabi_d2f>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	635a      	str	r2, [r3, #52]	@ 0x34
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
						enemy->x=5000;
						enemy->y=5000;
					}
				}
}
 8002d80:	e016      	b.n	8002db0 <E2_Die+0xa8>
						FillRect(enemy->x - (26 / 2)+1, enemy->y - (23 / 2), 26,23, 0xFE8B);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1a3 000c 	sub.w	r0, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f1a3 010b 	sub.w	r1, r3, #11
 8002d92:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2317      	movs	r3, #23
 8002d9a:	221a      	movs	r2, #26
 8002d9c:	f7fe fe0c 	bl	80019b8 <FillRect>
						enemy->x=5000;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	601a      	str	r2, [r3, #0]
						enemy->y=5000;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	605a      	str	r2, [r3, #4]
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	9999999a 	.word	0x9999999a
 8002dbc:	3fc99999 	.word	0x3fc99999
 8002dc0:	200033cc 	.word	0x200033cc

08002dc4 <PlayerHit_E2>:

void PlayerHit_E2(player* player, enemy_type2* enemy){
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	f040 80f0 	bne.w	8002fb8 <PlayerHit_E2+0x1f4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	f200 80eb 	bhi.w	8002fb8 <PlayerHit_E2+0x1f4>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <PlayerHit_E2+0x24>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002edb 	.word	0x08002edb
 8002df0:	08002e6b 	.word	0x08002e6b
 8002df4:	08002f43 	.word	0x08002f43
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	3b0f      	subs	r3, #15
 8002dfe:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f0c0 80cf 	bcc.w	8002faa <PlayerHit_E2+0x1e6>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	f200 80c9 	bhi.w	8002faa <PlayerHit_E2+0x1e6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	3b05      	subs	r3, #5
 8002e22:	429a      	cmp	r2, r3
 8002e24:	f0c0 80c1 	bcc.w	8002faa <PlayerHit_E2+0x1e6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	3305      	adds	r3, #5
 8002e32:	429a      	cmp	r2, r3
 8002e34:	f200 80b9 	bhi.w	8002faa <PlayerHit_E2+0x1e6>
						enemy->health -= 1;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 80a8 	bne.w	8002faa <PlayerHit_E2+0x1e6>
							enemy->isAlive=0;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
			break;
 8002e68:	e09f      	b.n	8002faa <PlayerHit_E2+0x1e6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	330f      	adds	r3, #15
 8002e70:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f0c0 8098 	bcc.w	8002fae <PlayerHit_E2+0x1ea>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f200 8092 	bhi.w	8002fae <PlayerHit_E2+0x1ea>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	3b05      	subs	r3, #5
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f0c0 808a 	bcc.w	8002fae <PlayerHit_E2+0x1ea>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	3305      	adds	r3, #5
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f200 8082 	bhi.w	8002fae <PlayerHit_E2+0x1ea>
						enemy->health -= 1;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d171      	bne.n	8002fae <PlayerHit_E2+0x1ea>
							enemy->isAlive=0;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002ed8:	e069      	b.n	8002fae <PlayerHit_E2+0x1ea>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d362      	bcc.n	8002fb2 <PlayerHit_E2+0x1ee>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d85d      	bhi.n	8002fb2 <PlayerHit_E2+0x1ee>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	3b0f      	subs	r3, #15
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d356      	bcc.n	8002fb2 <PlayerHit_E2+0x1ee>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d84f      	bhi.n	8002fb2 <PlayerHit_E2+0x1ee>
						enemy->health -= 1;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	611a      	str	r2, [r3, #16]
						enemy->isHurt=1;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->animationDV=0;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
						if(enemy->health==0){
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d13f      	bne.n	8002fb2 <PlayerHit_E2+0x1ee>
							enemy->isAlive=0;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	635a      	str	r2, [r3, #52]	@ 0x34
						}
					}
				}
				break;
 8002f40:	e037      	b.n	8002fb2 <PlayerHit_E2+0x1ee>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b14      	subs	r3, #20
 8002f48:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d330      	bcc.n	8002fb6 <PlayerHit_E2+0x1f2>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d82b      	bhi.n	8002fb6 <PlayerHit_E2+0x1f2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	3b0f      	subs	r3, #15
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d324      	bcc.n	8002fb6 <PlayerHit_E2+0x1f2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	3314      	adds	r3, #20
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d81d      	bhi.n	8002fb6 <PlayerHit_E2+0x1f2>
									enemy->health -= 1;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	611a      	str	r2, [r3, #16]
									enemy->isHurt=1;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	62da      	str	r2, [r3, #44]	@ 0x2c
									enemy->animationDV=0;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30
									if(enemy->health==0){
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <PlayerHit_E2+0x1f2>
										enemy->isAlive=0;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	635a      	str	r2, [r3, #52]	@ 0x34
									}
								}
							}
							break;
 8002fa8:	e005      	b.n	8002fb6 <PlayerHit_E2+0x1f2>
			break;
 8002faa:	bf00      	nop
 8002fac:	e004      	b.n	8002fb8 <PlayerHit_E2+0x1f4>
				break;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <PlayerHit_E2+0x1f4>
				break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <PlayerHit_E2+0x1f4>
							break;
 8002fb6:	bf00      	nop
						}
		}
	}
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <initEnemy3>:

/* Funciones Enemigo 3 -------------------------------------------------*/
void initEnemy3(enemy_type3* enemy, unsigned int startX, unsigned int startY, unsigned int width, unsigned int height, int health, player* player) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
    // Inicializar las coordenadas y dimensiones
    enemy->x = startX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	601a      	str	r2, [r3, #0]
    enemy->y_eye=startY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
    enemy->y = startY+20;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 0214 	add.w	r2, r3, #20
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	605a      	str	r2, [r3, #4]
    enemy->width = width;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	60da      	str	r2, [r3, #12]
    enemy->height = height;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	611a      	str	r2, [r3, #16]
    enemy->speed=5;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2205      	movs	r2, #5
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
    enemy->Place=0;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
    enemy->delay=0;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	651a      	str	r2, [r3, #80]	@ 0x50
    enemy->delay_init=0;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54

    // Inicializar la vida y el estado
    enemy->health = health;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
    enemy->isAlive = 0;  // El enemigo comienza vivo
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]

    //Animación
    enemy->animationFire=0;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28
    enemy->animationEye=0;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	62da      	str	r2, [r3, #44]	@ 0x2c
    enemy->isMove=0;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	649a      	str	r2, [r3, #72]	@ 0x48

    //Limites
    enemy->limitwidth=player->limitWidth;
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34
    enemy->limitwidth_i=player->limitWidth_i;
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38
    enemy->limitheight_i=18;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2212      	movs	r2, #18
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40
    enemy->limitheight=220;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	22dc      	movs	r2, #220	@ 0xdc
 8003048:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <E3_Eye>:

void E3_Eye(enemy_type3* enemy){
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af06      	add	r7, sp, #24
 800305e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0){
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	2b00      	cmp	r3, #0
 8003066:	dd55      	ble.n	8003114 <E3_Eye+0xbc>
		if (enemy->isMove==0){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306c:	2b00      	cmp	r3, #0
 800306e:	d160      	bne.n	8003132 <E3_Eye+0xda>
			enemy->y=enemy->y_eye+20;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f103 0214 	add.w	r2, r3, #20
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]
			int variableEye=enemy->animationEye;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003086:	ee17 3a90 	vmov	r3, s15
 800308a:	60fb      	str	r3, [r7, #12]
			if (variableEye<7){
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b06      	cmp	r3, #6
 8003090:	dc29      	bgt.n	80030e6 <E3_Eye+0x8e>
				LCD_Sprite(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, E3_Eye16x17_7, 7, variableEye, 0, 0);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3b08      	subs	r3, #8
 8003098:	4618      	mov	r0, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	3b08      	subs	r3, #8
 80030a0:	4619      	mov	r1, r3
 80030a2:	2300      	movs	r3, #0
 80030a4:	9304      	str	r3, [sp, #16]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	2307      	movs	r3, #7
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <E3_Eye+0xf0>)
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2311      	movs	r3, #17
 80030b8:	2210      	movs	r2, #16
 80030ba:	f7fe fd2d 	bl	8001b18 <LCD_Sprite>
				enemy->animationEye+=0.1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa60 	bl	8000588 <__aeabi_f2d>
 80030c8:	a31d      	add	r3, pc, #116	@ (adr r3, 8003140 <E3_Eye+0xe8>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f7fd f8fd 	bl	80002cc <__adddf3>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	f7fd faad 	bl	8000638 <__aeabi_d2f>
 80030de:	4602      	mov	r2, r0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			}
		}
	} else{
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
	}
}
 80030e4:	e025      	b.n	8003132 <E3_Eye+0xda>
				FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1a3 0008 	sub.w	r0, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f1a3 0108 	sub.w	r1, r3, #8
 80030f6:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2311      	movs	r3, #17
 80030fe:	2210      	movs	r2, #16
 8003100:	f7fe fc5a 	bl	80019b8 <FillRect>
				enemy->isMove=1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationFire=0;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003112:	e00e      	b.n	8003132 <E3_Eye+0xda>
		FillRect(enemy->x - (16 / 2), enemy->y_eye - (17 / 2), 16, 17, 0xFE8B);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1a3 0008 	sub.w	r0, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f1a3 0108 	sub.w	r1, r3, #8
 8003124:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2311      	movs	r3, #17
 800312c:	2210      	movs	r2, #16
 800312e:	f7fe fc43 	bl	80019b8 <FillRect>
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	f3af 8000 	nop.w
 8003140:	9999999a 	.word	0x9999999a
 8003144:	3fb99999 	.word	0x3fb99999
 8003148:	20000804 	.word	0x20000804

0800314c <E3_FireMove>:

void E3_FireMove(enemy_type3* enemy,player* player){
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b08b      	sub	sp, #44	@ 0x2c
 8003150:	af06      	add	r7, sp, #24
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
	if (enemy->health>0){
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	2b00      	cmp	r3, #0
 800315c:	f340 80e5 	ble.w	800332a <E3_FireMove+0x1de>
		if (enemy->isMove==1){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 80e0 	bne.w	800332a <E3_FireMove+0x1de>
			int FutureY=enemy->y+enemy->speed;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
			if (FutureY>=220){
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2bdb      	cmp	r3, #219	@ 0xdb
 800317a:	dd23      	ble.n	80031c4 <E3_FireMove+0x78>
				enemy->isMove=0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	649a      	str	r2, [r3, #72]	@ 0x48
				enemy->animationEye=0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c
				enemy->health-=1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
				enemy->Place+=1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	64da      	str	r2, [r3, #76]	@ 0x4c
				enemy->delay=0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	651a      	str	r2, [r3, #80]	@ 0x50
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1a3 0008 	sub.w	r0, r3, #8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f1a3 0108 	sub.w	r1, r3, #8
 80031b4:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2310      	movs	r3, #16
 80031bc:	2210      	movs	r2, #16
 80031be:	f7fe fbfb 	bl	80019b8 <FillRect>
				}
			}
		}

	}
}
 80031c2:	e0b2      	b.n	800332a <E3_FireMove+0x1de>
				FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1a3 0008 	sub.w	r0, r3, #8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f1a3 0108 	sub.w	r1, r3, #8
 80031d4:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2310      	movs	r3, #16
 80031dc:	2210      	movs	r2, #16
 80031de:	f7fe fbeb 	bl	80019b8 <FillRect>
				int animationFire=enemy->animationFire;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ec:	ee17 3a90 	vmov	r3, s15
 80031f0:	60bb      	str	r3, [r7, #8]
				enemy->y=FutureY;
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]
				LCD_Sprite(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, E3_Fire16x16_4, 4, animationFire, 0, 0);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3b08      	subs	r3, #8
 80031fe:	4618      	mov	r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	3b08      	subs	r3, #8
 8003206:	4619      	mov	r1, r3
 8003208:	2300      	movs	r3, #0
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	9303      	str	r3, [sp, #12]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	2304      	movs	r3, #4
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	4b46      	ldr	r3, [pc, #280]	@ (8003334 <E3_FireMove+0x1e8>)
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2310      	movs	r3, #16
 800321e:	2210      	movs	r2, #16
 8003220:	f7fe fc7a 	bl	8001b18 <LCD_Sprite>
				if (player->playerUp<=enemy->e1Down){ //player->playerUp>=enemy->e1Up &&
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	429a      	cmp	r2, r3
 800322e:	d87c      	bhi.n	800332a <E3_FireMove+0x1de>
					if(enemy->e1Left >= player->playerLeft-8 && enemy->e1Right <= player->playerRight+8){
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	3b08      	subs	r3, #8
 800323a:	429a      	cmp	r2, r3
 800323c:	d375      	bcc.n	800332a <E3_FireMove+0x1de>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	3308      	adds	r3, #8
 8003248:	429a      	cmp	r2, r3
 800324a:	d86e      	bhi.n	800332a <E3_FireMove+0x1de>
						player->y=player->y+5;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	1d5a      	adds	r2, r3, #5
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	605a      	str	r2, [r3, #4]
						player->direction=0;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
						player->IsDamage=1;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	65da      	str	r2, [r3, #92]	@ 0x5c
						player->animationDamage=0;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	661a      	str	r2, [r3, #96]	@ 0x60
						player->life-=1;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	1e5a      	subs	r2, r3, #1
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	615a      	str	r2, [r3, #20]
						FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2)+1, player->width+1, player->height+1, 0xFE8B);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	1c58      	adds	r0, r3, #1
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	1c59      	adds	r1, r3, #1
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	3301      	adds	r3, #1
 800329c:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80032a0:	9400      	str	r4, [sp, #0]
 80032a2:	f7fe fb89 	bl	80019b8 <FillRect>
						if (player->life==0){
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11f      	bne.n	80032ee <E3_FireMove+0x1a2>
							player->isAlive=0;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	61da      	str	r2, [r3, #28]
							player->animationDie=0;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	669a      	str	r2, [r3, #104]	@ 0x68
						FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2)+1, player->width+1, player->height+1, 0xFE8B);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	1c58      	adds	r0, r3, #1
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	1c59      	adds	r1, r3, #1
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80032e8:	9400      	str	r4, [sp, #0]
 80032ea:	f7fe fb65 	bl	80019b8 <FillRect>
						FillRect(enemy->x - (16 / 2), enemy->y - (16 / 2), 16, 16, 0xFE8B); //Se puede eliminar
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1a3 0008 	sub.w	r0, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f1a3 0108 	sub.w	r1, r3, #8
 80032fe:	f64f 638b 	movw	r3, #65163	@ 0xfe8b
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2310      	movs	r3, #16
 8003306:	2210      	movs	r2, #16
 8003308:	f7fe fb56 	bl	80019b8 <FillRect>
						enemy->isMove=0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	649a      	str	r2, [r3, #72]	@ 0x48
						enemy->animationEye=0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c
						enemy->Place+=1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	64da      	str	r2, [r3, #76]	@ 0x4c
						enemy->delay=0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	bf00      	nop
 8003334:	20000004 	.word	0x20000004

08003338 <E3_FireAnimation>:

void E3_FireAnimation(enemy_type3* enemy){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	if (enemy->health>0 && enemy->isMove){
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	2b00      	cmp	r3, #0
 8003346:	dd25      	ble.n	8003394 <E3_FireAnimation+0x5c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <E3_FireAnimation+0x5c>
		enemy->animationFire+=0.2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f917 	bl	8000588 <__aeabi_f2d>
 800335a:	a311      	add	r3, pc, #68	@ (adr r3, 80033a0 <E3_FireAnimation+0x68>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fc ffb4 	bl	80002cc <__adddf3>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f7fd f964 	bl	8000638 <__aeabi_d2f>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
		if (enemy->animationFire>=4){
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800337c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	da00      	bge.n	800338c <E3_FireAnimation+0x54>
			enemy->animationFire=0;
		}
	}
}
 800338a:	e003      	b.n	8003394 <E3_FireAnimation+0x5c>
			enemy->animationFire=0;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	f3af 8000 	nop.w
 80033a0:	9999999a 	.word	0x9999999a
 80033a4:	3fc99999 	.word	0x3fc99999

080033a8 <E3_Hitbox>:

void E3_Hitbox(enemy_type3* enemy){
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
	enemy->e1Left = enemy->x - (enemy->width / 2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	1ad2      	subs	r2, r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
	enemy->e1Right = (enemy->x + enemy->width / 2); //+1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	61da      	str	r2, [r3, #28]
	enemy->e1Up = enemy->y - (enemy->height / 2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	1ad2      	subs	r2, r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	621a      	str	r2, [r3, #32]
	enemy->e1Down= (enemy->y + enemy->height / 2); //+1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24

		if (DrawHitbox==1){
 80033f0:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <E3_Hitbox+0x168>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d113      	bne.n	8003420 <E3_Hitbox+0x78>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	1ad0      	subs	r0, r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	1ad1      	subs	r1, r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2400      	movs	r4, #0
 800341a:	9400      	str	r4, [sp, #0]
 800341c:	f7fe faa4 	bl	8001968 <Rect>
	    }
	    if (DrawHitbox==2){
 8003420:	4b3b      	ldr	r3, [pc, #236]	@ (8003510 <E3_Hitbox+0x168>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d12b      	bne.n	8003480 <E3_Hitbox+0xd8>
	    	FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6998      	ldr	r0, [r3, #24]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2301      	movs	r3, #1
 8003438:	2201      	movs	r2, #1
 800343a:	f7fe fabd 	bl	80019b8 <FillRect>
	    	FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69d8      	ldr	r0, [r3, #28]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2301      	movs	r3, #1
 800344e:	2201      	movs	r2, #1
 8003450:	f7fe fab2 	bl	80019b8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a19      	ldr	r1, [r3, #32]
 800345c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2301      	movs	r3, #1
 8003464:	2201      	movs	r2, #1
 8003466:	f7fe faa7 	bl	80019b8 <FillRect>
	    	FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003472:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	2201      	movs	r2, #1
 800347c:	f7fe fa9c 	bl	80019b8 <FillRect>
	    }
	    if (DrawHitbox==3){
 8003480:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <E3_Hitbox+0x168>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d13f      	bne.n	8003508 <E3_Hitbox+0x160>
	    	Rect(enemy->x - (enemy->width / 2), enemy->y - (enemy->height / 2), enemy->width, enemy->height, 0x0000);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	1ad0      	subs	r0, r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	1ad1      	subs	r1, r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2400      	movs	r4, #0
 80034aa:	9400      	str	r4, [sp, #0]
 80034ac:	f7fe fa5c 	bl	8001968 <Rect>
			FillRect(enemy->e1Left , enemy->y, 1, 1, 0xd685); //Izquierda
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6998      	ldr	r0, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	2201      	movs	r2, #1
 80034c2:	f7fe fa79 	bl	80019b8 <FillRect>
			FillRect(enemy->e1Right , enemy->y, 1, 1, 0xd685); //Derecha
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69d8      	ldr	r0, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2301      	movs	r3, #1
 80034d6:	2201      	movs	r2, #1
 80034d8:	f7fe fa6e 	bl	80019b8 <FillRect>
			FillRect(enemy->x , enemy->e1Up, 1, 1, 0xd685); //Arriba
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a19      	ldr	r1, [r3, #32]
 80034e4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2301      	movs	r3, #1
 80034ec:	2201      	movs	r2, #1
 80034ee:	f7fe fa63 	bl	80019b8 <FillRect>
			FillRect(enemy->x , enemy->e1Down, 1, 1, 0xd685); //Abajo
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034fa:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	2201      	movs	r2, #1
 8003504:	f7fe fa58 	bl	80019b8 <FillRect>
	        }
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	2001cadf 	.word	0x2001cadf

08003514 <E3_MoveX>:

void E3_MoveX(enemy_type3* enemy){
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	if (enemy->delay==0){
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003520:	2b00      	cmp	r3, #0
 8003522:	d167      	bne.n	80035f4 <E3_MoveX+0xe0>
	int FutureX;
	enemy->delay=1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	651a      	str	r2, [r3, #80]	@ 0x50
	switch (enemy->Place){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	2b04      	cmp	r3, #4
 8003530:	d860      	bhi.n	80035f4 <E3_MoveX+0xe0>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <E3_MoveX+0x24>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800354d 	.word	0x0800354d
 800353c:	08003575 	.word	0x08003575
 8003540:	0800359d 	.word	0x0800359d
 8003544:	080035c5 	.word	0x080035c5
 8003548:	080035ed 	.word	0x080035ed
		case 0:
			FutureX=enemy->x+40;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3328      	adds	r3, #40	@ 0x28
 8003552:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	429a      	cmp	r2, r3
 800355c:	d806      	bhi.n	800356c <E3_MoveX+0x58>
				enemy->x=enemy->limitwidth_i+35;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 800356a:	e043      	b.n	80035f4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
			break;
 8003572:	e03f      	b.n	80035f4 <E3_MoveX+0xe0>

		case 1:
			FutureX=enemy->x-20;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3b14      	subs	r3, #20
 800357a:	60fb      	str	r3, [r7, #12]
			if (FutureX<=enemy->limitwidth_i){
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	429a      	cmp	r2, r3
 8003584:	d306      	bcc.n	8003594 <E3_MoveX+0x80>
				enemy->x=enemy->limitwidth-35;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358a:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 8003592:	e02f      	b.n	80035f4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
			break;
 800359a:	e02b      	b.n	80035f4 <E3_MoveX+0xe0>
		case 2:
			FutureX=enemy->x+50;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3332      	adds	r3, #50	@ 0x32
 80035a2:	60fb      	str	r3, [r7, #12]
			if (FutureX>=enemy->limitwidth){
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d806      	bhi.n	80035bc <E3_MoveX+0xa8>
				enemy->x=enemy->limitwidth_i+50;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]

			} else{
				enemy->x=FutureX;
			}
			break;
 80035ba:	e01b      	b.n	80035f4 <E3_MoveX+0xe0>
				enemy->x=FutureX;
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
			break;
 80035c2:	e017      	b.n	80035f4 <E3_MoveX+0xe0>
		case 3:
					FutureX=enemy->x-50;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3b32      	subs	r3, #50	@ 0x32
 80035ca:	60fb      	str	r3, [r7, #12]
					if (FutureX<=enemy->limitwidth_i){
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d306      	bcc.n	80035e4 <E3_MoveX+0xd0>
						enemy->x=enemy->limitwidth-35;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]

					} else{
						enemy->x=FutureX;
					}
					break;
 80035e2:	e007      	b.n	80035f4 <E3_MoveX+0xe0>
						enemy->x=FutureX;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
					break;
 80035ea:	e003      	b.n	80035f4 <E3_MoveX+0xe0>
		case 4:
			enemy->Place=0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
}
 80035f2:	e7ff      	b.n	80035f4 <E3_MoveX+0xe0>
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <initPlayer>:

/* Funciones Jugador ---------------------------------------------------*/
 void initPlayer(player* player, unsigned int startX, unsigned int startY, unsigned int playerWidth, unsigned int playerHeight, unsigned int speed, unsigned int life, unsigned int limitWidth, unsigned int limitHeight,unsigned int limitWidth_i) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af06      	add	r7, sp, #24
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
    // Inicializar las propiedades del jugador
    player->x = startX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	601a      	str	r2, [r3, #0]
    player->y = startY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
    player->width = playerWidth;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	609a      	str	r2, [r3, #8]
    player->height = playerHeight;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	60da      	str	r2, [r3, #12]
    player->speed = speed;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	611a      	str	r2, [r3, #16]
    player->life = life;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	615a      	str	r2, [r3, #20]
    player->score = 0;          // Puntuación inicial en 0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
    player->isAlive = 1;        // El jugador comienza vivo
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	61da      	str	r2, [r3, #28]
    player->direction = 2;      // Dirección inicial (abajo)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2202      	movs	r2, #2
 8003642:	621a      	str	r2, [r3, #32]
    player->limitWidth = limitWidth;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24
    player->limitWidth_i = limitWidth_i; //
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364e:	62da      	str	r2, [r3, #44]	@ 0x2c
    player->limitHeight = limitHeight;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003654:	629a      	str	r2, [r3, #40]	@ 0x28
    player->IsAttack = 0;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
    player->animationAttack=7;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a27      	ldr	r2, [pc, #156]	@ (80036fc <initPlayer+0xfc>)
 8003660:	659a      	str	r2, [r3, #88]	@ 0x58
	player-> IsDamage=0;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	65da      	str	r2, [r3, #92]	@ 0x5c
	player-> animationDamage=3;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a25      	ldr	r2, [pc, #148]	@ (8003700 <initPlayer+0x100>)
 800366c:	661a      	str	r2, [r3, #96]	@ 0x60
	player-> animationDie=4;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003674:	669a      	str	r2, [r3, #104]	@ 0x68
	player->  IsDie=0;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	665a      	str	r2, [r3, #100]	@ 0x64
	player-> playerLevel=0;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Dibujar el jugador en pantalla
    LCD_Sprite(player->x - (18 / 2)+2, player->y - (23 / 2+4), 18, 23, LinkAttackDown_18x23_6, 6, 5, 0, 0);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3b07      	subs	r3, #7
 8003688:	4618      	mov	r0, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	3b0f      	subs	r3, #15
 8003690:	4619      	mov	r1, r3
 8003692:	2300      	movs	r3, #0
 8003694:	9304      	str	r3, [sp, #16]
 8003696:	2300      	movs	r3, #0
 8003698:	9303      	str	r3, [sp, #12]
 800369a:	2305      	movs	r3, #5
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	2306      	movs	r3, #6
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	4b18      	ldr	r3, [pc, #96]	@ (8003704 <initPlayer+0x104>)
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2317      	movs	r3, #23
 80036a8:	2212      	movs	r2, #18
 80036aa:	f7fe fa35 	bl	8001b18 <LCD_Sprite>
    //FillRect(player->x , player->y, 1, 1, 0x000000);

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	1ad2      	subs	r2, r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)-1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	1e5a      	subs	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)-1);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40e00000 	.word	0x40e00000
 8003700:	40400000 	.word	0x40400000
 8003704:	20007df4 	.word	0x20007df4

08003708 <playerCanMove>:

int playerCanMove(player* player, unsigned int direction) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
	switch(player->direction){
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d851      	bhi.n	80037be <playerCanMove+0xb6>
 800371a:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <playerCanMove+0x18>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003731 	.word	0x08003731
 8003724:	0800374f 	.word	0x0800374f
 8003728:	08003771 	.word	0x08003771
 800372c:	08003793 	.word	0x08003793
	case 0: //Colisiones HITBOX Superior
		int FutureplayerUp = (player->y - player->speed)-(player->height / 2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	1ad2      	subs	r2, r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	613b      	str	r3, [r7, #16]
		//Borde
		if (FutureplayerUp<=18){
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b12      	cmp	r3, #18
 8003748:	dc34      	bgt.n	80037b4 <playerCanMove+0xac>
			return 0;
 800374a:	2300      	movs	r3, #0
 800374c:	e094      	b.n	8003878 <playerCanMove+0x170>
		}
		break;
	case 1: //Colisiones HITBOX Derecha
		int FutureplayerRight = ((player->x+ player->speed)+(player->width / 2));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	441a      	add	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
		//Borde
		if (FutureplayerRight>=player->limitWidth){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	d825      	bhi.n	80037b8 <playerCanMove+0xb0>
			return 0;
 800376c:	2300      	movs	r3, #0
 800376e:	e083      	b.n	8003878 <playerCanMove+0x170>
		}
		break;
	case 2: //Colisiones HITBOX Abajo
		int FutureplayerDown=((player->y+ player->speed)+(player->height / 2));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
		//Borde
		if (FutureplayerDown>=player->limitHeight){
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	429a      	cmp	r2, r3
 800378c:	d816      	bhi.n	80037bc <playerCanMove+0xb4>
			return 0;
 800378e:	2300      	movs	r3, #0
 8003790:	e072      	b.n	8003878 <playerCanMove+0x170>
		}
		break;
	case 3: //Colisiones HITBOX Izquierda (Cambiar a Width_limite inferior)
		int FutureplayerLeft = ((player->x-player->speed)-(player->width / 2));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	61fb      	str	r3, [r7, #28]
		//Borde
		if (FutureplayerLeft<=player->limitWidth_i){
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d306      	bcc.n	80037be <playerCanMove+0xb6>
			return 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e061      	b.n	8003878 <playerCanMove+0x170>
		break;
 80037b4:	bf00      	nop
 80037b6:	e002      	b.n	80037be <playerCanMove+0xb6>
		break;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <playerCanMove+0xb6>
		break;
 80037bc:	bf00      	nop
		}
	}

    // Variables para calcular la posición futura del jugador según la dirección
    int futureX = player->x;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
    int futureY = player->y;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60bb      	str	r3, [r7, #8]

    if (player->PlayerNum==1){
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d126      	bne.n	8003820 <playerCanMove+0x118>
    //Colision con E1
    if (ColisionPlayer_e1(&e1_1, player, direction,futureX,futureY)==0){
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4828      	ldr	r0, [pc, #160]	@ (8003880 <playerCanMove+0x178>)
 80037de:	f7fe fd77 	bl	80022d0 <ColisionPlayer_e1>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <playerCanMove+0xe4>
    	return 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e045      	b.n	8003878 <playerCanMove+0x170>
    }
    if (ColisionPlayer_e1(&e1_2, player, direction,futureX,futureY)==0){
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4823      	ldr	r0, [pc, #140]	@ (8003884 <playerCanMove+0x17c>)
 80037f8:	f7fe fd6a 	bl	80022d0 <ColisionPlayer_e1>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <playerCanMove+0xfe>
        	return 0;
 8003802:	2300      	movs	r3, #0
 8003804:	e038      	b.n	8003878 <playerCanMove+0x170>
        }
    if (ColisionPlayer_e1(&e1_3, player, direction,futureX,futureY)==0){
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	481d      	ldr	r0, [pc, #116]	@ (8003888 <playerCanMove+0x180>)
 8003812:	f7fe fd5d 	bl	80022d0 <ColisionPlayer_e1>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <playerCanMove+0x118>
        	return 0;
 800381c:	2300      	movs	r3, #0
 800381e:	e02b      	b.n	8003878 <playerCanMove+0x170>
        }
    }

    if (player->PlayerNum==2){
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	2b02      	cmp	r3, #2
 8003826:	d126      	bne.n	8003876 <playerCanMove+0x16e>
       //Colision con E1
       if (ColisionPlayer_e1(&e1_4, player, direction,futureX,futureY)==0){
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4816      	ldr	r0, [pc, #88]	@ (800388c <playerCanMove+0x184>)
 8003834:	f7fe fd4c 	bl	80022d0 <ColisionPlayer_e1>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <playerCanMove+0x13a>
       	return 0;
 800383e:	2300      	movs	r3, #0
 8003840:	e01a      	b.n	8003878 <playerCanMove+0x170>
       }
       if (ColisionPlayer_e1(&e1_5, player, direction,futureX,futureY)==0){
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4810      	ldr	r0, [pc, #64]	@ (8003890 <playerCanMove+0x188>)
 800384e:	f7fe fd3f 	bl	80022d0 <ColisionPlayer_e1>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <playerCanMove+0x154>
           	return 0;
 8003858:	2300      	movs	r3, #0
 800385a:	e00d      	b.n	8003878 <playerCanMove+0x170>
           }
       if (ColisionPlayer_e1(&e1_6, player, direction,futureX,futureY)==0){
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	480b      	ldr	r0, [pc, #44]	@ (8003894 <playerCanMove+0x18c>)
 8003868:	f7fe fd32 	bl	80022d0 <ColisionPlayer_e1>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <playerCanMove+0x16e>
           	return 0;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <playerCanMove+0x170>
           }
       }
    // No hay colisiones, se puede mover
    return 1;
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	2001c86c 	.word	0x2001c86c
 8003884:	2001c8a0 	.word	0x2001c8a0
 8003888:	2001c8d4 	.word	0x2001c8d4
 800388c:	2001c908 	.word	0x2001c908
 8003890:	2001c93c 	.word	0x2001c93c
 8003894:	2001c970 	.word	0x2001c970

08003898 <HitboxPlayer>:

void HitboxPlayer(player* player){
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b085      	sub	sp, #20
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]

    //HITBOX DEBUG
    player->playerLeft=player->x-(player->width / 2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    player->playerRight=(player->x+(player->width / 2)); //-1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	441a      	add	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40
    player->playerUp=player->y-(player->height / 2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38
    player->playerDown=(player->y+(player->height / 2)); //-1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	635a      	str	r2, [r3, #52]	@ 0x34

    if (DrawHitbox==1){
 80038e0:	4b47      	ldr	r3, [pc, #284]	@ (8003a00 <HitboxPlayer+0x168>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d113      	bne.n	8003910 <HitboxPlayer+0x78>
        	Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	1ad0      	subs	r0, r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	1ad1      	subs	r1, r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2400      	movs	r4, #0
 800390a:	9400      	str	r4, [sp, #0]
 800390c:	f7fe f82c 	bl	8001968 <Rect>
        }
    if (DrawHitbox==2){
 8003910:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <HitboxPlayer+0x168>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d12b      	bne.n	8003970 <HitboxPlayer+0xd8>
		FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	2201      	movs	r2, #1
 800392a:	f7fe f845 	bl	80019b8 <FillRect>
		FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	f24d 6385 	movw	r3, #54917	@ 0xd685
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2301      	movs	r3, #1
 800393e:	2201      	movs	r2, #1
 8003940:	f7fe f83a 	bl	80019b8 <FillRect>
		FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800394c:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2301      	movs	r3, #1
 8003954:	2201      	movs	r2, #1
 8003956:	f7fe f82f 	bl	80019b8 <FillRect>
		FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003962:	f24d 6385 	movw	r3, #54917	@ 0xd685
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2301      	movs	r3, #1
 800396a:	2201      	movs	r2, #1
 800396c:	f7fe f824 	bl	80019b8 <FillRect>
    }
    if (DrawHitbox==3){
 8003970:	4b23      	ldr	r3, [pc, #140]	@ (8003a00 <HitboxPlayer+0x168>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d13f      	bne.n	80039f8 <HitboxPlayer+0x160>
    	 Rect(player->x - (player->width / 2), player->y - (player->height / 2), player->width, player->height, 0x0000);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	1ad0      	subs	r0, r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	1ad1      	subs	r1, r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2400      	movs	r4, #0
 800399a:	9400      	str	r4, [sp, #0]
 800399c:	f7fd ffe4 	bl	8001968 <Rect>
        FillRect(player->playerLeft , player->y, 1, 1, 0xd685); //Izquierda
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2301      	movs	r3, #1
 80039b0:	2201      	movs	r2, #1
 80039b2:	f7fe f801 	bl	80019b8 <FillRect>
        FillRect(player->playerRight , player->y, 1, 1, 0xd685); //Derecha
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2301      	movs	r3, #1
 80039c6:	2201      	movs	r2, #1
 80039c8:	f7fd fff6 	bl	80019b8 <FillRect>
        FillRect(player->x , player->playerUp, 1, 1, 0xd685); //Arriba
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80039d4:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	2201      	movs	r2, #1
 80039de:	f7fd ffeb 	bl	80019b8 <FillRect>
        FillRect(player->x , player->playerDown, 1, 1, 0xd685); //Abajo}
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039ea:	f24d 6385 	movw	r3, #54917	@ 0xd685
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2301      	movs	r3, #1
 80039f2:	2201      	movs	r2, #1
 80039f4:	f7fd ffe0 	bl	80019b8 <FillRect>

        }
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}
 8003a00:	2001cadf 	.word	0x2001cadf

08003a04 <PlayerHit>:

void PlayerHit(player* player, enemy_type1* enemy){
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	if (enemy->isAlive == 1){
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	f040 80d0 	bne.w	8003bb8 <PlayerHit+0x1b4>
		// Verificar si le pego a un enemigo del tipo 1
		// Dirección de movimiento (0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		switch (player->direction){
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	f200 80cb 	bhi.w	8003bb8 <PlayerHit+0x1b4>
 8003a22:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <PlayerHit+0x24>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003af7 	.word	0x08003af7
 8003a30:	08003a9d 	.word	0x08003a9d
 8003a34:	08003b51 	.word	0x08003b51
			case 0: { // Golpe hacia arriba
				int rangoY = player->y - 15;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	3b0f      	subs	r3, #15
 8003a3e:	60bb      	str	r3, [r7, #8]
				if (rangoY<=enemy->e1Down && rangoY>=enemy->e1Up){
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	f0c0 80af 	bcc.w	8003baa <PlayerHit+0x1a6>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	f200 80a9 	bhi.w	8003baa <PlayerHit+0x1a6>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	3b05      	subs	r3, #5
 8003a62:	429a      	cmp	r2, r3
 8003a64:	f0c0 80a1 	bcc.w	8003baa <PlayerHit+0x1a6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	3305      	adds	r3, #5
 8003a72:	429a      	cmp	r2, r3
 8003a74:	f200 8099 	bhi.w	8003baa <PlayerHit+0x1a6>
						enemy->health -= 1;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 808f 	bne.w	8003baa <PlayerHit+0x1a6>
							enemy->isAlive=0;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
			break;
 8003a9a:	e086      	b.n	8003baa <PlayerHit+0x1a6>
			}
			case 2:{ //Golpe hacia abajo
				int rangoY_d= player->y + 15;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	330f      	adds	r3, #15
 8003aa2:	613b      	str	r3, [r7, #16]
				if (rangoY_d<=enemy->e1Down && rangoY_d>=enemy->e1Up){
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d37f      	bcc.n	8003bae <PlayerHit+0x1aa>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6a1a      	ldr	r2, [r3, #32]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d87a      	bhi.n	8003bae <PlayerHit+0x1aa>
					if (player->x>=(enemy->e1Left-5) && player->x<=(enemy->e1Right+5)){
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	3b05      	subs	r3, #5
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d373      	bcc.n	8003bae <PlayerHit+0x1aa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	3305      	adds	r3, #5
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d86c      	bhi.n	8003bae <PlayerHit+0x1aa>
						enemy->health -= 1;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	1e5a      	subs	r2, r3, #1
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d163      	bne.n	8003bae <PlayerHit+0x1aa>
							enemy->isAlive=0;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003af4:	e05b      	b.n	8003bae <PlayerHit+0x1aa>
			}
			case 1:{ //Golpe hacia derecha
				int rangoX= player->x + 20;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	60fb      	str	r3, [r7, #12]
				if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d354      	bcc.n	8003bb2 <PlayerHit+0x1ae>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d84f      	bhi.n	8003bb2 <PlayerHit+0x1ae>
					if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	3b0f      	subs	r3, #15
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d348      	bcc.n	8003bb2 <PlayerHit+0x1ae>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d841      	bhi.n	8003bb2 <PlayerHit+0x1ae>
						enemy->health -= 1;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	1e5a      	subs	r2, r3, #1
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	611a      	str	r2, [r3, #16]
						if(enemy->health==0){
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d138      	bne.n	8003bb2 <PlayerHit+0x1ae>
							enemy->isAlive=0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	615a      	str	r2, [r3, #20]
							enemy->animationDie=0;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
						}
					}
				}
				break;
 8003b4e:	e030      	b.n	8003bb2 <PlayerHit+0x1ae>
			}
			case 3:{ //Golpe hacia izquierda
							int rangoX= player->x - 20;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3b14      	subs	r3, #20
 8003b56:	617b      	str	r3, [r7, #20]
							if (rangoX<=enemy->e1Right && rangoX>=enemy->e1Left){
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d329      	bcc.n	8003bb6 <PlayerHit+0x1b2>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d824      	bhi.n	8003bb6 <PlayerHit+0x1b2>
								if (player->y>=(enemy->e1Down-15) && player->y<=(enemy->e1Up+20)){
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	3b0f      	subs	r3, #15
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d31d      	bcc.n	8003bb6 <PlayerHit+0x1b2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	3314      	adds	r3, #20
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d816      	bhi.n	8003bb6 <PlayerHit+0x1b2>
									enemy->health -= 1;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	1e5a      	subs	r2, r3, #1
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	611a      	str	r2, [r3, #16]
									if(enemy->health==0){
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <PlayerHit+0x1b2>
										enemy->isAlive=0;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
										enemy->animationDie=0;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
									}
								}
							}
							break;
 8003ba8:	e005      	b.n	8003bb6 <PlayerHit+0x1b2>
			break;
 8003baa:	bf00      	nop
 8003bac:	e004      	b.n	8003bb8 <PlayerHit+0x1b4>
				break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <PlayerHit+0x1b4>
				break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <PlayerHit+0x1b4>
							break;
 8003bb6:	bf00      	nop
						}
		}
	}
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <PlayerAnimation>:

void PlayerAnimation(player* player){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af06      	add	r7, sp, #24
 8003bca:	6078      	str	r0, [r7, #4]
	if (player->isAlive==1){
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d16f      	bne.n	8003cb4 <PlayerAnimation+0xf0>
		//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
		if (player->direction==0){
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d117      	bne.n	8003c0c <PlayerAnimation+0x48>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, player->animationWalkUp, 0, 0);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3b08      	subs	r3, #8
 8003be2:	4618      	mov	r0, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	3b0d      	subs	r3, #13
 8003bea:	4619      	mov	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9303      	str	r3, [sp, #12]
 8003bfa:	9202      	str	r2, [sp, #8]
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	4b2e      	ldr	r3, [pc, #184]	@ (8003cbc <PlayerAnimation+0xf8>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	231a      	movs	r3, #26
 8003c06:	2212      	movs	r2, #18
 8003c08:	f7fd ff86 	bl	8001b18 <LCD_Sprite>
		}
		if (player->direction==1){
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d117      	bne.n	8003c44 <PlayerAnimation+0x80>
			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkRight, 1, 0);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b0a      	subs	r3, #10
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	3b0b      	subs	r3, #11
 8003c22:	4619      	mov	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	9202      	str	r2, [sp, #8]
 8003c34:	230a      	movs	r3, #10
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <PlayerAnimation+0xfc>)
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2317      	movs	r3, #23
 8003c3e:	2216      	movs	r2, #22
 8003c40:	f7fd ff6a 	bl	8001b18 <LCD_Sprite>
		}
		if (player->direction==2){
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d117      	bne.n	8003c7c <PlayerAnimation+0xb8>
			LCD_Sprite(player->x - (18 / 2)+1, player->y - (24 / 2)+1, 18, 24, LinkDownWalk180x24_10, 10, player->animationWalkDown, 0, 0);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3b08      	subs	r3, #8
 8003c52:	4618      	mov	r0, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	3b0b      	subs	r3, #11
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c60:	461a      	mov	r2, r3
 8003c62:	2300      	movs	r3, #0
 8003c64:	9304      	str	r3, [sp, #16]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9303      	str	r3, [sp, #12]
 8003c6a:	9202      	str	r2, [sp, #8]
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <PlayerAnimation+0x100>)
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2318      	movs	r3, #24
 8003c76:	2212      	movs	r2, #18
 8003c78:	f7fd ff4e 	bl	8001b18 <LCD_Sprite>
			}
		if (player->direction==3){
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d117      	bne.n	8003cb4 <PlayerAnimation+0xf0>

			LCD_Sprite(player->x - (22 / 2)+1, player->y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, player->animationWalkLeft, 0, 0);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3b0a      	subs	r3, #10
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	3b0b      	subs	r3, #11
 8003c92:	4619      	mov	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9303      	str	r3, [sp, #12]
 8003ca2:	9202      	str	r2, [sp, #8]
 8003ca4:	230a      	movs	r3, #10
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <PlayerAnimation+0xfc>)
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2317      	movs	r3, #23
 8003cae:	2216      	movs	r2, #22
 8003cb0:	f7fd ff32 	bl	8001b18 <LCD_Sprite>
			}
	}
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20012428 	.word	0x20012428
 8003cc0:	2000fca0 	.word	0x2000fca0
 8003cc4:	200148b8 	.word	0x200148b8

08003cc8 <PlayerAttackAnimation>:

void PlayerAttackAnimation(player* player){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af06      	add	r7, sp, #24
 8003cce:	6078      	str	r0, [r7, #4]
	int variableAnimationAttack=player->animationAttack;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cda:	ee17 3a90 	vmov	r3, s15
 8003cde:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	f040 8082 	bne.w	8003dee <PlayerAttackAnimation+0x126>
		if (variableAnimationAttack<6){
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	dc7b      	bgt.n	8003de8 <PlayerAttackAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d115      	bne.n	8003d24 <PlayerAttackAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (22 / 2), 18, 22, LinkAttackUp_18x22_6, 6, variableAnimationAttack, 0, 0);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3b08      	subs	r3, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	3b0b      	subs	r3, #11
 8003d06:	4619      	mov	r1, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9304      	str	r3, [sp, #16]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	2306      	movs	r3, #6
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	4b39      	ldr	r3, [pc, #228]	@ (8003e00 <PlayerAttackAnimation+0x138>)
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2316      	movs	r3, #22
 8003d1e:	2212      	movs	r2, #18
 8003d20:	f7fd fefa 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==1){
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d115      	bne.n	8003d58 <PlayerAttackAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 1, 0);			}
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3b09      	subs	r3, #9
 8003d32:	4618      	mov	r0, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	3b0b      	subs	r3, #11
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	2301      	movs	r3, #1
 8003d42:	9303      	str	r3, [sp, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	9302      	str	r3, [sp, #8]
 8003d48:	2306      	movs	r3, #6
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e04 <PlayerAttackAnimation+0x13c>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2316      	movs	r3, #22
 8003d52:	2214      	movs	r2, #20
 8003d54:	f7fd fee0 	bl	8001b18 <LCD_Sprite>
			if (player->direction==2){
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d115      	bne.n	8003d8c <PlayerAttackAnimation+0xc4>
				LCD_Sprite(player->x - (18 / 2)+1,player->y - (23 / 2), 18, 23, LinkAttackDown_18x23_6, 6, variableAnimationAttack, 0, 0);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3b08      	subs	r3, #8
 8003d66:	4618      	mov	r0, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	3b0b      	subs	r3, #11
 8003d6e:	4619      	mov	r1, r3
 8003d70:	2300      	movs	r3, #0
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9303      	str	r3, [sp, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <PlayerAttackAnimation+0x140>)
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2317      	movs	r3, #23
 8003d86:	2212      	movs	r2, #18
 8003d88:	f7fd fec6 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==3){
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d115      	bne.n	8003dc0 <PlayerAttackAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (22 / 2), 20, 22, LinkAttackSide_20x22_6, 6, variableAnimationAttack, 0, 0);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3b09      	subs	r3, #9
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	3b0b      	subs	r3, #11
 8003da2:	4619      	mov	r1, r3
 8003da4:	2300      	movs	r3, #0
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	2306      	movs	r3, #6
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	4b13      	ldr	r3, [pc, #76]	@ (8003e04 <PlayerAttackAnimation+0x13c>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2316      	movs	r3, #22
 8003dba:	2214      	movs	r2, #20
 8003dbc:	f7fd feac 	bl	8001b18 <LCD_Sprite>
				}
			player->animationAttack+=0.2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fbdf 	bl	8000588 <__aeabi_f2d>
 8003dca:	a30b      	add	r3, pc, #44	@ (adr r3, 8003df8 <PlayerAttackAnimation+0x130>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fa7c 	bl	80002cc <__adddf3>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f7fc fc2c 	bl	8000638 <__aeabi_d2f>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	@ 0x58
			}else{
				player->IsAttack=0;
			}
		}
}
 8003de6:	e002      	b.n	8003dee <PlayerAttackAnimation+0x126>
				player->IsAttack=0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	9999999a 	.word	0x9999999a
 8003dfc:	3fc99999 	.word	0x3fc99999
 8003e00:	2000a5fc 	.word	0x2000a5fc
 8003e04:	2000915c 	.word	0x2000915c
 8003e08:	20007df4 	.word	0x20007df4

08003e0c <PlayerAttackSound>:

void PlayerAttackSound(player* player){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	int variableAnimationAttackS=player->animationAttack;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e1e:	ee17 3a90 	vmov	r3, s15
 8003e22:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d145      	bne.n	8003eb8 <PlayerAttackSound+0xac>
		if (variableAnimationAttackS<6){
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	dc42      	bgt.n	8003eb8 <PlayerAttackSound+0xac>
			switch (variableAnimationAttackS){
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d83f      	bhi.n	8003eb8 <PlayerAttackSound+0xac>
 8003e38:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <PlayerAttackSound+0x34>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e59 	.word	0x08003e59
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e89 	.word	0x08003e89
 8003e50:	08003e99 	.word	0x08003e99
 8003e54:	08003ea9 	.word	0x08003ea9
			case 0:
		        setPWM_Frequency(1000); // Frecuencia de 1 kHz
 8003e58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e5c:	f7fd ffa4 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003e60:	2032      	movs	r0, #50	@ 0x32
 8003e62:	f7fd ffc3 	bl	8001dec <setPWM_DutyCycle>
				break;
 8003e66:	e027      	b.n	8003eb8 <PlayerAttackSound+0xac>
			case 1:
		        setPWM_Frequency(2000); // Frecuencia de 1 kHz
 8003e68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003e6c:	f7fd ff9c 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003e70:	2032      	movs	r0, #50	@ 0x32
 8003e72:	f7fd ffbb 	bl	8001dec <setPWM_DutyCycle>
				break;
 8003e76:	e01f      	b.n	8003eb8 <PlayerAttackSound+0xac>
			case 2:
		        setPWM_Frequency(3000); // Frecuencia de 1 kHz
 8003e78:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003e7c:	f7fd ff94 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003e80:	2032      	movs	r0, #50	@ 0x32
 8003e82:	f7fd ffb3 	bl	8001dec <setPWM_DutyCycle>
				break;
 8003e86:	e017      	b.n	8003eb8 <PlayerAttackSound+0xac>
			case 3:
		        setPWM_Frequency(4000); // Frecuencia de 1 kHz
 8003e88:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003e8c:	f7fd ff8c 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003e90:	2032      	movs	r0, #50	@ 0x32
 8003e92:	f7fd ffab 	bl	8001dec <setPWM_DutyCycle>
				break;
 8003e96:	e00f      	b.n	8003eb8 <PlayerAttackSound+0xac>
			case 4:
		        setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8003e98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003e9c:	f7fd ff84 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(50);   // Duty cycle al 50%
 8003ea0:	2032      	movs	r0, #50	@ 0x32
 8003ea2:	f7fd ffa3 	bl	8001dec <setPWM_DutyCycle>
				break;
 8003ea6:	e007      	b.n	8003eb8 <PlayerAttackSound+0xac>
			case 5:
		        setPWM_Frequency(6000); // Frecuencia de 1 kHz
 8003ea8:	f241 7070 	movw	r0, #6000	@ 0x1770
 8003eac:	f7fd ff7c 	bl	8001da8 <setPWM_Frequency>
		        setPWM_DutyCycle(0);   // Duty cycle al 50%
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fd ff9b 	bl	8001dec <setPWM_DutyCycle>
				break;
 8003eb6:	bf00      	nop
			}

			}
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <PlayerDamageAnimation>:

void PlayerDamageAnimation(player* player){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af06      	add	r7, sp, #24
 8003ec6:	6078      	str	r0, [r7, #4]
	int variableAnimationDamage=player->animationDamage;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed2:	ee17 3a90 	vmov	r3, s15
 8003ed6:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 8082 	bne.w	8003fe6 <PlayerDamageAnimation+0x126>
		if (variableAnimationDamage<3){
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	dc7b      	bgt.n	8003fe0 <PlayerDamageAnimation+0x120>
			//(0: arriba, 1: derecha, 2: abajo, 3: izquierda)
			if (player->direction==0){
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d115      	bne.n	8003f1c <PlayerDamageAnimation+0x5c>

				LCD_Sprite(player->x - (18 / 2)+1, player->y - (20 / 2), 18, 20, LinkDamageUp_18x20_3, 3, variableAnimationDamage, 0, 0);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3b08      	subs	r3, #8
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	3b0a      	subs	r3, #10
 8003efe:	4619      	mov	r1, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	9304      	str	r3, [sp, #16]
 8003f04:	2300      	movs	r3, #0
 8003f06:	9303      	str	r3, [sp, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	9302      	str	r3, [sp, #8]
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	4b39      	ldr	r3, [pc, #228]	@ (8003ff8 <PlayerDamageAnimation+0x138>)
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2314      	movs	r3, #20
 8003f16:	2212      	movs	r2, #18
 8003f18:	f7fd fdfe 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==1){
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <PlayerDamageAnimation+0x90>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 1, 0);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3b09      	subs	r3, #9
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	3b0a      	subs	r3, #10
 8003f32:	4619      	mov	r1, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	2303      	movs	r3, #3
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	4b2d      	ldr	r3, [pc, #180]	@ (8003ffc <PlayerDamageAnimation+0x13c>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2315      	movs	r3, #21
 8003f4a:	2214      	movs	r2, #20
 8003f4c:	f7fd fde4 	bl	8001b18 <LCD_Sprite>
			}
			if (player->direction==2){
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d115      	bne.n	8003f84 <PlayerDamageAnimation+0xc4>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageDown_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b09      	subs	r3, #9
 8003f5e:	4618      	mov	r0, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	3b0a      	subs	r3, #10
 8003f66:	4619      	mov	r1, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	9302      	str	r3, [sp, #8]
 8003f74:	2303      	movs	r3, #3
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <PlayerDamageAnimation+0x140>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2315      	movs	r3, #21
 8003f7e:	2214      	movs	r2, #20
 8003f80:	f7fd fdca 	bl	8001b18 <LCD_Sprite>
					}
			if (player->direction==3){
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d115      	bne.n	8003fb8 <PlayerDamageAnimation+0xf8>

				LCD_Sprite(player->x - (20 / 2)+1, player->y - (21 / 2), 20, 21, LinkDamageSide_20x21_3, 3, variableAnimationDamage, 0, 0);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3b09      	subs	r3, #9
 8003f92:	4618      	mov	r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3b0a      	subs	r3, #10
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9304      	str	r3, [sp, #16]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9303      	str	r3, [sp, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2303      	movs	r3, #3
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	4b13      	ldr	r3, [pc, #76]	@ (8003ffc <PlayerDamageAnimation+0x13c>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2315      	movs	r3, #21
 8003fb2:	2214      	movs	r2, #20
 8003fb4:	f7fd fdb0 	bl	8001b18 <LCD_Sprite>
					}
			player->animationDamage+=0.2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc fae3 	bl	8000588 <__aeabi_f2d>
 8003fc2:	a30b      	add	r3, pc, #44	@ (adr r3, 8003ff0 <PlayerDamageAnimation+0x130>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc f980 	bl	80002cc <__adddf3>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fb30 	bl	8000638 <__aeabi_d2f>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	661a      	str	r2, [r3, #96]	@ 0x60
			}else{
				player->IsDamage=0;
			}
		}
}
 8003fde:	e002      	b.n	8003fe6 <PlayerDamageAnimation+0x126>
				player->IsDamage=0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	9999999a 	.word	0x9999999a
 8003ff4:	3fc99999 	.word	0x3fc99999
 8003ff8:	20004fd4 	.word	0x20004fd4
 8003ffc:	20005844 	.word	0x20005844
 8004000:	2000621c 	.word	0x2000621c

08004004 <PlayerDamageSound>:

void PlayerDamageSound(player* player){
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	int variableAnimationDamageS=player->animationDamage;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8004012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004016:	ee17 3a90 	vmov	r3, s15
 800401a:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==1){
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d127      	bne.n	8004074 <PlayerDamageSound+0x70>
		if (variableAnimationDamageS<3){
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b02      	cmp	r3, #2
 8004028:	dc24      	bgt.n	8004074 <PlayerDamageSound+0x70>
			switch (variableAnimationDamageS){
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d019      	beq.n	8004064 <PlayerDamageSound+0x60>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b02      	cmp	r3, #2
 8004034:	dc1e      	bgt.n	8004074 <PlayerDamageSound+0x70>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <PlayerDamageSound+0x40>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d008      	beq.n	8004054 <PlayerDamageSound+0x50>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
				break;
			}
			}
		}
}
 8004042:	e017      	b.n	8004074 <PlayerDamageSound+0x70>
				setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8004044:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004048:	f7fd feae 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 800404c:	2032      	movs	r0, #50	@ 0x32
 800404e:	f7fd fecd 	bl	8001dec <setPWM_DutyCycle>
				break;
 8004052:	e00f      	b.n	8004074 <PlayerDamageSound+0x70>
				setPWM_Frequency(8000); // Frecuencia de 1 kHz
 8004054:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8004058:	f7fd fea6 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 800405c:	2032      	movs	r0, #50	@ 0x32
 800405e:	f7fd fec5 	bl	8001dec <setPWM_DutyCycle>
				break;
 8004062:	e007      	b.n	8004074 <PlayerDamageSound+0x70>
				setPWM_Frequency(1000); // Frecuencia de 1 kHz
 8004064:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004068:	f7fd fe9e 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
 800406c:	2000      	movs	r0, #0
 800406e:	f7fd febd 	bl	8001dec <setPWM_DutyCycle>
				break;
 8004072:	bf00      	nop
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	0000      	movs	r0, r0
	...

08004080 <PlayerDieAnimation>:

void PlayerDieAnimation(player* player){
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b08b      	sub	sp, #44	@ 0x2c
 8004084:	af06      	add	r7, sp, #24
 8004086:	6078      	str	r0, [r7, #4]
	int variableAnimationDie=player->animationDie;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800408e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004092:	ee17 3a90 	vmov	r3, s15
 8004096:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d143      	bne.n	8004128 <PlayerDieAnimation+0xa8>
		if (variableAnimationDie<4){
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	dc40      	bgt.n	8004128 <PlayerDieAnimation+0xa8>
			FillRect(player->x - (player->width / 2)+1, player->y - (player->height / 2), player->width+1, player->height+1, 0xFE8B);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	1c58      	adds	r0, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	1ad1      	subs	r1, r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80040d0:	9400      	str	r4, [sp, #0]
 80040d2:	f7fd fc71 	bl	80019b8 <FillRect>
			LCD_Sprite(player->x - (24 / 2)+1, player->y - (24 / 2), 24,24, LinkDie_24x24_4, 4, variableAnimationDie, 0, 0);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b0b      	subs	r3, #11
 80040dc:	4618      	mov	r0, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	3b0c      	subs	r3, #12
 80040e4:	4619      	mov	r1, r3
 80040e6:	2300      	movs	r3, #0
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	2300      	movs	r3, #0
 80040ec:	9303      	str	r3, [sp, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	9302      	str	r3, [sp, #8]
 80040f2:	2304      	movs	r3, #4
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <PlayerDieAnimation+0xb8>)
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2318      	movs	r3, #24
 80040fc:	2218      	movs	r2, #24
 80040fe:	f7fd fd0b 	bl	8001b18 <LCD_Sprite>
			player->animationDie+=0.2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc fa3e 	bl	8000588 <__aeabi_f2d>
 800410c:	a308      	add	r3, pc, #32	@ (adr r3, 8004130 <PlayerDieAnimation+0xb0>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f7fc f8db 	bl	80002cc <__adddf3>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	f7fc fa8b 	bl	8000638 <__aeabi_d2f>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	669a      	str	r2, [r3, #104]	@ 0x68
			}
		}
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}
 8004130:	9999999a 	.word	0x9999999a
 8004134:	3fc99999 	.word	0x3fc99999
 8004138:	20006bf4 	.word	0x20006bf4

0800413c <PlayerDieSound>:

void PlayerDieSound(player* player){
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	int variableAnimationDieS=player->animationDie;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800414a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414e:	ee17 3a90 	vmov	r3, s15
 8004152:	60fb      	str	r3, [r7, #12]
	if (player->isAlive==0){
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d131      	bne.n	80041c0 <PlayerDieSound+0x84>
		if (variableAnimationDieS<4){
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b03      	cmp	r3, #3
 8004160:	dc2e      	bgt.n	80041c0 <PlayerDieSound+0x84>
			switch (variableAnimationDieS){
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d82b      	bhi.n	80041c0 <PlayerDieSound+0x84>
 8004168:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <PlayerDieSound+0x34>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004191 	.word	0x08004191
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041b1 	.word	0x080041b1
			case 0:
				setPWM_Frequency(10000); // Frecuencia de 1 kHz
 8004180:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004184:	f7fd fe10 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004188:	2032      	movs	r0, #50	@ 0x32
 800418a:	f7fd fe2f 	bl	8001dec <setPWM_DutyCycle>
				break;
 800418e:	e017      	b.n	80041c0 <PlayerDieSound+0x84>
			case 1:
				setPWM_Frequency(5000); // Frecuencia de 1 kHz
 8004190:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004194:	f7fd fe08 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 8004198:	2032      	movs	r0, #50	@ 0x32
 800419a:	f7fd fe27 	bl	8001dec <setPWM_DutyCycle>
				break;
 800419e:	e00f      	b.n	80041c0 <PlayerDieSound+0x84>
			case 2:
				setPWM_Frequency(10000); // Frecuencia de 1 kHz
 80041a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80041a4:	f7fd fe00 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(50);   // Duty cycle al 50%
 80041a8:	2032      	movs	r0, #50	@ 0x32
 80041aa:	f7fd fe1f 	bl	8001dec <setPWM_DutyCycle>
				break;
 80041ae:	e007      	b.n	80041c0 <PlayerDieSound+0x84>
			case 3:
				setPWM_Frequency(1000); // Frecuencia de 1 kHz
 80041b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80041b4:	f7fd fdf8 	bl	8001da8 <setPWM_Frequency>
				setPWM_DutyCycle(0);   // Duty cycle al 50%
 80041b8:	2000      	movs	r0, #0
 80041ba:	f7fd fe17 	bl	8001dec <setPWM_DutyCycle>
				break;
 80041be:	bf00      	nop

			}
			}
		}
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <initLevelSolo>:

void initLevelSolo(void){
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af06      	add	r7, sp, #24
	FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80041ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004304 <initLevelSolo+0x13c>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004304 <initLevelSolo+0x13c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	1c58      	adds	r0, r3, #1
 80041dc:	4b49      	ldr	r3, [pc, #292]	@ (8004304 <initLevelSolo+0x13c>)
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <initLevelSolo+0x13c>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	4b46      	ldr	r3, [pc, #280]	@ (8004304 <initLevelSolo+0x13c>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	4b44      	ldr	r3, [pc, #272]	@ (8004304 <initLevelSolo+0x13c>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80041fa:	9400      	str	r4, [sp, #0]
 80041fc:	f7fd fbdc 	bl	80019b8 <FillRect>
	if (IniciarLevel==1){
 8004200:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <initLevelSolo+0x140>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d178      	bne.n	80042fa <initLevelSolo+0x132>
		//Inicializar Jugador 1
		initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004208:	2312      	movs	r3, #18
 800420a:	9305      	str	r3, [sp, #20]
 800420c:	23dc      	movs	r3, #220	@ 0xdc
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004214:	9303      	str	r3, [sp, #12]
 8004216:	2303      	movs	r3, #3
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	2305      	movs	r3, #5
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	231e      	movs	r3, #30
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2316      	movs	r3, #22
 8004224:	22c8      	movs	r2, #200	@ 0xc8
 8004226:	21a0      	movs	r1, #160	@ 0xa0
 8004228:	4836      	ldr	r0, [pc, #216]	@ (8004304 <initLevelSolo+0x13c>)
 800422a:	f7ff f9e9 	bl	8003600 <initPlayer>
		initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 800422e:	2312      	movs	r3, #18
 8004230:	9305      	str	r3, [sp, #20]
 8004232:	23dc      	movs	r3, #220	@ 0xdc
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800423a:	9303      	str	r3, [sp, #12]
 800423c:	2303      	movs	r3, #3
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	2305      	movs	r3, #5
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	231e      	movs	r3, #30
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2316      	movs	r3, #22
 800424a:	22c8      	movs	r2, #200	@ 0xc8
 800424c:	21a0      	movs	r1, #160	@ 0xa0
 800424e:	482f      	ldr	r0, [pc, #188]	@ (800430c <initLevelSolo+0x144>)
 8004250:	f7ff f9d6 	bl	8003600 <initPlayer>
		p1.PlayerNum=1;
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <initLevelSolo+0x13c>)
 8004256:	2201      	movs	r2, #1
 8004258:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 800425a:	4b2c      	ldr	r3, [pc, #176]	@ (800430c <initLevelSolo+0x144>)
 800425c:	2202      	movs	r2, #2
 800425e:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.isAlive=0;
 8004260:	4b2a      	ldr	r3, [pc, #168]	@ (800430c <initLevelSolo+0x144>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]

		if (nivelActual1==NIVEL1){
 8004266:	4b2a      	ldr	r3, [pc, #168]	@ (8004310 <initLevelSolo+0x148>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11e      	bne.n	80042ae <initLevelSolo+0xe6>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8004270:	2303      	movs	r3, #3
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	2313      	movs	r3, #19
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2310      	movs	r3, #16
 800427a:	2250      	movs	r2, #80	@ 0x50
 800427c:	2128      	movs	r1, #40	@ 0x28
 800427e:	4825      	ldr	r0, [pc, #148]	@ (8004314 <initLevelSolo+0x14c>)
 8004280:	f7fd ff34 	bl	80020ec <initEnemy1>
			//Inicializar enemigo 2
			initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 8004284:	2303      	movs	r3, #3
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	2313      	movs	r3, #19
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2310      	movs	r3, #16
 800428e:	2250      	movs	r2, #80	@ 0x50
 8004290:	21a0      	movs	r1, #160	@ 0xa0
 8004292:	4821      	ldr	r0, [pc, #132]	@ (8004318 <initLevelSolo+0x150>)
 8004294:	f7fd ff2a 	bl	80020ec <initEnemy1>
			//Inicializar enemigo 3
			initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 8004298:	2303      	movs	r3, #3
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2313      	movs	r3, #19
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2310      	movs	r3, #16
 80042a2:	2250      	movs	r2, #80	@ 0x50
 80042a4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80042a8:	481c      	ldr	r0, [pc, #112]	@ (800431c <initLevelSolo+0x154>)
 80042aa:	f7fd ff1f 	bl	80020ec <initEnemy1>

		  if (nivelActual1==NIVEL2){
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <initLevelSolo+0x148>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d10c      	bne.n	80042d2 <initLevelSolo+0x10a>
			  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 80042b8:	2303      	movs	r3, #3
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	2314      	movs	r3, #20
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2310      	movs	r3, #16
 80042c2:	2250      	movs	r2, #80	@ 0x50
 80042c4:	21a0      	movs	r1, #160	@ 0xa0
 80042c6:	4816      	ldr	r0, [pc, #88]	@ (8004320 <initLevelSolo+0x158>)
 80042c8:	f7fe fb34 	bl	8002934 <initEnemy2>
			  IniciarLevel=0;
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <initLevelSolo+0x140>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 80042d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004310 <initLevelSolo+0x148>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d10e      	bne.n	80042fa <initLevelSolo+0x132>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <initLevelSolo+0x13c>)
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	230f      	movs	r3, #15
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	230f      	movs	r3, #15
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	230f      	movs	r3, #15
 80042ea:	221e      	movs	r2, #30
 80042ec:	2150      	movs	r1, #80	@ 0x50
 80042ee:	480d      	ldr	r0, [pc, #52]	@ (8004324 <initLevelSolo+0x15c>)
 80042f0:	f7fe fe68 	bl	8002fc4 <initEnemy3>
			  IniciarLevel=0;
 80042f4:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <initLevelSolo+0x140>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
		  	  }
		  }
}
 80042fa:	bf00      	nop
 80042fc:	3704      	adds	r7, #4
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}
 8004302:	bf00      	nop
 8004304:	2001c784 	.word	0x2001c784
 8004308:	2001cae4 	.word	0x2001cae4
 800430c:	2001c7f8 	.word	0x2001c7f8
 8004310:	2001cae1 	.word	0x2001cae1
 8004314:	2001c86c 	.word	0x2001c86c
 8004318:	2001c8a0 	.word	0x2001c8a0
 800431c:	2001c8d4 	.word	0x2001c8d4
 8004320:	2001c9a4 	.word	0x2001c9a4
 8004324:	2001ca2c 	.word	0x2001ca2c

08004328 <initLevelP1>:

void initLevelP1(void){
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af06      	add	r7, sp, #24
	FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800432e:	4b3b      	ldr	r3, [pc, #236]	@ (800441c <initLevelP1+0xf4>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b3a      	ldr	r3, [pc, #232]	@ (800441c <initLevelP1+0xf4>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	1c58      	adds	r0, r3, #1
 800433c:	4b37      	ldr	r3, [pc, #220]	@ (800441c <initLevelP1+0xf4>)
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <initLevelP1+0xf4>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	1c59      	adds	r1, r3, #1
 800434a:	4b34      	ldr	r3, [pc, #208]	@ (800441c <initLevelP1+0xf4>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	4b32      	ldr	r3, [pc, #200]	@ (800441c <initLevelP1+0xf4>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800435a:	9400      	str	r4, [sp, #0]
 800435c:	f7fd fb2c 	bl	80019b8 <FillRect>
	if (IniciarLevel==1){
 8004360:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <initLevelP1+0xf8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d155      	bne.n	8004414 <initLevelP1+0xec>
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8004368:	2300      	movs	r3, #0
 800436a:	22f0      	movs	r2, #240	@ 0xf0
 800436c:	2100      	movs	r1, #0
 800436e:	20a0      	movs	r0, #160	@ 0xa0
 8004370:	f7fd faba 	bl	80018e8 <V_line>
		initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18);
 8004374:	2312      	movs	r3, #18
 8004376:	9305      	str	r3, [sp, #20]
 8004378:	23dc      	movs	r3, #220	@ 0xdc
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	23a0      	movs	r3, #160	@ 0xa0
 800437e:	9303      	str	r3, [sp, #12]
 8004380:	2303      	movs	r3, #3
 8004382:	9302      	str	r3, [sp, #8]
 8004384:	2305      	movs	r3, #5
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	231e      	movs	r3, #30
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2316      	movs	r3, #22
 800438e:	22c8      	movs	r2, #200	@ 0xc8
 8004390:	2150      	movs	r1, #80	@ 0x50
 8004392:	4822      	ldr	r0, [pc, #136]	@ (800441c <initLevelP1+0xf4>)
 8004394:	f7ff f934 	bl	8003600 <initPlayer>
		p1.PlayerNum=1;
 8004398:	4b20      	ldr	r3, [pc, #128]	@ (800441c <initLevelP1+0xf4>)
 800439a:	2201      	movs	r2, #1
 800439c:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 800439e:	4b21      	ldr	r3, [pc, #132]	@ (8004424 <initLevelP1+0xfc>)
 80043a0:	2202      	movs	r2, #2
 80043a2:	671a      	str	r2, [r3, #112]	@ 0x70

		if (nivelActual1==NIVEL1){
 80043a4:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <initLevelP1+0x100>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <initLevelP1+0xa0>
			//Inicializar enemigo 1
			initEnemy1(&e1_1, 30, 80, 16, 19, 3);
 80043ae:	2303      	movs	r3, #3
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2313      	movs	r3, #19
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2310      	movs	r3, #16
 80043b8:	2250      	movs	r2, #80	@ 0x50
 80043ba:	211e      	movs	r1, #30
 80043bc:	481b      	ldr	r0, [pc, #108]	@ (800442c <initLevelP1+0x104>)
 80043be:	f7fd fe95 	bl	80020ec <initEnemy1>
			IniciarLevel=0;}
 80043c2:	4b17      	ldr	r3, [pc, #92]	@ (8004420 <initLevelP1+0xf8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

		  if (nivelActual1==NIVEL2){
 80043c8:	4b17      	ldr	r3, [pc, #92]	@ (8004428 <initLevelP1+0x100>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10c      	bne.n	80043ec <initLevelP1+0xc4>
			  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 80043d2:	2303      	movs	r3, #3
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	2314      	movs	r3, #20
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2310      	movs	r3, #16
 80043dc:	2250      	movs	r2, #80	@ 0x50
 80043de:	215a      	movs	r1, #90	@ 0x5a
 80043e0:	4813      	ldr	r0, [pc, #76]	@ (8004430 <initLevelP1+0x108>)
 80043e2:	f7fe faa7 	bl	8002934 <initEnemy2>
			  IniciarLevel=0;
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <initLevelP1+0xf8>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
			  }

		  if (nivelActual1==NIVEL3){
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <initLevelP1+0x100>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d10e      	bne.n	8004414 <initLevelP1+0xec>
			  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80043f6:	4b09      	ldr	r3, [pc, #36]	@ (800441c <initLevelP1+0xf4>)
 80043f8:	9302      	str	r3, [sp, #8]
 80043fa:	230f      	movs	r3, #15
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	230f      	movs	r3, #15
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	230f      	movs	r3, #15
 8004404:	221e      	movs	r2, #30
 8004406:	2150      	movs	r1, #80	@ 0x50
 8004408:	480a      	ldr	r0, [pc, #40]	@ (8004434 <initLevelP1+0x10c>)
 800440a:	f7fe fddb 	bl	8002fc4 <initEnemy3>
			  IniciarLevel=0;
 800440e:	4b04      	ldr	r3, [pc, #16]	@ (8004420 <initLevelP1+0xf8>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
		  	  }
		  }

}
 8004414:	bf00      	nop
 8004416:	3704      	adds	r7, #4
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}
 800441c:	2001c784 	.word	0x2001c784
 8004420:	2001cae4 	.word	0x2001cae4
 8004424:	2001c7f8 	.word	0x2001c7f8
 8004428:	2001cae1 	.word	0x2001cae1
 800442c:	2001c86c 	.word	0x2001c86c
 8004430:	2001c9a4 	.word	0x2001c9a4
 8004434:	2001ca2c 	.word	0x2001ca2c

08004438 <initLevelP2>:

void initLevelP2(void){
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af06      	add	r7, sp, #24
	FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 800443e:	4b3c      	ldr	r3, [pc, #240]	@ (8004530 <initLevelP2+0xf8>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b3b      	ldr	r3, [pc, #236]	@ (8004530 <initLevelP2+0xf8>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	1c58      	adds	r0, r3, #1
 800444c:	4b38      	ldr	r3, [pc, #224]	@ (8004530 <initLevelP2+0xf8>)
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b37      	ldr	r3, [pc, #220]	@ (8004530 <initLevelP2+0xf8>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	1c59      	adds	r1, r3, #1
 800445a:	4b35      	ldr	r3, [pc, #212]	@ (8004530 <initLevelP2+0xf8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	4b33      	ldr	r3, [pc, #204]	@ (8004530 <initLevelP2+0xf8>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800446a:	9400      	str	r4, [sp, #0]
 800446c:	f7fd faa4 	bl	80019b8 <FillRect>
	if (IniciarLevel2==1){
 8004470:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <initLevelP2+0xfc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d156      	bne.n	8004526 <initLevelP2+0xee>
		//Inicializar Jugador 1
		//Linea de en medio
		V_line(160, 0, 240, 0x0000);
 8004478:	2300      	movs	r3, #0
 800447a:	22f0      	movs	r2, #240	@ 0xf0
 800447c:	2100      	movs	r1, #0
 800447e:	20a0      	movs	r0, #160	@ 0xa0
 8004480:	f7fd fa32 	bl	80018e8 <V_line>
		initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160);
 8004484:	23a0      	movs	r3, #160	@ 0xa0
 8004486:	9305      	str	r3, [sp, #20]
 8004488:	23dc      	movs	r3, #220	@ 0xdc
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004490:	9303      	str	r3, [sp, #12]
 8004492:	2303      	movs	r3, #3
 8004494:	9302      	str	r3, [sp, #8]
 8004496:	2305      	movs	r3, #5
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	231e      	movs	r3, #30
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2316      	movs	r3, #22
 80044a0:	22c8      	movs	r2, #200	@ 0xc8
 80044a2:	21f0      	movs	r1, #240	@ 0xf0
 80044a4:	4822      	ldr	r0, [pc, #136]	@ (8004530 <initLevelP2+0xf8>)
 80044a6:	f7ff f8ab 	bl	8003600 <initPlayer>
		p1.PlayerNum=1;
 80044aa:	4b23      	ldr	r3, [pc, #140]	@ (8004538 <initLevelP2+0x100>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	671a      	str	r2, [r3, #112]	@ 0x70
		p2.PlayerNum=2;
 80044b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004530 <initLevelP2+0xf8>)
 80044b2:	2202      	movs	r2, #2
 80044b4:	671a      	str	r2, [r3, #112]	@ 0x70

		 if (nivelActual2==NIVEL1){
 80044b6:	4b21      	ldr	r3, [pc, #132]	@ (800453c <initLevelP2+0x104>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10c      	bne.n	80044da <initLevelP2+0xa2>
			//Inicializar enemigo 1
			initEnemy1(&e1_4, 170, 120, 16, 19, 3);
 80044c0:	2303      	movs	r3, #3
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	2313      	movs	r3, #19
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2310      	movs	r3, #16
 80044ca:	2278      	movs	r2, #120	@ 0x78
 80044cc:	21aa      	movs	r1, #170	@ 0xaa
 80044ce:	481c      	ldr	r0, [pc, #112]	@ (8004540 <initLevelP2+0x108>)
 80044d0:	f7fd fe0c 	bl	80020ec <initEnemy1>
			IniciarLevel2=0;
 80044d4:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <initLevelP2+0xfc>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
			}

	     if (nivelActual2==NIVEL2){
 80044da:	4b18      	ldr	r3, [pc, #96]	@ (800453c <initLevelP2+0x104>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10c      	bne.n	80044fe <initLevelP2+0xc6>
			  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 80044e4:	2303      	movs	r3, #3
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	2314      	movs	r3, #20
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	2310      	movs	r3, #16
 80044ee:	2250      	movs	r2, #80	@ 0x50
 80044f0:	21e6      	movs	r1, #230	@ 0xe6
 80044f2:	4814      	ldr	r0, [pc, #80]	@ (8004544 <initLevelP2+0x10c>)
 80044f4:	f7fe fa1e 	bl	8002934 <initEnemy2>
			IniciarLevel2=0;
 80044f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <initLevelP2+0xfc>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
		  }

	     if (nivelActual2==NIVEL3){
 80044fe:	4b0f      	ldr	r3, [pc, #60]	@ (800453c <initLevelP2+0x104>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d10e      	bne.n	8004526 <initLevelP2+0xee>
		  initEnemy3(&e3_2, 240, 30, 15, 15, 15, &p2);
 8004508:	4b09      	ldr	r3, [pc, #36]	@ (8004530 <initLevelP2+0xf8>)
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	230f      	movs	r3, #15
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	230f      	movs	r3, #15
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	230f      	movs	r3, #15
 8004516:	221e      	movs	r2, #30
 8004518:	21f0      	movs	r1, #240	@ 0xf0
 800451a:	480b      	ldr	r0, [pc, #44]	@ (8004548 <initLevelP2+0x110>)
 800451c:	f7fe fd52 	bl	8002fc4 <initEnemy3>
		  IniciarLevel=0;
 8004520:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <initLevelP2+0x114>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
		  }
	  }

}
 8004526:	bf00      	nop
 8004528:	3704      	adds	r7, #4
 800452a:	46bd      	mov	sp, r7
 800452c:	bd90      	pop	{r4, r7, pc}
 800452e:	bf00      	nop
 8004530:	2001c7f8 	.word	0x2001c7f8
 8004534:	2001cae8 	.word	0x2001cae8
 8004538:	2001c784 	.word	0x2001c784
 800453c:	2001cae2 	.word	0x2001cae2
 8004540:	2001c908 	.word	0x2001c908
 8004544:	2001c9e8 	.word	0x2001c9e8
 8004548:	2001ca84 	.word	0x2001ca84
 800454c:	2001cae4 	.word	0x2001cae4

08004550 <CargarMultiplesBitmaps>:

void CargarMultiplesBitmaps(char *baseName) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	@ 0x30
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
    char fileName[20];
    int y_offset = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int i = 1; i <= 8; i++) {
 800455c:	2301      	movs	r3, #1
 800455e:	623b      	str	r3, [r7, #32]
 8004560:	e01d      	b.n	800459e <CargarMultiplesBitmaps+0x4e>
        // Formateamos el nombre del archivo, agregando el número y "_h.bin"
        sprintf(fileName, "%s%d_h.bin", baseName, i);
 8004562:	f107 000c 	add.w	r0, r7, #12
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4911      	ldr	r1, [pc, #68]	@ (80045b0 <CargarMultiplesBitmaps+0x60>)
 800456c:	f008 f8fe 	bl	800c76c <siprintf>

        // Intentamos cargar el bitmap desde la tarjeta SD
        if (CargarBitmaps_SD(fileName)) {
 8004570:	f107 030c 	add.w	r3, r7, #12
 8004574:	4618      	mov	r0, r3
 8004576:	f7fd fb91 	bl	8001c9c <CargarBitmaps_SD>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <CargarMultiplesBitmaps+0x42>
            // Mostramos el bitmap en la posición correspondiente
            LCD_Bitmap(0, y_offset, 320, 30, fragmento_imagen);
 8004580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004582:	4b0c      	ldr	r3, [pc, #48]	@ (80045b4 <CargarMultiplesBitmaps+0x64>)
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	231e      	movs	r3, #30
 8004588:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800458c:	2000      	movs	r0, #0
 800458e:	f7fd fa6d 	bl	8001a6c <LCD_Bitmap>
        }

        // Aumentamos el desplazamiento vertical para el siguiente bitmap
        y_offset += 30;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	331e      	adds	r3, #30
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 1; i <= 8; i++) {
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	3301      	adds	r3, #1
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	ddde      	ble.n	8004562 <CargarMultiplesBitmaps+0x12>
    }
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3728      	adds	r7, #40	@ 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	0800d154 	.word	0x0800d154
 80045b4:	20017c78 	.word	0x20017c78

080045b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045be:	f001 fcbf 	bl	8005f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045c2:	f000 fbeb 	bl	8004d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045c6:	f000 fd55 	bl	8005074 <MX_GPIO_Init>
  MX_SPI1_Init();
 80045ca:	f000 fc53 	bl	8004e74 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80045ce:	f000 fd27 	bl	8005020 <MX_USART2_UART_Init>
  MX_UART5_Init();
 80045d2:	f000 fcfb 	bl	8004fcc <MX_UART5_Init>
  MX_FATFS_Init();
 80045d6:	f005 f949 	bl	800986c <MX_FATFS_Init>
  MX_TIM2_Init();
 80045da:	f000 fc81 	bl	8004ee0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 80045de:	f7fc febb 	bl	8001358 <LCD_Init>
	//LCD_Clear(0x00);

	//Cargar el fondo en 8 fragmentaciones
	CargarMultiplesBitmaps("mp");
 80045e2:	48ab      	ldr	r0, [pc, #684]	@ (8004890 <main+0x2d8>)
 80045e4:	f7ff ffb4 	bl	8004550 <CargarMultiplesBitmaps>
	//LCD_Bitmap(0, 0, 320, 240, fondo);

	//LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);

	// Activar bandera interrupcion
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 80045e8:	2201      	movs	r2, #1
 80045ea:	49aa      	ldr	r1, [pc, #680]	@ (8004894 <main+0x2dc>)
 80045ec:	48aa      	ldr	r0, [pc, #680]	@ (8004898 <main+0x2e0>)
 80045ee:	f004 f9c2 	bl	8008976 <HAL_UART_Receive_IT>

	//EstadoJuego estadoActual = SOLO;
	//LevelPlaying nivelActual1 = NIVEL3;
	//LevelPlaying nivelActual2 = NIVEL2;
	estadoActual = MENU;
 80045f2:	4baa      	ldr	r3, [pc, #680]	@ (800489c <main+0x2e4>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
	nivelActual1 = NIVEL1;
 80045f8:	4ba9      	ldr	r3, [pc, #676]	@ (80048a0 <main+0x2e8>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
	nivelActual2 = NIVEL1;
 80045fe:	4ba9      	ldr	r3, [pc, #676]	@ (80048a4 <main+0x2ec>)
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
	modo = 0;
 8004604:	4ba8      	ldr	r3, [pc, #672]	@ (80048a8 <main+0x2f0>)
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
    fase_p1=1;
 800460a:	4ba8      	ldr	r3, [pc, #672]	@ (80048ac <main+0x2f4>)
 800460c:	2201      	movs	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
    fase_p2=1;
 8004610:	4ba7      	ldr	r3, [pc, #668]	@ (80048b0 <main+0x2f8>)
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]


  	if (estadoActual == SOLO){
 8004616:	4ba1      	ldr	r3, [pc, #644]	@ (800489c <main+0x2e4>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d172      	bne.n	8004706 <main+0x14e>
	//Inicializar Jugador 1
	initPlayer(&p1, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004620:	2312      	movs	r3, #18
 8004622:	9305      	str	r3, [sp, #20]
 8004624:	23dc      	movs	r3, #220	@ 0xdc
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800462c:	9303      	str	r3, [sp, #12]
 800462e:	2303      	movs	r3, #3
 8004630:	9302      	str	r3, [sp, #8]
 8004632:	2305      	movs	r3, #5
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	231e      	movs	r3, #30
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2316      	movs	r3, #22
 800463c:	22c8      	movs	r2, #200	@ 0xc8
 800463e:	21a0      	movs	r1, #160	@ 0xa0
 8004640:	489c      	ldr	r0, [pc, #624]	@ (80048b4 <main+0x2fc>)
 8004642:	f7fe ffdd 	bl	8003600 <initPlayer>
	initPlayer(&p2, 160, 200, 22, 30, 5, 3, 300, 220,18);
 8004646:	2312      	movs	r3, #18
 8004648:	9305      	str	r3, [sp, #20]
 800464a:	23dc      	movs	r3, #220	@ 0xdc
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004652:	9303      	str	r3, [sp, #12]
 8004654:	2303      	movs	r3, #3
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	2305      	movs	r3, #5
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	231e      	movs	r3, #30
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2316      	movs	r3, #22
 8004662:	22c8      	movs	r2, #200	@ 0xc8
 8004664:	21a0      	movs	r1, #160	@ 0xa0
 8004666:	4894      	ldr	r0, [pc, #592]	@ (80048b8 <main+0x300>)
 8004668:	f7fe ffca 	bl	8003600 <initPlayer>
	p1.PlayerNum=1;
 800466c:	4b91      	ldr	r3, [pc, #580]	@ (80048b4 <main+0x2fc>)
 800466e:	2201      	movs	r2, #1
 8004670:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 8004672:	4b91      	ldr	r3, [pc, #580]	@ (80048b8 <main+0x300>)
 8004674:	2202      	movs	r2, #2
 8004676:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.isAlive=0;
 8004678:	4b8f      	ldr	r3, [pc, #572]	@ (80048b8 <main+0x300>)
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]

	if (nivelActual1==NIVEL1){
 800467e:	4b88      	ldr	r3, [pc, #544]	@ (80048a0 <main+0x2e8>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11e      	bne.n	80046c6 <main+0x10e>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 40, 80, 16, 19, 3);
 8004688:	2303      	movs	r3, #3
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	2313      	movs	r3, #19
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2310      	movs	r3, #16
 8004692:	2250      	movs	r2, #80	@ 0x50
 8004694:	2128      	movs	r1, #40	@ 0x28
 8004696:	4889      	ldr	r0, [pc, #548]	@ (80048bc <main+0x304>)
 8004698:	f7fd fd28 	bl	80020ec <initEnemy1>
		//Inicializar enemigo 2
		initEnemy1(&e1_2, 160, 80, 16, 19, 3);
 800469c:	2303      	movs	r3, #3
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	2313      	movs	r3, #19
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2310      	movs	r3, #16
 80046a6:	2250      	movs	r2, #80	@ 0x50
 80046a8:	21a0      	movs	r1, #160	@ 0xa0
 80046aa:	4885      	ldr	r0, [pc, #532]	@ (80048c0 <main+0x308>)
 80046ac:	f7fd fd1e 	bl	80020ec <initEnemy1>
		//Inicializar enemigo 3
		initEnemy1(&e1_3, 280, 80, 16, 19, 3);}
 80046b0:	2303      	movs	r3, #3
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	2313      	movs	r3, #19
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2310      	movs	r3, #16
 80046ba:	2250      	movs	r2, #80	@ 0x50
 80046bc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80046c0:	4880      	ldr	r0, [pc, #512]	@ (80048c4 <main+0x30c>)
 80046c2:	f7fd fd13 	bl	80020ec <initEnemy1>

	  if (nivelActual1==NIVEL2){
 80046c6:	4b76      	ldr	r3, [pc, #472]	@ (80048a0 <main+0x2e8>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d109      	bne.n	80046e4 <main+0x12c>
		  initEnemy2(&e2_1, 160, 80, 16, 20, 3);
 80046d0:	2303      	movs	r3, #3
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	2314      	movs	r3, #20
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2310      	movs	r3, #16
 80046da:	2250      	movs	r2, #80	@ 0x50
 80046dc:	21a0      	movs	r1, #160	@ 0xa0
 80046de:	487a      	ldr	r0, [pc, #488]	@ (80048c8 <main+0x310>)
 80046e0:	f7fe f928 	bl	8002934 <initEnemy2>
		  }

	  if (nivelActual1==NIVEL3){
 80046e4:	4b6e      	ldr	r3, [pc, #440]	@ (80048a0 <main+0x2e8>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d10b      	bne.n	8004706 <main+0x14e>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);
 80046ee:	4b71      	ldr	r3, [pc, #452]	@ (80048b4 <main+0x2fc>)
 80046f0:	9302      	str	r3, [sp, #8]
 80046f2:	230f      	movs	r3, #15
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	230f      	movs	r3, #15
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	230f      	movs	r3, #15
 80046fc:	221e      	movs	r2, #30
 80046fe:	2150      	movs	r1, #80	@ 0x50
 8004700:	4872      	ldr	r0, [pc, #456]	@ (80048cc <main+0x314>)
 8004702:	f7fe fc5f 	bl	8002fc4 <initEnemy3>
	  	  }
}
  if (estadoActual==DUO){
 8004706:	4b65      	ldr	r3, [pc, #404]	@ (800489c <main+0x2e4>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	f040 8095 	bne.w	800483c <main+0x284>
	//Linea de en medio
	V_line(160, 0, 240, 0x0000);
 8004712:	2300      	movs	r3, #0
 8004714:	22f0      	movs	r2, #240	@ 0xf0
 8004716:	2100      	movs	r1, #0
 8004718:	20a0      	movs	r0, #160	@ 0xa0
 800471a:	f7fd f8e5 	bl	80018e8 <V_line>
	initPlayer(&p1, 80, 200, 22, 30, 5, 3, 160, 220,18); //80
 800471e:	2312      	movs	r3, #18
 8004720:	9305      	str	r3, [sp, #20]
 8004722:	23dc      	movs	r3, #220	@ 0xdc
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	23a0      	movs	r3, #160	@ 0xa0
 8004728:	9303      	str	r3, [sp, #12]
 800472a:	2303      	movs	r3, #3
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	2305      	movs	r3, #5
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	231e      	movs	r3, #30
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	2316      	movs	r3, #22
 8004738:	22c8      	movs	r2, #200	@ 0xc8
 800473a:	2150      	movs	r1, #80	@ 0x50
 800473c:	485d      	ldr	r0, [pc, #372]	@ (80048b4 <main+0x2fc>)
 800473e:	f7fe ff5f 	bl	8003600 <initPlayer>
	initPlayer(&p2, 240, 200, 22, 30, 5, 3, 300, 220,160); //240
 8004742:	23a0      	movs	r3, #160	@ 0xa0
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	23dc      	movs	r3, #220	@ 0xdc
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800474e:	9303      	str	r3, [sp, #12]
 8004750:	2303      	movs	r3, #3
 8004752:	9302      	str	r3, [sp, #8]
 8004754:	2305      	movs	r3, #5
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	231e      	movs	r3, #30
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2316      	movs	r3, #22
 800475e:	22c8      	movs	r2, #200	@ 0xc8
 8004760:	21f0      	movs	r1, #240	@ 0xf0
 8004762:	4855      	ldr	r0, [pc, #340]	@ (80048b8 <main+0x300>)
 8004764:	f7fe ff4c 	bl	8003600 <initPlayer>
	p1.PlayerNum=1;
 8004768:	4b52      	ldr	r3, [pc, #328]	@ (80048b4 <main+0x2fc>)
 800476a:	2201      	movs	r2, #1
 800476c:	671a      	str	r2, [r3, #112]	@ 0x70
	p2.PlayerNum=2;
 800476e:	4b52      	ldr	r3, [pc, #328]	@ (80048b8 <main+0x300>)
 8004770:	2202      	movs	r2, #2
 8004772:	671a      	str	r2, [r3, #112]	@ 0x70

	if (nivelActual1==NIVEL1){
 8004774:	4b4a      	ldr	r3, [pc, #296]	@ (80048a0 <main+0x2e8>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <main+0x1da>
		//Inicializar enemigo 1
		initEnemy1(&e1_1, 80, 80, 16, 19, 3);}
 800477e:	2303      	movs	r3, #3
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	2313      	movs	r3, #19
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	2310      	movs	r3, #16
 8004788:	2250      	movs	r2, #80	@ 0x50
 800478a:	2150      	movs	r1, #80	@ 0x50
 800478c:	484b      	ldr	r0, [pc, #300]	@ (80048bc <main+0x304>)
 800478e:	f7fd fcad 	bl	80020ec <initEnemy1>
	 if (nivelActual1==NIVEL2){
 8004792:	4b43      	ldr	r3, [pc, #268]	@ (80048a0 <main+0x2e8>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d109      	bne.n	80047b0 <main+0x1f8>
		  initEnemy2(&e2_1, 90, 80, 16, 20, 3);
 800479c:	2303      	movs	r3, #3
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	2314      	movs	r3, #20
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2310      	movs	r3, #16
 80047a6:	2250      	movs	r2, #80	@ 0x50
 80047a8:	215a      	movs	r1, #90	@ 0x5a
 80047aa:	4847      	ldr	r0, [pc, #284]	@ (80048c8 <main+0x310>)
 80047ac:	f7fe f8c2 	bl	8002934 <initEnemy2>
		  }
	  if (nivelActual1==NIVEL3){
 80047b0:	4b3b      	ldr	r3, [pc, #236]	@ (80048a0 <main+0x2e8>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d10b      	bne.n	80047d2 <main+0x21a>
		  initEnemy3(&e3_1, 80, 30, 15, 15, 15, &p1);}
 80047ba:	4b3e      	ldr	r3, [pc, #248]	@ (80048b4 <main+0x2fc>)
 80047bc:	9302      	str	r3, [sp, #8]
 80047be:	230f      	movs	r3, #15
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	230f      	movs	r3, #15
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	230f      	movs	r3, #15
 80047c8:	221e      	movs	r2, #30
 80047ca:	2150      	movs	r1, #80	@ 0x50
 80047cc:	483f      	ldr	r0, [pc, #252]	@ (80048cc <main+0x314>)
 80047ce:	f7fe fbf9 	bl	8002fc4 <initEnemy3>
	  if (nivelActual2==NIVEL1){
 80047d2:	4b34      	ldr	r3, [pc, #208]	@ (80048a4 <main+0x2ec>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <main+0x238>
		//Inicializar enemigo 1
		initEnemy1(&e1_4, 240, 120, 16, 19, 3);
 80047dc:	2303      	movs	r3, #3
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	2313      	movs	r3, #19
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2310      	movs	r3, #16
 80047e6:	2278      	movs	r2, #120	@ 0x78
 80047e8:	21f0      	movs	r1, #240	@ 0xf0
 80047ea:	4839      	ldr	r0, [pc, #228]	@ (80048d0 <main+0x318>)
 80047ec:	f7fd fc7e 	bl	80020ec <initEnemy1>
	    }
	  if (nivelActual2==NIVEL2){
 80047f0:	4b2c      	ldr	r3, [pc, #176]	@ (80048a4 <main+0x2ec>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d109      	bne.n	800480e <main+0x256>
	  	  initEnemy2(&e2_2, 230, 80, 16, 20, 3);
 80047fa:	2303      	movs	r3, #3
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	2314      	movs	r3, #20
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2310      	movs	r3, #16
 8004804:	2250      	movs	r2, #80	@ 0x50
 8004806:	21e6      	movs	r1, #230	@ 0xe6
 8004808:	4832      	ldr	r0, [pc, #200]	@ (80048d4 <main+0x31c>)
 800480a:	f7fe f893 	bl	8002934 <initEnemy2>
	  }
	  if (nivelActual2==NIVEL3){
 800480e:	4b25      	ldr	r3, [pc, #148]	@ (80048a4 <main+0x2ec>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d10b      	bne.n	8004830 <main+0x278>
		  initEnemy3(&e3_2, 240, 30, 15, 15, 15, &p2);}
 8004818:	4b27      	ldr	r3, [pc, #156]	@ (80048b8 <main+0x300>)
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	230f      	movs	r3, #15
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	230f      	movs	r3, #15
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	230f      	movs	r3, #15
 8004826:	221e      	movs	r2, #30
 8004828:	21f0      	movs	r1, #240	@ 0xf0
 800482a:	482b      	ldr	r0, [pc, #172]	@ (80048d8 <main+0x320>)
 800482c:	f7fe fbca 	bl	8002fc4 <initEnemy3>
	  HitboxPlayer(&p1);
 8004830:	4820      	ldr	r0, [pc, #128]	@ (80048b4 <main+0x2fc>)
 8004832:	f7ff f831 	bl	8003898 <HitboxPlayer>
	  HitboxPlayer(&p2);
 8004836:	4820      	ldr	r0, [pc, #128]	@ (80048b8 <main+0x300>)
 8004838:	f7ff f82e 	bl	8003898 <HitboxPlayer>
	}

  // Iniciar PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800483c:	210c      	movs	r1, #12
 800483e:	4827      	ldr	r0, [pc, #156]	@ (80048dc <main+0x324>)
 8004840:	f003 f9d4 	bl	8007bec <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (repintarFondo) {
 8004844:	4b26      	ldr	r3, [pc, #152]	@ (80048e0 <main+0x328>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d069      	beq.n	8004920 <main+0x368>
			switch (estadoActual) {
 800484c:	4b13      	ldr	r3, [pc, #76]	@ (800489c <main+0x2e4>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b05      	cmp	r3, #5
 8004854:	d861      	bhi.n	800491a <main+0x362>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <main+0x2a4>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	08004875 	.word	0x08004875
 8004860:	0800487d 	.word	0x0800487d
 8004864:	080048ed 	.word	0x080048ed
 8004868:	0800490d 	.word	0x0800490d
 800486c:	0800491b 	.word	0x0800491b
 8004870:	0800491b 	.word	0x0800491b
				case MENU:
					CargarMultiplesBitmaps("mp");
 8004874:	4806      	ldr	r0, [pc, #24]	@ (8004890 <main+0x2d8>)
 8004876:	f7ff fe6b 	bl	8004550 <CargarMultiplesBitmaps>
					break;
 800487a:	e04e      	b.n	800491a <main+0x362>
				case SOLO:
					CargarMultiplesBitmaps("fb");
 800487c:	4819      	ldr	r0, [pc, #100]	@ (80048e4 <main+0x32c>)
 800487e:	f7ff fe67 	bl	8004550 <CargarMultiplesBitmaps>
					if (IniciarP1==1){
 8004882:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <main+0x330>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d144      	bne.n	8004914 <main+0x35c>
					initLevelSolo();}
 800488a:	f7ff fc9d 	bl	80041c8 <initLevelSolo>
					break;
 800488e:	e041      	b.n	8004914 <main+0x35c>
 8004890:	0800d160 	.word	0x0800d160
 8004894:	2001c778 	.word	0x2001c778
 8004898:	20017c30 	.word	0x20017c30
 800489c:	20016a78 	.word	0x20016a78
 80048a0:	2001cae1 	.word	0x2001cae1
 80048a4:	2001cae2 	.word	0x2001cae2
 80048a8:	2001cadc 	.word	0x2001cadc
 80048ac:	2001cadd 	.word	0x2001cadd
 80048b0:	2001cade 	.word	0x2001cade
 80048b4:	2001c784 	.word	0x2001c784
 80048b8:	2001c7f8 	.word	0x2001c7f8
 80048bc:	2001c86c 	.word	0x2001c86c
 80048c0:	2001c8a0 	.word	0x2001c8a0
 80048c4:	2001c8d4 	.word	0x2001c8d4
 80048c8:	2001c9a4 	.word	0x2001c9a4
 80048cc:	2001ca2c 	.word	0x2001ca2c
 80048d0:	2001c908 	.word	0x2001c908
 80048d4:	2001c9e8 	.word	0x2001c9e8
 80048d8:	2001ca84 	.word	0x2001ca84
 80048dc:	20017ba0 	.word	0x20017ba0
 80048e0:	2001caec 	.word	0x2001caec
 80048e4:	0800d164 	.word	0x0800d164
 80048e8:	2001caee 	.word	0x2001caee
				case DUO:
					CargarMultiplesBitmaps("fb");
 80048ec:	489d      	ldr	r0, [pc, #628]	@ (8004b64 <main+0x5ac>)
 80048ee:	f7ff fe2f 	bl	8004550 <CargarMultiplesBitmaps>
					if (IniciarP1==1){
 80048f2:	4b9d      	ldr	r3, [pc, #628]	@ (8004b68 <main+0x5b0>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <main+0x346>
						initLevelP1();}
 80048fa:	f7ff fd15 	bl	8004328 <initLevelP1>
					if (IniciarP2==1){
 80048fe:	4b9b      	ldr	r3, [pc, #620]	@ (8004b6c <main+0x5b4>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d108      	bne.n	8004918 <main+0x360>
						initLevelP2();}
 8004906:	f7ff fd97 	bl	8004438 <initLevelP2>
					break;
 800490a:	e005      	b.n	8004918 <main+0x360>
				case PAUSA:
					CargarMultiplesBitmaps("pausa");
 800490c:	4898      	ldr	r0, [pc, #608]	@ (8004b70 <main+0x5b8>)
 800490e:	f7ff fe1f 	bl	8004550 <CargarMultiplesBitmaps>
					break;
 8004912:	e002      	b.n	800491a <main+0x362>
					break;
 8004914:	bf00      	nop
 8004916:	e000      	b.n	800491a <main+0x362>
					break;
 8004918:	bf00      	nop
					break;
				case WIN2:
					break;
				// Agrega más casos según tus estados.
			}
			repintarFondo = 0; // Fondo pintado, no es necesario repintar.
 800491a:	4b96      	ldr	r3, [pc, #600]	@ (8004b74 <main+0x5bc>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
		}
		if (pintarFondoPausa == 1) {
 8004920:	4b95      	ldr	r3, [pc, #596]	@ (8004b78 <main+0x5c0>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d105      	bne.n	8004934 <main+0x37c>
			// Pinta el fondo de PAUSA solo una vez
			CargarMultiplesBitmaps("pausa");  // Función que pinta el fondo de PAUSA
 8004928:	4891      	ldr	r0, [pc, #580]	@ (8004b70 <main+0x5b8>)
 800492a:	f7ff fe11 	bl	8004550 <CargarMultiplesBitmaps>
			pintarFondoPausa = 0;  // Desactiva la bandera
 800492e:	4b92      	ldr	r3, [pc, #584]	@ (8004b78 <main+0x5c0>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
		}
		switch(estadoActual){
 8004934:	4b91      	ldr	r3, [pc, #580]	@ (8004b7c <main+0x5c4>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b05      	cmp	r3, #5
 800493c:	f200 8210 	bhi.w	8004d60 <main+0x7a8>
 8004940:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <main+0x390>)
 8004942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004946:	bf00      	nop
 8004948:	08004d61 	.word	0x08004d61
 800494c:	08004961 	.word	0x08004961
 8004950:	08004ad9 	.word	0x08004ad9
 8004954:	08004d61 	.word	0x08004d61
 8004958:	08004d51 	.word	0x08004d51
 800495c:	08004d59 	.word	0x08004d59
		case MENU:
			break;
		case SOLO:{
			if (nivelActual1==NIVEL1){
 8004960:	4b87      	ldr	r3, [pc, #540]	@ (8004b80 <main+0x5c8>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d158      	bne.n	8004a1c <main+0x464>
					if(e1_1.isAlive==1){
 800496a:	4b86      	ldr	r3, [pc, #536]	@ (8004b84 <main+0x5cc>)
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <main+0x3c6>
						animation_e1(&e1_1);
 8004972:	4884      	ldr	r0, [pc, #528]	@ (8004b84 <main+0x5cc>)
 8004974:	f7fd faa0 	bl	8001eb8 <animation_e1>
						animation_e1_control(&e1_1);}
 8004978:	4882      	ldr	r0, [pc, #520]	@ (8004b84 <main+0x5cc>)
 800497a:	f7fd fa49 	bl	8001e10 <animation_e1_control>

					if(e1_2.isAlive==1){
 800497e:	4b82      	ldr	r3, [pc, #520]	@ (8004b88 <main+0x5d0>)
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <main+0x3da>
						animation_e1(&e1_2);
 8004986:	4880      	ldr	r0, [pc, #512]	@ (8004b88 <main+0x5d0>)
 8004988:	f7fd fa96 	bl	8001eb8 <animation_e1>
						animation_e1_control(&e1_2);}
 800498c:	487e      	ldr	r0, [pc, #504]	@ (8004b88 <main+0x5d0>)
 800498e:	f7fd fa3f 	bl	8001e10 <animation_e1_control>

					if(e1_3.isAlive==1){
 8004992:	4b7e      	ldr	r3, [pc, #504]	@ (8004b8c <main+0x5d4>)
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d105      	bne.n	80049a6 <main+0x3ee>
						animation_e1(&e1_3);
 800499a:	487c      	ldr	r0, [pc, #496]	@ (8004b8c <main+0x5d4>)
 800499c:	f7fd fa8c 	bl	8001eb8 <animation_e1>
						animation_e1_control(&e1_3);}
 80049a0:	487a      	ldr	r0, [pc, #488]	@ (8004b8c <main+0x5d4>)
 80049a2:	f7fd fa35 	bl	8001e10 <animation_e1_control>

					animation_e1_die(&e1_1);
 80049a6:	4877      	ldr	r0, [pc, #476]	@ (8004b84 <main+0x5cc>)
 80049a8:	f7fd fb4e 	bl	8002048 <animation_e1_die>
					animation_e1_die(&e1_2);
 80049ac:	4876      	ldr	r0, [pc, #472]	@ (8004b88 <main+0x5d0>)
 80049ae:	f7fd fb4b 	bl	8002048 <animation_e1_die>
					animation_e1_die(&e1_3);
 80049b2:	4876      	ldr	r0, [pc, #472]	@ (8004b8c <main+0x5d4>)
 80049b4:	f7fd fb48 	bl	8002048 <animation_e1_die>
					if (e1_1.isAlive==0&&e1_2.isAlive==0&&e1_3.isAlive==0 && e1_1.animationDie>=11 && e1_2.animationDie>=11 && e1_3.animationDie>=11){
 80049b8:	4b72      	ldr	r3, [pc, #456]	@ (8004b84 <main+0x5cc>)
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d12d      	bne.n	8004a1c <main+0x464>
 80049c0:	4b71      	ldr	r3, [pc, #452]	@ (8004b88 <main+0x5d0>)
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d129      	bne.n	8004a1c <main+0x464>
 80049c8:	4b70      	ldr	r3, [pc, #448]	@ (8004b8c <main+0x5d4>)
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d125      	bne.n	8004a1c <main+0x464>
 80049d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b84 <main+0x5cc>)
 80049d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80049d6:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80049da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e2:	db1b      	blt.n	8004a1c <main+0x464>
 80049e4:	4b68      	ldr	r3, [pc, #416]	@ (8004b88 <main+0x5d0>)
 80049e6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80049ea:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80049ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	db11      	blt.n	8004a1c <main+0x464>
 80049f8:	4b64      	ldr	r3, [pc, #400]	@ (8004b8c <main+0x5d4>)
 80049fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80049fe:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	db07      	blt.n	8004a1c <main+0x464>
						nivelActual1=NIVEL2;
 8004a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004b80 <main+0x5c8>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
						IniciarLevel=1;
 8004a12:	4b5f      	ldr	r3, [pc, #380]	@ (8004b90 <main+0x5d8>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
						initLevelSolo();
 8004a18:	f7ff fbd6 	bl	80041c8 <initLevelSolo>
					}
				}

			if (nivelActual1==NIVEL2){
 8004a1c:	4b58      	ldr	r3, [pc, #352]	@ (8004b80 <main+0x5c8>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d130      	bne.n	8004a88 <main+0x4d0>
				if (e2_1.isAlive==1){
 8004a26:	4b5b      	ldr	r3, [pc, #364]	@ (8004b94 <main+0x5dc>)
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d113      	bne.n	8004a56 <main+0x49e>
					moveE2(&e2_1, &p1);
 8004a2e:	495a      	ldr	r1, [pc, #360]	@ (8004b98 <main+0x5e0>)
 8004a30:	4858      	ldr	r0, [pc, #352]	@ (8004b94 <main+0x5dc>)
 8004a32:	f7fd ffb9 	bl	80029a8 <moveE2>
					e2_1.delay+=1; //1
 8004a36:	4b57      	ldr	r3, [pc, #348]	@ (8004b94 <main+0x5dc>)
 8004a38:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004a3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a44:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <main+0x5dc>)
 8004a46:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
					E2_Appear(&e2_1);
 8004a4a:	4852      	ldr	r0, [pc, #328]	@ (8004b94 <main+0x5dc>)
 8004a4c:	f7fe f8c4 	bl	8002bd8 <E2_Appear>
					E2_Hurt(&e2_1);
 8004a50:	4850      	ldr	r0, [pc, #320]	@ (8004b94 <main+0x5dc>)
 8004a52:	f7fe f909 	bl	8002c68 <E2_Hurt>

				}
				E2_Die(&e2_1);
 8004a56:	484f      	ldr	r0, [pc, #316]	@ (8004b94 <main+0x5dc>)
 8004a58:	f7fe f956 	bl	8002d08 <E2_Die>
				if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8004a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004b94 <main+0x5dc>)
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <main+0x4d0>
 8004a64:	4b4b      	ldr	r3, [pc, #300]	@ (8004b94 <main+0x5dc>)
 8004a66:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004a6a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	db07      	blt.n	8004a88 <main+0x4d0>
					nivelActual1=NIVEL3;
 8004a78:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <main+0x5c8>)
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004a7e:	4b44      	ldr	r3, [pc, #272]	@ (8004b90 <main+0x5d8>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
					initLevelSolo();
 8004a84:	f7ff fba0 	bl	80041c8 <initLevelSolo>
				}
			}

			if (nivelActual1==NIVEL3){
 8004a88:	4b3d      	ldr	r3, [pc, #244]	@ (8004b80 <main+0x5c8>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d10f      	bne.n	8004ab2 <main+0x4fa>
				E3_MoveX(&e3_1);
 8004a92:	4842      	ldr	r0, [pc, #264]	@ (8004b9c <main+0x5e4>)
 8004a94:	f7fe fd3e 	bl	8003514 <E3_MoveX>
				E3_Eye(&e3_1);
 8004a98:	4840      	ldr	r0, [pc, #256]	@ (8004b9c <main+0x5e4>)
 8004a9a:	f7fe fadd 	bl	8003058 <E3_Eye>
				E3_FireMove(&e3_1,&p1);
 8004a9e:	493e      	ldr	r1, [pc, #248]	@ (8004b98 <main+0x5e0>)
 8004aa0:	483e      	ldr	r0, [pc, #248]	@ (8004b9c <main+0x5e4>)
 8004aa2:	f7fe fb53 	bl	800314c <E3_FireMove>
				E3_Hitbox(&e3_1);
 8004aa6:	483d      	ldr	r0, [pc, #244]	@ (8004b9c <main+0x5e4>)
 8004aa8:	f7fe fc7e 	bl	80033a8 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8004aac:	483b      	ldr	r0, [pc, #236]	@ (8004b9c <main+0x5e4>)
 8004aae:	f7fe fc43 	bl	8003338 <E3_FireAnimation>
			}

			PlayerAttackAnimation(&p1);
 8004ab2:	4839      	ldr	r0, [pc, #228]	@ (8004b98 <main+0x5e0>)
 8004ab4:	f7ff f908 	bl	8003cc8 <PlayerAttackAnimation>
			PlayerAttackSound(&p1);
 8004ab8:	4837      	ldr	r0, [pc, #220]	@ (8004b98 <main+0x5e0>)
 8004aba:	f7ff f9a7 	bl	8003e0c <PlayerAttackSound>
			PlayerDamageAnimation(&p1);
 8004abe:	4836      	ldr	r0, [pc, #216]	@ (8004b98 <main+0x5e0>)
 8004ac0:	f7ff f9fe 	bl	8003ec0 <PlayerDamageAnimation>
			PlayerDamageSound(&p1);
 8004ac4:	4834      	ldr	r0, [pc, #208]	@ (8004b98 <main+0x5e0>)
 8004ac6:	f7ff fa9d 	bl	8004004 <PlayerDamageSound>
			PlayerDieAnimation(&p1);
 8004aca:	4833      	ldr	r0, [pc, #204]	@ (8004b98 <main+0x5e0>)
 8004acc:	f7ff fad8 	bl	8004080 <PlayerDieAnimation>
			PlayerDieSound(&p1);
 8004ad0:	4831      	ldr	r0, [pc, #196]	@ (8004b98 <main+0x5e0>)
 8004ad2:	f7ff fb33 	bl	800413c <PlayerDieSound>
			break;}
 8004ad6:	e144      	b.n	8004d62 <main+0x7aa>


		case DUO:{
			if (nivelActual1==NIVEL1){
 8004ad8:	4b29      	ldr	r3, [pc, #164]	@ (8004b80 <main+0x5c8>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d122      	bne.n	8004b28 <main+0x570>
				if(e1_1.isAlive==1){
 8004ae2:	4b28      	ldr	r3, [pc, #160]	@ (8004b84 <main+0x5cc>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <main+0x53e>
					animation_e1(&e1_1);
 8004aea:	4826      	ldr	r0, [pc, #152]	@ (8004b84 <main+0x5cc>)
 8004aec:	f7fd f9e4 	bl	8001eb8 <animation_e1>
					animation_e1_control(&e1_1);}
 8004af0:	4824      	ldr	r0, [pc, #144]	@ (8004b84 <main+0x5cc>)
 8004af2:	f7fd f98d 	bl	8001e10 <animation_e1_control>
				animation_e1_die(&e1_1);
 8004af6:	4823      	ldr	r0, [pc, #140]	@ (8004b84 <main+0x5cc>)
 8004af8:	f7fd faa6 	bl	8002048 <animation_e1_die>

				if ( e1_1.isAlive==0&& e1_1.animationDie>=11 ){
 8004afc:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <main+0x5cc>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d111      	bne.n	8004b28 <main+0x570>
 8004b04:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <main+0x5cc>)
 8004b06:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004b0a:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	db07      	blt.n	8004b28 <main+0x570>
					nivelActual1=NIVEL2;
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <main+0x5c8>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004b90 <main+0x5d8>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
					initLevelP1();
 8004b24:	f7ff fc00 	bl	8004328 <initLevelP1>
				}
			}

			if (nivelActual1==NIVEL2){
 8004b28:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <main+0x5c8>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d163      	bne.n	8004bfa <main+0x642>
				if (e2_1.isAlive==1){
 8004b32:	4b18      	ldr	r3, [pc, #96]	@ (8004b94 <main+0x5dc>)
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d146      	bne.n	8004bc8 <main+0x610>
					moveE2(&e2_1, &p1);
 8004b3a:	4917      	ldr	r1, [pc, #92]	@ (8004b98 <main+0x5e0>)
 8004b3c:	4815      	ldr	r0, [pc, #84]	@ (8004b94 <main+0x5dc>)
 8004b3e:	f7fd ff33 	bl	80029a8 <moveE2>
					if (nivelActual2!=NIVEL2){
 8004b42:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <main+0x5e8>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d02d      	beq.n	8004ba8 <main+0x5f0>
					e2_1.delay+=1000;}//0.5
 8004b4c:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <main+0x5dc>)
 8004b4e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004b52:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004ba4 <main+0x5ec>
 8004b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <main+0x5dc>)
 8004b5c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8004b60:	e02c      	b.n	8004bbc <main+0x604>
 8004b62:	bf00      	nop
 8004b64:	0800d164 	.word	0x0800d164
 8004b68:	2001caee 	.word	0x2001caee
 8004b6c:	2001caef 	.word	0x2001caef
 8004b70:	0800d168 	.word	0x0800d168
 8004b74:	2001caec 	.word	0x2001caec
 8004b78:	2001caed 	.word	0x2001caed
 8004b7c:	20016a78 	.word	0x20016a78
 8004b80:	2001cae1 	.word	0x2001cae1
 8004b84:	2001c86c 	.word	0x2001c86c
 8004b88:	2001c8a0 	.word	0x2001c8a0
 8004b8c:	2001c8d4 	.word	0x2001c8d4
 8004b90:	2001cae4 	.word	0x2001cae4
 8004b94:	2001c9a4 	.word	0x2001c9a4
 8004b98:	2001c784 	.word	0x2001c784
 8004b9c:	2001ca2c 	.word	0x2001ca2c
 8004ba0:	2001cae2 	.word	0x2001cae2
 8004ba4:	447a0000 	.word	0x447a0000
					else{
						e2_1.delay+=1;
 8004ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8004d64 <main+0x7ac>)
 8004baa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8004d64 <main+0x7ac>)
 8004bb8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
					}
					E2_Appear(&e2_1);
 8004bbc:	4869      	ldr	r0, [pc, #420]	@ (8004d64 <main+0x7ac>)
 8004bbe:	f7fe f80b 	bl	8002bd8 <E2_Appear>
					E2_Hurt(&e2_1);
 8004bc2:	4868      	ldr	r0, [pc, #416]	@ (8004d64 <main+0x7ac>)
 8004bc4:	f7fe f850 	bl	8002c68 <E2_Hurt>
				}
				E2_Die(&e2_1);
 8004bc8:	4866      	ldr	r0, [pc, #408]	@ (8004d64 <main+0x7ac>)
 8004bca:	f7fe f89d 	bl	8002d08 <E2_Die>
				if (e2_1.isAlive==0&&e2_1.animationDie>=6){
 8004bce:	4b65      	ldr	r3, [pc, #404]	@ (8004d64 <main+0x7ac>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d111      	bne.n	8004bfa <main+0x642>
 8004bd6:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <main+0x7ac>)
 8004bd8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004bdc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	db07      	blt.n	8004bfa <main+0x642>
					nivelActual1=NIVEL3;
 8004bea:	4b5f      	ldr	r3, [pc, #380]	@ (8004d68 <main+0x7b0>)
 8004bec:	2202      	movs	r2, #2
 8004bee:	701a      	strb	r2, [r3, #0]
					IniciarLevel=1;
 8004bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d6c <main+0x7b4>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
					initLevelP1();
 8004bf6:	f7ff fb97 	bl	8004328 <initLevelP1>
				}
			}
			if (nivelActual1==NIVEL3){
 8004bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <main+0x7b0>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d10f      	bne.n	8004c24 <main+0x66c>
				E3_MoveX(&e3_1);
 8004c04:	485a      	ldr	r0, [pc, #360]	@ (8004d70 <main+0x7b8>)
 8004c06:	f7fe fc85 	bl	8003514 <E3_MoveX>
				E3_Eye(&e3_1);
 8004c0a:	4859      	ldr	r0, [pc, #356]	@ (8004d70 <main+0x7b8>)
 8004c0c:	f7fe fa24 	bl	8003058 <E3_Eye>
				E3_FireMove(&e3_1,&p1);
 8004c10:	4958      	ldr	r1, [pc, #352]	@ (8004d74 <main+0x7bc>)
 8004c12:	4857      	ldr	r0, [pc, #348]	@ (8004d70 <main+0x7b8>)
 8004c14:	f7fe fa9a 	bl	800314c <E3_FireMove>
				E3_Hitbox(&e3_1);
 8004c18:	4855      	ldr	r0, [pc, #340]	@ (8004d70 <main+0x7b8>)
 8004c1a:	f7fe fbc5 	bl	80033a8 <E3_Hitbox>
				E3_FireAnimation(&e3_1);
 8004c1e:	4854      	ldr	r0, [pc, #336]	@ (8004d70 <main+0x7b8>)
 8004c20:	f7fe fb8a 	bl	8003338 <E3_FireAnimation>
			}

			if (nivelActual2==NIVEL1){
 8004c24:	4b54      	ldr	r3, [pc, #336]	@ (8004d78 <main+0x7c0>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d122      	bne.n	8004c74 <main+0x6bc>
				if(e1_4.isAlive==1){
 8004c2e:	4b53      	ldr	r3, [pc, #332]	@ (8004d7c <main+0x7c4>)
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <main+0x68a>
					animation_e1(&e1_4);
 8004c36:	4851      	ldr	r0, [pc, #324]	@ (8004d7c <main+0x7c4>)
 8004c38:	f7fd f93e 	bl	8001eb8 <animation_e1>
					animation_e1_control(&e1_4);}
 8004c3c:	484f      	ldr	r0, [pc, #316]	@ (8004d7c <main+0x7c4>)
 8004c3e:	f7fd f8e7 	bl	8001e10 <animation_e1_control>
				animation_e1_die(&e1_4);
 8004c42:	484e      	ldr	r0, [pc, #312]	@ (8004d7c <main+0x7c4>)
 8004c44:	f7fd fa00 	bl	8002048 <animation_e1_die>

				if (e1_4.isAlive==0 && e1_4.animationDie>=11){
 8004c48:	4b4c      	ldr	r3, [pc, #304]	@ (8004d7c <main+0x7c4>)
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d111      	bne.n	8004c74 <main+0x6bc>
 8004c50:	4b4a      	ldr	r3, [pc, #296]	@ (8004d7c <main+0x7c4>)
 8004c52:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004c56:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8004c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	db07      	blt.n	8004c74 <main+0x6bc>
					nivelActual2=NIVEL2;
 8004c64:	4b44      	ldr	r3, [pc, #272]	@ (8004d78 <main+0x7c0>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
					IniciarLevel2=1;
 8004c6a:	4b45      	ldr	r3, [pc, #276]	@ (8004d80 <main+0x7c8>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
					initLevelP2();
 8004c70:	f7ff fbe2 	bl	8004438 <initLevelP2>
				}
			}

			if (nivelActual2==NIVEL2){
 8004c74:	4b40      	ldr	r3, [pc, #256]	@ (8004d78 <main+0x7c0>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d140      	bne.n	8004d00 <main+0x748>
				if (e2_2.isAlive==1){
 8004c7e:	4b41      	ldr	r3, [pc, #260]	@ (8004d84 <main+0x7cc>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d123      	bne.n	8004cce <main+0x716>
					moveE2(&e2_2, &p2);
 8004c86:	4940      	ldr	r1, [pc, #256]	@ (8004d88 <main+0x7d0>)
 8004c88:	483e      	ldr	r0, [pc, #248]	@ (8004d84 <main+0x7cc>)
 8004c8a:	f7fd fe8d 	bl	80029a8 <moveE2>
					if (nivelActual1!=NIVEL2){
 8004c8e:	4b36      	ldr	r3, [pc, #216]	@ (8004d68 <main+0x7b0>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d00a      	beq.n	8004cae <main+0x6f6>
						e2_2.delay+=1000;
 8004c98:	4b3a      	ldr	r3, [pc, #232]	@ (8004d84 <main+0x7cc>)
 8004c9a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004c9e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004d8c <main+0x7d4>
 8004ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ca6:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <main+0x7cc>)
 8004ca8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8004cac:	e009      	b.n	8004cc2 <main+0x70a>
					}else{
					e2_2.delay+=1;}
 8004cae:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <main+0x7cc>)
 8004cb0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cbc:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <main+0x7cc>)
 8004cbe:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
					E2_Appear(&e2_2);
 8004cc2:	4830      	ldr	r0, [pc, #192]	@ (8004d84 <main+0x7cc>)
 8004cc4:	f7fd ff88 	bl	8002bd8 <E2_Appear>
					E2_Hurt(&e2_2);
 8004cc8:	482e      	ldr	r0, [pc, #184]	@ (8004d84 <main+0x7cc>)
 8004cca:	f7fd ffcd 	bl	8002c68 <E2_Hurt>
				}
				E2_Die(&e2_2);
 8004cce:	482d      	ldr	r0, [pc, #180]	@ (8004d84 <main+0x7cc>)
 8004cd0:	f7fe f81a 	bl	8002d08 <E2_Die>
				if (e2_2.isAlive==0&&e2_2.animationDie>=6){
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d84 <main+0x7cc>)
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d111      	bne.n	8004d00 <main+0x748>
 8004cdc:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <main+0x7cc>)
 8004cde:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004ce2:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8004ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cee:	db07      	blt.n	8004d00 <main+0x748>
					nivelActual2=NIVEL3;
 8004cf0:	4b21      	ldr	r3, [pc, #132]	@ (8004d78 <main+0x7c0>)
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
					IniciarLevel2=1;
 8004cf6:	4b22      	ldr	r3, [pc, #136]	@ (8004d80 <main+0x7c8>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
					initLevelP2();
 8004cfc:	f7ff fb9c 	bl	8004438 <initLevelP2>
				}
			}

			if (nivelActual2==NIVEL3){
 8004d00:	4b1d      	ldr	r3, [pc, #116]	@ (8004d78 <main+0x7c0>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d10f      	bne.n	8004d2a <main+0x772>
				E3_MoveX(&e3_2);
 8004d0a:	4821      	ldr	r0, [pc, #132]	@ (8004d90 <main+0x7d8>)
 8004d0c:	f7fe fc02 	bl	8003514 <E3_MoveX>
				E3_Eye(&e3_2);
 8004d10:	481f      	ldr	r0, [pc, #124]	@ (8004d90 <main+0x7d8>)
 8004d12:	f7fe f9a1 	bl	8003058 <E3_Eye>
				E3_FireMove(&e3_2,&p2);
 8004d16:	491c      	ldr	r1, [pc, #112]	@ (8004d88 <main+0x7d0>)
 8004d18:	481d      	ldr	r0, [pc, #116]	@ (8004d90 <main+0x7d8>)
 8004d1a:	f7fe fa17 	bl	800314c <E3_FireMove>
				E3_Hitbox(&e3_2);
 8004d1e:	481c      	ldr	r0, [pc, #112]	@ (8004d90 <main+0x7d8>)
 8004d20:	f7fe fb42 	bl	80033a8 <E3_Hitbox>
				E3_FireAnimation(&e3_2);
 8004d24:	481a      	ldr	r0, [pc, #104]	@ (8004d90 <main+0x7d8>)
 8004d26:	f7fe fb07 	bl	8003338 <E3_FireAnimation>
			}


			PlayerAttackAnimation(&p1);
 8004d2a:	4812      	ldr	r0, [pc, #72]	@ (8004d74 <main+0x7bc>)
 8004d2c:	f7fe ffcc 	bl	8003cc8 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p1);
 8004d30:	4810      	ldr	r0, [pc, #64]	@ (8004d74 <main+0x7bc>)
 8004d32:	f7ff f8c5 	bl	8003ec0 <PlayerDamageAnimation>
			PlayerDieAnimation(&p1);
 8004d36:	480f      	ldr	r0, [pc, #60]	@ (8004d74 <main+0x7bc>)
 8004d38:	f7ff f9a2 	bl	8004080 <PlayerDieAnimation>

			PlayerAttackAnimation(&p2);
 8004d3c:	4812      	ldr	r0, [pc, #72]	@ (8004d88 <main+0x7d0>)
 8004d3e:	f7fe ffc3 	bl	8003cc8 <PlayerAttackAnimation>
			PlayerDamageAnimation(&p2);
 8004d42:	4811      	ldr	r0, [pc, #68]	@ (8004d88 <main+0x7d0>)
 8004d44:	f7ff f8bc 	bl	8003ec0 <PlayerDamageAnimation>
			PlayerDieAnimation(&p2);
 8004d48:	480f      	ldr	r0, [pc, #60]	@ (8004d88 <main+0x7d0>)
 8004d4a:	f7ff f999 	bl	8004080 <PlayerDieAnimation>
			break;}
 8004d4e:	e008      	b.n	8004d62 <main+0x7aa>
		case PAUSA:
			//LCD_Bitmap(0, 0, 320, 240, pausa_menu);
			break;
		case WIN1:
			CargarMultiplesBitmaps("p1w");
 8004d50:	4810      	ldr	r0, [pc, #64]	@ (8004d94 <main+0x7dc>)
 8004d52:	f7ff fbfd 	bl	8004550 <CargarMultiplesBitmaps>
			break;
 8004d56:	e004      	b.n	8004d62 <main+0x7aa>
		case WIN2:
			CargarMultiplesBitmaps("p2w");
 8004d58:	480f      	ldr	r0, [pc, #60]	@ (8004d98 <main+0x7e0>)
 8004d5a:	f7ff fbf9 	bl	8004550 <CargarMultiplesBitmaps>
			break;
 8004d5e:	e000      	b.n	8004d62 <main+0x7aa>
		default:
			break;
 8004d60:	bf00      	nop
		if (repintarFondo) {
 8004d62:	e56f      	b.n	8004844 <main+0x28c>
 8004d64:	2001c9a4 	.word	0x2001c9a4
 8004d68:	2001cae1 	.word	0x2001cae1
 8004d6c:	2001cae4 	.word	0x2001cae4
 8004d70:	2001ca2c 	.word	0x2001ca2c
 8004d74:	2001c784 	.word	0x2001c784
 8004d78:	2001cae2 	.word	0x2001cae2
 8004d7c:	2001c908 	.word	0x2001c908
 8004d80:	2001cae8 	.word	0x2001cae8
 8004d84:	2001c9e8 	.word	0x2001c9e8
 8004d88:	2001c7f8 	.word	0x2001c7f8
 8004d8c:	447a0000 	.word	0x447a0000
 8004d90:	2001ca84 	.word	0x2001ca84
 8004d94:	0800d170 	.word	0x0800d170
 8004d98:	0800d174 	.word	0x0800d174

08004d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b094      	sub	sp, #80	@ 0x50
 8004da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004da2:	f107 031c 	add.w	r3, r7, #28
 8004da6:	2234      	movs	r2, #52	@ 0x34
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f007 fcfe 	bl	800c7ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <SystemClock_Config+0xd0>)
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <SystemClock_Config+0xd0>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dd0:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <SystemClock_Config+0xd0>)
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4b23      	ldr	r3, [pc, #140]	@ (8004e70 <SystemClock_Config+0xd4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004de8:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <SystemClock_Config+0xd4>)
 8004dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <SystemClock_Config+0xd4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e00:	2301      	movs	r3, #1
 8004e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e04:	2310      	movs	r3, #16
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e10:	2308      	movs	r3, #8
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004e14:	2350      	movs	r3, #80	@ 0x50
 8004e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004e20:	2302      	movs	r3, #2
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 ff41 	bl	8006cb0 <HAL_RCC_OscConfig>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004e34:	f000 fe38 	bl	8005aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e38:	230f      	movs	r3, #15
 8004e3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fc67 	bl	8006728 <HAL_RCC_ClockConfig>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004e60:	f000 fe22 	bl	8005aa8 <Error_Handler>
  }
}
 8004e64:	bf00      	nop
 8004e66:	3750      	adds	r7, #80	@ 0x50
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40007000 	.word	0x40007000

08004e74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e78:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004e7a:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <MX_SPI1_Init+0x68>)
 8004e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e7e:	4b16      	ldr	r3, [pc, #88]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004e80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e86:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e92:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb8:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ebe:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004ec0:	220a      	movs	r2, #10
 8004ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ec4:	4804      	ldr	r0, [pc, #16]	@ (8004ed8 <MX_SPI1_Init+0x64>)
 8004ec6:	f002 f991 	bl	80071ec <HAL_SPI_Init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004ed0:	f000 fdea 	bl	8005aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20016b10 	.word	0x20016b10
 8004edc:	40013000 	.word	0x40013000

08004ee0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08e      	sub	sp, #56	@ 0x38
 8004ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
 8004ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ef4:	f107 0320 	add.w	r3, r7, #32
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
 8004f0c:	615a      	str	r2, [r3, #20]
 8004f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f10:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8004f18:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f1a:	224f      	movs	r2, #79	@ 0x4f
 8004f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f1e:	4b29      	ldr	r3, [pc, #164]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f26:	4a28      	ldr	r2, [pc, #160]	@ (8004fc8 <MX_TIM2_Init+0xe8>)
 8004f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f2a:	4b26      	ldr	r3, [pc, #152]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f30:	4b24      	ldr	r3, [pc, #144]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f36:	4823      	ldr	r0, [pc, #140]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f38:	f002 fdb0 	bl	8007a9c <HAL_TIM_Base_Init>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8004f42:	f000 fdb1 	bl	8005aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f50:	4619      	mov	r1, r3
 8004f52:	481c      	ldr	r0, [pc, #112]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f54:	f002 ffd4 	bl	8007f00 <HAL_TIM_ConfigClockSource>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8004f5e:	f000 fda3 	bl	8005aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f62:	4818      	ldr	r0, [pc, #96]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f64:	f002 fde9 	bl	8007b3a <HAL_TIM_PWM_Init>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8004f6e:	f000 fd9b 	bl	8005aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f7a:	f107 0320 	add.w	r3, r7, #32
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4810      	ldr	r0, [pc, #64]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004f82:	f003 fba1 	bl	80086c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8004f8c:	f000 fd8c 	bl	8005aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f90:	2360      	movs	r3, #96	@ 0x60
 8004f92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	220c      	movs	r2, #12
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4807      	ldr	r0, [pc, #28]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004fa8:	f002 fee8 	bl	8007d7c <HAL_TIM_PWM_ConfigChannel>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8004fb2:	f000 fd79 	bl	8005aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004fb6:	4803      	ldr	r0, [pc, #12]	@ (8004fc4 <MX_TIM2_Init+0xe4>)
 8004fb8:	f000 fe0c 	bl	8005bd4 <HAL_TIM_MspPostInit>

}
 8004fbc:	bf00      	nop
 8004fbe:	3738      	adds	r7, #56	@ 0x38
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20017ba0 	.word	0x20017ba0
 8004fc8:	000f4240 	.word	0x000f4240

08004fcc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004fd0:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004fd2:	4a12      	ldr	r2, [pc, #72]	@ (800501c <MX_UART5_Init+0x50>)
 8004fd4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004fd6:	4b10      	ldr	r3, [pc, #64]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004fdc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004fde:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004ff0:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004ff2:	220c      	movs	r2, #12
 8004ff4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <MX_UART5_Init+0x4c>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005002:	4805      	ldr	r0, [pc, #20]	@ (8005018 <MX_UART5_Init+0x4c>)
 8005004:	f003 fbdc 	bl	80087c0 <HAL_UART_Init>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800500e:	f000 fd4b 	bl	8005aa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20017be8 	.word	0x20017be8
 800501c:	40005000 	.word	0x40005000

08005020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005024:	4b11      	ldr	r3, [pc, #68]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <MX_USART2_UART_Init+0x50>)
 8005028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800502a:	4b10      	ldr	r3, [pc, #64]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 800502c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005032:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 800503a:	2200      	movs	r2, #0
 800503c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800503e:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005040:	2200      	movs	r2, #0
 8005042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005044:	4b09      	ldr	r3, [pc, #36]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005046:	220c      	movs	r2, #12
 8005048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800504a:	4b08      	ldr	r3, [pc, #32]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 800504c:	2200      	movs	r2, #0
 800504e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005052:	2200      	movs	r2, #0
 8005054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005056:	4805      	ldr	r0, [pc, #20]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005058:	f003 fbb2 	bl	80087c0 <HAL_UART_Init>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005062:	f000 fd21 	bl	8005aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20017c30 	.word	0x20017c30
 8005070:	40004400 	.word	0x40004400

08005074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	609a      	str	r2, [r3, #8]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	4b4c      	ldr	r3, [pc, #304]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005092:	4a4b      	ldr	r2, [pc, #300]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 8005094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005098:	6313      	str	r3, [r2, #48]	@ 0x30
 800509a:	4b49      	ldr	r3, [pc, #292]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	4b45      	ldr	r3, [pc, #276]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	4a44      	ldr	r2, [pc, #272]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050b6:	4b42      	ldr	r3, [pc, #264]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	4b3e      	ldr	r3, [pc, #248]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	4a3d      	ldr	r2, [pc, #244]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050d2:	4b3b      	ldr	r3, [pc, #236]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
 80050e2:	4b37      	ldr	r3, [pc, #220]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e6:	4a36      	ldr	r2, [pc, #216]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050e8:	f043 0302 	orr.w	r3, r3, #2
 80050ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ee:	4b34      	ldr	r3, [pc, #208]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	4a2f      	ldr	r2, [pc, #188]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 8005104:	f043 0308 	orr.w	r3, r3, #8
 8005108:	6313      	str	r3, [r2, #48]	@ 0x30
 800510a:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <MX_GPIO_Init+0x14c>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8005116:	2200      	movs	r2, #0
 8005118:	2182      	movs	r1, #130	@ 0x82
 800511a:	482a      	ldr	r0, [pc, #168]	@ (80051c4 <MX_GPIO_Init+0x150>)
 800511c:	f001 faea 	bl	80066f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8005120:	2200      	movs	r2, #0
 8005122:	f240 7113 	movw	r1, #1811	@ 0x713
 8005126:	4828      	ldr	r0, [pc, #160]	@ (80051c8 <MX_GPIO_Init+0x154>)
 8005128:	f001 fae4 	bl	80066f4 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800512c:	2200      	movs	r2, #0
 800512e:	f240 4139 	movw	r1, #1081	@ 0x439
 8005132:	4826      	ldr	r0, [pc, #152]	@ (80051cc <MX_GPIO_Init+0x158>)
 8005134:	f001 fade 	bl	80066f4 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8005138:	2201      	movs	r2, #1
 800513a:	2140      	movs	r1, #64	@ 0x40
 800513c:	4823      	ldr	r0, [pc, #140]	@ (80051cc <MX_GPIO_Init+0x158>)
 800513e:	f001 fad9 	bl	80066f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8005142:	2382      	movs	r3, #130	@ 0x82
 8005144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005146:	2301      	movs	r3, #1
 8005148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800514e:	2302      	movs	r3, #2
 8005150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	4619      	mov	r1, r3
 8005158:	481a      	ldr	r0, [pc, #104]	@ (80051c4 <MX_GPIO_Init+0x150>)
 800515a:	f001 f937 	bl	80063cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800515e:	f240 7313 	movw	r3, #1811	@ 0x713
 8005162:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005164:	2301      	movs	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800516c:	2302      	movs	r3, #2
 800516e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	4619      	mov	r1, r3
 8005176:	4814      	ldr	r0, [pc, #80]	@ (80051c8 <MX_GPIO_Init+0x154>)
 8005178:	f001 f928 	bl	80063cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800517c:	f240 4339 	movw	r3, #1081	@ 0x439
 8005180:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005182:	2301      	movs	r3, #1
 8005184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800518a:	2302      	movs	r3, #2
 800518c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800518e:	f107 0314 	add.w	r3, r7, #20
 8005192:	4619      	mov	r1, r3
 8005194:	480d      	ldr	r0, [pc, #52]	@ (80051cc <MX_GPIO_Init+0x158>)
 8005196:	f001 f919 	bl	80063cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 800519a:	2340      	movs	r3, #64	@ 0x40
 800519c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80051a6:	2301      	movs	r3, #1
 80051a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80051aa:	f107 0314 	add.w	r3, r7, #20
 80051ae:	4619      	mov	r1, r3
 80051b0:	4806      	ldr	r0, [pc, #24]	@ (80051cc <MX_GPIO_Init+0x158>)
 80051b2:	f001 f90b 	bl	80063cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80051b6:	bf00      	nop
 80051b8:	3728      	adds	r7, #40	@ 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40020800 	.word	0x40020800
 80051c8:	40020000 	.word	0x40020000
 80051cc:	40020400 	.word	0x40020400

080051d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b089      	sub	sp, #36	@ 0x24
 80051d4:	af06      	add	r7, sp, #24
 80051d6:	6078      	str	r0, [r7, #4]
	if (modo==1){
 80051d8:	4b97      	ldr	r3, [pc, #604]	@ (8005438 <HAL_UART_RxCpltCallback+0x268>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d102      	bne.n	80051e6 <HAL_UART_RxCpltCallback+0x16>
	HitboxPlayer(&p1);}
 80051e0:	4896      	ldr	r0, [pc, #600]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80051e2:	f7fe fb59 	bl	8003898 <HitboxPlayer>
	if (modo==2){
 80051e6:	4b94      	ldr	r3, [pc, #592]	@ (8005438 <HAL_UART_RxCpltCallback+0x268>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d105      	bne.n	80051fa <HAL_UART_RxCpltCallback+0x2a>
		HitboxPlayer(&p1);
 80051ee:	4893      	ldr	r0, [pc, #588]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80051f0:	f7fe fb52 	bl	8003898 <HitboxPlayer>
		HitboxPlayer(&p2);
 80051f4:	4892      	ldr	r0, [pc, #584]	@ (8005440 <HAL_UART_RxCpltCallback+0x270>)
 80051f6:	f7fe fb4f 	bl	8003898 <HitboxPlayer>
	}

	if(buffer[0] == 'd'){
 80051fa:	4b92      	ldr	r3, [pc, #584]	@ (8005444 <HAL_UART_RxCpltCallback+0x274>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b64      	cmp	r3, #100	@ 0x64
 8005200:	d175      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x11e>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8005202:	4b8e      	ldr	r3, [pc, #568]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005206:	2b00      	cmp	r3, #0
 8005208:	d171      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x11e>
 800520a:	4b8c      	ldr	r3, [pc, #560]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800520c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d16d      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x11e>
 8005212:	4b8a      	ldr	r3, [pc, #552]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d169      	bne.n	80052ee <HAL_UART_RxCpltCallback+0x11e>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b87      	ldr	r3, [pc, #540]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	1c58      	adds	r0, r3, #1
 8005228:	4b84      	ldr	r3, [pc, #528]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b83      	ldr	r3, [pc, #524]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	4b81      	ldr	r3, [pc, #516]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	4b7f      	ldr	r3, [pc, #508]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005246:	9400      	str	r4, [sp, #0]
 8005248:	f7fc fbb6 	bl	80019b8 <FillRect>
			p1.direction=2;
 800524c:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800524e:	2202      	movs	r2, #2
 8005250:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p1, 0)) {
 8005252:	2100      	movs	r1, #0
 8005254:	4879      	ldr	r0, [pc, #484]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005256:	f7fe fa57 	bl	8003708 <playerCanMove>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d017      	beq.n	8005290 <HAL_UART_RxCpltCallback+0xc0>
		    p1.y=p1.y+p1.speed;
 8005260:	4b76      	ldr	r3, [pc, #472]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	4b75      	ldr	r3, [pc, #468]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	4413      	add	r3, r2
 800526a:	4a74      	ldr	r2, [pc, #464]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800526c:	6053      	str	r3, [r2, #4]
		    if (p1.animationWalkDown<10){
 800526e:	4b73      	ldr	r3, [pc, #460]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005272:	2b09      	cmp	r3, #9
 8005274:	d805      	bhi.n	8005282 <HAL_UART_RxCpltCallback+0xb2>
		    		p1.animationWalkDown+=1;
 8005276:	4b71      	ldr	r3, [pc, #452]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	3301      	adds	r3, #1
 800527c:	4a6f      	ldr	r2, [pc, #444]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800527e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005280:	e002      	b.n	8005288 <HAL_UART_RxCpltCallback+0xb8>
		    			} else{
		    				p1.animationWalkDown=0;
 8005282:	4b6e      	ldr	r3, [pc, #440]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005284:	2200      	movs	r2, #0
 8005286:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p1);
 8005288:	486c      	ldr	r0, [pc, #432]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800528a:	f7fe fc9b 	bl	8003bc4 <PlayerAnimation>
 800528e:	e02e      	b.n	80052ee <HAL_UART_RxCpltCallback+0x11e>
		} else {
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1,0xFE8B);
 8005290:	4b6a      	ldr	r3, [pc, #424]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b69      	ldr	r3, [pc, #420]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	1c58      	adds	r0, r3, #1
 800529e:	4b67      	ldr	r3, [pc, #412]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	4b66      	ldr	r3, [pc, #408]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	4b63      	ldr	r3, [pc, #396]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	4b62      	ldr	r3, [pc, #392]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80052bc:	9400      	str	r4, [sp, #0]
 80052be:	f7fc fb7b 	bl	80019b8 <FillRect>
			LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 80052c2:	4b5e      	ldr	r3, [pc, #376]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3b08      	subs	r3, #8
 80052c8:	4618      	mov	r0, r3
 80052ca:	4b5c      	ldr	r3, [pc, #368]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	3b0c      	subs	r3, #12
 80052d0:	4619      	mov	r1, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9303      	str	r3, [sp, #12]
 80052da:	2300      	movs	r3, #0
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	230a      	movs	r3, #10
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	4b59      	ldr	r3, [pc, #356]	@ (8005448 <HAL_UART_RxCpltCallback+0x278>)
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	231a      	movs	r3, #26
 80052e8:	2212      	movs	r2, #18
 80052ea:	f7fc fc15 	bl	8001b18 <LCD_Sprite>
		}
	}
}
	if(buffer[0] == 'u'){
 80052ee:	4b55      	ldr	r3, [pc, #340]	@ (8005444 <HAL_UART_RxCpltCallback+0x274>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b75      	cmp	r3, #117	@ 0x75
 80052f4:	d15c      	bne.n	80053b0 <HAL_UART_RxCpltCallback+0x1e0>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80052f6:	4b51      	ldr	r3, [pc, #324]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d158      	bne.n	80053b0 <HAL_UART_RxCpltCallback+0x1e0>
 80052fe:	4b4f      	ldr	r3, [pc, #316]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d154      	bne.n	80053b0 <HAL_UART_RxCpltCallback+0x1e0>
 8005306:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d150      	bne.n	80053b0 <HAL_UART_RxCpltCallback+0x1e0>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 800530e:	4b4b      	ldr	r3, [pc, #300]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	1c58      	adds	r0, r3, #1
 800531c:	4b47      	ldr	r3, [pc, #284]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	4b46      	ldr	r3, [pc, #280]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	1c59      	adds	r1, r3, #1
 800532a:	4b44      	ldr	r3, [pc, #272]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	4b42      	ldr	r3, [pc, #264]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	3301      	adds	r3, #1
 8005336:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800533a:	9400      	str	r4, [sp, #0]
 800533c:	f7fc fb3c 	bl	80019b8 <FillRect>
			p1.direction=0;
 8005340:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005342:	2200      	movs	r2, #0
 8005344:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 2)) {
 8005346:	2102      	movs	r1, #2
 8005348:	483c      	ldr	r0, [pc, #240]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800534a:	f7fe f9dd 	bl	8003708 <playerCanMove>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <HAL_UART_RxCpltCallback+0x1b4>
				p1.y=p1.y-p1.speed;
 8005354:	4b39      	ldr	r3, [pc, #228]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	4b38      	ldr	r3, [pc, #224]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	4a37      	ldr	r2, [pc, #220]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005360:	6053      	str	r3, [r2, #4]
				if (p1.animationWalkUp<10){
 8005362:	4b36      	ldr	r3, [pc, #216]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005366:	2b09      	cmp	r3, #9
 8005368:	d805      	bhi.n	8005376 <HAL_UART_RxCpltCallback+0x1a6>
						p1.animationWalkUp+=1;
 800536a:	4b34      	ldr	r3, [pc, #208]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536e:	3301      	adds	r3, #1
 8005370:	4a32      	ldr	r2, [pc, #200]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005374:	e002      	b.n	800537c <HAL_UART_RxCpltCallback+0x1ac>
						} else{
						  p1.animationWalkUp=0;
 8005376:	4b31      	ldr	r3, [pc, #196]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005378:	2200      	movs	r2, #0
 800537a:	64da      	str	r2, [r3, #76]	@ 0x4c
						  }
			PlayerAnimation(&p1);
 800537c:	482f      	ldr	r0, [pc, #188]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800537e:	f7fe fc21 	bl	8003bc4 <PlayerAnimation>
 8005382:	e015      	b.n	80053b0 <HAL_UART_RxCpltCallback+0x1e0>
			} else {
				LCD_Sprite(p1.x - (18 / 2)+1, p1.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8005384:	4b2d      	ldr	r3, [pc, #180]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3b08      	subs	r3, #8
 800538a:	4618      	mov	r0, r3
 800538c:	4b2b      	ldr	r3, [pc, #172]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	3b0d      	subs	r3, #13
 8005392:	4619      	mov	r1, r3
 8005394:	2300      	movs	r3, #0
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	2300      	movs	r3, #0
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	2300      	movs	r3, #0
 800539e:	9302      	str	r3, [sp, #8]
 80053a0:	230a      	movs	r3, #10
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	4b29      	ldr	r3, [pc, #164]	@ (800544c <HAL_UART_RxCpltCallback+0x27c>)
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	231a      	movs	r3, #26
 80053aa:	2212      	movs	r2, #18
 80053ac:	f7fc fbb4 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
		}
}
	if(buffer[0] == 'r'){
 80053b0:	4b24      	ldr	r3, [pc, #144]	@ (8005444 <HAL_UART_RxCpltCallback+0x274>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b72      	cmp	r3, #114	@ 0x72
 80053b6:	d168      	bne.n	800548a <HAL_UART_RxCpltCallback+0x2ba>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 80053b8:	4b20      	ldr	r3, [pc, #128]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d164      	bne.n	800548a <HAL_UART_RxCpltCallback+0x2ba>
 80053c0:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d160      	bne.n	800548a <HAL_UART_RxCpltCallback+0x2ba>
 80053c8:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d15c      	bne.n	800548a <HAL_UART_RxCpltCallback+0x2ba>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80053d0:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b19      	ldr	r3, [pc, #100]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	1c58      	adds	r0, r3, #1
 80053de:	4b17      	ldr	r3, [pc, #92]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	4b16      	ldr	r3, [pc, #88]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	4b13      	ldr	r3, [pc, #76]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	4b12      	ldr	r3, [pc, #72]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80053fc:	9400      	str	r4, [sp, #0]
 80053fe:	f7fc fadb 	bl	80019b8 <FillRect>
			p1.direction=1;
 8005402:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005404:	2201      	movs	r2, #1
 8005406:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 1)) {
 8005408:	2101      	movs	r1, #1
 800540a:	480c      	ldr	r0, [pc, #48]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800540c:	f7fe f97c 	bl	8003708 <playerCanMove>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d023      	beq.n	800545e <HAL_UART_RxCpltCallback+0x28e>
				p1.x=p1.x+p1.speed;
 8005416:	4b09      	ldr	r3, [pc, #36]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b08      	ldr	r3, [pc, #32]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4413      	add	r3, r2
 8005420:	4a06      	ldr	r2, [pc, #24]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005422:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkRight<10){
 8005424:	4b05      	ldr	r3, [pc, #20]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005428:	2b09      	cmp	r3, #9
 800542a:	d811      	bhi.n	8005450 <HAL_UART_RxCpltCallback+0x280>
						p1.animationWalkRight+=1;
 800542c:	4b03      	ldr	r3, [pc, #12]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 800542e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005430:	3301      	adds	r3, #1
 8005432:	4a02      	ldr	r2, [pc, #8]	@ (800543c <HAL_UART_RxCpltCallback+0x26c>)
 8005434:	6493      	str	r3, [r2, #72]	@ 0x48
 8005436:	e00e      	b.n	8005456 <HAL_UART_RxCpltCallback+0x286>
 8005438:	2001cadc 	.word	0x2001cadc
 800543c:	2001c784 	.word	0x2001c784
 8005440:	2001c7f8 	.word	0x2001c7f8
 8005444:	2001c778 	.word	0x2001c778
 8005448:	200148b8 	.word	0x200148b8
 800544c:	20012428 	.word	0x20012428
						} else{
						  p1.animationWalkRight=0;
 8005450:	4b84      	ldr	r3, [pc, #528]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005452:	2200      	movs	r2, #0
 8005454:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p1);
 8005456:	4883      	ldr	r0, [pc, #524]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005458:	f7fe fbb4 	bl	8003bc4 <PlayerAnimation>
 800545c:	e015      	b.n	800548a <HAL_UART_RxCpltCallback+0x2ba>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 800545e:	4b81      	ldr	r3, [pc, #516]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3b0a      	subs	r3, #10
 8005464:	4618      	mov	r0, r3
 8005466:	4b7f      	ldr	r3, [pc, #508]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	3b0b      	subs	r3, #11
 800546c:	4619      	mov	r1, r3
 800546e:	2300      	movs	r3, #0
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	2301      	movs	r3, #1
 8005474:	9303      	str	r3, [sp, #12]
 8005476:	2300      	movs	r3, #0
 8005478:	9302      	str	r3, [sp, #8]
 800547a:	230a      	movs	r3, #10
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	4b7a      	ldr	r3, [pc, #488]	@ (8005668 <HAL_UART_RxCpltCallback+0x498>)
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2317      	movs	r3, #23
 8005484:	2216      	movs	r2, #22
 8005486:	f7fc fb47 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if(buffer[0] == 'l'){
 800548a:	4b78      	ldr	r3, [pc, #480]	@ (800566c <HAL_UART_RxCpltCallback+0x49c>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005490:	d15c      	bne.n	800554c <HAL_UART_RxCpltCallback+0x37c>
		if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1){
 8005492:	4b74      	ldr	r3, [pc, #464]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	2b00      	cmp	r3, #0
 8005498:	d158      	bne.n	800554c <HAL_UART_RxCpltCallback+0x37c>
 800549a:	4b72      	ldr	r3, [pc, #456]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 800549c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d154      	bne.n	800554c <HAL_UART_RxCpltCallback+0x37c>
 80054a2:	4b70      	ldr	r3, [pc, #448]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d150      	bne.n	800554c <HAL_UART_RxCpltCallback+0x37c>
			FillRect(p1.x - (p1.width / 2)+1, p1.y - (p1.height / 2)+1, p1.width+1, p1.height+1, 0xFE8B);
 80054aa:	4b6e      	ldr	r3, [pc, #440]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	1c58      	adds	r0, r3, #1
 80054b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b69      	ldr	r3, [pc, #420]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	4b67      	ldr	r3, [pc, #412]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	4b65      	ldr	r3, [pc, #404]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80054d6:	9400      	str	r4, [sp, #0]
 80054d8:	f7fc fa6e 	bl	80019b8 <FillRect>
			p1.direction=3;
 80054dc:	4b61      	ldr	r3, [pc, #388]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054de:	2203      	movs	r2, #3
 80054e0:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p1, 3)) {
 80054e2:	2103      	movs	r1, #3
 80054e4:	485f      	ldr	r0, [pc, #380]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054e6:	f7fe f90f 	bl	8003708 <playerCanMove>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d017      	beq.n	8005520 <HAL_UART_RxCpltCallback+0x350>
				p1.x=p1.x-p1.speed;
 80054f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80054fc:	6013      	str	r3, [r2, #0]
				if (p1.animationWalkLeft<10){
 80054fe:	4b59      	ldr	r3, [pc, #356]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	2b09      	cmp	r3, #9
 8005504:	d805      	bhi.n	8005512 <HAL_UART_RxCpltCallback+0x342>
						p1.animationWalkLeft+=1;
 8005506:	4b57      	ldr	r3, [pc, #348]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	3301      	adds	r3, #1
 800550c:	4a55      	ldr	r2, [pc, #340]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 800550e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005510:	e002      	b.n	8005518 <HAL_UART_RxCpltCallback+0x348>
						} else{
						  p1.animationWalkLeft=0;
 8005512:	4b54      	ldr	r3, [pc, #336]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005514:	2200      	movs	r2, #0
 8005516:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p1);
 8005518:	4852      	ldr	r0, [pc, #328]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 800551a:	f7fe fb53 	bl	8003bc4 <PlayerAnimation>
 800551e:	e015      	b.n	800554c <HAL_UART_RxCpltCallback+0x37c>
						  //FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);

			} else {
				LCD_Sprite(p1.x - (22 / 2)+1, p1.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8005520:	4b50      	ldr	r3, [pc, #320]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3b0a      	subs	r3, #10
 8005526:	4618      	mov	r0, r3
 8005528:	4b4e      	ldr	r3, [pc, #312]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	3b0b      	subs	r3, #11
 800552e:	4619      	mov	r1, r3
 8005530:	2300      	movs	r3, #0
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	2300      	movs	r3, #0
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	2300      	movs	r3, #0
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	230a      	movs	r3, #10
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	4b49      	ldr	r3, [pc, #292]	@ (8005668 <HAL_UART_RxCpltCallback+0x498>)
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2317      	movs	r3, #23
 8005546:	2216      	movs	r2, #22
 8005548:	f7fc fae6 	bl	8001b18 <LCD_Sprite>
				//FillRect(p1.x - (p1.width / 2), p1.y - (p1.height / 2), p1.width, p1.height, 0xFFFB00);
			}
	}
}
	if (buffer[0]=='b'){
 800554c:	4b47      	ldr	r3, [pc, #284]	@ (800566c <HAL_UART_RxCpltCallback+0x49c>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b62      	cmp	r3, #98	@ 0x62
 8005552:	d13b      	bne.n	80055cc <HAL_UART_RxCpltCallback+0x3fc>
		 if (estadoActual == MENU ) {
 8005554:	4b46      	ldr	r3, [pc, #280]	@ (8005670 <HAL_UART_RxCpltCallback+0x4a0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_UART_RxCpltCallback+0x3a2>
			 // IMPRIMIR SPRITE DE UN JUGADOR
			 estadoFuturo = SOLO;
 800555e:	4b45      	ldr	r3, [pc, #276]	@ (8005674 <HAL_UART_RxCpltCallback+0x4a4>)
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
			 IniciarLevel=1;
 8005564:	4b44      	ldr	r3, [pc, #272]	@ (8005678 <HAL_UART_RxCpltCallback+0x4a8>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
			 IniciarP1=1;}
 800556a:	4b44      	ldr	r3, [pc, #272]	@ (800567c <HAL_UART_RxCpltCallback+0x4ac>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e02c      	b.n	80055cc <HAL_UART_RxCpltCallback+0x3fc>
		 else {
			 if (p1.IsAttack==0 && p1.IsDamage==0 &&p1.isAlive==1 && (estadoActual==SOLO||estadoActual==DUO)){
 8005572:	4b3c      	ldr	r3, [pc, #240]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005576:	2b00      	cmp	r3, #0
 8005578:	d124      	bne.n	80055c4 <HAL_UART_RxCpltCallback+0x3f4>
 800557a:	4b3a      	ldr	r3, [pc, #232]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 800557c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d120      	bne.n	80055c4 <HAL_UART_RxCpltCallback+0x3f4>
 8005582:	4b38      	ldr	r3, [pc, #224]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d11c      	bne.n	80055c4 <HAL_UART_RxCpltCallback+0x3f4>
 800558a:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <HAL_UART_RxCpltCallback+0x4a0>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d004      	beq.n	800559e <HAL_UART_RxCpltCallback+0x3ce>
 8005594:	4b36      	ldr	r3, [pc, #216]	@ (8005670 <HAL_UART_RxCpltCallback+0x4a0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d112      	bne.n	80055c4 <HAL_UART_RxCpltCallback+0x3f4>
			 			p1.IsAttack=1;
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	655a      	str	r2, [r3, #84]	@ 0x54
			 			p1.animationAttack=0;
 80055a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	659a      	str	r2, [r3, #88]	@ 0x58
			 			PlayerHit(&p1, &e1_1);
 80055ac:	4934      	ldr	r1, [pc, #208]	@ (8005680 <HAL_UART_RxCpltCallback+0x4b0>)
 80055ae:	482d      	ldr	r0, [pc, #180]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80055b0:	f7fe fa28 	bl	8003a04 <PlayerHit>
			 			PlayerHit(&p1, &e1_2);
 80055b4:	4933      	ldr	r1, [pc, #204]	@ (8005684 <HAL_UART_RxCpltCallback+0x4b4>)
 80055b6:	482b      	ldr	r0, [pc, #172]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80055b8:	f7fe fa24 	bl	8003a04 <PlayerHit>
			 			PlayerHit(&p1, &e1_3);}
 80055bc:	4932      	ldr	r1, [pc, #200]	@ (8005688 <HAL_UART_RxCpltCallback+0x4b8>)
 80055be:	4829      	ldr	r0, [pc, #164]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80055c0:	f7fe fa20 	bl	8003a04 <PlayerHit>
			 			PlayerHit_E2(&p1, &e2_1);
 80055c4:	4931      	ldr	r1, [pc, #196]	@ (800568c <HAL_UART_RxCpltCallback+0x4bc>)
 80055c6:	4827      	ldr	r0, [pc, #156]	@ (8005664 <HAL_UART_RxCpltCallback+0x494>)
 80055c8:	f7fd fbfc 	bl	8002dc4 <PlayerHit_E2>
		 }
	}

	//Jugador 2
	if(buffer[0] == '1'){ //Arriba
 80055cc:	4b27      	ldr	r3, [pc, #156]	@ (800566c <HAL_UART_RxCpltCallback+0x49c>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b31      	cmp	r3, #49	@ 0x31
 80055d2:	d175      	bne.n	80056c0 <HAL_UART_RxCpltCallback+0x4f0>
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80055d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 80055d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d171      	bne.n	80056c0 <HAL_UART_RxCpltCallback+0x4f0>
 80055dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d16d      	bne.n	80056c0 <HAL_UART_RxCpltCallback+0x4f0>
 80055e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d169      	bne.n	80056c0 <HAL_UART_RxCpltCallback+0x4f0>
				FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80055ec:	4b28      	ldr	r3, [pc, #160]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	4b27      	ldr	r3, [pc, #156]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	1c58      	adds	r0, r3, #1
 80055fa:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	4b24      	ldr	r3, [pc, #144]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	4b21      	ldr	r3, [pc, #132]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	4b20      	ldr	r3, [pc, #128]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005618:	9400      	str	r4, [sp, #0]
 800561a:	f7fc f9cd 	bl	80019b8 <FillRect>
				p2.direction=0;
 800561e:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005620:	2200      	movs	r2, #0
 8005622:	621a      	str	r2, [r3, #32]
				if (playerCanMove(&p2, 2)) {
 8005624:	2102      	movs	r1, #2
 8005626:	481a      	ldr	r0, [pc, #104]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005628:	f7fe f86e 	bl	8003708 <playerCanMove>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d030      	beq.n	8005694 <HAL_UART_RxCpltCallback+0x4c4>
					p2.y=p2.y-p2.speed;
 8005632:	4b17      	ldr	r3, [pc, #92]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 800563e:	6053      	str	r3, [r2, #4]
					if (p2.animationWalkUp<10){
 8005640:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005644:	2b09      	cmp	r3, #9
 8005646:	d805      	bhi.n	8005654 <HAL_UART_RxCpltCallback+0x484>
							p2.animationWalkUp+=1;
 8005648:	4b11      	ldr	r3, [pc, #68]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 800564a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564c:	3301      	adds	r3, #1
 800564e:	4a10      	ldr	r2, [pc, #64]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005652:	e002      	b.n	800565a <HAL_UART_RxCpltCallback+0x48a>
							} else{
							  p2.animationWalkUp=0;
 8005654:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 8005656:	2200      	movs	r2, #0
 8005658:	64da      	str	r2, [r3, #76]	@ 0x4c
							  }
				PlayerAnimation(&p2);
 800565a:	480d      	ldr	r0, [pc, #52]	@ (8005690 <HAL_UART_RxCpltCallback+0x4c0>)
 800565c:	f7fe fab2 	bl	8003bc4 <PlayerAnimation>
 8005660:	e02e      	b.n	80056c0 <HAL_UART_RxCpltCallback+0x4f0>
 8005662:	bf00      	nop
 8005664:	2001c784 	.word	0x2001c784
 8005668:	2000fca0 	.word	0x2000fca0
 800566c:	2001c778 	.word	0x2001c778
 8005670:	20016a78 	.word	0x20016a78
 8005674:	2001cae0 	.word	0x2001cae0
 8005678:	2001cae4 	.word	0x2001cae4
 800567c:	2001caee 	.word	0x2001caee
 8005680:	2001c86c 	.word	0x2001c86c
 8005684:	2001c8a0 	.word	0x2001c8a0
 8005688:	2001c8d4 	.word	0x2001c8d4
 800568c:	2001c9a4 	.word	0x2001c9a4
 8005690:	2001c7f8 	.word	0x2001c7f8
				} else {
					LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2), 18, 26, LinkUpWalk180x26_10, 10, 0, 0, 0);
 8005694:	4b9a      	ldr	r3, [pc, #616]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3b08      	subs	r3, #8
 800569a:	4618      	mov	r0, r3
 800569c:	4b98      	ldr	r3, [pc, #608]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	3b0d      	subs	r3, #13
 80056a2:	4619      	mov	r1, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
 80056ac:	2300      	movs	r3, #0
 80056ae:	9302      	str	r3, [sp, #8]
 80056b0:	230a      	movs	r3, #10
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	4b93      	ldr	r3, [pc, #588]	@ (8005904 <HAL_UART_RxCpltCallback+0x734>)
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	231a      	movs	r3, #26
 80056ba:	2212      	movs	r2, #18
 80056bc:	f7fc fa2c 	bl	8001b18 <LCD_Sprite>
					//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
				}
			}
	}

	if(buffer[0] == '2'){ //Derecha
 80056c0:	4b91      	ldr	r3, [pc, #580]	@ (8005908 <HAL_UART_RxCpltCallback+0x738>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b32      	cmp	r3, #50	@ 0x32
 80056c6:	d15c      	bne.n	8005782 <HAL_UART_RxCpltCallback+0x5b2>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 80056c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d158      	bne.n	8005782 <HAL_UART_RxCpltCallback+0x5b2>
 80056d0:	4b8b      	ldr	r3, [pc, #556]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d154      	bne.n	8005782 <HAL_UART_RxCpltCallback+0x5b2>
 80056d8:	4b89      	ldr	r3, [pc, #548]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d150      	bne.n	8005782 <HAL_UART_RxCpltCallback+0x5b2>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80056e0:	4b87      	ldr	r3, [pc, #540]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b86      	ldr	r3, [pc, #536]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	1c58      	adds	r0, r3, #1
 80056ee:	4b84      	ldr	r3, [pc, #528]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	4b83      	ldr	r3, [pc, #524]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	1c59      	adds	r1, r3, #1
 80056fc:	4b80      	ldr	r3, [pc, #512]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	4b7f      	ldr	r3, [pc, #508]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 800570c:	9400      	str	r4, [sp, #0]
 800570e:	f7fc f953 	bl	80019b8 <FillRect>
			p2.direction=1;
 8005712:	4b7b      	ldr	r3, [pc, #492]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005714:	2201      	movs	r2, #1
 8005716:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 1)) {
 8005718:	2101      	movs	r1, #1
 800571a:	4879      	ldr	r0, [pc, #484]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800571c:	f7fd fff4 	bl	8003708 <playerCanMove>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d017      	beq.n	8005756 <HAL_UART_RxCpltCallback+0x586>
				p2.x=p2.x+p2.speed;
 8005726:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b75      	ldr	r3, [pc, #468]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4413      	add	r3, r2
 8005730:	4a73      	ldr	r2, [pc, #460]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005732:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkRight<10){
 8005734:	4b72      	ldr	r3, [pc, #456]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005738:	2b09      	cmp	r3, #9
 800573a:	d805      	bhi.n	8005748 <HAL_UART_RxCpltCallback+0x578>
						p2.animationWalkRight+=1;
 800573c:	4b70      	ldr	r3, [pc, #448]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800573e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005740:	3301      	adds	r3, #1
 8005742:	4a6f      	ldr	r2, [pc, #444]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005744:	6493      	str	r3, [r2, #72]	@ 0x48
 8005746:	e002      	b.n	800574e <HAL_UART_RxCpltCallback+0x57e>
						} else{
						  p2.animationWalkRight=0;
 8005748:	4b6d      	ldr	r3, [pc, #436]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800574a:	2200      	movs	r2, #0
 800574c:	649a      	str	r2, [r3, #72]	@ 0x48
						  }
			PlayerAnimation(&p2);
 800574e:	486c      	ldr	r0, [pc, #432]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005750:	f7fe fa38 	bl	8003bc4 <PlayerAnimation>
 8005754:	e015      	b.n	8005782 <HAL_UART_RxCpltCallback+0x5b2>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 1, 0);
 8005756:	4b6a      	ldr	r3, [pc, #424]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3b0a      	subs	r3, #10
 800575c:	4618      	mov	r0, r3
 800575e:	4b68      	ldr	r3, [pc, #416]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	3b0b      	subs	r3, #11
 8005764:	4619      	mov	r1, r3
 8005766:	2300      	movs	r3, #0
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	2301      	movs	r3, #1
 800576c:	9303      	str	r3, [sp, #12]
 800576e:	2300      	movs	r3, #0
 8005770:	9302      	str	r3, [sp, #8]
 8005772:	230a      	movs	r3, #10
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	4b65      	ldr	r3, [pc, #404]	@ (800590c <HAL_UART_RxCpltCallback+0x73c>)
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	2317      	movs	r3, #23
 800577c:	2216      	movs	r2, #22
 800577e:	f7fc f9cb 	bl	8001b18 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if(buffer[0] == '3'){ //Abajo
 8005782:	4b61      	ldr	r3, [pc, #388]	@ (8005908 <HAL_UART_RxCpltCallback+0x738>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b33      	cmp	r3, #51	@ 0x33
 8005788:	d175      	bne.n	8005876 <HAL_UART_RxCpltCallback+0x6a6>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 800578a:	4b5d      	ldr	r3, [pc, #372]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	2b00      	cmp	r3, #0
 8005790:	d171      	bne.n	8005876 <HAL_UART_RxCpltCallback+0x6a6>
 8005792:	4b5b      	ldr	r3, [pc, #364]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d16d      	bne.n	8005876 <HAL_UART_RxCpltCallback+0x6a6>
 800579a:	4b59      	ldr	r3, [pc, #356]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d169      	bne.n	8005876 <HAL_UART_RxCpltCallback+0x6a6>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 80057a2:	4b57      	ldr	r3, [pc, #348]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b56      	ldr	r3, [pc, #344]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	1c58      	adds	r0, r3, #1
 80057b0:	4b53      	ldr	r3, [pc, #332]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b52      	ldr	r3, [pc, #328]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	4b50      	ldr	r3, [pc, #320]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	4b4e      	ldr	r3, [pc, #312]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80057ce:	9400      	str	r4, [sp, #0]
 80057d0:	f7fc f8f2 	bl	80019b8 <FillRect>
			p2.direction=2;
 80057d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057d6:	2202      	movs	r2, #2
 80057d8:	621a      	str	r2, [r3, #32]
		if (playerCanMove(&p2, 0)) {
 80057da:	2100      	movs	r1, #0
 80057dc:	4848      	ldr	r0, [pc, #288]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057de:	f7fd ff93 	bl	8003708 <playerCanMove>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d017      	beq.n	8005818 <HAL_UART_RxCpltCallback+0x648>
		    p2.y=p2.y+p2.speed;
 80057e8:	4b45      	ldr	r3, [pc, #276]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4b44      	ldr	r3, [pc, #272]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	4a43      	ldr	r2, [pc, #268]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057f4:	6053      	str	r3, [r2, #4]
		    if (p2.animationWalkDown<10){
 80057f6:	4b42      	ldr	r3, [pc, #264]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80057f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	d805      	bhi.n	800580a <HAL_UART_RxCpltCallback+0x63a>
		    		p2.animationWalkDown+=1;
 80057fe:	4b40      	ldr	r3, [pc, #256]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005802:	3301      	adds	r3, #1
 8005804:	4a3e      	ldr	r2, [pc, #248]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005806:	6513      	str	r3, [r2, #80]	@ 0x50
 8005808:	e002      	b.n	8005810 <HAL_UART_RxCpltCallback+0x640>
		    			} else{
		    				p2.animationWalkDown=0;
 800580a:	4b3d      	ldr	r3, [pc, #244]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800580c:	2200      	movs	r2, #0
 800580e:	651a      	str	r2, [r3, #80]	@ 0x50
		    			}
		    PlayerAnimation(&p2);
 8005810:	483b      	ldr	r0, [pc, #236]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005812:	f7fe f9d7 	bl	8003bc4 <PlayerAnimation>
 8005816:	e02e      	b.n	8005876 <HAL_UART_RxCpltCallback+0x6a6>
		} else {
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005818:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b38      	ldr	r3, [pc, #224]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	1c58      	adds	r0, r3, #1
 8005826:	4b36      	ldr	r3, [pc, #216]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4b35      	ldr	r3, [pc, #212]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	1c59      	adds	r1, r3, #1
 8005834:	4b32      	ldr	r3, [pc, #200]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	4b31      	ldr	r3, [pc, #196]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 8005844:	9400      	str	r4, [sp, #0]
 8005846:	f7fc f8b7 	bl	80019b8 <FillRect>
			LCD_Sprite(p2.x - (18 / 2)+1, p2.y - (26 / 2)+1, 18, 26, LinkDownWalk180x24_10, 10, 0, 0, 0);
 800584a:	4b2d      	ldr	r3, [pc, #180]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3b08      	subs	r3, #8
 8005850:	4618      	mov	r0, r3
 8005852:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	3b0c      	subs	r3, #12
 8005858:	4619      	mov	r1, r3
 800585a:	2300      	movs	r3, #0
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	2300      	movs	r3, #0
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	2300      	movs	r3, #0
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	230a      	movs	r3, #10
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	4b29      	ldr	r3, [pc, #164]	@ (8005910 <HAL_UART_RxCpltCallback+0x740>)
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	231a      	movs	r3, #26
 8005870:	2212      	movs	r2, #18
 8005872:	f7fc f951 	bl	8001b18 <LCD_Sprite>
		}
	}
}

	if(buffer[0] == '4'){ //Izquierda
 8005876:	4b24      	ldr	r3, [pc, #144]	@ (8005908 <HAL_UART_RxCpltCallback+0x738>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b34      	cmp	r3, #52	@ 0x34
 800587c:	d167      	bne.n	800594e <HAL_UART_RxCpltCallback+0x77e>
		if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1){
 800587e:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005882:	2b00      	cmp	r3, #0
 8005884:	d163      	bne.n	800594e <HAL_UART_RxCpltCallback+0x77e>
 8005886:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d15f      	bne.n	800594e <HAL_UART_RxCpltCallback+0x77e>
 800588e:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d15b      	bne.n	800594e <HAL_UART_RxCpltCallback+0x77e>
			FillRect(p2.x - (p2.width / 2)+1, p2.y - (p2.height / 2)+1, p2.width+1, p2.height+1, 0xFE8B);
 8005896:	4b1a      	ldr	r3, [pc, #104]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b19      	ldr	r3, [pc, #100]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	1c58      	adds	r0, r3, #1
 80058a4:	4b16      	ldr	r3, [pc, #88]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	1c59      	adds	r1, r3, #1
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	f64f 648b 	movw	r4, #65163	@ 0xfe8b
 80058c2:	9400      	str	r4, [sp, #0]
 80058c4:	f7fc f878 	bl	80019b8 <FillRect>
			p2.direction=3;
 80058c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058ca:	2203      	movs	r2, #3
 80058cc:	621a      	str	r2, [r3, #32]
			if (playerCanMove(&p2, 3)) {
 80058ce:	2103      	movs	r1, #3
 80058d0:	480b      	ldr	r0, [pc, #44]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058d2:	f7fd ff19 	bl	8003708 <playerCanMove>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d022      	beq.n	8005922 <HAL_UART_RxCpltCallback+0x752>
				p2.x=p2.x-p2.speed;
 80058dc:	4b08      	ldr	r3, [pc, #32]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	4a06      	ldr	r2, [pc, #24]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058e8:	6013      	str	r3, [r2, #0]
				if (p2.animationWalkLeft<10){
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ee:	2b09      	cmp	r3, #9
 80058f0:	d810      	bhi.n	8005914 <HAL_UART_RxCpltCallback+0x744>
						p2.animationWalkLeft+=1;
 80058f2:	4b03      	ldr	r3, [pc, #12]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	3301      	adds	r3, #1
 80058f8:	4a01      	ldr	r2, [pc, #4]	@ (8005900 <HAL_UART_RxCpltCallback+0x730>)
 80058fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80058fc:	e00d      	b.n	800591a <HAL_UART_RxCpltCallback+0x74a>
 80058fe:	bf00      	nop
 8005900:	2001c7f8 	.word	0x2001c7f8
 8005904:	20012428 	.word	0x20012428
 8005908:	2001c778 	.word	0x2001c778
 800590c:	2000fca0 	.word	0x2000fca0
 8005910:	200148b8 	.word	0x200148b8
						} else{
						  p2.animationWalkLeft=0;
 8005914:	4b53      	ldr	r3, [pc, #332]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
						  }
			 PlayerAnimation(&p2);
 800591a:	4852      	ldr	r0, [pc, #328]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 800591c:	f7fe f952 	bl	8003bc4 <PlayerAnimation>
 8005920:	e015      	b.n	800594e <HAL_UART_RxCpltCallback+0x77e>
						  //FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);

			} else {
				LCD_Sprite(p2.x - (22 / 2)+1, p2.y - (23 / 2), 22, 23, LinkSideWalk220x23_10, 10, 0, 0, 0);
 8005922:	4b50      	ldr	r3, [pc, #320]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3b0a      	subs	r3, #10
 8005928:	4618      	mov	r0, r3
 800592a:	4b4e      	ldr	r3, [pc, #312]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	3b0b      	subs	r3, #11
 8005930:	4619      	mov	r1, r3
 8005932:	2300      	movs	r3, #0
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	2300      	movs	r3, #0
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	2300      	movs	r3, #0
 800593c:	9302      	str	r3, [sp, #8]
 800593e:	230a      	movs	r3, #10
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	4b49      	ldr	r3, [pc, #292]	@ (8005a68 <HAL_UART_RxCpltCallback+0x898>)
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2317      	movs	r3, #23
 8005948:	2216      	movs	r2, #22
 800594a:	f7fc f8e5 	bl	8001b18 <LCD_Sprite>
				//FillRect(p2.x - (p2.width / 2), p2.y - (p2.height / 2), p2.width, p2.height, 0xFFFB00);
			}
	}
}

	if (buffer[0]=='5'){
 800594e:	4b47      	ldr	r3, [pc, #284]	@ (8005a6c <HAL_UART_RxCpltCallback+0x89c>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b35      	cmp	r3, #53	@ 0x35
 8005954:	d13c      	bne.n	80059d0 <HAL_UART_RxCpltCallback+0x800>
		if (estadoActual == MENU ) {
 8005956:	4b46      	ldr	r3, [pc, #280]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10f      	bne.n	8005980 <HAL_UART_RxCpltCallback+0x7b0>
					 // IMPRIMIR SPRITE DE DOS JUGADORES
			estadoFuturo = DUO;
 8005960:	4b44      	ldr	r3, [pc, #272]	@ (8005a74 <HAL_UART_RxCpltCallback+0x8a4>)
 8005962:	2202      	movs	r2, #2
 8005964:	701a      	strb	r2, [r3, #0]
			IniciarLevel=1;
 8005966:	4b44      	ldr	r3, [pc, #272]	@ (8005a78 <HAL_UART_RxCpltCallback+0x8a8>)
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
			IniciarLevel2=1;
 800596c:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <HAL_UART_RxCpltCallback+0x8ac>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
			IniciarP1=1;
 8005972:	4b43      	ldr	r3, [pc, #268]	@ (8005a80 <HAL_UART_RxCpltCallback+0x8b0>)
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
			IniciarP2=1;
 8005978:	4b42      	ldr	r3, [pc, #264]	@ (8005a84 <HAL_UART_RxCpltCallback+0x8b4>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e027      	b.n	80059d0 <HAL_UART_RxCpltCallback+0x800>
		}
		else {
			if (p2.IsAttack==0 && p2.IsDamage==0 &&p2.isAlive==1 && estadoActual==DUO){
 8005980:	4b38      	ldr	r3, [pc, #224]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 8005982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11f      	bne.n	80059c8 <HAL_UART_RxCpltCallback+0x7f8>
 8005988:	4b36      	ldr	r3, [pc, #216]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11b      	bne.n	80059c8 <HAL_UART_RxCpltCallback+0x7f8>
 8005990:	4b34      	ldr	r3, [pc, #208]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d117      	bne.n	80059c8 <HAL_UART_RxCpltCallback+0x7f8>
 8005998:	4b35      	ldr	r3, [pc, #212]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d112      	bne.n	80059c8 <HAL_UART_RxCpltCallback+0x7f8>
				p2.IsAttack=1;
 80059a2:	4b30      	ldr	r3, [pc, #192]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54
				p2.animationAttack=0;
 80059a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	659a      	str	r2, [r3, #88]	@ 0x58
				PlayerHit(&p2, &e1_4);
 80059b0:	4935      	ldr	r1, [pc, #212]	@ (8005a88 <HAL_UART_RxCpltCallback+0x8b8>)
 80059b2:	482c      	ldr	r0, [pc, #176]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 80059b4:	f7fe f826 	bl	8003a04 <PlayerHit>
				PlayerHit(&p2, &e1_5);
 80059b8:	4934      	ldr	r1, [pc, #208]	@ (8005a8c <HAL_UART_RxCpltCallback+0x8bc>)
 80059ba:	482a      	ldr	r0, [pc, #168]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 80059bc:	f7fe f822 	bl	8003a04 <PlayerHit>
				PlayerHit(&p2, &e1_6);}
 80059c0:	4933      	ldr	r1, [pc, #204]	@ (8005a90 <HAL_UART_RxCpltCallback+0x8c0>)
 80059c2:	4828      	ldr	r0, [pc, #160]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 80059c4:	f7fe f81e 	bl	8003a04 <PlayerHit>
				PlayerHit_E2(&p2, &e2_2);
 80059c8:	4932      	ldr	r1, [pc, #200]	@ (8005a94 <HAL_UART_RxCpltCallback+0x8c4>)
 80059ca:	4826      	ldr	r0, [pc, #152]	@ (8005a64 <HAL_UART_RxCpltCallback+0x894>)
 80059cc:	f7fd f9fa 	bl	8002dc4 <PlayerHit_E2>
		}
	}

	if (buffer[0] == '6') {
 80059d0:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <HAL_UART_RxCpltCallback+0x89c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b36      	cmp	r3, #54	@ 0x36
 80059d6:	d13b      	bne.n	8005a50 <HAL_UART_RxCpltCallback+0x880>
		if (estadoActual == MENU) {
 80059d8:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <HAL_UART_RxCpltCallback+0x824>
			// Al presionar 6 desde el menú, confirma el cambio al estado seleccionado (SOLO o DUO)
			estadoActual = estadoFuturo;
 80059e2:	4b24      	ldr	r3, [pc, #144]	@ (8005a74 <HAL_UART_RxCpltCallback+0x8a4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b21      	ldr	r3, [pc, #132]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 80059ea:	701a      	strb	r2, [r3, #0]
			repintarFondo = 1;
 80059ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005a98 <HAL_UART_RxCpltCallback+0x8c8>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	e02d      	b.n	8005a50 <HAL_UART_RxCpltCallback+0x880>
		} else if (estadoActual == SOLO || estadoActual == DUO) {
 80059f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d004      	beq.n	8005a08 <HAL_UART_RxCpltCallback+0x838>
 80059fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d116      	bne.n	8005a36 <HAL_UART_RxCpltCallback+0x866>
			// Si ya estamos en SOLO o DUO, cambiamos a PAUSA
			if (estadoActual != PAUSA) {
 8005a08:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d01e      	beq.n	8005a50 <HAL_UART_RxCpltCallback+0x880>
				estadoAnterior = estadoActual;  // Guarda el estado actual (SOLO o DUO)
 8005a12:	4b17      	ldr	r3, [pc, #92]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	4b20      	ldr	r3, [pc, #128]	@ (8005a9c <HAL_UART_RxCpltCallback+0x8cc>)
 8005a1a:	701a      	strb	r2, [r3, #0]
				pintarFondoPausa = 1;
 8005a1c:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <HAL_UART_RxCpltCallback+0x8d0>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
				estadoActual = PAUSA;
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005a24:	2203      	movs	r2, #3
 8005a26:	701a      	strb	r2, [r3, #0]
				IniciarP1=0;
 8005a28:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <HAL_UART_RxCpltCallback+0x8b0>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
				IniciarP2=0;// Cambia a PAUSA
 8005a2e:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <HAL_UART_RxCpltCallback+0x8b4>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
			if (estadoActual != PAUSA) {
 8005a34:	e00c      	b.n	8005a50 <HAL_UART_RxCpltCallback+0x880>
			}
		} else if (estadoActual == PAUSA) {
 8005a36:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d107      	bne.n	8005a50 <HAL_UART_RxCpltCallback+0x880>
			// Si estamos en PAUSA, volvemos al estado anterior
			estadoActual = estadoAnterior;     // Restauramos el estado SOLO o DUO
 8005a40:	4b16      	ldr	r3, [pc, #88]	@ (8005a9c <HAL_UART_RxCpltCallback+0x8cc>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4b0a      	ldr	r3, [pc, #40]	@ (8005a70 <HAL_UART_RxCpltCallback+0x8a0>)
 8005a48:	701a      	strb	r2, [r3, #0]
			repintarFondo = 1;                 // Indicamos que el fondo necesita repintarse
 8005a4a:	4b13      	ldr	r3, [pc, #76]	@ (8005a98 <HAL_UART_RxCpltCallback+0x8c8>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
		}
	}

	// Vuelve a activar la recepción por interrupción
	HAL_UART_Receive_IT(&huart2, buffer, 1);
 8005a50:	2201      	movs	r2, #1
 8005a52:	4906      	ldr	r1, [pc, #24]	@ (8005a6c <HAL_UART_RxCpltCallback+0x89c>)
 8005a54:	4813      	ldr	r0, [pc, #76]	@ (8005aa4 <HAL_UART_RxCpltCallback+0x8d4>)
 8005a56:	f002 ff8e 	bl	8008976 <HAL_UART_Receive_IT>
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd90      	pop	{r4, r7, pc}
 8005a62:	bf00      	nop
 8005a64:	2001c7f8 	.word	0x2001c7f8
 8005a68:	2000fca0 	.word	0x2000fca0
 8005a6c:	2001c778 	.word	0x2001c778
 8005a70:	20016a78 	.word	0x20016a78
 8005a74:	2001cae0 	.word	0x2001cae0
 8005a78:	2001cae4 	.word	0x2001cae4
 8005a7c:	2001cae8 	.word	0x2001cae8
 8005a80:	2001caee 	.word	0x2001caee
 8005a84:	2001caef 	.word	0x2001caef
 8005a88:	2001c908 	.word	0x2001c908
 8005a8c:	2001c93c 	.word	0x2001c93c
 8005a90:	2001c970 	.word	0x2001c970
 8005a94:	2001c9e8 	.word	0x2001c9e8
 8005a98:	2001caec 	.word	0x2001caec
 8005a9c:	20016a79 	.word	0x20016a79
 8005aa0:	2001caed 	.word	0x2001caed
 8005aa4:	20017c30 	.word	0x20017c30

08005aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005aac:	b672      	cpsid	i
}
 8005aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <Error_Handler+0x8>

08005ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	4b10      	ldr	r3, [pc, #64]	@ (8005b00 <HAL_MspInit+0x4c>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8005b00 <HAL_MspInit+0x4c>)
 8005ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <HAL_MspInit+0x4c>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <HAL_MspInit+0x4c>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	4a08      	ldr	r2, [pc, #32]	@ (8005b00 <HAL_MspInit+0x4c>)
 8005ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <HAL_MspInit+0x4c>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800

08005b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	@ 0x28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	609a      	str	r2, [r3, #8]
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a19      	ldr	r2, [pc, #100]	@ (8005b88 <HAL_SPI_MspInit+0x84>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d12b      	bne.n	8005b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	4b18      	ldr	r3, [pc, #96]	@ (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b36:	4b15      	ldr	r3, [pc, #84]	@ (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	4b11      	ldr	r3, [pc, #68]	@ (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	4a10      	ldr	r2, [pc, #64]	@ (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b52:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005b5e:	23e0      	movs	r3, #224	@ 0xe0
 8005b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b62:	2302      	movs	r3, #2
 8005b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b6e:	2305      	movs	r3, #5
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	4619      	mov	r1, r3
 8005b78:	4805      	ldr	r0, [pc, #20]	@ (8005b90 <HAL_SPI_MspInit+0x8c>)
 8005b7a:	f000 fc27 	bl	80063cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005b7e:	bf00      	nop
 8005b80:	3728      	adds	r7, #40	@ 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40013000 	.word	0x40013000
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40020000 	.word	0x40020000

08005b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	4a08      	ldr	r2, [pc, #32]	@ (8005bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40023800 	.word	0x40023800

08005bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf4:	d11d      	bne.n	8005c32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	4b10      	ldr	r3, [pc, #64]	@ (8005c3c <HAL_TIM_MspPostInit+0x68>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005c3c <HAL_TIM_MspPostInit+0x68>)
 8005c00:	f043 0302 	orr.w	r3, r3, #2
 8005c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c06:	4b0d      	ldr	r3, [pc, #52]	@ (8005c3c <HAL_TIM_MspPostInit+0x68>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c12:	2304      	movs	r3, #4
 8005c14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c16:	2302      	movs	r3, #2
 8005c18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c22:	2301      	movs	r3, #1
 8005c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c26:	f107 030c 	add.w	r3, r7, #12
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4804      	ldr	r0, [pc, #16]	@ (8005c40 <HAL_TIM_MspPostInit+0x6c>)
 8005c2e:	f000 fbcd 	bl	80063cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005c32:	bf00      	nop
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	40020400 	.word	0x40020400

08005c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	@ 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4c:	f107 031c 	add.w	r3, r7, #28
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	60da      	str	r2, [r3, #12]
 8005c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a49      	ldr	r2, [pc, #292]	@ (8005d88 <HAL_UART_MspInit+0x144>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d153      	bne.n	8005d0e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	4b48      	ldr	r3, [pc, #288]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	4a47      	ldr	r2, [pc, #284]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005c70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c76:	4b45      	ldr	r3, [pc, #276]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	4b41      	ldr	r3, [pc, #260]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	4a40      	ldr	r2, [pc, #256]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c92:	4b3e      	ldr	r3, [pc, #248]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	4a39      	ldr	r2, [pc, #228]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005ca8:	f043 0308 	orr.w	r3, r3, #8
 8005cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cae:	4b37      	ldr	r3, [pc, #220]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005ccc:	2308      	movs	r3, #8
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cd0:	f107 031c 	add.w	r3, r7, #28
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	482e      	ldr	r0, [pc, #184]	@ (8005d90 <HAL_UART_MspInit+0x14c>)
 8005cd8:	f000 fb78 	bl	80063cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005cdc:	2304      	movs	r3, #4
 8005cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005cec:	2308      	movs	r3, #8
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cf0:	f107 031c 	add.w	r3, r7, #28
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4827      	ldr	r0, [pc, #156]	@ (8005d94 <HAL_UART_MspInit+0x150>)
 8005cf8:	f000 fb68 	bl	80063cc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	2035      	movs	r0, #53	@ 0x35
 8005d02:	f000 fa8e 	bl	8006222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005d06:	2035      	movs	r0, #53	@ 0x35
 8005d08:	f000 faa7 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005d0c:	e038      	b.n	8005d80 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a21      	ldr	r2, [pc, #132]	@ (8005d98 <HAL_UART_MspInit+0x154>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d133      	bne.n	8005d80 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d20:	4a1a      	ldr	r2, [pc, #104]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d28:	4b18      	ldr	r3, [pc, #96]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d34:	2300      	movs	r3, #0
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	4a13      	ldr	r2, [pc, #76]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d44:	4b11      	ldr	r3, [pc, #68]	@ (8005d8c <HAL_UART_MspInit+0x148>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d50:	230c      	movs	r3, #12
 8005d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d54:	2302      	movs	r3, #2
 8005d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d60:	2307      	movs	r3, #7
 8005d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d64:	f107 031c 	add.w	r3, r7, #28
 8005d68:	4619      	mov	r1, r3
 8005d6a:	480c      	ldr	r0, [pc, #48]	@ (8005d9c <HAL_UART_MspInit+0x158>)
 8005d6c:	f000 fb2e 	bl	80063cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d70:	2200      	movs	r2, #0
 8005d72:	2100      	movs	r1, #0
 8005d74:	2026      	movs	r0, #38	@ 0x26
 8005d76:	f000 fa54 	bl	8006222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d7a:	2026      	movs	r0, #38	@ 0x26
 8005d7c:	f000 fa6d 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 8005d80:	bf00      	nop
 8005d82:	3730      	adds	r7, #48	@ 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40005000 	.word	0x40005000
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40020800 	.word	0x40020800
 8005d94:	40020c00 	.word	0x40020c00
 8005d98:	40004400 	.word	0x40004400
 8005d9c:	40020000 	.word	0x40020000

08005da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <NMI_Handler+0x4>

08005da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <HardFault_Handler+0x4>

08005db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <MemManage_Handler+0x4>

08005db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <BusFault_Handler+0x4>

08005dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <UsageFault_Handler+0x4>

08005dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1>0){
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <SysTick_Handler+0x38>)
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <SysTick_Handler+0x18>
		Timer1--;
 8005e00:	4b0a      	ldr	r3, [pc, #40]	@ (8005e2c <SysTick_Handler+0x38>)
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	4b08      	ldr	r3, [pc, #32]	@ (8005e2c <SysTick_Handler+0x38>)
 8005e0a:	801a      	strh	r2, [r3, #0]
	}
	if (Timer2>0){
 8005e0c:	4b08      	ldr	r3, [pc, #32]	@ (8005e30 <SysTick_Handler+0x3c>)
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <SysTick_Handler+0x2c>
		Timer2--;
 8005e14:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <SysTick_Handler+0x3c>)
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	4b04      	ldr	r3, [pc, #16]	@ (8005e30 <SysTick_Handler+0x3c>)
 8005e1e:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e20:	f000 f8e0 	bl	8005fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8005e24:	f000 fa33 	bl	800628e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20016b08 	.word	0x20016b08
 8005e30:	20016b0a 	.word	0x20016b0a

08005e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005e38:	4802      	ldr	r0, [pc, #8]	@ (8005e44 <USART2_IRQHandler+0x10>)
 8005e3a:	f002 fdc1 	bl	80089c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20017c30 	.word	0x20017c30

08005e48 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005e4c:	4802      	ldr	r0, [pc, #8]	@ (8005e58 <UART5_IRQHandler+0x10>)
 8005e4e:	f002 fdb7 	bl	80089c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20017be8 	.word	0x20017be8

08005e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e64:	4a14      	ldr	r2, [pc, #80]	@ (8005eb8 <_sbrk+0x5c>)
 8005e66:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <_sbrk+0x60>)
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e70:	4b13      	ldr	r3, [pc, #76]	@ (8005ec0 <_sbrk+0x64>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e78:	4b11      	ldr	r3, [pc, #68]	@ (8005ec0 <_sbrk+0x64>)
 8005e7a:	4a12      	ldr	r2, [pc, #72]	@ (8005ec4 <_sbrk+0x68>)
 8005e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <_sbrk+0x64>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4413      	add	r3, r2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d207      	bcs.n	8005e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e8c:	f006 fc96 	bl	800c7bc <__errno>
 8005e90:	4603      	mov	r3, r0
 8005e92:	220c      	movs	r2, #12
 8005e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9a:	e009      	b.n	8005eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e9c:	4b08      	ldr	r3, [pc, #32]	@ (8005ec0 <_sbrk+0x64>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ea2:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <_sbrk+0x64>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ec0 <_sbrk+0x64>)
 8005eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005eae:	68fb      	ldr	r3, [r7, #12]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20020000 	.word	0x20020000
 8005ebc:	00000400 	.word	0x00000400
 8005ec0:	2001caf0 	.word	0x2001caf0
 8005ec4:	2001ce80 	.word	0x2001ce80

08005ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ecc:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <SystemInit+0x20>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed2:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <SystemInit+0x20>)
 8005ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005f24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005ef0:	f7ff ffea 	bl	8005ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ef4:	480c      	ldr	r0, [pc, #48]	@ (8005f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ef6:	490d      	ldr	r1, [pc, #52]	@ (8005f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005efc:	e002      	b.n	8005f04 <LoopCopyDataInit>

08005efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f02:	3304      	adds	r3, #4

08005f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f08:	d3f9      	bcc.n	8005efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8005f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f10:	e001      	b.n	8005f16 <LoopFillZerobss>

08005f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f14:	3204      	adds	r2, #4

08005f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f18:	d3fb      	bcc.n	8005f12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005f1a:	f006 fc55 	bl	800c7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f1e:	f7fe fb4b 	bl	80045b8 <main>
  bx  lr    
 8005f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f2c:	20016aec 	.word	0x20016aec
  ldr r2, =_sidata
 8005f30:	0800d65c 	.word	0x0800d65c
  ldr r2, =_sbss
 8005f34:	20016aec 	.word	0x20016aec
  ldr r4, =_ebss
 8005f38:	2001ce7c 	.word	0x2001ce7c

08005f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f3c:	e7fe      	b.n	8005f3c <ADC_IRQHandler>
	...

08005f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f44:	4b0e      	ldr	r3, [pc, #56]	@ (8005f80 <HAL_Init+0x40>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a0d      	ldr	r2, [pc, #52]	@ (8005f80 <HAL_Init+0x40>)
 8005f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <HAL_Init+0x40>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a0a      	ldr	r2, [pc, #40]	@ (8005f80 <HAL_Init+0x40>)
 8005f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f5c:	4b08      	ldr	r3, [pc, #32]	@ (8005f80 <HAL_Init+0x40>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a07      	ldr	r2, [pc, #28]	@ (8005f80 <HAL_Init+0x40>)
 8005f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f68:	2003      	movs	r0, #3
 8005f6a:	f000 f94f 	bl	800620c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f6e:	200f      	movs	r0, #15
 8005f70:	f000 f808 	bl	8005f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f74:	f7ff fd9e 	bl	8005ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40023c00 	.word	0x40023c00

08005f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f8c:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <HAL_InitTick+0x54>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b12      	ldr	r3, [pc, #72]	@ (8005fdc <HAL_InitTick+0x58>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	4619      	mov	r1, r3
 8005f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f967 	bl	8006276 <HAL_SYSTICK_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e00e      	b.n	8005fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d80a      	bhi.n	8005fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	f000 f92f 	bl	8006222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fc4:	4a06      	ldr	r2, [pc, #24]	@ (8005fe0 <HAL_InitTick+0x5c>)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20016a7c 	.word	0x20016a7c
 8005fdc:	20016a84 	.word	0x20016a84
 8005fe0:	20016a80 	.word	0x20016a80

08005fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fe8:	4b06      	ldr	r3, [pc, #24]	@ (8006004 <HAL_IncTick+0x20>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <HAL_IncTick+0x24>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	4a04      	ldr	r2, [pc, #16]	@ (8006008 <HAL_IncTick+0x24>)
 8005ff6:	6013      	str	r3, [r2, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20016a84 	.word	0x20016a84
 8006008:	2001caf4 	.word	0x2001caf4

0800600c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return uwTick;
 8006010:	4b03      	ldr	r3, [pc, #12]	@ (8006020 <HAL_GetTick+0x14>)
 8006012:	681b      	ldr	r3, [r3, #0]
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	2001caf4 	.word	0x2001caf4

08006024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800602c:	f7ff ffee 	bl	800600c <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d005      	beq.n	800604a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800603e:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <HAL_Delay+0x44>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800604a:	bf00      	nop
 800604c:	f7ff ffde 	bl	800600c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	429a      	cmp	r2, r3
 800605a:	d8f7      	bhi.n	800604c <HAL_Delay+0x28>
  {
  }
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20016a84 	.word	0x20016a84

0800606c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800607c:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <__NVIC_SetPriorityGrouping+0x44>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006088:	4013      	ands	r3, r2
 800608a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800609c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800609e:	4a04      	ldr	r2, [pc, #16]	@ (80060b0 <__NVIC_SetPriorityGrouping+0x44>)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	60d3      	str	r3, [r2, #12]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	e000ed00 	.word	0xe000ed00

080060b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060b8:	4b04      	ldr	r3, [pc, #16]	@ (80060cc <__NVIC_GetPriorityGrouping+0x18>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	0a1b      	lsrs	r3, r3, #8
 80060be:	f003 0307 	and.w	r3, r3, #7
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	e000ed00 	.word	0xe000ed00

080060d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db0b      	blt.n	80060fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f003 021f 	and.w	r2, r3, #31
 80060e8:	4907      	ldr	r1, [pc, #28]	@ (8006108 <__NVIC_EnableIRQ+0x38>)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	2001      	movs	r0, #1
 80060f2:	fa00 f202 	lsl.w	r2, r0, r2
 80060f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	e000e100 	.word	0xe000e100

0800610c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	6039      	str	r1, [r7, #0]
 8006116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611c:	2b00      	cmp	r3, #0
 800611e:	db0a      	blt.n	8006136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	490c      	ldr	r1, [pc, #48]	@ (8006158 <__NVIC_SetPriority+0x4c>)
 8006126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612a:	0112      	lsls	r2, r2, #4
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	440b      	add	r3, r1
 8006130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006134:	e00a      	b.n	800614c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	4908      	ldr	r1, [pc, #32]	@ (800615c <__NVIC_SetPriority+0x50>)
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	3b04      	subs	r3, #4
 8006144:	0112      	lsls	r2, r2, #4
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	440b      	add	r3, r1
 800614a:	761a      	strb	r2, [r3, #24]
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000e100 	.word	0xe000e100
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	@ 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f1c3 0307 	rsb	r3, r3, #7
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf28      	it	cs
 800617e:	2304      	movcs	r3, #4
 8006180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3304      	adds	r3, #4
 8006186:	2b06      	cmp	r3, #6
 8006188:	d902      	bls.n	8006190 <NVIC_EncodePriority+0x30>
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3b03      	subs	r3, #3
 800618e:	e000      	b.n	8006192 <NVIC_EncodePriority+0x32>
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006194:	f04f 32ff 	mov.w	r2, #4294967295
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43da      	mvns	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	401a      	ands	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061a8:	f04f 31ff 	mov.w	r1, #4294967295
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	fa01 f303 	lsl.w	r3, r1, r3
 80061b2:	43d9      	mvns	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b8:	4313      	orrs	r3, r2
         );
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3724      	adds	r7, #36	@ 0x24
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061d8:	d301      	bcc.n	80061de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061da:	2301      	movs	r3, #1
 80061dc:	e00f      	b.n	80061fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061de:	4a0a      	ldr	r2, [pc, #40]	@ (8006208 <SysTick_Config+0x40>)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061e6:	210f      	movs	r1, #15
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	f7ff ff8e 	bl	800610c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061f0:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <SysTick_Config+0x40>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061f6:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <SysTick_Config+0x40>)
 80061f8:	2207      	movs	r2, #7
 80061fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	e000e010 	.word	0xe000e010

0800620c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ff29 	bl	800606c <__NVIC_SetPriorityGrouping>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	4603      	mov	r3, r0
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006234:	f7ff ff3e 	bl	80060b4 <__NVIC_GetPriorityGrouping>
 8006238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	6978      	ldr	r0, [r7, #20]
 8006240:	f7ff ff8e 	bl	8006160 <NVIC_EncodePriority>
 8006244:	4602      	mov	r2, r0
 8006246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff5d 	bl	800610c <__NVIC_SetPriority>
}
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	4603      	mov	r3, r0
 8006262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff ff31 	bl	80060d0 <__NVIC_EnableIRQ>
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ffa2 	bl	80061c8 <SysTick_Config>
 8006284:	4603      	mov	r3, r0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006292:	f000 f802 	bl	800629a <HAL_SYSTICK_Callback>
}
 8006296:	bf00      	nop
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800629a:	b480      	push	{r7}
 800629c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80062b6:	f7ff fea9 	bl	800600c <HAL_GetTick>
 80062ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d008      	beq.n	80062da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2280      	movs	r2, #128	@ 0x80
 80062cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e052      	b.n	8006380 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0216 	bic.w	r2, r2, #22
 80062e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <HAL_DMA_Abort+0x62>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0208 	bic.w	r2, r2, #8
 8006318:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800632a:	e013      	b.n	8006354 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800632c:	f7ff fe6e 	bl	800600c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b05      	cmp	r3, #5
 8006338:	d90c      	bls.n	8006354 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2203      	movs	r2, #3
 8006344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e015      	b.n	8006380 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e4      	bne.n	800632c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006366:	223f      	movs	r2, #63	@ 0x3f
 8006368:	409a      	lsls	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d004      	beq.n	80063a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2280      	movs	r2, #128	@ 0x80
 80063a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e00c      	b.n	80063c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2205      	movs	r2, #5
 80063aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b089      	sub	sp, #36	@ 0x24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	e165      	b.n	80066b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063e8:	2201      	movs	r2, #1
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4013      	ands	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	429a      	cmp	r2, r3
 8006402:	f040 8154 	bne.w	80066ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d005      	beq.n	800641e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800641a:	2b02      	cmp	r3, #2
 800641c:	d130      	bne.n	8006480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	2203      	movs	r2, #3
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4313      	orrs	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006454:	2201      	movs	r2, #1
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4013      	ands	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 0201 	and.w	r2, r3, #1
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	4313      	orrs	r3, r2
 8006478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d017      	beq.n	80064bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	2203      	movs	r2, #3
 8006498:	fa02 f303 	lsl.w	r3, r2, r3
 800649c:	43db      	mvns	r3, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d123      	bne.n	8006510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	08da      	lsrs	r2, r3, #3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3208      	adds	r2, #8
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	220f      	movs	r2, #15
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	08da      	lsrs	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3208      	adds	r2, #8
 800650a:	69b9      	ldr	r1, [r7, #24]
 800650c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	2203      	movs	r2, #3
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 0203 	and.w	r2, r3, #3
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80ae 	beq.w	80066ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	4b5d      	ldr	r3, [pc, #372]	@ (80066cc <HAL_GPIO_Init+0x300>)
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	4a5c      	ldr	r2, [pc, #368]	@ (80066cc <HAL_GPIO_Init+0x300>)
 800655c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006560:	6453      	str	r3, [r2, #68]	@ 0x44
 8006562:	4b5a      	ldr	r3, [pc, #360]	@ (80066cc <HAL_GPIO_Init+0x300>)
 8006564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800656e:	4a58      	ldr	r2, [pc, #352]	@ (80066d0 <HAL_GPIO_Init+0x304>)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	089b      	lsrs	r3, r3, #2
 8006574:	3302      	adds	r3, #2
 8006576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800657a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	220f      	movs	r2, #15
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	43db      	mvns	r3, r3
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	4013      	ands	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a4f      	ldr	r2, [pc, #316]	@ (80066d4 <HAL_GPIO_Init+0x308>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d025      	beq.n	80065e6 <HAL_GPIO_Init+0x21a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a4e      	ldr	r2, [pc, #312]	@ (80066d8 <HAL_GPIO_Init+0x30c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d01f      	beq.n	80065e2 <HAL_GPIO_Init+0x216>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a4d      	ldr	r2, [pc, #308]	@ (80066dc <HAL_GPIO_Init+0x310>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d019      	beq.n	80065de <HAL_GPIO_Init+0x212>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a4c      	ldr	r2, [pc, #304]	@ (80066e0 <HAL_GPIO_Init+0x314>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_GPIO_Init+0x20e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a4b      	ldr	r2, [pc, #300]	@ (80066e4 <HAL_GPIO_Init+0x318>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00d      	beq.n	80065d6 <HAL_GPIO_Init+0x20a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a4a      	ldr	r2, [pc, #296]	@ (80066e8 <HAL_GPIO_Init+0x31c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <HAL_GPIO_Init+0x206>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a49      	ldr	r2, [pc, #292]	@ (80066ec <HAL_GPIO_Init+0x320>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_GPIO_Init+0x202>
 80065ca:	2306      	movs	r3, #6
 80065cc:	e00c      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065ce:	2307      	movs	r3, #7
 80065d0:	e00a      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065d2:	2305      	movs	r3, #5
 80065d4:	e008      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065d6:	2304      	movs	r3, #4
 80065d8:	e006      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065da:	2303      	movs	r3, #3
 80065dc:	e004      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065de:	2302      	movs	r3, #2
 80065e0:	e002      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <HAL_GPIO_Init+0x21c>
 80065e6:	2300      	movs	r3, #0
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	f002 0203 	and.w	r2, r2, #3
 80065ee:	0092      	lsls	r2, r2, #2
 80065f0:	4093      	lsls	r3, r2
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065f8:	4935      	ldr	r1, [pc, #212]	@ (80066d0 <HAL_GPIO_Init+0x304>)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	089b      	lsrs	r3, r3, #2
 80065fe:	3302      	adds	r3, #2
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006606:	4b3a      	ldr	r3, [pc, #232]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	43db      	mvns	r3, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4013      	ands	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800662a:	4a31      	ldr	r2, [pc, #196]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006630:	4b2f      	ldr	r3, [pc, #188]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	43db      	mvns	r3, r3
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	4013      	ands	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006654:	4a26      	ldr	r2, [pc, #152]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800665a:	4b25      	ldr	r3, [pc, #148]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	43db      	mvns	r3, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4013      	ands	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800667e:	4a1c      	ldr	r2, [pc, #112]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006684:	4b1a      	ldr	r3, [pc, #104]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066a8:	4a11      	ldr	r2, [pc, #68]	@ (80066f0 <HAL_GPIO_Init+0x324>)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	f67f ae96 	bls.w	80063e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	3724      	adds	r7, #36	@ 0x24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40020000 	.word	0x40020000
 80066d8:	40020400 	.word	0x40020400
 80066dc:	40020800 	.word	0x40020800
 80066e0:	40020c00 	.word	0x40020c00
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40021400 	.word	0x40021400
 80066ec:	40021800 	.word	0x40021800
 80066f0:	40013c00 	.word	0x40013c00

080066f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
 8006700:	4613      	mov	r3, r2
 8006702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006704:	787b      	ldrb	r3, [r7, #1]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800670a:	887a      	ldrh	r2, [r7, #2]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006710:	e003      	b.n	800671a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006712:	887b      	ldrh	r3, [r7, #2]
 8006714:	041a      	lsls	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	619a      	str	r2, [r3, #24]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0cc      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800673c:	4b68      	ldr	r3, [pc, #416]	@ (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d90c      	bls.n	8006764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	4b65      	ldr	r3, [pc, #404]	@ (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b63      	ldr	r3, [pc, #396]	@ (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0b8      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d020      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800677c:	4b59      	ldr	r3, [pc, #356]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	4a58      	ldr	r2, [pc, #352]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006794:	4b53      	ldr	r3, [pc, #332]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4a52      	ldr	r2, [pc, #328]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800679e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067a0:	4b50      	ldr	r3, [pc, #320]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	494d      	ldr	r1, [pc, #308]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d044      	beq.n	8006848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d107      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c6:	4b47      	ldr	r3, [pc, #284]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d119      	bne.n	8006806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e07f      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d003      	beq.n	80067e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d107      	bne.n	80067f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e6:	4b3f      	ldr	r3, [pc, #252]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e06f      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f6:	4b3b      	ldr	r3, [pc, #236]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e067      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006806:	4b37      	ldr	r3, [pc, #220]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 0203 	bic.w	r2, r3, #3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	4934      	ldr	r1, [pc, #208]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	4313      	orrs	r3, r2
 8006816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006818:	f7ff fbf8 	bl	800600c <HAL_GetTick>
 800681c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681e:	e00a      	b.n	8006836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006820:	f7ff fbf4 	bl	800600c <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e04f      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006836:	4b2b      	ldr	r3, [pc, #172]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 020c 	and.w	r2, r3, #12
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	429a      	cmp	r2, r3
 8006846:	d1eb      	bne.n	8006820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006848:	4b25      	ldr	r3, [pc, #148]	@ (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d20c      	bcs.n	8006870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006856:	4b22      	ldr	r3, [pc, #136]	@ (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800685e:	4b20      	ldr	r3, [pc, #128]	@ (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d001      	beq.n	8006870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e032      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800687c:	4b19      	ldr	r3, [pc, #100]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4916      	ldr	r1, [pc, #88]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800689a:	4b12      	ldr	r3, [pc, #72]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	490e      	ldr	r1, [pc, #56]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ae:	f000 f855 	bl	800695c <HAL_RCC_GetSysClockFreq>
 80068b2:	4602      	mov	r2, r0
 80068b4:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	490a      	ldr	r1, [pc, #40]	@ (80068e8 <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	5ccb      	ldrb	r3, [r1, r3]
 80068c2:	fa22 f303 	lsr.w	r3, r2, r3
 80068c6:	4a09      	ldr	r2, [pc, #36]	@ (80068ec <HAL_RCC_ClockConfig+0x1c4>)
 80068c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ca:	4b09      	ldr	r3, [pc, #36]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fb58 	bl	8005f84 <HAL_InitTick>

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40023c00 	.word	0x40023c00
 80068e4:	40023800 	.word	0x40023800
 80068e8:	0800d1c0 	.word	0x0800d1c0
 80068ec:	20016a7c 	.word	0x20016a7c
 80068f0:	20016a80 	.word	0x20016a80

080068f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f8:	4b03      	ldr	r3, [pc, #12]	@ (8006908 <HAL_RCC_GetHCLKFreq+0x14>)
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20016a7c 	.word	0x20016a7c

0800690c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006910:	f7ff fff0 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006914:	4602      	mov	r2, r0
 8006916:	4b05      	ldr	r3, [pc, #20]	@ (800692c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	0a9b      	lsrs	r3, r3, #10
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	4903      	ldr	r1, [pc, #12]	@ (8006930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006922:	5ccb      	ldrb	r3, [r1, r3]
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006928:	4618      	mov	r0, r3
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40023800 	.word	0x40023800
 8006930:	0800d1d0 	.word	0x0800d1d0

08006934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006938:	f7ff ffdc 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 800693c:	4602      	mov	r2, r0
 800693e:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	0b5b      	lsrs	r3, r3, #13
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	4903      	ldr	r1, [pc, #12]	@ (8006958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800694a:	5ccb      	ldrb	r3, [r1, r3]
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006950:	4618      	mov	r0, r3
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40023800 	.word	0x40023800
 8006958:	0800d1d0 	.word	0x0800d1d0

0800695c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800695c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006960:	b0a6      	sub	sp, #152	@ 0x98
 8006962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006982:	4bc8      	ldr	r3, [pc, #800]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b0c      	cmp	r3, #12
 800698c:	f200 817e 	bhi.w	8006c8c <HAL_RCC_GetSysClockFreq+0x330>
 8006990:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069cd 	.word	0x080069cd
 800699c:	08006c8d 	.word	0x08006c8d
 80069a0:	08006c8d 	.word	0x08006c8d
 80069a4:	08006c8d 	.word	0x08006c8d
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	08006c8d 	.word	0x08006c8d
 80069b0:	08006c8d 	.word	0x08006c8d
 80069b4:	08006c8d 	.word	0x08006c8d
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	08006c8d 	.word	0x08006c8d
 80069c0:	08006c8d 	.word	0x08006c8d
 80069c4:	08006c8d 	.word	0x08006c8d
 80069c8:	08006b47 	.word	0x08006b47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069cc:	4bb6      	ldr	r3, [pc, #728]	@ (8006ca8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80069ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80069d2:	e15f      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069d4:	4bb5      	ldr	r3, [pc, #724]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x350>)
 80069d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80069da:	e15b      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069dc:	4bb1      	ldr	r3, [pc, #708]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069e8:	4bae      	ldr	r3, [pc, #696]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d031      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069f4:	4bab      	ldr	r3, [pc, #684]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	099b      	lsrs	r3, r3, #6
 80069fa:	2200      	movs	r2, #0
 80069fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a08:	2300      	movs	r3, #0
 8006a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a0c:	4ba7      	ldr	r3, [pc, #668]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x350>)
 8006a0e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006a12:	462a      	mov	r2, r5
 8006a14:	fb03 f202 	mul.w	r2, r3, r2
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	4aa2      	ldr	r2, [pc, #648]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x350>)
 8006a24:	4621      	mov	r1, r4
 8006a26:	fba1 1202 	umull	r1, r2, r1, r2
 8006a2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a2c:	460a      	mov	r2, r1
 8006a2e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006a30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a32:	4413      	add	r3, r2
 8006a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006a40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a44:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006a48:	f7f9 fe46 	bl	80006d8 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4613      	mov	r3, r2
 8006a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a56:	e064      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a58:	4b92      	ldr	r3, [pc, #584]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	099b      	lsrs	r3, r3, #6
 8006a5e:	2200      	movs	r2, #0
 8006a60:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a62:	657a      	str	r2, [r7, #84]	@ 0x54
 8006a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a70:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006a74:	4622      	mov	r2, r4
 8006a76:	462b      	mov	r3, r5
 8006a78:	f04f 0000 	mov.w	r0, #0
 8006a7c:	f04f 0100 	mov.w	r1, #0
 8006a80:	0159      	lsls	r1, r3, #5
 8006a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a86:	0150      	lsls	r0, r2, #5
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	1a51      	subs	r1, r2, r1
 8006a90:	6139      	str	r1, [r7, #16]
 8006a92:	4629      	mov	r1, r5
 8006a94:	eb63 0301 	sbc.w	r3, r3, r1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006aa6:	4659      	mov	r1, fp
 8006aa8:	018b      	lsls	r3, r1, #6
 8006aaa:	4651      	mov	r1, sl
 8006aac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	018a      	lsls	r2, r1, #6
 8006ab4:	4651      	mov	r1, sl
 8006ab6:	ebb2 0801 	subs.w	r8, r2, r1
 8006aba:	4659      	mov	r1, fp
 8006abc:	eb63 0901 	sbc.w	r9, r3, r1
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006acc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ad0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ad4:	4690      	mov	r8, r2
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	4623      	mov	r3, r4
 8006ada:	eb18 0303 	adds.w	r3, r8, r3
 8006ade:	60bb      	str	r3, [r7, #8]
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	eb49 0303 	adc.w	r3, r9, r3
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006af4:	4629      	mov	r1, r5
 8006af6:	028b      	lsls	r3, r1, #10
 8006af8:	4621      	mov	r1, r4
 8006afa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006afe:	4621      	mov	r1, r4
 8006b00:	028a      	lsls	r2, r1, #10
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b14:	f7f9 fde0 	bl	80006d8 <__aeabi_uldivmod>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b22:	4b60      	ldr	r3, [pc, #384]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8006b34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006b44:	e0a6      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b46:	4b57      	ldr	r3, [pc, #348]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b52:	4b54      	ldr	r3, [pc, #336]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d02a      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5e:	4b51      	ldr	r3, [pc, #324]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	2200      	movs	r2, #0
 8006b66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b70:	2100      	movs	r1, #0
 8006b72:	4b4e      	ldr	r3, [pc, #312]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x350>)
 8006b74:	fb03 f201 	mul.w	r2, r3, r1
 8006b78:	2300      	movs	r3, #0
 8006b7a:	fb00 f303 	mul.w	r3, r0, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	4a4a      	ldr	r2, [pc, #296]	@ (8006cac <HAL_RCC_GetSysClockFreq+0x350>)
 8006b82:	fba0 1202 	umull	r1, r2, r0, r2
 8006b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b88:	460a      	mov	r2, r1
 8006b8a:	673a      	str	r2, [r7, #112]	@ 0x70
 8006b8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006b8e:	4413      	add	r3, r2
 8006b90:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b96:	2200      	movs	r2, #0
 8006b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006ba0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006ba4:	f7f9 fd98 	bl	80006d8 <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4613      	mov	r3, r2
 8006bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bb2:	e05b      	b.n	8006c6c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	099b      	lsrs	r3, r3, #6
 8006bba:	2200      	movs	r2, #0
 8006bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	0159      	lsls	r1, r3, #5
 8006bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006be2:	0150      	lsls	r0, r2, #5
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4641      	mov	r1, r8
 8006bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bee:	4649      	mov	r1, r9
 8006bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c08:	ebb2 040a 	subs.w	r4, r2, sl
 8006c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	00eb      	lsls	r3, r5, #3
 8006c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1e:	00e2      	lsls	r2, r4, #3
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	18e3      	adds	r3, r4, r3
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	eb45 0303 	adc.w	r3, r5, r3
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c3e:	4629      	mov	r1, r5
 8006c40:	028b      	lsls	r3, r1, #10
 8006c42:	4621      	mov	r1, r4
 8006c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c48:	4621      	mov	r1, r4
 8006c4a:	028a      	lsls	r2, r1, #10
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c54:	2200      	movs	r2, #0
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5e:	f7f9 fd3b 	bl	80006d8 <__aeabi_uldivmod>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4613      	mov	r3, r2
 8006c68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	0f1b      	lsrs	r3, r3, #28
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8006c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006c8a:	e003      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006c92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3798      	adds	r7, #152	@ 0x98
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	00f42400 	.word	0x00f42400
 8006cac:	017d7840 	.word	0x017d7840

08006cb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e28d      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8083 	beq.w	8006dd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cd0:	4b94      	ldr	r3, [pc, #592]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d019      	beq.n	8006d10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006cdc:	4b91      	ldr	r3, [pc, #580]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d106      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ce8:	4b8e      	ldr	r3, [pc, #568]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf4:	d00c      	beq.n	8006d10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006cfe:	2b0c      	cmp	r3, #12
 8006d00:	d112      	bne.n	8006d28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d02:	4b88      	ldr	r3, [pc, #544]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d0e:	d10b      	bne.n	8006d28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d10:	4b84      	ldr	r3, [pc, #528]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d05b      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x124>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d157      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e25a      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d30:	d106      	bne.n	8006d40 <HAL_RCC_OscConfig+0x90>
 8006d32:	4b7c      	ldr	r3, [pc, #496]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a7b      	ldr	r2, [pc, #492]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e01d      	b.n	8006d7c <HAL_RCC_OscConfig+0xcc>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d48:	d10c      	bne.n	8006d64 <HAL_RCC_OscConfig+0xb4>
 8006d4a:	4b76      	ldr	r3, [pc, #472]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a75      	ldr	r2, [pc, #468]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	4b73      	ldr	r3, [pc, #460]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a72      	ldr	r2, [pc, #456]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e00b      	b.n	8006d7c <HAL_RCC_OscConfig+0xcc>
 8006d64:	4b6f      	ldr	r3, [pc, #444]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6e      	ldr	r2, [pc, #440]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	4b6c      	ldr	r3, [pc, #432]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a6b      	ldr	r2, [pc, #428]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d013      	beq.n	8006dac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7ff f942 	bl	800600c <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d8c:	f7ff f93e 	bl	800600c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b64      	cmp	r3, #100	@ 0x64
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e21f      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	4b61      	ldr	r3, [pc, #388]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0xdc>
 8006daa:	e014      	b.n	8006dd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7ff f92e 	bl	800600c <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db4:	f7ff f92a 	bl	800600c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b64      	cmp	r3, #100	@ 0x64
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e20b      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc6:	4b57      	ldr	r3, [pc, #348]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x104>
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d06f      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006de2:	4b50      	ldr	r3, [pc, #320]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d017      	beq.n	8006e1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006dee:	4b4d      	ldr	r3, [pc, #308]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d105      	bne.n	8006e06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e06:	4b47      	ldr	r3, [pc, #284]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006e0e:	2b0c      	cmp	r3, #12
 8006e10:	d11c      	bne.n	8006e4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e12:	4b44      	ldr	r3, [pc, #272]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d116      	bne.n	8006e4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1e:	4b41      	ldr	r3, [pc, #260]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_RCC_OscConfig+0x186>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d001      	beq.n	8006e36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e1d3      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e36:	4b3b      	ldr	r3, [pc, #236]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	4937      	ldr	r1, [pc, #220]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e4a:	e03a      	b.n	8006ec2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d020      	beq.n	8006e96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e54:	4b34      	ldr	r3, [pc, #208]	@ (8006f28 <HAL_RCC_OscConfig+0x278>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5a:	f7ff f8d7 	bl	800600c <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e62:	f7ff f8d3 	bl	800600c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e1b4      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e74:	4b2b      	ldr	r3, [pc, #172]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f0      	beq.n	8006e62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e80:	4b28      	ldr	r3, [pc, #160]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	4925      	ldr	r1, [pc, #148]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]
 8006e94:	e015      	b.n	8006ec2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e96:	4b24      	ldr	r3, [pc, #144]	@ (8006f28 <HAL_RCC_OscConfig+0x278>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7ff f8b6 	bl	800600c <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea4:	f7ff f8b2 	bl	800600c <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e193      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d036      	beq.n	8006f3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d016      	beq.n	8006f04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed6:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006edc:	f7ff f896 	bl	800600c <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee4:	f7ff f892 	bl	800600c <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e173      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <HAL_RCC_OscConfig+0x274>)
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f0      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x234>
 8006f02:	e01b      	b.n	8006f3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f04:	4b09      	ldr	r3, [pc, #36]	@ (8006f2c <HAL_RCC_OscConfig+0x27c>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0a:	f7ff f87f 	bl	800600c <HAL_GetTick>
 8006f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f10:	e00e      	b.n	8006f30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f12:	f7ff f87b 	bl	800600c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d907      	bls.n	8006f30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e15c      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
 8006f24:	40023800 	.word	0x40023800
 8006f28:	42470000 	.word	0x42470000
 8006f2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f30:	4b8a      	ldr	r3, [pc, #552]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1ea      	bne.n	8006f12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8097 	beq.w	8007078 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4e:	4b83      	ldr	r3, [pc, #524]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10f      	bne.n	8006f7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	4a7e      	ldr	r2, [pc, #504]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	60bb      	str	r3, [r7, #8]
 8006f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f7a:	4b79      	ldr	r3, [pc, #484]	@ (8007160 <HAL_RCC_OscConfig+0x4b0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d118      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f86:	4b76      	ldr	r3, [pc, #472]	@ (8007160 <HAL_RCC_OscConfig+0x4b0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a75      	ldr	r2, [pc, #468]	@ (8007160 <HAL_RCC_OscConfig+0x4b0>)
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f92:	f7ff f83b 	bl	800600c <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9a:	f7ff f837 	bl	800600c <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e118      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fac:	4b6c      	ldr	r3, [pc, #432]	@ (8007160 <HAL_RCC_OscConfig+0x4b0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0f0      	beq.n	8006f9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d106      	bne.n	8006fce <HAL_RCC_OscConfig+0x31e>
 8006fc0:	4b66      	ldr	r3, [pc, #408]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc4:	4a65      	ldr	r2, [pc, #404]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fcc:	e01c      	b.n	8007008 <HAL_RCC_OscConfig+0x358>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x340>
 8006fd6:	4b61      	ldr	r3, [pc, #388]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fda:	4a60      	ldr	r2, [pc, #384]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006fdc:	f043 0304 	orr.w	r3, r3, #4
 8006fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	4a5d      	ldr	r2, [pc, #372]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fee:	e00b      	b.n	8007008 <HAL_RCC_OscConfig+0x358>
 8006ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff4:	4a59      	ldr	r2, [pc, #356]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ffc:	4b57      	ldr	r3, [pc, #348]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007000:	4a56      	ldr	r2, [pc, #344]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8007002:	f023 0304 	bic.w	r3, r3, #4
 8007006:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fe fffc 	bl	800600c <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007016:	e00a      	b.n	800702e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007018:	f7fe fff8 	bl	800600c <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e0d7      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702e:	4b4b      	ldr	r3, [pc, #300]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ee      	beq.n	8007018 <HAL_RCC_OscConfig+0x368>
 800703a:	e014      	b.n	8007066 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fe ffe6 	bl	800600c <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007042:	e00a      	b.n	800705a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fe ffe2 	bl	800600c <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e0c1      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800705a:	4b40      	ldr	r3, [pc, #256]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1ee      	bne.n	8007044 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d105      	bne.n	8007078 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706c:	4b3b      	ldr	r3, [pc, #236]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	4a3a      	ldr	r2, [pc, #232]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8007072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007076:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80ad 	beq.w	80071dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007082:	4b36      	ldr	r3, [pc, #216]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b08      	cmp	r3, #8
 800708c:	d060      	beq.n	8007150 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d145      	bne.n	8007122 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007096:	4b33      	ldr	r3, [pc, #204]	@ (8007164 <HAL_RCC_OscConfig+0x4b4>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709c:	f7fe ffb6 	bl	800600c <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a4:	f7fe ffb2 	bl	800600c <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e093      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b6:	4b29      	ldr	r3, [pc, #164]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69da      	ldr	r2, [r3, #28]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	019b      	lsls	r3, r3, #6
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	3b01      	subs	r3, #1
 80070dc:	041b      	lsls	r3, r3, #16
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e4:	061b      	lsls	r3, r3, #24
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	071b      	lsls	r3, r3, #28
 80070ee:	491b      	ldr	r1, [pc, #108]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007164 <HAL_RCC_OscConfig+0x4b4>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fa:	f7fe ff87 	bl	800600c <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007102:	f7fe ff83 	bl	800600c <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e064      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007114:	4b11      	ldr	r3, [pc, #68]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x452>
 8007120:	e05c      	b.n	80071dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007122:	4b10      	ldr	r3, [pc, #64]	@ (8007164 <HAL_RCC_OscConfig+0x4b4>)
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007128:	f7fe ff70 	bl	800600c <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007130:	f7fe ff6c 	bl	800600c <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e04d      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007142:	4b06      	ldr	r3, [pc, #24]	@ (800715c <HAL_RCC_OscConfig+0x4ac>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f0      	bne.n	8007130 <HAL_RCC_OscConfig+0x480>
 800714e:	e045      	b.n	80071dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d107      	bne.n	8007168 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e040      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
 800715c:	40023800 	.word	0x40023800
 8007160:	40007000 	.word	0x40007000
 8007164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007168:	4b1f      	ldr	r3, [pc, #124]	@ (80071e8 <HAL_RCC_OscConfig+0x538>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d030      	beq.n	80071d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007180:	429a      	cmp	r2, r3
 8007182:	d129      	bne.n	80071d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718e:	429a      	cmp	r2, r3
 8007190:	d122      	bne.n	80071d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007198:	4013      	ands	r3, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800719e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d119      	bne.n	80071d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	3b01      	subs	r3, #1
 80071b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d10f      	bne.n	80071d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d107      	bne.n	80071d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800

080071ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e07b      	b.n	80072f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d108      	bne.n	8007218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800720e:	d009      	beq.n	8007224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	61da      	str	r2, [r3, #28]
 8007216:	e005      	b.n	8007224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fe fc60 	bl	8005b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800725a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a8:	ea42 0103 	orr.w	r1, r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	f003 0104 	and.w	r1, r3, #4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	f003 0210 	and.w	r2, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b088      	sub	sp, #32
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_SPI_Transmit+0x22>
 800731c:	2302      	movs	r3, #2
 800731e:	e12d      	b.n	800757c <HAL_SPI_Transmit+0x27e>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007328:	f7fe fe70 	bl	800600c <HAL_GetTick>
 800732c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b01      	cmp	r3, #1
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800733e:	2302      	movs	r3, #2
 8007340:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007342:	e116      	b.n	8007572 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_SPI_Transmit+0x52>
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007354:	e10d      	b.n	8007572 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2203      	movs	r2, #3
 800735a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	88fa      	ldrh	r2, [r7, #6]
 800736e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	d10f      	bne.n	80073be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c8:	2b40      	cmp	r3, #64	@ 0x40
 80073ca:	d007      	beq.n	80073dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073e4:	d14f      	bne.n	8007486 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Transmit+0xf6>
 80073ee:	8afb      	ldrh	r3, [r7, #22]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d142      	bne.n	800747a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f8:	881a      	ldrh	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007404:	1c9a      	adds	r2, r3, #2
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007418:	e02f      	b.n	800747a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b02      	cmp	r3, #2
 8007426:	d112      	bne.n	800744e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800744c:	e015      	b.n	800747a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800744e:	f7fe fddd 	bl	800600c <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d803      	bhi.n	8007466 <HAL_SPI_Transmit+0x168>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007464:	d102      	bne.n	800746c <HAL_SPI_Transmit+0x16e>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007478:	e07b      	b.n	8007572 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ca      	bne.n	800741a <HAL_SPI_Transmit+0x11c>
 8007484:	e050      	b.n	8007528 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_SPI_Transmit+0x196>
 800748e:	8afb      	ldrh	r3, [r7, #22]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d144      	bne.n	800751e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80074ba:	e030      	b.n	800751e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d113      	bne.n	80074f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	7812      	ldrb	r2, [r2, #0]
 80074d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074f0:	e015      	b.n	800751e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074f2:	f7fe fd8b 	bl	800600c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d803      	bhi.n	800750a <HAL_SPI_Transmit+0x20c>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d102      	bne.n	8007510 <HAL_SPI_Transmit+0x212>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800751c:	e029      	b.n	8007572 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1c9      	bne.n	80074bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fa61 	bl	80079f4 <SPI_EndRxTxTransaction>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e003      	b.n	8007572 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800757a:	7ffb      	ldrb	r3, [r7, #31]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08c      	sub	sp, #48	@ 0x30
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007592:	2301      	movs	r3, #1
 8007594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x26>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e198      	b.n	80078dc <HAL_SPI_TransmitReceive+0x358>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b2:	f7fe fd2b 	bl	800600c <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d00f      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x70>
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075da:	d107      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x68>
 80075e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d003      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80075f2:	e16d      	b.n	80078d0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x82>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x82>
 8007600:	887b      	ldrh	r3, [r7, #2]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800760c:	e160      	b.n	80078d0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b04      	cmp	r3, #4
 8007618:	d003      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2205      	movs	r2, #5
 800761e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	887a      	ldrh	r2, [r7, #2]
 8007632:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	887a      	ldrh	r2, [r7, #2]
 8007638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	887a      	ldrh	r2, [r7, #2]
 8007644:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	887a      	ldrh	r2, [r7, #2]
 800764a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007662:	2b40      	cmp	r3, #64	@ 0x40
 8007664:	d007      	beq.n	8007676 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800767e:	d17c      	bne.n	800777a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <HAL_SPI_TransmitReceive+0x10a>
 8007688:	8b7b      	ldrh	r3, [r7, #26]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d16a      	bne.n	8007764 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007692:	881a      	ldrh	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b2:	e057      	b.n	8007764 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d11b      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x176>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <HAL_SPI_TransmitReceive+0x176>
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d113      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e2:	1c9a      	adds	r2, r3, #2
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d119      	bne.n	800773c <HAL_SPI_TransmitReceive+0x1b8>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d014      	beq.n	800773c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771c:	b292      	uxth	r2, r2
 800771e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	1c9a      	adds	r2, r3, #2
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007738:	2301      	movs	r3, #1
 800773a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800773c:	f7fe fc66 	bl	800600c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007748:	429a      	cmp	r2, r3
 800774a:	d80b      	bhi.n	8007764 <HAL_SPI_TransmitReceive+0x1e0>
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007752:	d007      	beq.n	8007764 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007762:	e0b5      	b.n	80078d0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1a2      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x130>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d19d      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x130>
 8007778:	e080      	b.n	800787c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_SPI_TransmitReceive+0x204>
 8007782:	8b7b      	ldrh	r3, [r7, #26]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d16f      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	330c      	adds	r3, #12
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ae:	e05b      	b.n	8007868 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d11c      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x274>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d017      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x274>
 80077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d114      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	7812      	ldrb	r2, [r2, #0]
 80077da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b01      	cmp	r3, #1
 8007804:	d119      	bne.n	800783a <HAL_SPI_TransmitReceive+0x2b6>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d014      	beq.n	800783a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007836:	2301      	movs	r3, #1
 8007838:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800783a:	f7fe fbe7 	bl	800600c <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007846:	429a      	cmp	r2, r3
 8007848:	d803      	bhi.n	8007852 <HAL_SPI_TransmitReceive+0x2ce>
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d102      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x2d4>
 8007852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d107      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007866:	e033      	b.n	80078d0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d19e      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x22c>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d199      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800787c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f8b7 	bl	80079f4 <SPI_EndRxTxTransaction>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007898:	e01a      	b.n	80078d0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c6:	e003      	b.n	80078d0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80078d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3730      	adds	r7, #48	@ 0x30
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078f4:	f7fe fb8a 	bl	800600c <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fc:	1a9b      	subs	r3, r3, r2
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	4413      	add	r3, r2
 8007902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007904:	f7fe fb82 	bl	800600c <HAL_GetTick>
 8007908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800790a:	4b39      	ldr	r3, [pc, #228]	@ (80079f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	015b      	lsls	r3, r3, #5
 8007910:	0d1b      	lsrs	r3, r3, #20
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	fb02 f303 	mul.w	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800791a:	e054      	b.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d050      	beq.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007924:	f7fe fb72 	bl	800600c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	429a      	cmp	r2, r3
 8007932:	d902      	bls.n	800793a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d13d      	bne.n	80079b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007952:	d111      	bne.n	8007978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800795c:	d004      	beq.n	8007968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007966:	d107      	bne.n	8007978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007980:	d10f      	bne.n	80079a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e017      	b.n	80079e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4013      	ands	r3, r2
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	bf0c      	ite	eq
 80079d6:	2301      	moveq	r3, #1
 80079d8:	2300      	movne	r3, #0
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d19b      	bne.n	800791c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20016a7c 	.word	0x20016a7c

080079f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2201      	movs	r2, #1
 8007a08:	2102      	movs	r1, #2
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f7ff ff6a 	bl	80078e4 <SPI_WaitFlagStateUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e032      	b.n	8007a8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a26:	4b1b      	ldr	r3, [pc, #108]	@ (8007a94 <SPI_EndRxTxTransaction+0xa0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007a98 <SPI_EndRxTxTransaction+0xa4>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	0d5b      	lsrs	r3, r3, #21
 8007a32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a44:	d112      	bne.n	8007a6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2180      	movs	r1, #128	@ 0x80
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff ff47 	bl	80078e4 <SPI_WaitFlagStateUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d016      	beq.n	8007a8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a60:	f043 0220 	orr.w	r2, r3, #32
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e00f      	b.n	8007a8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a82:	2b80      	cmp	r3, #128	@ 0x80
 8007a84:	d0f2      	beq.n	8007a6c <SPI_EndRxTxTransaction+0x78>
 8007a86:	e000      	b.n	8007a8a <SPI_EndRxTxTransaction+0x96>
        break;
 8007a88:	bf00      	nop
  }

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20016a7c 	.word	0x20016a7c
 8007a98:	165e9f81 	.word	0x165e9f81

08007a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e041      	b.n	8007b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fe f866 	bl	8005b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f000 fad8 	bl	8008090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e041      	b.n	8007bd0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f839 	bl	8007bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f000 fa89 	bl	8008090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <HAL_TIM_PWM_Start+0x24>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	bf14      	ite	ne
 8007c08:	2301      	movne	r3, #1
 8007c0a:	2300      	moveq	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	e022      	b.n	8007c56 <HAL_TIM_PWM_Start+0x6a>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d109      	bne.n	8007c2a <HAL_TIM_PWM_Start+0x3e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	bf14      	ite	ne
 8007c22:	2301      	movne	r3, #1
 8007c24:	2300      	moveq	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	e015      	b.n	8007c56 <HAL_TIM_PWM_Start+0x6a>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d109      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x58>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	bf14      	ite	ne
 8007c3c:	2301      	movne	r3, #1
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	e008      	b.n	8007c56 <HAL_TIM_PWM_Start+0x6a>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e07c      	b.n	8007d58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <HAL_TIM_PWM_Start+0x82>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c6c:	e013      	b.n	8007c96 <HAL_TIM_PWM_Start+0xaa>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d104      	bne.n	8007c7e <HAL_TIM_PWM_Start+0x92>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c7c:	e00b      	b.n	8007c96 <HAL_TIM_PWM_Start+0xaa>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d104      	bne.n	8007c8e <HAL_TIM_PWM_Start+0xa2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c8c:	e003      	b.n	8007c96 <HAL_TIM_PWM_Start+0xaa>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fcec 	bl	800867c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8007d60 <HAL_TIM_PWM_Start+0x174>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIM_PWM_Start+0xcc>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007d64 <HAL_TIM_PWM_Start+0x178>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIM_PWM_Start+0xd0>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e000      	b.n	8007cbe <HAL_TIM_PWM_Start+0xd2>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a22      	ldr	r2, [pc, #136]	@ (8007d60 <HAL_TIM_PWM_Start+0x174>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d022      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce4:	d01d      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1f      	ldr	r2, [pc, #124]	@ (8007d68 <HAL_TIM_PWM_Start+0x17c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d018      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d6c <HAL_TIM_PWM_Start+0x180>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007d70 <HAL_TIM_PWM_Start+0x184>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00e      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a16      	ldr	r2, [pc, #88]	@ (8007d64 <HAL_TIM_PWM_Start+0x178>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d009      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a18      	ldr	r2, [pc, #96]	@ (8007d74 <HAL_TIM_PWM_Start+0x188>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d004      	beq.n	8007d22 <HAL_TIM_PWM_Start+0x136>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a16      	ldr	r2, [pc, #88]	@ (8007d78 <HAL_TIM_PWM_Start+0x18c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d111      	bne.n	8007d46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b06      	cmp	r3, #6
 8007d32:	d010      	beq.n	8007d56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d44:	e007      	b.n	8007d56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0201 	orr.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40010400 	.word	0x40010400
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	40000800 	.word	0x40000800
 8007d70:	40000c00 	.word	0x40000c00
 8007d74:	40014000 	.word	0x40014000
 8007d78:	40001800 	.word	0x40001800

08007d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e0ae      	b.n	8007ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	f200 809f 	bhi.w	8007ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007daa:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007ee9 	.word	0x08007ee9
 8007db8:	08007ee9 	.word	0x08007ee9
 8007dbc:	08007ee9 	.word	0x08007ee9
 8007dc0:	08007e25 	.word	0x08007e25
 8007dc4:	08007ee9 	.word	0x08007ee9
 8007dc8:	08007ee9 	.word	0x08007ee9
 8007dcc:	08007ee9 	.word	0x08007ee9
 8007dd0:	08007e67 	.word	0x08007e67
 8007dd4:	08007ee9 	.word	0x08007ee9
 8007dd8:	08007ee9 	.word	0x08007ee9
 8007ddc:	08007ee9 	.word	0x08007ee9
 8007de0:	08007ea7 	.word	0x08007ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f9fc 	bl	80081e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0208 	orr.w	r2, r2, #8
 8007dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0204 	bic.w	r2, r2, #4
 8007e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6999      	ldr	r1, [r3, #24]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	619a      	str	r2, [r3, #24]
      break;
 8007e22:	e064      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fa4c 	bl	80082c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6999      	ldr	r1, [r3, #24]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	619a      	str	r2, [r3, #24]
      break;
 8007e64:	e043      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 faa1 	bl	80083b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0208 	orr.w	r2, r2, #8
 8007e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0204 	bic.w	r2, r2, #4
 8007e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69d9      	ldr	r1, [r3, #28]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	61da      	str	r2, [r3, #28]
      break;
 8007ea4:	e023      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68b9      	ldr	r1, [r7, #8]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 faf5 	bl	800849c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69d9      	ldr	r1, [r3, #28]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	021a      	lsls	r2, r3, #8
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	61da      	str	r2, [r3, #28]
      break;
 8007ee6:	e002      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	75fb      	strb	r3, [r7, #23]
      break;
 8007eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIM_ConfigClockSource+0x1c>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e0b4      	b.n	8008086 <HAL_TIM_ConfigClockSource+0x186>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f54:	d03e      	beq.n	8007fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5a:	f200 8087 	bhi.w	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f62:	f000 8086 	beq.w	8008072 <HAL_TIM_ConfigClockSource+0x172>
 8007f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f6a:	d87f      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f6c:	2b70      	cmp	r3, #112	@ 0x70
 8007f6e:	d01a      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8007f70:	2b70      	cmp	r3, #112	@ 0x70
 8007f72:	d87b      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f74:	2b60      	cmp	r3, #96	@ 0x60
 8007f76:	d050      	beq.n	800801a <HAL_TIM_ConfigClockSource+0x11a>
 8007f78:	2b60      	cmp	r3, #96	@ 0x60
 8007f7a:	d877      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f7c:	2b50      	cmp	r3, #80	@ 0x50
 8007f7e:	d03c      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0xfa>
 8007f80:	2b50      	cmp	r3, #80	@ 0x50
 8007f82:	d873      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f84:	2b40      	cmp	r3, #64	@ 0x40
 8007f86:	d058      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x13a>
 8007f88:	2b40      	cmp	r3, #64	@ 0x40
 8007f8a:	d86f      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f8c:	2b30      	cmp	r3, #48	@ 0x30
 8007f8e:	d064      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x15a>
 8007f90:	2b30      	cmp	r3, #48	@ 0x30
 8007f92:	d86b      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d060      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x15a>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d867      	bhi.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d05c      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x15a>
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d05a      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x15a>
 8007fa4:	e062      	b.n	800806c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fb6:	f000 fb41 	bl	800863c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	609a      	str	r2, [r3, #8]
      break;
 8007fd2:	e04f      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	f000 fb2a 	bl	800863c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ff6:	609a      	str	r2, [r3, #8]
      break;
 8007ff8:	e03c      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008006:	461a      	mov	r2, r3
 8008008:	f000 fa9e 	bl	8008548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2150      	movs	r1, #80	@ 0x50
 8008012:	4618      	mov	r0, r3
 8008014:	f000 faf7 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8008018:	e02c      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008026:	461a      	mov	r2, r3
 8008028:	f000 fabd 	bl	80085a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2160      	movs	r1, #96	@ 0x60
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fae7 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8008038:	e01c      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008046:	461a      	mov	r2, r3
 8008048:	f000 fa7e 	bl	8008548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2140      	movs	r1, #64	@ 0x40
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fad7 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 8008058:	e00c      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f000 face 	bl	8008606 <TIM_ITRx_SetConfig>
      break;
 800806a:	e003      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
      break;
 8008070:	e000      	b.n	8008074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a46      	ldr	r2, [pc, #280]	@ (80081bc <TIM_Base_SetConfig+0x12c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d013      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ae:	d00f      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a43      	ldr	r2, [pc, #268]	@ (80081c0 <TIM_Base_SetConfig+0x130>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00b      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a42      	ldr	r2, [pc, #264]	@ (80081c4 <TIM_Base_SetConfig+0x134>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d007      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a41      	ldr	r2, [pc, #260]	@ (80081c8 <TIM_Base_SetConfig+0x138>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a40      	ldr	r2, [pc, #256]	@ (80081cc <TIM_Base_SetConfig+0x13c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d108      	bne.n	80080e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a35      	ldr	r2, [pc, #212]	@ (80081bc <TIM_Base_SetConfig+0x12c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d02b      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f0:	d027      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a32      	ldr	r2, [pc, #200]	@ (80081c0 <TIM_Base_SetConfig+0x130>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d023      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a31      	ldr	r2, [pc, #196]	@ (80081c4 <TIM_Base_SetConfig+0x134>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01f      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a30      	ldr	r2, [pc, #192]	@ (80081c8 <TIM_Base_SetConfig+0x138>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01b      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a2f      	ldr	r2, [pc, #188]	@ (80081cc <TIM_Base_SetConfig+0x13c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d017      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2e      	ldr	r2, [pc, #184]	@ (80081d0 <TIM_Base_SetConfig+0x140>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2d      	ldr	r2, [pc, #180]	@ (80081d4 <TIM_Base_SetConfig+0x144>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00f      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2c      	ldr	r2, [pc, #176]	@ (80081d8 <TIM_Base_SetConfig+0x148>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00b      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2b      	ldr	r2, [pc, #172]	@ (80081dc <TIM_Base_SetConfig+0x14c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d007      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2a      	ldr	r2, [pc, #168]	@ (80081e0 <TIM_Base_SetConfig+0x150>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a29      	ldr	r2, [pc, #164]	@ (80081e4 <TIM_Base_SetConfig+0x154>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d108      	bne.n	8008154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a10      	ldr	r2, [pc, #64]	@ (80081bc <TIM_Base_SetConfig+0x12c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d003      	beq.n	8008188 <TIM_Base_SetConfig+0xf8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a12      	ldr	r2, [pc, #72]	@ (80081cc <TIM_Base_SetConfig+0x13c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d103      	bne.n	8008190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d105      	bne.n	80081ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f023 0201 	bic.w	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]
  }
}
 80081ae:	bf00      	nop
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40010000 	.word	0x40010000
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800
 80081c8:	40000c00 	.word	0x40000c00
 80081cc:	40010400 	.word	0x40010400
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400
 80081d8:	40014800 	.word	0x40014800
 80081dc:	40001800 	.word	0x40001800
 80081e0:	40001c00 	.word	0x40001c00
 80081e4:	40002000 	.word	0x40002000

080081e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	f023 0201 	bic.w	r2, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0303 	bic.w	r3, r3, #3
 800821e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f023 0302 	bic.w	r3, r3, #2
 8008230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a20      	ldr	r2, [pc, #128]	@ (80082c0 <TIM_OC1_SetConfig+0xd8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_OC1_SetConfig+0x64>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a1f      	ldr	r2, [pc, #124]	@ (80082c4 <TIM_OC1_SetConfig+0xdc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d10c      	bne.n	8008266 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f023 0308 	bic.w	r3, r3, #8
 8008252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f023 0304 	bic.w	r3, r3, #4
 8008264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a15      	ldr	r2, [pc, #84]	@ (80082c0 <TIM_OC1_SetConfig+0xd8>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_OC1_SetConfig+0x8e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a14      	ldr	r2, [pc, #80]	@ (80082c4 <TIM_OC1_SetConfig+0xdc>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d111      	bne.n	800829a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800827c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	621a      	str	r2, [r3, #32]
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40010400 	.word	0x40010400

080082c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	f023 0210 	bic.w	r2, r3, #16
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 0320 	bic.w	r3, r3, #32
 8008312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a22      	ldr	r2, [pc, #136]	@ (80083ac <TIM_OC2_SetConfig+0xe4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d003      	beq.n	8008330 <TIM_OC2_SetConfig+0x68>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a21      	ldr	r2, [pc, #132]	@ (80083b0 <TIM_OC2_SetConfig+0xe8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d10d      	bne.n	800834c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800834a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a17      	ldr	r2, [pc, #92]	@ (80083ac <TIM_OC2_SetConfig+0xe4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_OC2_SetConfig+0x94>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a16      	ldr	r2, [pc, #88]	@ (80083b0 <TIM_OC2_SetConfig+0xe8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d113      	bne.n	8008384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800836a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40010000 	.word	0x40010000
 80083b0:	40010400 	.word	0x40010400

080083b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a21      	ldr	r2, [pc, #132]	@ (8008494 <TIM_OC3_SetConfig+0xe0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_OC3_SetConfig+0x66>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a20      	ldr	r2, [pc, #128]	@ (8008498 <TIM_OC3_SetConfig+0xe4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d10d      	bne.n	8008436 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <TIM_OC3_SetConfig+0xe0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d003      	beq.n	8008446 <TIM_OC3_SetConfig+0x92>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a15      	ldr	r2, [pc, #84]	@ (8008498 <TIM_OC3_SetConfig+0xe4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d113      	bne.n	800846e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800844c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	621a      	str	r2, [r3, #32]
}
 8008488:	bf00      	nop
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40010000 	.word	0x40010000
 8008498:	40010400 	.word	0x40010400

0800849c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	031b      	lsls	r3, r3, #12
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a12      	ldr	r2, [pc, #72]	@ (8008540 <TIM_OC4_SetConfig+0xa4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_OC4_SetConfig+0x68>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a11      	ldr	r2, [pc, #68]	@ (8008544 <TIM_OC4_SetConfig+0xa8>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d109      	bne.n	8008518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800850a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	019b      	lsls	r3, r3, #6
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000
 8008544:	40010400 	.word	0x40010400

08008548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	f023 0201 	bic.w	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f023 030a 	bic.w	r3, r3, #10
 8008584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	621a      	str	r2, [r3, #32]
}
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b087      	sub	sp, #28
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f023 0210 	bic.w	r2, r3, #16
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	031b      	lsls	r3, r3, #12
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	4313      	orrs	r3, r2
 80085da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	f043 0307 	orr.w	r3, r3, #7
 8008628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	609a      	str	r2, [r3, #8]
}
 8008630:	bf00      	nop
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	021a      	lsls	r2, r3, #8
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	431a      	orrs	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4313      	orrs	r3, r2
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	609a      	str	r2, [r3, #8]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 031f 	and.w	r3, r3, #31
 800868e:	2201      	movs	r2, #1
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1a      	ldr	r2, [r3, #32]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	43db      	mvns	r3, r3
 800869e:	401a      	ands	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a1a      	ldr	r2, [r3, #32]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	fa01 f303 	lsl.w	r3, r1, r3
 80086b4:	431a      	orrs	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	621a      	str	r2, [r3, #32]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086dc:	2302      	movs	r3, #2
 80086de:	e05a      	b.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a21      	ldr	r2, [pc, #132]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d022      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872c:	d01d      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1d      	ldr	r2, [pc, #116]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d018      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1b      	ldr	r2, [pc, #108]	@ (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d013      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1a      	ldr	r2, [pc, #104]	@ (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00e      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a18      	ldr	r2, [pc, #96]	@ (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d009      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a17      	ldr	r2, [pc, #92]	@ (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a15      	ldr	r2, [pc, #84]	@ (80087bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d10c      	bne.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4313      	orrs	r3, r2
 800877a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40001800 	.word	0x40001800

080087c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e042      	b.n	8008858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7fd fa2c 	bl	8005c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2224      	movs	r2, #36	@ 0x24
 80087f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fdbd 	bl	8009384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	691a      	ldr	r2, [r3, #16]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695a      	ldr	r2, [r3, #20]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	@ 0x28
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b20      	cmp	r3, #32
 800887e:	d175      	bne.n	800896c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <HAL_UART_Transmit+0x2c>
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e06e      	b.n	800896e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2221      	movs	r2, #33	@ 0x21
 800889a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800889e:	f7fd fbb5 	bl	800600c <HAL_GetTick>
 80088a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088b8:	d108      	bne.n	80088cc <HAL_UART_Transmit+0x6c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	e003      	b.n	80088d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088d4:	e02e      	b.n	8008934 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	2180      	movs	r1, #128	@ 0x80
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 fb1f 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e03a      	b.n	800896e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10b      	bne.n	8008916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800890c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	3302      	adds	r3, #2
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	e007      	b.n	8008926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	3301      	adds	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1cb      	bne.n	80088d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	2140      	movs	r1, #64	@ 0x40
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 faeb 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e006      	b.n	800896e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	e000      	b.n	800896e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800896c:	2302      	movs	r3, #2
  }
}
 800896e:	4618      	mov	r0, r3
 8008970:	3720      	adds	r7, #32
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	4613      	mov	r3, r2
 8008982:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b20      	cmp	r3, #32
 800898e:	d112      	bne.n	80089b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <HAL_UART_Receive_IT+0x26>
 8008996:	88fb      	ldrh	r3, [r7, #6]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e00b      	b.n	80089b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	461a      	mov	r2, r3
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 fb12 	bl	8008fd6 <UART_Start_Receive_IT>
 80089b2:	4603      	mov	r3, r0
 80089b4:	e000      	b.n	80089b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80089b6:	2302      	movs	r3, #2
  }
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b0ba      	sub	sp, #232	@ 0xe8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80089fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10f      	bne.n	8008a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <HAL_UART_IRQHandler+0x66>
 8008a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fbf2 	bl	8009208 <UART_Receive_IT>
      return;
 8008a24:	e25b      	b.n	8008ede <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 80de 	beq.w	8008bec <HAL_UART_IRQHandler+0x22c>
 8008a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80d1 	beq.w	8008bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <HAL_UART_IRQHandler+0xae>
 8008a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a66:	f043 0201 	orr.w	r2, r3, #1
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00b      	beq.n	8008a92 <HAL_UART_IRQHandler+0xd2>
 8008a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8a:	f043 0202 	orr.w	r2, r3, #2
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xf6>
 8008a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aae:	f043 0204 	orr.w	r2, r3, #4
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d011      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x126>
 8008ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d105      	bne.n	8008ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ade:	f043 0208 	orr.w	r2, r3, #8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 81f2 	beq.w	8008ed4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d008      	beq.n	8008b0e <HAL_UART_IRQHandler+0x14e>
 8008afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fb7d 	bl	8009208 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b18:	2b40      	cmp	r3, #64	@ 0x40
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2301      	moveq	r3, #1
 8008b1e:	2300      	movne	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b2a:	f003 0308 	and.w	r3, r3, #8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <HAL_UART_IRQHandler+0x17a>
 8008b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d04f      	beq.n	8008bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa85 	bl	800904a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4a:	2b40      	cmp	r3, #64	@ 0x40
 8008b4c:	d141      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3314      	adds	r3, #20
 8008b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3314      	adds	r3, #20
 8008b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1d9      	bne.n	8008b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d013      	beq.n	8008bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8008da0 <HAL_UART_IRQHandler+0x3e0>)
 8008ba8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fd fbea 	bl	8006388 <HAL_DMA_Abort_IT>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d016      	beq.n	8008be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc8:	e00e      	b.n	8008be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f994 	bl	8008ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd0:	e00a      	b.n	8008be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f990 	bl	8008ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd8:	e006      	b.n	8008be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f98c 	bl	8008ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008be6:	e175      	b.n	8008ed4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be8:	bf00      	nop
    return;
 8008bea:	e173      	b.n	8008ed4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	f040 814f 	bne.w	8008e94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8148 	beq.w	8008e94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8141 	beq.w	8008e94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c12:	2300      	movs	r3, #0
 8008c14:	60bb      	str	r3, [r7, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60bb      	str	r3, [r7, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	60bb      	str	r3, [r7, #8]
 8008c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c32:	2b40      	cmp	r3, #64	@ 0x40
 8008c34:	f040 80b6 	bne.w	8008da4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 8145 	beq.w	8008ed8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c56:	429a      	cmp	r2, r3
 8008c58:	f080 813e 	bcs.w	8008ed8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c6e:	f000 8088 	beq.w	8008d82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	330c      	adds	r3, #12
 8008c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	330c      	adds	r3, #12
 8008c9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008c9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1d9      	bne.n	8008c72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3314      	adds	r3, #20
 8008cc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cd0:	f023 0301 	bic.w	r3, r3, #1
 8008cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3314      	adds	r3, #20
 8008cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ce2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e1      	bne.n	8008cbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3314      	adds	r3, #20
 8008d00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3314      	adds	r3, #20
 8008d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e3      	bne.n	8008cfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d52:	f023 0310 	bic.w	r3, r3, #16
 8008d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	330c      	adds	r3, #12
 8008d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008d64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008d66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e3      	bne.n	8008d40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fd fa93 	bl	80062a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f8b7 	bl	8008f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d9e:	e09b      	b.n	8008ed8 <HAL_UART_IRQHandler+0x518>
 8008da0:	08009111 	.word	0x08009111
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 808e 	beq.w	8008edc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8089 	beq.w	8008edc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	330c      	adds	r3, #12
 8008dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008de0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008dee:	647a      	str	r2, [r7, #68]	@ 0x44
 8008df0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e3      	bne.n	8008dca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	623b      	str	r3, [r7, #32]
   return(result);
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e26:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e2e:	e841 2300 	strex	r3, r2, [r1]
 8008e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e3      	bne.n	8008e02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	330c      	adds	r3, #12
 8008e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0310 	bic.w	r3, r3, #16
 8008e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	330c      	adds	r3, #12
 8008e68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008e6c:	61fa      	str	r2, [r7, #28]
 8008e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	69b9      	ldr	r1, [r7, #24]
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	617b      	str	r3, [r7, #20]
   return(result);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e3      	bne.n	8008e48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f83d 	bl	8008f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e92:	e023      	b.n	8008edc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x4f4>
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f943 	bl	8009138 <UART_Transmit_IT>
    return;
 8008eb2:	e014      	b.n	8008ede <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00e      	beq.n	8008ede <HAL_UART_IRQHandler+0x51e>
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d008      	beq.n	8008ede <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f983 	bl	80091d8 <UART_EndTransmit_IT>
    return;
 8008ed2:	e004      	b.n	8008ede <HAL_UART_IRQHandler+0x51e>
    return;
 8008ed4:	bf00      	nop
 8008ed6:	e002      	b.n	8008ede <HAL_UART_IRQHandler+0x51e>
      return;
 8008ed8:	bf00      	nop
 8008eda:	e000      	b.n	8008ede <HAL_UART_IRQHandler+0x51e>
      return;
 8008edc:	bf00      	nop
  }
}
 8008ede:	37e8      	adds	r7, #232	@ 0xe8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f34:	e03b      	b.n	8008fae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d037      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3e:	f7fd f865 	bl	800600c <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d302      	bcc.n	8008f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e03a      	b.n	8008fce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f003 0304 	and.w	r3, r3, #4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d023      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b80      	cmp	r3, #128	@ 0x80
 8008f6a:	d020      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b40      	cmp	r3, #64	@ 0x40
 8008f70:	d01d      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d116      	bne.n	8008fae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008f80:	2300      	movs	r3, #0
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f857 	bl	800904a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e00f      	b.n	8008fce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	2300      	movne	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d0b4      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	88fa      	ldrh	r2, [r7, #6]
 8008fee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	88fa      	ldrh	r2, [r7, #6]
 8008ff4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2222      	movs	r2, #34	@ 0x22
 8009000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800901a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0201 	orr.w	r2, r2, #1
 800902a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0220 	orr.w	r2, r2, #32
 800903a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800904a:	b480      	push	{r7}
 800904c:	b095      	sub	sp, #84	@ 0x54
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	330c      	adds	r3, #12
 8009058:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009072:	643a      	str	r2, [r7, #64]	@ 0x40
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009078:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3314      	adds	r3, #20
 800908c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	61fb      	str	r3, [r7, #28]
   return(result);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	f023 0301 	bic.w	r3, r3, #1
 800909c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3314      	adds	r3, #20
 80090a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e5      	bne.n	8009086 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d119      	bne.n	80090f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	330c      	adds	r3, #12
 80090c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f023 0310 	bic.w	r3, r3, #16
 80090d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090e2:	61ba      	str	r2, [r7, #24]
 80090e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6979      	ldr	r1, [r7, #20]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	613b      	str	r3, [r7, #16]
   return(result);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e5      	bne.n	80090c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009104:	bf00      	nop
 8009106:	3754      	adds	r7, #84	@ 0x54
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fee4 	bl	8008ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b21      	cmp	r3, #33	@ 0x21
 800914a:	d13e      	bne.n	80091ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009154:	d114      	bne.n	8009180 <UART_Transmit_IT+0x48>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d110      	bne.n	8009180 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009172:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	1c9a      	adds	r2, r3, #2
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	621a      	str	r2, [r3, #32]
 800917e:	e008      	b.n	8009192 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	1c59      	adds	r1, r3, #1
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6211      	str	r1, [r2, #32]
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009196:	b29b      	uxth	r3, r3
 8009198:	3b01      	subs	r3, #1
 800919a:	b29b      	uxth	r3, r3
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	4619      	mov	r1, r3
 80091a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10f      	bne.n	80091c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091ca:	2302      	movs	r3, #2
  }
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff fe73 	bl	8008ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08c      	sub	sp, #48	@ 0x30
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b22      	cmp	r3, #34	@ 0x22
 800921a:	f040 80ae 	bne.w	800937a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009226:	d117      	bne.n	8009258 <UART_Receive_IT+0x50>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d113      	bne.n	8009258 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009238:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009246:	b29a      	uxth	r2, r3
 8009248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009250:	1c9a      	adds	r2, r3, #2
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	629a      	str	r2, [r3, #40]	@ 0x28
 8009256:	e026      	b.n	80092a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800926a:	d007      	beq.n	800927c <UART_Receive_IT+0x74>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <UART_Receive_IT+0x82>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e008      	b.n	800929c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009296:	b2da      	uxtb	r2, r3
 8009298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	4619      	mov	r1, r3
 80092b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d15d      	bne.n	8009376 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0220 	bic.w	r2, r2, #32
 80092c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	695a      	ldr	r2, [r3, #20]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 0201 	bic.w	r2, r2, #1
 80092e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d135      	bne.n	800936c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	330c      	adds	r3, #12
 800930c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	613b      	str	r3, [r7, #16]
   return(result);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f023 0310 	bic.w	r3, r3, #16
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009326:	623a      	str	r2, [r7, #32]
 8009328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	69f9      	ldr	r1, [r7, #28]
 800932c:	6a3a      	ldr	r2, [r7, #32]
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	61bb      	str	r3, [r7, #24]
   return(result);
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e5      	bne.n	8009306 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b10      	cmp	r3, #16
 8009346:	d10a      	bne.n	800935e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009348:	2300      	movs	r3, #0
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff fdd1 	bl	8008f0c <HAL_UARTEx_RxEventCallback>
 800936a:	e002      	b.n	8009372 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7fb ff2f 	bl	80051d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e002      	b.n	800937c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	e000      	b.n	800937c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800937a:	2302      	movs	r3, #2
  }
}
 800937c:	4618      	mov	r0, r3
 800937e:	3730      	adds	r7, #48	@ 0x30
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009388:	b0c0      	sub	sp, #256	@ 0x100
 800938a:	af00      	add	r7, sp, #0
 800938c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800939c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a0:	68d9      	ldr	r1, [r3, #12]
 80093a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	ea40 0301 	orr.w	r3, r0, r1
 80093ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80093dc:	f021 010c 	bic.w	r1, r1, #12
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80093ea:	430b      	orrs	r3, r1
 80093ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80093fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093fe:	6999      	ldr	r1, [r3, #24]
 8009400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	ea40 0301 	orr.w	r3, r0, r1
 800940a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b8f      	ldr	r3, [pc, #572]	@ (8009650 <UART_SetConfig+0x2cc>)
 8009414:	429a      	cmp	r2, r3
 8009416:	d005      	beq.n	8009424 <UART_SetConfig+0xa0>
 8009418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b8d      	ldr	r3, [pc, #564]	@ (8009654 <UART_SetConfig+0x2d0>)
 8009420:	429a      	cmp	r2, r3
 8009422:	d104      	bne.n	800942e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009424:	f7fd fa86 	bl	8006934 <HAL_RCC_GetPCLK2Freq>
 8009428:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800942c:	e003      	b.n	8009436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800942e:	f7fd fa6d 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009432:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009440:	f040 810c 	bne.w	800965c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009448:	2200      	movs	r2, #0
 800944a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800944e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	1891      	adds	r1, r2, r2
 800945c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800945e:	415b      	adcs	r3, r3
 8009460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009466:	4621      	mov	r1, r4
 8009468:	eb12 0801 	adds.w	r8, r2, r1
 800946c:	4629      	mov	r1, r5
 800946e:	eb43 0901 	adc.w	r9, r3, r1
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800947e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009486:	4690      	mov	r8, r2
 8009488:	4699      	mov	r9, r3
 800948a:	4623      	mov	r3, r4
 800948c:	eb18 0303 	adds.w	r3, r8, r3
 8009490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009494:	462b      	mov	r3, r5
 8009496:	eb49 0303 	adc.w	r3, r9, r3
 800949a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800949e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80094ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094b2:	460b      	mov	r3, r1
 80094b4:	18db      	adds	r3, r3, r3
 80094b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80094b8:	4613      	mov	r3, r2
 80094ba:	eb42 0303 	adc.w	r3, r2, r3
 80094be:	657b      	str	r3, [r7, #84]	@ 0x54
 80094c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80094c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80094c8:	f7f7 f906 	bl	80006d8 <__aeabi_uldivmod>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4b61      	ldr	r3, [pc, #388]	@ (8009658 <UART_SetConfig+0x2d4>)
 80094d2:	fba3 2302 	umull	r2, r3, r3, r2
 80094d6:	095b      	lsrs	r3, r3, #5
 80094d8:	011c      	lsls	r4, r3, #4
 80094da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80094e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80094ec:	4642      	mov	r2, r8
 80094ee:	464b      	mov	r3, r9
 80094f0:	1891      	adds	r1, r2, r2
 80094f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80094f4:	415b      	adcs	r3, r3
 80094f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80094fc:	4641      	mov	r1, r8
 80094fe:	eb12 0a01 	adds.w	sl, r2, r1
 8009502:	4649      	mov	r1, r9
 8009504:	eb43 0b01 	adc.w	fp, r3, r1
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800951c:	4692      	mov	sl, r2
 800951e:	469b      	mov	fp, r3
 8009520:	4643      	mov	r3, r8
 8009522:	eb1a 0303 	adds.w	r3, sl, r3
 8009526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800952a:	464b      	mov	r3, r9
 800952c:	eb4b 0303 	adc.w	r3, fp, r3
 8009530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009540:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009548:	460b      	mov	r3, r1
 800954a:	18db      	adds	r3, r3, r3
 800954c:	643b      	str	r3, [r7, #64]	@ 0x40
 800954e:	4613      	mov	r3, r2
 8009550:	eb42 0303 	adc.w	r3, r2, r3
 8009554:	647b      	str	r3, [r7, #68]	@ 0x44
 8009556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800955a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800955e:	f7f7 f8bb 	bl	80006d8 <__aeabi_uldivmod>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4611      	mov	r1, r2
 8009568:	4b3b      	ldr	r3, [pc, #236]	@ (8009658 <UART_SetConfig+0x2d4>)
 800956a:	fba3 2301 	umull	r2, r3, r3, r1
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	2264      	movs	r2, #100	@ 0x64
 8009572:	fb02 f303 	mul.w	r3, r2, r3
 8009576:	1acb      	subs	r3, r1, r3
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800957e:	4b36      	ldr	r3, [pc, #216]	@ (8009658 <UART_SetConfig+0x2d4>)
 8009580:	fba3 2302 	umull	r2, r3, r3, r2
 8009584:	095b      	lsrs	r3, r3, #5
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800958c:	441c      	add	r4, r3
 800958e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009592:	2200      	movs	r2, #0
 8009594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009598:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800959c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80095a0:	4642      	mov	r2, r8
 80095a2:	464b      	mov	r3, r9
 80095a4:	1891      	adds	r1, r2, r2
 80095a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80095a8:	415b      	adcs	r3, r3
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80095b0:	4641      	mov	r1, r8
 80095b2:	1851      	adds	r1, r2, r1
 80095b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80095b6:	4649      	mov	r1, r9
 80095b8:	414b      	adcs	r3, r1
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80095c8:	4659      	mov	r1, fp
 80095ca:	00cb      	lsls	r3, r1, #3
 80095cc:	4651      	mov	r1, sl
 80095ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095d2:	4651      	mov	r1, sl
 80095d4:	00ca      	lsls	r2, r1, #3
 80095d6:	4610      	mov	r0, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	4603      	mov	r3, r0
 80095dc:	4642      	mov	r2, r8
 80095de:	189b      	adds	r3, r3, r2
 80095e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095e4:	464b      	mov	r3, r9
 80095e6:	460a      	mov	r2, r1
 80095e8:	eb42 0303 	adc.w	r3, r2, r3
 80095ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009604:	460b      	mov	r3, r1
 8009606:	18db      	adds	r3, r3, r3
 8009608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800960a:	4613      	mov	r3, r2
 800960c:	eb42 0303 	adc.w	r3, r2, r3
 8009610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800961a:	f7f7 f85d 	bl	80006d8 <__aeabi_uldivmod>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <UART_SetConfig+0x2d4>)
 8009624:	fba3 1302 	umull	r1, r3, r3, r2
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	2164      	movs	r1, #100	@ 0x64
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	3332      	adds	r3, #50	@ 0x32
 8009636:	4a08      	ldr	r2, [pc, #32]	@ (8009658 <UART_SetConfig+0x2d4>)
 8009638:	fba2 2303 	umull	r2, r3, r2, r3
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	f003 0207 	and.w	r2, r3, #7
 8009642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4422      	add	r2, r4
 800964a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800964c:	e106      	b.n	800985c <UART_SetConfig+0x4d8>
 800964e:	bf00      	nop
 8009650:	40011000 	.word	0x40011000
 8009654:	40011400 	.word	0x40011400
 8009658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800965c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009660:	2200      	movs	r2, #0
 8009662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009666:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800966a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800966e:	4642      	mov	r2, r8
 8009670:	464b      	mov	r3, r9
 8009672:	1891      	adds	r1, r2, r2
 8009674:	6239      	str	r1, [r7, #32]
 8009676:	415b      	adcs	r3, r3
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
 800967a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800967e:	4641      	mov	r1, r8
 8009680:	1854      	adds	r4, r2, r1
 8009682:	4649      	mov	r1, r9
 8009684:	eb43 0501 	adc.w	r5, r3, r1
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	00eb      	lsls	r3, r5, #3
 8009692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009696:	00e2      	lsls	r2, r4, #3
 8009698:	4614      	mov	r4, r2
 800969a:	461d      	mov	r5, r3
 800969c:	4643      	mov	r3, r8
 800969e:	18e3      	adds	r3, r4, r3
 80096a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096a4:	464b      	mov	r3, r9
 80096a6:	eb45 0303 	adc.w	r3, r5, r3
 80096aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096be:	f04f 0200 	mov.w	r2, #0
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80096ca:	4629      	mov	r1, r5
 80096cc:	008b      	lsls	r3, r1, #2
 80096ce:	4621      	mov	r1, r4
 80096d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096d4:	4621      	mov	r1, r4
 80096d6:	008a      	lsls	r2, r1, #2
 80096d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80096dc:	f7f6 fffc 	bl	80006d8 <__aeabi_uldivmod>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4b60      	ldr	r3, [pc, #384]	@ (8009868 <UART_SetConfig+0x4e4>)
 80096e6:	fba3 2302 	umull	r2, r3, r3, r2
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	011c      	lsls	r4, r3, #4
 80096ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80096fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	1891      	adds	r1, r2, r2
 8009706:	61b9      	str	r1, [r7, #24]
 8009708:	415b      	adcs	r3, r3
 800970a:	61fb      	str	r3, [r7, #28]
 800970c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009710:	4641      	mov	r1, r8
 8009712:	1851      	adds	r1, r2, r1
 8009714:	6139      	str	r1, [r7, #16]
 8009716:	4649      	mov	r1, r9
 8009718:	414b      	adcs	r3, r1
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009728:	4659      	mov	r1, fp
 800972a:	00cb      	lsls	r3, r1, #3
 800972c:	4651      	mov	r1, sl
 800972e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009732:	4651      	mov	r1, sl
 8009734:	00ca      	lsls	r2, r1, #3
 8009736:	4610      	mov	r0, r2
 8009738:	4619      	mov	r1, r3
 800973a:	4603      	mov	r3, r0
 800973c:	4642      	mov	r2, r8
 800973e:	189b      	adds	r3, r3, r2
 8009740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009744:	464b      	mov	r3, r9
 8009746:	460a      	mov	r2, r1
 8009748:	eb42 0303 	adc.w	r3, r2, r3
 800974c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800975a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009768:	4649      	mov	r1, r9
 800976a:	008b      	lsls	r3, r1, #2
 800976c:	4641      	mov	r1, r8
 800976e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009772:	4641      	mov	r1, r8
 8009774:	008a      	lsls	r2, r1, #2
 8009776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800977a:	f7f6 ffad 	bl	80006d8 <__aeabi_uldivmod>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4611      	mov	r1, r2
 8009784:	4b38      	ldr	r3, [pc, #224]	@ (8009868 <UART_SetConfig+0x4e4>)
 8009786:	fba3 2301 	umull	r2, r3, r3, r1
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	2264      	movs	r2, #100	@ 0x64
 800978e:	fb02 f303 	mul.w	r3, r2, r3
 8009792:	1acb      	subs	r3, r1, r3
 8009794:	011b      	lsls	r3, r3, #4
 8009796:	3332      	adds	r3, #50	@ 0x32
 8009798:	4a33      	ldr	r2, [pc, #204]	@ (8009868 <UART_SetConfig+0x4e4>)
 800979a:	fba2 2303 	umull	r2, r3, r2, r3
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097a4:	441c      	add	r4, r3
 80097a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097aa:	2200      	movs	r2, #0
 80097ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80097ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80097b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80097b4:	4642      	mov	r2, r8
 80097b6:	464b      	mov	r3, r9
 80097b8:	1891      	adds	r1, r2, r2
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	415b      	adcs	r3, r3
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097c4:	4641      	mov	r1, r8
 80097c6:	1851      	adds	r1, r2, r1
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	4649      	mov	r1, r9
 80097cc:	414b      	adcs	r3, r1
 80097ce:	607b      	str	r3, [r7, #4]
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097dc:	4659      	mov	r1, fp
 80097de:	00cb      	lsls	r3, r1, #3
 80097e0:	4651      	mov	r1, sl
 80097e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097e6:	4651      	mov	r1, sl
 80097e8:	00ca      	lsls	r2, r1, #3
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	4603      	mov	r3, r0
 80097f0:	4642      	mov	r2, r8
 80097f2:	189b      	adds	r3, r3, r2
 80097f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097f6:	464b      	mov	r3, r9
 80097f8:	460a      	mov	r2, r1
 80097fa:	eb42 0303 	adc.w	r3, r2, r3
 80097fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	663b      	str	r3, [r7, #96]	@ 0x60
 800980a:	667a      	str	r2, [r7, #100]	@ 0x64
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009818:	4649      	mov	r1, r9
 800981a:	008b      	lsls	r3, r1, #2
 800981c:	4641      	mov	r1, r8
 800981e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009822:	4641      	mov	r1, r8
 8009824:	008a      	lsls	r2, r1, #2
 8009826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800982a:	f7f6 ff55 	bl	80006d8 <__aeabi_uldivmod>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4b0d      	ldr	r3, [pc, #52]	@ (8009868 <UART_SetConfig+0x4e4>)
 8009834:	fba3 1302 	umull	r1, r3, r3, r2
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	2164      	movs	r1, #100	@ 0x64
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	011b      	lsls	r3, r3, #4
 8009844:	3332      	adds	r3, #50	@ 0x32
 8009846:	4a08      	ldr	r2, [pc, #32]	@ (8009868 <UART_SetConfig+0x4e4>)
 8009848:	fba2 2303 	umull	r2, r3, r2, r3
 800984c:	095b      	lsrs	r3, r3, #5
 800984e:	f003 020f 	and.w	r2, r3, #15
 8009852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4422      	add	r2, r4
 800985a:	609a      	str	r2, [r3, #8]
}
 800985c:	bf00      	nop
 800985e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009862:	46bd      	mov	sp, r7
 8009864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009868:	51eb851f 	.word	0x51eb851f

0800986c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009870:	4904      	ldr	r1, [pc, #16]	@ (8009884 <MX_FATFS_Init+0x18>)
 8009872:	4805      	ldr	r0, [pc, #20]	@ (8009888 <MX_FATFS_Init+0x1c>)
 8009874:	f002 fea4 	bl	800c5c0 <FATFS_LinkDriver>
 8009878:	4603      	mov	r3, r0
 800987a:	461a      	mov	r2, r3
 800987c:	4b03      	ldr	r3, [pc, #12]	@ (800988c <MX_FATFS_Init+0x20>)
 800987e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009880:	bf00      	nop
 8009882:	bd80      	pop	{r7, pc}
 8009884:	2001cafc 	.word	0x2001cafc
 8009888:	20016a88 	.word	0x20016a88
 800988c:	2001caf8 	.word	0x2001caf8

08009890 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009894:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009896:	4618      	mov	r0, r3
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f7 fa3f 	bl	8000d30 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80098b2:	bf00      	nop
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7f7 fb17 	bl	8000efc <SD_disk_status>
  /* USER CODE END STATUS */
}
 80098ce:	bf00      	nop
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60b9      	str	r1, [r7, #8]
 80098e0:	607a      	str	r2, [r7, #4]
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv, buff, sector, count);
 80098e8:	7bf8      	ldrb	r0, [r7, #15]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	f7f7 fb1a 	bl	8000f28 <SD_disk_read>
  /* USER CODE END READ */
}
 80098f4:	bf00      	nop
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector,count);
 800990e:	7bf8      	ldrb	r0, [r7, #15]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	f7f7 fb71 	bl	8000ffc <SD_disk_write>
  /* USER CODE END WRITE */
}
 800991a:	bf00      	nop
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	603a      	str	r2, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
 8009930:	460b      	mov	r3, r1
 8009932:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	79b9      	ldrb	r1, [r7, #6]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	f7f7 fbe2 	bl	8001104 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8009940:	bf00      	nop
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	4a08      	ldr	r2, [pc, #32]	@ (800997c <disk_status+0x30>)
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	79fa      	ldrb	r2, [r7, #7]
 8009964:	4905      	ldr	r1, [pc, #20]	@ (800997c <disk_status+0x30>)
 8009966:	440a      	add	r2, r1
 8009968:	7a12      	ldrb	r2, [r2, #8]
 800996a:	4610      	mov	r0, r2
 800996c:	4798      	blx	r3
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2001cd28 	.word	0x2001cd28

08009980 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	4a0e      	ldr	r2, [pc, #56]	@ (80099cc <disk_initialize+0x4c>)
 8009992:	5cd3      	ldrb	r3, [r2, r3]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d114      	bne.n	80099c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	4a0c      	ldr	r2, [pc, #48]	@ (80099cc <disk_initialize+0x4c>)
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	79fa      	ldrb	r2, [r7, #7]
 80099a6:	4909      	ldr	r1, [pc, #36]	@ (80099cc <disk_initialize+0x4c>)
 80099a8:	440a      	add	r2, r1
 80099aa:	7a12      	ldrb	r2, [r2, #8]
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d103      	bne.n	80099c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	4a03      	ldr	r2, [pc, #12]	@ (80099cc <disk_initialize+0x4c>)
 80099be:	2101      	movs	r1, #1
 80099c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	2001cd28 	.word	0x2001cd28

080099d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4a0a      	ldr	r2, [pc, #40]	@ (8009a0c <disk_read+0x3c>)
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	689c      	ldr	r4, [r3, #8]
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4a07      	ldr	r2, [pc, #28]	@ (8009a0c <disk_read+0x3c>)
 80099f0:	4413      	add	r3, r2
 80099f2:	7a18      	ldrb	r0, [r3, #8]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	47a0      	blx	r4
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	2001cd28 	.word	0x2001cd28

08009a10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4a0a      	ldr	r2, [pc, #40]	@ (8009a4c <disk_write+0x3c>)
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	68dc      	ldr	r4, [r3, #12]
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	4a07      	ldr	r2, [pc, #28]	@ (8009a4c <disk_write+0x3c>)
 8009a30:	4413      	add	r3, r2
 8009a32:	7a18      	ldrb	r0, [r3, #8]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	47a0      	blx	r4
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	2001cd28 	.word	0x2001cd28

08009a50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	603a      	str	r2, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	4a09      	ldr	r2, [pc, #36]	@ (8009a88 <disk_ioctl+0x38>)
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	79fa      	ldrb	r2, [r7, #7]
 8009a6e:	4906      	ldr	r1, [pc, #24]	@ (8009a88 <disk_ioctl+0x38>)
 8009a70:	440a      	add	r2, r1
 8009a72:	7a10      	ldrb	r0, [r2, #8]
 8009a74:	79b9      	ldrb	r1, [r7, #6]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	2001cd28 	.word	0x2001cd28

08009a8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3301      	adds	r3, #1
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a9c:	89fb      	ldrh	r3, [r7, #14]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	b21a      	sxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	b21b      	sxth	r3, r3
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b21b      	sxth	r3, r3
 8009aac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009aae:	89fb      	ldrh	r3, [r7, #14]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3303      	adds	r3, #3
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	3202      	adds	r2, #2
 8009ad4:	7812      	ldrb	r2, [r2, #0]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	021b      	lsls	r3, r3, #8
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7812      	ldrb	r2, [r2, #0]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
	return rv;
 8009af4:	68fb      	ldr	r3, [r7, #12]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	887a      	ldrh	r2, [r7, #2]
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	887b      	ldrh	r3, [r7, #2]
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	887a      	ldrh	r2, [r7, #2]
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	607a      	str	r2, [r7, #4]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00d      	beq.n	8009bc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	1c53      	adds	r3, r2, #1
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	1c59      	adds	r1, r3, #1
 8009bb4:	6179      	str	r1, [r7, #20]
 8009bb6:	7812      	ldrb	r2, [r2, #0]
 8009bb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f1      	bne.n	8009baa <mem_cpy+0x1a>
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009bd2:	b480      	push	{r7}
 8009bd4:	b087      	sub	sp, #28
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	617a      	str	r2, [r7, #20]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f3      	bne.n	8009be2 <mem_set+0x10>
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c08:	b480      	push	{r7}
 8009c0a:	b089      	sub	sp, #36	@ 0x24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	61fa      	str	r2, [r7, #28]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	61ba      	str	r2, [r7, #24]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	1acb      	subs	r3, r1, r3
 8009c34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	607b      	str	r3, [r7, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <mem_cmp+0x40>
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0eb      	beq.n	8009c20 <mem_cmp+0x18>

	return r;
 8009c48:	697b      	ldr	r3, [r7, #20]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3724      	adds	r7, #36	@ 0x24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c60:	e002      	b.n	8009c68 <chk_chr+0x12>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3301      	adds	r3, #1
 8009c66:	607b      	str	r3, [r7, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d005      	beq.n	8009c7c <chk_chr+0x26>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d1f2      	bne.n	8009c62 <chk_chr+0xc>
	return *str;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c96:	2300      	movs	r3, #0
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e029      	b.n	8009cf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ca0:	4a27      	ldr	r2, [pc, #156]	@ (8009d40 <chk_lock+0xb4>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	011b      	lsls	r3, r3, #4
 8009ca6:	4413      	add	r3, r2
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01d      	beq.n	8009cea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cae:	4a24      	ldr	r2, [pc, #144]	@ (8009d40 <chk_lock+0xb4>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	011b      	lsls	r3, r3, #4
 8009cb4:	4413      	add	r3, r2
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d116      	bne.n	8009cee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009d40 <chk_lock+0xb4>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	4413      	add	r3, r2
 8009cc8:	3304      	adds	r3, #4
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d10c      	bne.n	8009cee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8009d40 <chk_lock+0xb4>)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	4413      	add	r3, r2
 8009cdc:	3308      	adds	r3, #8
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d102      	bne.n	8009cee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ce8:	e007      	b.n	8009cfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cea:	2301      	movs	r3, #1
 8009cec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d9d2      	bls.n	8009ca0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d109      	bne.n	8009d14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <chk_lock+0x80>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d101      	bne.n	8009d10 <chk_lock+0x84>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	e010      	b.n	8009d32 <chk_lock+0xa6>
 8009d10:	2312      	movs	r3, #18
 8009d12:	e00e      	b.n	8009d32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d108      	bne.n	8009d2c <chk_lock+0xa0>
 8009d1a:	4a09      	ldr	r2, [pc, #36]	@ (8009d40 <chk_lock+0xb4>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	4413      	add	r3, r2
 8009d22:	330c      	adds	r3, #12
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d2a:	d101      	bne.n	8009d30 <chk_lock+0xa4>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	e000      	b.n	8009d32 <chk_lock+0xa6>
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	2001cb08 	.word	0x2001cb08

08009d44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	e002      	b.n	8009d56 <enq_lock+0x12>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3301      	adds	r3, #1
 8009d54:	607b      	str	r3, [r7, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d806      	bhi.n	8009d6a <enq_lock+0x26>
 8009d5c:	4a09      	ldr	r2, [pc, #36]	@ (8009d84 <enq_lock+0x40>)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	4413      	add	r3, r2
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f2      	bne.n	8009d50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	2001cb08 	.word	0x2001cb08

08009d88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	e01f      	b.n	8009dd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d98:	4a41      	ldr	r2, [pc, #260]	@ (8009ea0 <inc_lock+0x118>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	4413      	add	r3, r2
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d113      	bne.n	8009dd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009daa:	4a3d      	ldr	r2, [pc, #244]	@ (8009ea0 <inc_lock+0x118>)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	4413      	add	r3, r2
 8009db2:	3304      	adds	r3, #4
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d109      	bne.n	8009dd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009dbe:	4a38      	ldr	r2, [pc, #224]	@ (8009ea0 <inc_lock+0x118>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d006      	beq.n	8009de0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d9dc      	bls.n	8009d98 <inc_lock+0x10>
 8009dde:	e000      	b.n	8009de2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009de0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d132      	bne.n	8009e4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e002      	b.n	8009df4 <inc_lock+0x6c>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3301      	adds	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d806      	bhi.n	8009e08 <inc_lock+0x80>
 8009dfa:	4a29      	ldr	r2, [pc, #164]	@ (8009ea0 <inc_lock+0x118>)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	4413      	add	r3, r2
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1f2      	bne.n	8009dee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d101      	bne.n	8009e12 <inc_lock+0x8a>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e040      	b.n	8009e94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	4922      	ldr	r1, [pc, #136]	@ (8009ea0 <inc_lock+0x118>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	440b      	add	r3, r1
 8009e1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	491e      	ldr	r1, [pc, #120]	@ (8009ea0 <inc_lock+0x118>)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	011b      	lsls	r3, r3, #4
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695a      	ldr	r2, [r3, #20]
 8009e34:	491a      	ldr	r1, [pc, #104]	@ (8009ea0 <inc_lock+0x118>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	440b      	add	r3, r1
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e40:	4a17      	ldr	r2, [pc, #92]	@ (8009ea0 <inc_lock+0x118>)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	4413      	add	r3, r2
 8009e48:	330c      	adds	r3, #12
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <inc_lock+0xe0>
 8009e54:	4a12      	ldr	r2, [pc, #72]	@ (8009ea0 <inc_lock+0x118>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	4413      	add	r3, r2
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <inc_lock+0xe0>
 8009e64:	2300      	movs	r3, #0
 8009e66:	e015      	b.n	8009e94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d108      	bne.n	8009e80 <inc_lock+0xf8>
 8009e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ea0 <inc_lock+0x118>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	4413      	add	r3, r2
 8009e76:	330c      	adds	r3, #12
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	e001      	b.n	8009e84 <inc_lock+0xfc>
 8009e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e84:	4906      	ldr	r1, [pc, #24]	@ (8009ea0 <inc_lock+0x118>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	440b      	add	r3, r1
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3301      	adds	r3, #1
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	2001cb08 	.word	0x2001cb08

08009ea4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	607b      	str	r3, [r7, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d825      	bhi.n	8009f04 <dec_lock+0x60>
		n = Files[i].ctr;
 8009eb8:	4a17      	ldr	r2, [pc, #92]	@ (8009f18 <dec_lock+0x74>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	4413      	add	r3, r2
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ecc:	d101      	bne.n	8009ed2 <dec_lock+0x2e>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ed2:	89fb      	ldrh	r3, [r7, #14]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <dec_lock+0x3a>
 8009ed8:	89fb      	ldrh	r3, [r7, #14]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ede:	4a0e      	ldr	r2, [pc, #56]	@ (8009f18 <dec_lock+0x74>)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	4413      	add	r3, r2
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	89fa      	ldrh	r2, [r7, #14]
 8009eea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009eec:	89fb      	ldrh	r3, [r7, #14]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <dec_lock+0x5a>
 8009ef2:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <dec_lock+0x74>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	737b      	strb	r3, [r7, #13]
 8009f02:	e001      	b.n	8009f08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f04:	2302      	movs	r3, #2
 8009f06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	2001cb08 	.word	0x2001cb08

08009f1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e010      	b.n	8009f4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f60 <clear_lock+0x44>)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	4413      	add	r3, r2
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d105      	bne.n	8009f46 <clear_lock+0x2a>
 8009f3a:	4a09      	ldr	r2, [pc, #36]	@ (8009f60 <clear_lock+0x44>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	4413      	add	r3, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d9eb      	bls.n	8009f2a <clear_lock+0xe>
	}
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	2001cb08 	.word	0x2001cb08

08009f64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d034      	beq.n	8009fe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7858      	ldrb	r0, [r3, #1]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f88:	2301      	movs	r3, #1
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	f7ff fd40 	bl	8009a10 <disk_write>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	73fb      	strb	r3, [r7, #15]
 8009f9a:	e022      	b.n	8009fe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d217      	bcs.n	8009fe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	789b      	ldrb	r3, [r3, #2]
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	e010      	b.n	8009fdc <sync_window+0x78>
					wsect += fs->fsize;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7858      	ldrb	r0, [r3, #1]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009fce:	2301      	movs	r3, #1
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	f7ff fd1d 	bl	8009a10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d8eb      	bhi.n	8009fba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d01b      	beq.n	800a03c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ffad 	bl	8009f64 <sync_window>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d113      	bne.n	800a03c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7858      	ldrb	r0, [r3, #1]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a01e:	2301      	movs	r3, #1
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	f7ff fcd5 	bl	80099d0 <disk_read>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d004      	beq.n	800a036 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a02c:	f04f 33ff 	mov.w	r3, #4294967295
 800a030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a032:	2301      	movs	r3, #1
 800a034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
	...

0800a048 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ff87 	bl	8009f64 <sync_window>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d159      	bne.n	800a114 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d149      	bne.n	800a0fc <sync_fs+0xb4>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d145      	bne.n	800a0fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	899b      	ldrh	r3, [r3, #12]
 800a07a:	461a      	mov	r2, r3
 800a07c:	2100      	movs	r1, #0
 800a07e:	f7ff fda8 	bl	8009bd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3338      	adds	r3, #56	@ 0x38
 800a086:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a08a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff fd37 	bl	8009b02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3338      	adds	r3, #56	@ 0x38
 800a098:	4921      	ldr	r1, [pc, #132]	@ (800a120 <sync_fs+0xd8>)
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fd4c 	bl	8009b38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3338      	adds	r3, #56	@ 0x38
 800a0a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a0a8:	491e      	ldr	r1, [pc, #120]	@ (800a124 <sync_fs+0xdc>)
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff fd44 	bl	8009b38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3338      	adds	r3, #56	@ 0x38
 800a0b4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4610      	mov	r0, r2
 800a0c0:	f7ff fd3a 	bl	8009b38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3338      	adds	r3, #56	@ 0x38
 800a0c8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7ff fd30 	bl	8009b38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	7858      	ldrb	r0, [r3, #1]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f7ff fc8d 	bl	8009a10 <disk_write>
			fs->fsi_flag = 0;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff fca3 	bl	8009a50 <disk_ioctl>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <sync_fs+0xcc>
 800a110:	2301      	movs	r3, #1
 800a112:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	41615252 	.word	0x41615252
 800a124:	61417272 	.word	0x61417272

0800a128 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3b02      	subs	r3, #2
 800a136:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	3b02      	subs	r3, #2
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d301      	bcc.n	800a148 <clust2sect+0x20>
 800a144:	2300      	movs	r3, #0
 800a146:	e008      	b.n	800a15a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	895b      	ldrh	r3, [r3, #10]
 800a14c:	461a      	mov	r2, r3
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	fb03 f202 	mul.w	r2, r3, r2
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a158:	4413      	add	r3, r2
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b086      	sub	sp, #24
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d904      	bls.n	800a186 <get_fat+0x20>
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d302      	bcc.n	800a18c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a186:	2301      	movs	r3, #1
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	e0ba      	b.n	800a302 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295
 800a190:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b03      	cmp	r3, #3
 800a198:	f000 8082 	beq.w	800a2a0 <get_fat+0x13a>
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	f300 80a6 	bgt.w	800a2ee <get_fat+0x188>
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d002      	beq.n	800a1ac <get_fat+0x46>
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d055      	beq.n	800a256 <get_fat+0xf0>
 800a1aa:	e0a0      	b.n	800a2ee <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	085b      	lsrs	r3, r3, #1
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	899b      	ldrh	r3, [r3, #12]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1ca:	4413      	add	r3, r2
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6938      	ldr	r0, [r7, #16]
 800a1d0:	f7ff ff0c 	bl	8009fec <move_window>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 808c 	bne.w	800a2f4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	60fa      	str	r2, [r7, #12]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	8992      	ldrh	r2, [r2, #12]
 800a1e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1ea:	fb01 f202 	mul.w	r2, r1, r2
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	899b      	ldrh	r3, [r3, #12]
 800a202:	4619      	mov	r1, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	fbb3 f3f1 	udiv	r3, r3, r1
 800a20a:	4413      	add	r3, r2
 800a20c:	4619      	mov	r1, r3
 800a20e:	6938      	ldr	r0, [r7, #16]
 800a210:	f7ff feec 	bl	8009fec <move_window>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d16e      	bne.n	800a2f8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	461a      	mov	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	fbb3 f1f2 	udiv	r1, r3, r2
 800a226:	fb01 f202 	mul.w	r2, r1, r2
 800a22a:	1a9b      	subs	r3, r3, r2
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <get_fat+0xe6>
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	091b      	lsrs	r3, r3, #4
 800a24a:	e002      	b.n	800a252 <get_fat+0xec>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a252:	617b      	str	r3, [r7, #20]
			break;
 800a254:	e055      	b.n	800a302 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	899b      	ldrh	r3, [r3, #12]
 800a25e:	085b      	lsrs	r3, r3, #1
 800a260:	b29b      	uxth	r3, r3
 800a262:	4619      	mov	r1, r3
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	fbb3 f3f1 	udiv	r3, r3, r1
 800a26a:	4413      	add	r3, r2
 800a26c:	4619      	mov	r1, r3
 800a26e:	6938      	ldr	r0, [r7, #16]
 800a270:	f7ff febc 	bl	8009fec <move_window>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d140      	bne.n	800a2fc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	8992      	ldrh	r2, [r2, #12]
 800a288:	fbb3 f0f2 	udiv	r0, r3, r2
 800a28c:	fb00 f202 	mul.w	r2, r0, r2
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	440b      	add	r3, r1
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff fbf9 	bl	8009a8c <ld_word>
 800a29a:	4603      	mov	r3, r0
 800a29c:	617b      	str	r3, [r7, #20]
			break;
 800a29e:	e030      	b.n	800a302 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	899b      	ldrh	r3, [r3, #12]
 800a2a8:	089b      	lsrs	r3, r3, #2
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6938      	ldr	r0, [r7, #16]
 800a2ba:	f7ff fe97 	bl	8009fec <move_window>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d11d      	bne.n	800a300 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	8992      	ldrh	r2, [r2, #12]
 800a2d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2d6:	fb00 f202 	mul.w	r2, r0, r2
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	440b      	add	r3, r1
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff fbec 	bl	8009abc <ld_dword>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a2ea:	617b      	str	r3, [r7, #20]
			break;
 800a2ec:	e009      	b.n	800a302 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	e006      	b.n	800a302 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f4:	bf00      	nop
 800a2f6:	e004      	b.n	800a302 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f8:	bf00      	nop
 800a2fa:	e002      	b.n	800a302 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2fc:	bf00      	nop
 800a2fe:	e000      	b.n	800a302 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a300:	bf00      	nop
		}
	}

	return val;
 800a302:	697b      	ldr	r3, [r7, #20]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b089      	sub	sp, #36	@ 0x24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a318:	2302      	movs	r3, #2
 800a31a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	f240 8109 	bls.w	800a536 <put_fat+0x22a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	f080 8103 	bcs.w	800a536 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b03      	cmp	r3, #3
 800a336:	f000 80b6 	beq.w	800a4a6 <put_fat+0x19a>
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	f300 80fb 	bgt.w	800a536 <put_fat+0x22a>
 800a340:	2b01      	cmp	r3, #1
 800a342:	d003      	beq.n	800a34c <put_fat+0x40>
 800a344:	2b02      	cmp	r3, #2
 800a346:	f000 8083 	beq.w	800a450 <put_fat+0x144>
 800a34a:	e0f4      	b.n	800a536 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	4413      	add	r3, r2
 800a358:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	899b      	ldrh	r3, [r3, #12]
 800a362:	4619      	mov	r1, r3
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	fbb3 f3f1 	udiv	r3, r3, r1
 800a36a:	4413      	add	r3, r2
 800a36c:	4619      	mov	r1, r3
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff fe3c 	bl	8009fec <move_window>
 800a374:	4603      	mov	r3, r0
 800a376:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a378:	7ffb      	ldrb	r3, [r7, #31]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 80d4 	bne.w	800a528 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	61ba      	str	r2, [r7, #24]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	8992      	ldrh	r2, [r2, #12]
 800a390:	fbb3 f0f2 	udiv	r0, r3, r2
 800a394:	fb00 f202 	mul.w	r2, r0, r2
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	440b      	add	r3, r1
 800a39c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00d      	beq.n	800a3c4 <put_fat+0xb8>
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b25b      	sxtb	r3, r3
 800a3ae:	f003 030f 	and.w	r3, r3, #15
 800a3b2:	b25a      	sxtb	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	011b      	lsls	r3, r3, #4
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	b25b      	sxtb	r3, r3
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	e001      	b.n	800a3c8 <put_fat+0xbc>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	899b      	ldrh	r3, [r3, #12]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3e2:	4413      	add	r3, r2
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7ff fe00 	bl	8009fec <move_window>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3f0:	7ffb      	ldrb	r3, [r7, #31]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f040 809a 	bne.w	800a52c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	899b      	ldrh	r3, [r3, #12]
 800a402:	461a      	mov	r2, r3
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	fbb3 f0f2 	udiv	r0, r3, r2
 800a40a:	fb00 f202 	mul.w	r2, r0, r2
 800a40e:	1a9b      	subs	r3, r3, r2
 800a410:	440b      	add	r3, r1
 800a412:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <put_fat+0x11a>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	091b      	lsrs	r3, r3, #4
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e00e      	b.n	800a444 <put_fat+0x138>
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	f023 030f 	bic.w	r3, r3, #15
 800a430:	b25a      	sxtb	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	0a1b      	lsrs	r3, r3, #8
 800a436:	b25b      	sxtb	r3, r3
 800a438:	f003 030f 	and.w	r3, r3, #15
 800a43c:	b25b      	sxtb	r3, r3
 800a43e:	4313      	orrs	r3, r2
 800a440:	b25b      	sxtb	r3, r3
 800a442:	b2db      	uxtb	r3, r3
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	70da      	strb	r2, [r3, #3]
			break;
 800a44e:	e072      	b.n	800a536 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	899b      	ldrh	r3, [r3, #12]
 800a458:	085b      	lsrs	r3, r3, #1
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	4619      	mov	r1, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	fbb3 f3f1 	udiv	r3, r3, r1
 800a464:	4413      	add	r3, r2
 800a466:	4619      	mov	r1, r3
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fdbf 	bl	8009fec <move_window>
 800a46e:	4603      	mov	r3, r0
 800a470:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d15b      	bne.n	800a530 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	8992      	ldrh	r2, [r2, #12]
 800a486:	fbb3 f0f2 	udiv	r0, r3, r2
 800a48a:	fb00 f202 	mul.w	r2, r0, r2
 800a48e:	1a9b      	subs	r3, r3, r2
 800a490:	440b      	add	r3, r1
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	b292      	uxth	r2, r2
 800a496:	4611      	mov	r1, r2
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff fb32 	bl	8009b02 <st_word>
			fs->wflag = 1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	70da      	strb	r2, [r3, #3]
			break;
 800a4a4:	e047      	b.n	800a536 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	899b      	ldrh	r3, [r3, #12]
 800a4ae:	089b      	lsrs	r3, r3, #2
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4ba:	4413      	add	r3, r2
 800a4bc:	4619      	mov	r1, r3
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff fd94 	bl	8009fec <move_window>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4c8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d132      	bne.n	800a534 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	8992      	ldrh	r2, [r2, #12]
 800a4e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4e6:	fb00 f202 	mul.w	r2, r0, r2
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fae4 	bl	8009abc <ld_dword>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4fa:	4323      	orrs	r3, r4
 800a4fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	8992      	ldrh	r2, [r2, #12]
 800a50c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a510:	fb00 f202 	mul.w	r2, r0, r2
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	440b      	add	r3, r1
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fb0c 	bl	8009b38 <st_dword>
			fs->wflag = 1;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	70da      	strb	r2, [r3, #3]
			break;
 800a526:	e006      	b.n	800a536 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a528:	bf00      	nop
 800a52a:	e004      	b.n	800a536 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a52c:	bf00      	nop
 800a52e:	e002      	b.n	800a536 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a530:	bf00      	nop
 800a532:	e000      	b.n	800a536 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a534:	bf00      	nop
		}
	}
	return res;
 800a536:	7ffb      	ldrb	r3, [r7, #31]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3724      	adds	r7, #36	@ 0x24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd90      	pop	{r4, r7, pc}

0800a540 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d904      	bls.n	800a566 <remove_chain+0x26>
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	429a      	cmp	r2, r3
 800a564:	d301      	bcc.n	800a56a <remove_chain+0x2a>
 800a566:	2302      	movs	r3, #2
 800a568:	e04b      	b.n	800a602 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00c      	beq.n	800a58a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	6879      	ldr	r1, [r7, #4]
 800a576:	69b8      	ldr	r0, [r7, #24]
 800a578:	f7ff fec8 	bl	800a30c <put_fat>
 800a57c:	4603      	mov	r3, r0
 800a57e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a580:	7ffb      	ldrb	r3, [r7, #31]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <remove_chain+0x4a>
 800a586:	7ffb      	ldrb	r3, [r7, #31]
 800a588:	e03b      	b.n	800a602 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff fdea 	bl	800a166 <get_fat>
 800a592:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d031      	beq.n	800a5fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d101      	bne.n	800a5a4 <remove_chain+0x64>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	e02e      	b.n	800a602 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d101      	bne.n	800a5b0 <remove_chain+0x70>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e028      	b.n	800a602 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	68b9      	ldr	r1, [r7, #8]
 800a5b4:	69b8      	ldr	r0, [r7, #24]
 800a5b6:	f7ff fea9 	bl	800a30c <put_fat>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5be:	7ffb      	ldrb	r3, [r7, #31]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <remove_chain+0x88>
 800a5c4:	7ffb      	ldrb	r3, [r7, #31]
 800a5c6:	e01c      	b.n	800a602 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	699a      	ldr	r2, [r3, #24]
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	3b02      	subs	r3, #2
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d20b      	bcs.n	800a5ee <remove_chain+0xae>
			fs->free_clst++;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	791b      	ldrb	r3, [r3, #4]
 800a5e4:	f043 0301 	orr.w	r3, r3, #1
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d3c6      	bcc.n	800a58a <remove_chain+0x4a>
 800a5fc:	e000      	b.n	800a600 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a5fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b088      	sub	sp, #32
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10d      	bne.n	800a63c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d004      	beq.n	800a636 <create_chain+0x2c>
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	429a      	cmp	r2, r3
 800a634:	d31b      	bcc.n	800a66e <create_chain+0x64>
 800a636:	2301      	movs	r3, #1
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	e018      	b.n	800a66e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff fd91 	bl	800a166 <get_fat>
 800a644:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d801      	bhi.n	800a650 <create_chain+0x46>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e070      	b.n	800a732 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a656:	d101      	bne.n	800a65c <create_chain+0x52>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	e06a      	b.n	800a732 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	429a      	cmp	r2, r3
 800a664:	d201      	bcs.n	800a66a <create_chain+0x60>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	e063      	b.n	800a732 <create_chain+0x128>
		scl = clst;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	3301      	adds	r3, #1
 800a676:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	69fa      	ldr	r2, [r7, #28]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d307      	bcc.n	800a692 <create_chain+0x88>
				ncl = 2;
 800a682:	2302      	movs	r3, #2
 800a684:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a686:	69fa      	ldr	r2, [r7, #28]
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d901      	bls.n	800a692 <create_chain+0x88>
 800a68e:	2300      	movs	r3, #0
 800a690:	e04f      	b.n	800a732 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a692:	69f9      	ldr	r1, [r7, #28]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff fd66 	bl	800a166 <get_fat>
 800a69a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d003      	beq.n	800a6b0 <create_chain+0xa6>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ae:	d101      	bne.n	800a6b4 <create_chain+0xaa>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	e03e      	b.n	800a732 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a6b4:	69fa      	ldr	r2, [r7, #28]
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d1da      	bne.n	800a672 <create_chain+0x68>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e038      	b.n	800a732 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a6c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c6:	69f9      	ldr	r1, [r7, #28]
 800a6c8:	6938      	ldr	r0, [r7, #16]
 800a6ca:	f7ff fe1f 	bl	800a30c <put_fat>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <create_chain+0xe2>
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6de:	69fa      	ldr	r2, [r7, #28]
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6938      	ldr	r0, [r7, #16]
 800a6e4:	f7ff fe12 	bl	800a30c <put_fat>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d116      	bne.n	800a720 <create_chain+0x116>
		fs->last_clst = ncl;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	699a      	ldr	r2, [r3, #24]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	69db      	ldr	r3, [r3, #28]
 800a700:	3b02      	subs	r3, #2
 800a702:	429a      	cmp	r2, r3
 800a704:	d804      	bhi.n	800a710 <create_chain+0x106>
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	1e5a      	subs	r2, r3, #1
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	791b      	ldrb	r3, [r3, #4]
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	711a      	strb	r2, [r3, #4]
 800a71e:	e007      	b.n	800a730 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d102      	bne.n	800a72c <create_chain+0x122>
 800a726:	f04f 33ff 	mov.w	r3, #4294967295
 800a72a:	e000      	b.n	800a72e <create_chain+0x124>
 800a72c:	2301      	movs	r3, #1
 800a72e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a730:	69fb      	ldr	r3, [r7, #28]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b087      	sub	sp, #28
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74e:	3304      	adds	r3, #4
 800a750:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	899b      	ldrh	r3, [r3, #12]
 800a756:	461a      	mov	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	8952      	ldrh	r2, [r2, #10]
 800a762:	fbb3 f3f2 	udiv	r3, r3, r2
 800a766:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	613a      	str	r2, [r7, #16]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <clmt_clust+0x42>
 800a778:	2300      	movs	r3, #0
 800a77a:	e010      	b.n	800a79e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	429a      	cmp	r2, r3
 800a782:	d307      	bcc.n	800a794 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	3304      	adds	r3, #4
 800a790:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a792:	e7e9      	b.n	800a768 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a794:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4413      	add	r3, r2
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7c0:	d204      	bcs.n	800a7cc <dir_sdi+0x22>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f003 031f 	and.w	r3, r3, #31
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e071      	b.n	800a8b4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <dir_sdi+0x46>
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d902      	bls.n	800a7f0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ee:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10c      	bne.n	800a810 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	8912      	ldrh	r2, [r2, #8]
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d301      	bcc.n	800a806 <dir_sdi+0x5c>
 800a802:	2302      	movs	r3, #2
 800a804:	e056      	b.n	800a8b4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	61da      	str	r2, [r3, #28]
 800a80e:	e02d      	b.n	800a86c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	895b      	ldrh	r3, [r3, #10]
 800a814:	461a      	mov	r2, r3
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	899b      	ldrh	r3, [r3, #12]
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
 800a81e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a820:	e019      	b.n	800a856 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6979      	ldr	r1, [r7, #20]
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fc9d 	bl	800a166 <get_fat>
 800a82c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a834:	d101      	bne.n	800a83a <dir_sdi+0x90>
 800a836:	2301      	movs	r3, #1
 800a838:	e03c      	b.n	800a8b4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d904      	bls.n	800a84a <dir_sdi+0xa0>
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	429a      	cmp	r2, r3
 800a848:	d301      	bcc.n	800a84e <dir_sdi+0xa4>
 800a84a:	2302      	movs	r3, #2
 800a84c:	e032      	b.n	800a8b4 <dir_sdi+0x10a>
			ofs -= csz;
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d2e1      	bcs.n	800a822 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a85e:	6979      	ldr	r1, [r7, #20]
 800a860:	6938      	ldr	r0, [r7, #16]
 800a862:	f7ff fc61 	bl	800a128 <clust2sect>
 800a866:	4602      	mov	r2, r0
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <dir_sdi+0xd4>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e01a      	b.n	800a8b4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69da      	ldr	r2, [r3, #28]
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	899b      	ldrh	r3, [r3, #12]
 800a886:	4619      	mov	r1, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a88e:	441a      	add	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	899b      	ldrh	r3, [r3, #12]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8a6:	fb00 f202 	mul.w	r2, r0, r2
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	18ca      	adds	r2, r1, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	3320      	adds	r3, #32
 800a8d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <dir_next+0x28>
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8e2:	d301      	bcc.n	800a8e8 <dir_next+0x2c>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	e0bb      	b.n	800aa60 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	899b      	ldrh	r3, [r3, #12]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8f4:	fb01 f202 	mul.w	r2, r1, r2
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f040 809d 	bne.w	800aa3a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10b      	bne.n	800a92a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	095b      	lsrs	r3, r3, #5
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	8912      	ldrh	r2, [r2, #8]
 800a91a:	4293      	cmp	r3, r2
 800a91c:	f0c0 808d 	bcc.w	800aa3a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	61da      	str	r2, [r3, #28]
 800a926:	2304      	movs	r3, #4
 800a928:	e09a      	b.n	800aa60 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	899b      	ldrh	r3, [r3, #12]
 800a92e:	461a      	mov	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	fbb3 f3f2 	udiv	r3, r3, r2
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	8952      	ldrh	r2, [r2, #10]
 800a93a:	3a01      	subs	r2, #1
 800a93c:	4013      	ands	r3, r2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d17b      	bne.n	800aa3a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7ff fc0b 	bl	800a166 <get_fat>
 800a950:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d801      	bhi.n	800a95c <dir_next+0xa0>
 800a958:	2302      	movs	r3, #2
 800a95a:	e081      	b.n	800aa60 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a962:	d101      	bne.n	800a968 <dir_next+0xac>
 800a964:	2301      	movs	r3, #1
 800a966:	e07b      	b.n	800aa60 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d359      	bcc.n	800aa26 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	61da      	str	r2, [r3, #28]
 800a97e:	2304      	movs	r3, #4
 800a980:	e06e      	b.n	800aa60 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	4619      	mov	r1, r3
 800a98a:	4610      	mov	r0, r2
 800a98c:	f7ff fe3d 	bl	800a60a <create_chain>
 800a990:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <dir_next+0xe0>
 800a998:	2307      	movs	r3, #7
 800a99a:	e061      	b.n	800aa60 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <dir_next+0xea>
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	e05c      	b.n	800aa60 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d101      	bne.n	800a9b2 <dir_next+0xf6>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e056      	b.n	800aa60 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f7ff fad6 	bl	8009f64 <sync_window>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <dir_next+0x106>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e04e      	b.n	800aa60 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	899b      	ldrh	r3, [r3, #12]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	f7ff f8ff 	bl	8009bd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	6979      	ldr	r1, [r7, #20]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7ff fba4 	bl	800a128 <clust2sect>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9e6:	e012      	b.n	800aa0e <dir_next+0x152>
						fs->wflag = 1;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff fab8 	bl	8009f64 <sync_window>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <dir_next+0x142>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e030      	b.n	800aa60 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	3301      	adds	r3, #1
 800aa02:	613b      	str	r3, [r7, #16]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	635a      	str	r2, [r3, #52]	@ 0x34
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	895b      	ldrh	r3, [r3, #10]
 800aa12:	461a      	mov	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d3e6      	bcc.n	800a9e8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad2      	subs	r2, r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa2c:	6979      	ldr	r1, [r7, #20]
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff fb7a 	bl	800a128 <clust2sect>
 800aa34:	4602      	mov	r2, r0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	899b      	ldrh	r3, [r3, #12]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa52:	fb00 f202 	mul.w	r2, r0, r2
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	18ca      	adds	r2, r1, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b086      	sub	sp, #24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa78:	2100      	movs	r1, #0
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff fe95 	bl	800a7aa <dir_sdi>
 800aa80:	4603      	mov	r3, r0
 800aa82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d12b      	bne.n	800aae2 <dir_alloc+0x7a>
		n = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	4619      	mov	r1, r3
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff faa9 	bl	8009fec <move_window>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa9e:	7dfb      	ldrb	r3, [r7, #23]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d11d      	bne.n	800aae0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2be5      	cmp	r3, #229	@ 0xe5
 800aaac:	d004      	beq.n	800aab8 <dir_alloc+0x50>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d107      	bne.n	800aac8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	3301      	adds	r3, #1
 800aabc:	613b      	str	r3, [r7, #16]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d102      	bne.n	800aacc <dir_alloc+0x64>
 800aac6:	e00c      	b.n	800aae2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aac8:	2300      	movs	r3, #0
 800aaca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aacc:	2101      	movs	r1, #1
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff fef4 	bl	800a8bc <dir_next>
 800aad4:	4603      	mov	r3, r0
 800aad6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0d7      	beq.n	800aa8e <dir_alloc+0x26>
 800aade:	e000      	b.n	800aae2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aae0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	2b04      	cmp	r3, #4
 800aae6:	d101      	bne.n	800aaec <dir_alloc+0x84>
 800aae8:	2307      	movs	r3, #7
 800aaea:	75fb      	strb	r3, [r7, #23]
	return res;
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	331a      	adds	r3, #26
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe ffc1 	bl	8009a8c <ld_word>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d109      	bne.n	800ab2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	3314      	adds	r3, #20
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe ffb6 	bl	8009a8c <ld_word>
 800ab20:	4603      	mov	r3, r0
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	331a      	adds	r3, #26
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	b292      	uxth	r2, r2
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe ffd9 	bl	8009b02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d109      	bne.n	800ab6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f103 0214 	add.w	r2, r3, #20
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	0c1b      	lsrs	r3, r3, #16
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe ffcb 	bl	8009b02 <st_word>
	}
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ab74:	b590      	push	{r4, r7, lr}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	331a      	adds	r3, #26
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe ff82 	bl	8009a8c <ld_word>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <cmp_lfn+0x1e>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e059      	b.n	800ac46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab9a:	1e5a      	subs	r2, r3, #1
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aba8:	2301      	movs	r3, #1
 800abaa:	81fb      	strh	r3, [r7, #14]
 800abac:	2300      	movs	r3, #0
 800abae:	613b      	str	r3, [r7, #16]
 800abb0:	e033      	b.n	800ac1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800abb2:	4a27      	ldr	r2, [pc, #156]	@ (800ac50 <cmp_lfn+0xdc>)
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	4413      	add	r3, r2
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	4413      	add	r3, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fe ff63 	bl	8009a8c <ld_word>
 800abc6:	4603      	mov	r3, r0
 800abc8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800abca:	89fb      	ldrh	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01a      	beq.n	800ac06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2bfe      	cmp	r3, #254	@ 0xfe
 800abd4:	d812      	bhi.n	800abfc <cmp_lfn+0x88>
 800abd6:	89bb      	ldrh	r3, [r7, #12]
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 fd3d 	bl	800c658 <ff_wtoupper>
 800abde:	4603      	mov	r3, r0
 800abe0:	461c      	mov	r4, r3
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	617a      	str	r2, [r7, #20]
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	4413      	add	r3, r2
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 fd31 	bl	800c658 <ff_wtoupper>
 800abf6:	4603      	mov	r3, r0
 800abf8:	429c      	cmp	r4, r3
 800abfa:	d001      	beq.n	800ac00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800abfc:	2300      	movs	r3, #0
 800abfe:	e022      	b.n	800ac46 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ac00:	89bb      	ldrh	r3, [r7, #12]
 800ac02:	81fb      	strh	r3, [r7, #14]
 800ac04:	e006      	b.n	800ac14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ac06:	89bb      	ldrh	r3, [r7, #12]
 800ac08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d001      	beq.n	800ac14 <cmp_lfn+0xa0>
 800ac10:	2300      	movs	r3, #0
 800ac12:	e018      	b.n	800ac46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	3301      	adds	r3, #1
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	d9c8      	bls.n	800abb2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <cmp_lfn+0xd0>
 800ac2c:	89fb      	ldrh	r3, [r7, #14]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d008      	beq.n	800ac44 <cmp_lfn+0xd0>
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	4413      	add	r3, r2
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <cmp_lfn+0xd0>
 800ac40:	2300      	movs	r3, #0
 800ac42:	e000      	b.n	800ac46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ac44:	2301      	movs	r3, #1
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd90      	pop	{r4, r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800d258 	.word	0x0800d258

0800ac54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	4611      	mov	r1, r2
 800ac60:	461a      	mov	r2, r3
 800ac62:	460b      	mov	r3, r1
 800ac64:	71fb      	strb	r3, [r7, #7]
 800ac66:	4613      	mov	r3, r2
 800ac68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	330d      	adds	r3, #13
 800ac6e:	79ba      	ldrb	r2, [r7, #6]
 800ac70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	330b      	adds	r3, #11
 800ac76:	220f      	movs	r2, #15
 800ac78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	331a      	adds	r3, #26
 800ac86:	2100      	movs	r1, #0
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fe ff3a 	bl	8009b02 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	1e5a      	subs	r2, r3, #1
 800ac92:	4613      	mov	r3, r2
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	82fb      	strh	r3, [r7, #22]
 800aca2:	2300      	movs	r3, #0
 800aca4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800aca6:	8afb      	ldrh	r3, [r7, #22]
 800aca8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800acac:	4293      	cmp	r3, r2
 800acae:	d007      	beq.n	800acc0 <put_lfn+0x6c>
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	61fa      	str	r2, [r7, #28]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4413      	add	r3, r2
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800acc0:	4a17      	ldr	r2, [pc, #92]	@ (800ad20 <put_lfn+0xcc>)
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	4413      	add	r3, r2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4413      	add	r3, r2
 800acce:	8afa      	ldrh	r2, [r7, #22]
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe ff15 	bl	8009b02 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800acd8:	8afb      	ldrh	r3, [r7, #22]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d102      	bne.n	800ace4 <put_lfn+0x90>
 800acde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ace2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	3301      	adds	r3, #1
 800ace8:	61bb      	str	r3, [r7, #24]
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b0c      	cmp	r3, #12
 800acee:	d9da      	bls.n	800aca6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800acf0:	8afb      	ldrh	r3, [r7, #22]
 800acf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d006      	beq.n	800ad08 <put_lfn+0xb4>
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4413      	add	r3, r2
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <put_lfn+0xbc>
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	79fa      	ldrb	r2, [r7, #7]
 800ad14:	701a      	strb	r2, [r3, #0]
}
 800ad16:	bf00      	nop
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	0800d258 	.word	0x0800d258

0800ad24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08c      	sub	sp, #48	@ 0x30
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ad32:	220b      	movs	r2, #11
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7fe ff2a 	bl	8009b90 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b05      	cmp	r3, #5
 800ad40:	d92b      	bls.n	800ad9a <gen_numname+0x76>
		sr = seq;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad46:	e022      	b.n	800ad8e <gen_numname+0x6a>
			wc = *lfn++;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	1c9a      	adds	r2, r3, #2
 800ad4c:	607a      	str	r2, [r7, #4]
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ad52:	2300      	movs	r3, #0
 800ad54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad56:	e017      	b.n	800ad88 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	005a      	lsls	r2, r3, #1
 800ad5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	4413      	add	r3, r2
 800ad64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad68:	085b      	lsrs	r3, r3, #1
 800ad6a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <gen_numname+0x5e>
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ad7c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ad80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad84:	3301      	adds	r3, #1
 800ad86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	2b0f      	cmp	r3, #15
 800ad8c:	d9e4      	bls.n	800ad58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1d8      	bne.n	800ad48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ad9a:	2307      	movs	r3, #7
 800ad9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 030f 	and.w	r3, r3, #15
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	3330      	adds	r3, #48	@ 0x30
 800adaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800adae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adb2:	2b39      	cmp	r3, #57	@ 0x39
 800adb4:	d904      	bls.n	800adc0 <gen_numname+0x9c>
 800adb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adba:	3307      	adds	r3, #7
 800adbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	1e5a      	subs	r2, r3, #1
 800adc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800adc6:	3330      	adds	r3, #48	@ 0x30
 800adc8:	443b      	add	r3, r7
 800adca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800adce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	091b      	lsrs	r3, r3, #4
 800add6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1df      	bne.n	800ad9e <gen_numname+0x7a>
	ns[i] = '~';
 800adde:	f107 0214 	add.w	r2, r7, #20
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	4413      	add	r3, r2
 800ade6:	227e      	movs	r2, #126	@ 0x7e
 800ade8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800adea:	2300      	movs	r3, #0
 800adec:	627b      	str	r3, [r7, #36]	@ 0x24
 800adee:	e002      	b.n	800adf6 <gen_numname+0xd2>
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	3301      	adds	r3, #1
 800adf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800adf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d205      	bcs.n	800ae0a <gen_numname+0xe6>
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	4413      	add	r3, r2
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d1f2      	bne.n	800adf0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0c:	2b07      	cmp	r3, #7
 800ae0e:	d807      	bhi.n	800ae20 <gen_numname+0xfc>
 800ae10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ae16:	3330      	adds	r3, #48	@ 0x30
 800ae18:	443b      	add	r3, r7
 800ae1a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ae1e:	e000      	b.n	800ae22 <gen_numname+0xfe>
 800ae20:	2120      	movs	r1, #32
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	460a      	mov	r2, r1
 800ae2e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	2b07      	cmp	r3, #7
 800ae34:	d9e9      	bls.n	800ae0a <gen_numname+0xe6>
}
 800ae36:	bf00      	nop
 800ae38:	bf00      	nop
 800ae3a:	3730      	adds	r7, #48	@ 0x30
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae4c:	230b      	movs	r3, #11
 800ae4e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	0852      	lsrs	r2, r2, #1
 800ae56:	01db      	lsls	r3, r3, #7
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	1c59      	adds	r1, r3, #1
 800ae60:	6079      	str	r1, [r7, #4]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	4413      	add	r3, r2
 800ae66:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	60bb      	str	r3, [r7, #8]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1ed      	bne.n	800ae50 <sum_sfn+0x10>
	return sum;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b086      	sub	sp, #24
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae90:	2100      	movs	r1, #0
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fc89 	bl	800a7aa <dir_sdi>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <dir_find+0x24>
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
 800aea4:	e0a9      	b.n	800affa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aea6:	23ff      	movs	r3, #255	@ 0xff
 800aea8:	753b      	strb	r3, [r7, #20]
 800aeaa:	7d3b      	ldrb	r3, [r7, #20]
 800aeac:	757b      	strb	r3, [r7, #21]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6938      	ldr	r0, [r7, #16]
 800aebe:	f7ff f895 	bl	8009fec <move_window>
 800aec2:	4603      	mov	r3, r0
 800aec4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f040 8090 	bne.w	800afee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aed6:	7dbb      	ldrb	r3, [r7, #22]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <dir_find+0x60>
 800aedc:	2304      	movs	r3, #4
 800aede:	75fb      	strb	r3, [r7, #23]
 800aee0:	e08a      	b.n	800aff8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	330b      	adds	r3, #11
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aeee:	73fb      	strb	r3, [r7, #15]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7bfa      	ldrb	r2, [r7, #15]
 800aef4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aef6:	7dbb      	ldrb	r3, [r7, #22]
 800aef8:	2be5      	cmp	r3, #229	@ 0xe5
 800aefa:	d007      	beq.n	800af0c <dir_find+0x8a>
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d009      	beq.n	800af1a <dir_find+0x98>
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	2b0f      	cmp	r3, #15
 800af0a:	d006      	beq.n	800af1a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af0c:	23ff      	movs	r3, #255	@ 0xff
 800af0e:	757b      	strb	r3, [r7, #21]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f04f 32ff 	mov.w	r2, #4294967295
 800af16:	631a      	str	r2, [r3, #48]	@ 0x30
 800af18:	e05e      	b.n	800afd8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b0f      	cmp	r3, #15
 800af1e:	d136      	bne.n	800af8e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d154      	bne.n	800afd8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
 800af30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00d      	beq.n	800af54 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	7b5b      	ldrb	r3, [r3, #13]
 800af3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800af40:	7dbb      	ldrb	r3, [r7, #22]
 800af42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af46:	75bb      	strb	r3, [r7, #22]
 800af48:	7dbb      	ldrb	r3, [r7, #22]
 800af4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	695a      	ldr	r2, [r3, #20]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af54:	7dba      	ldrb	r2, [r7, #22]
 800af56:	7d7b      	ldrb	r3, [r7, #21]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d115      	bne.n	800af88 <dir_find+0x106>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	330d      	adds	r3, #13
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	7d3a      	ldrb	r2, [r7, #20]
 800af66:	429a      	cmp	r2, r3
 800af68:	d10e      	bne.n	800af88 <dir_find+0x106>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	691a      	ldr	r2, [r3, #16]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	4619      	mov	r1, r3
 800af74:	4610      	mov	r0, r2
 800af76:	f7ff fdfd 	bl	800ab74 <cmp_lfn>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <dir_find+0x106>
 800af80:	7d7b      	ldrb	r3, [r7, #21]
 800af82:	3b01      	subs	r3, #1
 800af84:	b2db      	uxtb	r3, r3
 800af86:	e000      	b.n	800af8a <dir_find+0x108>
 800af88:	23ff      	movs	r3, #255	@ 0xff
 800af8a:	757b      	strb	r3, [r7, #21]
 800af8c:	e024      	b.n	800afd8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af8e:	7d7b      	ldrb	r3, [r7, #21]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d109      	bne.n	800afa8 <dir_find+0x126>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff ff51 	bl	800ae40 <sum_sfn>
 800af9e:	4603      	mov	r3, r0
 800afa0:	461a      	mov	r2, r3
 800afa2:	7d3b      	ldrb	r3, [r7, #20]
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d024      	beq.n	800aff2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10a      	bne.n	800afcc <dir_find+0x14a>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a18      	ldr	r0, [r3, #32]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3324      	adds	r3, #36	@ 0x24
 800afbe:	220b      	movs	r2, #11
 800afc0:	4619      	mov	r1, r3
 800afc2:	f7fe fe21 	bl	8009c08 <mem_cmp>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d014      	beq.n	800aff6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afcc:	23ff      	movs	r3, #255	@ 0xff
 800afce:	757b      	strb	r3, [r7, #21]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f04f 32ff 	mov.w	r2, #4294967295
 800afd6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800afd8:	2100      	movs	r1, #0
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fc6e 	bl	800a8bc <dir_next>
 800afe0:	4603      	mov	r3, r0
 800afe2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f43f af65 	beq.w	800aeb6 <dir_find+0x34>
 800afec:	e004      	b.n	800aff8 <dir_find+0x176>
		if (res != FR_OK) break;
 800afee:	bf00      	nop
 800aff0:	e002      	b.n	800aff8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aff2:	bf00      	nop
 800aff4:	e000      	b.n	800aff8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800aff6:	bf00      	nop

	return res;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08c      	sub	sp, #48	@ 0x30
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b018:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <dir_register+0x20>
 800b020:	2306      	movs	r3, #6
 800b022:	e0e0      	b.n	800b1e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b024:	2300      	movs	r3, #0
 800b026:	627b      	str	r3, [r7, #36]	@ 0x24
 800b028:	e002      	b.n	800b030 <dir_register+0x2c>
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	3301      	adds	r3, #1
 800b02e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	4413      	add	r3, r2
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f4      	bne.n	800b02a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b046:	f107 030c 	add.w	r3, r7, #12
 800b04a:	220c      	movs	r2, #12
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fd9f 	bl	8009b90 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d032      	beq.n	800b0c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2240      	movs	r2, #64	@ 0x40
 800b060:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800b064:	2301      	movs	r3, #1
 800b066:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b068:	e016      	b.n	800b098 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	691a      	ldr	r2, [r3, #16]
 800b074:	f107 010c 	add.w	r1, r7, #12
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	f7ff fe53 	bl	800ad24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff feff 	bl	800ae82 <dir_find>
 800b084:	4603      	mov	r3, r0
 800b086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b08a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b094:	3301      	adds	r3, #1
 800b096:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09a:	2b63      	cmp	r3, #99	@ 0x63
 800b09c:	d9e5      	bls.n	800b06a <dir_register+0x66>
 800b09e:	e000      	b.n	800b0a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b0a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a4:	2b64      	cmp	r3, #100	@ 0x64
 800b0a6:	d101      	bne.n	800b0ac <dir_register+0xa8>
 800b0a8:	2307      	movs	r3, #7
 800b0aa:	e09c      	b.n	800b1e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b0ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d002      	beq.n	800b0ba <dir_register+0xb6>
 800b0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0b8:	e095      	b.n	800b1e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b0ba:	7dfa      	ldrb	r2, [r7, #23]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d007      	beq.n	800b0dc <dir_register+0xd8>
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	4a47      	ldr	r2, [pc, #284]	@ (800b1f0 <dir_register+0x1ec>)
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d6:	089b      	lsrs	r3, r3, #2
 800b0d8:	3301      	adds	r3, #1
 800b0da:	e000      	b.n	800b0de <dir_register+0xda>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b0e0:	6a39      	ldr	r1, [r7, #32]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff fcc0 	bl	800aa68 <dir_alloc>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b0ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d148      	bne.n	800b188 <dir_register+0x184>
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	623b      	str	r3, [r7, #32]
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d042      	beq.n	800b188 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	015b      	lsls	r3, r3, #5
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff fb4b 	bl	800a7aa <dir_sdi>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b11a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d132      	bne.n	800b188 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3324      	adds	r3, #36	@ 0x24
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff fe8a 	bl	800ae40 <sum_sfn>
 800b12c:	4603      	mov	r3, r0
 800b12e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	4619      	mov	r1, r3
 800b136:	69f8      	ldr	r0, [r7, #28]
 800b138:	f7fe ff58 	bl	8009fec <move_window>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b142:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b146:	2b00      	cmp	r3, #0
 800b148:	d11d      	bne.n	800b186 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	6918      	ldr	r0, [r3, #16]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a19      	ldr	r1, [r3, #32]
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	b2da      	uxtb	r2, r3
 800b156:	7efb      	ldrb	r3, [r7, #27]
 800b158:	f7ff fd7c 	bl	800ac54 <put_lfn>
				fs->wflag = 1;
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	2201      	movs	r2, #1
 800b160:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b162:	2100      	movs	r1, #0
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fba9 	bl	800a8bc <dir_next>
 800b16a:	4603      	mov	r3, r0
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b170:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b174:	2b00      	cmp	r3, #0
 800b176:	d107      	bne.n	800b188 <dir_register+0x184>
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	623b      	str	r3, [r7, #32]
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1d5      	bne.n	800b130 <dir_register+0x12c>
 800b184:	e000      	b.n	800b188 <dir_register+0x184>
				if (res != FR_OK) break;
 800b186:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b188:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d128      	bne.n	800b1e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	4619      	mov	r1, r3
 800b196:	69f8      	ldr	r0, [r7, #28]
 800b198:	f7fe ff28 	bl	8009fec <move_window>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d11b      	bne.n	800b1e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fd0d 	bl	8009bd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a18      	ldr	r0, [r3, #32]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3324      	adds	r3, #36	@ 0x24
 800b1c0:	220b      	movs	r2, #11
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f7fe fce4 	bl	8009b90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	330c      	adds	r3, #12
 800b1d4:	f002 0218 	and.w	r2, r2, #24
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b1e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3730      	adds	r7, #48	@ 0x30
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	4ec4ec4f 	.word	0x4ec4ec4f

0800b1f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	@ 0x28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	613b      	str	r3, [r7, #16]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	2300      	movs	r3, #0
 800b20e:	617b      	str	r3, [r7, #20]
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	61ba      	str	r2, [r7, #24]
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4413      	add	r3, r2
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b224:	2b1f      	cmp	r3, #31
 800b226:	d940      	bls.n	800b2aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b22a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b22c:	d006      	beq.n	800b23c <create_name+0x48>
 800b22e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b230:	2b5c      	cmp	r3, #92	@ 0x5c
 800b232:	d110      	bne.n	800b256 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b234:	e002      	b.n	800b23c <create_name+0x48>
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	3301      	adds	r3, #1
 800b23a:	61bb      	str	r3, [r7, #24]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	4413      	add	r3, r2
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b2f      	cmp	r3, #47	@ 0x2f
 800b246:	d0f6      	beq.n	800b236 <create_name+0x42>
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	4413      	add	r3, r2
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b5c      	cmp	r3, #92	@ 0x5c
 800b252:	d0f0      	beq.n	800b236 <create_name+0x42>
			break;
 800b254:	e02a      	b.n	800b2ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2bfe      	cmp	r3, #254	@ 0xfe
 800b25a:	d901      	bls.n	800b260 <create_name+0x6c>
 800b25c:	2306      	movs	r3, #6
 800b25e:	e17d      	b.n	800b55c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b260:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b262:	b2db      	uxtb	r3, r3
 800b264:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b268:	2101      	movs	r1, #1
 800b26a:	4618      	mov	r0, r3
 800b26c:	f001 f9b8 	bl	800c5e0 <ff_convert>
 800b270:	4603      	mov	r3, r0
 800b272:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <create_name+0x8a>
 800b27a:	2306      	movs	r3, #6
 800b27c:	e16e      	b.n	800b55c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b27e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b280:	2b7f      	cmp	r3, #127	@ 0x7f
 800b282:	d809      	bhi.n	800b298 <create_name+0xa4>
 800b284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b286:	4619      	mov	r1, r3
 800b288:	488d      	ldr	r0, [pc, #564]	@ (800b4c0 <create_name+0x2cc>)
 800b28a:	f7fe fce4 	bl	8009c56 <chk_chr>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <create_name+0xa4>
 800b294:	2306      	movs	r3, #6
 800b296:	e161      	b.n	800b55c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	1c5a      	adds	r2, r3, #1
 800b29c:	617a      	str	r2, [r7, #20]
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b2a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b2a8:	e7b4      	b.n	800b214 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b2aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	441a      	add	r2, r3
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b2b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2b8:	2b1f      	cmp	r3, #31
 800b2ba:	d801      	bhi.n	800b2c0 <create_name+0xcc>
 800b2bc:	2304      	movs	r3, #4
 800b2be:	e000      	b.n	800b2c2 <create_name+0xce>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2c6:	e011      	b.n	800b2ec <create_name+0xf8>
		w = lfn[di - 1];
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b2da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2dc:	2b20      	cmp	r3, #32
 800b2de:	d002      	beq.n	800b2e6 <create_name+0xf2>
 800b2e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2e4:	d106      	bne.n	800b2f4 <create_name+0x100>
		di--;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1ea      	bne.n	800b2c8 <create_name+0xd4>
 800b2f2:	e000      	b.n	800b2f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b2f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	2200      	movs	r2, #0
 800b300:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <create_name+0x118>
 800b308:	2306      	movs	r3, #6
 800b30a:	e127      	b.n	800b55c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3324      	adds	r3, #36	@ 0x24
 800b310:	220b      	movs	r2, #11
 800b312:	2120      	movs	r1, #32
 800b314:	4618      	mov	r0, r3
 800b316:	f7fe fc5c 	bl	8009bd2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b31a:	2300      	movs	r3, #0
 800b31c:	61bb      	str	r3, [r7, #24]
 800b31e:	e002      	b.n	800b326 <create_name+0x132>
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	3301      	adds	r3, #1
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	4413      	add	r3, r2
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	2b20      	cmp	r3, #32
 800b332:	d0f5      	beq.n	800b320 <create_name+0x12c>
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	005b      	lsls	r3, r3, #1
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	881b      	ldrh	r3, [r3, #0]
 800b33e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b340:	d0ee      	beq.n	800b320 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d009      	beq.n	800b35c <create_name+0x168>
 800b348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b34c:	f043 0303 	orr.w	r3, r3, #3
 800b350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b354:	e002      	b.n	800b35c <create_name+0x168>
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	3b01      	subs	r3, #1
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d009      	beq.n	800b376 <create_name+0x182>
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b368:	3b01      	subs	r3, #1
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	2b2e      	cmp	r3, #46	@ 0x2e
 800b374:	d1ef      	bne.n	800b356 <create_name+0x162>

	i = b = 0; ni = 8;
 800b376:	2300      	movs	r3, #0
 800b378:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b37c:	2300      	movs	r3, #0
 800b37e:	623b      	str	r3, [r7, #32]
 800b380:	2308      	movs	r3, #8
 800b382:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	61ba      	str	r2, [r7, #24]
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	4413      	add	r3, r2
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b394:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 8090 	beq.w	800b4bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b39c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b39e:	2b20      	cmp	r3, #32
 800b3a0:	d006      	beq.n	800b3b0 <create_name+0x1bc>
 800b3a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3a6:	d10a      	bne.n	800b3be <create_name+0x1ca>
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d006      	beq.n	800b3be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3b4:	f043 0303 	orr.w	r3, r3, #3
 800b3b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b3bc:	e07d      	b.n	800b4ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b3be:	6a3a      	ldr	r2, [r7, #32]
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d203      	bcs.n	800b3ce <create_name+0x1da>
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d123      	bne.n	800b416 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	2b0b      	cmp	r3, #11
 800b3d2:	d106      	bne.n	800b3e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3d8:	f043 0303 	orr.w	r3, r3, #3
 800b3dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b3e0:	e075      	b.n	800b4ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d005      	beq.n	800b3f6 <create_name+0x202>
 800b3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3ee:	f043 0303 	orr.w	r3, r3, #3
 800b3f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d866      	bhi.n	800b4cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	61bb      	str	r3, [r7, #24]
 800b402:	2308      	movs	r3, #8
 800b404:	623b      	str	r3, [r7, #32]
 800b406:	230b      	movs	r3, #11
 800b408:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b40a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b414:	e051      	b.n	800b4ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b418:	2b7f      	cmp	r3, #127	@ 0x7f
 800b41a:	d914      	bls.n	800b446 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b41c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f001 f8dd 	bl	800c5e0 <ff_convert>
 800b426:	4603      	mov	r3, r0
 800b428:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b42a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <create_name+0x246>
 800b430:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b432:	3b80      	subs	r3, #128	@ 0x80
 800b434:	4a23      	ldr	r2, [pc, #140]	@ (800b4c4 <create_name+0x2d0>)
 800b436:	5cd3      	ldrb	r3, [r2, r3]
 800b438:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b43a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b43e:	f043 0302 	orr.w	r3, r3, #2
 800b442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d007      	beq.n	800b45c <create_name+0x268>
 800b44c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b44e:	4619      	mov	r1, r3
 800b450:	481d      	ldr	r0, [pc, #116]	@ (800b4c8 <create_name+0x2d4>)
 800b452:	f7fe fc00 	bl	8009c56 <chk_chr>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d008      	beq.n	800b46e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b45c:	235f      	movs	r3, #95	@ 0x5f
 800b45e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b464:	f043 0303 	orr.w	r3, r3, #3
 800b468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b46c:	e01b      	b.n	800b4a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b46e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b470:	2b40      	cmp	r3, #64	@ 0x40
 800b472:	d909      	bls.n	800b488 <create_name+0x294>
 800b474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b476:	2b5a      	cmp	r3, #90	@ 0x5a
 800b478:	d806      	bhi.n	800b488 <create_name+0x294>
					b |= 2;
 800b47a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b47e:	f043 0302 	orr.w	r3, r3, #2
 800b482:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b486:	e00e      	b.n	800b4a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b488:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b48a:	2b60      	cmp	r3, #96	@ 0x60
 800b48c:	d90b      	bls.n	800b4a6 <create_name+0x2b2>
 800b48e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b490:	2b7a      	cmp	r3, #122	@ 0x7a
 800b492:	d808      	bhi.n	800b4a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b498:	f043 0301 	orr.w	r3, r3, #1
 800b49c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b4a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4a2:	3b20      	subs	r3, #32
 800b4a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	623a      	str	r2, [r7, #32]
 800b4ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b4ae:	b2d1      	uxtb	r1, r2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	460a      	mov	r2, r1
 800b4b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b4ba:	e763      	b.n	800b384 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b4bc:	bf00      	nop
 800b4be:	e006      	b.n	800b4ce <create_name+0x2da>
 800b4c0:	0800d178 	.word	0x0800d178
 800b4c4:	0800d1d8 	.word	0x0800d1d8
 800b4c8:	0800d184 	.word	0x0800d184
			if (si > di) break;			/* No extension */
 800b4cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b4d4:	2be5      	cmp	r3, #229	@ 0xe5
 800b4d6:	d103      	bne.n	800b4e0 <create_name+0x2ec>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2205      	movs	r2, #5
 800b4dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d104      	bne.n	800b4f0 <create_name+0x2fc>
 800b4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b4f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4f4:	f003 030c 	and.w	r3, r3, #12
 800b4f8:	2b0c      	cmp	r3, #12
 800b4fa:	d005      	beq.n	800b508 <create_name+0x314>
 800b4fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	2b03      	cmp	r3, #3
 800b506:	d105      	bne.n	800b514 <create_name+0x320>
 800b508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b50c:	f043 0302 	orr.w	r3, r3, #2
 800b510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d117      	bne.n	800b550 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b524:	f003 0303 	and.w	r3, r3, #3
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d105      	bne.n	800b538 <create_name+0x344>
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b530:	f043 0310 	orr.w	r3, r3, #16
 800b534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b538:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b53c:	f003 030c 	and.w	r3, r3, #12
 800b540:	2b04      	cmp	r3, #4
 800b542:	d105      	bne.n	800b550 <create_name+0x35c>
 800b544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b548:	f043 0308 	orr.w	r3, r3, #8
 800b54c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b556:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b55a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3728      	adds	r7, #40	@ 0x28
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b578:	e002      	b.n	800b580 <follow_path+0x1c>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	3301      	adds	r3, #1
 800b57e:	603b      	str	r3, [r7, #0]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b2f      	cmp	r3, #47	@ 0x2f
 800b586:	d0f8      	beq.n	800b57a <follow_path+0x16>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b58e:	d0f4      	beq.n	800b57a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2200      	movs	r2, #0
 800b594:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b1f      	cmp	r3, #31
 800b59c:	d80a      	bhi.n	800b5b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2280      	movs	r2, #128	@ 0x80
 800b5a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff f8fe 	bl	800a7aa <dir_sdi>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	75fb      	strb	r3, [r7, #23]
 800b5b2:	e048      	b.n	800b646 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5b4:	463b      	mov	r3, r7
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fe1b 	bl	800b1f4 <create_name>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d139      	bne.n	800b63c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff fc5a 	bl	800ae82 <dir_find>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b5d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d12c      	bne.n	800b640 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b5e6:	7afb      	ldrb	r3, [r7, #11]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d127      	bne.n	800b640 <follow_path+0xdc>
 800b5f0:	2305      	movs	r3, #5
 800b5f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b5f4:	e024      	b.n	800b640 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d121      	bne.n	800b644 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	799b      	ldrb	r3, [r3, #6]
 800b604:	f003 0310 	and.w	r3, r3, #16
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b60c:	2305      	movs	r3, #5
 800b60e:	75fb      	strb	r3, [r7, #23]
 800b610:	e019      	b.n	800b646 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	8992      	ldrh	r2, [r2, #12]
 800b620:	fbb3 f0f2 	udiv	r0, r3, r2
 800b624:	fb00 f202 	mul.w	r2, r0, r2
 800b628:	1a9b      	subs	r3, r3, r2
 800b62a:	440b      	add	r3, r1
 800b62c:	4619      	mov	r1, r3
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f7ff fa61 	bl	800aaf6 <ld_clust>
 800b634:	4602      	mov	r2, r0
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b63a:	e7bb      	b.n	800b5b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800b63c:	bf00      	nop
 800b63e:	e002      	b.n	800b646 <follow_path+0xe2>
				break;
 800b640:	bf00      	nop
 800b642:	e000      	b.n	800b646 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b644:	bf00      	nop
			}
		}
	}

	return res;
 800b646:	7dfb      	ldrb	r3, [r7, #23]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b658:	f04f 33ff 	mov.w	r3, #4294967295
 800b65c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d031      	beq.n	800b6ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e002      	b.n	800b674 <get_ldnumber+0x24>
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	3301      	adds	r3, #1
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b1f      	cmp	r3, #31
 800b67a:	d903      	bls.n	800b684 <get_ldnumber+0x34>
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b3a      	cmp	r3, #58	@ 0x3a
 800b682:	d1f4      	bne.n	800b66e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b3a      	cmp	r3, #58	@ 0x3a
 800b68a:	d11c      	bne.n	800b6c6 <get_ldnumber+0x76>
			tp = *path;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	60fa      	str	r2, [r7, #12]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	3b30      	subs	r3, #48	@ 0x30
 800b69c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b09      	cmp	r3, #9
 800b6a2:	d80e      	bhi.n	800b6c2 <get_ldnumber+0x72>
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d10a      	bne.n	800b6c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d107      	bne.n	800b6c2 <get_ldnumber+0x72>
					vol = (int)i;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	617b      	str	r3, [r7, #20]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	e002      	b.n	800b6cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b6ca:	693b      	ldr	r3, [r7, #16]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	70da      	strb	r2, [r3, #3]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7fe fc7a 	bl	8009fec <move_window>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <check_fs+0x2a>
 800b6fe:	2304      	movs	r3, #4
 800b700:	e038      	b.n	800b774 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3338      	adds	r3, #56	@ 0x38
 800b706:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe f9be 	bl	8009a8c <ld_word>
 800b710:	4603      	mov	r3, r0
 800b712:	461a      	mov	r2, r3
 800b714:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b718:	429a      	cmp	r2, r3
 800b71a:	d001      	beq.n	800b720 <check_fs+0x48>
 800b71c:	2303      	movs	r3, #3
 800b71e:	e029      	b.n	800b774 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b726:	2be9      	cmp	r3, #233	@ 0xe9
 800b728:	d009      	beq.n	800b73e <check_fs+0x66>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b730:	2beb      	cmp	r3, #235	@ 0xeb
 800b732:	d11e      	bne.n	800b772 <check_fs+0x9a>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b73a:	2b90      	cmp	r3, #144	@ 0x90
 800b73c:	d119      	bne.n	800b772 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3338      	adds	r3, #56	@ 0x38
 800b742:	3336      	adds	r3, #54	@ 0x36
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe f9b9 	bl	8009abc <ld_dword>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b750:	4a0a      	ldr	r2, [pc, #40]	@ (800b77c <check_fs+0xa4>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d101      	bne.n	800b75a <check_fs+0x82>
 800b756:	2300      	movs	r3, #0
 800b758:	e00c      	b.n	800b774 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3338      	adds	r3, #56	@ 0x38
 800b75e:	3352      	adds	r3, #82	@ 0x52
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe f9ab 	bl	8009abc <ld_dword>
 800b766:	4603      	mov	r3, r0
 800b768:	4a05      	ldr	r2, [pc, #20]	@ (800b780 <check_fs+0xa8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d101      	bne.n	800b772 <check_fs+0x9a>
 800b76e:	2300      	movs	r3, #0
 800b770:	e000      	b.n	800b774 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b772:	2302      	movs	r3, #2
}
 800b774:	4618      	mov	r0, r3
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	00544146 	.word	0x00544146
 800b780:	33544146 	.word	0x33544146

0800b784 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b096      	sub	sp, #88	@ 0x58
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	4613      	mov	r3, r2
 800b790:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff ff59 	bl	800b650 <get_ldnumber>
 800b79e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	da01      	bge.n	800b7aa <find_volume+0x26>
 800b7a6:	230b      	movs	r3, #11
 800b7a8:	e265      	b.n	800bc76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b7aa:	4a9f      	ldr	r2, [pc, #636]	@ (800ba28 <find_volume+0x2a4>)
 800b7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <find_volume+0x3a>
 800b7ba:	230c      	movs	r3, #12
 800b7bc:	e25b      	b.n	800bc76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b7c4:	79fb      	ldrb	r3, [r7, #7]
 800b7c6:	f023 0301 	bic.w	r3, r3, #1
 800b7ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d01a      	beq.n	800b80a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fe f8b7 	bl	800994c <disk_status>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b7e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10c      	bne.n	800b80a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d007      	beq.n	800b806 <find_volume+0x82>
 800b7f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7fa:	f003 0304 	and.w	r3, r3, #4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b802:	230a      	movs	r3, #10
 800b804:	e237      	b.n	800bc76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b806:	2300      	movs	r3, #0
 800b808:	e235      	b.n	800bc76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	2200      	movs	r2, #0
 800b80e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b812:	b2da      	uxtb	r2, r3
 800b814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b816:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81a:	785b      	ldrb	r3, [r3, #1]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe f8af 	bl	8009980 <disk_initialize>
 800b822:	4603      	mov	r3, r0
 800b824:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b828:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b834:	2303      	movs	r3, #3
 800b836:	e21e      	b.n	800bc76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b838:	79fb      	ldrb	r3, [r7, #7]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d007      	beq.n	800b84e <find_volume+0xca>
 800b83e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b842:	f003 0304 	and.w	r3, r3, #4
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b84a:	230a      	movs	r3, #10
 800b84c:	e213      	b.n	800bc76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b850:	7858      	ldrb	r0, [r3, #1]
 800b852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b854:	330c      	adds	r3, #12
 800b856:	461a      	mov	r2, r3
 800b858:	2102      	movs	r1, #2
 800b85a:	f7fe f8f9 	bl	8009a50 <disk_ioctl>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <find_volume+0xe4>
 800b864:	2301      	movs	r3, #1
 800b866:	e206      	b.n	800bc76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86a:	899b      	ldrh	r3, [r3, #12]
 800b86c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b870:	d80d      	bhi.n	800b88e <find_volume+0x10a>
 800b872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b874:	899b      	ldrh	r3, [r3, #12]
 800b876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b87a:	d308      	bcc.n	800b88e <find_volume+0x10a>
 800b87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87e:	899b      	ldrh	r3, [r3, #12]
 800b880:	461a      	mov	r2, r3
 800b882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b884:	899b      	ldrh	r3, [r3, #12]
 800b886:	3b01      	subs	r3, #1
 800b888:	4013      	ands	r3, r2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <find_volume+0x10e>
 800b88e:	2301      	movs	r3, #1
 800b890:	e1f1      	b.n	800bc76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b896:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b898:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b89a:	f7ff ff1d 	bl	800b6d8 <check_fs>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d149      	bne.n	800b940 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8b0:	e01e      	b.n	800b8f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b8b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b8c0:	4413      	add	r3, r2
 800b8c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d006      	beq.n	800b8dc <find_volume+0x158>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe f8f2 	bl	8009abc <ld_dword>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	e000      	b.n	800b8de <find_volume+0x15a>
 800b8dc:	2200      	movs	r2, #0
 800b8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	3358      	adds	r3, #88	@ 0x58
 800b8e4:	443b      	add	r3, r7
 800b8e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d9dd      	bls.n	800b8b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b8fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <find_volume+0x182>
 800b900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b902:	3b01      	subs	r3, #1
 800b904:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	3358      	adds	r3, #88	@ 0x58
 800b90c:	443b      	add	r3, r7
 800b90e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b912:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <find_volume+0x1a2>
 800b91a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b91c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b91e:	f7ff fedb 	bl	800b6d8 <check_fs>
 800b922:	4603      	mov	r3, r0
 800b924:	e000      	b.n	800b928 <find_volume+0x1a4>
 800b926:	2303      	movs	r3, #3
 800b928:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b92c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b930:	2b01      	cmp	r3, #1
 800b932:	d905      	bls.n	800b940 <find_volume+0x1bc>
 800b934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b936:	3301      	adds	r3, #1
 800b938:	643b      	str	r3, [r7, #64]	@ 0x40
 800b93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d9e2      	bls.n	800b906 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b940:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b944:	2b04      	cmp	r3, #4
 800b946:	d101      	bne.n	800b94c <find_volume+0x1c8>
 800b948:	2301      	movs	r3, #1
 800b94a:	e194      	b.n	800bc76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b94c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b950:	2b01      	cmp	r3, #1
 800b952:	d901      	bls.n	800b958 <find_volume+0x1d4>
 800b954:	230d      	movs	r3, #13
 800b956:	e18e      	b.n	800bc76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95a:	3338      	adds	r3, #56	@ 0x38
 800b95c:	330b      	adds	r3, #11
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe f894 	bl	8009a8c <ld_word>
 800b964:	4603      	mov	r3, r0
 800b966:	461a      	mov	r2, r3
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	899b      	ldrh	r3, [r3, #12]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d001      	beq.n	800b974 <find_volume+0x1f0>
 800b970:	230d      	movs	r3, #13
 800b972:	e180      	b.n	800bc76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b976:	3338      	adds	r3, #56	@ 0x38
 800b978:	3316      	adds	r3, #22
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe f886 	bl	8009a8c <ld_word>
 800b980:	4603      	mov	r3, r0
 800b982:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <find_volume+0x214>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	3338      	adds	r3, #56	@ 0x38
 800b98e:	3324      	adds	r3, #36	@ 0x24
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe f893 	bl	8009abc <ld_dword>
 800b996:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b99c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9aa:	789b      	ldrb	r3, [r3, #2]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d005      	beq.n	800b9bc <find_volume+0x238>
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	789b      	ldrb	r3, [r3, #2]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d001      	beq.n	800b9bc <find_volume+0x238>
 800b9b8:	230d      	movs	r3, #13
 800b9ba:	e15c      	b.n	800bc76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9be:	789b      	ldrb	r3, [r3, #2]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c4:	fb02 f303 	mul.w	r3, r2, r3
 800b9c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d8:	895b      	ldrh	r3, [r3, #10]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d008      	beq.n	800b9f0 <find_volume+0x26c>
 800b9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e0:	895b      	ldrh	r3, [r3, #10]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e6:	895b      	ldrh	r3, [r3, #10]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <find_volume+0x270>
 800b9f0:	230d      	movs	r3, #13
 800b9f2:	e140      	b.n	800bc76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f6:	3338      	adds	r3, #56	@ 0x38
 800b9f8:	3311      	adds	r3, #17
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe f846 	bl	8009a8c <ld_word>
 800ba00:	4603      	mov	r3, r0
 800ba02:	461a      	mov	r2, r3
 800ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ba08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0a:	891b      	ldrh	r3, [r3, #8]
 800ba0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba0e:	8992      	ldrh	r2, [r2, #12]
 800ba10:	0952      	lsrs	r2, r2, #5
 800ba12:	b292      	uxth	r2, r2
 800ba14:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba18:	fb01 f202 	mul.w	r2, r1, r2
 800ba1c:	1a9b      	subs	r3, r3, r2
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <find_volume+0x2a8>
 800ba24:	230d      	movs	r3, #13
 800ba26:	e126      	b.n	800bc76 <find_volume+0x4f2>
 800ba28:	2001cb00 	.word	0x2001cb00

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2e:	3338      	adds	r3, #56	@ 0x38
 800ba30:	3313      	adds	r3, #19
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe f82a 	bl	8009a8c <ld_word>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <find_volume+0x2cc>
 800ba42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba44:	3338      	adds	r3, #56	@ 0x38
 800ba46:	3320      	adds	r3, #32
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe f837 	bl	8009abc <ld_dword>
 800ba4e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba52:	3338      	adds	r3, #56	@ 0x38
 800ba54:	330e      	adds	r3, #14
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe f818 	bl	8009a8c <ld_word>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <find_volume+0x2e6>
 800ba66:	230d      	movs	r3, #13
 800ba68:	e105      	b.n	800bc76 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba6e:	4413      	add	r3, r2
 800ba70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba72:	8911      	ldrh	r1, [r2, #8]
 800ba74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba76:	8992      	ldrh	r2, [r2, #12]
 800ba78:	0952      	lsrs	r2, r2, #5
 800ba7a:	b292      	uxth	r2, r2
 800ba7c:	fbb1 f2f2 	udiv	r2, r1, r2
 800ba80:	b292      	uxth	r2, r2
 800ba82:	4413      	add	r3, r2
 800ba84:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d201      	bcs.n	800ba92 <find_volume+0x30e>
 800ba8e:	230d      	movs	r3, #13
 800ba90:	e0f1      	b.n	800bc76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba9a:	8952      	ldrh	r2, [r2, #10]
 800ba9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800baa0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <find_volume+0x328>
 800baa8:	230d      	movs	r3, #13
 800baaa:	e0e4      	b.n	800bc76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800baac:	2303      	movs	r3, #3
 800baae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bab8:	4293      	cmp	r3, r2
 800baba:	d802      	bhi.n	800bac2 <find_volume+0x33e>
 800babc:	2302      	movs	r3, #2
 800babe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bac8:	4293      	cmp	r3, r2
 800baca:	d802      	bhi.n	800bad2 <find_volume+0x34e>
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad4:	1c9a      	adds	r2, r3, #2
 800bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bade:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bae0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bae4:	441a      	add	r2, r3
 800bae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800baea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baee:	441a      	add	r2, r3
 800baf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800baf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800baf8:	2b03      	cmp	r3, #3
 800bafa:	d11e      	bne.n	800bb3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	3338      	adds	r3, #56	@ 0x38
 800bb00:	332a      	adds	r3, #42	@ 0x2a
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fd ffc2 	bl	8009a8c <ld_word>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <find_volume+0x38e>
 800bb0e:	230d      	movs	r3, #13
 800bb10:	e0b1      	b.n	800bc76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb14:	891b      	ldrh	r3, [r3, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <find_volume+0x39a>
 800bb1a:	230d      	movs	r3, #13
 800bb1c:	e0ab      	b.n	800bc76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb20:	3338      	adds	r3, #56	@ 0x38
 800bb22:	332c      	adds	r3, #44	@ 0x2c
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fd ffc9 	bl	8009abc <ld_dword>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb38:	e01f      	b.n	800bb7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3c:	891b      	ldrh	r3, [r3, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d101      	bne.n	800bb46 <find_volume+0x3c2>
 800bb42:	230d      	movs	r3, #13
 800bb44:	e097      	b.n	800bc76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb4c:	441a      	add	r2, r3
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb50:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d103      	bne.n	800bb62 <find_volume+0x3de>
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	e00a      	b.n	800bb78 <find_volume+0x3f4>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	69da      	ldr	r2, [r3, #28]
 800bb66:	4613      	mov	r3, r2
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	085a      	lsrs	r2, r3, #1
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb78:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7c:	6a1a      	ldr	r2, [r3, #32]
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb80:	899b      	ldrh	r3, [r3, #12]
 800bb82:	4619      	mov	r1, r3
 800bb84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb86:	440b      	add	r3, r1
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb8c:	8989      	ldrh	r1, [r1, #12]
 800bb8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d201      	bcs.n	800bb9a <find_volume+0x416>
 800bb96:	230d      	movs	r3, #13
 800bb98:	e06d      	b.n	800bc76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	619a      	str	r2, [r3, #24]
 800bba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba4:	699a      	ldr	r2, [r3, #24]
 800bba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbac:	2280      	movs	r2, #128	@ 0x80
 800bbae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bbb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d149      	bne.n	800bc4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbba:	3338      	adds	r3, #56	@ 0x38
 800bbbc:	3330      	adds	r3, #48	@ 0x30
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fd ff64 	bl	8009a8c <ld_word>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d140      	bne.n	800bc4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bbca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbcc:	3301      	adds	r3, #1
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bbd2:	f7fe fa0b 	bl	8009fec <move_window>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d137      	bne.n	800bc4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	2200      	movs	r2, #0
 800bbe0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	3338      	adds	r3, #56	@ 0x38
 800bbe6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fd ff4e 	bl	8009a8c <ld_word>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d127      	bne.n	800bc4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	3338      	adds	r3, #56	@ 0x38
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fd ff5b 	bl	8009abc <ld_dword>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4a1d      	ldr	r2, [pc, #116]	@ (800bc80 <find_volume+0x4fc>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d11e      	bne.n	800bc4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc10:	3338      	adds	r3, #56	@ 0x38
 800bc12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fd ff50 	bl	8009abc <ld_dword>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	4a19      	ldr	r2, [pc, #100]	@ (800bc84 <find_volume+0x500>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d113      	bne.n	800bc4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc26:	3338      	adds	r3, #56	@ 0x38
 800bc28:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fd ff45 	bl	8009abc <ld_dword>
 800bc32:	4602      	mov	r2, r0
 800bc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc36:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3a:	3338      	adds	r3, #56	@ 0x38
 800bc3c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fd ff3b 	bl	8009abc <ld_dword>
 800bc46:	4602      	mov	r2, r0
 800bc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bc52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc54:	4b0c      	ldr	r3, [pc, #48]	@ (800bc88 <find_volume+0x504>)
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc88 <find_volume+0x504>)
 800bc5e:	801a      	strh	r2, [r3, #0]
 800bc60:	4b09      	ldr	r3, [pc, #36]	@ (800bc88 <find_volume+0x504>)
 800bc62:	881a      	ldrh	r2, [r3, #0]
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6a:	4a08      	ldr	r2, [pc, #32]	@ (800bc8c <find_volume+0x508>)
 800bc6c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc70:	f7fe f954 	bl	8009f1c <clear_lock>
#endif
	return FR_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3758      	adds	r7, #88	@ 0x58
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	41615252 	.word	0x41615252
 800bc84:	61417272 	.word	0x61417272
 800bc88:	2001cb04 	.word	0x2001cb04
 800bc8c:	2001cb28 	.word	0x2001cb28

0800bc90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bc9a:	2309      	movs	r3, #9
 800bc9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d01c      	beq.n	800bcde <validate+0x4e>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d018      	beq.n	800bcde <validate+0x4e>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d013      	beq.n	800bcde <validate+0x4e>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	889a      	ldrh	r2, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	88db      	ldrh	r3, [r3, #6]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d10c      	bne.n	800bcde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	785b      	ldrb	r3, [r3, #1]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fd fe3e 	bl	800994c <disk_status>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <validate+0x4e>
			res = FR_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <validate+0x5a>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	e000      	b.n	800bcec <validate+0x5c>
 800bcea:	2300      	movs	r3, #0
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	6013      	str	r3, [r2, #0]
	return res;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bd0e:	f107 0310 	add.w	r3, r7, #16
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff fc9c 	bl	800b650 <get_ldnumber>
 800bd18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da01      	bge.n	800bd24 <f_mount+0x28>
 800bd20:	230b      	movs	r3, #11
 800bd22:	e02b      	b.n	800bd7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd24:	4a17      	ldr	r2, [pc, #92]	@ (800bd84 <f_mount+0x88>)
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d005      	beq.n	800bd40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd34:	69b8      	ldr	r0, [r7, #24]
 800bd36:	f7fe f8f1 	bl	8009f1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d002      	beq.n	800bd4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	490d      	ldr	r1, [pc, #52]	@ (800bd84 <f_mount+0x88>)
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <f_mount+0x66>
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d001      	beq.n	800bd66 <f_mount+0x6a>
 800bd62:	2300      	movs	r3, #0
 800bd64:	e00a      	b.n	800bd7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd66:	f107 010c 	add.w	r1, r7, #12
 800bd6a:	f107 0308 	add.w	r3, r7, #8
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fd07 	bl	800b784 <find_volume>
 800bd76:	4603      	mov	r3, r0
 800bd78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3720      	adds	r7, #32
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	2001cb00 	.word	0x2001cb00

0800bd88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b09a      	sub	sp, #104	@ 0x68
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <f_open+0x18>
 800bd9c:	2309      	movs	r3, #9
 800bd9e:	e1b7      	b.n	800c110 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bda0:	79fb      	ldrb	r3, [r7, #7]
 800bda2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bda6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bda8:	79fa      	ldrb	r2, [r7, #7]
 800bdaa:	f107 0114 	add.w	r1, r7, #20
 800bdae:	f107 0308 	add.w	r3, r7, #8
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fce6 	bl	800b784 <find_volume>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800bdbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f040 819b 	bne.w	800c0fe <f_open+0x376>
		dj.obj.fs = fs;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	f107 0318 	add.w	r3, r7, #24
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7ff fbc5 	bl	800b564 <follow_path>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bde0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d118      	bne.n	800be1a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bde8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bdec:	b25b      	sxtb	r3, r3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	da03      	bge.n	800bdfa <f_open+0x72>
				res = FR_INVALID_NAME;
 800bdf2:	2306      	movs	r3, #6
 800bdf4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bdf8:	e00f      	b.n	800be1a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	bf8c      	ite	hi
 800be00:	2301      	movhi	r3, #1
 800be02:	2300      	movls	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	461a      	mov	r2, r3
 800be08:	f107 0318 	add.w	r3, r7, #24
 800be0c:	4611      	mov	r1, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fd ff3c 	bl	8009c8c <chk_lock>
 800be14:	4603      	mov	r3, r0
 800be16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	f003 031c 	and.w	r3, r3, #28
 800be20:	2b00      	cmp	r3, #0
 800be22:	d07f      	beq.n	800bf24 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800be24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d017      	beq.n	800be5c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800be2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be30:	2b04      	cmp	r3, #4
 800be32:	d10e      	bne.n	800be52 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be34:	f7fd ff86 	bl	8009d44 <enq_lock>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d006      	beq.n	800be4c <f_open+0xc4>
 800be3e:	f107 0318 	add.w	r3, r7, #24
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff f8de 	bl	800b004 <dir_register>
 800be48:	4603      	mov	r3, r0
 800be4a:	e000      	b.n	800be4e <f_open+0xc6>
 800be4c:	2312      	movs	r3, #18
 800be4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be52:	79fb      	ldrb	r3, [r7, #7]
 800be54:	f043 0308 	orr.w	r3, r3, #8
 800be58:	71fb      	strb	r3, [r7, #7]
 800be5a:	e010      	b.n	800be7e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be5c:	7fbb      	ldrb	r3, [r7, #30]
 800be5e:	f003 0311 	and.w	r3, r3, #17
 800be62:	2b00      	cmp	r3, #0
 800be64:	d003      	beq.n	800be6e <f_open+0xe6>
					res = FR_DENIED;
 800be66:	2307      	movs	r3, #7
 800be68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800be6c:	e007      	b.n	800be7e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	f003 0304 	and.w	r3, r3, #4
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <f_open+0xf6>
 800be78:	2308      	movs	r3, #8
 800be7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be82:	2b00      	cmp	r3, #0
 800be84:	d168      	bne.n	800bf58 <f_open+0x1d0>
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	f003 0308 	and.w	r3, r3, #8
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d063      	beq.n	800bf58 <f_open+0x1d0>
				dw = GET_FATTIME();
 800be90:	f7fd fcfe 	bl	8009890 <get_fattime>
 800be94:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be98:	330e      	adds	r3, #14
 800be9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fd fe4b 	bl	8009b38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea4:	3316      	adds	r3, #22
 800bea6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fd fe45 	bl	8009b38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800beae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb0:	330b      	adds	r3, #11
 800beb2:	2220      	movs	r2, #32
 800beb4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beba:	4611      	mov	r1, r2
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe fe1a 	bl	800aaf6 <ld_clust>
 800bec2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bec8:	2200      	movs	r2, #0
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fe32 	bl	800ab34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed2:	331c      	adds	r3, #28
 800bed4:	2100      	movs	r1, #0
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fd fe2e 	bl	8009b38 <st_dword>
					fs->wflag = 1;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2201      	movs	r2, #1
 800bee0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d037      	beq.n	800bf58 <f_open+0x1d0>
						dw = fs->winsect;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beec:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800beee:	f107 0318 	add.w	r3, r7, #24
 800bef2:	2200      	movs	r2, #0
 800bef4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fb22 	bl	800a540 <remove_chain>
 800befc:	4603      	mov	r3, r0
 800befe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800bf02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d126      	bne.n	800bf58 <f_open+0x1d0>
							res = move_window(fs, dw);
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe f86c 	bl	8009fec <move_window>
 800bf14:	4603      	mov	r3, r0
 800bf16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf1e:	3a01      	subs	r2, #1
 800bf20:	615a      	str	r2, [r3, #20]
 800bf22:	e019      	b.n	800bf58 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bf24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d115      	bne.n	800bf58 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf2c:	7fbb      	ldrb	r3, [r7, #30]
 800bf2e:	f003 0310 	and.w	r3, r3, #16
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <f_open+0x1b6>
					res = FR_NO_FILE;
 800bf36:	2304      	movs	r3, #4
 800bf38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf3c:	e00c      	b.n	800bf58 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	f003 0302 	and.w	r3, r3, #2
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d007      	beq.n	800bf58 <f_open+0x1d0>
 800bf48:	7fbb      	ldrb	r3, [r7, #30]
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <f_open+0x1d0>
						res = FR_DENIED;
 800bf52:	2307      	movs	r3, #7
 800bf54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d126      	bne.n	800bfae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf60:	79fb      	ldrb	r3, [r7, #7]
 800bf62:	f003 0308 	and.w	r3, r3, #8
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf70:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bf7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf80:	79fb      	ldrb	r3, [r7, #7]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	bf8c      	ite	hi
 800bf86:	2301      	movhi	r3, #1
 800bf88:	2300      	movls	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f107 0318 	add.w	r3, r7, #24
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fd fef7 	bl	8009d88 <inc_lock>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <f_open+0x226>
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bfae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f040 80a3 	bne.w	800c0fe <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fd99 	bl	800aaf6 <ld_clust>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	331c      	adds	r3, #28
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fd fd74 	bl	8009abc <ld_dword>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	88da      	ldrh	r2, [r3, #6]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	79fa      	ldrb	r2, [r7, #7]
 800bff2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	3330      	adds	r3, #48	@ 0x30
 800c00a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c00e:	2100      	movs	r1, #0
 800c010:	4618      	mov	r0, r3
 800c012:	f7fd fdde 	bl	8009bd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	f003 0320 	and.w	r3, r3, #32
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d06e      	beq.n	800c0fe <f_open+0x376>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d06a      	beq.n	800c0fe <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	68da      	ldr	r2, [r3, #12]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	895b      	ldrh	r3, [r3, #10]
 800c034:	461a      	mov	r2, r3
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	899b      	ldrh	r3, [r3, #12]
 800c03a:	fb02 f303 	mul.w	r3, r2, r3
 800c03e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c04c:	e016      	b.n	800c07c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe f887 	bl	800a166 <get_fat>
 800c058:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c05a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d802      	bhi.n	800c066 <f_open+0x2de>
 800c060:	2302      	movs	r3, #2
 800c062:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06c:	d102      	bne.n	800c074 <f_open+0x2ec>
 800c06e:	2301      	movs	r3, #1
 800c070:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c074:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c07c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <f_open+0x304>
 800c084:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c088:	429a      	cmp	r2, r3
 800c08a:	d8e0      	bhi.n	800c04e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c090:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c092:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c096:	2b00      	cmp	r3, #0
 800c098:	d131      	bne.n	800c0fe <f_open+0x376>
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	899b      	ldrh	r3, [r3, #12]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0a6:	fb01 f202 	mul.w	r2, r1, r2
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d026      	beq.n	800c0fe <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe f837 	bl	800a128 <clust2sect>
 800c0ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <f_open+0x342>
						res = FR_INT_ERR;
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c0c8:	e019      	b.n	800c0fe <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	899b      	ldrh	r3, [r3, #12]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d8:	441a      	add	r2, r3
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	7858      	ldrb	r0, [r3, #1]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6a1a      	ldr	r2, [r3, #32]
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	f7fd fc6f 	bl	80099d0 <disk_read>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <f_open+0x376>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c0fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c102:	2b00      	cmp	r3, #0
 800c104:	d002      	beq.n	800c10c <f_open+0x384>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c10c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c110:	4618      	mov	r0, r3
 800c112:	3768      	adds	r7, #104	@ 0x68
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	@ 0x38
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2200      	movs	r2, #0
 800c12e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f107 0214 	add.w	r2, r7, #20
 800c136:	4611      	mov	r1, r2
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff fda9 	bl	800bc90 <validate>
 800c13e:	4603      	mov	r3, r0
 800c140:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d107      	bne.n	800c15c <f_read+0x44>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	7d5b      	ldrb	r3, [r3, #21]
 800c150:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c154:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <f_read+0x4a>
 800c15c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c160:	e135      	b.n	800c3ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	7d1b      	ldrb	r3, [r3, #20]
 800c166:	f003 0301 	and.w	r3, r3, #1
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <f_read+0x5a>
 800c16e:	2307      	movs	r3, #7
 800c170:	e12d      	b.n	800c3ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	68da      	ldr	r2, [r3, #12]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	6a3b      	ldr	r3, [r7, #32]
 800c182:	429a      	cmp	r2, r3
 800c184:	f240 811e 	bls.w	800c3c4 <f_read+0x2ac>
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c18c:	e11a      	b.n	800c3c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	8992      	ldrh	r2, [r2, #12]
 800c196:	fbb3 f1f2 	udiv	r1, r3, r2
 800c19a:	fb01 f202 	mul.w	r2, r1, r2
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 80d5 	bne.w	800c350 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	8992      	ldrh	r2, [r2, #12]
 800c1ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	8952      	ldrh	r2, [r2, #10]
 800c1b6:	3a01      	subs	r2, #1
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d12f      	bne.n	800c222 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	699b      	ldr	r3, [r3, #24]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d103      	bne.n	800c1d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1d0:	e013      	b.n	800c1fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7fe faaa 	bl	800a73a <clmt_clust>
 800c1e6:	6338      	str	r0, [r7, #48]	@ 0x30
 800c1e8:	e007      	b.n	800c1fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f7fd ffb7 	bl	800a166 <get_fat>
 800c1f8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d804      	bhi.n	800c20a <f_read+0xf2>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2202      	movs	r2, #2
 800c204:	755a      	strb	r2, [r3, #21]
 800c206:	2302      	movs	r3, #2
 800c208:	e0e1      	b.n	800c3ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c210:	d104      	bne.n	800c21c <f_read+0x104>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2201      	movs	r2, #1
 800c216:	755a      	strb	r2, [r3, #21]
 800c218:	2301      	movs	r3, #1
 800c21a:	e0d8      	b.n	800c3ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c220:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f7fd ff7c 	bl	800a128 <clust2sect>
 800c230:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <f_read+0x12a>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2202      	movs	r2, #2
 800c23c:	755a      	strb	r2, [r3, #21]
 800c23e:	2302      	movs	r3, #2
 800c240:	e0c5      	b.n	800c3ce <f_read+0x2b6>
			sect += csect;
 800c242:	69ba      	ldr	r2, [r7, #24]
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	4413      	add	r3, r2
 800c248:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	899b      	ldrh	r3, [r3, #12]
 800c24e:	461a      	mov	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	fbb3 f3f2 	udiv	r3, r3, r2
 800c256:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d041      	beq.n	800c2e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c262:	4413      	add	r3, r2
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	8952      	ldrh	r2, [r2, #10]
 800c268:	4293      	cmp	r3, r2
 800c26a:	d905      	bls.n	800c278 <f_read+0x160>
					cc = fs->csize - csect;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	895b      	ldrh	r3, [r3, #10]
 800c270:	461a      	mov	r2, r3
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	7858      	ldrb	r0, [r3, #1]
 800c27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c282:	f7fd fba5 	bl	80099d0 <disk_read>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <f_read+0x17e>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	755a      	strb	r2, [r3, #21]
 800c292:	2301      	movs	r3, #1
 800c294:	e09b      	b.n	800c3ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	7d1b      	ldrb	r3, [r3, #20]
 800c29a:	b25b      	sxtb	r3, r3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	da18      	bge.n	800c2d2 <f_read+0x1ba>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6a1a      	ldr	r2, [r3, #32]
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d911      	bls.n	800c2d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6a1a      	ldr	r2, [r3, #32]
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	8992      	ldrh	r2, [r2, #12]
 800c2ba:	fb02 f303 	mul.w	r3, r2, r3
 800c2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2c0:	18d0      	adds	r0, r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	899b      	ldrh	r3, [r3, #12]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	f7fd fc5f 	bl	8009b90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	899b      	ldrh	r3, [r3, #12]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2da:	fb02 f303 	mul.w	r3, r2, r3
 800c2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c2e0:	e05c      	b.n	800c39c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	69ba      	ldr	r2, [r7, #24]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d02e      	beq.n	800c34a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	7d1b      	ldrb	r3, [r3, #20]
 800c2f0:	b25b      	sxtb	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	da18      	bge.n	800c328 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	7858      	ldrb	r0, [r3, #1]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6a1a      	ldr	r2, [r3, #32]
 800c304:	2301      	movs	r3, #1
 800c306:	f7fd fb83 	bl	8009a10 <disk_write>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d004      	beq.n	800c31a <f_read+0x202>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2201      	movs	r2, #1
 800c314:	755a      	strb	r2, [r3, #21]
 800c316:	2301      	movs	r3, #1
 800c318:	e059      	b.n	800c3ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	7d1b      	ldrb	r3, [r3, #20]
 800c31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c322:	b2da      	uxtb	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	7858      	ldrb	r0, [r3, #1]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c332:	2301      	movs	r3, #1
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	f7fd fb4b 	bl	80099d0 <disk_read>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d004      	beq.n	800c34a <f_read+0x232>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2201      	movs	r2, #1
 800c344:	755a      	strb	r2, [r3, #21]
 800c346:	2301      	movs	r3, #1
 800c348:	e041      	b.n	800c3ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	899b      	ldrh	r3, [r3, #12]
 800c354:	4618      	mov	r0, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	699b      	ldr	r3, [r3, #24]
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	8992      	ldrh	r2, [r2, #12]
 800c35e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c362:	fb01 f202 	mul.w	r2, r1, r2
 800c366:	1a9b      	subs	r3, r3, r2
 800c368:	1ac3      	subs	r3, r0, r3
 800c36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c36c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	429a      	cmp	r2, r3
 800c372:	d901      	bls.n	800c378 <f_read+0x260>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	8992      	ldrh	r2, [r2, #12]
 800c386:	fbb3 f0f2 	udiv	r0, r3, r2
 800c38a:	fb00 f202 	mul.w	r2, r0, r2
 800c38e:	1a9b      	subs	r3, r3, r2
 800c390:	440b      	add	r3, r1
 800c392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c394:	4619      	mov	r1, r3
 800c396:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c398:	f7fd fbfa 	bl	8009b90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c39c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a0:	4413      	add	r3, r2
 800c3a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	699a      	ldr	r2, [r3, #24]
 800c3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3aa:	441a      	add	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	619a      	str	r2, [r3, #24]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b6:	441a      	add	r2, r3
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f47f aee1 	bne.w	800c18e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3738      	adds	r7, #56	@ 0x38
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b086      	sub	sp, #24
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f107 0208 	add.w	r2, r7, #8
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fc52 	bl	800bc90 <validate>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d168      	bne.n	800c4c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	7d1b      	ldrb	r3, [r3, #20]
 800c3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d062      	beq.n	800c4c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7d1b      	ldrb	r3, [r3, #20]
 800c406:	b25b      	sxtb	r3, r3
 800c408:	2b00      	cmp	r3, #0
 800c40a:	da15      	bge.n	800c438 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	7858      	ldrb	r0, [r3, #1]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1a      	ldr	r2, [r3, #32]
 800c41a:	2301      	movs	r3, #1
 800c41c:	f7fd faf8 	bl	8009a10 <disk_write>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <f_sync+0x54>
 800c426:	2301      	movs	r3, #1
 800c428:	e04f      	b.n	800c4ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	7d1b      	ldrb	r3, [r3, #20]
 800c42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c432:	b2da      	uxtb	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c438:	f7fd fa2a 	bl	8009890 <get_fattime>
 800c43c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c444:	4619      	mov	r1, r3
 800c446:	4610      	mov	r0, r2
 800c448:	f7fd fdd0 	bl	8009fec <move_window>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d138      	bne.n	800c4c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	330b      	adds	r3, #11
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	330b      	adds	r3, #11
 800c466:	f042 0220 	orr.w	r2, r2, #32
 800c46a:	b2d2      	uxtb	r2, r2
 800c46c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	461a      	mov	r2, r3
 800c478:	68f9      	ldr	r1, [r7, #12]
 800c47a:	f7fe fb5b 	bl	800ab34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f103 021c 	add.w	r2, r3, #28
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f7fd fb54 	bl	8009b38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3316      	adds	r3, #22
 800c494:	6939      	ldr	r1, [r7, #16]
 800c496:	4618      	mov	r0, r3
 800c498:	f7fd fb4e 	bl	8009b38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3312      	adds	r3, #18
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fd fb2d 	bl	8009b02 <st_word>
					fs->wflag = 1;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fd fdc9 	bl	800a048 <sync_fs>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	7d1b      	ldrb	r3, [r3, #20]
 800c4be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff ff7b 	bl	800c3d6 <f_sync>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d118      	bne.n	800c51c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f107 0208 	add.w	r2, r7, #8
 800c4f0:	4611      	mov	r1, r2
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff fbcc 	bl	800bc90 <validate>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10c      	bne.n	800c51c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	4618      	mov	r0, r3
 800c508:	f7fd fccc 	bl	8009ea4 <dec_lock>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
	...

0800c528 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	4613      	mov	r3, r2
 800c534:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c536:	2301      	movs	r3, #1
 800c538:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c53e:	4b1f      	ldr	r3, [pc, #124]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c540:	7a5b      	ldrb	r3, [r3, #9]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	2b00      	cmp	r3, #0
 800c546:	d131      	bne.n	800c5ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c548:	4b1c      	ldr	r3, [pc, #112]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c54a:	7a5b      	ldrb	r3, [r3, #9]
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	461a      	mov	r2, r3
 800c550:	4b1a      	ldr	r3, [pc, #104]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c552:	2100      	movs	r1, #0
 800c554:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c556:	4b19      	ldr	r3, [pc, #100]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c558:	7a5b      	ldrb	r3, [r3, #9]
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	4a17      	ldr	r2, [pc, #92]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c566:	4b15      	ldr	r3, [pc, #84]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c568:	7a5b      	ldrb	r3, [r3, #9]
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	461a      	mov	r2, r3
 800c56e:	4b13      	ldr	r3, [pc, #76]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c570:	4413      	add	r3, r2
 800c572:	79fa      	ldrb	r2, [r7, #7]
 800c574:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c576:	4b11      	ldr	r3, [pc, #68]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c578:	7a5b      	ldrb	r3, [r3, #9]
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	b2d1      	uxtb	r1, r2
 800c580:	4a0e      	ldr	r2, [pc, #56]	@ (800c5bc <FATFS_LinkDriverEx+0x94>)
 800c582:	7251      	strb	r1, [r2, #9]
 800c584:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c586:	7dbb      	ldrb	r3, [r7, #22]
 800c588:	3330      	adds	r3, #48	@ 0x30
 800c58a:	b2da      	uxtb	r2, r3
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	3301      	adds	r3, #1
 800c594:	223a      	movs	r2, #58	@ 0x3a
 800c596:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	3302      	adds	r3, #2
 800c59c:	222f      	movs	r2, #47	@ 0x2f
 800c59e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	3303      	adds	r3, #3
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	371c      	adds	r7, #28
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	2001cd28 	.word	0x2001cd28

0800c5c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7ff ffaa 	bl	800c528 <FATFS_LinkDriverEx>
 800c5d4:	4603      	mov	r3, r0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c5ec:	88fb      	ldrh	r3, [r7, #6]
 800c5ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5f0:	d802      	bhi.n	800c5f8 <ff_convert+0x18>
		c = chr;
 800c5f2:	88fb      	ldrh	r3, [r7, #6]
 800c5f4:	81fb      	strh	r3, [r7, #14]
 800c5f6:	e025      	b.n	800c644 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c5fe:	88fb      	ldrh	r3, [r7, #6]
 800c600:	2bff      	cmp	r3, #255	@ 0xff
 800c602:	d805      	bhi.n	800c610 <ff_convert+0x30>
 800c604:	88fb      	ldrh	r3, [r7, #6]
 800c606:	3b80      	subs	r3, #128	@ 0x80
 800c608:	4a12      	ldr	r2, [pc, #72]	@ (800c654 <ff_convert+0x74>)
 800c60a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c60e:	e000      	b.n	800c612 <ff_convert+0x32>
 800c610:	2300      	movs	r3, #0
 800c612:	81fb      	strh	r3, [r7, #14]
 800c614:	e016      	b.n	800c644 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c616:	2300      	movs	r3, #0
 800c618:	81fb      	strh	r3, [r7, #14]
 800c61a:	e009      	b.n	800c630 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c61c:	89fb      	ldrh	r3, [r7, #14]
 800c61e:	4a0d      	ldr	r2, [pc, #52]	@ (800c654 <ff_convert+0x74>)
 800c620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c624:	88fa      	ldrh	r2, [r7, #6]
 800c626:	429a      	cmp	r2, r3
 800c628:	d006      	beq.n	800c638 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c62a:	89fb      	ldrh	r3, [r7, #14]
 800c62c:	3301      	adds	r3, #1
 800c62e:	81fb      	strh	r3, [r7, #14]
 800c630:	89fb      	ldrh	r3, [r7, #14]
 800c632:	2b7f      	cmp	r3, #127	@ 0x7f
 800c634:	d9f2      	bls.n	800c61c <ff_convert+0x3c>
 800c636:	e000      	b.n	800c63a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c638:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c63a:	89fb      	ldrh	r3, [r7, #14]
 800c63c:	3380      	adds	r3, #128	@ 0x80
 800c63e:	b29b      	uxth	r3, r3
 800c640:	b2db      	uxtb	r3, r3
 800c642:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c644:	89fb      	ldrh	r3, [r7, #14]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	0800d268 	.word	0x0800d268

0800c658 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4603      	mov	r3, r0
 800c660:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c668:	d201      	bcs.n	800c66e <ff_wtoupper+0x16>
 800c66a:	4b3e      	ldr	r3, [pc, #248]	@ (800c764 <ff_wtoupper+0x10c>)
 800c66c:	e000      	b.n	800c670 <ff_wtoupper+0x18>
 800c66e:	4b3e      	ldr	r3, [pc, #248]	@ (800c768 <ff_wtoupper+0x110>)
 800c670:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	1c9a      	adds	r2, r3, #2
 800c676:	617a      	str	r2, [r7, #20]
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c67c:	8a7b      	ldrh	r3, [r7, #18]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d068      	beq.n	800c754 <ff_wtoupper+0xfc>
 800c682:	88fa      	ldrh	r2, [r7, #6]
 800c684:	8a7b      	ldrh	r3, [r7, #18]
 800c686:	429a      	cmp	r2, r3
 800c688:	d364      	bcc.n	800c754 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	1c9a      	adds	r2, r3, #2
 800c68e:	617a      	str	r2, [r7, #20]
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	823b      	strh	r3, [r7, #16]
 800c694:	8a3b      	ldrh	r3, [r7, #16]
 800c696:	0a1b      	lsrs	r3, r3, #8
 800c698:	81fb      	strh	r3, [r7, #14]
 800c69a:	8a3b      	ldrh	r3, [r7, #16]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c6a0:	88fa      	ldrh	r2, [r7, #6]
 800c6a2:	8a79      	ldrh	r1, [r7, #18]
 800c6a4:	8a3b      	ldrh	r3, [r7, #16]
 800c6a6:	440b      	add	r3, r1
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	da49      	bge.n	800c740 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c6ac:	89fb      	ldrh	r3, [r7, #14]
 800c6ae:	2b08      	cmp	r3, #8
 800c6b0:	d84f      	bhi.n	800c752 <ff_wtoupper+0xfa>
 800c6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b8 <ff_wtoupper+0x60>)
 800c6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b8:	0800c6dd 	.word	0x0800c6dd
 800c6bc:	0800c6ef 	.word	0x0800c6ef
 800c6c0:	0800c705 	.word	0x0800c705
 800c6c4:	0800c70d 	.word	0x0800c70d
 800c6c8:	0800c715 	.word	0x0800c715
 800c6cc:	0800c71d 	.word	0x0800c71d
 800c6d0:	0800c725 	.word	0x0800c725
 800c6d4:	0800c72d 	.word	0x0800c72d
 800c6d8:	0800c735 	.word	0x0800c735
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c6dc:	88fa      	ldrh	r2, [r7, #6]
 800c6de:	8a7b      	ldrh	r3, [r7, #18]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	80fb      	strh	r3, [r7, #6]
 800c6ec:	e027      	b.n	800c73e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c6ee:	88fa      	ldrh	r2, [r7, #6]
 800c6f0:	8a7b      	ldrh	r3, [r7, #18]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	88fa      	ldrh	r2, [r7, #6]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	80fb      	strh	r3, [r7, #6]
 800c702:	e01c      	b.n	800c73e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	3b10      	subs	r3, #16
 800c708:	80fb      	strh	r3, [r7, #6]
 800c70a:	e018      	b.n	800c73e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c70c:	88fb      	ldrh	r3, [r7, #6]
 800c70e:	3b20      	subs	r3, #32
 800c710:	80fb      	strh	r3, [r7, #6]
 800c712:	e014      	b.n	800c73e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c714:	88fb      	ldrh	r3, [r7, #6]
 800c716:	3b30      	subs	r3, #48	@ 0x30
 800c718:	80fb      	strh	r3, [r7, #6]
 800c71a:	e010      	b.n	800c73e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c71c:	88fb      	ldrh	r3, [r7, #6]
 800c71e:	3b1a      	subs	r3, #26
 800c720:	80fb      	strh	r3, [r7, #6]
 800c722:	e00c      	b.n	800c73e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c724:	88fb      	ldrh	r3, [r7, #6]
 800c726:	3308      	adds	r3, #8
 800c728:	80fb      	strh	r3, [r7, #6]
 800c72a:	e008      	b.n	800c73e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c72c:	88fb      	ldrh	r3, [r7, #6]
 800c72e:	3b50      	subs	r3, #80	@ 0x50
 800c730:	80fb      	strh	r3, [r7, #6]
 800c732:	e004      	b.n	800c73e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c734:	88fb      	ldrh	r3, [r7, #6]
 800c736:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c73a:	80fb      	strh	r3, [r7, #6]
 800c73c:	bf00      	nop
			}
			break;
 800c73e:	e008      	b.n	800c752 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c740:	89fb      	ldrh	r3, [r7, #14]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d195      	bne.n	800c672 <ff_wtoupper+0x1a>
 800c746:	8a3b      	ldrh	r3, [r7, #16]
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4413      	add	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c750:	e78f      	b.n	800c672 <ff_wtoupper+0x1a>
			break;
 800c752:	bf00      	nop
	}

	return chr;
 800c754:	88fb      	ldrh	r3, [r7, #6]
}
 800c756:	4618      	mov	r0, r3
 800c758:	371c      	adds	r7, #28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	0800d368 	.word	0x0800d368
 800c768:	0800d55c 	.word	0x0800d55c

0800c76c <siprintf>:
 800c76c:	b40e      	push	{r1, r2, r3}
 800c76e:	b500      	push	{lr}
 800c770:	b09c      	sub	sp, #112	@ 0x70
 800c772:	ab1d      	add	r3, sp, #116	@ 0x74
 800c774:	9002      	str	r0, [sp, #8]
 800c776:	9006      	str	r0, [sp, #24]
 800c778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c77c:	4809      	ldr	r0, [pc, #36]	@ (800c7a4 <siprintf+0x38>)
 800c77e:	9107      	str	r1, [sp, #28]
 800c780:	9104      	str	r1, [sp, #16]
 800c782:	4909      	ldr	r1, [pc, #36]	@ (800c7a8 <siprintf+0x3c>)
 800c784:	f853 2b04 	ldr.w	r2, [r3], #4
 800c788:	9105      	str	r1, [sp, #20]
 800c78a:	6800      	ldr	r0, [r0, #0]
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	a902      	add	r1, sp, #8
 800c790:	f000 f994 	bl	800cabc <_svfiprintf_r>
 800c794:	9b02      	ldr	r3, [sp, #8]
 800c796:	2200      	movs	r2, #0
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	b01c      	add	sp, #112	@ 0x70
 800c79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a0:	b003      	add	sp, #12
 800c7a2:	4770      	bx	lr
 800c7a4:	20016a9c 	.word	0x20016a9c
 800c7a8:	ffff0208 	.word	0xffff0208

0800c7ac <memset>:
 800c7ac:	4402      	add	r2, r0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d100      	bne.n	800c7b6 <memset+0xa>
 800c7b4:	4770      	bx	lr
 800c7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ba:	e7f9      	b.n	800c7b0 <memset+0x4>

0800c7bc <__errno>:
 800c7bc:	4b01      	ldr	r3, [pc, #4]	@ (800c7c4 <__errno+0x8>)
 800c7be:	6818      	ldr	r0, [r3, #0]
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	20016a9c 	.word	0x20016a9c

0800c7c8 <__libc_init_array>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	4d0d      	ldr	r5, [pc, #52]	@ (800c800 <__libc_init_array+0x38>)
 800c7cc:	4c0d      	ldr	r4, [pc, #52]	@ (800c804 <__libc_init_array+0x3c>)
 800c7ce:	1b64      	subs	r4, r4, r5
 800c7d0:	10a4      	asrs	r4, r4, #2
 800c7d2:	2600      	movs	r6, #0
 800c7d4:	42a6      	cmp	r6, r4
 800c7d6:	d109      	bne.n	800c7ec <__libc_init_array+0x24>
 800c7d8:	4d0b      	ldr	r5, [pc, #44]	@ (800c808 <__libc_init_array+0x40>)
 800c7da:	4c0c      	ldr	r4, [pc, #48]	@ (800c80c <__libc_init_array+0x44>)
 800c7dc:	f000 fc66 	bl	800d0ac <_init>
 800c7e0:	1b64      	subs	r4, r4, r5
 800c7e2:	10a4      	asrs	r4, r4, #2
 800c7e4:	2600      	movs	r6, #0
 800c7e6:	42a6      	cmp	r6, r4
 800c7e8:	d105      	bne.n	800c7f6 <__libc_init_array+0x2e>
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
 800c7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7f0:	4798      	blx	r3
 800c7f2:	3601      	adds	r6, #1
 800c7f4:	e7ee      	b.n	800c7d4 <__libc_init_array+0xc>
 800c7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7fa:	4798      	blx	r3
 800c7fc:	3601      	adds	r6, #1
 800c7fe:	e7f2      	b.n	800c7e6 <__libc_init_array+0x1e>
 800c800:	0800d654 	.word	0x0800d654
 800c804:	0800d654 	.word	0x0800d654
 800c808:	0800d654 	.word	0x0800d654
 800c80c:	0800d658 	.word	0x0800d658

0800c810 <__retarget_lock_acquire_recursive>:
 800c810:	4770      	bx	lr

0800c812 <__retarget_lock_release_recursive>:
 800c812:	4770      	bx	lr

0800c814 <_free_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4605      	mov	r5, r0
 800c818:	2900      	cmp	r1, #0
 800c81a:	d041      	beq.n	800c8a0 <_free_r+0x8c>
 800c81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c820:	1f0c      	subs	r4, r1, #4
 800c822:	2b00      	cmp	r3, #0
 800c824:	bfb8      	it	lt
 800c826:	18e4      	addlt	r4, r4, r3
 800c828:	f000 f8e0 	bl	800c9ec <__malloc_lock>
 800c82c:	4a1d      	ldr	r2, [pc, #116]	@ (800c8a4 <_free_r+0x90>)
 800c82e:	6813      	ldr	r3, [r2, #0]
 800c830:	b933      	cbnz	r3, 800c840 <_free_r+0x2c>
 800c832:	6063      	str	r3, [r4, #4]
 800c834:	6014      	str	r4, [r2, #0]
 800c836:	4628      	mov	r0, r5
 800c838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c83c:	f000 b8dc 	b.w	800c9f8 <__malloc_unlock>
 800c840:	42a3      	cmp	r3, r4
 800c842:	d908      	bls.n	800c856 <_free_r+0x42>
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	1821      	adds	r1, r4, r0
 800c848:	428b      	cmp	r3, r1
 800c84a:	bf01      	itttt	eq
 800c84c:	6819      	ldreq	r1, [r3, #0]
 800c84e:	685b      	ldreq	r3, [r3, #4]
 800c850:	1809      	addeq	r1, r1, r0
 800c852:	6021      	streq	r1, [r4, #0]
 800c854:	e7ed      	b.n	800c832 <_free_r+0x1e>
 800c856:	461a      	mov	r2, r3
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	b10b      	cbz	r3, 800c860 <_free_r+0x4c>
 800c85c:	42a3      	cmp	r3, r4
 800c85e:	d9fa      	bls.n	800c856 <_free_r+0x42>
 800c860:	6811      	ldr	r1, [r2, #0]
 800c862:	1850      	adds	r0, r2, r1
 800c864:	42a0      	cmp	r0, r4
 800c866:	d10b      	bne.n	800c880 <_free_r+0x6c>
 800c868:	6820      	ldr	r0, [r4, #0]
 800c86a:	4401      	add	r1, r0
 800c86c:	1850      	adds	r0, r2, r1
 800c86e:	4283      	cmp	r3, r0
 800c870:	6011      	str	r1, [r2, #0]
 800c872:	d1e0      	bne.n	800c836 <_free_r+0x22>
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	6053      	str	r3, [r2, #4]
 800c87a:	4408      	add	r0, r1
 800c87c:	6010      	str	r0, [r2, #0]
 800c87e:	e7da      	b.n	800c836 <_free_r+0x22>
 800c880:	d902      	bls.n	800c888 <_free_r+0x74>
 800c882:	230c      	movs	r3, #12
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	e7d6      	b.n	800c836 <_free_r+0x22>
 800c888:	6820      	ldr	r0, [r4, #0]
 800c88a:	1821      	adds	r1, r4, r0
 800c88c:	428b      	cmp	r3, r1
 800c88e:	bf04      	itt	eq
 800c890:	6819      	ldreq	r1, [r3, #0]
 800c892:	685b      	ldreq	r3, [r3, #4]
 800c894:	6063      	str	r3, [r4, #4]
 800c896:	bf04      	itt	eq
 800c898:	1809      	addeq	r1, r1, r0
 800c89a:	6021      	streq	r1, [r4, #0]
 800c89c:	6054      	str	r4, [r2, #4]
 800c89e:	e7ca      	b.n	800c836 <_free_r+0x22>
 800c8a0:	bd38      	pop	{r3, r4, r5, pc}
 800c8a2:	bf00      	nop
 800c8a4:	2001ce78 	.word	0x2001ce78

0800c8a8 <sbrk_aligned>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	4e0f      	ldr	r6, [pc, #60]	@ (800c8e8 <sbrk_aligned+0x40>)
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	6831      	ldr	r1, [r6, #0]
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	b911      	cbnz	r1, 800c8ba <sbrk_aligned+0x12>
 800c8b4:	f000 fba6 	bl	800d004 <_sbrk_r>
 800c8b8:	6030      	str	r0, [r6, #0]
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	4628      	mov	r0, r5
 800c8be:	f000 fba1 	bl	800d004 <_sbrk_r>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d103      	bne.n	800c8ce <sbrk_aligned+0x26>
 800c8c6:	f04f 34ff 	mov.w	r4, #4294967295
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	bd70      	pop	{r4, r5, r6, pc}
 800c8ce:	1cc4      	adds	r4, r0, #3
 800c8d0:	f024 0403 	bic.w	r4, r4, #3
 800c8d4:	42a0      	cmp	r0, r4
 800c8d6:	d0f8      	beq.n	800c8ca <sbrk_aligned+0x22>
 800c8d8:	1a21      	subs	r1, r4, r0
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f000 fb92 	bl	800d004 <_sbrk_r>
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d1f2      	bne.n	800c8ca <sbrk_aligned+0x22>
 800c8e4:	e7ef      	b.n	800c8c6 <sbrk_aligned+0x1e>
 800c8e6:	bf00      	nop
 800c8e8:	2001ce74 	.word	0x2001ce74

0800c8ec <_malloc_r>:
 800c8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f0:	1ccd      	adds	r5, r1, #3
 800c8f2:	f025 0503 	bic.w	r5, r5, #3
 800c8f6:	3508      	adds	r5, #8
 800c8f8:	2d0c      	cmp	r5, #12
 800c8fa:	bf38      	it	cc
 800c8fc:	250c      	movcc	r5, #12
 800c8fe:	2d00      	cmp	r5, #0
 800c900:	4606      	mov	r6, r0
 800c902:	db01      	blt.n	800c908 <_malloc_r+0x1c>
 800c904:	42a9      	cmp	r1, r5
 800c906:	d904      	bls.n	800c912 <_malloc_r+0x26>
 800c908:	230c      	movs	r3, #12
 800c90a:	6033      	str	r3, [r6, #0]
 800c90c:	2000      	movs	r0, #0
 800c90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9e8 <_malloc_r+0xfc>
 800c916:	f000 f869 	bl	800c9ec <__malloc_lock>
 800c91a:	f8d8 3000 	ldr.w	r3, [r8]
 800c91e:	461c      	mov	r4, r3
 800c920:	bb44      	cbnz	r4, 800c974 <_malloc_r+0x88>
 800c922:	4629      	mov	r1, r5
 800c924:	4630      	mov	r0, r6
 800c926:	f7ff ffbf 	bl	800c8a8 <sbrk_aligned>
 800c92a:	1c43      	adds	r3, r0, #1
 800c92c:	4604      	mov	r4, r0
 800c92e:	d158      	bne.n	800c9e2 <_malloc_r+0xf6>
 800c930:	f8d8 4000 	ldr.w	r4, [r8]
 800c934:	4627      	mov	r7, r4
 800c936:	2f00      	cmp	r7, #0
 800c938:	d143      	bne.n	800c9c2 <_malloc_r+0xd6>
 800c93a:	2c00      	cmp	r4, #0
 800c93c:	d04b      	beq.n	800c9d6 <_malloc_r+0xea>
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	4639      	mov	r1, r7
 800c942:	4630      	mov	r0, r6
 800c944:	eb04 0903 	add.w	r9, r4, r3
 800c948:	f000 fb5c 	bl	800d004 <_sbrk_r>
 800c94c:	4581      	cmp	r9, r0
 800c94e:	d142      	bne.n	800c9d6 <_malloc_r+0xea>
 800c950:	6821      	ldr	r1, [r4, #0]
 800c952:	1a6d      	subs	r5, r5, r1
 800c954:	4629      	mov	r1, r5
 800c956:	4630      	mov	r0, r6
 800c958:	f7ff ffa6 	bl	800c8a8 <sbrk_aligned>
 800c95c:	3001      	adds	r0, #1
 800c95e:	d03a      	beq.n	800c9d6 <_malloc_r+0xea>
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	442b      	add	r3, r5
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	f8d8 3000 	ldr.w	r3, [r8]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	bb62      	cbnz	r2, 800c9c8 <_malloc_r+0xdc>
 800c96e:	f8c8 7000 	str.w	r7, [r8]
 800c972:	e00f      	b.n	800c994 <_malloc_r+0xa8>
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	1b52      	subs	r2, r2, r5
 800c978:	d420      	bmi.n	800c9bc <_malloc_r+0xd0>
 800c97a:	2a0b      	cmp	r2, #11
 800c97c:	d917      	bls.n	800c9ae <_malloc_r+0xc2>
 800c97e:	1961      	adds	r1, r4, r5
 800c980:	42a3      	cmp	r3, r4
 800c982:	6025      	str	r5, [r4, #0]
 800c984:	bf18      	it	ne
 800c986:	6059      	strne	r1, [r3, #4]
 800c988:	6863      	ldr	r3, [r4, #4]
 800c98a:	bf08      	it	eq
 800c98c:	f8c8 1000 	streq.w	r1, [r8]
 800c990:	5162      	str	r2, [r4, r5]
 800c992:	604b      	str	r3, [r1, #4]
 800c994:	4630      	mov	r0, r6
 800c996:	f000 f82f 	bl	800c9f8 <__malloc_unlock>
 800c99a:	f104 000b 	add.w	r0, r4, #11
 800c99e:	1d23      	adds	r3, r4, #4
 800c9a0:	f020 0007 	bic.w	r0, r0, #7
 800c9a4:	1ac2      	subs	r2, r0, r3
 800c9a6:	bf1c      	itt	ne
 800c9a8:	1a1b      	subne	r3, r3, r0
 800c9aa:	50a3      	strne	r3, [r4, r2]
 800c9ac:	e7af      	b.n	800c90e <_malloc_r+0x22>
 800c9ae:	6862      	ldr	r2, [r4, #4]
 800c9b0:	42a3      	cmp	r3, r4
 800c9b2:	bf0c      	ite	eq
 800c9b4:	f8c8 2000 	streq.w	r2, [r8]
 800c9b8:	605a      	strne	r2, [r3, #4]
 800c9ba:	e7eb      	b.n	800c994 <_malloc_r+0xa8>
 800c9bc:	4623      	mov	r3, r4
 800c9be:	6864      	ldr	r4, [r4, #4]
 800c9c0:	e7ae      	b.n	800c920 <_malloc_r+0x34>
 800c9c2:	463c      	mov	r4, r7
 800c9c4:	687f      	ldr	r7, [r7, #4]
 800c9c6:	e7b6      	b.n	800c936 <_malloc_r+0x4a>
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	42a3      	cmp	r3, r4
 800c9ce:	d1fb      	bne.n	800c9c8 <_malloc_r+0xdc>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	6053      	str	r3, [r2, #4]
 800c9d4:	e7de      	b.n	800c994 <_malloc_r+0xa8>
 800c9d6:	230c      	movs	r3, #12
 800c9d8:	6033      	str	r3, [r6, #0]
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 f80c 	bl	800c9f8 <__malloc_unlock>
 800c9e0:	e794      	b.n	800c90c <_malloc_r+0x20>
 800c9e2:	6005      	str	r5, [r0, #0]
 800c9e4:	e7d6      	b.n	800c994 <_malloc_r+0xa8>
 800c9e6:	bf00      	nop
 800c9e8:	2001ce78 	.word	0x2001ce78

0800c9ec <__malloc_lock>:
 800c9ec:	4801      	ldr	r0, [pc, #4]	@ (800c9f4 <__malloc_lock+0x8>)
 800c9ee:	f7ff bf0f 	b.w	800c810 <__retarget_lock_acquire_recursive>
 800c9f2:	bf00      	nop
 800c9f4:	2001ce70 	.word	0x2001ce70

0800c9f8 <__malloc_unlock>:
 800c9f8:	4801      	ldr	r0, [pc, #4]	@ (800ca00 <__malloc_unlock+0x8>)
 800c9fa:	f7ff bf0a 	b.w	800c812 <__retarget_lock_release_recursive>
 800c9fe:	bf00      	nop
 800ca00:	2001ce70 	.word	0x2001ce70

0800ca04 <__ssputs_r>:
 800ca04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca08:	688e      	ldr	r6, [r1, #8]
 800ca0a:	461f      	mov	r7, r3
 800ca0c:	42be      	cmp	r6, r7
 800ca0e:	680b      	ldr	r3, [r1, #0]
 800ca10:	4682      	mov	sl, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	4690      	mov	r8, r2
 800ca16:	d82d      	bhi.n	800ca74 <__ssputs_r+0x70>
 800ca18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca20:	d026      	beq.n	800ca70 <__ssputs_r+0x6c>
 800ca22:	6965      	ldr	r5, [r4, #20]
 800ca24:	6909      	ldr	r1, [r1, #16]
 800ca26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca2a:	eba3 0901 	sub.w	r9, r3, r1
 800ca2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca32:	1c7b      	adds	r3, r7, #1
 800ca34:	444b      	add	r3, r9
 800ca36:	106d      	asrs	r5, r5, #1
 800ca38:	429d      	cmp	r5, r3
 800ca3a:	bf38      	it	cc
 800ca3c:	461d      	movcc	r5, r3
 800ca3e:	0553      	lsls	r3, r2, #21
 800ca40:	d527      	bpl.n	800ca92 <__ssputs_r+0x8e>
 800ca42:	4629      	mov	r1, r5
 800ca44:	f7ff ff52 	bl	800c8ec <_malloc_r>
 800ca48:	4606      	mov	r6, r0
 800ca4a:	b360      	cbz	r0, 800caa6 <__ssputs_r+0xa2>
 800ca4c:	6921      	ldr	r1, [r4, #16]
 800ca4e:	464a      	mov	r2, r9
 800ca50:	f000 fae8 	bl	800d024 <memcpy>
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca5e:	81a3      	strh	r3, [r4, #12]
 800ca60:	6126      	str	r6, [r4, #16]
 800ca62:	6165      	str	r5, [r4, #20]
 800ca64:	444e      	add	r6, r9
 800ca66:	eba5 0509 	sub.w	r5, r5, r9
 800ca6a:	6026      	str	r6, [r4, #0]
 800ca6c:	60a5      	str	r5, [r4, #8]
 800ca6e:	463e      	mov	r6, r7
 800ca70:	42be      	cmp	r6, r7
 800ca72:	d900      	bls.n	800ca76 <__ssputs_r+0x72>
 800ca74:	463e      	mov	r6, r7
 800ca76:	6820      	ldr	r0, [r4, #0]
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4641      	mov	r1, r8
 800ca7c:	f000 faa8 	bl	800cfd0 <memmove>
 800ca80:	68a3      	ldr	r3, [r4, #8]
 800ca82:	1b9b      	subs	r3, r3, r6
 800ca84:	60a3      	str	r3, [r4, #8]
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	4433      	add	r3, r6
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca92:	462a      	mov	r2, r5
 800ca94:	f000 fad4 	bl	800d040 <_realloc_r>
 800ca98:	4606      	mov	r6, r0
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d1e0      	bne.n	800ca60 <__ssputs_r+0x5c>
 800ca9e:	6921      	ldr	r1, [r4, #16]
 800caa0:	4650      	mov	r0, sl
 800caa2:	f7ff feb7 	bl	800c814 <_free_r>
 800caa6:	230c      	movs	r3, #12
 800caa8:	f8ca 3000 	str.w	r3, [sl]
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	f04f 30ff 	mov.w	r0, #4294967295
 800cab8:	e7e9      	b.n	800ca8e <__ssputs_r+0x8a>
	...

0800cabc <_svfiprintf_r>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	4698      	mov	r8, r3
 800cac2:	898b      	ldrh	r3, [r1, #12]
 800cac4:	061b      	lsls	r3, r3, #24
 800cac6:	b09d      	sub	sp, #116	@ 0x74
 800cac8:	4607      	mov	r7, r0
 800caca:	460d      	mov	r5, r1
 800cacc:	4614      	mov	r4, r2
 800cace:	d510      	bpl.n	800caf2 <_svfiprintf_r+0x36>
 800cad0:	690b      	ldr	r3, [r1, #16]
 800cad2:	b973      	cbnz	r3, 800caf2 <_svfiprintf_r+0x36>
 800cad4:	2140      	movs	r1, #64	@ 0x40
 800cad6:	f7ff ff09 	bl	800c8ec <_malloc_r>
 800cada:	6028      	str	r0, [r5, #0]
 800cadc:	6128      	str	r0, [r5, #16]
 800cade:	b930      	cbnz	r0, 800caee <_svfiprintf_r+0x32>
 800cae0:	230c      	movs	r3, #12
 800cae2:	603b      	str	r3, [r7, #0]
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	b01d      	add	sp, #116	@ 0x74
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caee:	2340      	movs	r3, #64	@ 0x40
 800caf0:	616b      	str	r3, [r5, #20]
 800caf2:	2300      	movs	r3, #0
 800caf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf6:	2320      	movs	r3, #32
 800caf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb00:	2330      	movs	r3, #48	@ 0x30
 800cb02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cca0 <_svfiprintf_r+0x1e4>
 800cb06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb0a:	f04f 0901 	mov.w	r9, #1
 800cb0e:	4623      	mov	r3, r4
 800cb10:	469a      	mov	sl, r3
 800cb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb16:	b10a      	cbz	r2, 800cb1c <_svfiprintf_r+0x60>
 800cb18:	2a25      	cmp	r2, #37	@ 0x25
 800cb1a:	d1f9      	bne.n	800cb10 <_svfiprintf_r+0x54>
 800cb1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb20:	d00b      	beq.n	800cb3a <_svfiprintf_r+0x7e>
 800cb22:	465b      	mov	r3, fp
 800cb24:	4622      	mov	r2, r4
 800cb26:	4629      	mov	r1, r5
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7ff ff6b 	bl	800ca04 <__ssputs_r>
 800cb2e:	3001      	adds	r0, #1
 800cb30:	f000 80a7 	beq.w	800cc82 <_svfiprintf_r+0x1c6>
 800cb34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb36:	445a      	add	r2, fp
 800cb38:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f000 809f 	beq.w	800cc82 <_svfiprintf_r+0x1c6>
 800cb44:	2300      	movs	r3, #0
 800cb46:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb4e:	f10a 0a01 	add.w	sl, sl, #1
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	9307      	str	r3, [sp, #28]
 800cb56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb5c:	4654      	mov	r4, sl
 800cb5e:	2205      	movs	r2, #5
 800cb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb64:	484e      	ldr	r0, [pc, #312]	@ (800cca0 <_svfiprintf_r+0x1e4>)
 800cb66:	f7f3 fb5b 	bl	8000220 <memchr>
 800cb6a:	9a04      	ldr	r2, [sp, #16]
 800cb6c:	b9d8      	cbnz	r0, 800cba6 <_svfiprintf_r+0xea>
 800cb6e:	06d0      	lsls	r0, r2, #27
 800cb70:	bf44      	itt	mi
 800cb72:	2320      	movmi	r3, #32
 800cb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb78:	0711      	lsls	r1, r2, #28
 800cb7a:	bf44      	itt	mi
 800cb7c:	232b      	movmi	r3, #43	@ 0x2b
 800cb7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb82:	f89a 3000 	ldrb.w	r3, [sl]
 800cb86:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb88:	d015      	beq.n	800cbb6 <_svfiprintf_r+0xfa>
 800cb8a:	9a07      	ldr	r2, [sp, #28]
 800cb8c:	4654      	mov	r4, sl
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f04f 0c0a 	mov.w	ip, #10
 800cb94:	4621      	mov	r1, r4
 800cb96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb9a:	3b30      	subs	r3, #48	@ 0x30
 800cb9c:	2b09      	cmp	r3, #9
 800cb9e:	d94b      	bls.n	800cc38 <_svfiprintf_r+0x17c>
 800cba0:	b1b0      	cbz	r0, 800cbd0 <_svfiprintf_r+0x114>
 800cba2:	9207      	str	r2, [sp, #28]
 800cba4:	e014      	b.n	800cbd0 <_svfiprintf_r+0x114>
 800cba6:	eba0 0308 	sub.w	r3, r0, r8
 800cbaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	46a2      	mov	sl, r4
 800cbb4:	e7d2      	b.n	800cb5c <_svfiprintf_r+0xa0>
 800cbb6:	9b03      	ldr	r3, [sp, #12]
 800cbb8:	1d19      	adds	r1, r3, #4
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	9103      	str	r1, [sp, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	bfbb      	ittet	lt
 800cbc2:	425b      	neglt	r3, r3
 800cbc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cbc8:	9307      	strge	r3, [sp, #28]
 800cbca:	9307      	strlt	r3, [sp, #28]
 800cbcc:	bfb8      	it	lt
 800cbce:	9204      	strlt	r2, [sp, #16]
 800cbd0:	7823      	ldrb	r3, [r4, #0]
 800cbd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbd4:	d10a      	bne.n	800cbec <_svfiprintf_r+0x130>
 800cbd6:	7863      	ldrb	r3, [r4, #1]
 800cbd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbda:	d132      	bne.n	800cc42 <_svfiprintf_r+0x186>
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	1d1a      	adds	r2, r3, #4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	9203      	str	r2, [sp, #12]
 800cbe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbe8:	3402      	adds	r4, #2
 800cbea:	9305      	str	r3, [sp, #20]
 800cbec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ccb0 <_svfiprintf_r+0x1f4>
 800cbf0:	7821      	ldrb	r1, [r4, #0]
 800cbf2:	2203      	movs	r2, #3
 800cbf4:	4650      	mov	r0, sl
 800cbf6:	f7f3 fb13 	bl	8000220 <memchr>
 800cbfa:	b138      	cbz	r0, 800cc0c <_svfiprintf_r+0x150>
 800cbfc:	9b04      	ldr	r3, [sp, #16]
 800cbfe:	eba0 000a 	sub.w	r0, r0, sl
 800cc02:	2240      	movs	r2, #64	@ 0x40
 800cc04:	4082      	lsls	r2, r0
 800cc06:	4313      	orrs	r3, r2
 800cc08:	3401      	adds	r4, #1
 800cc0a:	9304      	str	r3, [sp, #16]
 800cc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc10:	4824      	ldr	r0, [pc, #144]	@ (800cca4 <_svfiprintf_r+0x1e8>)
 800cc12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc16:	2206      	movs	r2, #6
 800cc18:	f7f3 fb02 	bl	8000220 <memchr>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d036      	beq.n	800cc8e <_svfiprintf_r+0x1d2>
 800cc20:	4b21      	ldr	r3, [pc, #132]	@ (800cca8 <_svfiprintf_r+0x1ec>)
 800cc22:	bb1b      	cbnz	r3, 800cc6c <_svfiprintf_r+0x1b0>
 800cc24:	9b03      	ldr	r3, [sp, #12]
 800cc26:	3307      	adds	r3, #7
 800cc28:	f023 0307 	bic.w	r3, r3, #7
 800cc2c:	3308      	adds	r3, #8
 800cc2e:	9303      	str	r3, [sp, #12]
 800cc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc32:	4433      	add	r3, r6
 800cc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc36:	e76a      	b.n	800cb0e <_svfiprintf_r+0x52>
 800cc38:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	2001      	movs	r0, #1
 800cc40:	e7a8      	b.n	800cb94 <_svfiprintf_r+0xd8>
 800cc42:	2300      	movs	r3, #0
 800cc44:	3401      	adds	r4, #1
 800cc46:	9305      	str	r3, [sp, #20]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f04f 0c0a 	mov.w	ip, #10
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc54:	3a30      	subs	r2, #48	@ 0x30
 800cc56:	2a09      	cmp	r2, #9
 800cc58:	d903      	bls.n	800cc62 <_svfiprintf_r+0x1a6>
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0c6      	beq.n	800cbec <_svfiprintf_r+0x130>
 800cc5e:	9105      	str	r1, [sp, #20]
 800cc60:	e7c4      	b.n	800cbec <_svfiprintf_r+0x130>
 800cc62:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc66:	4604      	mov	r4, r0
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e7f0      	b.n	800cc4e <_svfiprintf_r+0x192>
 800cc6c:	ab03      	add	r3, sp, #12
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	462a      	mov	r2, r5
 800cc72:	4b0e      	ldr	r3, [pc, #56]	@ (800ccac <_svfiprintf_r+0x1f0>)
 800cc74:	a904      	add	r1, sp, #16
 800cc76:	4638      	mov	r0, r7
 800cc78:	f3af 8000 	nop.w
 800cc7c:	1c42      	adds	r2, r0, #1
 800cc7e:	4606      	mov	r6, r0
 800cc80:	d1d6      	bne.n	800cc30 <_svfiprintf_r+0x174>
 800cc82:	89ab      	ldrh	r3, [r5, #12]
 800cc84:	065b      	lsls	r3, r3, #25
 800cc86:	f53f af2d 	bmi.w	800cae4 <_svfiprintf_r+0x28>
 800cc8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc8c:	e72c      	b.n	800cae8 <_svfiprintf_r+0x2c>
 800cc8e:	ab03      	add	r3, sp, #12
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	462a      	mov	r2, r5
 800cc94:	4b05      	ldr	r3, [pc, #20]	@ (800ccac <_svfiprintf_r+0x1f0>)
 800cc96:	a904      	add	r1, sp, #16
 800cc98:	4638      	mov	r0, r7
 800cc9a:	f000 f879 	bl	800cd90 <_printf_i>
 800cc9e:	e7ed      	b.n	800cc7c <_svfiprintf_r+0x1c0>
 800cca0:	0800d618 	.word	0x0800d618
 800cca4:	0800d622 	.word	0x0800d622
 800cca8:	00000000 	.word	0x00000000
 800ccac:	0800ca05 	.word	0x0800ca05
 800ccb0:	0800d61e 	.word	0x0800d61e

0800ccb4 <_printf_common>:
 800ccb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb8:	4616      	mov	r6, r2
 800ccba:	4698      	mov	r8, r3
 800ccbc:	688a      	ldr	r2, [r1, #8]
 800ccbe:	690b      	ldr	r3, [r1, #16]
 800ccc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	bfb8      	it	lt
 800ccc8:	4613      	movlt	r3, r2
 800ccca:	6033      	str	r3, [r6, #0]
 800cccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b10a      	cbz	r2, 800ccda <_printf_common+0x26>
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	6033      	str	r3, [r6, #0]
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	0699      	lsls	r1, r3, #26
 800ccde:	bf42      	ittt	mi
 800cce0:	6833      	ldrmi	r3, [r6, #0]
 800cce2:	3302      	addmi	r3, #2
 800cce4:	6033      	strmi	r3, [r6, #0]
 800cce6:	6825      	ldr	r5, [r4, #0]
 800cce8:	f015 0506 	ands.w	r5, r5, #6
 800ccec:	d106      	bne.n	800ccfc <_printf_common+0x48>
 800ccee:	f104 0a19 	add.w	sl, r4, #25
 800ccf2:	68e3      	ldr	r3, [r4, #12]
 800ccf4:	6832      	ldr	r2, [r6, #0]
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	dc26      	bgt.n	800cd4a <_printf_common+0x96>
 800ccfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd00:	6822      	ldr	r2, [r4, #0]
 800cd02:	3b00      	subs	r3, #0
 800cd04:	bf18      	it	ne
 800cd06:	2301      	movne	r3, #1
 800cd08:	0692      	lsls	r2, r2, #26
 800cd0a:	d42b      	bmi.n	800cd64 <_printf_common+0xb0>
 800cd0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd10:	4641      	mov	r1, r8
 800cd12:	4638      	mov	r0, r7
 800cd14:	47c8      	blx	r9
 800cd16:	3001      	adds	r0, #1
 800cd18:	d01e      	beq.n	800cd58 <_printf_common+0xa4>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	6922      	ldr	r2, [r4, #16]
 800cd1e:	f003 0306 	and.w	r3, r3, #6
 800cd22:	2b04      	cmp	r3, #4
 800cd24:	bf02      	ittt	eq
 800cd26:	68e5      	ldreq	r5, [r4, #12]
 800cd28:	6833      	ldreq	r3, [r6, #0]
 800cd2a:	1aed      	subeq	r5, r5, r3
 800cd2c:	68a3      	ldr	r3, [r4, #8]
 800cd2e:	bf0c      	ite	eq
 800cd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd34:	2500      	movne	r5, #0
 800cd36:	4293      	cmp	r3, r2
 800cd38:	bfc4      	itt	gt
 800cd3a:	1a9b      	subgt	r3, r3, r2
 800cd3c:	18ed      	addgt	r5, r5, r3
 800cd3e:	2600      	movs	r6, #0
 800cd40:	341a      	adds	r4, #26
 800cd42:	42b5      	cmp	r5, r6
 800cd44:	d11a      	bne.n	800cd7c <_printf_common+0xc8>
 800cd46:	2000      	movs	r0, #0
 800cd48:	e008      	b.n	800cd5c <_printf_common+0xa8>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	4641      	mov	r1, r8
 800cd50:	4638      	mov	r0, r7
 800cd52:	47c8      	blx	r9
 800cd54:	3001      	adds	r0, #1
 800cd56:	d103      	bne.n	800cd60 <_printf_common+0xac>
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd60:	3501      	adds	r5, #1
 800cd62:	e7c6      	b.n	800ccf2 <_printf_common+0x3e>
 800cd64:	18e1      	adds	r1, r4, r3
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	2030      	movs	r0, #48	@ 0x30
 800cd6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd6e:	4422      	add	r2, r4
 800cd70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd78:	3302      	adds	r3, #2
 800cd7a:	e7c7      	b.n	800cd0c <_printf_common+0x58>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4622      	mov	r2, r4
 800cd80:	4641      	mov	r1, r8
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c8      	blx	r9
 800cd86:	3001      	adds	r0, #1
 800cd88:	d0e6      	beq.n	800cd58 <_printf_common+0xa4>
 800cd8a:	3601      	adds	r6, #1
 800cd8c:	e7d9      	b.n	800cd42 <_printf_common+0x8e>
	...

0800cd90 <_printf_i>:
 800cd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	7e0f      	ldrb	r7, [r1, #24]
 800cd96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd98:	2f78      	cmp	r7, #120	@ 0x78
 800cd9a:	4691      	mov	r9, r2
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	469a      	mov	sl, r3
 800cda2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cda6:	d807      	bhi.n	800cdb8 <_printf_i+0x28>
 800cda8:	2f62      	cmp	r7, #98	@ 0x62
 800cdaa:	d80a      	bhi.n	800cdc2 <_printf_i+0x32>
 800cdac:	2f00      	cmp	r7, #0
 800cdae:	f000 80d2 	beq.w	800cf56 <_printf_i+0x1c6>
 800cdb2:	2f58      	cmp	r7, #88	@ 0x58
 800cdb4:	f000 80b9 	beq.w	800cf2a <_printf_i+0x19a>
 800cdb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdc0:	e03a      	b.n	800ce38 <_printf_i+0xa8>
 800cdc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdc6:	2b15      	cmp	r3, #21
 800cdc8:	d8f6      	bhi.n	800cdb8 <_printf_i+0x28>
 800cdca:	a101      	add	r1, pc, #4	@ (adr r1, 800cdd0 <_printf_i+0x40>)
 800cdcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdd0:	0800ce29 	.word	0x0800ce29
 800cdd4:	0800ce3d 	.word	0x0800ce3d
 800cdd8:	0800cdb9 	.word	0x0800cdb9
 800cddc:	0800cdb9 	.word	0x0800cdb9
 800cde0:	0800cdb9 	.word	0x0800cdb9
 800cde4:	0800cdb9 	.word	0x0800cdb9
 800cde8:	0800ce3d 	.word	0x0800ce3d
 800cdec:	0800cdb9 	.word	0x0800cdb9
 800cdf0:	0800cdb9 	.word	0x0800cdb9
 800cdf4:	0800cdb9 	.word	0x0800cdb9
 800cdf8:	0800cdb9 	.word	0x0800cdb9
 800cdfc:	0800cf3d 	.word	0x0800cf3d
 800ce00:	0800ce67 	.word	0x0800ce67
 800ce04:	0800cef7 	.word	0x0800cef7
 800ce08:	0800cdb9 	.word	0x0800cdb9
 800ce0c:	0800cdb9 	.word	0x0800cdb9
 800ce10:	0800cf5f 	.word	0x0800cf5f
 800ce14:	0800cdb9 	.word	0x0800cdb9
 800ce18:	0800ce67 	.word	0x0800ce67
 800ce1c:	0800cdb9 	.word	0x0800cdb9
 800ce20:	0800cdb9 	.word	0x0800cdb9
 800ce24:	0800ceff 	.word	0x0800ceff
 800ce28:	6833      	ldr	r3, [r6, #0]
 800ce2a:	1d1a      	adds	r2, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	6032      	str	r2, [r6, #0]
 800ce30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e09d      	b.n	800cf78 <_printf_i+0x1e8>
 800ce3c:	6833      	ldr	r3, [r6, #0]
 800ce3e:	6820      	ldr	r0, [r4, #0]
 800ce40:	1d19      	adds	r1, r3, #4
 800ce42:	6031      	str	r1, [r6, #0]
 800ce44:	0606      	lsls	r6, r0, #24
 800ce46:	d501      	bpl.n	800ce4c <_printf_i+0xbc>
 800ce48:	681d      	ldr	r5, [r3, #0]
 800ce4a:	e003      	b.n	800ce54 <_printf_i+0xc4>
 800ce4c:	0645      	lsls	r5, r0, #25
 800ce4e:	d5fb      	bpl.n	800ce48 <_printf_i+0xb8>
 800ce50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	da03      	bge.n	800ce60 <_printf_i+0xd0>
 800ce58:	232d      	movs	r3, #45	@ 0x2d
 800ce5a:	426d      	negs	r5, r5
 800ce5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce60:	4859      	ldr	r0, [pc, #356]	@ (800cfc8 <_printf_i+0x238>)
 800ce62:	230a      	movs	r3, #10
 800ce64:	e011      	b.n	800ce8a <_printf_i+0xfa>
 800ce66:	6821      	ldr	r1, [r4, #0]
 800ce68:	6833      	ldr	r3, [r6, #0]
 800ce6a:	0608      	lsls	r0, r1, #24
 800ce6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce70:	d402      	bmi.n	800ce78 <_printf_i+0xe8>
 800ce72:	0649      	lsls	r1, r1, #25
 800ce74:	bf48      	it	mi
 800ce76:	b2ad      	uxthmi	r5, r5
 800ce78:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce7a:	4853      	ldr	r0, [pc, #332]	@ (800cfc8 <_printf_i+0x238>)
 800ce7c:	6033      	str	r3, [r6, #0]
 800ce7e:	bf14      	ite	ne
 800ce80:	230a      	movne	r3, #10
 800ce82:	2308      	moveq	r3, #8
 800ce84:	2100      	movs	r1, #0
 800ce86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce8a:	6866      	ldr	r6, [r4, #4]
 800ce8c:	60a6      	str	r6, [r4, #8]
 800ce8e:	2e00      	cmp	r6, #0
 800ce90:	bfa2      	ittt	ge
 800ce92:	6821      	ldrge	r1, [r4, #0]
 800ce94:	f021 0104 	bicge.w	r1, r1, #4
 800ce98:	6021      	strge	r1, [r4, #0]
 800ce9a:	b90d      	cbnz	r5, 800cea0 <_printf_i+0x110>
 800ce9c:	2e00      	cmp	r6, #0
 800ce9e:	d04b      	beq.n	800cf38 <_printf_i+0x1a8>
 800cea0:	4616      	mov	r6, r2
 800cea2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cea6:	fb03 5711 	mls	r7, r3, r1, r5
 800ceaa:	5dc7      	ldrb	r7, [r0, r7]
 800ceac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ceb0:	462f      	mov	r7, r5
 800ceb2:	42bb      	cmp	r3, r7
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	d9f4      	bls.n	800cea2 <_printf_i+0x112>
 800ceb8:	2b08      	cmp	r3, #8
 800ceba:	d10b      	bne.n	800ced4 <_printf_i+0x144>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	07df      	lsls	r7, r3, #31
 800cec0:	d508      	bpl.n	800ced4 <_printf_i+0x144>
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	4299      	cmp	r1, r3
 800cec8:	bfde      	ittt	le
 800ceca:	2330      	movle	r3, #48	@ 0x30
 800cecc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ced0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ced4:	1b92      	subs	r2, r2, r6
 800ced6:	6122      	str	r2, [r4, #16]
 800ced8:	f8cd a000 	str.w	sl, [sp]
 800cedc:	464b      	mov	r3, r9
 800cede:	aa03      	add	r2, sp, #12
 800cee0:	4621      	mov	r1, r4
 800cee2:	4640      	mov	r0, r8
 800cee4:	f7ff fee6 	bl	800ccb4 <_printf_common>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d14a      	bne.n	800cf82 <_printf_i+0x1f2>
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295
 800cef0:	b004      	add	sp, #16
 800cef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	f043 0320 	orr.w	r3, r3, #32
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	4833      	ldr	r0, [pc, #204]	@ (800cfcc <_printf_i+0x23c>)
 800cf00:	2778      	movs	r7, #120	@ 0x78
 800cf02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	6831      	ldr	r1, [r6, #0]
 800cf0a:	061f      	lsls	r7, r3, #24
 800cf0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf10:	d402      	bmi.n	800cf18 <_printf_i+0x188>
 800cf12:	065f      	lsls	r7, r3, #25
 800cf14:	bf48      	it	mi
 800cf16:	b2ad      	uxthmi	r5, r5
 800cf18:	6031      	str	r1, [r6, #0]
 800cf1a:	07d9      	lsls	r1, r3, #31
 800cf1c:	bf44      	itt	mi
 800cf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf22:	6023      	strmi	r3, [r4, #0]
 800cf24:	b11d      	cbz	r5, 800cf2e <_printf_i+0x19e>
 800cf26:	2310      	movs	r3, #16
 800cf28:	e7ac      	b.n	800ce84 <_printf_i+0xf4>
 800cf2a:	4827      	ldr	r0, [pc, #156]	@ (800cfc8 <_printf_i+0x238>)
 800cf2c:	e7e9      	b.n	800cf02 <_printf_i+0x172>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	f023 0320 	bic.w	r3, r3, #32
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	e7f6      	b.n	800cf26 <_printf_i+0x196>
 800cf38:	4616      	mov	r6, r2
 800cf3a:	e7bd      	b.n	800ceb8 <_printf_i+0x128>
 800cf3c:	6833      	ldr	r3, [r6, #0]
 800cf3e:	6825      	ldr	r5, [r4, #0]
 800cf40:	6961      	ldr	r1, [r4, #20]
 800cf42:	1d18      	adds	r0, r3, #4
 800cf44:	6030      	str	r0, [r6, #0]
 800cf46:	062e      	lsls	r6, r5, #24
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	d501      	bpl.n	800cf50 <_printf_i+0x1c0>
 800cf4c:	6019      	str	r1, [r3, #0]
 800cf4e:	e002      	b.n	800cf56 <_printf_i+0x1c6>
 800cf50:	0668      	lsls	r0, r5, #25
 800cf52:	d5fb      	bpl.n	800cf4c <_printf_i+0x1bc>
 800cf54:	8019      	strh	r1, [r3, #0]
 800cf56:	2300      	movs	r3, #0
 800cf58:	6123      	str	r3, [r4, #16]
 800cf5a:	4616      	mov	r6, r2
 800cf5c:	e7bc      	b.n	800ced8 <_printf_i+0x148>
 800cf5e:	6833      	ldr	r3, [r6, #0]
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	6032      	str	r2, [r6, #0]
 800cf64:	681e      	ldr	r6, [r3, #0]
 800cf66:	6862      	ldr	r2, [r4, #4]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7f3 f958 	bl	8000220 <memchr>
 800cf70:	b108      	cbz	r0, 800cf76 <_printf_i+0x1e6>
 800cf72:	1b80      	subs	r0, r0, r6
 800cf74:	6060      	str	r0, [r4, #4]
 800cf76:	6863      	ldr	r3, [r4, #4]
 800cf78:	6123      	str	r3, [r4, #16]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf80:	e7aa      	b.n	800ced8 <_printf_i+0x148>
 800cf82:	6923      	ldr	r3, [r4, #16]
 800cf84:	4632      	mov	r2, r6
 800cf86:	4649      	mov	r1, r9
 800cf88:	4640      	mov	r0, r8
 800cf8a:	47d0      	blx	sl
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d0ad      	beq.n	800ceec <_printf_i+0x15c>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	079b      	lsls	r3, r3, #30
 800cf94:	d413      	bmi.n	800cfbe <_printf_i+0x22e>
 800cf96:	68e0      	ldr	r0, [r4, #12]
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	4298      	cmp	r0, r3
 800cf9c:	bfb8      	it	lt
 800cf9e:	4618      	movlt	r0, r3
 800cfa0:	e7a6      	b.n	800cef0 <_printf_i+0x160>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	47d0      	blx	sl
 800cfac:	3001      	adds	r0, #1
 800cfae:	d09d      	beq.n	800ceec <_printf_i+0x15c>
 800cfb0:	3501      	adds	r5, #1
 800cfb2:	68e3      	ldr	r3, [r4, #12]
 800cfb4:	9903      	ldr	r1, [sp, #12]
 800cfb6:	1a5b      	subs	r3, r3, r1
 800cfb8:	42ab      	cmp	r3, r5
 800cfba:	dcf2      	bgt.n	800cfa2 <_printf_i+0x212>
 800cfbc:	e7eb      	b.n	800cf96 <_printf_i+0x206>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	f104 0619 	add.w	r6, r4, #25
 800cfc4:	e7f5      	b.n	800cfb2 <_printf_i+0x222>
 800cfc6:	bf00      	nop
 800cfc8:	0800d629 	.word	0x0800d629
 800cfcc:	0800d63a 	.word	0x0800d63a

0800cfd0 <memmove>:
 800cfd0:	4288      	cmp	r0, r1
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	eb01 0402 	add.w	r4, r1, r2
 800cfd8:	d902      	bls.n	800cfe0 <memmove+0x10>
 800cfda:	4284      	cmp	r4, r0
 800cfdc:	4623      	mov	r3, r4
 800cfde:	d807      	bhi.n	800cff0 <memmove+0x20>
 800cfe0:	1e43      	subs	r3, r0, #1
 800cfe2:	42a1      	cmp	r1, r4
 800cfe4:	d008      	beq.n	800cff8 <memmove+0x28>
 800cfe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfee:	e7f8      	b.n	800cfe2 <memmove+0x12>
 800cff0:	4402      	add	r2, r0
 800cff2:	4601      	mov	r1, r0
 800cff4:	428a      	cmp	r2, r1
 800cff6:	d100      	bne.n	800cffa <memmove+0x2a>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d002:	e7f7      	b.n	800cff4 <memmove+0x24>

0800d004 <_sbrk_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d06      	ldr	r5, [pc, #24]	@ (800d020 <_sbrk_r+0x1c>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	602b      	str	r3, [r5, #0]
 800d010:	f7f8 ff24 	bl	8005e5c <_sbrk>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	d102      	bne.n	800d01e <_sbrk_r+0x1a>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	b103      	cbz	r3, 800d01e <_sbrk_r+0x1a>
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	2001ce6c 	.word	0x2001ce6c

0800d024 <memcpy>:
 800d024:	440a      	add	r2, r1
 800d026:	4291      	cmp	r1, r2
 800d028:	f100 33ff 	add.w	r3, r0, #4294967295
 800d02c:	d100      	bne.n	800d030 <memcpy+0xc>
 800d02e:	4770      	bx	lr
 800d030:	b510      	push	{r4, lr}
 800d032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d03a:	4291      	cmp	r1, r2
 800d03c:	d1f9      	bne.n	800d032 <memcpy+0xe>
 800d03e:	bd10      	pop	{r4, pc}

0800d040 <_realloc_r>:
 800d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d044:	4680      	mov	r8, r0
 800d046:	4615      	mov	r5, r2
 800d048:	460c      	mov	r4, r1
 800d04a:	b921      	cbnz	r1, 800d056 <_realloc_r+0x16>
 800d04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d050:	4611      	mov	r1, r2
 800d052:	f7ff bc4b 	b.w	800c8ec <_malloc_r>
 800d056:	b92a      	cbnz	r2, 800d064 <_realloc_r+0x24>
 800d058:	f7ff fbdc 	bl	800c814 <_free_r>
 800d05c:	2400      	movs	r4, #0
 800d05e:	4620      	mov	r0, r4
 800d060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d064:	f000 f81a 	bl	800d09c <_malloc_usable_size_r>
 800d068:	4285      	cmp	r5, r0
 800d06a:	4606      	mov	r6, r0
 800d06c:	d802      	bhi.n	800d074 <_realloc_r+0x34>
 800d06e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d072:	d8f4      	bhi.n	800d05e <_realloc_r+0x1e>
 800d074:	4629      	mov	r1, r5
 800d076:	4640      	mov	r0, r8
 800d078:	f7ff fc38 	bl	800c8ec <_malloc_r>
 800d07c:	4607      	mov	r7, r0
 800d07e:	2800      	cmp	r0, #0
 800d080:	d0ec      	beq.n	800d05c <_realloc_r+0x1c>
 800d082:	42b5      	cmp	r5, r6
 800d084:	462a      	mov	r2, r5
 800d086:	4621      	mov	r1, r4
 800d088:	bf28      	it	cs
 800d08a:	4632      	movcs	r2, r6
 800d08c:	f7ff ffca 	bl	800d024 <memcpy>
 800d090:	4621      	mov	r1, r4
 800d092:	4640      	mov	r0, r8
 800d094:	f7ff fbbe 	bl	800c814 <_free_r>
 800d098:	463c      	mov	r4, r7
 800d09a:	e7e0      	b.n	800d05e <_realloc_r+0x1e>

0800d09c <_malloc_usable_size_r>:
 800d09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0a0:	1f18      	subs	r0, r3, #4
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bfbc      	itt	lt
 800d0a6:	580b      	ldrlt	r3, [r1, r0]
 800d0a8:	18c0      	addlt	r0, r0, r3
 800d0aa:	4770      	bx	lr

0800d0ac <_init>:
 800d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ae:	bf00      	nop
 800d0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b2:	bc08      	pop	{r3}
 800d0b4:	469e      	mov	lr, r3
 800d0b6:	4770      	bx	lr

0800d0b8 <_fini>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	bf00      	nop
 800d0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0be:	bc08      	pop	{r3}
 800d0c0:	469e      	mov	lr, r3
 800d0c2:	4770      	bx	lr
