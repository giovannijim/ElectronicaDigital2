
LAB03_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800108  00800108  000004b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9c  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a9  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000645  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d7  00000000  00000000  00002bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	7c 01       	movw	r14, r24
  6a:	83 01       	movw	r16, r6
  6c:	8a 01       	movw	r16, r20
  6e:	94 01       	movw	r18, r8
  70:	9e 01       	movw	r18, r28
  72:	a8 01       	movw	r20, r16
  74:	b2 01       	movw	r22, r4

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 e1       	ldi	r30, 0x16	; 22
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a8 30       	cpi	r26, 0x08	; 8
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a8 e0       	ldi	r26, 0x08	; 8
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 31       	cpi	r26, 0x16	; 22
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 08 01 	call	0x210	; 0x210 <main>
  ac:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <MakeOneNumber>:

#include "UART/UART.h"
#include "SPI/SPI.h"

void MostrarLEDs(uint8_t a);
int MakeOneNumber(int digit1, int digit2, int digit3){return ((digit1*100) + (digit2*10) + digit3);}
  b4:	e4 e6       	ldi	r30, 0x64	; 100
  b6:	e8 9f       	mul	r30, r24
  b8:	90 01       	movw	r18, r0
  ba:	e9 9f       	mul	r30, r25
  bc:	30 0d       	add	r19, r0
  be:	11 24       	eor	r1, r1
  c0:	cb 01       	movw	r24, r22
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	68 0f       	add	r22, r24
  d4:	79 1f       	adc	r23, r25
  d6:	c9 01       	movw	r24, r18
  d8:	86 0f       	add	r24, r22
  da:	97 1f       	adc	r25, r23
  dc:	84 0f       	add	r24, r20
  de:	95 1f       	adc	r25, r21
  e0:	08 95       	ret

000000e2 <CharToInt>:
int CharToInt(char num){return num - '0';}
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	c0 97       	sbiw	r24, 0x30	; 48
  e6:	08 95       	ret

000000e8 <__vector_18>:
    }
}


ISR(USART_RX_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	// Aumentar dicho contador
	contador_valor_recibido ++;
 10a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <contador_valor_recibido>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <contador_valor_recibido>
	
	// Si es la primera recepciton almacenarlo en el Rv1, si es la segunda en Rv2.
	if(contador_valor_recibido==1){
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	29 f4       	brne	.+10     	; 0x122 <__vector_18+0x3a>
		Rv1 = UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Rv1>
 120:	1d c0       	rjmp	.+58     	; 0x15c <__vector_18+0x74>
	} else if (contador_valor_recibido==2)
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	29 f4       	brne	.+10     	; 0x130 <__vector_18+0x48>
	{
		Rv2 = UDR0;
 126:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Rv2>
 12e:	16 c0       	rjmp	.+44     	; 0x15c <__vector_18+0x74>
	} else {
		Rv3 = UDR0;
 130:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 134:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Rv3>
		contador_valor_recibido = 0;
 138:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <contador_valor_recibido>
		cadena("P1\n");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <cadena>
		writeUART(valorSPI0);
 144:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <valorSPI0>
 148:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <writeUART>
		
		cadena("P2\n");
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <cadena>
		writeUART(valorSPI1);
 154:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 158:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <writeUART>
	}
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <MostrarLEDs>:

void MostrarLEDs(uint8_t a){
	if(a & 1)
 17e:	80 ff       	sbrs	r24, 0
 180:	04 c0       	rjmp	.+8      	; 0x18a <MostrarLEDs+0xc>
		PORTC |= (1<<PORTC0);
 182:	98 b1       	in	r25, 0x08	; 8
 184:	91 60       	ori	r25, 0x01	; 1
 186:	98 b9       	out	0x08, r25	; 8
 188:	03 c0       	rjmp	.+6      	; 0x190 <MostrarLEDs+0x12>
	else
		PORTC &= ~(1<<PORTC0);
 18a:	98 b1       	in	r25, 0x08	; 8
 18c:	9e 7f       	andi	r25, 0xFE	; 254
 18e:	98 b9       	out	0x08, r25	; 8
		
	if(a & 2)
 190:	81 ff       	sbrs	r24, 1
 192:	04 c0       	rjmp	.+8      	; 0x19c <MostrarLEDs+0x1e>
		PORTC |= (1<<PORTC1);
 194:	98 b1       	in	r25, 0x08	; 8
 196:	92 60       	ori	r25, 0x02	; 2
 198:	98 b9       	out	0x08, r25	; 8
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <MostrarLEDs+0x24>
	else
		PORTC &= ~(1<<PORTC1);
 19c:	98 b1       	in	r25, 0x08	; 8
 19e:	9d 7f       	andi	r25, 0xFD	; 253
 1a0:	98 b9       	out	0x08, r25	; 8
	if(a & 4)
 1a2:	82 ff       	sbrs	r24, 2
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <MostrarLEDs+0x30>
		PORTC |= (1<<PORTC2);
 1a6:	98 b1       	in	r25, 0x08	; 8
 1a8:	94 60       	ori	r25, 0x04	; 4
 1aa:	98 b9       	out	0x08, r25	; 8
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <MostrarLEDs+0x36>
	else
		PORTC &= ~(1<<PORTC2);
 1ae:	98 b1       	in	r25, 0x08	; 8
 1b0:	9b 7f       	andi	r25, 0xFB	; 251
 1b2:	98 b9       	out	0x08, r25	; 8
	if(a & 8)
 1b4:	83 ff       	sbrs	r24, 3
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <MostrarLEDs+0x42>
		PORTC |= (1<<PORTC3);
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	98 60       	ori	r25, 0x08	; 8
 1bc:	98 b9       	out	0x08, r25	; 8
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <MostrarLEDs+0x48>
	else
		PORTC &= ~(1<<PORTC3);
 1c0:	98 b1       	in	r25, 0x08	; 8
 1c2:	97 7f       	andi	r25, 0xF7	; 247
 1c4:	98 b9       	out	0x08, r25	; 8
	if(a & 16)
 1c6:	84 ff       	sbrs	r24, 4
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <MostrarLEDs+0x54>
		PORTC |= (1<<PORTC4);
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 61       	ori	r25, 0x10	; 16
 1ce:	98 b9       	out	0x08, r25	; 8
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <MostrarLEDs+0x5a>
	else
		PORTC &= ~(1<<PORTC4);
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	9f 7e       	andi	r25, 0xEF	; 239
 1d6:	98 b9       	out	0x08, r25	; 8
	if(a & 32)
 1d8:	85 ff       	sbrs	r24, 5
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <MostrarLEDs+0x66>
		PORTC |= (1<<PORTC5);
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	90 62       	ori	r25, 0x20	; 32
 1e0:	98 b9       	out	0x08, r25	; 8
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <MostrarLEDs+0x6c>
	else
		PORTC &= ~(1<<PORTC5);
 1e4:	98 b1       	in	r25, 0x08	; 8
 1e6:	9f 7d       	andi	r25, 0xDF	; 223
 1e8:	98 b9       	out	0x08, r25	; 8
	if(a & 64)
 1ea:	86 ff       	sbrs	r24, 6
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <MostrarLEDs+0x78>
		PORTD |= (1<<PORTD3);
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	98 60       	ori	r25, 0x08	; 8
 1f2:	9b b9       	out	0x0b, r25	; 11
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <MostrarLEDs+0x7e>
	else
		PORTD &= ~(1<<PORTD3);
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	97 7f       	andi	r25, 0xF7	; 247
 1fa:	9b b9       	out	0x0b, r25	; 11
	if(a & 128)
 1fc:	88 23       	and	r24, r24
 1fe:	24 f4       	brge	.+8      	; 0x208 <MostrarLEDs+0x8a>
		PORTD |= (1<<PORTD2);
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	84 60       	ori	r24, 0x04	; 4
 204:	8b b9       	out	0x0b, r24	; 11
 206:	08 95       	ret
	else
		PORTD &= ~(1<<PORTD2);
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	8b b9       	out	0x0b, r24	; 11
 20e:	08 95       	ret

00000210 <main>:
uint8_t valorSPI0 = 0;
uint8_t valorSPI1 = 0;

int main(void)
{
    cli();						// Se apagan las interrupciones globales
 210:	f8 94       	cli
	contador_valor_recibido = 0;
 212:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <contador_valor_recibido>
	DDRC |= (1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3)|(1<<DDC4)|(1<<DDC5);
 216:	87 b1       	in	r24, 0x07	; 7
 218:	8f 63       	ori	r24, 0x3F	; 63
 21a:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b00011100;
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	8c 61       	ori	r24, 0x1C	; 28
 220:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 222:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
 224:	18 b8       	out	0x08, r1	; 8
	initUART9600();				// Se inicia la comunicacion serial con un baudaje de 9600
 226:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <initUART9600>
	
	spiInit(SPI_MASTER_OSC_DIV16, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	83 e5       	ldi	r24, 0x53	; 83
 232:	0e 94 64 01 	call	0x2c8	; 0x2c8 <spiInit>
    sei();
 236:	78 94       	sei

    while (1) 
    {	
		PORTB &= ~(1<<PORTB2);   // SLAVE SELECT
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	8b 7f       	andi	r24, 0xFB	; 251
 23c:	85 b9       	out	0x05, r24	; 5
		
		spiWrite('c');
 23e:	83 e6       	ldi	r24, 0x63	; 99
 240:	0e 94 c9 01 	call	0x392	; 0x392 <spiWrite>
		valorSPI0 = spiRead();
 244:	0e 94 cb 01 	call	0x396	; 0x396 <spiRead>
 248:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <valorSPI0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x42>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x4c>
 25c:	00 00       	nop
		_delay_ms(100);
		spiWrite('d');
 25e:	84 e6       	ldi	r24, 0x64	; 100
 260:	0e 94 c9 01 	call	0x392	; 0x392 <spiWrite>
		valorSPI1 = spiRead();
 264:	0e 94 cb 01 	call	0x396	; 0x396 <spiRead>
 268:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		
		
		digit1=CharToInt(Rv1);
 26c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Rv1>
 270:	0e 94 71 00 	call	0xe2	; 0xe2 <CharToInt>
 274:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <digit1+0x1>
 278:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <digit1>
		digit2=CharToInt(Rv2);
 27c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Rv2>
 280:	0e 94 71 00 	call	0xe2	; 0xe2 <CharToInt>
 284:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <digit2+0x1>
 288:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <digit2>
		digit3=CharToInt(Rv3);
 28c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Rv3>
 290:	0e 94 71 00 	call	0xe2	; 0xe2 <CharToInt>
 294:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit3+0x1>
 298:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <digit3>
		ValueReceived = MakeOneNumber(digit1,digit2,digit3);
 29c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <digit3>
 2a0:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <digit3+0x1>
 2a4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <digit2>
 2a8:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <digit2+0x1>
 2ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <digit1>
 2b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <digit1+0x1>
 2b4:	0e 94 5a 00 	call	0xb4	; 0xb4 <MakeOneNumber>
 2b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ValueReceived>
		MostrarLEDs(ValueReceived);
 2bc:	0e 94 bf 00 	call	0x17e	; 0x17e <MostrarLEDs>
		
		PORTB |= (1<<PORTB2);	// SLAVE SELECT
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	85 b9       	out	0x05, r24	; 5
 2c6:	b8 cf       	rjmp	.-144    	; 0x238 <main+0x28>

000002c8 <spiInit>:
unsigned spiDataReady(){	//Check whether the data is ready to read
	if(SPSR & (1<<SPIF))
	return 1;
	else
	return 0;
}
 2c8:	e8 2f       	mov	r30, r24
 2ca:	84 ff       	sbrs	r24, 4
 2cc:	52 c0       	rjmp	.+164    	; 0x372 <spiInit+0xaa>
 2ce:	84 b1       	in	r24, 0x04	; 4
 2d0:	8c 62       	ori	r24, 0x2C	; 44
 2d2:	84 b9       	out	0x04, r24	; 4
 2d4:	84 b1       	in	r24, 0x04	; 4
 2d6:	8f 7e       	andi	r24, 0xEF	; 239
 2d8:	84 b9       	out	0x04, r24	; 4
 2da:	8c b5       	in	r24, 0x2c	; 44
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	8c bd       	out	0x2c, r24	; 44
 2e0:	e7 70       	andi	r30, 0x07	; 7
 2e2:	8e 2f       	mov	r24, r30
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	87 30       	cpi	r24, 0x07	; 7
 2e8:	91 05       	cpc	r25, r1
 2ea:	08 f0       	brcs	.+2      	; 0x2ee <spiInit+0x26>
 2ec:	4b c0       	rjmp	.+150    	; 0x384 <spiInit+0xbc>
 2ee:	fc 01       	movw	r30, r24
 2f0:	ec 5c       	subi	r30, 0xCC	; 204
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	0c 94 03 02 	jmp	0x406	; 0x406 <__tablejump2__>
 2f8:	8c b5       	in	r24, 0x2c	; 44
 2fa:	8c 7f       	andi	r24, 0xFC	; 252
 2fc:	8c bd       	out	0x2c, r24	; 44
 2fe:	8d b5       	in	r24, 0x2d	; 45
 300:	81 60       	ori	r24, 0x01	; 1
 302:	8d bd       	out	0x2d, r24	; 45
 304:	3f c0       	rjmp	.+126    	; 0x384 <spiInit+0xbc>
 306:	8c b5       	in	r24, 0x2c	; 44
 308:	8c 7f       	andi	r24, 0xFC	; 252
 30a:	8c bd       	out	0x2c, r24	; 44
 30c:	8d b5       	in	r24, 0x2d	; 45
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	8d bd       	out	0x2d, r24	; 45
 312:	38 c0       	rjmp	.+112    	; 0x384 <spiInit+0xbc>
 314:	8c b5       	in	r24, 0x2c	; 44
 316:	81 60       	ori	r24, 0x01	; 1
 318:	8c bd       	out	0x2c, r24	; 44
 31a:	8c b5       	in	r24, 0x2c	; 44
 31c:	8d 7f       	andi	r24, 0xFD	; 253
 31e:	8c bd       	out	0x2c, r24	; 44
 320:	8d b5       	in	r24, 0x2d	; 45
 322:	81 60       	ori	r24, 0x01	; 1
 324:	8d bd       	out	0x2d, r24	; 45
 326:	2e c0       	rjmp	.+92     	; 0x384 <spiInit+0xbc>
 328:	8c b5       	in	r24, 0x2c	; 44
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	8c bd       	out	0x2c, r24	; 44
 32e:	8c b5       	in	r24, 0x2c	; 44
 330:	8d 7f       	andi	r24, 0xFD	; 253
 332:	8c bd       	out	0x2c, r24	; 44
 334:	8d b5       	in	r24, 0x2d	; 45
 336:	8e 7f       	andi	r24, 0xFE	; 254
 338:	8d bd       	out	0x2d, r24	; 45
 33a:	24 c0       	rjmp	.+72     	; 0x384 <spiInit+0xbc>
 33c:	8c b5       	in	r24, 0x2c	; 44
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	8c bd       	out	0x2c, r24	; 44
 342:	8c b5       	in	r24, 0x2c	; 44
 344:	82 60       	ori	r24, 0x02	; 2
 346:	8c bd       	out	0x2c, r24	; 44
 348:	8d b5       	in	r24, 0x2d	; 45
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	8d bd       	out	0x2d, r24	; 45
 34e:	1a c0       	rjmp	.+52     	; 0x384 <spiInit+0xbc>
 350:	8c b5       	in	r24, 0x2c	; 44
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	8c bd       	out	0x2c, r24	; 44
 356:	8c b5       	in	r24, 0x2c	; 44
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	8c bd       	out	0x2c, r24	; 44
 35c:	8d b5       	in	r24, 0x2d	; 45
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	8d bd       	out	0x2d, r24	; 45
 362:	10 c0       	rjmp	.+32     	; 0x384 <spiInit+0xbc>
 364:	8c b5       	in	r24, 0x2c	; 44
 366:	83 60       	ori	r24, 0x03	; 3
 368:	8c bd       	out	0x2c, r24	; 44
 36a:	8d b5       	in	r24, 0x2d	; 45
 36c:	8e 7f       	andi	r24, 0xFE	; 254
 36e:	8d bd       	out	0x2d, r24	; 45
 370:	09 c0       	rjmp	.+18     	; 0x384 <spiInit+0xbc>
 372:	84 b1       	in	r24, 0x04	; 4
 374:	80 61       	ori	r24, 0x10	; 16
 376:	84 b9       	out	0x04, r24	; 4
 378:	84 b1       	in	r24, 0x04	; 4
 37a:	83 7d       	andi	r24, 0xD3	; 211
 37c:	84 b9       	out	0x04, r24	; 4
 37e:	8c b5       	in	r24, 0x2c	; 44
 380:	8f 7e       	andi	r24, 0xEF	; 239
 382:	8c bd       	out	0x2c, r24	; 44
 384:	8c b5       	in	r24, 0x2c	; 44
 386:	46 2b       	or	r20, r22
 388:	24 2b       	or	r18, r20
 38a:	28 2b       	or	r18, r24
 38c:	20 64       	ori	r18, 0x40	; 64
 38e:	2c bd       	out	0x2c, r18	; 44
 390:	08 95       	ret

00000392 <spiWrite>:
 392:	8e bd       	out	0x2e, r24	; 46
 394:	08 95       	ret

00000396 <spiRead>:

char spiRead(){
	while (!(SPSR & (1<<SPIF))); // Wait for Data Receive Complete
 396:	0d b4       	in	r0, 0x2d	; 45
 398:	07 fe       	sbrs	r0, 7
 39a:	fd cf       	rjmp	.-6      	; 0x396 <spiRead>
	return(SPDR); // Read the received data from the buffer
 39c:	8e b5       	in	r24, 0x2e	; 46
 39e:	08 95       	ret

000003a0 <initUART9600>:
#include <stdint.h>

void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 3a0:	8a b1       	in	r24, 0x0a	; 10
 3a2:	8e 7f       	andi	r24, 0xFE	; 254
 3a4:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 3a6:	8a b1       	in	r24, 0x0a	; 10
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 3ac:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 3b0:	e1 ec       	ldi	r30, 0xC1	; 193
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 3b6:	80 81       	ld	r24, Z
 3b8:	88 69       	ori	r24, 0x98	; 152
 3ba:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 3bc:	e2 ec       	ldi	r30, 0xC2	; 194
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 3c2:	80 81       	ld	r24, Z
 3c4:	86 60       	ori	r24, 0x06	; 6
 3c6:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 3c8:	87 e6       	ldi	r24, 0x67	; 103
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3d4:	08 95       	ret

000003d6 <writeUART>:
	
}

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  // hasta que la bandera este en 1
 3d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3da:	95 ff       	sbrs	r25, 5
 3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <writeUART>
	UDR0 = Caracter;				// Enviar el caracter al arduino
 3de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3e2:	08 95       	ret

000003e4 <cadena>:
	
}

void cadena (char* texto){
 3e4:	ac 01       	movw	r20, r24
	uint8_t i;
	// Se realiza un ciclo for para recorrer la cadena
	for(i=0; texto[i]!='\0'; i++){
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <cadena+0x14>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 3ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3ee:	95 ff       	sbrs	r25, 5
 3f0:	fc cf       	rjmp	.-8      	; 0x3ea <cadena+0x6>
		UDR0 = texto[i];				// Enviando caracter por caracter
 3f2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void cadena (char* texto){
	uint8_t i;
	// Se realiza un ciclo for para recorrer la cadena
	for(i=0; texto[i]!='\0'; i++){
 3f6:	2f 5f       	subi	r18, 0xFF	; 255
 3f8:	fa 01       	movw	r30, r20
 3fa:	e2 0f       	add	r30, r18
 3fc:	f1 1d       	adc	r31, r1
 3fe:	30 81       	ld	r19, Z
 400:	31 11       	cpse	r19, r1
 402:	f3 cf       	rjmp	.-26     	; 0x3ea <cadena+0x6>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = texto[i];				// Enviando caracter por caracter
	}
	
}
 404:	08 95       	ret

00000406 <__tablejump2__>:
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	05 90       	lpm	r0, Z+
 40c:	f4 91       	lpm	r31, Z
 40e:	e0 2d       	mov	r30, r0
 410:	09 94       	ijmp

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
