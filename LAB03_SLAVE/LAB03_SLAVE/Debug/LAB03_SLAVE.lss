
LAB03_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b35  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ba  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000316  00000000  00000000  0000244d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_21>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	02 01       	movw	r0, r4
  6a:	09 01       	movw	r0, r18
  6c:	10 01       	movw	r2, r0
  6e:	1a 01       	movw	r2, r20
  70:	24 01       	movw	r4, r8
  72:	2e 01       	movw	r4, r28
  74:	38 01       	movw	r6, r16

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  96:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <initADC>:

#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  a4:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  ac:	80 81       	ld	r24, Z
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <main>:

uint8_t valorADC0, valorADC1;

int main(void)
{
	spiInit(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <spiInit>
	SPCR |= (1<<SPIE);
  dc:	8c b5       	in	r24, 0x2c	; 44
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c bd       	out	0x2c, r24	; 44
	sei();
  e2:	78 94       	sei
    while (1) 
    {
		initADC(0);							// Inicializar ADC [0]
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 4f 00 	call	0x9e	; 0x9e <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
  f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f8:	86 fd       	sbrc	r24, 6
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <main+0x24>
		valorADC0 = ADCH;
  fc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x3a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x44>
 114:	00 00       	nop
		_delay_ms(100);
		initADC(1);							// Inicializar ADC [1]
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 4f 00 	call	0x9e	; 0x9e <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 126:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 12a:	86 fd       	sbrc	r24, 6
 12c:	fc cf       	rjmp	.-8      	; 0x126 <main+0x56>
		valorADC1 = ADCH;
 12e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valorADC1>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x6c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x76>
 146:	00 00       	nop
 148:	cd cf       	rjmp	.-102    	; 0xe4 <main+0x14>

0000014a <__vector_21>:
}


// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 83       	st	Z, r24
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_17>:

ISR(SPI_STC_vect){
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	uint8_t spiValor = SPDR;
 196:	8e b5       	in	r24, 0x2e	; 46
	if(spiValor == 'c'){
 198:	83 36       	cpi	r24, 0x63	; 99
 19a:	29 f4       	brne	.+10     	; 0x1a6 <__vector_17+0x32>
		spiWrite(valorADC0);
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	0e 94 4f 01 	call	0x29e	; 0x29e <spiWrite>
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <__vector_17+0x3e>
	}
	else if (spiValor == 'd'){
 1a6:	84 36       	cpi	r24, 0x64	; 100
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <__vector_17+0x3e>
		spiWrite(valorADC1);
 1aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valorADC1>
 1ae:	0e 94 4f 01 	call	0x29e	; 0x29e <spiWrite>
	}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <spiInit>:
#include "SPI.h"

#include <avr/io.h>
#include <stdint.h>

void spiInit(Spi_Type sType, Spi_Data_Order sDataOrder, Spi_Clock_Polarity sClockPolarity, Spi_Clock_Phase sClockPhase){
 1d4:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> MOSI
	//PB4 -> MISO
	//PB5 -> SCK
	
	if (sType & (1<<MSTR)) //If Master Mode
 1d6:	84 ff       	sbrs	r24, 4
 1d8:	52 c0       	rjmp	.+164    	; 0x27e <spiInit+0xaa>
	{
		DDRB |= (1<<DDB3)|(1<<DDB5)|(1<<DDB2); // MOSI, SCK, SS
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	8c 62       	ori	r24, 0x2C	; 44
 1de:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<DDB4);					// MISO
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	8f 7e       	andi	r24, 0xEF	; 239
 1e4:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1<<MSTR);					// MASTER
 1e6:	8c b5       	in	r24, 0x2c	; 44
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
 1ec:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 1ee:	8e 2f       	mov	r24, r30
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	87 30       	cpi	r24, 0x07	; 7
 1f4:	91 05       	cpc	r25, r1
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <spiInit+0x26>
 1f8:	4b c0       	rjmp	.+150    	; 0x290 <spiInit+0xbc>
 1fa:	fc 01       	movw	r30, r24
 1fc:	ec 5c       	subi	r30, 0xCC	; 204
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__tablejump2__>
			case 0: //Div2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 204:	8c b5       	in	r24, 0x2c	; 44
 206:	8c 7f       	andi	r24, 0xFC	; 252
 208:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 20a:	8d b5       	in	r24, 0x2d	; 45
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	8d bd       	out	0x2d, r24	; 45
			break;
 210:	3f c0       	rjmp	.+126    	; 0x290 <spiInit+0xbc>
			case 1: //Div4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 212:	8c b5       	in	r24, 0x2c	; 44
 214:	8c 7f       	andi	r24, 0xFC	; 252
 216:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 218:	8d b5       	in	r24, 0x2d	; 45
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	8d bd       	out	0x2d, r24	; 45
			break;
 21e:	38 c0       	rjmp	.+112    	; 0x290 <spiInit+0xbc>
			case 2: //Div8
				SPCR |= (1<<SPR0);
 220:	8c b5       	in	r24, 0x2c	; 44
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 226:	8c b5       	in	r24, 0x2c	; 44
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 22c:	8d b5       	in	r24, 0x2d	; 45
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	8d bd       	out	0x2d, r24	; 45
			break;
 232:	2e c0       	rjmp	.+92     	; 0x290 <spiInit+0xbc>
			case 3: //Div16
				SPCR |= (1<<SPR0);
 234:	8c b5       	in	r24, 0x2c	; 44
 236:	81 60       	ori	r24, 0x01	; 1
 238:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 23a:	8c b5       	in	r24, 0x2c	; 44
 23c:	8d 7f       	andi	r24, 0xFD	; 253
 23e:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 240:	8d b5       	in	r24, 0x2d	; 45
 242:	8e 7f       	andi	r24, 0xFE	; 254
 244:	8d bd       	out	0x2d, r24	; 45
			break;
 246:	24 c0       	rjmp	.+72     	; 0x290 <spiInit+0xbc>
			case 4: //Div32
				SPCR &= ~(1<<SPR0);
 248:	8c b5       	in	r24, 0x2c	; 44
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 24e:	8c b5       	in	r24, 0x2c	; 44
 250:	82 60       	ori	r24, 0x02	; 2
 252:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 254:	8d b5       	in	r24, 0x2d	; 45
 256:	81 60       	ori	r24, 0x01	; 1
 258:	8d bd       	out	0x2d, r24	; 45
			break;
 25a:	1a c0       	rjmp	.+52     	; 0x290 <spiInit+0xbc>
			case 5: //Div64
				SPCR &= ~(1<<SPR0);
 25c:	8c b5       	in	r24, 0x2c	; 44
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 262:	8c b5       	in	r24, 0x2c	; 44
 264:	82 60       	ori	r24, 0x02	; 2
 266:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 268:	8d b5       	in	r24, 0x2d	; 45
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	8d bd       	out	0x2d, r24	; 45
			break;
 26e:	10 c0       	rjmp	.+32     	; 0x290 <spiInit+0xbc>
			case 6: //Div128
				SPCR |= (1<<SPR0)|(1<<SPR1);
 270:	8c b5       	in	r24, 0x2c	; 44
 272:	83 60       	ori	r24, 0x03	; 3
 274:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 276:	8d b5       	in	r24, 0x2d	; 45
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	8d bd       	out	0x2d, r24	; 45
			break;
 27c:	09 c0       	rjmp	.+18     	; 0x290 <spiInit+0xbc>
		}
	}
	else //If slave mode selected
	{
		DDRB |= (1<<DDB4);							//MISO
 27e:	84 b1       	in	r24, 0x04	; 4
 280:	80 61       	ori	r24, 0x10	; 16
 282:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)|(1<<DDB2));	//MOSI, CK, SS	
 284:	84 b1       	in	r24, 0x04	; 4
 286:	83 7d       	andi	r24, 0xD3	; 211
 288:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR);							// SLAVE
 28a:	8c b5       	in	r24, 0x2c	; 44
 28c:	8f 7e       	andi	r24, 0xEF	; 239
 28e:	8c bd       	out	0x2c, r24	; 44
	}
	/* Enable, Data order, CLock Polarity, Clock Phase */
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 290:	8c b5       	in	r24, 0x2c	; 44
 292:	46 2b       	or	r20, r22
 294:	24 2b       	or	r18, r20
 296:	28 2b       	or	r18, r24
 298:	20 64       	ori	r18, 0x40	; 64
 29a:	2c bd       	out	0x2c, r18	; 44
 29c:	08 95       	ret

0000029e <spiWrite>:
static void spiReceiveWait(){
	while (!(SPSR & (1<<SPIF))); // Wait for Data Receive Complete
}

void spiWrite(uint8_t dat){ //Write data to SPI bus
	SPDR = dat;
 29e:	8e bd       	out	0x2e, r24	; 46
 2a0:	08 95       	ret

000002a2 <__tablejump2__>:
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	05 90       	lpm	r0, Z+
 2a8:	f4 91       	lpm	r31, Z
 2aa:	e0 2d       	mov	r30, r0
 2ac:	09 94       	ijmp

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
