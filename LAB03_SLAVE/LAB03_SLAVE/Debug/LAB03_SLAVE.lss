
LAB03_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00000ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000588  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c3  00000000  00000000  0000234e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_17>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_21>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	de 00       	.word	0x00de	; ????
  6a:	e5 00       	.word	0x00e5	; ????
  6c:	ec 00       	.word	0x00ec	; ????
  6e:	f6 00       	.word	0x00f6	; ????
  70:	00 01       	movw	r0, r0
  72:	0a 01       	movw	r0, r20
  74:	14 01       	movw	r2, r8

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a1 30       	cpi	r26, 0x01	; 1
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  96:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <initADC>:

#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  a4:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  ac:	80 81       	ld	r24, Z
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <main>:

uint8_t valorADC;

int main(void)
{
	spiInit(SPI_SLAVE_SS, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOCK_FIRST_EDGE);
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	0e 94 c6 00 	call	0x18c	; 0x18c <spiInit>
	SPCR |= (1<<SPIE);
  dc:	8c b5       	in	r24, 0x2c	; 44
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c bd       	out	0x2c, r24	; 44
	sei();
  e2:	78 94       	sei
    while (1) 
    {
		initADC(0);							// Inicializar ADC [0]
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 4f 00 	call	0x9e	; 0x9e <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	81 ee       	ldi	r24, 0xE1	; 225
  f8:	94 e0       	ldi	r25, 0x04	; 4
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x2a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x34>
 104:	00 00       	nop
 106:	ee cf       	rjmp	.-36     	; 0xe4 <main+0x14>

00000108 <__vector_21>:
}


// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	valorADC = ADCH;
 118:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 61       	ori	r24, 0x10	; 16
 128:	80 83       	st	Z, r24
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_17>:

ISR(SPI_STC_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	uint8_t spiValor = SPDR;
 15c:	8e b5       	in	r24, 0x2e	; 46
	if(spiValor == 'c'){
 15e:	83 36       	cpi	r24, 0x63	; 99
 160:	21 f4       	brne	.+8      	; 0x16a <__vector_17+0x30>
		spiWrite(valorADC);
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	0e 94 2b 01 	call	0x256	; 0x256 <spiWrite>
	}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <spiInit>:
#include "SPI.h"

#include <avr/io.h>
#include <stdint.h>

void spiInit(Spi_Type sType, Spi_Data_Order sDataOrder, Spi_Clock_Polarity sClockPolarity, Spi_Clock_Phase sClockPhase){
 18c:	e8 2f       	mov	r30, r24
	//PB2 -> SS
	//PB3 -> MOSI
	//PB4 -> MISO
	//PB5 -> SCK
	
	if (sType & (1<<MSTR)) //If Master Mode
 18e:	84 ff       	sbrs	r24, 4
 190:	52 c0       	rjmp	.+164    	; 0x236 <spiInit+0xaa>
	{
		DDRB |= (1<<DDB3)|(1<<DDB5)|(1<<DDB2); // MOSI, SCK, SS
 192:	84 b1       	in	r24, 0x04	; 4
 194:	8c 62       	ori	r24, 0x2C	; 44
 196:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<DDB4);					// MISO
 198:	84 b1       	in	r24, 0x04	; 4
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1<<MSTR);					// MASTER
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
 1a4:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
 1a6:	8e 2f       	mov	r24, r30
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	87 30       	cpi	r24, 0x07	; 7
 1ac:	91 05       	cpc	r25, r1
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <spiInit+0x26>
 1b0:	4b c0       	rjmp	.+150    	; 0x248 <spiInit+0xbc>
 1b2:	fc 01       	movw	r30, r24
 1b4:	ec 5c       	subi	r30, 0xCC	; 204
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__tablejump2__>
			case 0: //Div2
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 1bc:	8c b5       	in	r24, 0x2c	; 44
 1be:	8c 7f       	andi	r24, 0xFC	; 252
 1c0:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 1c2:	8d b5       	in	r24, 0x2d	; 45
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	8d bd       	out	0x2d, r24	; 45
			break;
 1c8:	3f c0       	rjmp	.+126    	; 0x248 <spiInit+0xbc>
			case 1: //Div4
				SPCR &= ~((1<<SPR1)|(1<<SPR0));
 1ca:	8c b5       	in	r24, 0x2c	; 44
 1cc:	8c 7f       	andi	r24, 0xFC	; 252
 1ce:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1d0:	8d b5       	in	r24, 0x2d	; 45
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	8d bd       	out	0x2d, r24	; 45
			break;
 1d6:	38 c0       	rjmp	.+112    	; 0x248 <spiInit+0xbc>
			case 2: //Div8
				SPCR |= (1<<SPR0);
 1d8:	8c b5       	in	r24, 0x2c	; 44
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 1de:	8c b5       	in	r24, 0x2c	; 44
 1e0:	8d 7f       	andi	r24, 0xFD	; 253
 1e2:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 1e4:	8d b5       	in	r24, 0x2d	; 45
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	8d bd       	out	0x2d, r24	; 45
			break;
 1ea:	2e c0       	rjmp	.+92     	; 0x248 <spiInit+0xbc>
			case 3: //Div16
				SPCR |= (1<<SPR0);
 1ec:	8c b5       	in	r24, 0x2c	; 44
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8c bd       	out	0x2c, r24	; 44
				SPCR &= ~(1<<SPR1);
 1f2:	8c b5       	in	r24, 0x2c	; 44
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 1f8:	8d b5       	in	r24, 0x2d	; 45
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	8d bd       	out	0x2d, r24	; 45
			break;
 1fe:	24 c0       	rjmp	.+72     	; 0x248 <spiInit+0xbc>
			case 4: //Div32
				SPCR &= ~(1<<SPR0);
 200:	8c b5       	in	r24, 0x2c	; 44
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 206:	8c b5       	in	r24, 0x2c	; 44
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	8c bd       	out	0x2c, r24	; 44
				SPSR |= (1<<SPI2X);
 20c:	8d b5       	in	r24, 0x2d	; 45
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	8d bd       	out	0x2d, r24	; 45
			break;
 212:	1a c0       	rjmp	.+52     	; 0x248 <spiInit+0xbc>
			case 5: //Div64
				SPCR &= ~(1<<SPR0);
 214:	8c b5       	in	r24, 0x2c	; 44
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	8c bd       	out	0x2c, r24	; 44
				SPCR |= (1<<SPR1);
 21a:	8c b5       	in	r24, 0x2c	; 44
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 220:	8d b5       	in	r24, 0x2d	; 45
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	8d bd       	out	0x2d, r24	; 45
			break;
 226:	10 c0       	rjmp	.+32     	; 0x248 <spiInit+0xbc>
			case 6: //Div128
				SPCR |= (1<<SPR0)|(1<<SPR1);
 228:	8c b5       	in	r24, 0x2c	; 44
 22a:	83 60       	ori	r24, 0x03	; 3
 22c:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 22e:	8d b5       	in	r24, 0x2d	; 45
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	8d bd       	out	0x2d, r24	; 45
			break;
 234:	09 c0       	rjmp	.+18     	; 0x248 <spiInit+0xbc>
		}
	}
	else //If slave mode selected
	{
		DDRB |= (1<<DDB4);							//MISO
 236:	84 b1       	in	r24, 0x04	; 4
 238:	80 61       	ori	r24, 0x10	; 16
 23a:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)|(1<<DDB2));	//MOSI, CK, SS	
 23c:	84 b1       	in	r24, 0x04	; 4
 23e:	83 7d       	andi	r24, 0xD3	; 211
 240:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR);							// SLAVE
 242:	8c b5       	in	r24, 0x2c	; 44
 244:	8f 7e       	andi	r24, 0xEF	; 239
 246:	8c bd       	out	0x2c, r24	; 44
	}
	/* Enable, Data order, CLock Polarity, Clock Phase */
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 248:	8c b5       	in	r24, 0x2c	; 44
 24a:	46 2b       	or	r20, r22
 24c:	24 2b       	or	r18, r20
 24e:	28 2b       	or	r18, r24
 250:	20 64       	ori	r18, 0x40	; 64
 252:	2c bd       	out	0x2c, r18	; 44
 254:	08 95       	ret

00000256 <spiWrite>:
static void spiReceiveWait(){
	while (!(SPSR & (1<<SPIF))); // Wait for Data Receive Complete
}

void spiWrite(uint8_t dat){ //Write data to SPI bus
	SPDR = dat;
 256:	8e bd       	out	0x2e, r24	; 46
 258:	08 95       	ret

0000025a <__tablejump2__>:
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	05 90       	lpm	r0, Z+
 260:	f4 91       	lpm	r31, Z
 262:	e0 2d       	mov	r30, r0
 264:	09 94       	ijmp

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
