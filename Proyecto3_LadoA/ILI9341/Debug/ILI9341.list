
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025810  08002df4  08002df4  00003df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028604  08028604  0002c58c  2**0
                  CONTENTS
  4 .ARM          00000008  08028604  08028604  00029604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802860c  0802860c  0002c58c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802860c  0802860c  0002960c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08028610  08028610  00029610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000258c  20000000  08028614  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000258c  0802aba0  0002c58c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002730  0802aba0  0002c730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002c58c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007133  00000000  00000000  0002c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178e  00000000  00000000  000336ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020a0f  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000969e  00000000  00000000  00055faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c9599  00000000  00000000  0005f64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00128be6  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000547  00000000  00000000  00128c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c4c  00000000  00000000  00129170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0012adbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000258c 	.word	0x2000258c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ddc 	.word	0x08002ddc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20002590 	.word	0x20002590
 8000204:	08002ddc 	.word	0x08002ddc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f001 fc2f 	bl	800217c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f001 fc2a 	bl	800217c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f001 fc25 	bl	800217c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f001 f958 	bl	8001be8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f001 fc1d 	bl	800217c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000942:	2014      	movs	r0, #20
 8000944:	f001 f950 	bl	8001be8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f001 fc15 	bl	800217c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f001 f948 	bl	8001be8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f001 fc0d 	bl	800217c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x20);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f001 f937 	bl	8001be8 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x71);
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x19);
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x07);
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x10);
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x01);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x44);
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x67);
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x06);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x24);
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x37);
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x40);
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x03);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x80);
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x3F);
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0xE0);
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f001 f886 	bl	8001be8 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f001 f880 	bl	8001be8 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f001 fb42 	bl	800217c <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f001 fb30 	bl	800217c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f001 fb2b 	bl	800217c <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f001 fb20 	bl	800217c <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f001 fb19 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f001 fb0f 	bl	800217c <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f001 fb09 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f001 fafe 	bl	800217c <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f001 faf7 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f001 faed 	bl	800217c <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f001 fae7 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f001 fadd 	bl	800217c <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f001 fad7 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f001 facd 	bl	800217c <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f001 fac7 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f001 fabc 	bl	800217c <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f001 fab5 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f001 faab 	bl	800217c <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f001 faa4 	bl	800217c <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f001 fa9f 	bl	800217c <HAL_GPIO_WritePin>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f001 fa8a 	bl	800217c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f001 fa85 	bl	800217c <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f001 fa7a 	bl	800217c <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f001 fa73 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f001 fa69 	bl	800217c <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f001 fa63 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f001 fa58 	bl	800217c <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f001 fa51 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f001 fa47 	bl	800217c <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f001 fa41 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f001 fa37 	bl	800217c <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f001 fa31 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f001 fa27 	bl	800217c <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f001 fa21 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f001 fa16 	bl	800217c <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f001 fa0f 	bl	800217c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f001 fa05 	bl	800217c <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f001 f9fe 	bl	800217c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f001 f9f9 	bl	800217c <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y1);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f001 f9a2 	bl	800217c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f001 f99d 	bl	800217c <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f001 f973 	bl	800217c <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4824      	ldr	r0, [pc, #144]	@ (8000f54 <LCD_Bitmap+0xac>)
 8000ec2:	f001 f95b 	bl	800217c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4823      	ldr	r0, [pc, #140]	@ (8000f58 <LCD_Bitmap+0xb0>)
 8000ecc:	f001 f956 	bl	800217c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ff58 	bl	8000da0 <SetWindows>
	unsigned int k = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	e01e      	b.n	8000f38 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e014      	b.n	8000f2a <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fea3 	bl	8000c54 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe9b 	bl	8000c54 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	3302      	adds	r3, #2
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d8e6      	bhi.n	8000f00 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	3301      	adds	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8dc      	bhi.n	8000efa <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <LCD_Bitmap+0xb0>)
 8000f46:	f001 f919 	bl	800217c <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400

08000f5c <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000f6a:	202c      	movs	r0, #44	@ 0x2c
 8000f6c:	f7ff fdcc 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	484d      	ldr	r0, [pc, #308]	@ (80010ac <LCD_Sprite+0x150>)
 8000f76:	f001 f901 	bl	800217c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	484c      	ldr	r0, [pc, #304]	@ (80010b0 <LCD_Sprite+0x154>)
 8000f80:	f001 f8fc 	bl	800217c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f7ff fefe 	bl	8000da0 <SetWindows>
	int k = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000fb2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d03a      	beq.n	8001030 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fbe:	e032      	b.n	8001026 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	fb03 f202 	mul.w	r2, r3, r2
 8000fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fe4:	4413      	add	r3, r2
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fec:	e014      	b.n	8001018 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fe2c 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	3301      	adds	r3, #1
 8001000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe24 	bl	8000c54 <LCD_DATA>
				k = k - 2;
 800100c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800100e:	3b02      	subs	r3, #2
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
 8001018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbe6      	blt.n	8000fee <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001022:	3301      	adds	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbc8      	blt.n	8000fc0 <LCD_Sprite+0x64>
 800102e:	e034      	b.n	800109a <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	e02d      	b.n	8001092 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	fb03 f202 	mul.w	r2, r3, r2
 800103e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	4413      	add	r3, r2
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e014      	b.n	8001084 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 800105a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdf6 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	3301      	adds	r3, #1
 800106c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fdee 	bl	8000c54 <LCD_DATA>
				k = k + 2;
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107a:	3302      	adds	r3, #2
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbe6      	blt.n	800105a <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	3301      	adds	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	6a3a      	ldr	r2, [r7, #32]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbcd      	blt.n	8001036 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2101      	movs	r1, #1
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <LCD_Sprite+0x154>)
 80010a0:	f001 f86c 	bl	800217c <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	@ 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400

080010b4 <initParqueo.0>:
int main(void)
{

  /* USER CODE BEGIN 1 */

void initParqueo(EspacioParqueo* parqueo, uint8_t num, unsigned int x, unsigned int y){
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6178      	str	r0, [r7, #20]
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	460b      	mov	r3, r1
 80010c2:	74fb      	strb	r3, [r7, #19]
 80010c4:	f8c7 c004 	str.w	ip, [r7, #4]
	parqueo ->estado = 0; // 0 = libre, 1 = ocupado
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	parqueo ->isEntering=0;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
	parqueo ->animacionEntrada=5;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <initParqueo.0+0x50>)
 80010d8:	609a      	str	r2, [r3, #8]
	parqueo ->isOut=0;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
	parqueo ->animacionSalida=5;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <initParqueo.0+0x50>)
 80010e4:	611a      	str	r2, [r3, #16]
	parqueo ->num=num;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	7cfa      	ldrb	r2, [r7, #19]
 80010ea:	751a      	strb	r2, [r3, #20]
	parqueo ->x=x;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	619a      	str	r2, [r3, #24]
	parqueo ->y=y;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	61da      	str	r2, [r3, #28]
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40a00000 	.word	0x40a00000

08001108 <main>:
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
int main(void)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fcf6 	bl	8001b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 fa06 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 faa6 	bl	800166c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001120:	f000 fa6e 	bl	8001600 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8001124:	f7ff fbf4 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fe79 	bl	8000e20 <LCD_Clear>

	LCD_Bitmap(0, 0, 320, 240, fondo);
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <main+0xc4>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	23f0      	movs	r3, #240	@ 0xf0
 8001134:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001138:	2100      	movs	r1, #0
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff feb4 	bl	8000ea8 <LCD_Bitmap>

	initParqueo(&p1, 0x01, 26, 191);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	469c      	mov	ip, r3
 8001144:	23bf      	movs	r3, #191	@ 0xbf
 8001146:	221a      	movs	r2, #26
 8001148:	2101      	movs	r1, #1
 800114a:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <main+0xc8>)
 800114c:	f7ff ffb2 	bl	80010b4 <initParqueo.0>
	initParqueo(&p2, 0x02, 26, 150);
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	469c      	mov	ip, r3
 8001154:	2396      	movs	r3, #150	@ 0x96
 8001156:	221a      	movs	r2, #26
 8001158:	2102      	movs	r1, #2
 800115a:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <main+0xcc>)
 800115c:	f7ff ffaa 	bl	80010b4 <initParqueo.0>
	initParqueo(&p3, 0x04, 26, 108);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	469c      	mov	ip, r3
 8001164:	236c      	movs	r3, #108	@ 0x6c
 8001166:	221a      	movs	r2, #26
 8001168:	2104      	movs	r1, #4
 800116a:	481b      	ldr	r0, [pc, #108]	@ (80011d8 <main+0xd0>)
 800116c:	f7ff ffa2 	bl	80010b4 <initParqueo.0>
	initParqueo(&p4, 0x08, 26, 68);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	469c      	mov	ip, r3
 8001174:	2344      	movs	r3, #68	@ 0x44
 8001176:	221a      	movs	r2, #26
 8001178:	2108      	movs	r1, #8
 800117a:	4818      	ldr	r0, [pc, #96]	@ (80011dc <main+0xd4>)
 800117c:	f7ff ff9a 	bl	80010b4 <initParqueo.0>

	initParqueo(&p5, 0x10, 253, 68);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	469c      	mov	ip, r3
 8001184:	2344      	movs	r3, #68	@ 0x44
 8001186:	22fd      	movs	r2, #253	@ 0xfd
 8001188:	2110      	movs	r1, #16
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <main+0xd8>)
 800118c:	f7ff ff92 	bl	80010b4 <initParqueo.0>
	initParqueo(&p6, 0x20, 253, 108);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	469c      	mov	ip, r3
 8001194:	236c      	movs	r3, #108	@ 0x6c
 8001196:	22fd      	movs	r2, #253	@ 0xfd
 8001198:	2120      	movs	r1, #32
 800119a:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <main+0xdc>)
 800119c:	f7ff ff8a 	bl	80010b4 <initParqueo.0>
	initParqueo(&p7, 0x40, 253, 150);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	469c      	mov	ip, r3
 80011a4:	2396      	movs	r3, #150	@ 0x96
 80011a6:	22fd      	movs	r2, #253	@ 0xfd
 80011a8:	2140      	movs	r1, #64	@ 0x40
 80011aa:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <main+0xe0>)
 80011ac:	f7ff ff82 	bl	80010b4 <initParqueo.0>
	initParqueo(&p8, 0x80, 253, 191);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	469c      	mov	ip, r3
 80011b4:	23bf      	movs	r3, #191	@ 0xbf
 80011b6:	22fd      	movs	r2, #253	@ 0xfd
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	480c      	ldr	r0, [pc, #48]	@ (80011ec <main+0xe4>)
 80011bc:	f7ff ff7a 	bl	80010b4 <initParqueo.0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		controlParqueo();
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	469c      	mov	ip, r3
 80011c4:	f000 f914 	bl	80013f0 <controlParqueo.1>
 80011c8:	e7fa      	b.n	80011c0 <main+0xb8>
 80011ca:	bf00      	nop
 80011cc:	08002df4 	.word	0x08002df4
 80011d0:	20002604 	.word	0x20002604
 80011d4:	20002624 	.word	0x20002624
 80011d8:	20002644 	.word	0x20002644
 80011dc:	20002664 	.word	0x20002664
 80011e0:	20002684 	.word	0x20002684
 80011e4:	200026a4 	.word	0x200026a4
 80011e8:	200026c4 	.word	0x200026c4
 80011ec:	200026e4 	.word	0x200026e4

080011f0 <FanimationOut.3>:
void FanimationOut(EspacioParqueo* parqueo){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af06      	add	r7, sp, #24
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	f8c7 c000 	str.w	ip, [r7]
	int variableAnimationOut = parqueo ->  animacionSalida;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001206:	ee17 3a90 	vmov	r3, s15
 800120a:	60fb      	str	r3, [r7, #12]
	if (variableAnimationOut<5){
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b04      	cmp	r3, #4
 8001210:	dc38      	bgt.n	8001284 <FanimationOut.3+0x94>
		if (parqueo->num==0x10 || parqueo->num==0x20||parqueo->num==0x40 || parqueo->num==0x80){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7d1b      	ldrb	r3, [r3, #20]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d00b      	beq.n	8001232 <FanimationOut.3+0x42>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7d1b      	ldrb	r3, [r3, #20]
 800121e:	2b20      	cmp	r3, #32
 8001220:	d007      	beq.n	8001232 <FanimationOut.3+0x42>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7d1b      	ldrb	r3, [r3, #20]
 8001226:	2b40      	cmp	r3, #64	@ 0x40
 8001228:	d003      	beq.n	8001232 <FanimationOut.3+0x42>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7d1b      	ldrb	r3, [r3, #20]
 800122e:	2b80      	cmp	r3, #128	@ 0x80
 8001230:	d114      	bne.n	800125c <FanimationOut.3+0x6c>
			LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, variableAnimationOut, 1, 0);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4618      	mov	r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	4619      	mov	r1, r3
 800123e:	2300      	movs	r3, #0
 8001240:	9304      	str	r3, [sp, #16]
 8001242:	2301      	movs	r3, #1
 8001244:	9303      	str	r3, [sp, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2305      	movs	r3, #5
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <FanimationOut.3+0xd0>)
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2318      	movs	r3, #24
 8001254:	2228      	movs	r2, #40	@ 0x28
 8001256:	f7ff fe81 	bl	8000f5c <LCD_Sprite>
 800125a:	e013      	b.n	8001284 <FanimationOut.3+0x94>
			LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, variableAnimationOut, 0, 0);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4618      	mov	r0, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4619      	mov	r1, r3
 8001268:	2300      	movs	r3, #0
 800126a:	9304      	str	r3, [sp, #16]
 800126c:	2300      	movs	r3, #0
 800126e:	9303      	str	r3, [sp, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2305      	movs	r3, #5
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <FanimationOut.3+0xd0>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2318      	movs	r3, #24
 800127e:	2228      	movs	r2, #40	@ 0x28
 8001280:	f7ff fe6c 	bl	8000f5c <LCD_Sprite>
	parqueo -> animacionSalida+=0.8;//0.2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f921 	bl	80004d0 <__aeabi_f2d>
 800128e:	a30a      	add	r3, pc, #40	@ (adr r3, 80012b8 <FanimationOut.3+0xc8>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7fe ffbe 	bl	8000214 <__adddf3>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff f96e 	bl	8000580 <__aeabi_d2f>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	9999999a 	.word	0x9999999a
 80012bc:	3fe99999 	.word	0x3fe99999
 80012c0:	20000000 	.word	0x20000000
 80012c4:	00000000 	.word	0x00000000

080012c8 <FanimationEnter.4>:
void FanimationEnter(EspacioParqueo* parqueo){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af06      	add	r7, sp, #24
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	f8c7 c000 	str.w	ip, [r7]
	int variableAnimationEnter = parqueo ->  animacionEntrada;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012de:	ee17 3a90 	vmov	r3, s15
 80012e2:	60fb      	str	r3, [r7, #12]
	if (variableAnimationEnter<5){
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	dc3c      	bgt.n	8001364 <FanimationEnter.4+0x9c>
		int frame=4-variableAnimationEnter;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1c3 0304 	rsb	r3, r3, #4
 80012f0:	60bb      	str	r3, [r7, #8]
		if (parqueo->num==0x10 || parqueo->num==0x20||parqueo->num==0x40 || parqueo->num==0x80){
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7d1b      	ldrb	r3, [r3, #20]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d00b      	beq.n	8001312 <FanimationEnter.4+0x4a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7d1b      	ldrb	r3, [r3, #20]
 80012fe:	2b20      	cmp	r3, #32
 8001300:	d007      	beq.n	8001312 <FanimationEnter.4+0x4a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7d1b      	ldrb	r3, [r3, #20]
 8001306:	2b40      	cmp	r3, #64	@ 0x40
 8001308:	d003      	beq.n	8001312 <FanimationEnter.4+0x4a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7d1b      	ldrb	r3, [r3, #20]
 800130e:	2b80      	cmp	r3, #128	@ 0x80
 8001310:	d114      	bne.n	800133c <FanimationEnter.4+0x74>
		LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, frame, 1, 0);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4618      	mov	r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4619      	mov	r1, r3
 800131e:	2300      	movs	r3, #0
 8001320:	9304      	str	r3, [sp, #16]
 8001322:	2301      	movs	r3, #1
 8001324:	9303      	str	r3, [sp, #12]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2305      	movs	r3, #5
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <FanimationEnter.4+0xd8>)
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2318      	movs	r3, #24
 8001334:	2228      	movs	r2, #40	@ 0x28
 8001336:	f7ff fe11 	bl	8000f5c <LCD_Sprite>
 800133a:	e013      	b.n	8001364 <FanimationEnter.4+0x9c>
			LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, frame, 0, 0);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4618      	mov	r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4619      	mov	r1, r3
 8001348:	2300      	movs	r3, #0
 800134a:	9304      	str	r3, [sp, #16]
 800134c:	2300      	movs	r3, #0
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2305      	movs	r3, #5
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <FanimationEnter.4+0xd8>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2318      	movs	r3, #24
 800135e:	2228      	movs	r2, #40	@ 0x28
 8001360:	f7ff fdfc 	bl	8000f5c <LCD_Sprite>
	parqueo -> animacionEntrada+=0.8;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8b1 	bl	80004d0 <__aeabi_f2d>
 800136e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001398 <FanimationEnter.4+0xd0>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7fe ff4e 	bl	8000214 <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff f8fe 	bl	8000580 <__aeabi_d2f>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	609a      	str	r2, [r3, #8]
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	f3af 8000 	nop.w
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fe99999 	.word	0x3fe99999
 80013a0:	20000000 	.word	0x20000000

080013a4 <actualizarEstadoParqueos.2>:
void actualizarEstadoParqueos(EspacioParqueo* parqueo, uint8_t byteControl, int num) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	460b      	mov	r3, r1
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	72fb      	strb	r3, [r7, #11]
 80013b2:	f8c7 c000 	str.w	ip, [r7]
	if (byteControl & (1 << num)) {
 80013b6:	7afa      	ldrb	r2, [r7, #11]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	fa42 f303 	asr.w	r3, r2, r3
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <actualizarEstadoParqueos.2+0x32>
	            parqueo ->estado = 1;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
	            parqueo ->animacionEntrada=0;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
}
 80013d4:	e006      	b.n	80013e4 <actualizarEstadoParqueos.2+0x40>
	            parqueo -> estado = 0;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
	            parqueo ->animacionSalida=0;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <controlParqueo.1>:
void controlParqueo(void){
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4664      	mov	r4, ip
 80013f8:	f8c7 c004 	str.w	ip, [r7, #4]
	actualizarEstadoParqueos(&p1,byteControl, 0);
 80013fc:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <controlParqueo.1+0x114>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	46a4      	mov	ip, r4
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4840      	ldr	r0, [pc, #256]	@ (8001508 <controlParqueo.1+0x118>)
 8001408:	f7ff ffcc 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p1);
 800140c:	46a4      	mov	ip, r4
 800140e:	483e      	ldr	r0, [pc, #248]	@ (8001508 <controlParqueo.1+0x118>)
 8001410:	f7ff feee 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p1);
 8001414:	46a4      	mov	ip, r4
 8001416:	483c      	ldr	r0, [pc, #240]	@ (8001508 <controlParqueo.1+0x118>)
 8001418:	f7ff ff56 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p2,byteControl, 1);
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <controlParqueo.1+0x114>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	46a4      	mov	ip, r4
 8001422:	2201      	movs	r2, #1
 8001424:	4619      	mov	r1, r3
 8001426:	4839      	ldr	r0, [pc, #228]	@ (800150c <controlParqueo.1+0x11c>)
 8001428:	f7ff ffbc 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p2);
 800142c:	46a4      	mov	ip, r4
 800142e:	4837      	ldr	r0, [pc, #220]	@ (800150c <controlParqueo.1+0x11c>)
 8001430:	f7ff fede 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p2);
 8001434:	46a4      	mov	ip, r4
 8001436:	4835      	ldr	r0, [pc, #212]	@ (800150c <controlParqueo.1+0x11c>)
 8001438:	f7ff ff46 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p3,byteControl, 2);
 800143c:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <controlParqueo.1+0x114>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	46a4      	mov	ip, r4
 8001442:	2202      	movs	r2, #2
 8001444:	4619      	mov	r1, r3
 8001446:	4832      	ldr	r0, [pc, #200]	@ (8001510 <controlParqueo.1+0x120>)
 8001448:	f7ff ffac 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p3);
 800144c:	46a4      	mov	ip, r4
 800144e:	4830      	ldr	r0, [pc, #192]	@ (8001510 <controlParqueo.1+0x120>)
 8001450:	f7ff fece 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p3);
 8001454:	46a4      	mov	ip, r4
 8001456:	482e      	ldr	r0, [pc, #184]	@ (8001510 <controlParqueo.1+0x120>)
 8001458:	f7ff ff36 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p4,byteControl, 3);
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <controlParqueo.1+0x114>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	46a4      	mov	ip, r4
 8001462:	2203      	movs	r2, #3
 8001464:	4619      	mov	r1, r3
 8001466:	482b      	ldr	r0, [pc, #172]	@ (8001514 <controlParqueo.1+0x124>)
 8001468:	f7ff ff9c 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p4);
 800146c:	46a4      	mov	ip, r4
 800146e:	4829      	ldr	r0, [pc, #164]	@ (8001514 <controlParqueo.1+0x124>)
 8001470:	f7ff febe 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p4);
 8001474:	46a4      	mov	ip, r4
 8001476:	4827      	ldr	r0, [pc, #156]	@ (8001514 <controlParqueo.1+0x124>)
 8001478:	f7ff ff26 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p5,byteControl, 4);
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <controlParqueo.1+0x114>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	46a4      	mov	ip, r4
 8001482:	2204      	movs	r2, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4824      	ldr	r0, [pc, #144]	@ (8001518 <controlParqueo.1+0x128>)
 8001488:	f7ff ff8c 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p5);
 800148c:	46a4      	mov	ip, r4
 800148e:	4822      	ldr	r0, [pc, #136]	@ (8001518 <controlParqueo.1+0x128>)
 8001490:	f7ff feae 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p5);
 8001494:	46a4      	mov	ip, r4
 8001496:	4820      	ldr	r0, [pc, #128]	@ (8001518 <controlParqueo.1+0x128>)
 8001498:	f7ff ff16 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p6,byteControl, 5);
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <controlParqueo.1+0x114>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	46a4      	mov	ip, r4
 80014a2:	2205      	movs	r2, #5
 80014a4:	4619      	mov	r1, r3
 80014a6:	481d      	ldr	r0, [pc, #116]	@ (800151c <controlParqueo.1+0x12c>)
 80014a8:	f7ff ff7c 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p6);
 80014ac:	46a4      	mov	ip, r4
 80014ae:	481b      	ldr	r0, [pc, #108]	@ (800151c <controlParqueo.1+0x12c>)
 80014b0:	f7ff fe9e 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p6);
 80014b4:	46a4      	mov	ip, r4
 80014b6:	4819      	ldr	r0, [pc, #100]	@ (800151c <controlParqueo.1+0x12c>)
 80014b8:	f7ff ff06 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p7,byteControl, 6);
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <controlParqueo.1+0x114>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	46a4      	mov	ip, r4
 80014c2:	2206      	movs	r2, #6
 80014c4:	4619      	mov	r1, r3
 80014c6:	4816      	ldr	r0, [pc, #88]	@ (8001520 <controlParqueo.1+0x130>)
 80014c8:	f7ff ff6c 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p7);
 80014cc:	46a4      	mov	ip, r4
 80014ce:	4814      	ldr	r0, [pc, #80]	@ (8001520 <controlParqueo.1+0x130>)
 80014d0:	f7ff fe8e 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p7);
 80014d4:	46a4      	mov	ip, r4
 80014d6:	4812      	ldr	r0, [pc, #72]	@ (8001520 <controlParqueo.1+0x130>)
 80014d8:	f7ff fef6 	bl	80012c8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p8,byteControl, 7);
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <controlParqueo.1+0x114>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	46a4      	mov	ip, r4
 80014e2:	2207      	movs	r2, #7
 80014e4:	4619      	mov	r1, r3
 80014e6:	480f      	ldr	r0, [pc, #60]	@ (8001524 <controlParqueo.1+0x134>)
 80014e8:	f7ff ff5c 	bl	80013a4 <actualizarEstadoParqueos.2>
	FanimationOut(&p8);
 80014ec:	46a4      	mov	ip, r4
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <controlParqueo.1+0x134>)
 80014f0:	f7ff fe7e 	bl	80011f0 <FanimationOut.3>
	FanimationEnter(&p8);
 80014f4:	46a4      	mov	ip, r4
 80014f6:	480b      	ldr	r0, [pc, #44]	@ (8001524 <controlParqueo.1+0x134>)
 80014f8:	f7ff fee6 	bl	80012c8 <FanimationEnter.4>
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	20002600 	.word	0x20002600
 8001508:	20002604 	.word	0x20002604
 800150c:	20002624 	.word	0x20002624
 8001510:	20002644 	.word	0x20002644
 8001514:	20002664 	.word	0x20002664
 8001518:	20002684 	.word	0x20002684
 800151c:	200026a4 	.word	0x200026a4
 8001520:	200026c4 	.word	0x200026c4
 8001524:	200026e4 	.word	0x200026e4

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	@ 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	2234      	movs	r2, #52	@ 0x34
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fc23 	bl	8002d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <SystemClock_Config+0xd0>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <SystemClock_Config+0xd0>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <SystemClock_Config+0xd0>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <SystemClock_Config+0xd4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001574:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <SystemClock_Config+0xd4>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <SystemClock_Config+0xd4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800159c:	2308      	movs	r3, #8
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80015a0:	2350      	movs	r3, #80	@ 0x50
 80015a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 f8bd 	bl	8002734 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015c0:	f000 f9aa 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2102      	movs	r1, #2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fe17 	bl	8002214 <HAL_RCC_ClockConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015ec:	f000 f994 	bl	8001918 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3750      	adds	r7, #80	@ 0x50
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001606:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <MX_SPI1_Init+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_SPI1_Init+0x64>)
 800160c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_SPI1_Init+0x64>)
 800162c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_SPI1_Init+0x64>)
 800164c:	220a      	movs	r2, #10
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001652:	f001 fb0d 	bl	8002c70 <HAL_SPI_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800165c:	f000 f95c 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200025a8 	.word	0x200025a8
 8001668:	40013000 	.word	0x40013000

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b56      	ldr	r3, [pc, #344]	@ (80017e0 <MX_GPIO_Init+0x174>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a55      	ldr	r2, [pc, #340]	@ (80017e0 <MX_GPIO_Init+0x174>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <MX_GPIO_Init+0x174>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b4f      	ldr	r3, [pc, #316]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a4e      	ldr	r2, [pc, #312]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b4c      	ldr	r3, [pc, #304]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b48      	ldr	r3, [pc, #288]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a47      	ldr	r2, [pc, #284]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b45      	ldr	r3, [pc, #276]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a40      	ldr	r2, [pc, #256]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b3e      	ldr	r3, [pc, #248]	@ (80017e0 <MX_GPIO_Init+0x174>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|GPIO_PIN_5|GPIO_PIN_6|LCD_D1_Pin
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80016f8:	483a      	ldr	r0, [pc, #232]	@ (80017e4 <MX_GPIO_Init+0x178>)
 80016fa:	f000 fd3f 	bl	800217c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80016fe:	2200      	movs	r2, #0
 8001700:	f241 7113 	movw	r1, #5907	@ 0x1713
 8001704:	4838      	ldr	r0, [pc, #224]	@ (80017e8 <MX_GPIO_Init+0x17c>)
 8001706:	f000 fd39 	bl	800217c <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800170a:	2200      	movs	r2, #0
 800170c:	f240 4179 	movw	r1, #1145	@ 0x479
 8001710:	4836      	ldr	r0, [pc, #216]	@ (80017ec <MX_GPIO_Init+0x180>)
 8001712:	f000 fd33 	bl	800217c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001716:	2382      	movs	r3, #130	@ 0x82
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2302      	movs	r3, #2
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	482d      	ldr	r0, [pc, #180]	@ (80017e4 <MX_GPIO_Init+0x178>)
 800172e:	f000 fb91 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001732:	f240 7313 	movw	r3, #1811	@ 0x713
 8001736:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4827      	ldr	r0, [pc, #156]	@ (80017e8 <MX_GPIO_Init+0x17c>)
 800174c:	f000 fb82 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001750:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481e      	ldr	r0, [pc, #120]	@ (80017e4 <MX_GPIO_Init+0x178>)
 800176a:	f000 fb73 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800176e:	f240 4379 	movw	r3, #1145	@ 0x479
 8001772:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4819      	ldr	r0, [pc, #100]	@ (80017ec <MX_GPIO_Init+0x180>)
 8001788:	f000 fb64 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 800178c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001792:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0x180>)
 80017a4:	f000 fb56 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <MX_GPIO_Init+0x17c>)
 80017c2:	f000 fb47 	bl	8001e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2028      	movs	r0, #40	@ 0x28
 80017cc:	f000 fb0b 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d0:	2028      	movs	r0, #40	@ 0x28
 80017d2:	f000 fb24 	bl	8001e1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400

080017f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
    counterOutside++; // Para pruebas
 80017fa:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <HAL_GPIO_EXTI_Callback+0x10c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a3e      	ldr	r2, [pc, #248]	@ (80018fc <HAL_GPIO_EXTI_Callback+0x10c>)
 8001802:	6013      	str	r3, [r2, #0]
    currentMillis = HAL_GetTick();
 8001804:	f000 f9e4 	bl	8001bd0 <HAL_GetTick>
 8001808:	4603      	mov	r3, r0
 800180a:	4a3d      	ldr	r2, [pc, #244]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 800180c:	6013      	str	r3, [r2, #0]

    // Verificar qué botón fue presionado y aplicar el antirrebote
    if (GPIO_Pin == GPIO_PIN_12 && (currentMillis - previousMillis[0] > 75))
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001814:	d118      	bne.n	8001848 <HAL_GPIO_EXTI_Callback+0x58>
 8001816:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b4b      	cmp	r3, #75	@ 0x4b
 8001822:	d911      	bls.n	8001848 <HAL_GPIO_EXTI_Callback+0x58>
    {
        counterInside[0]++; // Para pruebas del botón 1
 8001824:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a37      	ldr	r2, [pc, #220]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 800182c:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); // Controla LED en PC8
 800182e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001832:	4836      	ldr	r0, [pc, #216]	@ (800190c <HAL_GPIO_EXTI_Callback+0x11c>)
 8001834:	f000 fcbb 	bl	80021ae <HAL_GPIO_TogglePin>
        previousMillis[0] = currentMillis;
 8001838:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a31      	ldr	r2, [pc, #196]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 800183e:	6013      	str	r3, [r2, #0]
        byteControl=0b10101010;
 8001840:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x120>)
 8001842:	22aa      	movs	r2, #170	@ 0xaa
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e054      	b.n	80018f2 <HAL_GPIO_EXTI_Callback+0x102>
    }
    else if (GPIO_Pin == GPIO_PIN_13 && (currentMillis - previousMillis[1] > 75))
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800184e:	d117      	bne.n	8001880 <HAL_GPIO_EXTI_Callback+0x90>
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b4b      	cmp	r3, #75	@ 0x4b
 800185c:	d910      	bls.n	8001880 <HAL_GPIO_EXTI_Callback+0x90>
    {
        counterInside[1]++; // Para pruebas del botón 2
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	4a28      	ldr	r2, [pc, #160]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 8001866:	6053      	str	r3, [r2, #4]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // Controla LED en PC6
 8001868:	2140      	movs	r1, #64	@ 0x40
 800186a:	4828      	ldr	r0, [pc, #160]	@ (800190c <HAL_GPIO_EXTI_Callback+0x11c>)
 800186c:	f000 fc9f 	bl	80021ae <HAL_GPIO_TogglePin>
        previousMillis[1] = currentMillis;
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a23      	ldr	r2, [pc, #140]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 8001876:	6053      	str	r3, [r2, #4]
        byteControl=0b01010101;
 8001878:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x120>)
 800187a:	2255      	movs	r2, #85	@ 0x55
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e038      	b.n	80018f2 <HAL_GPIO_EXTI_Callback+0x102>

    }
    else if (GPIO_Pin == GPIO_PIN_14 && (currentMillis - previousMillis[2] > 75))
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001886:	d117      	bne.n	80018b8 <HAL_GPIO_EXTI_Callback+0xc8>
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b4b      	cmp	r3, #75	@ 0x4b
 8001894:	d910      	bls.n	80018b8 <HAL_GPIO_EXTI_Callback+0xc8>
    {
        counterInside[2]++; // Para pruebas del botón 3
 8001896:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	3301      	adds	r3, #1
 800189c:	4a1a      	ldr	r2, [pc, #104]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 800189e:	6093      	str	r3, [r2, #8]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5); // Controla LED en PC5
 80018a0:	2120      	movs	r1, #32
 80018a2:	481a      	ldr	r0, [pc, #104]	@ (800190c <HAL_GPIO_EXTI_Callback+0x11c>)
 80018a4:	f000 fc83 	bl	80021ae <HAL_GPIO_TogglePin>
        previousMillis[2] = currentMillis;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a15      	ldr	r2, [pc, #84]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 80018ae:	6093      	str	r3, [r2, #8]
        byteControl=0b00000000;
 80018b0:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x120>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e01c      	b.n	80018f2 <HAL_GPIO_EXTI_Callback+0x102>
    }
    else if (GPIO_Pin == GPIO_PIN_15 && (currentMillis - previousMillis[3] > 75))
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018be:	d118      	bne.n	80018f2 <HAL_GPIO_EXTI_Callback+0x102>
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b4b      	cmp	r3, #75	@ 0x4b
 80018cc:	d911      	bls.n	80018f2 <HAL_GPIO_EXTI_Callback+0x102>
    {
        counterInside[3]++; // Para pruebas del botón 4
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x118>)
 80018d6:	60d3      	str	r3, [r2, #12]
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); // Controla LED en PA12
 80018d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018dc:	480d      	ldr	r0, [pc, #52]	@ (8001914 <HAL_GPIO_EXTI_Callback+0x124>)
 80018de:	f000 fc66 	bl	80021ae <HAL_GPIO_TogglePin>
        previousMillis[3] = currentMillis;
 80018e2:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x110>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x114>)
 80018e8:	60d3      	str	r3, [r2, #12]
        byteControl=0b11111111;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x120>)
 80018ec:	22ff      	movs	r2, #255	@ 0xff
 80018ee:	701a      	strb	r2, [r3, #0]
    }
}
 80018f0:	e7ff      	b.n	80018f2 <HAL_GPIO_EXTI_Callback+0x102>
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20002718 	.word	0x20002718
 8001900:	20002714 	.word	0x20002714
 8001904:	20002704 	.word	0x20002704
 8001908:	2000271c 	.word	0x2000271c
 800190c:	40020800 	.word	0x40020800
 8001910:	20002600 	.word	0x20002600
 8001914:	40020000 	.word	0x40020000

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <Error_Handler+0x8>

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_SPI_MspInit+0x84>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d12b      	bne.n	80019ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <HAL_SPI_MspInit+0x88>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_SPI_MspInit+0x88>)
 80019a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_SPI_MspInit+0x88>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_SPI_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_SPI_MspInit+0x88>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_SPI_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ce:	23e0      	movs	r3, #224	@ 0xe0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019de:	2305      	movs	r3, #5
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <HAL_SPI_MspInit+0x8c>)
 80019ea:	f000 fa33 	bl	8001e54 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40013000 	.word	0x40013000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f000 f8a5 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001a66:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a6a:	f000 fbbb 	bl	80021e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001a6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a72:	f000 fbb7 	bl	80021e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001a76:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a7a:	f000 fbb3 	bl	80021e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001a7e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a82:	f000 fbaf 	bl	80021e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae8 <LoopFillZerobss+0xe>
 8001ab4:	f7ff ffea 	bl	8001a8c <SystemInit>
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopFillZerobss+0x12>)
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x16>)
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x1a>)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:
 8001ac2:	58d4      	ldr	r4, [r2, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:
 8001ac8:	18c4      	adds	r4, r0, r3
 8001aca:	428c      	cmp	r4, r1
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x1e>)
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopFillZerobss+0x22>)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:
 8001ada:	42a2      	cmp	r2, r4
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>
 8001ade:	f001 f959 	bl	8002d94 <__libc_init_array>
 8001ae2:	f7ff fb11 	bl	8001108 <main>
 8001ae6:	4770      	bx	lr
 8001ae8:	20020000 	.word	0x20020000
 8001aec:	20000000 	.word	0x20000000
 8001af0:	2000258c 	.word	0x2000258c
 8001af4:	08028614 	.word	0x08028614
 8001af8:	2000258c 	.word	0x2000258c
 8001afc:	20002730 	.word	0x20002730

08001b00 <ADC_IRQHandler>:
 8001b00:	e7fe      	b.n	8001b00 <ADC_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_Init+0x40>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_Init+0x40>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x40>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f94f 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fef4 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f967 	bl	8001e3a <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 f92f 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20002580 	.word	0x20002580
 8001ba0:	20002588 	.word	0x20002588
 8001ba4:	20002584 	.word	0x20002584

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20002588 	.word	0x20002588
 8001bcc:	2000272c 	.word	0x2000272c

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000272c 	.word	0x2000272c

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20002588 	.word	0x20002588

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	@ (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	@ (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff3e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff31 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e165      	b.n	800213c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8154 	bne.w	8002136 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d005      	beq.n	8001ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d130      	bne.n	8001f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 0201 	and.w	r2, r3, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d017      	beq.n	8001f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80ae 	beq.w	8002136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b5d      	ldr	r3, [pc, #372]	@ (8002154 <HAL_GPIO_Init+0x300>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8002154 <HAL_GPIO_Init+0x300>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b5a      	ldr	r3, [pc, #360]	@ (8002154 <HAL_GPIO_Init+0x300>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff6:	4a58      	ldr	r2, [pc, #352]	@ (8002158 <HAL_GPIO_Init+0x304>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <HAL_GPIO_Init+0x308>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d025      	beq.n	800206e <HAL_GPIO_Init+0x21a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	@ (8002160 <HAL_GPIO_Init+0x30c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x216>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_GPIO_Init+0x310>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x212>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	@ (8002168 <HAL_GPIO_Init+0x314>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	@ (800216c <HAL_GPIO_Init+0x318>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x20a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	@ (8002170 <HAL_GPIO_Init+0x31c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x206>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a49      	ldr	r2, [pc, #292]	@ (8002174 <HAL_GPIO_Init+0x320>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x202>
 8002052:	2306      	movs	r3, #6
 8002054:	e00c      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002056:	2307      	movs	r3, #7
 8002058:	e00a      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800205a:	2305      	movs	r3, #5
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800205e:	2304      	movs	r3, #4
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x21c>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	@ (8002158 <HAL_GPIO_Init+0x304>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_GPIO_Init+0x324>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a31      	ldr	r2, [pc, #196]	@ (8002178 <HAL_GPIO_Init+0x324>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <HAL_GPIO_Init+0x324>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a26      	ldr	r2, [pc, #152]	@ (8002178 <HAL_GPIO_Init+0x324>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_GPIO_Init+0x324>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_GPIO_Init+0x324>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <HAL_GPIO_Init+0x324>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a11      	ldr	r2, [pc, #68]	@ (8002178 <HAL_GPIO_Init+0x324>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f ae96 	bls.w	8001e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40021400 	.word	0x40021400
 8002174:	40021800 	.word	0x40021800
 8002178:	40013c00 	.word	0x40013c00

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002198:	e003      	b.n	80021a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	400b      	ands	r3, r1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff faf4 	bl	80017f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_RCC_ClockConfig>:
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
 8002224:	2301      	movs	r3, #1
 8002226:	e0cc      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 8002228:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d90c      	bls.n	8002250 <HAL_RCC_ClockConfig+0x3c>
 8002236:	4b65      	ldr	r3, [pc, #404]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	4b63      	ldr	r3, [pc, #396]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x3c>
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x8a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x60>
 8002268:	4b59      	ldr	r3, [pc, #356]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a58      	ldr	r2, [pc, #352]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x78>
 8002280:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	4b50      	ldr	r3, [pc, #320]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d044      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xae>
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xbe>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
 80022d2:	4b3f      	ldr	r3, [pc, #252]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
 80022de:	2301      	movs	r3, #1
 80022e0:	e06f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e067      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 80022f2:	4b37      	ldr	r3, [pc, #220]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4934      	ldr	r1, [pc, #208]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
 8002304:	f7ff fc64 	bl	8001bd0 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
 800230c:	f7ff fc60 	bl	8001bd0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
 800231e:	2303      	movs	r3, #3
 8002320:	e04f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 8002322:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d20c      	bcs.n	800235c <HAL_RCC_ClockConfig+0x148>
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x148>
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x166>
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x186>
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
 800239a:	f000 f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	490a      	ldr	r1, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fbc4 	bl	8001b48 <HAL_InitTick>
 80023c0:	2300      	movs	r3, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00
 80023d0:	40023800 	.word	0x40023800
 80023d4:	080285f4 	.word	0x080285f4
 80023d8:	20002580 	.word	0x20002580
 80023dc:	20002584 	.word	0x20002584

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b0a6      	sub	sp, #152	@ 0x98
 80023e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002406:	4bc8      	ldr	r3, [pc, #800]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b0c      	cmp	r3, #12
 8002410:	f200 817e 	bhi.w	8002710 <HAL_RCC_GetSysClockFreq+0x330>
 8002414:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	08002451 	.word	0x08002451
 8002420:	08002711 	.word	0x08002711
 8002424:	08002711 	.word	0x08002711
 8002428:	08002711 	.word	0x08002711
 800242c:	08002459 	.word	0x08002459
 8002430:	08002711 	.word	0x08002711
 8002434:	08002711 	.word	0x08002711
 8002438:	08002711 	.word	0x08002711
 800243c:	08002461 	.word	0x08002461
 8002440:	08002711 	.word	0x08002711
 8002444:	08002711 	.word	0x08002711
 8002448:	08002711 	.word	0x08002711
 800244c:	080025cb 	.word	0x080025cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4bb6      	ldr	r3, [pc, #728]	@ (800272c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8002456:	e15f      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002458:	4bb5      	ldr	r3, [pc, #724]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x350>)
 800245a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800245e:	e15b      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4bb1      	ldr	r3, [pc, #708]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246c:	4bae      	ldr	r3, [pc, #696]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d031      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002478:	4bab      	ldr	r3, [pc, #684]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	2200      	movs	r2, #0
 8002480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002482:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248a:	663b      	str	r3, [r7, #96]	@ 0x60
 800248c:	2300      	movs	r3, #0
 800248e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002490:	4ba7      	ldr	r3, [pc, #668]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x350>)
 8002492:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002496:	462a      	mov	r2, r5
 8002498:	fb03 f202 	mul.w	r2, r3, r2
 800249c:	2300      	movs	r3, #0
 800249e:	4621      	mov	r1, r4
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	4aa2      	ldr	r2, [pc, #648]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x350>)
 80024a8:	4621      	mov	r1, r4
 80024aa:	fba1 1202 	umull	r1, r2, r1, r2
 80024ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024b0:	460a      	mov	r2, r1
 80024b2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80024b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80024b6:	4413      	add	r3, r2
 80024b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024be:	2200      	movs	r2, #0
 80024c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80024cc:	f7fe f8a8 	bl	8000620 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024da:	e064      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	4b92      	ldr	r3, [pc, #584]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	2200      	movs	r2, #0
 80024e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80024e6:	657a      	str	r2, [r7, #84]	@ 0x54
 80024e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f0:	2300      	movs	r3, #0
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80024f8:	4622      	mov	r2, r4
 80024fa:	462b      	mov	r3, r5
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	0159      	lsls	r1, r3, #5
 8002506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250a:	0150      	lsls	r0, r2, #5
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4621      	mov	r1, r4
 8002512:	1a51      	subs	r1, r2, r1
 8002514:	6139      	str	r1, [r7, #16]
 8002516:	4629      	mov	r1, r5
 8002518:	eb63 0301 	sbc.w	r3, r3, r1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800252a:	4659      	mov	r1, fp
 800252c:	018b      	lsls	r3, r1, #6
 800252e:	4651      	mov	r1, sl
 8002530:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002534:	4651      	mov	r1, sl
 8002536:	018a      	lsls	r2, r1, #6
 8002538:	4651      	mov	r1, sl
 800253a:	ebb2 0801 	subs.w	r8, r2, r1
 800253e:	4659      	mov	r1, fp
 8002540:	eb63 0901 	sbc.w	r9, r3, r1
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002550:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002554:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002558:	4690      	mov	r8, r2
 800255a:	4699      	mov	r9, r3
 800255c:	4623      	mov	r3, r4
 800255e:	eb18 0303 	adds.w	r3, r8, r3
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	462b      	mov	r3, r5
 8002566:	eb49 0303 	adc.w	r3, r9, r3
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002578:	4629      	mov	r1, r5
 800257a:	028b      	lsls	r3, r1, #10
 800257c:	4621      	mov	r1, r4
 800257e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002582:	4621      	mov	r1, r4
 8002584:	028a      	lsls	r2, r1, #10
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258e:	2200      	movs	r2, #0
 8002590:	643b      	str	r3, [r7, #64]	@ 0x40
 8002592:	647a      	str	r2, [r7, #68]	@ 0x44
 8002594:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002598:	f7fe f842 	bl	8000620 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a6:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0c1b      	lsrs	r3, r3, #16
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	3301      	adds	r3, #1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80025b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025c8:	e0a6      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ca:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d6:	4b54      	ldr	r3, [pc, #336]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02a      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b51      	ldr	r3, [pc, #324]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025f4:	2100      	movs	r1, #0
 80025f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x350>)
 80025f8:	fb03 f201 	mul.w	r2, r3, r1
 80025fc:	2300      	movs	r3, #0
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	4413      	add	r3, r2
 8002604:	4a4a      	ldr	r2, [pc, #296]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x350>)
 8002606:	fba0 1202 	umull	r1, r2, r0, r2
 800260a:	677a      	str	r2, [r7, #116]	@ 0x74
 800260c:	460a      	mov	r2, r1
 800260e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002610:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002612:	4413      	add	r3, r2
 8002614:	677b      	str	r3, [r7, #116]	@ 0x74
 8002616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800261a:	2200      	movs	r2, #0
 800261c:	633b      	str	r3, [r7, #48]	@ 0x30
 800261e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002620:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002624:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002628:	f7fd fffa 	bl	8000620 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4613      	mov	r3, r2
 8002632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002636:	e05b      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002638:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	2200      	movs	r2, #0
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002654:	4642      	mov	r2, r8
 8002656:	464b      	mov	r3, r9
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	0159      	lsls	r1, r3, #5
 8002662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002666:	0150      	lsls	r0, r2, #5
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4641      	mov	r1, r8
 800266e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002672:	4649      	mov	r1, r9
 8002674:	eb63 0b01 	sbc.w	fp, r3, r1
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800268c:	ebb2 040a 	subs.w	r4, r2, sl
 8002690:	eb63 050b 	sbc.w	r5, r3, fp
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	00eb      	lsls	r3, r5, #3
 800269e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a2:	00e2      	lsls	r2, r4, #3
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	4643      	mov	r3, r8
 80026aa:	18e3      	adds	r3, r4, r3
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	464b      	mov	r3, r9
 80026b0:	eb45 0303 	adc.w	r3, r5, r3
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c2:	4629      	mov	r1, r5
 80026c4:	028b      	lsls	r3, r1, #10
 80026c6:	4621      	mov	r1, r4
 80026c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026cc:	4621      	mov	r1, r4
 80026ce:	028a      	lsls	r2, r1, #10
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d8:	2200      	movs	r2, #0
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	61fa      	str	r2, [r7, #28]
 80026de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e2:	f7fd ff9d 	bl	8000620 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4613      	mov	r3, r2
 80026ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x348>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0f1b      	lsrs	r3, r3, #28
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80026fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002702:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800270e:	e003      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002716:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002718:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800271c:	4618      	mov	r0, r3
 800271e:	3798      	adds	r7, #152	@ 0x98
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400
 8002730:	017d7840 	.word	0x017d7840

08002734 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e28d      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8083 	beq.w	800285a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002754:	4b94      	ldr	r3, [pc, #592]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b04      	cmp	r3, #4
 800275e:	d019      	beq.n	8002794 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002760:	4b91      	ldr	r3, [pc, #580]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002768:	2b08      	cmp	r3, #8
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800276c:	4b8e      	ldr	r3, [pc, #568]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002778:	d00c      	beq.n	8002794 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277a:	4b8b      	ldr	r3, [pc, #556]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d112      	bne.n	80027ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002786:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002792:	d10b      	bne.n	80027ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	4b84      	ldr	r3, [pc, #528]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d05b      	beq.n	8002858 <HAL_RCC_OscConfig+0x124>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d157      	bne.n	8002858 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e25a      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b4:	d106      	bne.n	80027c4 <HAL_RCC_OscConfig+0x90>
 80027b6:	4b7c      	ldr	r3, [pc, #496]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7b      	ldr	r2, [pc, #492]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e01d      	b.n	8002800 <HAL_RCC_OscConfig+0xcc>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0xb4>
 80027ce:	4b76      	ldr	r3, [pc, #472]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a75      	ldr	r2, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b73      	ldr	r3, [pc, #460]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a72      	ldr	r2, [pc, #456]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0xcc>
 80027e8:	4b6f      	ldr	r3, [pc, #444]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6e      	ldr	r2, [pc, #440]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6b      	ldr	r2, [pc, #428]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff f9e2 	bl	8001bd0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f9de 	bl	8001bd0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e21f      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	4b61      	ldr	r3, [pc, #388]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0xdc>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7ff f9ce 	bl	8001bd0 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002838:	f7ff f9ca 	bl	8001bd0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	@ 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e20b      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	4b57      	ldr	r3, [pc, #348]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x104>
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06f      	beq.n	8002946 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002866:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b00      	cmp	r3, #0
 8002870:	d017      	beq.n	80028a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002872:	4b4d      	ldr	r3, [pc, #308]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800287e:	4b4a      	ldr	r3, [pc, #296]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d11c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x186>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1d3      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4937      	ldr	r1, [pc, #220]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	e03a      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <HAL_RCC_OscConfig+0x278>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7ff f977 	bl	8001bd0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e6:	f7ff f973 	bl	8001bd0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1b4      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4925      	ldr	r1, [pc, #148]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_RCC_OscConfig+0x278>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff f956 	bl	8001bd0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002928:	f7ff f952 	bl	8001bd0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e193      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d036      	beq.n	80029c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <HAL_RCC_OscConfig+0x27c>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff f936 	bl	8001bd0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002968:	f7ff f932 	bl	8001bd0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e173      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_OscConfig+0x274>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x234>
 8002986:	e01b      	b.n	80029c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_OscConfig+0x27c>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7ff f91f 	bl	8001bd0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	e00e      	b.n	80029b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7ff f91b 	bl	8001bd0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d907      	bls.n	80029b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e15c      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470000 	.word	0x42470000
 80029b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b4:	4b8a      	ldr	r3, [pc, #552]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ea      	bne.n	8002996 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8097 	beq.w	8002afc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b83      	ldr	r3, [pc, #524]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b7f      	ldr	r3, [pc, #508]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a7e      	ldr	r2, [pc, #504]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	4b7c      	ldr	r3, [pc, #496]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b79      	ldr	r3, [pc, #484]	@ (8002be4 <HAL_RCC_OscConfig+0x4b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x4b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x4b0>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7ff f8db 	bl	8001bd0 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7ff f8d7 	bl	8001bd0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e118      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b6c      	ldr	r3, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x4b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x31e>
 8002a44:	4b66      	ldr	r3, [pc, #408]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	4a65      	ldr	r2, [pc, #404]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x358>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x340>
 8002a5a:	4b61      	ldr	r3, [pc, #388]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	4a60      	ldr	r2, [pc, #384]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a66:	4b5e      	ldr	r3, [pc, #376]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	4a5d      	ldr	r2, [pc, #372]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x358>
 8002a74:	4b5a      	ldr	r3, [pc, #360]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	4a59      	ldr	r2, [pc, #356]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a80:	4b57      	ldr	r3, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a56      	ldr	r2, [pc, #344]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7ff f89c 	bl	8001bd0 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7ff f898 	bl	8001bd0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0d7      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x368>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff f886 	bl	8001bd0 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7ff f882 	bl	8001bd0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0c1      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	4a3a      	ldr	r2, [pc, #232]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80ad 	beq.w	8002c60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b06:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d060      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d145      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b33      	ldr	r3, [pc, #204]	@ (8002be8 <HAL_RCC_OscConfig+0x4b4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff f856 	bl	8001bd0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7ff f852 	bl	8001bd0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e093      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	019b      	lsls	r3, r3, #6
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	491b      	ldr	r1, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x4b4>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7ff f827 	bl	8001bd0 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b86:	f7ff f823 	bl	8001bd0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e064      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x452>
 8002ba4:	e05c      	b.n	8002c60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_RCC_OscConfig+0x4b4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff f810 	bl	8001bd0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7ff f80c 	bl	8001bd0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e04d      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x480>
 8002bd2:	e045      	b.n	8002c60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e040      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1f      	ldr	r3, [pc, #124]	@ (8002c6c <HAL_RCC_OscConfig+0x538>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d129      	bne.n	8002c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d122      	bne.n	8002c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d119      	bne.n	8002c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d10f      	bne.n	8002c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07b      	b.n	8002d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c92:	d009      	beq.n	8002ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fe56 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0104 	and.w	r1, r3, #4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	f003 0210 	and.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <memset>:
 8002d82:	4402      	add	r2, r0
 8002d84:	4603      	mov	r3, r0
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d100      	bne.n	8002d8c <memset+0xa>
 8002d8a:	4770      	bx	lr
 8002d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8002d90:	e7f9      	b.n	8002d86 <memset+0x4>
	...

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	4d0d      	ldr	r5, [pc, #52]	@ (8002dcc <__libc_init_array+0x38>)
 8002d98:	4c0d      	ldr	r4, [pc, #52]	@ (8002dd0 <__libc_init_array+0x3c>)
 8002d9a:	1b64      	subs	r4, r4, r5
 8002d9c:	10a4      	asrs	r4, r4, #2
 8002d9e:	2600      	movs	r6, #0
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	4d0b      	ldr	r5, [pc, #44]	@ (8002dd4 <__libc_init_array+0x40>)
 8002da6:	4c0c      	ldr	r4, [pc, #48]	@ (8002dd8 <__libc_init_array+0x44>)
 8002da8:	f000 f818 	bl	8002ddc <_init>
 8002dac:	1b64      	subs	r4, r4, r5
 8002dae:	10a4      	asrs	r4, r4, #2
 8002db0:	2600      	movs	r6, #0
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbc:	4798      	blx	r3
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc6:	4798      	blx	r3
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	0802860c 	.word	0x0802860c
 8002dd0:	0802860c 	.word	0x0802860c
 8002dd4:	0802860c 	.word	0x0802860c
 8002dd8:	08028610 	.word	0x08028610

08002ddc <_init>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr

08002de8 <_fini>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr
