
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025818  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b850  0802b850  0002f58c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b850  0802b850  0002c850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b858  0802b858  0002f58c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b858  0802b858  0002c858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802b85c  0802b85c  0002c85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000258c  20000000  0802b860  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000258c  0802ddec  0002f58c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027d8  0802ddec  0002f7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002f58c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e563  00000000  00000000  0002f5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f6  00000000  00000000  0003db1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0003fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000216df  00000000  00000000  000408f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001105a  00000000  00000000  00061fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ce60f  00000000  00000000  00073031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00141640  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a11  00000000  00000000  00141683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000368c  00000000  00000000  00142094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00145720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000258c 	.word	0x2000258c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006020 	.word	0x08006020

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20002590 	.word	0x20002590
 8000204:	08006020 	.word	0x08006020

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4878      	ldr	r0, [pc, #480]	@ (8000afc <LCD_Init+0x1ec>)
 800091a:	f001 fe85 	bl	8002628 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800091e:	2201      	movs	r2, #1
 8000920:	2113      	movs	r1, #19
 8000922:	4877      	ldr	r0, [pc, #476]	@ (8000b00 <LCD_Init+0x1f0>)
 8000924:	f001 fe80 	bl	8002628 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <LCD_Init+0x1f4>)
 800092e:	f001 fe7b 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f001 fb0e 	bl	8001f54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	4871      	ldr	r0, [pc, #452]	@ (8000b04 <LCD_Init+0x1f4>)
 800093e:	f001 fe73 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000942:	2014      	movs	r0, #20
 8000944:	f001 fb06 	bl	8001f54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <LCD_Init+0x1f4>)
 800094e:	f001 fe6b 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000952:	2096      	movs	r0, #150	@ 0x96
 8000954:	f001 fafe 	bl	8001f54 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4867      	ldr	r0, [pc, #412]	@ (8000afc <LCD_Init+0x1ec>)
 800095e:	f001 fe63 	bl	8002628 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000962:	20e9      	movs	r0, #233	@ 0xe9
 8000964:	f000 f8d0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x20);
 8000968:	2020      	movs	r0, #32
 800096a:	f000 f973 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800096e:	2011      	movs	r0, #17
 8000970:	f000 f8ca 	bl	8000b08 <LCD_CMD>
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f001 faed 	bl	8001f54 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800097a:	20d1      	movs	r0, #209	@ 0xd1
 800097c:	f000 f8c4 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f967 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x71);
 8000986:	2071      	movs	r0, #113	@ 0x71
 8000988:	f000 f964 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x19);
 800098c:	2019      	movs	r0, #25
 800098e:	f000 f961 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000992:	20d0      	movs	r0, #208	@ 0xd0
 8000994:	f000 f8b8 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x07);
 8000998:	2007      	movs	r0, #7
 800099a:	f000 f95b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 f958 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 80009a4:	2008      	movs	r0, #8
 80009a6:	f000 f955 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80009aa:	2036      	movs	r0, #54	@ 0x36
 80009ac:	f000 f8ac 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f94f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80009b6:	203a      	movs	r0, #58	@ 0x3a
 80009b8:	f000 f8a6 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f949 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80009c2:	20c1      	movs	r0, #193	@ 0xc1
 80009c4:	f000 f8a0 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x10);
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f943 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 80009ce:	2010      	movs	r0, #16
 80009d0:	f000 f940 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f93d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 f93a 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80009e0:	20c0      	movs	r0, #192	@ 0xc0
 80009e2:	f000 f891 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f934 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 80009ec:	2035      	movs	r0, #53	@ 0x35
 80009ee:	f000 f931 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f92b 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f928 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x02);
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 f925 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 8000a0a:	20c5      	movs	r0, #197	@ 0xc5
 8000a0c:	f000 f87c 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000a10:	2004      	movs	r0, #4
 8000a12:	f000 f91f 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000a16:	20d2      	movs	r0, #210	@ 0xd2
 8000a18:	f000 f876 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x01);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 f919 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x44);
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f000 f916 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000a28:	20c8      	movs	r0, #200	@ 0xc8
 8000a2a:	f000 f86d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x04);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f000 f910 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x67);
 8000a34:	2067      	movs	r0, #103	@ 0x67
 8000a36:	f000 f90d 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x35);
 8000a3a:	2035      	movs	r0, #53	@ 0x35
 8000a3c:	f000 f90a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x04);
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 f907 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a46:	2008      	movs	r0, #8
 8000a48:	f000 f904 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x06);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 f901 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x24);
 8000a52:	2024      	movs	r0, #36	@ 0x24
 8000a54:	f000 f8fe 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 f8fb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x37);
 8000a5e:	2037      	movs	r0, #55	@ 0x37
 8000a60:	f000 f8f8 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x40);
 8000a64:	2040      	movs	r0, #64	@ 0x40
 8000a66:	f000 f8f5 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x03);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8f2 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x10);
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 f8ef 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x08);
 8000a76:	2008      	movs	r0, #8
 8000a78:	f000 f8ec 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x80);
 8000a7c:	2080      	movs	r0, #128	@ 0x80
 8000a7e:	f000 f8e9 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f8e6 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000a88:	202a      	movs	r0, #42	@ 0x2a
 8000a8a:	f000 f83d 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f8dd 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 f8da 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x3F);
 8000aa0:	203f      	movs	r0, #63	@ 0x3f
 8000aa2:	f000 f8d7 	bl	8000c54 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000aa6:	202b      	movs	r0, #43	@ 0x2b
 8000aa8:	f000 f82e 	bl	8000b08 <LCD_CMD>
	LCD_DATA(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8d1 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8ce 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0x01);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 f8cb 	bl	8000c54 <LCD_DATA>
	LCD_DATA(0xE0);
 8000abe:	20e0      	movs	r0, #224	@ 0xe0
 8000ac0:	f000 f8c8 	bl	8000c54 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000ac4:	2029      	movs	r0, #41	@ 0x29
 8000ac6:	f000 f81f 	bl	8000b08 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 8000aca:	202c      	movs	r0, #44	@ 0x2c
 8000acc:	f000 f81c 	bl	8000b08 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 f819 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f001 fa3c 	bl	8001f54 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f813 	bl	8000b08 <LCD_CMD>
	HAL_Delay(120);
 8000ae2:	2078      	movs	r0, #120	@ 0x78
 8000ae4:	f001 fa36 	bl	8001f54 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000ae8:	2029      	movs	r0, #41	@ 0x29
 8000aea:	f000 f80d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4802      	ldr	r0, [pc, #8]	@ (8000afc <LCD_Init+0x1ec>)
 8000af4:	f001 fd98 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	484c      	ldr	r0, [pc, #304]	@ (8000c48 <LCD_CMD+0x140>)
 8000b18:	f001 fd86 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <LCD_CMD+0x140>)
 8000b22:	f001 fd81 	bl	8002628 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4844      	ldr	r0, [pc, #272]	@ (8000c48 <LCD_CMD+0x140>)
 8000b38:	f001 fd76 	bl	8002628 <HAL_GPIO_WritePin>
 8000b3c:	e005      	b.n	8000b4a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4840      	ldr	r0, [pc, #256]	@ (8000c48 <LCD_CMD+0x140>)
 8000b46:	f001 fd6f 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	483c      	ldr	r0, [pc, #240]	@ (8000c4c <LCD_CMD+0x144>)
 8000b5a:	f001 fd65 	bl	8002628 <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <LCD_CMD+0x144>)
 8000b66:	f001 fd5f 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7a:	4833      	ldr	r0, [pc, #204]	@ (8000c48 <LCD_CMD+0x140>)
 8000b7c:	f001 fd54 	bl	8002628 <HAL_GPIO_WritePin>
 8000b80:	e005      	b.n	8000b8e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	482f      	ldr	r0, [pc, #188]	@ (8000c48 <LCD_CMD+0x140>)
 8000b8a:	f001 fd4d 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d005      	beq.n	8000ba4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	482c      	ldr	r0, [pc, #176]	@ (8000c50 <LCD_CMD+0x148>)
 8000b9e:	f001 fd43 	bl	8002628 <HAL_GPIO_WritePin>
 8000ba2:	e004      	b.n	8000bae <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4829      	ldr	r0, [pc, #164]	@ (8000c50 <LCD_CMD+0x148>)
 8000baa:	f001 fd3d 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d005      	beq.n	8000bc4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <LCD_CMD+0x148>)
 8000bbe:	f001 fd33 	bl	8002628 <HAL_GPIO_WritePin>
 8000bc2:	e004      	b.n	8000bce <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <LCD_CMD+0x148>)
 8000bca:	f001 fd2d 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <LCD_CMD+0x148>)
 8000bde:	f001 fd23 	bl	8002628 <HAL_GPIO_WritePin>
 8000be2:	e004      	b.n	8000bee <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <LCD_CMD+0x148>)
 8000bea:	f001 fd1d 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	4814      	ldr	r0, [pc, #80]	@ (8000c50 <LCD_CMD+0x148>)
 8000c00:	f001 fd12 	bl	8002628 <HAL_GPIO_WritePin>
 8000c04:	e005      	b.n	8000c12 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <LCD_CMD+0x148>)
 8000c0e:	f001 fd0b 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da06      	bge.n	8000c28 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <LCD_CMD+0x140>)
 8000c22:	f001 fd01 	bl	8002628 <HAL_GPIO_WritePin>
 8000c26:	e005      	b.n	8000c34 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <LCD_CMD+0x140>)
 8000c30:	f001 fcfa 	bl	8002628 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <LCD_CMD+0x140>)
 8000c3a:	f001 fcf5 	bl	8002628 <HAL_GPIO_WritePin>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020400 	.word	0x40020400

08000c54 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2110      	movs	r1, #16
 8000c62:	484c      	ldr	r0, [pc, #304]	@ (8000d94 <LCD_DATA+0x140>)
 8000c64:	f001 fce0 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4849      	ldr	r0, [pc, #292]	@ (8000d94 <LCD_DATA+0x140>)
 8000c6e:	f001 fcdb 	bl	8002628 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	4844      	ldr	r0, [pc, #272]	@ (8000d94 <LCD_DATA+0x140>)
 8000c84:	f001 fcd0 	bl	8002628 <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <LCD_DATA+0x140>)
 8000c92:	f001 fcc9 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	483c      	ldr	r0, [pc, #240]	@ (8000d98 <LCD_DATA+0x144>)
 8000ca6:	f001 fcbf 	bl	8002628 <HAL_GPIO_WritePin>
 8000caa:	e004      	b.n	8000cb6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4839      	ldr	r0, [pc, #228]	@ (8000d98 <LCD_DATA+0x144>)
 8000cb2:	f001 fcb9 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc6:	4833      	ldr	r0, [pc, #204]	@ (8000d94 <LCD_DATA+0x140>)
 8000cc8:	f001 fcae 	bl	8002628 <HAL_GPIO_WritePin>
 8000ccc:	e005      	b.n	8000cda <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd4:	482f      	ldr	r0, [pc, #188]	@ (8000d94 <LCD_DATA+0x140>)
 8000cd6:	f001 fca7 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	482c      	ldr	r0, [pc, #176]	@ (8000d9c <LCD_DATA+0x148>)
 8000cea:	f001 fc9d 	bl	8002628 <HAL_GPIO_WritePin>
 8000cee:	e004      	b.n	8000cfa <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <LCD_DATA+0x148>)
 8000cf6:	f001 fc97 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2120      	movs	r1, #32
 8000d08:	4824      	ldr	r0, [pc, #144]	@ (8000d9c <LCD_DATA+0x148>)
 8000d0a:	f001 fc8d 	bl	8002628 <HAL_GPIO_WritePin>
 8000d0e:	e004      	b.n	8000d1a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4821      	ldr	r0, [pc, #132]	@ (8000d9c <LCD_DATA+0x148>)
 8000d16:	f001 fc87 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <LCD_DATA+0x148>)
 8000d2a:	f001 fc7d 	bl	8002628 <HAL_GPIO_WritePin>
 8000d2e:	e004      	b.n	8000d3a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <LCD_DATA+0x148>)
 8000d36:	f001 fc77 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <LCD_DATA+0x148>)
 8000d4c:	f001 fc6c 	bl	8002628 <HAL_GPIO_WritePin>
 8000d50:	e005      	b.n	8000d5e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <LCD_DATA+0x148>)
 8000d5a:	f001 fc65 	bl	8002628 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <LCD_DATA+0x140>)
 8000d6e:	f001 fc5b 	bl	8002628 <HAL_GPIO_WritePin>
 8000d72:	e005      	b.n	8000d80 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <LCD_DATA+0x140>)
 8000d7c:	f001 fc54 	bl	8002628 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <LCD_DATA+0x140>)
 8000d86:	f001 fc4f 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000dae:	202a      	movs	r0, #42	@ 0x2a
 8000db0:	f7ff feaa 	bl	8000b08 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff4a 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x1);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff45 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff3f 	bl	8000c54 <LCD_DATA>
	LCD_DATA(x2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000de0:	202b      	movs	r0, #43	@ 0x2b
 8000de2:	f7ff fe91 	bl	8000b08 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y1);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff2c 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff26 	bl	8000c54 <LCD_DATA>
	LCD_DATA(y2);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000e12:	202c      	movs	r0, #44	@ 0x2c
 8000e14:	f7ff fe78 	bl	8000b08 <LCD_CMD>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000e28:	202c      	movs	r0, #44	@ 0x2c
 8000e2a:	f7ff fe6d 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <LCD_Clear+0x80>)
 8000e34:	f001 fbf8 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e3e:	f001 fbf3 	bl	8002628 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000e42:	23ef      	movs	r3, #239	@ 0xef
 8000e44:	f240 123f 	movw	r2, #319	@ 0x13f
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff ffa8 	bl	8000da0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e016      	b.n	8000e84 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	e00d      	b.n	8000e78 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fef6 	bl	8000c54 <LCD_DATA>
			LCD_DATA(c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fef1 	bl	8000c54 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2bef      	cmp	r3, #239	@ 0xef
 8000e7c:	d9ee      	bls.n	8000e5c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8a:	d3e4      	bcc.n	8000e56 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <LCD_Clear+0x84>)
 8000e92:	f001 fbc9 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000eb6:	202c      	movs	r0, #44	@ 0x2c
 8000eb8:	f7ff fe26 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4824      	ldr	r0, [pc, #144]	@ (8000f54 <LCD_Bitmap+0xac>)
 8000ec2:	f001 fbb1 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4823      	ldr	r0, [pc, #140]	@ (8000f58 <LCD_Bitmap+0xb0>)
 8000ecc:	f001 fbac 	bl	8002628 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ff58 	bl	8000da0 <SetWindows>
	unsigned int k = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	e01e      	b.n	8000f38 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e014      	b.n	8000f2a <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fea3 	bl	8000c54 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe9b 	bl	8000c54 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	3302      	adds	r3, #2
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d8e6      	bhi.n	8000f00 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	3301      	adds	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8dc      	bhi.n	8000efa <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <LCD_Bitmap+0xb0>)
 8000f46:	f001 fb6f 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400

08000f5c <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000f6a:	202c      	movs	r0, #44	@ 0x2c
 8000f6c:	f7ff fdcc 	bl	8000b08 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	484d      	ldr	r0, [pc, #308]	@ (80010ac <LCD_Sprite+0x150>)
 8000f76:	f001 fb57 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	484c      	ldr	r0, [pc, #304]	@ (80010b0 <LCD_Sprite+0x154>)
 8000f80:	f001 fb52 	bl	8002628 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f7ff fefe 	bl	8000da0 <SetWindows>
	int k = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000fb2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d03a      	beq.n	8001030 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fbe:	e032      	b.n	8001026 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	fb03 f202 	mul.w	r2, r3, r2
 8000fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fe4:	4413      	add	r3, r2
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fec:	e014      	b.n	8001018 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fe2c 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	3301      	adds	r3, #1
 8001000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe24 	bl	8000c54 <LCD_DATA>
				k = k - 2;
 800100c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800100e:	3b02      	subs	r3, #2
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
 8001018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbe6      	blt.n	8000fee <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001022:	3301      	adds	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbc8      	blt.n	8000fc0 <LCD_Sprite+0x64>
 800102e:	e034      	b.n	800109a <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
 8001034:	e02d      	b.n	8001092 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	fb03 f202 	mul.w	r2, r3, r2
 800103e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	4413      	add	r3, r2
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e014      	b.n	8001084 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 800105a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdf6 	bl	8000c54 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	3301      	adds	r3, #1
 800106c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fdee 	bl	8000c54 <LCD_DATA>
				k = k + 2;
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107a:	3302      	adds	r3, #2
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbe6      	blt.n	800105a <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	3301      	adds	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	6a3a      	ldr	r2, [r7, #32]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbcd      	blt.n	8001036 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2101      	movs	r1, #1
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <LCD_Sprite+0x154>)
 80010a0:	f001 fac2 	bl	8002628 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	@ 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400

080010b4 <initParqueo.0>:
int main(void)
{

  /* USER CODE BEGIN 1 */

void initParqueo(EspacioParqueo* parqueo, uint8_t num, unsigned int x, unsigned int y){
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6178      	str	r0, [r7, #20]
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	460b      	mov	r3, r1
 80010c2:	74fb      	strb	r3, [r7, #19]
 80010c4:	f8c7 c004 	str.w	ip, [r7, #4]
	parqueo ->estado = 0; // 0 = libre, 1 = ocupado
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
	parqueo ->isEntering=0;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
	parqueo ->animacionEntrada=5;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <initParqueo.0+0x50>)
 80010d8:	609a      	str	r2, [r3, #8]
	parqueo ->isOut=0;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
	parqueo ->animacionSalida=5;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <initParqueo.0+0x50>)
 80010e4:	611a      	str	r2, [r3, #16]
	parqueo ->num=num;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	7cfa      	ldrb	r2, [r7, #19]
 80010ea:	751a      	strb	r2, [r3, #20]
	parqueo ->x=x;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	619a      	str	r2, [r3, #24]
	parqueo ->y=y;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	61da      	str	r2, [r3, #28]
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40a00000 	.word	0x40a00000

08001108 <main>:
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
int main(void)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 feac 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 fa16 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 fb0e 	bl	800173c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001120:	f000 faac 	bl	800167c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001124:	f000 fae0 	bl	80016e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001128:	f000 fa7a 	bl	8001620 <MX_I2C1_Init>

  //UART
  //HAL_UART_Receive_IT(&huart2, Rx, sizeof(Rx));

  //I2C
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 800112c:	482e      	ldr	r0, [pc, #184]	@ (80011e8 <main+0xe0>)
 800112e:	f001 fcec 	bl	8002b0a <HAL_I2C_EnableListen_IT>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <main+0x34>
	  Error_Handler();
 8001138:	f000 fcde 	bl	8001af8 <Error_Handler>
  }

  HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f000 ff09 	bl	8001f54 <HAL_Delay>

	LCD_Init();
 8001142:	f7ff fbe5 	bl	8000910 <LCD_Init>
	LCD_Clear(0x00);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fe6a 	bl	8000e20 <LCD_Clear>

	LCD_Bitmap(0, 0, 320, 240, fondo);
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <main+0xe4>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	23f0      	movs	r3, #240	@ 0xf0
 8001152:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fea5 	bl	8000ea8 <LCD_Bitmap>

	initParqueo(&p1, 0x01, 26, 191);
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	469c      	mov	ip, r3
 8001162:	23bf      	movs	r3, #191	@ 0xbf
 8001164:	221a      	movs	r2, #26
 8001166:	2101      	movs	r1, #1
 8001168:	4821      	ldr	r0, [pc, #132]	@ (80011f0 <main+0xe8>)
 800116a:	f7ff ffa3 	bl	80010b4 <initParqueo.0>
	initParqueo(&p2, 0x02, 26, 150);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	469c      	mov	ip, r3
 8001172:	2396      	movs	r3, #150	@ 0x96
 8001174:	221a      	movs	r2, #26
 8001176:	2102      	movs	r1, #2
 8001178:	481e      	ldr	r0, [pc, #120]	@ (80011f4 <main+0xec>)
 800117a:	f7ff ff9b 	bl	80010b4 <initParqueo.0>
	initParqueo(&p3, 0x04, 26, 108);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	469c      	mov	ip, r3
 8001182:	236c      	movs	r3, #108	@ 0x6c
 8001184:	221a      	movs	r2, #26
 8001186:	2104      	movs	r1, #4
 8001188:	481b      	ldr	r0, [pc, #108]	@ (80011f8 <main+0xf0>)
 800118a:	f7ff ff93 	bl	80010b4 <initParqueo.0>
	initParqueo(&p4, 0x08, 26, 68);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	469c      	mov	ip, r3
 8001192:	2344      	movs	r3, #68	@ 0x44
 8001194:	221a      	movs	r2, #26
 8001196:	2108      	movs	r1, #8
 8001198:	4818      	ldr	r0, [pc, #96]	@ (80011fc <main+0xf4>)
 800119a:	f7ff ff8b 	bl	80010b4 <initParqueo.0>

	initParqueo(&p5, 0x10, 253, 68);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	469c      	mov	ip, r3
 80011a2:	2344      	movs	r3, #68	@ 0x44
 80011a4:	22fd      	movs	r2, #253	@ 0xfd
 80011a6:	2110      	movs	r1, #16
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <main+0xf8>)
 80011aa:	f7ff ff83 	bl	80010b4 <initParqueo.0>
	initParqueo(&p6, 0x20, 253, 108);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	469c      	mov	ip, r3
 80011b2:	236c      	movs	r3, #108	@ 0x6c
 80011b4:	22fd      	movs	r2, #253	@ 0xfd
 80011b6:	2120      	movs	r1, #32
 80011b8:	4812      	ldr	r0, [pc, #72]	@ (8001204 <main+0xfc>)
 80011ba:	f7ff ff7b 	bl	80010b4 <initParqueo.0>
	initParqueo(&p7, 0x40, 253, 150);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	469c      	mov	ip, r3
 80011c2:	2396      	movs	r3, #150	@ 0x96
 80011c4:	22fd      	movs	r2, #253	@ 0xfd
 80011c6:	2140      	movs	r1, #64	@ 0x40
 80011c8:	480f      	ldr	r0, [pc, #60]	@ (8001208 <main+0x100>)
 80011ca:	f7ff ff73 	bl	80010b4 <initParqueo.0>
	initParqueo(&p8, 0x80, 253, 191);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	469c      	mov	ip, r3
 80011d2:	23bf      	movs	r3, #191	@ 0xbf
 80011d4:	22fd      	movs	r2, #253	@ 0xfd
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <main+0x104>)
 80011da:	f7ff ff6b 	bl	80010b4 <initParqueo.0>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		controlParqueo();
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	469c      	mov	ip, r3
 80011e2:	f000 f915 	bl	8001410 <controlParqueo.1>
 80011e6:	e7fa      	b.n	80011de <main+0xd6>
 80011e8:	200025a8 	.word	0x200025a8
 80011ec:	08006038 	.word	0x08006038
 80011f0:	200026a0 	.word	0x200026a0
 80011f4:	200026c0 	.word	0x200026c0
 80011f8:	200026e0 	.word	0x200026e0
 80011fc:	20002700 	.word	0x20002700
 8001200:	20002720 	.word	0x20002720
 8001204:	20002740 	.word	0x20002740
 8001208:	20002760 	.word	0x20002760
 800120c:	20002780 	.word	0x20002780

08001210 <FanimationOut.3>:
void FanimationOut(EspacioParqueo* parqueo){
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af06      	add	r7, sp, #24
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	f8c7 c000 	str.w	ip, [r7]
	int variableAnimationOut = parqueo ->  animacionSalida;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 3a90 	vmov	r3, s15
 800122a:	60fb      	str	r3, [r7, #12]
	if (variableAnimationOut<5){
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b04      	cmp	r3, #4
 8001230:	dc38      	bgt.n	80012a4 <FanimationOut.3+0x94>
		if (parqueo->num==0x10 || parqueo->num==0x20||parqueo->num==0x40 || parqueo->num==0x80){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d1b      	ldrb	r3, [r3, #20]
 8001236:	2b10      	cmp	r3, #16
 8001238:	d00b      	beq.n	8001252 <FanimationOut.3+0x42>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7d1b      	ldrb	r3, [r3, #20]
 800123e:	2b20      	cmp	r3, #32
 8001240:	d007      	beq.n	8001252 <FanimationOut.3+0x42>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7d1b      	ldrb	r3, [r3, #20]
 8001246:	2b40      	cmp	r3, #64	@ 0x40
 8001248:	d003      	beq.n	8001252 <FanimationOut.3+0x42>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7d1b      	ldrb	r3, [r3, #20]
 800124e:	2b80      	cmp	r3, #128	@ 0x80
 8001250:	d114      	bne.n	800127c <FanimationOut.3+0x6c>
			LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, variableAnimationOut, 1, 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4618      	mov	r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4619      	mov	r1, r3
 800125e:	2300      	movs	r3, #0
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	2301      	movs	r3, #1
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2305      	movs	r3, #5
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <FanimationOut.3+0xd0>)
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2318      	movs	r3, #24
 8001274:	2228      	movs	r2, #40	@ 0x28
 8001276:	f7ff fe71 	bl	8000f5c <LCD_Sprite>
 800127a:	e013      	b.n	80012a4 <FanimationOut.3+0x94>
			LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, variableAnimationOut, 0, 0);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4618      	mov	r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4619      	mov	r1, r3
 8001288:	2300      	movs	r3, #0
 800128a:	9304      	str	r3, [sp, #16]
 800128c:	2300      	movs	r3, #0
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	2305      	movs	r3, #5
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <FanimationOut.3+0xd0>)
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2318      	movs	r3, #24
 800129e:	2228      	movs	r2, #40	@ 0x28
 80012a0:	f7ff fe5c 	bl	8000f5c <LCD_Sprite>
	parqueo -> animacionSalida+=0.8;//0.2
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f911 	bl	80004d0 <__aeabi_f2d>
 80012ae:	a30a      	add	r3, pc, #40	@ (adr r3, 80012d8 <FanimationOut.3+0xc8>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7fe ffae 	bl	8000214 <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff f95e 	bl	8000580 <__aeabi_d2f>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	611a      	str	r2, [r3, #16]
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	9999999a 	.word	0x9999999a
 80012dc:	3fe99999 	.word	0x3fe99999
 80012e0:	20000000 	.word	0x20000000
 80012e4:	00000000 	.word	0x00000000

080012e8 <FanimationEnter.4>:
void FanimationEnter(EspacioParqueo* parqueo){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af06      	add	r7, sp, #24
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	f8c7 c000 	str.w	ip, [r7]
	int variableAnimationEnter = parqueo ->  animacionEntrada;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 3a90 	vmov	r3, s15
 8001302:	60fb      	str	r3, [r7, #12]
	if (variableAnimationEnter<5){
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b04      	cmp	r3, #4
 8001308:	dc3c      	bgt.n	8001384 <FanimationEnter.4+0x9c>
		int frame=4-variableAnimationEnter;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1c3 0304 	rsb	r3, r3, #4
 8001310:	60bb      	str	r3, [r7, #8]
		if (parqueo->num==0x10 || parqueo->num==0x20||parqueo->num==0x40 || parqueo->num==0x80){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7d1b      	ldrb	r3, [r3, #20]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d00b      	beq.n	8001332 <FanimationEnter.4+0x4a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7d1b      	ldrb	r3, [r3, #20]
 800131e:	2b20      	cmp	r3, #32
 8001320:	d007      	beq.n	8001332 <FanimationEnter.4+0x4a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7d1b      	ldrb	r3, [r3, #20]
 8001326:	2b40      	cmp	r3, #64	@ 0x40
 8001328:	d003      	beq.n	8001332 <FanimationEnter.4+0x4a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7d1b      	ldrb	r3, [r3, #20]
 800132e:	2b80      	cmp	r3, #128	@ 0x80
 8001330:	d114      	bne.n	800135c <FanimationEnter.4+0x74>
		LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, frame, 1, 0);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4618      	mov	r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4619      	mov	r1, r3
 800133e:	2300      	movs	r3, #0
 8001340:	9304      	str	r3, [sp, #16]
 8001342:	2301      	movs	r3, #1
 8001344:	9303      	str	r3, [sp, #12]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2305      	movs	r3, #5
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <FanimationEnter.4+0xd8>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2318      	movs	r3, #24
 8001354:	2228      	movs	r2, #40	@ 0x28
 8001356:	f7ff fe01 	bl	8000f5c <LCD_Sprite>
 800135a:	e013      	b.n	8001384 <FanimationEnter.4+0x9c>
			LCD_Sprite(parqueo ->x, parqueo->y, 40, 24, RedCar_40x24, 5, frame, 0, 0);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4618      	mov	r0, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4619      	mov	r1, r3
 8001368:	2300      	movs	r3, #0
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	2300      	movs	r3, #0
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2305      	movs	r3, #5
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <FanimationEnter.4+0xd8>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2318      	movs	r3, #24
 800137e:	2228      	movs	r2, #40	@ 0x28
 8001380:	f7ff fdec 	bl	8000f5c <LCD_Sprite>
	parqueo -> animacionEntrada+=0.8;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8a1 	bl	80004d0 <__aeabi_f2d>
 800138e:	a30a      	add	r3, pc, #40	@ (adr r3, 80013b8 <FanimationEnter.4+0xd0>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7fe ff3e 	bl	8000214 <__adddf3>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff f8ee 	bl	8000580 <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	609a      	str	r2, [r3, #8]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	3fe99999 	.word	0x3fe99999
 80013c0:	20000000 	.word	0x20000000

080013c4 <actualizarEstadoParqueos.2>:
void actualizarEstadoParqueos(EspacioParqueo* parqueo, uint8_t byteControl, int num) {
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	460b      	mov	r3, r1
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	72fb      	strb	r3, [r7, #11]
 80013d2:	f8c7 c000 	str.w	ip, [r7]
	if (byteControl & (1 << num)) {
 80013d6:	7afa      	ldrb	r2, [r7, #11]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	fa42 f303 	asr.w	r3, r2, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <actualizarEstadoParqueos.2+0x32>
	            parqueo ->estado = 1;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
	            parqueo ->animacionEntrada=0;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	e006      	b.n	8001404 <actualizarEstadoParqueos.2+0x40>
	            parqueo -> estado = 0;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
	            parqueo ->animacionSalida=0;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <controlParqueo.1>:
void controlParqueo(void){
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4664      	mov	r4, ip
 8001418:	f8c7 c004 	str.w	ip, [r7, #4]
	actualizarEstadoParqueos(&p1,byteControl, 0);
 800141c:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <controlParqueo.1+0x114>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	46a4      	mov	ip, r4
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4840      	ldr	r0, [pc, #256]	@ (8001528 <controlParqueo.1+0x118>)
 8001428:	f7ff ffcc 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p1);
 800142c:	46a4      	mov	ip, r4
 800142e:	483e      	ldr	r0, [pc, #248]	@ (8001528 <controlParqueo.1+0x118>)
 8001430:	f7ff feee 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p1);
 8001434:	46a4      	mov	ip, r4
 8001436:	483c      	ldr	r0, [pc, #240]	@ (8001528 <controlParqueo.1+0x118>)
 8001438:	f7ff ff56 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p2,byteControl, 1);
 800143c:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <controlParqueo.1+0x114>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	46a4      	mov	ip, r4
 8001442:	2201      	movs	r2, #1
 8001444:	4619      	mov	r1, r3
 8001446:	4839      	ldr	r0, [pc, #228]	@ (800152c <controlParqueo.1+0x11c>)
 8001448:	f7ff ffbc 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p2);
 800144c:	46a4      	mov	ip, r4
 800144e:	4837      	ldr	r0, [pc, #220]	@ (800152c <controlParqueo.1+0x11c>)
 8001450:	f7ff fede 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p2);
 8001454:	46a4      	mov	ip, r4
 8001456:	4835      	ldr	r0, [pc, #212]	@ (800152c <controlParqueo.1+0x11c>)
 8001458:	f7ff ff46 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p3,byteControl, 2);
 800145c:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <controlParqueo.1+0x114>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	46a4      	mov	ip, r4
 8001462:	2202      	movs	r2, #2
 8001464:	4619      	mov	r1, r3
 8001466:	4832      	ldr	r0, [pc, #200]	@ (8001530 <controlParqueo.1+0x120>)
 8001468:	f7ff ffac 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p3);
 800146c:	46a4      	mov	ip, r4
 800146e:	4830      	ldr	r0, [pc, #192]	@ (8001530 <controlParqueo.1+0x120>)
 8001470:	f7ff fece 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p3);
 8001474:	46a4      	mov	ip, r4
 8001476:	482e      	ldr	r0, [pc, #184]	@ (8001530 <controlParqueo.1+0x120>)
 8001478:	f7ff ff36 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p4,byteControl, 3);
 800147c:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <controlParqueo.1+0x114>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	46a4      	mov	ip, r4
 8001482:	2203      	movs	r2, #3
 8001484:	4619      	mov	r1, r3
 8001486:	482b      	ldr	r0, [pc, #172]	@ (8001534 <controlParqueo.1+0x124>)
 8001488:	f7ff ff9c 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p4);
 800148c:	46a4      	mov	ip, r4
 800148e:	4829      	ldr	r0, [pc, #164]	@ (8001534 <controlParqueo.1+0x124>)
 8001490:	f7ff febe 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p4);
 8001494:	46a4      	mov	ip, r4
 8001496:	4827      	ldr	r0, [pc, #156]	@ (8001534 <controlParqueo.1+0x124>)
 8001498:	f7ff ff26 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p5,byteControl, 4);
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <controlParqueo.1+0x114>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	46a4      	mov	ip, r4
 80014a2:	2204      	movs	r2, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4824      	ldr	r0, [pc, #144]	@ (8001538 <controlParqueo.1+0x128>)
 80014a8:	f7ff ff8c 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p5);
 80014ac:	46a4      	mov	ip, r4
 80014ae:	4822      	ldr	r0, [pc, #136]	@ (8001538 <controlParqueo.1+0x128>)
 80014b0:	f7ff feae 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p5);
 80014b4:	46a4      	mov	ip, r4
 80014b6:	4820      	ldr	r0, [pc, #128]	@ (8001538 <controlParqueo.1+0x128>)
 80014b8:	f7ff ff16 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p6,byteControl, 5);
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <controlParqueo.1+0x114>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	46a4      	mov	ip, r4
 80014c2:	2205      	movs	r2, #5
 80014c4:	4619      	mov	r1, r3
 80014c6:	481d      	ldr	r0, [pc, #116]	@ (800153c <controlParqueo.1+0x12c>)
 80014c8:	f7ff ff7c 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p6);
 80014cc:	46a4      	mov	ip, r4
 80014ce:	481b      	ldr	r0, [pc, #108]	@ (800153c <controlParqueo.1+0x12c>)
 80014d0:	f7ff fe9e 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p6);
 80014d4:	46a4      	mov	ip, r4
 80014d6:	4819      	ldr	r0, [pc, #100]	@ (800153c <controlParqueo.1+0x12c>)
 80014d8:	f7ff ff06 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p7,byteControl, 6);
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <controlParqueo.1+0x114>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	46a4      	mov	ip, r4
 80014e2:	2206      	movs	r2, #6
 80014e4:	4619      	mov	r1, r3
 80014e6:	4816      	ldr	r0, [pc, #88]	@ (8001540 <controlParqueo.1+0x130>)
 80014e8:	f7ff ff6c 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p7);
 80014ec:	46a4      	mov	ip, r4
 80014ee:	4814      	ldr	r0, [pc, #80]	@ (8001540 <controlParqueo.1+0x130>)
 80014f0:	f7ff fe8e 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p7);
 80014f4:	46a4      	mov	ip, r4
 80014f6:	4812      	ldr	r0, [pc, #72]	@ (8001540 <controlParqueo.1+0x130>)
 80014f8:	f7ff fef6 	bl	80012e8 <FanimationEnter.4>
	actualizarEstadoParqueos(&p8,byteControl, 7);
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <controlParqueo.1+0x114>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	46a4      	mov	ip, r4
 8001502:	2207      	movs	r2, #7
 8001504:	4619      	mov	r1, r3
 8001506:	480f      	ldr	r0, [pc, #60]	@ (8001544 <controlParqueo.1+0x134>)
 8001508:	f7ff ff5c 	bl	80013c4 <actualizarEstadoParqueos.2>
	FanimationOut(&p8);
 800150c:	46a4      	mov	ip, r4
 800150e:	480d      	ldr	r0, [pc, #52]	@ (8001544 <controlParqueo.1+0x134>)
 8001510:	f7ff fe7e 	bl	8001210 <FanimationOut.3>
	FanimationEnter(&p8);
 8001514:	46a4      	mov	ip, r4
 8001516:	480b      	ldr	r0, [pc, #44]	@ (8001544 <controlParqueo.1+0x134>)
 8001518:	f7ff fee6 	bl	80012e8 <FanimationEnter.4>
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	2000269c 	.word	0x2000269c
 8001528:	200026a0 	.word	0x200026a0
 800152c:	200026c0 	.word	0x200026c0
 8001530:	200026e0 	.word	0x200026e0
 8001534:	20002700 	.word	0x20002700
 8001538:	20002720 	.word	0x20002720
 800153c:	20002740 	.word	0x20002740
 8001540:	20002760 	.word	0x20002760
 8001544:	20002780 	.word	0x20002780

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	@ 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2234      	movs	r2, #52	@ 0x34
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 fd36 	bl	8005fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <SystemClock_Config+0xd0>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <SystemClock_Config+0xd0>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
 800157c:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <SystemClock_Config+0xd0>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <SystemClock_Config+0xd4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001594:	4a21      	ldr	r2, [pc, #132]	@ (800161c <SystemClock_Config+0xd4>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <SystemClock_Config+0xd4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b0:	2310      	movs	r3, #16
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015bc:	2308      	movs	r3, #8
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80015c0:	2350      	movs	r3, #80	@ 0x50
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fa31 	bl	8004a3c <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015e0:	f000 fa8a 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2102      	movs	r1, #2
 8001600:	4618      	mov	r0, r3
 8001602:	f002 ff57 	bl	80044b4 <HAL_RCC_ClockConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800160c:	f000 fa74 	bl	8001af8 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3750      	adds	r7, #80	@ 0x50
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f001 f815 	bl	800268c <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fa46 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200025a8 	.word	0x200025a8
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <MX_SPI1_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <MX_SPI1_Init+0x64>)
 80016ce:	f003 fc53 	bl	8004f78 <HAL_SPI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d8:	f000 fa0e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200025fc 	.word	0x200025fc
 80016e4:	40013000 	.word	0x40013000

080016e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <MX_USART2_UART_Init+0x50>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_USART2_UART_Init+0x4c>)
 8001720:	f003 fcb3 	bl	800508a <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172a:	f000 f9e5 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20002654 	.word	0x20002654
 8001738:	40004400 	.word	0x40004400

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a45      	ldr	r2, [pc, #276]	@ (8001870 <MX_GPIO_Init+0x134>)
 800175c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a3e      	ldr	r2, [pc, #248]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b3c      	ldr	r3, [pc, #240]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a37      	ldr	r2, [pc, #220]	@ (8001870 <MX_GPIO_Init+0x134>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <MX_GPIO_Init+0x134>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <MX_GPIO_Init+0x134>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a30      	ldr	r2, [pc, #192]	@ (8001870 <MX_GPIO_Init+0x134>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <MX_GPIO_Init+0x134>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2182      	movs	r1, #130	@ 0x82
 80017c6:	482b      	ldr	r0, [pc, #172]	@ (8001874 <MX_GPIO_Init+0x138>)
 80017c8:	f000 ff2e 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80017cc:	2200      	movs	r2, #0
 80017ce:	f240 7113 	movw	r1, #1811	@ 0x713
 80017d2:	4829      	ldr	r0, [pc, #164]	@ (8001878 <MX_GPIO_Init+0x13c>)
 80017d4:	f000 ff28 	bl	8002628 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80017d8:	2200      	movs	r2, #0
 80017da:	f240 4179 	movw	r1, #1145	@ 0x479
 80017de:	4827      	ldr	r0, [pc, #156]	@ (800187c <MX_GPIO_Init+0x140>)
 80017e0:	f000 ff22 	bl	8002628 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 80017e4:	2382      	movs	r3, #130	@ 0x82
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f0:	2302      	movs	r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	481e      	ldr	r0, [pc, #120]	@ (8001874 <MX_GPIO_Init+0x138>)
 80017fc:	f000 fd80 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001800:	f240 7313 	movw	r3, #1811	@ 0x713
 8001804:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4817      	ldr	r0, [pc, #92]	@ (8001878 <MX_GPIO_Init+0x13c>)
 800181a:	f000 fd71 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800181e:	f240 4379 	movw	r3, #1145	@ 0x479
 8001822:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4811      	ldr	r0, [pc, #68]	@ (800187c <MX_GPIO_Init+0x140>)
 8001838:	f000 fd62 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 800183c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001842:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	480a      	ldr	r0, [pc, #40]	@ (800187c <MX_GPIO_Init+0x140>)
 8001854:	f000 fd54 	bl	8002300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2028      	movs	r0, #40	@ 0x28
 800185e:	f000 fc78 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001862:	2028      	movs	r0, #40	@ 0x28
 8001864:	f000 fc91 	bl	800218a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40020800 	.word	0x40020800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400

08001880 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
    counterOutside++; // Para pruebas
 800188a:	4b4f      	ldr	r3, [pc, #316]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x148>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a4d      	ldr	r2, [pc, #308]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x148>)
 8001892:	6013      	str	r3, [r2, #0]
    currentMillis = HAL_GetTick();
 8001894:	f000 fb52 	bl	8001f3c <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
 800189a:	4a4c      	ldr	r2, [pc, #304]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 800189c:	6013      	str	r3, [r2, #0]

    // Verificar qué botón fue presionado y aplicar el antirrebote
    if (GPIO_Pin == GPIO_PIN_12 && (currentMillis - previousMillis[0] > 150))
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a4:	d11f      	bne.n	80018e6 <HAL_GPIO_EXTI_Callback+0x66>
 80018a6:	4b49      	ldr	r3, [pc, #292]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b49      	ldr	r3, [pc, #292]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b96      	cmp	r3, #150	@ 0x96
 80018b2:	d918      	bls.n	80018e6 <HAL_GPIO_EXTI_Callback+0x66>
    {
        counterInside[0]++; // Para pruebas del botón 1
 80018b4:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a46      	ldr	r2, [pc, #280]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 80018bc:	6013      	str	r3, [r2, #0]
        previousMillis[0] = currentMillis;
 80018be:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a43      	ldr	r2, [pc, #268]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 80018c4:	6013      	str	r3, [r2, #0]
        byteControl^= 0b00000001;
 80018c6:	4b44      	ldr	r3, [pc, #272]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80018d2:	701a      	strb	r2, [r3, #0]
        Tx[0]=byteControl;
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b40      	ldr	r3, [pc, #256]	@ (80019dc <HAL_GPIO_EXTI_Callback+0x15c>)
 80018da:	701a      	strb	r2, [r3, #0]
        Rx[0]=byteControl;
 80018dc:	4b3e      	ldr	r3, [pc, #248]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b3f      	ldr	r3, [pc, #252]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x160>)
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	e06b      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x13e>
        //HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));
    }
    else if (GPIO_Pin == GPIO_PIN_13 && (currentMillis - previousMillis[1] > 150))
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ec:	d11f      	bne.n	800192e <HAL_GPIO_EXTI_Callback+0xae>
 80018ee:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b96      	cmp	r3, #150	@ 0x96
 80018fa:	d918      	bls.n	800192e <HAL_GPIO_EXTI_Callback+0xae>
    {
        counterInside[1]++; // Para pruebas del botón 2
 80018fc:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	3301      	adds	r3, #1
 8001902:	4a34      	ldr	r2, [pc, #208]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001904:	6053      	str	r3, [r2, #4]
        previousMillis[1] = currentMillis;
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 800190c:	6053      	str	r3, [r2, #4]
        byteControl^= 0b00000010;
 800190e:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f083 0302 	eor.w	r3, r3, #2
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b2f      	ldr	r3, [pc, #188]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 800191a:	701a      	strb	r2, [r3, #0]
        Tx[0]=byteControl;
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b2e      	ldr	r3, [pc, #184]	@ (80019dc <HAL_GPIO_EXTI_Callback+0x15c>)
 8001922:	701a      	strb	r2, [r3, #0]
        Rx[0]=byteControl;
 8001924:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x160>)
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e047      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x13e>
        //HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));

    }
    else if (GPIO_Pin == GPIO_PIN_14 && (currentMillis - previousMillis[2] > 150))
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001934:	d11f      	bne.n	8001976 <HAL_GPIO_EXTI_Callback+0xf6>
 8001936:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b96      	cmp	r3, #150	@ 0x96
 8001942:	d918      	bls.n	8001976 <HAL_GPIO_EXTI_Callback+0xf6>
    {
        counterInside[2]++; // Para pruebas del botón 3
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	4a22      	ldr	r2, [pc, #136]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 800194c:	6093      	str	r3, [r2, #8]
        previousMillis[2] = currentMillis;
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001954:	6093      	str	r3, [r2, #8]
        byteControl^= 0b00000100;
 8001956:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f083 0304 	eor.w	r3, r3, #4
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001962:	701a      	strb	r2, [r3, #0]
        Tx[0]=byteControl;
 8001964:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <HAL_GPIO_EXTI_Callback+0x15c>)
 800196a:	701a      	strb	r2, [r3, #0]
        Rx[0]=byteControl;
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x160>)
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e023      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x13e>
        //HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));
    }
    else if (GPIO_Pin == GPIO_PIN_15 && (currentMillis - previousMillis[3] > 150))
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800197c:	d11f      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x13e>
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b96      	cmp	r3, #150	@ 0x96
 800198a:	d918      	bls.n	80019be <HAL_GPIO_EXTI_Callback+0x13e>
    {
        counterInside[3]++; // Para pruebas del botón 4
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	3301      	adds	r3, #1
 8001992:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001994:	60d3      	str	r3, [r2, #12]

        previousMillis[3] = currentMillis;
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x150>)
 800199c:	60d3      	str	r3, [r2, #12]
        byteControl^= 0b00001000;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	f083 0308 	eor.w	r3, r3, #8
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80019aa:	701a      	strb	r2, [r3, #0]
		Tx[0]=byteControl;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_GPIO_EXTI_Callback+0x15c>)
 80019b2:	701a      	strb	r2, [r3, #0]
		Rx[0]=byteControl;
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x158>)
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x160>)
 80019ba:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));
    }
}
 80019bc:	e7ff      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x13e>
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200027bc 	.word	0x200027bc
 80019cc:	200027b8 	.word	0x200027b8
 80019d0:	200027a8 	.word	0x200027a8
 80019d4:	200027c0 	.word	0x200027c0
 80019d8:	2000269c 	.word	0x2000269c
 80019dc:	200027a4 	.word	0x200027a4
 80019e0:	200027a0 	.word	0x200027a0

080019e4 <HAL_UART_RxCpltCallback>:

//UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	byteControl=Rx[0];
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_UART_RxCpltCallback+0x24>)
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_UART_RxCpltCallback+0x28>)
 80019f2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, Tx, sizeof(Tx));
 80019f4:	2201      	movs	r2, #1
 80019f6:	4906      	ldr	r1, [pc, #24]	@ (8001a10 <HAL_UART_RxCpltCallback+0x2c>)
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f003 fb96 	bl	800512a <HAL_UART_Transmit_IT>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200027a0 	.word	0x200027a0
 8001a0c:	2000269c 	.word	0x2000269c
 8001a10:	200027a4 	.word	0x200027a4

08001a14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, Rx, sizeof(Rx));
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4904      	ldr	r1, [pc, #16]	@ (8001a30 <HAL_UART_TxCpltCallback+0x1c>)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f003 fbb8 	bl	8005196 <HAL_UART_Receive_IT>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200027a0 	.word	0x200027a0

08001a34 <HAL_I2C_ListenCpltCallback>:


//I2C
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	//Pone el disposivo a escuchar
	HAL_I2C_EnableListen_IT(hi2c);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f001 f864 	bl	8002b0a <HAL_I2C_EnableListen_IT>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	803b      	strh	r3, [r7, #0]
	//Cuando recibe algo verifica la dirección
	if (TransferDirection== I2C_DIRECTION_TRANSMIT){
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d106      	bne.n	8001a70 <HAL_I2C_AddrCallback+0x24>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, I2C_Rx, sizeof(I2C_Rx), I2C_FIRST_AND_LAST_FRAME);
 8001a62:	2308      	movs	r3, #8
 8001a64:	2201      	movs	r2, #1
 8001a66:	4909      	ldr	r1, [pc, #36]	@ (8001a8c <HAL_I2C_AddrCallback+0x40>)
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 ffdb 	bl	8002a24 <HAL_I2C_Slave_Seq_Receive_IT>
	} else{
		Tx[0]=byteControl;
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, Tx, sizeof(Tx), I2C_FIRST_AND_LAST_FRAME);
	}
}
 8001a6e:	e009      	b.n	8001a84 <HAL_I2C_AddrCallback+0x38>
		Tx[0]=byteControl;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <HAL_I2C_AddrCallback+0x44>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <HAL_I2C_AddrCallback+0x48>)
 8001a76:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, Tx, sizeof(Tx), I2C_FIRST_AND_LAST_FRAME);
 8001a78:	2308      	movs	r3, #8
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4905      	ldr	r1, [pc, #20]	@ (8001a94 <HAL_I2C_AddrCallback+0x48>)
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 ff5d 	bl	800293e <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200027d0 	.word	0x200027d0
 8001a90:	2000269c 	.word	0x2000269c
 8001a94:	200027a4 	.word	0x200027a4

08001a98 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	//Al terminar la recepción de datos envía el byteControl (Parqueos) y vuelve a escuchar
	byteControl=I2C_Rx[0];
 8001aa0:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8001aa6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, I2C_Rx, sizeof(Tx));
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4905      	ldr	r1, [pc, #20]	@ (8001ac0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8001aac:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8001aae:	f003 fb3c 	bl	800512a <HAL_UART_Transmit_IT>
	HAL_I2C_EnableListen_IT(hi2c);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f001 f829 	bl	8002b0a <HAL_I2C_EnableListen_IT>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200027d0 	.word	0x200027d0
 8001ac4:	2000269c 	.word	0x2000269c
 8001ac8:	20002654 	.word	0x20002654

08001acc <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	//Al terminar el envío de datos se pone a escuchar
	HAL_I2C_EnableListen_IT(hi2c);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f001 f818 	bl	8002b0a <HAL_I2C_EnableListen_IT>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	//Si hay errores, se pone a escuchar
}
	HAL_I2C_EnableListen_IT(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f001 f80d 	bl	8002b0a <HAL_I2C_EnableListen_IT>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_I2C_MspInit+0xa4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d13c      	bne.n	8001bf0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b92:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b98:	2312      	movs	r3, #18
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4814      	ldr	r0, [pc, #80]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001bb0:	f000 fba6 	bl	8002300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001bbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	201f      	movs	r0, #31
 8001bd6:	f000 fabc 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bda:	201f      	movs	r0, #31
 8001bdc:	f000 fad5 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2020      	movs	r0, #32
 8001be6:	f000 fab4 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001bea:	2020      	movs	r0, #32
 8001bec:	f000 facd 	bl	800218a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_SPI_MspInit+0x84>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12b      	bne.n	8001c7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_SPI_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c5e:	23e0      	movs	r3, #224	@ 0xe0
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <HAL_SPI_MspInit+0x8c>)
 8001c7a:	f000 fb41 	bl	8002300 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	@ 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40013000 	.word	0x40013000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <HAL_UART_MspInit+0x94>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d133      	bne.n	8001d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_UART_MspInit+0x98>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_UART_MspInit+0x98>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc6:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_UART_MspInit+0x98>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_UART_MspInit+0x98>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <HAL_UART_MspInit+0x98>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_UART_MspInit+0x98>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	@ (8001d30 <HAL_UART_MspInit+0x9c>)
 8001d0a:	f000 faf9 	bl	8002300 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2026      	movs	r0, #38	@ 0x26
 8001d14:	f000 fa1d 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d18:	2026      	movs	r0, #38	@ 0x26
 8001d1a:	f000 fa36 	bl	800218a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	@ 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <NMI_Handler+0x4>

08001d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8a:	f000 f8c3 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <I2C1_EV_IRQHandler+0x10>)
 8001d9a:	f000 feec 	bl	8002b76 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200025a8 	.word	0x200025a8

08001da8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <I2C1_ER_IRQHandler+0x10>)
 8001dae:	f001 f835 	bl	8002e1c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200025a8 	.word	0x200025a8

08001dbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <USART2_IRQHandler+0x10>)
 8001dc2:	f003 fa0d 	bl	80051e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20002654 	.word	0x20002654

08001dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001dd4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001dd8:	f000 fc40 	bl	800265c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001ddc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001de0:	f000 fc3c 	bl	800265c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001de4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001de8:	f000 fc38 	bl	800265c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001dec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001df0:	f000 fc34 	bl	800265c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e54 <LoopFillZerobss+0xe>
 8001e20:	f7ff ffea 	bl	8001df8 <SystemInit>
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <LoopFillZerobss+0x12>)
 8001e26:	490d      	ldr	r1, [pc, #52]	@ (8001e5c <LoopFillZerobss+0x16>)
 8001e28:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <LoopFillZerobss+0x1a>)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:
 8001e2e:	58d4      	ldr	r4, [r2, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:
 8001e34:	18c4      	adds	r4, r0, r3
 8001e36:	428c      	cmp	r4, r1
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <LoopFillZerobss+0x1e>)
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e68 <LoopFillZerobss+0x22>)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:
 8001e46:	42a2      	cmp	r2, r4
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>
 8001e4a:	f004 f8c5 	bl	8005fd8 <__libc_init_array>
 8001e4e:	f7ff f95b 	bl	8001108 <main>
 8001e52:	4770      	bx	lr
 8001e54:	20020000 	.word	0x20020000
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	2000258c 	.word	0x2000258c
 8001e60:	0802b860 	.word	0x0802b860
 8001e64:	2000258c 	.word	0x2000258c
 8001e68:	200027d8 	.word	0x200027d8

08001e6c <ADC_IRQHandler>:
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f94f 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fe2e 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f967 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f92f 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20002580 	.word	0x20002580
 8001f0c:	20002588 	.word	0x20002588
 8001f10:	20002584 	.word	0x20002584

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20002588 	.word	0x20002588
 8001f38:	200027d4 	.word	0x200027d4

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	200027d4 	.word	0x200027d4

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20002588 	.word	0x20002588

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff feb6 	bl	8001f3c <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e052      	b.n	8002296 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0216 	bic.w	r2, r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_DMA_Abort+0x62>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0208 	bic.w	r2, r2, #8
 800222e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002240:	e013      	b.n	800226a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002242:	f7ff fe7b 	bl	8001f3c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b05      	cmp	r3, #5
 800224e:	d90c      	bls.n	800226a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e015      	b.n	8002296 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e4      	bne.n	8002242 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	223f      	movs	r2, #63	@ 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e00c      	b.n	80022d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f0:	b2db      	uxtb	r3, r3
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e165      	b.n	80025e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8154 	bne.w	80025e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80ae 	beq.w	80025e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b5d      	ldr	r3, [pc, #372]	@ (8002600 <HAL_GPIO_Init+0x300>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	4a5c      	ldr	r2, [pc, #368]	@ (8002600 <HAL_GPIO_Init+0x300>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002494:	6453      	str	r3, [r2, #68]	@ 0x44
 8002496:	4b5a      	ldr	r3, [pc, #360]	@ (8002600 <HAL_GPIO_Init+0x300>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_GPIO_Init+0x304>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002608 <HAL_GPIO_Init+0x308>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d025      	beq.n	800251a <HAL_GPIO_Init+0x21a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	@ (800260c <HAL_GPIO_Init+0x30c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x216>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002610 <HAL_GPIO_Init+0x310>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x212>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002614 <HAL_GPIO_Init+0x314>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002618 <HAL_GPIO_Init+0x318>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x20a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4a      	ldr	r2, [pc, #296]	@ (800261c <HAL_GPIO_Init+0x31c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x206>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a49      	ldr	r2, [pc, #292]	@ (8002620 <HAL_GPIO_Init+0x320>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x202>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00c      	b.n	800251c <HAL_GPIO_Init+0x21c>
 8002502:	2307      	movs	r3, #7
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x21c>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x21c>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x21c>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x21c>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x21c>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x21c>
 800251a:	2300      	movs	r3, #0
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252c:	4935      	ldr	r1, [pc, #212]	@ (8002604 <HAL_GPIO_Init+0x304>)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <HAL_GPIO_Init+0x324>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a31      	ldr	r2, [pc, #196]	@ (8002624 <HAL_GPIO_Init+0x324>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b2f      	ldr	r3, [pc, #188]	@ (8002624 <HAL_GPIO_Init+0x324>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a26      	ldr	r2, [pc, #152]	@ (8002624 <HAL_GPIO_Init+0x324>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258e:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <HAL_GPIO_Init+0x324>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002624 <HAL_GPIO_Init+0x324>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <HAL_GPIO_Init+0x324>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025dc:	4a11      	ldr	r2, [pc, #68]	@ (8002624 <HAL_GPIO_Init+0x324>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	f67f ae96 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3724      	adds	r7, #36	@ 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40013800 	.word	0x40013800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400
 8002610:	40020800 	.word	0x40020800
 8002614:	40020c00 	.word	0x40020c00
 8002618:	40021000 	.word	0x40021000
 800261c:	40021400 	.word	0x40021400
 8002620:	40021800 	.word	0x40021800
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002672:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f900 	bl	8001880 <HAL_GPIO_EXTI_Callback>
  }
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e12b      	b.n	80028f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff fa4e 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f0:	f001 ffd2 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80026f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4a81      	ldr	r2, [pc, #516]	@ (8002900 <HAL_I2C_Init+0x274>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d807      	bhi.n	8002710 <HAL_I2C_Init+0x84>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a80      	ldr	r2, [pc, #512]	@ (8002904 <HAL_I2C_Init+0x278>)
 8002704:	4293      	cmp	r3, r2
 8002706:	bf94      	ite	ls
 8002708:	2301      	movls	r3, #1
 800270a:	2300      	movhi	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e006      	b.n	800271e <HAL_I2C_Init+0x92>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a7d      	ldr	r2, [pc, #500]	@ (8002908 <HAL_I2C_Init+0x27c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0e7      	b.n	80028f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a78      	ldr	r2, [pc, #480]	@ (800290c <HAL_I2C_Init+0x280>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9b      	lsrs	r3, r3, #18
 8002730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a6a      	ldr	r2, [pc, #424]	@ (8002900 <HAL_I2C_Init+0x274>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d802      	bhi.n	8002760 <HAL_I2C_Init+0xd4>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	e009      	b.n	8002774 <HAL_I2C_Init+0xe8>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a69      	ldr	r2, [pc, #420]	@ (8002910 <HAL_I2C_Init+0x284>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	3301      	adds	r3, #1
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	495c      	ldr	r1, [pc, #368]	@ (8002900 <HAL_I2C_Init+0x274>)
 8002790:	428b      	cmp	r3, r1
 8002792:	d819      	bhi.n	80027c8 <HAL_I2C_Init+0x13c>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e59      	subs	r1, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a2:	1c59      	adds	r1, r3, #1
 80027a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027a8:	400b      	ands	r3, r1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_I2C_Init+0x138>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e59      	subs	r1, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c2:	e051      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e04f      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d111      	bne.n	80027f4 <HAL_I2C_Init+0x168>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1e58      	subs	r0, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	440b      	add	r3, r1
 80027de:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e012      	b.n	800281a <HAL_I2C_Init+0x18e>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	0099      	lsls	r1, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Init+0x196>
 800281e:	2301      	movs	r3, #1
 8002820:	e022      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10e      	bne.n	8002848 <HAL_I2C_Init+0x1bc>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e58      	subs	r0, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	fbb0 f3f3 	udiv	r3, r0, r3
 800283c:	3301      	adds	r3, #1
 800283e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002846:	e00f      	b.n	8002868 <HAL_I2C_Init+0x1dc>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	0099      	lsls	r1, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	6809      	ldr	r1, [r1, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6911      	ldr	r1, [r2, #16]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68d2      	ldr	r2, [r2, #12]
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	000186a0 	.word	0x000186a0
 8002904:	001e847f 	.word	0x001e847f
 8002908:	003d08ff 	.word	0x003d08ff
 800290c:	431bde83 	.word	0x431bde83
 8002910:	10624dd3 	.word	0x10624dd3

08002914 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b80      	cmp	r3, #128	@ 0x80
 8002928:	d103      	bne.n	8002932 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800293e:	b480      	push	{r7}
 8002940:	b087      	sub	sp, #28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800295a:	2b28      	cmp	r3, #40	@ 0x28
 800295c:	d15b      	bne.n	8002a16 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e054      	b.n	8002a18 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002978:	2302      	movs	r3, #2
 800297a:	e04d      	b.n	8002a18 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d007      	beq.n	80029a2 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2229      	movs	r2, #41	@ 0x29
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002a10:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a40:	2b28      	cmp	r3, #40	@ 0x28
 8002a42:	d15b      	bne.n	8002afc <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e054      	b.n	8002afe <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e04d      	b.n	8002afe <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d007      	beq.n	8002a88 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	222a      	movs	r2, #42	@ 0x2a
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002af6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d124      	bne.n	8002b68 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2228      	movs	r2, #40	@ 0x28
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b52:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002b62:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b088      	sub	sp, #32
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d003      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x38>
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	f040 80b1 	bne.w	8002d10 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10d      	bne.n	8002be4 <HAL_I2C_EV_IRQHandler+0x6e>
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002bce:	d003      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x62>
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2C_EV_IRQHandler+0x66>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_I2C_EV_IRQHandler+0x68>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f000 8114 	beq.w	8002e0c <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x90>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f001 fc3f 	bl	800447c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fd44 	bl	800368c <I2C_Master_SB>
 8002c04:	e083      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_I2C_EV_IRQHandler+0xac>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fdbc 	bl	8003798 <I2C_Master_ADD10>
 8002c20:	e075      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_I2C_EV_IRQHandler+0xc8>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fdd8 	bl	80037ec <I2C_Master_ADDR>
 8002c3c:	e067      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d036      	beq.n	8002cb6 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c56:	f000 80db 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x10a>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x10a>
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f9a0 	bl	8002fbe <I2C_MasterTransmit_TXE>
 8002c7e:	e046      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80c2 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80bc 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c98:	7bbb      	ldrb	r3, [r7, #14]
 8002c9a:	2b21      	cmp	r3, #33	@ 0x21
 8002c9c:	d103      	bne.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa29 	bl	80030f6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca4:	e0b4      	b.n	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	f040 80b1 	bne.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa97 	bl	80031e2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb4:	e0ac      	b.n	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cc4:	f000 80a4 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x178>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x178>
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fb13 	bl	8003312 <I2C_MasterReceive_RXNE>
 8002cec:	e00f      	b.n	8002d0e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 808b 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8085 	beq.w	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fbcb 	bl	80034a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0c:	e080      	b.n	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
 8002d0e:	e07f      	b.n	8002e10 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e007      	b.n	8002d32 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d011      	beq.n	8002d60 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 ff96 	bl	8003c8a <I2C_Slave_ADDR>
 8002d5e:	e05a      	b.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x206>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 ffd1 	bl	8003d1c <I2C_Slave_STOPF>
 8002d7a:	e04c      	b.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	2b21      	cmp	r3, #33	@ 0x21
 8002d80:	d002      	beq.n	8002d88 <HAL_I2C_EV_IRQHandler+0x212>
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	2b29      	cmp	r3, #41	@ 0x29
 8002d86:	d120      	bne.n	8002dca <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0x238>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0x238>
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 feb1 	bl	8003b0e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dac:	e032      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02d      	beq.n	8002e14 <HAL_I2C_EV_IRQHandler+0x29e>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fee0 	bl	8003b88 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dc8:	e024      	b.n	8002e14 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <HAL_I2C_EV_IRQHandler+0x27a>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_I2C_EV_IRQHandler+0x27a>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 feee 	bl	8003bca <I2C_SlaveReceive_RXNE>
 8002dee:	e012      	b.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 ff1e 	bl	8003c46 <I2C_SlaveReceive_BTF>
 8002e0a:	e004      	b.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e0c:	bf00      	nop
 8002e0e:	e002      	b.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e14:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e3e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <HAL_I2C_ER_IRQHandler+0x4a>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <HAL_I2C_ER_IRQHandler+0x70>
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002e8a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03e      	beq.n	8002f14 <HAL_I2C_ER_IRQHandler+0xf8>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d039      	beq.n	8002f14 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002ea0:	7efb      	ldrb	r3, [r7, #27]
 8002ea2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002eba:	7ebb      	ldrb	r3, [r7, #26]
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d112      	bne.n	8002ee6 <HAL_I2C_ER_IRQHandler+0xca>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_I2C_ER_IRQHandler+0xca>
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b21      	cmp	r3, #33	@ 0x21
 8002eca:	d008      	beq.n	8002ede <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b29      	cmp	r3, #41	@ 0x29
 8002ed0:	d005      	beq.n	8002ede <HAL_I2C_ER_IRQHandler+0xc2>
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b28      	cmp	r3, #40	@ 0x28
 8002ed6:	d106      	bne.n	8002ee6 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b21      	cmp	r3, #33	@ 0x21
 8002edc:	d103      	bne.n	8002ee6 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f001 f84c 	bl	8003f7c <I2C_Slave_AF>
 8002ee4:	e016      	b.n	8002f14 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eee:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ef8:	7efb      	ldrb	r3, [r7, #27]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d002      	beq.n	8002f04 <HAL_I2C_ER_IRQHandler+0xe8>
 8002efe:	7efb      	ldrb	r3, [r7, #27]
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	d107      	bne.n	8002f14 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f12:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_ER_IRQHandler+0x11e>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002f38:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f001 f889 	bl	8004064 <I2C_ITError>
  }
}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	@ 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fd4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d150      	bne.n	8003086 <I2C_MasterTransmit_TXE+0xc8>
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b21      	cmp	r3, #33	@ 0x21
 8002fe8:	d14d      	bne.n	8003086 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d01d      	beq.n	800302c <I2C_MasterTransmit_TXE+0x6e>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d01a      	beq.n	800302c <I2C_MasterTransmit_TXE+0x6e>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ffc:	d016      	beq.n	800302c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800300c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2211      	movs	r2, #17
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff98 	bl	8002f5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800302a:	e060      	b.n	80030ee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800303a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	d107      	bne.n	8003076 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ff87 	bl	8002f82 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003074:	e03b      	b.n	80030ee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff6b 	bl	8002f5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003084:	e033      	b.n	80030ee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b21      	cmp	r3, #33	@ 0x21
 800308a:	d005      	beq.n	8003098 <I2C_MasterTransmit_TXE+0xda>
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	2b40      	cmp	r3, #64	@ 0x40
 8003090:	d12d      	bne.n	80030ee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b22      	cmp	r3, #34	@ 0x22
 8003096:	d12a      	bne.n	80030ee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030b2:	e01c      	b.n	80030ee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b40      	cmp	r3, #64	@ 0x40
 80030be:	d103      	bne.n	80030c8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f88e 	bl	80031e2 <I2C_MemoryTransmit_TXE_BTF>
}
 80030c6:	e012      	b.n	80030ee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030ec:	e7ff      	b.n	80030ee <I2C_MasterTransmit_TXE+0x130>
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b21      	cmp	r3, #33	@ 0x21
 800310e:	d164      	bne.n	80031da <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800313e:	e04c      	b.n	80031da <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b08      	cmp	r3, #8
 8003144:	d01d      	beq.n	8003182 <I2C_MasterTransmit_BTF+0x8c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b20      	cmp	r3, #32
 800314a:	d01a      	beq.n	8003182 <I2C_MasterTransmit_BTF+0x8c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003152:	d016      	beq.n	8003182 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003162:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2211      	movs	r2, #17
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff feed 	bl	8002f5a <HAL_I2C_MasterTxCpltCallback>
}
 8003180:	e02b      	b.n	80031da <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003190:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d107      	bne.n	80031cc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fedc 	bl	8002f82 <HAL_I2C_MemTxCpltCallback>
}
 80031ca:	e006      	b.n	80031da <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fec0 	bl	8002f5a <HAL_I2C_MasterTxCpltCallback>
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10b      	bne.n	800321a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003206:	b2da      	uxtb	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003218:	e077      	b.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321e:	b29b      	uxth	r3, r3
 8003220:	121b      	asrs	r3, r3, #8
 8003222:	b2da      	uxtb	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003234:	e069      	b.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10b      	bne.n	8003256 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003242:	b2da      	uxtb	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003254:	e059      	b.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325a:	2b02      	cmp	r3, #2
 800325c:	d152      	bne.n	8003304 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b22      	cmp	r3, #34	@ 0x22
 8003262:	d10d      	bne.n	8003280 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003272:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800327e:	e044      	b.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b21      	cmp	r3, #33	@ 0x21
 800328e:	d112      	bne.n	80032b6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032b4:	e029      	b.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d124      	bne.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b21      	cmp	r3, #33	@ 0x21
 80032c4:	d121      	bne.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032d4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fe40 	bl	8002f82 <HAL_I2C_MemTxCpltCallback>
}
 8003302:	e002      	b.n	800330a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff fb05 	bl	8002914 <I2C_Flush_DR>
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b22      	cmp	r3, #34	@ 0x22
 8003324:	f040 80b9 	bne.w	800349a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d921      	bls.n	8003380 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b03      	cmp	r3, #3
 800336a:	f040 8096 	bne.w	800349a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800337e:	e08c      	b.n	800349a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	2b02      	cmp	r3, #2
 8003386:	d07f      	beq.n	8003488 <I2C_MasterReceive_RXNE+0x176>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d002      	beq.n	8003394 <I2C_MasterReceive_RXNE+0x82>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d179      	bne.n	8003488 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f001 f83f 	bl	8004418 <I2C_WaitOnSTOPRequestThroughIT>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d14c      	bne.n	800343a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b40      	cmp	r3, #64	@ 0x40
 80033f8:	d10a      	bne.n	8003410 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fdc4 	bl	8002f96 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800340e:	e044      	b.n	800349a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d002      	beq.n	8003424 <I2C_MasterReceive_RXNE+0x112>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b20      	cmp	r3, #32
 8003422:	d103      	bne.n	800342c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
 800342a:	e002      	b.n	8003432 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2212      	movs	r2, #18
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fd9b 	bl	8002f6e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003438:	e02f      	b.n	800349a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003448:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fe fb2e 	bl	8001ae2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003486:	e008      	b.n	800349a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003496:	605a      	str	r2, [r3, #4]
}
 8003498:	e7ff      	b.n	800349a <I2C_MasterReceive_RXNE+0x188>
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d11b      	bne.n	80034f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034f0:	e0c8      	b.n	8003684 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d129      	bne.n	8003550 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00a      	beq.n	8003528 <I2C_MasterReceive_BTF+0x86>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d007      	beq.n	8003528 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003526:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800354e:	e099      	b.n	8003684 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	f040 8081 	bne.w	800365e <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d002      	beq.n	8003568 <I2C_MasterReceive_BTF+0xc6>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b10      	cmp	r3, #16
 8003566:	d108      	bne.n	800357a <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e019      	b.n	80035ae <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d002      	beq.n	8003586 <I2C_MasterReceive_BTF+0xe4>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d108      	bne.n	8003598 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e00a      	b.n	80035ae <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b10      	cmp	r3, #16
 800359c:	d007      	beq.n	80035ae <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003608:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d10a      	bne.n	8003634 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fcb2 	bl	8002f96 <HAL_I2C_MemRxCpltCallback>
}
 8003632:	e027      	b.n	8003684 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d002      	beq.n	8003648 <I2C_MasterReceive_BTF+0x1a6>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b20      	cmp	r3, #32
 8003646:	d103      	bne.n	8003650 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
 800364e:	e002      	b.n	8003656 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2212      	movs	r2, #18
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fc89 	bl	8002f6e <HAL_I2C_MasterRxCpltCallback>
}
 800365c:	e012      	b.n	8003684 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b40      	cmp	r3, #64	@ 0x40
 800369e:	d117      	bne.n	80036d0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036b8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036ba:	e067      	b.n	800378c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	611a      	str	r2, [r3, #16]
}
 80036ce:	e05d      	b.n	800378c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036d8:	d133      	bne.n	8003742 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b21      	cmp	r3, #33	@ 0x21
 80036e4:	d109      	bne.n	80036fa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036f6:	611a      	str	r2, [r3, #16]
 80036f8:	e008      	b.n	800370c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <I2C_Master_SB+0x92>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	2b00      	cmp	r3, #0
 8003724:	d032      	beq.n	800378c <I2C_Master_SB+0x100>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d02d      	beq.n	800378c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800373e:	605a      	str	r2, [r3, #4]
}
 8003740:	e024      	b.n	800378c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10e      	bne.n	8003768 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	b29b      	uxth	r3, r3
 8003750:	11db      	asrs	r3, r3, #7
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 0306 	and.w	r3, r3, #6
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f063 030f 	orn	r3, r3, #15
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]
}
 8003766:	e011      	b.n	800378c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10d      	bne.n	800378c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003774:	b29b      	uxth	r3, r3
 8003776:	11db      	asrs	r3, r3, #7
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0306 	and.w	r3, r3, #6
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f063 030e 	orn	r3, r3, #14
 8003784:	b2da      	uxtb	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <I2C_Master_ADD10+0x26>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <I2C_Master_ADD10+0x48>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	605a      	str	r2, [r3, #4]
  }
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b091      	sub	sp, #68	@ 0x44
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b22      	cmp	r3, #34	@ 0x22
 8003814:	f040 8169 	bne.w	8003aea <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10f      	bne.n	8003840 <I2C_Master_ADDR+0x54>
 8003820:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d10b      	bne.n	8003840 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	2300      	movs	r3, #0
 800382a:	633b      	str	r3, [r7, #48]	@ 0x30
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	e160      	b.n	8003b02 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11d      	bne.n	8003884 <I2C_Master_ADDR+0x98>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003850:	d118      	bne.n	8003884 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003876:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	651a      	str	r2, [r3, #80]	@ 0x50
 8003882:	e13e      	b.n	8003b02 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d113      	bne.n	80038b6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e115      	b.n	8003ae2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 808a 	bne.w	80039d6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038c8:	d137      	bne.n	800393a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e8:	d113      	bne.n	8003912 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	e0e7      	b.n	8003ae2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e0d3      	b.n	8003ae2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	2b08      	cmp	r3, #8
 800393e:	d02e      	beq.n	800399e <I2C_Master_ADDR+0x1b2>
 8003940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003942:	2b20      	cmp	r3, #32
 8003944:	d02b      	beq.n	800399e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003948:	2b12      	cmp	r3, #18
 800394a:	d102      	bne.n	8003952 <I2C_Master_ADDR+0x166>
 800394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394e:	2b01      	cmp	r3, #1
 8003950:	d125      	bne.n	800399e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003954:	2b04      	cmp	r3, #4
 8003956:	d00e      	beq.n	8003976 <I2C_Master_ADDR+0x18a>
 8003958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395a:	2b02      	cmp	r3, #2
 800395c:	d00b      	beq.n	8003976 <I2C_Master_ADDR+0x18a>
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003960:	2b10      	cmp	r3, #16
 8003962:	d008      	beq.n	8003976 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e007      	b.n	8003986 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003984:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	e0a1      	b.n	8003ae2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e085      	b.n	8003ae2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d14d      	bne.n	8003a7c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d016      	beq.n	8003a14 <I2C_Master_ADDR+0x228>
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d013      	beq.n	8003a14 <I2C_Master_ADDR+0x228>
 80039ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d010      	beq.n	8003a14 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a00:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e007      	b.n	8003a24 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a22:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a32:	d117      	bne.n	8003a64 <I2C_Master_ADDR+0x278>
 8003a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a3a:	d00b      	beq.n	8003a54 <I2C_Master_ADDR+0x268>
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d008      	beq.n	8003a54 <I2C_Master_ADDR+0x268>
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d005      	beq.n	8003a54 <I2C_Master_ADDR+0x268>
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	2b10      	cmp	r3, #16
 8003a4c:	d002      	beq.n	8003a54 <I2C_Master_ADDR+0x268>
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d107      	bne.n	8003a64 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a62:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	e032      	b.n	8003ae2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a8a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9a:	d117      	bne.n	8003acc <I2C_Master_ADDR+0x2e0>
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aa2:	d00b      	beq.n	8003abc <I2C_Master_ADDR+0x2d0>
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d008      	beq.n	8003abc <I2C_Master_ADDR+0x2d0>
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d005      	beq.n	8003abc <I2C_Master_ADDR+0x2d0>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d002      	beq.n	8003abc <I2C_Master_ADDR+0x2d0>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d107      	bne.n	8003acc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ae8:	e00b      	b.n	8003b02 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	e7ff      	b.n	8003b02 <I2C_Master_ADDR+0x316>
 8003b02:	bf00      	nop
 8003b04:	3744      	adds	r7, #68	@ 0x44
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02b      	beq.n	8003b80 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d114      	bne.n	8003b80 <I2C_SlaveTransmit_TXE+0x72>
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b29      	cmp	r3, #41	@ 0x29
 8003b5a:	d111      	bne.n	8003b80 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2221      	movs	r2, #33	@ 0x21
 8003b70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2228      	movs	r2, #40	@ 0x28
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd ffa6 	bl	8001acc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02c      	beq.n	8003c3e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d114      	bne.n	8003c3e <I2C_SlaveReceive_RXNE+0x74>
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c18:	d111      	bne.n	8003c3e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2222      	movs	r2, #34	@ 0x22
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2228      	movs	r2, #40	@ 0x28
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fd ff2d 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d012      	beq.n	8003c7e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ca4:	2b28      	cmp	r3, #40	@ 0x28
 8003ca6:	d125      	bne.n	8003cf4 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	81bb      	strh	r3, [r7, #12]
 8003cd6:	e002      	b.n	8003cde <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ce6:	89ba      	ldrh	r2, [r7, #12]
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fd fead 	bl	8001a4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cf2:	e00e      	b.n	8003d12 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d78:	d172      	bne.n	8003e60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b22      	cmp	r3, #34	@ 0x22
 8003d7e:	d002      	beq.n	8003d86 <I2C_Slave_STOPF+0x6a>
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d84:	d135      	bne.n	8003df2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fa8f 	bl	80022e2 <HAL_DMA_GetState>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d049      	beq.n	8003e5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	4a69      	ldr	r2, [pc, #420]	@ (8003f74 <I2C_Slave_STOPF+0x258>)
 8003dd0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fa61 	bl	800229e <HAL_DMA_Abort_IT>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d03d      	beq.n	8003e5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dec:	4610      	mov	r0, r2
 8003dee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003df0:	e035      	b.n	8003e5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fa59 	bl	80022e2 <HAL_DMA_GetState>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d014      	beq.n	8003e60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f74 <I2C_Slave_STOPF+0x258>)
 8003e3c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fa2b 	bl	800229e <HAL_DMA_Abort_IT>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4798      	blx	r3
 8003e5c:	e000      	b.n	8003e60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d03e      	beq.n	8003ee8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d112      	bne.n	8003e9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d112      	bne.n	8003ed2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8b7 	bl	8004064 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ef6:	e039      	b.n	8003f6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003efc:	d109      	bne.n	8003f12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2228      	movs	r2, #40	@ 0x28
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fd fdc3 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b28      	cmp	r3, #40	@ 0x28
 8003f1c:	d111      	bne.n	8003f42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <I2C_Slave_STOPF+0x25c>)
 8003f22:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fd7a 	bl	8001a34 <HAL_I2C_ListenCpltCallback>
}
 8003f40:	e014      	b.n	8003f6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	2b22      	cmp	r3, #34	@ 0x22
 8003f48:	d002      	beq.n	8003f50 <I2C_Slave_STOPF+0x234>
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b22      	cmp	r3, #34	@ 0x22
 8003f4e:	d10d      	bne.n	8003f6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd fd96 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	080042c9 	.word	0x080042c9
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d002      	beq.n	8003f9e <I2C_Slave_AF+0x22>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d129      	bne.n	8003ff2 <I2C_Slave_AF+0x76>
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b28      	cmp	r3, #40	@ 0x28
 8003fa2:	d126      	bne.n	8003ff2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <I2C_Slave_AF+0xe4>)
 8003fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fb8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fc2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fd22 	bl	8001a34 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003ff0:	e031      	b.n	8004056 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b21      	cmp	r3, #33	@ 0x21
 8003ff6:	d129      	bne.n	800404c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <I2C_Slave_AF+0xe4>)
 8003ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2221      	movs	r2, #33	@ 0x21
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004022:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800402c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fe fc68 	bl	8002914 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fd fd41 	bl	8001acc <HAL_I2C_SlaveTxCpltCallback>
}
 800404a:	e004      	b.n	8004056 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	ffff0000 	.word	0xffff0000

08004064 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004072:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800407a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800407c:	7bbb      	ldrb	r3, [r7, #14]
 800407e:	2b10      	cmp	r3, #16
 8004080:	d002      	beq.n	8004088 <I2C_ITError+0x24>
 8004082:	7bbb      	ldrb	r3, [r7, #14]
 8004084:	2b40      	cmp	r3, #64	@ 0x40
 8004086:	d10a      	bne.n	800409e <I2C_ITError+0x3a>
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b22      	cmp	r3, #34	@ 0x22
 800408c:	d107      	bne.n	800409e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800409c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040a4:	2b28      	cmp	r3, #40	@ 0x28
 80040a6:	d107      	bne.n	80040b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2228      	movs	r2, #40	@ 0x28
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040b6:	e015      	b.n	80040e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c6:	d00a      	beq.n	80040de <I2C_ITError+0x7a>
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b60      	cmp	r3, #96	@ 0x60
 80040cc:	d007      	beq.n	80040de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f2:	d162      	bne.n	80041ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004102:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d020      	beq.n	8004154 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	4a6a      	ldr	r2, [pc, #424]	@ (80042c0 <I2C_ITError+0x25c>)
 8004118:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe f8bd 	bl	800229e <HAL_DMA_Abort_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8089 	beq.w	800423e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800414e:	4610      	mov	r0, r2
 8004150:	4798      	blx	r3
 8004152:	e074      	b.n	800423e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	4a59      	ldr	r2, [pc, #356]	@ (80042c0 <I2C_ITError+0x25c>)
 800415a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe f89c 	bl	800229e <HAL_DMA_Abort_IT>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d068      	beq.n	800423e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d10b      	bne.n	8004192 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
 80041b8:	e041      	b.n	800423e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b60      	cmp	r3, #96	@ 0x60
 80041c4:	d125      	bne.n	8004212 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b40      	cmp	r3, #64	@ 0x40
 80041e0:	d10b      	bne.n	80041fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe fecd 	bl	8002faa <HAL_I2C_AbortCpltCallback>
 8004210:	e015      	b.n	800423e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	d10b      	bne.n	8004238 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fd fc52 	bl	8001ae2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10e      	bne.n	800426c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800427a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004282:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d113      	bne.n	80042b8 <I2C_ITError+0x254>
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b28      	cmp	r3, #40	@ 0x28
 8004294:	d110      	bne.n	80042b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0a      	ldr	r2, [pc, #40]	@ (80042c4 <I2C_ITError+0x260>)
 800429a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fbbe 	bl	8001a34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	080042c9 	.word	0x080042c9
 80042c4:	ffff0000 	.word	0xffff0000

080042c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004410 <I2C_DMAAbort+0x148>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004414 <I2C_DMAAbort+0x14c>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0a1a      	lsrs	r2, r3, #8
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	00da      	lsls	r2, r3, #3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800430e:	e00a      	b.n	8004326 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004324:	d0ea      	beq.n	80042fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004332:	2200      	movs	r2, #0
 8004334:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	2200      	movs	r2, #0
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004354:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004368:	2200      	movs	r2, #0
 800436a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	2200      	movs	r2, #0
 800437a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b60      	cmp	r3, #96	@ 0x60
 8004396:	d10e      	bne.n	80043b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2200      	movs	r2, #0
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f7fe fdfb 	bl	8002faa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043b4:	e027      	b.n	8004406 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043bc:	2b28      	cmp	r3, #40	@ 0x28
 80043be:	d117      	bne.n	80043f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2228      	movs	r2, #40	@ 0x28
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043ee:	e007      	b.n	8004400 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	f7fd fb6e 	bl	8001ae2 <HAL_I2C_ErrorCallback>
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20002580 	.word	0x20002580
 8004414:	14f8b589 	.word	0x14f8b589

08004418 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004424:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	4a13      	ldr	r2, [pc, #76]	@ (8004478 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	0a1a      	lsrs	r2, r3, #8
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b01      	subs	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e008      	b.n	8004468 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004464:	d0e9      	beq.n	800443a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	20002580 	.word	0x20002580
 8004478:	14f8b589 	.word	0x14f8b589

0800447c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800448c:	d103      	bne.n	8004496 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004494:	e007      	b.n	80044a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800449e:	d102      	bne.n	80044a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2208      	movs	r2, #8
 80044a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0cc      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b68      	ldr	r3, [pc, #416]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d90c      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b65      	ldr	r3, [pc, #404]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b63      	ldr	r3, [pc, #396]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b8      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004508:	4b59      	ldr	r3, [pc, #356]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a58      	ldr	r2, [pc, #352]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004520:	4b53      	ldr	r3, [pc, #332]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a52      	ldr	r2, [pc, #328]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800452a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b50      	ldr	r3, [pc, #320]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	494d      	ldr	r1, [pc, #308]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d044      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d119      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d003      	beq.n	8004572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456e:	2b03      	cmp	r3, #3
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b3f      	ldr	r3, [pc, #252]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b3b      	ldr	r3, [pc, #236]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e067      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b37      	ldr	r3, [pc, #220]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4934      	ldr	r1, [pc, #208]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a4:	f7fd fcca 	bl	8001f3c <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fd fcc6 	bl	8001f3c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d4:	4b25      	ldr	r3, [pc, #148]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d20c      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b20      	ldr	r3, [pc, #128]	@ (800466c <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e032      	b.n	8004662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004608:	4b19      	ldr	r3, [pc, #100]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4916      	ldr	r1, [pc, #88]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004626:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	490e      	ldr	r1, [pc, #56]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800463a:	f000 f855 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 800463e:	4602      	mov	r2, r0
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	490a      	ldr	r1, [pc, #40]	@ (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	5ccb      	ldrb	r3, [r1, r3]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd fc2a 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023c00 	.word	0x40023c00
 8004670:	40023800 	.word	0x40023800
 8004674:	0802b838 	.word	0x0802b838
 8004678:	20002580 	.word	0x20002580
 800467c:	20002584 	.word	0x20002584

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	@ (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20002580 	.word	0x20002580

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4903      	ldr	r1, [pc, #12]	@ (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	0802b848 	.word	0x0802b848

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c4:	f7ff ffdc 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0b5b      	lsrs	r3, r3, #13
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	@ (80046e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0802b848 	.word	0x0802b848

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ec:	b0a6      	sub	sp, #152	@ 0x98
 80046ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800470e:	4bc8      	ldr	r3, [pc, #800]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b0c      	cmp	r3, #12
 8004718:	f200 817e 	bhi.w	8004a18 <HAL_RCC_GetSysClockFreq+0x330>
 800471c:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <HAL_RCC_GetSysClockFreq+0x3c>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004759 	.word	0x08004759
 8004728:	08004a19 	.word	0x08004a19
 800472c:	08004a19 	.word	0x08004a19
 8004730:	08004a19 	.word	0x08004a19
 8004734:	08004761 	.word	0x08004761
 8004738:	08004a19 	.word	0x08004a19
 800473c:	08004a19 	.word	0x08004a19
 8004740:	08004a19 	.word	0x08004a19
 8004744:	08004769 	.word	0x08004769
 8004748:	08004a19 	.word	0x08004a19
 800474c:	08004a19 	.word	0x08004a19
 8004750:	08004a19 	.word	0x08004a19
 8004754:	080048d3 	.word	0x080048d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4bb6      	ldr	r3, [pc, #728]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x34c>)
 800475a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800475e:	e15f      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004760:	4bb5      	ldr	r3, [pc, #724]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004766:	e15b      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004768:	4bb1      	ldr	r3, [pc, #708]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004774:	4bae      	ldr	r3, [pc, #696]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d031      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004780:	4bab      	ldr	r3, [pc, #684]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	2200      	movs	r2, #0
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800478a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800478c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	663b      	str	r3, [r7, #96]	@ 0x60
 8004794:	2300      	movs	r3, #0
 8004796:	667b      	str	r3, [r7, #100]	@ 0x64
 8004798:	4ba7      	ldr	r3, [pc, #668]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x350>)
 800479a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800479e:	462a      	mov	r2, r5
 80047a0:	fb03 f202 	mul.w	r2, r3, r2
 80047a4:	2300      	movs	r3, #0
 80047a6:	4621      	mov	r1, r4
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	4aa2      	ldr	r2, [pc, #648]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x350>)
 80047b0:	4621      	mov	r1, r4
 80047b2:	fba1 1202 	umull	r1, r2, r1, r2
 80047b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047b8:	460a      	mov	r2, r1
 80047ba:	67ba      	str	r2, [r7, #120]	@ 0x78
 80047bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80047be:	4413      	add	r3, r2
 80047c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c6:	2200      	movs	r2, #0
 80047c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80047d4:	f7fb ff24 	bl	8000620 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047e2:	e064      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e4:	4b92      	ldr	r3, [pc, #584]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	2200      	movs	r2, #0
 80047ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ee:	657a      	str	r2, [r7, #84]	@ 0x54
 80047f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f8:	2300      	movs	r3, #0
 80047fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047fc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004800:	4622      	mov	r2, r4
 8004802:	462b      	mov	r3, r5
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	0159      	lsls	r1, r3, #5
 800480e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004812:	0150      	lsls	r0, r2, #5
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4621      	mov	r1, r4
 800481a:	1a51      	subs	r1, r2, r1
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	4629      	mov	r1, r5
 8004820:	eb63 0301 	sbc.w	r3, r3, r1
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004832:	4659      	mov	r1, fp
 8004834:	018b      	lsls	r3, r1, #6
 8004836:	4651      	mov	r1, sl
 8004838:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483c:	4651      	mov	r1, sl
 800483e:	018a      	lsls	r2, r1, #6
 8004840:	4651      	mov	r1, sl
 8004842:	ebb2 0801 	subs.w	r8, r2, r1
 8004846:	4659      	mov	r1, fp
 8004848:	eb63 0901 	sbc.w	r9, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004858:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004860:	4690      	mov	r8, r2
 8004862:	4699      	mov	r9, r3
 8004864:	4623      	mov	r3, r4
 8004866:	eb18 0303 	adds.w	r3, r8, r3
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	462b      	mov	r3, r5
 800486e:	eb49 0303 	adc.w	r3, r9, r3
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004880:	4629      	mov	r1, r5
 8004882:	028b      	lsls	r3, r1, #10
 8004884:	4621      	mov	r1, r4
 8004886:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800488a:	4621      	mov	r1, r4
 800488c:	028a      	lsls	r2, r1, #10
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004896:	2200      	movs	r2, #0
 8004898:	643b      	str	r3, [r7, #64]	@ 0x40
 800489a:	647a      	str	r2, [r7, #68]	@ 0x44
 800489c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048a0:	f7fb febe 	bl	8000620 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048ae:	4b60      	ldr	r3, [pc, #384]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	3301      	adds	r3, #1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80048c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80048d0:	e0a6      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d2:	4b57      	ldr	r3, [pc, #348]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048de:	4b54      	ldr	r3, [pc, #336]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02a      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b51      	ldr	r3, [pc, #324]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	2200      	movs	r2, #0
 80048f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048fc:	2100      	movs	r1, #0
 80048fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x350>)
 8004900:	fb03 f201 	mul.w	r2, r3, r1
 8004904:	2300      	movs	r3, #0
 8004906:	fb00 f303 	mul.w	r3, r0, r3
 800490a:	4413      	add	r3, r2
 800490c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x350>)
 800490e:	fba0 1202 	umull	r1, r2, r0, r2
 8004912:	677a      	str	r2, [r7, #116]	@ 0x74
 8004914:	460a      	mov	r2, r1
 8004916:	673a      	str	r2, [r7, #112]	@ 0x70
 8004918:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800491a:	4413      	add	r3, r2
 800491c:	677b      	str	r3, [r7, #116]	@ 0x74
 800491e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004922:	2200      	movs	r2, #0
 8004924:	633b      	str	r3, [r7, #48]	@ 0x30
 8004926:	637a      	str	r2, [r7, #52]	@ 0x34
 8004928:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800492c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004930:	f7fb fe76 	bl	8000620 <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4613      	mov	r3, r2
 800493a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800493e:	e05b      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004940:	4b3b      	ldr	r3, [pc, #236]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	2200      	movs	r2, #0
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
 8004958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	f04f 0000 	mov.w	r0, #0
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	0159      	lsls	r1, r3, #5
 800496a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800496e:	0150      	lsls	r0, r2, #5
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4641      	mov	r1, r8
 8004976:	ebb2 0a01 	subs.w	sl, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800498c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004994:	ebb2 040a 	subs.w	r4, r2, sl
 8004998:	eb63 050b 	sbc.w	r5, r3, fp
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	00eb      	lsls	r3, r5, #3
 80049a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	4614      	mov	r4, r2
 80049ae:	461d      	mov	r5, r3
 80049b0:	4643      	mov	r3, r8
 80049b2:	18e3      	adds	r3, r4, r3
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	464b      	mov	r3, r9
 80049b8:	eb45 0303 	adc.w	r3, r5, r3
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ca:	4629      	mov	r1, r5
 80049cc:	028b      	lsls	r3, r1, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d4:	4621      	mov	r1, r4
 80049d6:	028a      	lsls	r2, r1, #10
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e0:	2200      	movs	r2, #0
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ea:	f7fb fe19 	bl	8000620 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4613      	mov	r3, r2
 80049f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x348>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	0f1b      	lsrs	r3, r3, #28
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8004a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a16:	e003      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3798      	adds	r7, #152	@ 0x98
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	017d7840 	.word	0x017d7840

08004a3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e28d      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8083 	beq.w	8004b62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a5c:	4b94      	ldr	r3, [pc, #592]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d019      	beq.n	8004a9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a68:	4b91      	ldr	r3, [pc, #580]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d106      	bne.n	8004a82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a74:	4b8e      	ldr	r3, [pc, #568]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a80:	d00c      	beq.n	8004a9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a82:	4b8b      	ldr	r3, [pc, #556]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d112      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8e:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	4b84      	ldr	r3, [pc, #528]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d05b      	beq.n	8004b60 <HAL_RCC_OscConfig+0x124>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d157      	bne.n	8004b60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e25a      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abc:	d106      	bne.n	8004acc <HAL_RCC_OscConfig+0x90>
 8004abe:	4b7c      	ldr	r3, [pc, #496]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7b      	ldr	r2, [pc, #492]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e01d      	b.n	8004b08 <HAL_RCC_OscConfig+0xcc>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0xb4>
 8004ad6:	4b76      	ldr	r3, [pc, #472]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a75      	ldr	r2, [pc, #468]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4b73      	ldr	r3, [pc, #460]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a72      	ldr	r2, [pc, #456]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e00b      	b.n	8004b08 <HAL_RCC_OscConfig+0xcc>
 8004af0:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fa14 	bl	8001f3c <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fd fa10 	bl	8001f3c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	@ 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e21f      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2a:	4b61      	ldr	r3, [pc, #388]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0xdc>
 8004b36:	e014      	b.n	8004b62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fa00 	bl	8001f3c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fd f9fc 	bl	8001f3c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	@ 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e20b      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b52:	4b57      	ldr	r3, [pc, #348]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x104>
 8004b5e:	e000      	b.n	8004b62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d06f      	beq.n	8004c4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b6e:	4b50      	ldr	r3, [pc, #320]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d105      	bne.n	8004b92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b86:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b92:	4b47      	ldr	r3, [pc, #284]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d11c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b9e:	4b44      	ldr	r3, [pc, #272]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	4b41      	ldr	r3, [pc, #260]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x186>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e1d3      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4937      	ldr	r1, [pc, #220]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	e03a      	b.n	8004c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d020      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be0:	4b34      	ldr	r3, [pc, #208]	@ (8004cb4 <HAL_RCC_OscConfig+0x278>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fd f9a9 	bl	8001f3c <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bee:	f7fd f9a5 	bl	8001f3c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e1b4      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0c:	4b28      	ldr	r3, [pc, #160]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4925      	ldr	r1, [pc, #148]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]
 8004c20:	e015      	b.n	8004c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c22:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCC_OscConfig+0x278>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fd f988 	bl	8001f3c <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c30:	f7fd f984 	bl	8001f3c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e193      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d036      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c62:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <HAL_RCC_OscConfig+0x27c>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fd f968 	bl	8001f3c <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c70:	f7fd f964 	bl	8001f3c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e173      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c82:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_RCC_OscConfig+0x274>)
 8004c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x234>
 8004c8e:	e01b      	b.n	8004cc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c90:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <HAL_RCC_OscConfig+0x27c>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fd f951 	bl	8001f3c <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	e00e      	b.n	8004cbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9e:	f7fd f94d 	bl	8001f3c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d907      	bls.n	8004cbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e15c      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	42470000 	.word	0x42470000
 8004cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	4b8a      	ldr	r3, [pc, #552]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ea      	bne.n	8004c9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8097 	beq.w	8004e04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b83      	ldr	r3, [pc, #524]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	4b7f      	ldr	r3, [pc, #508]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	4a7e      	ldr	r2, [pc, #504]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4b79      	ldr	r3, [pc, #484]	@ (8004eec <HAL_RCC_OscConfig+0x4b0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d118      	bne.n	8004d44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d12:	4b76      	ldr	r3, [pc, #472]	@ (8004eec <HAL_RCC_OscConfig+0x4b0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a75      	ldr	r2, [pc, #468]	@ (8004eec <HAL_RCC_OscConfig+0x4b0>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1e:	f7fd f90d 	bl	8001f3c <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fd f909 	bl	8001f3c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e118      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	4b6c      	ldr	r3, [pc, #432]	@ (8004eec <HAL_RCC_OscConfig+0x4b0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCC_OscConfig+0x31e>
 8004d4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d50:	4a65      	ldr	r2, [pc, #404]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d58:	e01c      	b.n	8004d94 <HAL_RCC_OscConfig+0x358>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x340>
 8004d62:	4b61      	ldr	r3, [pc, #388]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	4a60      	ldr	r2, [pc, #384]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	4a5d      	ldr	r2, [pc, #372]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d7a:	e00b      	b.n	8004d94 <HAL_RCC_OscConfig+0x358>
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	4a59      	ldr	r2, [pc, #356]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d88:	4b57      	ldr	r3, [pc, #348]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8c:	4a56      	ldr	r2, [pc, #344]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004d8e:	f023 0304 	bic.w	r3, r3, #4
 8004d92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d015      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fd f8ce 	bl	8001f3c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fd f8ca 	bl	8001f3c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0d7      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dba:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ee      	beq.n	8004da4 <HAL_RCC_OscConfig+0x368>
 8004dc6:	e014      	b.n	8004df2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd f8b8 	bl	8001f3c <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fd f8b4 	bl	8001f3c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0c1      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de6:	4b40      	ldr	r3, [pc, #256]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ee      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80ad 	beq.w	8004f68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d060      	beq.n	8004edc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d145      	bne.n	8004eae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	4b33      	ldr	r3, [pc, #204]	@ (8004ef0 <HAL_RCC_OscConfig+0x4b4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd f888 	bl	8001f3c <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fd f884 	bl	8001f3c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e093      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	4b29      	ldr	r3, [pc, #164]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	019b      	lsls	r3, r3, #6
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	3b01      	subs	r3, #1
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	071b      	lsls	r3, r3, #28
 8004e7a:	491b      	ldr	r1, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e80:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <HAL_RCC_OscConfig+0x4b4>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd f859 	bl	8001f3c <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fd f855 	bl	8001f3c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e064      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea0:	4b11      	ldr	r3, [pc, #68]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x452>
 8004eac:	e05c      	b.n	8004f68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eae:	4b10      	ldr	r3, [pc, #64]	@ (8004ef0 <HAL_RCC_OscConfig+0x4b4>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd f842 	bl	8001f3c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fd f83e 	bl	8001f3c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e04d      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_RCC_OscConfig+0x4ac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x480>
 8004eda:	e045      	b.n	8004f68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e040      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f74 <HAL_RCC_OscConfig+0x538>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d030      	beq.n	8004f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d129      	bne.n	8004f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d122      	bne.n	8004f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d119      	bne.n	8004f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d10f      	bne.n	8004f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d001      	beq.n	8004f68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800

08004f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07b      	b.n	8005082 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f9a:	d009      	beq.n	8004fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61da      	str	r2, [r3, #28]
 8004fa2:	e005      	b.n	8004fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fe1a 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005034:	ea42 0103 	orr.w	r1, r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0104 	and.w	r1, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	f003 0210 	and.w	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e042      	b.n	8005122 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fc fdef 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2224      	movs	r2, #36	@ 0x24
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fd06 	bl	8005ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005102:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b20      	cmp	r3, #32
 8005142:	d121      	bne.n	8005188 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_UART_Transmit_IT+0x26>
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e01a      	b.n	800518a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2221      	movs	r2, #33	@ 0x21
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005182:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	4613      	mov	r3, r2
 80051a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d112      	bne.n	80051d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_UART_Receive_IT+0x26>
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e00b      	b.n	80051d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	461a      	mov	r2, r3
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 faaf 	bl	8005730 <UART_Start_Receive_IT>
 80051d2:	4603      	mov	r3, r0
 80051d4:	e000      	b.n	80051d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b0ba      	sub	sp, #232	@ 0xe8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800521e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_UART_IRQHandler+0x66>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fb8f 	bl	8005962 <UART_Receive_IT>
      return;
 8005244:	e25b      	b.n	80056fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80de 	beq.w	800540c <HAL_UART_IRQHandler+0x22c>
 8005250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005260:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80d1 	beq.w	800540c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <HAL_UART_IRQHandler+0xae>
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <HAL_UART_IRQHandler+0xd2>
 800529a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_UART_IRQHandler+0xf6>
 80052be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d011      	beq.n	8005306 <HAL_UART_IRQHandler+0x126>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	f043 0208 	orr.w	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 81f2 	beq.w	80056f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_UART_IRQHandler+0x14e>
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fb1a 	bl	8005962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b40      	cmp	r3, #64	@ 0x40
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_UART_IRQHandler+0x17a>
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04f      	beq.n	80053fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa22 	bl	80057a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d141      	bne.n	80053f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3314      	adds	r3, #20
 8005374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3314      	adds	r3, #20
 8005396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800539a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800539e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1d9      	bne.n	800536e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	4a7e      	ldr	r2, [pc, #504]	@ (80055c0 <HAL_UART_IRQHandler+0x3e0>)
 80053c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fc ff65 	bl	800229e <HAL_DMA_Abort_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	e00e      	b.n	8005408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f98a 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	e00a      	b.n	8005408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f986 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	e006      	b.n	8005408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f982 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005406:	e175      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	bf00      	nop
    return;
 800540a:	e173      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 814f 	bne.w	80056b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8148 	beq.w	80056b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8141 	beq.w	80056b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	f040 80b6 	bne.w	80055c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005464:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8145 	beq.w	80056f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005476:	429a      	cmp	r2, r3
 8005478:	f080 813e 	bcs.w	80056f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005482:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800548e:	f000 8088 	beq.w	80055a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1d9      	bne.n	8005492 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005502:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005506:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800550a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e1      	bne.n	80054de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3314      	adds	r3, #20
 8005520:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800552a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800552c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3314      	adds	r3, #20
 800553a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800553e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005540:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005544:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800554c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e3      	bne.n	800551a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005584:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005586:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800558a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e3      	bne.n	8005560 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	4618      	mov	r0, r3
 800559e:	f7fc fe0e 	bl	80021be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f8ad 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055be:	e09b      	b.n	80056f8 <HAL_UART_IRQHandler+0x518>
 80055c0:	0800586b 	.word	0x0800586b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 808e 	beq.w	80056fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8089 	beq.w	80056fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800560e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e3      	bne.n	80055ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	623b      	str	r3, [r7, #32]
   return(result);
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005646:	633a      	str	r2, [r7, #48]	@ 0x30
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e3      	bne.n	8005622 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	60fb      	str	r3, [r7, #12]
   return(result);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	69b9      	ldr	r1, [r7, #24]
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	617b      	str	r3, [r7, #20]
   return(result);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e3      	bne.n	8005668 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f833 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056b2:	e023      	b.n	80056fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_UART_IRQHandler+0x4f4>
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8e0 	bl	8005892 <UART_Transmit_IT>
    return;
 80056d2:	e014      	b.n	80056fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <HAL_UART_IRQHandler+0x51e>
 80056e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f920 	bl	8005932 <UART_EndTransmit_IT>
    return;
 80056f2:	e004      	b.n	80056fe <HAL_UART_IRQHandler+0x51e>
    return;
 80056f4:	bf00      	nop
 80056f6:	e002      	b.n	80056fe <HAL_UART_IRQHandler+0x51e>
      return;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <HAL_UART_IRQHandler+0x51e>
      return;
 80056fc:	bf00      	nop
  }
}
 80056fe:	37e8      	adds	r7, #232	@ 0xe8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2222      	movs	r2, #34	@ 0x22
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005774:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0220 	orr.w	r2, r2, #32
 8005794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b095      	sub	sp, #84	@ 0x54
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	d119      	bne.n	8005850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60bb      	str	r3, [r7, #8]
   return(result);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	647b      	str	r3, [r7, #68]	@ 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800583c:	61ba      	str	r2, [r7, #24]
 800583e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	613b      	str	r3, [r7, #16]
   return(result);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800585e:	bf00      	nop
 8005860:	3754      	adds	r7, #84	@ 0x54
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ff3d 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b21      	cmp	r3, #33	@ 0x21
 80058a4:	d13e      	bne.n	8005924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ae:	d114      	bne.n	80058da <UART_Transmit_IT+0x48>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d110      	bne.n	80058da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]
 80058d8:	e008      	b.n	80058ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6211      	str	r1, [r2, #32]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4619      	mov	r1, r3
 80058fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10f      	bne.n	8005920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800590e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800591e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc f85e 	bl	8001a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b08c      	sub	sp, #48	@ 0x30
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b22      	cmp	r3, #34	@ 0x22
 8005974:	f040 80ae 	bne.w	8005ad4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005980:	d117      	bne.n	80059b2 <UART_Receive_IT+0x50>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80059b0:	e026      	b.n	8005a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c4:	d007      	beq.n	80059d6 <UART_Receive_IT+0x74>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <UART_Receive_IT+0x82>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e008      	b.n	80059f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d15d      	bne.n	8005ad0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0220 	bic.w	r2, r2, #32
 8005a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d135      	bne.n	8005ac6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	623a      	str	r2, [r7, #32]
 8005a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d10a      	bne.n	8005ab8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fe2a 	bl	8005718 <HAL_UARTEx_RxEventCallback>
 8005ac4:	e002      	b.n	8005acc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb ff8c 	bl	80019e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e002      	b.n	8005ad6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3730      	adds	r7, #48	@ 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae4:	b0c0      	sub	sp, #256	@ 0x100
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	ea40 0301 	orr.w	r3, r0, r1
 8005b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b38:	f021 010c 	bic.w	r1, r1, #12
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b46:	430b      	orrs	r3, r1
 8005b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	6999      	ldr	r1, [r3, #24]
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	ea40 0301 	orr.w	r3, r0, r1
 8005b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8005dac <UART_SetConfig+0x2cc>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d005      	beq.n	8005b80 <UART_SetConfig+0xa0>
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005db0 <UART_SetConfig+0x2d0>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d104      	bne.n	8005b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b80:	f7fe fd9e 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 8005b84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b88:	e003      	b.n	8005b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b8a:	f7fe fd85 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b9c:	f040 810c 	bne.w	8005db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005baa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	eb12 0801 	adds.w	r8, r2, r1
 8005bc8:	4629      	mov	r1, r5
 8005bca:	eb43 0901 	adc.w	r9, r3, r1
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be2:	4690      	mov	r8, r2
 8005be4:	4699      	mov	r9, r3
 8005be6:	4623      	mov	r3, r4
 8005be8:	eb18 0303 	adds.w	r3, r8, r3
 8005bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	eb49 0303 	adc.w	r3, r9, r3
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c0e:	460b      	mov	r3, r1
 8005c10:	18db      	adds	r3, r3, r3
 8005c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c14:	4613      	mov	r3, r2
 8005c16:	eb42 0303 	adc.w	r3, r2, r3
 8005c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c24:	f7fa fcfc 	bl	8000620 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4b61      	ldr	r3, [pc, #388]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	011c      	lsls	r4, r3, #4
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c50:	415b      	adcs	r3, r3
 8005c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c58:	4641      	mov	r1, r8
 8005c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c5e:	4649      	mov	r1, r9
 8005c60:	eb43 0b01 	adc.w	fp, r3, r1
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c78:	4692      	mov	sl, r2
 8005c7a:	469b      	mov	fp, r3
 8005c7c:	4643      	mov	r3, r8
 8005c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c86:	464b      	mov	r3, r9
 8005c88:	eb4b 0303 	adc.w	r3, fp, r3
 8005c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	18db      	adds	r3, r3, r3
 8005ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005caa:	4613      	mov	r3, r2
 8005cac:	eb42 0303 	adc.w	r3, r2, r3
 8005cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cba:	f7fa fcb1 	bl	8000620 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	2264      	movs	r2, #100	@ 0x64
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	1acb      	subs	r3, r1, r3
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cda:	4b36      	ldr	r3, [pc, #216]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ce8:	441c      	add	r4, r3
 8005cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d04:	415b      	adcs	r3, r3
 8005d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d40:	464b      	mov	r3, r9
 8005d42:	460a      	mov	r2, r1
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d60:	460b      	mov	r3, r1
 8005d62:	18db      	adds	r3, r3, r3
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d66:	4613      	mov	r3, r2
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d76:	f7fa fc53 	bl	8000620 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005d80:	fba3 1302 	umull	r1, r3, r3, r2
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	2164      	movs	r1, #100	@ 0x64
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	3332      	adds	r3, #50	@ 0x32
 8005d92:	4a08      	ldr	r2, [pc, #32]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f003 0207 	and.w	r2, r3, #7
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4422      	add	r2, r4
 8005da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005da8:	e106      	b.n	8005fb8 <UART_SetConfig+0x4d8>
 8005daa:	bf00      	nop
 8005dac:	40011000 	.word	0x40011000
 8005db0:	40011400 	.word	0x40011400
 8005db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dca:	4642      	mov	r2, r8
 8005dcc:	464b      	mov	r3, r9
 8005dce:	1891      	adds	r1, r2, r2
 8005dd0:	6239      	str	r1, [r7, #32]
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dda:	4641      	mov	r1, r8
 8005ddc:	1854      	adds	r4, r2, r1
 8005dde:	4649      	mov	r1, r9
 8005de0:	eb43 0501 	adc.w	r5, r3, r1
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	00eb      	lsls	r3, r5, #3
 8005dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df2:	00e2      	lsls	r2, r4, #3
 8005df4:	4614      	mov	r4, r2
 8005df6:	461d      	mov	r5, r3
 8005df8:	4643      	mov	r3, r8
 8005dfa:	18e3      	adds	r3, r4, r3
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e00:	464b      	mov	r3, r9
 8005e02:	eb45 0303 	adc.w	r3, r5, r3
 8005e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e26:	4629      	mov	r1, r5
 8005e28:	008b      	lsls	r3, r1, #2
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e30:	4621      	mov	r1, r4
 8005e32:	008a      	lsls	r2, r1, #2
 8005e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e38:	f7fa fbf2 	bl	8000620 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b60      	ldr	r3, [pc, #384]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	011c      	lsls	r4, r3, #4
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	61b9      	str	r1, [r7, #24]
 8005e64:	415b      	adcs	r3, r3
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	1851      	adds	r1, r2, r1
 8005e70:	6139      	str	r1, [r7, #16]
 8005e72:	4649      	mov	r1, r9
 8005e74:	414b      	adcs	r3, r1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e84:	4659      	mov	r1, fp
 8005e86:	00cb      	lsls	r3, r1, #3
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8e:	4651      	mov	r1, sl
 8005e90:	00ca      	lsls	r2, r1, #3
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	008b      	lsls	r3, r1, #2
 8005ec8:	4641      	mov	r1, r8
 8005eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ece:	4641      	mov	r1, r8
 8005ed0:	008a      	lsls	r2, r1, #2
 8005ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ed6:	f7fa fba3 	bl	8000620 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4b38      	ldr	r3, [pc, #224]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	2264      	movs	r2, #100	@ 0x64
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	1acb      	subs	r3, r1, r3
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	3332      	adds	r3, #50	@ 0x32
 8005ef4:	4a33      	ldr	r2, [pc, #204]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f00:	441c      	add	r4, r3
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f06:	2200      	movs	r2, #0
 8005f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f20:	4641      	mov	r1, r8
 8005f22:	1851      	adds	r1, r2, r1
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	4649      	mov	r1, r9
 8005f28:	414b      	adcs	r3, r1
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f38:	4659      	mov	r1, fp
 8005f3a:	00cb      	lsls	r3, r1, #3
 8005f3c:	4651      	mov	r1, sl
 8005f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f42:	4651      	mov	r1, sl
 8005f44:	00ca      	lsls	r2, r1, #3
 8005f46:	4610      	mov	r0, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f52:	464b      	mov	r3, r9
 8005f54:	460a      	mov	r2, r1
 8005f56:	eb42 0303 	adc.w	r3, r2, r3
 8005f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f66:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f74:	4649      	mov	r1, r9
 8005f76:	008b      	lsls	r3, r1, #2
 8005f78:	4641      	mov	r1, r8
 8005f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7e:	4641      	mov	r1, r8
 8005f80:	008a      	lsls	r2, r1, #2
 8005f82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f86:	f7fa fb4b 	bl	8000620 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005f90:	fba3 1302 	umull	r1, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	2164      	movs	r1, #100	@ 0x64
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	3332      	adds	r3, #50	@ 0x32
 8005fa2:	4a08      	ldr	r2, [pc, #32]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4422      	add	r2, r4
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc4:	51eb851f 	.word	0x51eb851f

08005fc8 <memset>:
 8005fc8:	4402      	add	r2, r0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d100      	bne.n	8005fd2 <memset+0xa>
 8005fd0:	4770      	bx	lr
 8005fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd6:	e7f9      	b.n	8005fcc <memset+0x4>

08005fd8 <__libc_init_array>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4d0d      	ldr	r5, [pc, #52]	@ (8006010 <__libc_init_array+0x38>)
 8005fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8006014 <__libc_init_array+0x3c>)
 8005fde:	1b64      	subs	r4, r4, r5
 8005fe0:	10a4      	asrs	r4, r4, #2
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	42a6      	cmp	r6, r4
 8005fe6:	d109      	bne.n	8005ffc <__libc_init_array+0x24>
 8005fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8006018 <__libc_init_array+0x40>)
 8005fea:	4c0c      	ldr	r4, [pc, #48]	@ (800601c <__libc_init_array+0x44>)
 8005fec:	f000 f818 	bl	8006020 <_init>
 8005ff0:	1b64      	subs	r4, r4, r5
 8005ff2:	10a4      	asrs	r4, r4, #2
 8005ff4:	2600      	movs	r6, #0
 8005ff6:	42a6      	cmp	r6, r4
 8005ff8:	d105      	bne.n	8006006 <__libc_init_array+0x2e>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006000:	4798      	blx	r3
 8006002:	3601      	adds	r6, #1
 8006004:	e7ee      	b.n	8005fe4 <__libc_init_array+0xc>
 8006006:	f855 3b04 	ldr.w	r3, [r5], #4
 800600a:	4798      	blx	r3
 800600c:	3601      	adds	r6, #1
 800600e:	e7f2      	b.n	8005ff6 <__libc_init_array+0x1e>
 8006010:	0802b858 	.word	0x0802b858
 8006014:	0802b858 	.word	0x0802b858
 8006018:	0802b858 	.word	0x0802b858
 800601c:	0802b85c 	.word	0x0802b85c

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
