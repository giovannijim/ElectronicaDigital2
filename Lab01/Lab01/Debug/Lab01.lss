
Lab01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c6  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000352  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000015ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001bcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  9e:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}

// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Establecer la variable pointer1 en 0
	pointer1 = 0;
  a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pointer1>
	// Se apaga tx y rx
	UCSR0B = 0;
  aa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Se establece el puerto D como salida
	PORTD = 0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
	DDRD |= 0xFF;
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a b9       	out	0x0a, r24	; 10
	
	// Se establece el puerto C como salida
	PORTC = 0x00;
  b6:	18 b8       	out	0x08, r1	; 8
	DDRC |= 0xFF;
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	87 b9       	out	0x07, r24	; 7
	
	// ESTABLECER PORT PB3-PB7 como salida
	DDRB |= 0XF8;
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	88 6f       	ori	r24, 0xF8	; 248
  c0:	84 b9       	out	0x04, r24	; 4
	
	// ESTABLECER PULLUP EN PUERTO B0, B1 y B2
	PORTB |= (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	85 b9       	out	0x05, r24	; 5
	//ESTABLECER PUERTO B0 Y B1 COMO ENTRADA
	DDRB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2));
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	84 b9       	out	0x04, r24	; 4
	//Habilitar la interrupción puerto B
	PCICR |= (1<<PCIE0);
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	// Habilitar mascara para pines PB0, PB1, PB2
	PCMSK0 |= 0x07;
  d8:	eb e6       	ldi	r30, 0x6B	; 107
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <main>:

void setup(void);

int main(void)
{
	cli();								// Deshabilitar interrupciones globales
  e4:	f8 94       	cli
	setup();							// Dirigirse a la subrutina setup
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	sei();								// Habilitar interrupciones globales
  ea:	78 94       	sei
	
    while (1) 
    {
		if (activacion == 0x01)
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x8>
		{
		PORTD = 0xBA;
  f4:	8a eb       	ldi	r24, 0xBA	; 186
  f6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x1a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x24>
 108:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0xD2;
 10a:	82 ed       	ldi	r24, 0xD2	; 210
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x30>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x3a>
 11e:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0xEA;
 120:	8a ee       	ldi	r24, 0xEA	; 234
 122:	8b b9       	out	0x0b, r24	; 11
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	83 ed       	ldi	r24, 0xD3	; 211
 128:	90 e3       	ldi	r25, 0x30	; 48
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x46>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x50>
 134:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0x6E;
 136:	8e e6       	ldi	r24, 0x6E	; 110
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x5c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x66>
 14a:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0xC0;
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	83 ed       	ldi	r24, 0xD3	; 211
 154:	90 e3       	ldi	r25, 0x30	; 48
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x72>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x7c>
 160:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0xFC;
 162:	8c ef       	ldi	r24, 0xFC	; 252
 164:	8b b9       	out	0x0b, r24	; 11
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	83 ed       	ldi	r24, 0xD3	; 211
 16a:	90 e3       	ldi	r25, 0x30	; 48
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x88>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x92>
 176:	00 00       	nop
		_delay_ms(1000);
		activacion = 0;
 178:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	b7 cf       	rjmp	.-146    	; 0xec <main+0x8>

0000017e <__vector_3>:
	PCMSK0 |= 0x07;
}

// Vector de interrupcion PCINT0 ----------------------------------------------
ISR(PCINT0_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
	if(!(PINB&(1<<PINB0))) // Si PINB0 se encuentra apagado ejecutar instrucción
 18a:	18 99       	sbic	0x03, 0	; 3
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__vector_3+0x18>
	{
		activacion = 0x01;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	0a c0       	rjmp	.+20     	; 0x1aa <__vector_3+0x2c>
	}
	else if(!(PINB&(1<<PINB1))) // Si PINB0 se encuentra apagado ejecutar instrucción
 196:	19 99       	sbic	0x03, 1	; 3
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <__vector_3+0x24>
	{
		PORTB &= ~(1<<PORTB5);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <__vector_3+0x2c>
	}
	else if(!(PINB&(1<<PINB2))) // Si PINB0 se encuentra apagado ejecutar instrucción
 1a2:	1a 99       	sbic	0x03, 2	; 3
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__vector_3+0x2c>
	{
		PORTD = 0xFC;
 1a6:	8c ef       	ldi	r24, 0xFC	; 252
 1a8:	8b b9       	out	0x0b, r24	; 11
	}
	PCIFR |= (1<<PCIF0); // Apagar la bandera de interrupción
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	8b bb       	out	0x1b, r24	; 27
}
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
