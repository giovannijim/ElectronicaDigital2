
Lab01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002fe  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bd  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  9e:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}

// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Establecer la variable pointer1 en 0
	pointer1 = 0;
  a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <pointer1>
	puntos_jugador1 = 0;
  aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	puntos_jugador2 = 0;
  ae:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <puntos_jugador2>
	ganador1 = 0;
  b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ganador1>
	ganador2 = 0;
  b6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ganador2>
	// Se apaga tx y rx
	UCSR0B = 0;
  ba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Se establece el puerto D como salida
	PORTD = 0x00;
  be:	1b b8       	out	0x0b, r1	; 11
	DDRD |= 0xFF;
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a b9       	out	0x0a, r24	; 10
	
	// Se establece el puerto C como salida
	PORTC = 0x00;
  c6:	18 b8       	out	0x08, r1	; 8
	DDRC |= 0xFF;
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	87 b9       	out	0x07, r24	; 7
	
	// ESTABLECER PORT PB3-PB7 como salida
	DDRB |= 0XF8;
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	88 6f       	ori	r24, 0xF8	; 248
  d0:	84 b9       	out	0x04, r24	; 4
	
	// ESTABLECER PULLUP EN PUERTO B0, B1 y B2
	PORTB |= (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	85 b9       	out	0x05, r24	; 5
	//ESTABLECER PUERTO B0 Y B1 COMO ENTRADA
	DDRB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2));
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	88 7f       	andi	r24, 0xF8	; 248
  dc:	84 b9       	out	0x04, r24	; 4
	//Habilitar la interrupción puerto B
	PCICR |= (1<<PCIE0);
  de:	e8 e6       	ldi	r30, 0x68	; 104
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
	// Habilitar mascara para pines PB0, PB1, PB2
	PCMSK0 |= 0x07;
  e8:	eb e6       	ldi	r30, 0x6B	; 107
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	87 60       	ori	r24, 0x07	; 7
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <__vector_3>:
}

// Vector de interrupcion PCINT0 ----------------------------------------------
ISR(PCINT0_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
	if(!(PINB&(1<<PINB0))) // Si PINB0 se encuentra apagado ejecutar instrucción
 100:	18 99       	sbic	0x03, 0	; 3
 102:	0c c0       	rjmp	.+24     	; 0x11c <__vector_3+0x28>
	{
		activacion = 0x01;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <activacion>
		puntos_jugador1 = 0;
 10a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		puntos_jugador2 = 0;
 10e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <puntos_jugador2>
		ganador1 = 0;
 112:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ganador1>
		ganador2 = 0;
 116:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ganador2>
 11a:	1f c0       	rjmp	.+62     	; 0x15a <__vector_3+0x66>
	}
	else if(!(PINB&(1<<PINB1))) // Si PINB0 se encuentra apagado ejecutar instrucción
 11c:	19 99       	sbic	0x03, 1	; 3
 11e:	0e c0       	rjmp	.+28     	; 0x13c <__vector_3+0x48>
	{
		if (playable){
 120:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <playable>
 124:	88 23       	and	r24, r24
 126:	c9 f0       	breq	.+50     	; 0x15a <__vector_3+0x66>
			if(!ganador2){
 128:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ganador2>
 12c:	81 11       	cpse	r24, r1
 12e:	15 c0       	rjmp	.+42     	; 0x15a <__vector_3+0x66>
				puntos_jugador1++;
 130:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 13a:	0f c0       	rjmp	.+30     	; 0x15a <__vector_3+0x66>
			}
		}
	}
	else if(!(PINB&(1<<PINB2))) // Si PINB0 se encuentra apagado ejecutar instrucción
 13c:	1a 99       	sbic	0x03, 2	; 3
 13e:	0d c0       	rjmp	.+26     	; 0x15a <__vector_3+0x66>
	{
		if (playable){
 140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <playable>
 144:	88 23       	and	r24, r24
 146:	49 f0       	breq	.+18     	; 0x15a <__vector_3+0x66>
			if(!ganador1){
 148:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ganador1>
 14c:	81 11       	cpse	r24, r1
 14e:	05 c0       	rjmp	.+10     	; 0x15a <__vector_3+0x66>
			puntos_jugador2++;
 150:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <puntos_jugador2>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <puntos_jugador2>
			}
		}
	}
	PCIFR |= (1<<PCIF0); // Apagar la bandera de interrupción
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	8b bb       	out	0x1b, r24	; 27
}
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <jugador1>:

void jugador1(void){
	if (puntos_jugador1==0)
 16c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 170:	81 11       	cpse	r24, r1
 172:	07 c0       	rjmp	.+14     	; 0x182 <jugador1+0x16>
	{
		PORTB &= ~((1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5));
 174:	85 b1       	in	r24, 0x05	; 5
 176:	87 7c       	andi	r24, 0xC7	; 199
 178:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1<<PORTC0);
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	88 b9       	out	0x08, r24	; 8
 180:	08 95       	ret
	}
	else if (puntos_jugador1 == 1)
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	51 f4       	brne	.+20     	; 0x19a <jugador1+0x2e>
	{
		PORTB |= (1<<PORTB4);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~((1<<PORTB3)|(1<<PORTB5));
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	87 7d       	andi	r24, 0xD7	; 215
 190:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1<<PORTC0);	
 192:	88 b1       	in	r24, 0x08	; 8
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	88 b9       	out	0x08, r24	; 8
 198:	08 95       	ret
	}
	else if (puntos_jugador1 == 2)
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	51 f4       	brne	.+20     	; 0x1b2 <jugador1+0x46>
	{
		PORTB |= (1<<PORTB3);
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~((1<<PORTB4)|(1<<PORTB5));
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	8f 7c       	andi	r24, 0xCF	; 207
 1a8:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1<<PORTC0);
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	08 95       	ret
	}
	else if (puntos_jugador1 == 3)
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	51 f4       	brne	.+20     	; 0x1ca <jugador1+0x5e>
	{
		PORTB |= (1<<PORTB5);
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~((1<<PORTB3)|(1<<PORTB4));
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	87 7e       	andi	r24, 0xE7	; 231
 1c0:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1<<PORTC0);
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	88 b9       	out	0x08, r24	; 8
 1c8:	08 95       	ret
	}
	else if (puntos_jugador1 == 4){
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	51 f4       	brne	.+20     	; 0x1e2 <jugador1+0x76>
		PORTB &= ~((1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5));
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	87 7c       	andi	r24, 0xC7	; 199
 1d2:	85 b9       	out	0x05, r24	; 5
		PORTC |= (1<<PORTC0);
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	88 b9       	out	0x08, r24	; 8
		ganador1 = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ganador1>
 1e0:	08 95       	ret
	}
	else {
		puntos_jugador1 = 0;	
 1e2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 1e6:	08 95       	ret

000001e8 <jugador2>:
	}
}

void jugador2(void){
	if (puntos_jugador2==0)
 1e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <puntos_jugador2>
 1ec:	81 11       	cpse	r24, r1
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <jugador2+0x10>
	{
		PORTC &= ~((1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4));
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	81 7e       	andi	r24, 0xE1	; 225
 1f4:	88 b9       	out	0x08, r24	; 8
 1f6:	08 95       	ret
	}
	else if (puntos_jugador2 == 1)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	39 f4       	brne	.+14     	; 0x20a <jugador2+0x22>
	{
		PORTC |= (1<<PORTC1);
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4));
 202:	88 b1       	in	r24, 0x08	; 8
 204:	83 7e       	andi	r24, 0xE3	; 227
 206:	88 b9       	out	0x08, r24	; 8
 208:	08 95       	ret
	}
	else if (puntos_jugador2 == 2)
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	39 f4       	brne	.+14     	; 0x21c <jugador2+0x34>
	{
		PORTC |= (1<<PORTC2);
 20e:	88 b1       	in	r24, 0x08	; 8
 210:	84 60       	ori	r24, 0x04	; 4
 212:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1<<PORTC1)|(1<<PORTC3)|(1<<PORTC4));
 214:	88 b1       	in	r24, 0x08	; 8
 216:	85 7e       	andi	r24, 0xE5	; 229
 218:	88 b9       	out	0x08, r24	; 8
 21a:	08 95       	ret
	}
	else if (puntos_jugador2 == 3)
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	39 f4       	brne	.+14     	; 0x22e <jugador2+0x46>
	{
		PORTC |= (1<<PORTC3);
 220:	88 b1       	in	r24, 0x08	; 8
 222:	88 60       	ori	r24, 0x08	; 8
 224:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1<<PORTC1)|(1<<PORTC2)|(1<<PORTC4));
 226:	88 b1       	in	r24, 0x08	; 8
 228:	89 7e       	andi	r24, 0xE9	; 233
 22a:	88 b9       	out	0x08, r24	; 8
 22c:	08 95       	ret
	}
	else if (puntos_jugador2 == 4){
 22e:	84 30       	cpi	r24, 0x04	; 4
 230:	51 f4       	brne	.+20     	; 0x246 <jugador2+0x5e>
		PORTC |= (1<<PORTC4);
 232:	88 b1       	in	r24, 0x08	; 8
 234:	80 61       	ori	r24, 0x10	; 16
 236:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3));
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	81 7f       	andi	r24, 0xF1	; 241
 23c:	88 b9       	out	0x08, r24	; 8
		ganador2 = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ganador2>
 244:	08 95       	ret
	}
	else {
		puntos_jugador2 = 0;
 246:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <puntos_jugador2>
 24a:	08 95       	ret

0000024c <ganador>:
	}
}
//RUTINA PARA CHECKEAR EL GANADOR
void ganador(void){
	if (ganador1)
 24c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ganador1>
 250:	88 23       	and	r24, r24
 252:	61 f0       	breq	.+24     	; 0x26c <ganador+0x20>
	{
		PORTB |= ((1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5));
 254:	85 b1       	in	r24, 0x05	; 5
 256:	88 63       	ori	r24, 0x38	; 56
 258:	85 b9       	out	0x05, r24	; 5
		PORTC |= (1<<PORTC0);
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4));
 260:	88 b1       	in	r24, 0x08	; 8
 262:	81 7e       	andi	r24, 0xE1	; 225
 264:	88 b9       	out	0x08, r24	; 8
		PORTD = 0xC0;
 266:	80 ec       	ldi	r24, 0xC0	; 192
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	08 95       	ret
	}
	else if (ganador2){
 26c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ganador2>
 270:	88 23       	and	r24, r24
 272:	59 f0       	breq	.+22     	; 0x28a <ganador+0x3e>
		PORTC |= ((1<<PORTC4)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3));
 274:	88 b1       	in	r24, 0x08	; 8
 276:	8e 61       	ori	r24, 0x1E	; 30
 278:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~((1<<PORTB3)|(1<<PORTB4)|(1<<PORTB5));
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	87 7c       	andi	r24, 0xC7	; 199
 27e:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1<<PORTC0);
 280:	88 b1       	in	r24, 0x08	; 8
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	88 b9       	out	0x08, r24	; 8
		PORTD = 0x6E;
 286:	8e e6       	ldi	r24, 0x6E	; 110
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	08 95       	ret

0000028c <main>:
void jugador2(void);
void ganador(void);

int main(void)
{
	cli();								// Deshabilitar interrupciones globales
 28c:	f8 94       	cli
	setup();							// Dirigirse a la subrutina setup
 28e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	sei();								// Habilitar interrupciones globales
 292:	78 94       	sei
	
    while (1) 
    {
		//PORTB |= 0xF8;
		//PORTC |= 0x1F;
		jugador1();
 294:	0e 94 b6 00 	call	0x16c	; 0x16c <jugador1>
		jugador2();
 298:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <jugador2>
		ganador();
 29c:	0e 94 26 01 	call	0x24c	; 0x24c <ganador>
		
		if (activacion == 0x01)
 2a0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <activacion>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	b1 f7       	brne	.-20     	; 0x294 <main+0x8>
		{
			PORTD = CuentaRegresiva [pointer1];
 2a8:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pointer1>
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	e0 50       	subi	r30, 0x00	; 0
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	80 81       	ld	r24, Z
 2b4:	8b b9       	out	0x0b, r24	; 11
			if (pointer1 < 5){
 2b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pointer1>
 2ba:	85 30       	cpi	r24, 0x05	; 5
 2bc:	68 f4       	brcc	.+26     	; 0x2d8 <main+0x4c>
				pointer1 ++;
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pointer1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	83 ed       	ldi	r24, 0xD3	; 211
 2c8:	90 e3       	ldi	r25, 0x30	; 48
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x3e>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x48>
 2d4:	00 00       	nop
 2d6:	de cf       	rjmp	.-68     	; 0x294 <main+0x8>
				_delay_ms(1000);}
			else {
				activacion = 0;
 2d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <activacion>
				pointer1 = 0;
 2dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <pointer1>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	83 ed       	ldi	r24, 0xD3	; 211
 2e4:	90 e3       	ldi	r25, 0x30	; 48
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x5a>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x64>
 2f0:	00 00       	nop
				_delay_ms(1000);
				playable = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <playable>
 2f8:	cd cf       	rjmp	.-102    	; 0x294 <main+0x8>

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
