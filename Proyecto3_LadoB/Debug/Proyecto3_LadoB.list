
Proyecto3_LadoB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005188  08005188  00006188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d8  080051d8  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e0  080051e0  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000061e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080051e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000014  080051fc  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080051fc  00007110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c01b  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb9  00000000  00000000  0001305f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00014c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  00015678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f8  00000000  00000000  00015e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df0d  00000000  00000000  00037397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb075  00000000  00000000  000452a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b34  00000000  00000000  0011035c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00112e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005170 	.word	0x08005170

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08005170 	.word	0x08005170

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <verificarAP.1>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  void verificarAP(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	f8c7 c004 	str.w	ip, [r7, #4]
          SSD_D_Pin, SSD_E_Pin, SSD_F_Pin,
          SSD_G_Pin
      };

      // Lee el byte correspondiente al estado de los pines
      uint8_t estado = pinStates[availableParkings];
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <verificarAP.1+0x58>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <verificarAP.1+0x5c>)
 8000506:	5c9b      	ldrb	r3, [r3, r2]
 8000508:	72fb      	strb	r3, [r7, #11]

      // Itera sobre cada pin y configura su estado
      for (int i = 0; i < 7; i++) {
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e015      	b.n	800053c <verificarAP.1+0x48>
          HAL_GPIO_WritePin(ports[i], pins[i], (estado >> i) & 0x01);
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <verificarAP.1+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000518:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <verificarAP.1+0x64>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	fa42 f303 	asr.w	r3, r2, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	f001 f8ff 	bl	8001734 <HAL_GPIO_WritePin>
      for (int i = 0; i < 7; i++) {
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b06      	cmp	r3, #6
 8000540:	dde6      	ble.n	8000510 <verificarAP.1+0x1c>
      }
  }
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000cc 	.word	0x200000cc
 8000550:	08005188 	.word	0x08005188
 8000554:	08005194 	.word	0x08005194
 8000558:	080051b0 	.word	0x080051b0

0800055c <main>:
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
int main(void)
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000568:	f000 fd2c 	bl	8000fc4 <HAL_Init>
  SystemClock_Config();
 800056c:	f000 f912 	bl	8000794 <SystemClock_Config>
  MX_GPIO_Init();
 8000570:	f000 f9d6 	bl	8000920 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000574:	f000 f97c 	bl	8000870 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f9a8 	bl	80008cc <MX_USART2_UART_Init>
		  HAL_GPIO_WritePin(LED_SENS4_G_GPIO_Port, LED_SENS4_G_Pin, 0);
		  HAL_GPIO_WritePin(LED_SENS4_R_GPIO_Port, LED_SENS4_R_Pin, 1);
	  }
  }
  // Inicia la recepción en modo interrupción
  HAL_I2C_Slave_Receive_IT(&hi2c1, receivedData, 1);  // Prepararse para recibir otro byte
 800057c:	2201      	movs	r2, #1
 800057e:	490b      	ldr	r1, [pc, #44]	@ (80005ac <main+0x50>)
 8000580:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <main+0x54>)
 8000582:	f001 fa63 	bl	8001a4c <HAL_I2C_Slave_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  availableParkings = contarSensoresDisponibles();
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	469c      	mov	ip, r3
 800058a:	f000 f815 	bl	80005b8 <contarSensoresDisponibles.0>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <main+0x58>)
 8000594:	701a      	strb	r2, [r3, #0]
	  verificarAP();
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	469c      	mov	ip, r3
 800059a:	f7ff ffab 	bl	80004f4 <verificarAP.1>
	  verificarEstadoLEDS();
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	469c      	mov	ip, r3
 80005a2:	f000 f867 	bl	8000674 <verificarEstadoLEDS.2>
	  availableParkings = contarSensoresDisponibles();
 80005a6:	bf00      	nop
 80005a8:	e7ed      	b.n	8000586 <main+0x2a>
 80005aa:	bf00      	nop
 80005ac:	200000d0 	.word	0x200000d0
 80005b0:	20000030 	.word	0x20000030
 80005b4:	200000cc 	.word	0x200000cc

080005b8 <contarSensoresDisponibles.0>:
  uint8_t contarSensoresDisponibles() {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	f8c7 c004 	str.w	ip, [r7, #4]
      uint8_t contador = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
      contador = contador + DisponibilidadOtherSTM;
 80005c6:	4b29      	ldr	r3, [pc, #164]	@ (800066c <contarSensoresDisponibles.0+0xb4>)
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	4413      	add	r3, r2
 80005ce:	73fb      	strb	r3, [r7, #15]
      if (byteControl & 0x01) {
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <contarSensoresDisponibles.0+0x2a>
              contador++;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3301      	adds	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x02) {
 80005e2:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <contarSensoresDisponibles.0+0x3c>
		  contador++;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	3301      	adds	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x04) {
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <contarSensoresDisponibles.0+0x4e>
		  contador++;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3301      	adds	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x08) {
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <contarSensoresDisponibles.0+0x60>
		  contador++;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	3301      	adds	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x10) {
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <contarSensoresDisponibles.0+0x72>
		  contador++;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	3301      	adds	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x20) {
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0320 	and.w	r3, r3, #32
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <contarSensoresDisponibles.0+0x84>
		  contador++;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	3301      	adds	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x40) {
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <contarSensoresDisponibles.0+0x96>
		  contador++;
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	3301      	adds	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
	  if (byteControl & 0x80) {
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <contarSensoresDisponibles.0+0xb8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b25b      	sxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	da02      	bge.n	800065e <contarSensoresDisponibles.0+0xa6>
		  contador++;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3301      	adds	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
      return contador;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	200000cd 	.word	0x200000cd
 8000670:	20000004 	.word	0x20000004

08000674 <verificarEstadoLEDS.2>:
  void verificarEstadoLEDS(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (Sensor1 == AVAILABLE) {
 800067e:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <verificarEstadoLEDS.2+0x104>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d109      	bne.n	800069c <verificarEstadoLEDS.2+0x28>
		  HAL_GPIO_WritePin(LED_SENS1_G_GPIO_Port, LED_SENS1_G_Pin, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	2102      	movs	r1, #2
 800068c:	483b      	ldr	r0, [pc, #236]	@ (800077c <verificarEstadoLEDS.2+0x108>)
 800068e:	f001 f851 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS1_R_GPIO_Port, LED_SENS1_R_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4839      	ldr	r0, [pc, #228]	@ (800077c <verificarEstadoLEDS.2+0x108>)
 8000698:	f001 f84c 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor1 == NOT_AVAILABLE) {
 800069c:	4b36      	ldr	r3, [pc, #216]	@ (8000778 <verificarEstadoLEDS.2+0x104>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d109      	bne.n	80006ba <verificarEstadoLEDS.2+0x46>
		  HAL_GPIO_WritePin(LED_SENS1_G_GPIO_Port, LED_SENS1_G_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	4834      	ldr	r0, [pc, #208]	@ (800077c <verificarEstadoLEDS.2+0x108>)
 80006ac:	f001 f842 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS1_R_GPIO_Port, LED_SENS1_R_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	4831      	ldr	r0, [pc, #196]	@ (800077c <verificarEstadoLEDS.2+0x108>)
 80006b6:	f001 f83d 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor2 == AVAILABLE) {
 80006ba:	4b31      	ldr	r3, [pc, #196]	@ (8000780 <verificarEstadoLEDS.2+0x10c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d109      	bne.n	80006d8 <verificarEstadoLEDS.2+0x64>
		  HAL_GPIO_WritePin(LED_SENS2_G_GPIO_Port, LED_SENS2_G_Pin, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	482e      	ldr	r0, [pc, #184]	@ (8000784 <verificarEstadoLEDS.2+0x110>)
 80006ca:	f001 f833 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS2_R_GPIO_Port, LED_SENS2_R_Pin, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2110      	movs	r1, #16
 80006d2:	482a      	ldr	r0, [pc, #168]	@ (800077c <verificarEstadoLEDS.2+0x108>)
 80006d4:	f001 f82e 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor2 == NOT_AVAILABLE) {
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <verificarEstadoLEDS.2+0x10c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d109      	bne.n	80006f6 <verificarEstadoLEDS.2+0x82>
		  HAL_GPIO_WritePin(LED_SENS2_G_GPIO_Port, LED_SENS2_G_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2101      	movs	r1, #1
 80006e6:	4827      	ldr	r0, [pc, #156]	@ (8000784 <verificarEstadoLEDS.2+0x110>)
 80006e8:	f001 f824 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS2_R_GPIO_Port, LED_SENS2_R_Pin, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2110      	movs	r1, #16
 80006f0:	4822      	ldr	r0, [pc, #136]	@ (800077c <verificarEstadoLEDS.2+0x108>)
 80006f2:	f001 f81f 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor3 == AVAILABLE) {
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <verificarEstadoLEDS.2+0x114>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d109      	bne.n	8000714 <verificarEstadoLEDS.2+0xa0>
		  HAL_GPIO_WritePin(LED_SENS3_G_GPIO_Port, LED_SENS3_G_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	4821      	ldr	r0, [pc, #132]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 8000706:	f001 f815 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS3_R_GPIO_Port, LED_SENS3_R_Pin, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2102      	movs	r1, #2
 800070e:	481f      	ldr	r0, [pc, #124]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 8000710:	f001 f810 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor3 == NOT_AVAILABLE) {
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <verificarEstadoLEDS.2+0x114>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <verificarEstadoLEDS.2+0xbe>
		  HAL_GPIO_WritePin(LED_SENS3_G_GPIO_Port, LED_SENS3_G_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 8000724:	f001 f806 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS3_R_GPIO_Port, LED_SENS3_R_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2102      	movs	r1, #2
 800072c:	4817      	ldr	r0, [pc, #92]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 800072e:	f001 f801 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor4 == AVAILABLE) {
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <verificarEstadoLEDS.2+0x11c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b01      	cmp	r3, #1
 800073a:	d109      	bne.n	8000750 <verificarEstadoLEDS.2+0xdc>
		  HAL_GPIO_WritePin(LED_SENS4_G_GPIO_Port, LED_SENS4_G_Pin, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	2108      	movs	r1, #8
 8000740:	4812      	ldr	r0, [pc, #72]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 8000742:	f000 fff7 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS4_R_GPIO_Port, LED_SENS4_R_Pin, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2104      	movs	r1, #4
 800074a:	4810      	ldr	r0, [pc, #64]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 800074c:	f000 fff2 	bl	8001734 <HAL_GPIO_WritePin>
	  if (Sensor4 == NOT_AVAILABLE) {
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <verificarEstadoLEDS.2+0x11c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <verificarEstadoLEDS.2+0xfa>
		  HAL_GPIO_WritePin(LED_SENS4_G_GPIO_Port, LED_SENS4_G_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	480b      	ldr	r0, [pc, #44]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 8000760:	f000 ffe8 	bl	8001734 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_SENS4_R_GPIO_Port, LED_SENS4_R_Pin, 1);
 8000764:	2201      	movs	r2, #1
 8000766:	2104      	movs	r1, #4
 8000768:	4808      	ldr	r0, [pc, #32]	@ (800078c <verificarEstadoLEDS.2+0x118>)
 800076a:	f000 ffe3 	bl	8001734 <HAL_GPIO_WritePin>
  }
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	40020000 	.word	0x40020000
 8000780:	20000001 	.word	0x20000001
 8000784:	40020400 	.word	0x40020400
 8000788:	20000002 	.word	0x20000002
 800078c:	40020800 	.word	0x40020800
 8000790:	20000003 	.word	0x20000003

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2234      	movs	r2, #52	@ 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fcb8 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <SystemClock_Config+0xd4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <SystemClock_Config+0xd4>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <SystemClock_Config+0xd4>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	4b24      	ldr	r3, [pc, #144]	@ (800086c <SystemClock_Config+0xd8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007e0:	4a22      	ldr	r2, [pc, #136]	@ (800086c <SystemClock_Config+0xd8>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <SystemClock_Config+0xd8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000804:	2300      	movs	r3, #0
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000808:	2310      	movs	r3, #16
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800080c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000810:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000812:	2304      	movs	r3, #4
 8000814:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fa86 	bl	8003d34 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800082e:	f000 fa51 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f002 ff26 	bl	80036a0 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800085a:	f000 fa3b 	bl	8000cd4 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	@ 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2202      	movs	r2, #2
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f000 ff73 	bl	8001798 <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 fa0c 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000030 	.word	0x20000030
 80008c4:	40005400 	.word	0x40005400
 80008c8:	000186a0 	.word	0x000186a0

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	@ (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USART2_UART_Init+0x4c>)
 8000904:	f003 fcb4 	bl	8004270 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f9e1 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000084 	.word	0x20000084
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b59      	ldr	r3, [pc, #356]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a58      	ldr	r2, [pc, #352]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b56      	ldr	r3, [pc, #344]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b52      	ldr	r3, [pc, #328]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a51      	ldr	r2, [pc, #324]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a4a      	ldr	r2, [pc, #296]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b48      	ldr	r3, [pc, #288]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b44      	ldr	r3, [pc, #272]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a43      	ldr	r2, [pc, #268]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b41      	ldr	r3, [pc, #260]	@ (8000aa0 <MX_GPIO_Init+0x180>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENS3_G_Pin|LED_SENS3_R_Pin|LED_SENS4_R_Pin|LED_SENS4_G_Pin
 80009a6:	2201      	movs	r2, #1
 80009a8:	f240 116f 	movw	r1, #367	@ 0x16f
 80009ac:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <MX_GPIO_Init+0x184>)
 80009ae:	f000 fec1 	bl	8001734 <HAL_GPIO_WritePin>
                          |SSD_D_Pin|SSD_E_Pin|SSD_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SENS1_R_Pin|LED_SENS1_G_Pin|LED_SENS2_R_Pin|SSD_A_Pin
 80009b2:	2201      	movs	r2, #1
 80009b4:	f641 0113 	movw	r1, #6163	@ 0x1813
 80009b8:	483b      	ldr	r0, [pc, #236]	@ (8000aa8 <MX_GPIO_Init+0x188>)
 80009ba:	f000 febb 	bl	8001734 <HAL_GPIO_WritePin>
                          |SSD_F_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SENS2_G_Pin|SSD_C_Pin|SSD_B_Pin|LED_SENS1_RB7_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f241 0185 	movw	r1, #4229	@ 0x1085
 80009c4:	4839      	ldr	r0, [pc, #228]	@ (8000aac <MX_GPIO_Init+0x18c>)
 80009c6:	f000 feb5 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4830      	ldr	r0, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x184>)
 80009e2:	f000 fd13 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS3_G_Pin LED_SENS3_R_Pin LED_SENS4_R_Pin LED_SENS4_G_Pin
                           SSD_D_Pin SSD_E_Pin SSD_G_Pin */
  GPIO_InitStruct.Pin = LED_SENS3_G_Pin|LED_SENS3_R_Pin|LED_SENS4_R_Pin|LED_SENS4_G_Pin
 80009e6:	f240 136f 	movw	r3, #367	@ 0x16f
 80009ea:	617b      	str	r3, [r7, #20]
                          |SSD_D_Pin|SSD_E_Pin|SSD_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4829      	ldr	r0, [pc, #164]	@ (8000aa4 <MX_GPIO_Init+0x184>)
 8000a00:	f000 fd04 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS1_R_Pin LED_SENS1_G_Pin LED_SENS2_R_Pin SSD_A_Pin
                           SSD_F_Pin */
  GPIO_InitStruct.Pin = LED_SENS1_R_Pin|LED_SENS1_G_Pin|LED_SENS2_R_Pin|SSD_A_Pin
 8000a04:	f641 0313 	movw	r3, #6163	@ 0x1813
 8000a08:	617b      	str	r3, [r7, #20]
                          |SSD_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4822      	ldr	r0, [pc, #136]	@ (8000aa8 <MX_GPIO_Init+0x188>)
 8000a1e:	f000 fcf5 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8000a22:	23e0      	movs	r3, #224	@ 0xe0
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	481c      	ldr	r0, [pc, #112]	@ (8000aa8 <MX_GPIO_Init+0x188>)
 8000a38:	f000 fce8 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS2_G_Pin SSD_C_Pin SSD_B_Pin LED_SENS1_RB7_Pin */
  GPIO_InitStruct.Pin = LED_SENS2_G_Pin|SSD_C_Pin|SSD_B_Pin|LED_SENS1_RB7_Pin;
 8000a3c:	f241 0385 	movw	r3, #4229	@ 0x1085
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	@ (8000aac <MX_GPIO_Init+0x18c>)
 8000a56:	f000 fcd9 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000a5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480e      	ldr	r0, [pc, #56]	@ (8000aac <MX_GPIO_Init+0x18c>)
 8000a72:	f000 fccb 	bl	800140c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f000 fbef 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a80:	2017      	movs	r0, #23
 8000a82:	f000 fc08 	bl	8001296 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2028      	movs	r0, #40	@ 0x28
 8000a8c:	f000 fbe7 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a90:	2028      	movs	r0, #40	@ 0x28
 8000a92:	f000 fc00 	bl	8001296 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	@ 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_GPIO_EXTI_Callback>:
		}
	}

}*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
    counterOutside++; // Para pruebas
 8000aba:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf4 <HAL_GPIO_EXTI_Callback+0x144>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf4 <HAL_GPIO_EXTI_Callback+0x144>)
 8000ac2:	6013      	str	r3, [r2, #0]
    currentMillis = HAL_GetTick();
 8000ac4:	f000 fae4 	bl	8001090 <HAL_GetTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a4b      	ldr	r2, [pc, #300]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000acc:	6013      	str	r3, [r2, #0]

    // Verificar qué botón fue presionado y aplicar el antirrebote
    if (GPIO_Pin == GPIO_PIN_8 && (currentMillis - previousMillis[0] > 250))
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ad4:	d11f      	bne.n	8000b16 <HAL_GPIO_EXTI_Callback+0x66>
 8000ad6:	4b48      	ldr	r3, [pc, #288]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b48      	ldr	r3, [pc, #288]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000ae2:	d918      	bls.n	8000b16 <HAL_GPIO_EXTI_Callback+0x66>
    {
        counterInside[0]++; // Para pruebas del botón 1
 8000ae4:	4b46      	ldr	r3, [pc, #280]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a45      	ldr	r2, [pc, #276]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000aec:	6013      	str	r3, [r2, #0]
        previousMillis[0] = currentMillis;
 8000aee:	4b42      	ldr	r3, [pc, #264]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a42      	ldr	r2, [pc, #264]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000af4:	6013      	str	r3, [r2, #0]
        byteControl^= 0b00010000;
 8000af6:	4b43      	ldr	r3, [pc, #268]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	f083 0310 	eor.w	r3, r3, #16
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b40      	ldr	r3, [pc, #256]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b02:	701a      	strb	r2, [r3, #0]
        Tx[0]=byteControl;
 8000b04:	4b3f      	ldr	r3, [pc, #252]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b3f      	ldr	r3, [pc, #252]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x158>)
 8000b0a:	701a      	strb	r2, [r3, #0]
        Rx[0]=byteControl;
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b3e      	ldr	r3, [pc, #248]	@ (8000c0c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e069      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x13a>
        //HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));
    }
    else if (GPIO_Pin == GPIO_PIN_5 && (currentMillis - previousMillis[1] > 250))
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b20      	cmp	r3, #32
 8000b1a:	d11f      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0xac>
 8000b1c:	4b36      	ldr	r3, [pc, #216]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2bfa      	cmp	r3, #250	@ 0xfa
 8000b28:	d918      	bls.n	8000b5c <HAL_GPIO_EXTI_Callback+0xac>
    {
        counterInside[1]++; // Para pruebas del botón 2
 8000b2a:	4b35      	ldr	r3, [pc, #212]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a33      	ldr	r2, [pc, #204]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000b32:	6053      	str	r3, [r2, #4]
        previousMillis[1] = currentMillis;
 8000b34:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a30      	ldr	r2, [pc, #192]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000b3a:	6053      	str	r3, [r2, #4]
        byteControl^= 0b00100000;
 8000b3c:	4b31      	ldr	r3, [pc, #196]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f083 0320 	eor.w	r3, r3, #32
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b48:	701a      	strb	r2, [r3, #0]
        Tx[0]=byteControl;
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x158>)
 8000b50:	701a      	strb	r2, [r3, #0]
        Rx[0]=byteControl;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e046      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x13a>
        //HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));

    }
    else if (GPIO_Pin == GPIO_PIN_6 && (currentMillis - previousMillis[2] > 250))
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	2b40      	cmp	r3, #64	@ 0x40
 8000b60:	d11f      	bne.n	8000ba2 <HAL_GPIO_EXTI_Callback+0xf2>
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2bfa      	cmp	r3, #250	@ 0xfa
 8000b6e:	d918      	bls.n	8000ba2 <HAL_GPIO_EXTI_Callback+0xf2>
    {
        counterInside[2]++; // Para pruebas del botón 3
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000b78:	6093      	str	r3, [r2, #8]
        previousMillis[2] = currentMillis;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000b80:	6093      	str	r3, [r2, #8]
        byteControl^= 0b01000000;
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b8e:	701a      	strb	r2, [r3, #0]
        Tx[0]=byteControl;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x158>)
 8000b96:	701a      	strb	r2, [r3, #0]
        Rx[0]=byteControl;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e023      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x13a>
        //HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));
    }
    else if (GPIO_Pin == GPIO_PIN_7 && (currentMillis - previousMillis[3] > 250))
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	2b80      	cmp	r3, #128	@ 0x80
 8000ba6:	d120      	bne.n	8000bea <HAL_GPIO_EXTI_Callback+0x13a>
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2bfa      	cmp	r3, #250	@ 0xfa
 8000bb4:	d919      	bls.n	8000bea <HAL_GPIO_EXTI_Callback+0x13a>
    {
        counterInside[3]++; // Para pruebas del botón 4
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <HAL_GPIO_EXTI_Callback+0x150>)
 8000bbe:	60d3      	str	r3, [r2, #12]

        previousMillis[3] = currentMillis;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x148>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_GPIO_EXTI_Callback+0x14c>)
 8000bc6:	60d3      	str	r3, [r2, #12]
        byteControl^= 0b10000000;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000bd6:	701a      	strb	r2, [r3, #0]
		Tx[0]=byteControl;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_GPIO_EXTI_Callback+0x158>)
 8000bde:	701a      	strb	r2, [r3, #0]
		Rx[0]=byteControl;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <HAL_GPIO_EXTI_Callback+0x15c>)
 8000be6:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&huart2, Tx, sizeof(Tx));
    }
}
 8000be8:	e7ff      	b.n	8000bea <HAL_GPIO_EXTI_Callback+0x13a>
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000f8 	.word	0x200000f8
 8000bf8:	200000f4 	.word	0x200000f4
 8000bfc:	200000e4 	.word	0x200000e4
 8000c00:	200000fc 	.word	0x200000fc
 8000c04:	20000004 	.word	0x20000004
 8000c08:	200000e0 	.word	0x200000e0
 8000c0c:	200000dc 	.word	0x200000dc

08000c10 <HAL_I2C_ListenCpltCallback>:

//I2C
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	//Pone el disposivo a escuchar
	HAL_I2C_EnableListen_IT(hi2c);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 f86d 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
 8000c34:	4613      	mov	r3, r2
 8000c36:	803b      	strh	r3, [r7, #0]
	//Cuando recibe algo verifica la dirección
	if (TransferDirection== I2C_DIRECTION_TRANSMIT){
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d106      	bne.n	8000c4c <HAL_I2C_AddrCallback+0x24>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, I2C_Rx, sizeof(I2C_Rx), I2C_FIRST_AND_LAST_FRAME);
 8000c3e:	2308      	movs	r3, #8
 8000c40:	2201      	movs	r2, #1
 8000c42:	4909      	ldr	r1, [pc, #36]	@ (8000c68 <HAL_I2C_AddrCallback+0x40>)
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 ffe4 	bl	8001c12 <HAL_I2C_Slave_Seq_Receive_IT>
	} else{
		Tx[0]=byteControl;
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, Tx, sizeof(Tx), I2C_FIRST_AND_LAST_FRAME);
	}
}
 8000c4a:	e009      	b.n	8000c60 <HAL_I2C_AddrCallback+0x38>
		Tx[0]=byteControl;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <HAL_I2C_AddrCallback+0x44>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <HAL_I2C_AddrCallback+0x48>)
 8000c52:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, Tx, sizeof(Tx), I2C_FIRST_AND_LAST_FRAME);
 8000c54:	2308      	movs	r3, #8
 8000c56:	2201      	movs	r2, #1
 8000c58:	4905      	ldr	r1, [pc, #20]	@ (8000c70 <HAL_I2C_AddrCallback+0x48>)
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 ff66 	bl	8001b2c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000d8 	.word	0x200000d8
 8000c6c:	20000004 	.word	0x20000004
 8000c70:	200000e0 	.word	0x200000e0

08000c74 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	//Al terminar la recepción de datos envía el byteControl (Parqueos) y vuelve a escuchar
	byteControl=I2C_Rx[0];
 8000c7c:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8000c82:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, I2C_Rx, sizeof(Tx));
 8000c84:	2201      	movs	r2, #1
 8000c86:	4905      	ldr	r1, [pc, #20]	@ (8000c9c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8000c88:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8000c8a:	f003 fb41 	bl	8004310 <HAL_UART_Transmit_IT>
	HAL_I2C_EnableListen_IT(hi2c);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f001 f832 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000d8 	.word	0x200000d8
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20000084 	.word	0x20000084

08000ca8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	//Al terminar el envío de datos se pone a escuchar
	HAL_I2C_EnableListen_IT(hi2c);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f001 f821 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	//Si hay errores, se pone a escuchar
}
	HAL_I2C_EnableListen_IT(hi2c);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f001 f816 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fa92 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13c      	bne.n	8000dcc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d6e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d80:	2304      	movs	r3, #4
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <HAL_I2C_MspInit+0xac>)
 8000d8c:	f000 fb3e 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	201f      	movs	r0, #31
 8000db2:	f000 fa54 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000db6:	201f      	movs	r0, #31
 8000db8:	f000 fa6d 	bl	8001296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2020      	movs	r0, #32
 8000dc2:	f000 fa4c 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	f000 fa65 	bl	8001296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	@ 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e74 <HAL_UART_MspInit+0x94>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d133      	bne.n	8000e6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <HAL_UART_MspInit+0x98>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <HAL_UART_MspInit+0x98>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0x98>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_UART_MspInit+0x98>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <HAL_UART_MspInit+0x98>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_UART_MspInit+0x98>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <HAL_UART_MspInit+0x9c>)
 8000e56:	f000 fad9 	bl	800140c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2026      	movs	r0, #38	@ 0x26
 8000e60:	f000 f9fd 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e64:	2026      	movs	r0, #38	@ 0x26
 8000e66:	f000 fa16 	bl	8001296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f8c7 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f000 fc40 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000ee8:	2040      	movs	r0, #64	@ 0x40
 8000eea:	f000 fc3d 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000eee:	2080      	movs	r0, #128	@ 0x80
 8000ef0:	f000 fc3a 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000ef4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000ef8:	f000 fc36 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <I2C1_EV_IRQHandler+0x10>)
 8000f06:	f000 ff2d 	bl	8001d64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000030 	.word	0x20000030

08000f14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <I2C1_ER_IRQHandler+0x10>)
 8000f1a:	f001 f876 	bl	800200a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000030 	.word	0x20000030

08000f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <USART2_IRQHandler+0x10>)
 8000f2e:	f003 fa25 	bl	800437c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000084 	.word	0x20000084

08000f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f44:	f000 fc10 	bl	8001768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f74:	f7ff ffea 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f004 f8c3 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fadb 	bl	800055c <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fb4:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8000fb8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fbc:	20000110 	.word	0x20000110

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f92b 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fe72 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f943 	bl	80012b2 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f90b 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000008 	.word	0x20000008
 8001060:	20000010 	.word	0x20000010
 8001064:	2000000c 	.word	0x2000000c

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000010 	.word	0x20000010
 800108c:	2000010c 	.word	0x2000010c

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000010c 	.word	0x2000010c

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	@ (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff feda 	bl	8001090 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d008      	beq.n	80012fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e052      	b.n	80013a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0216 	bic.w	r2, r2, #22
 800130a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800131a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_DMA_Abort+0x62>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0208 	bic.w	r2, r2, #8
 800133a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134c:	e013      	b.n	8001376 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134e:	f7ff fe9f 	bl	8001090 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b05      	cmp	r3, #5
 800135a:	d90c      	bls.n	8001376 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e015      	b.n	80013a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e4      	bne.n	800134e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	223f      	movs	r2, #63	@ 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d004      	beq.n	80013c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00c      	b.n	80013e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2205      	movs	r2, #5
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e165      	b.n	80016f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8154 	bne.w	80016ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80ae 	beq.w	80016ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b5d      	ldr	r3, [pc, #372]	@ (800170c <HAL_GPIO_Init+0x300>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	4a5c      	ldr	r2, [pc, #368]	@ (800170c <HAL_GPIO_Init+0x300>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a2:	4b5a      	ldr	r3, [pc, #360]	@ (800170c <HAL_GPIO_Init+0x300>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ae:	4a58      	ldr	r2, [pc, #352]	@ (8001710 <HAL_GPIO_Init+0x304>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001714 <HAL_GPIO_Init+0x308>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001718 <HAL_GPIO_Init+0x30c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	@ (800171c <HAL_GPIO_Init+0x310>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001720 <HAL_GPIO_Init+0x314>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001724 <HAL_GPIO_Init+0x318>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x20a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001728 <HAL_GPIO_Init+0x31c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x206>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a49      	ldr	r2, [pc, #292]	@ (800172c <HAL_GPIO_Init+0x320>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x202>
 800160a:	2306      	movs	r3, #6
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800160e:	2307      	movs	r3, #7
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001626:	2300      	movs	r3, #0
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001638:	4935      	ldr	r1, [pc, #212]	@ (8001710 <HAL_GPIO_Init+0x304>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001646:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <HAL_GPIO_Init+0x324>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166a:	4a31      	ldr	r2, [pc, #196]	@ (8001730 <HAL_GPIO_Init+0x324>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001670:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <HAL_GPIO_Init+0x324>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001694:	4a26      	ldr	r2, [pc, #152]	@ (8001730 <HAL_GPIO_Init+0x324>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169a:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <HAL_GPIO_Init+0x324>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016be:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e8:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <HAL_GPIO_Init+0x324>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	f67f ae96 	bls.w	8001428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	@ 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f992 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e12b      	b.n	8001a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fab6 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2224      	movs	r2, #36	@ 0x24
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017fc:	f002 f842 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a81      	ldr	r2, [pc, #516]	@ (8001a0c <HAL_I2C_Init+0x274>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d807      	bhi.n	800181c <HAL_I2C_Init+0x84>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a80      	ldr	r2, [pc, #512]	@ (8001a10 <HAL_I2C_Init+0x278>)
 8001810:	4293      	cmp	r3, r2
 8001812:	bf94      	ite	ls
 8001814:	2301      	movls	r3, #1
 8001816:	2300      	movhi	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e006      	b.n	800182a <HAL_I2C_Init+0x92>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a14 <HAL_I2C_Init+0x27c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	bf94      	ite	ls
 8001824:	2301      	movls	r3, #1
 8001826:	2300      	movhi	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0e7      	b.n	8001a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a78      	ldr	r2, [pc, #480]	@ (8001a18 <HAL_I2C_Init+0x280>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a6a      	ldr	r2, [pc, #424]	@ (8001a0c <HAL_I2C_Init+0x274>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d802      	bhi.n	800186c <HAL_I2C_Init+0xd4>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3301      	adds	r3, #1
 800186a:	e009      	b.n	8001880 <HAL_I2C_Init+0xe8>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4a69      	ldr	r2, [pc, #420]	@ (8001a1c <HAL_I2C_Init+0x284>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	3301      	adds	r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001892:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	495c      	ldr	r1, [pc, #368]	@ (8001a0c <HAL_I2C_Init+0x274>)
 800189c:	428b      	cmp	r3, r1
 800189e:	d819      	bhi.n	80018d4 <HAL_I2C_Init+0x13c>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e59      	subs	r1, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018b4:	400b      	ands	r3, r1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_I2C_Init+0x138>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1e59      	subs	r1, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c8:	3301      	adds	r3, #1
 80018ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ce:	e051      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 80018d0:	2304      	movs	r3, #4
 80018d2:	e04f      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d111      	bne.n	8001900 <HAL_I2C_Init+0x168>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e58      	subs	r0, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	440b      	add	r3, r1
 80018ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e012      	b.n	8001926 <HAL_I2C_Init+0x18e>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e58      	subs	r0, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	0099      	lsls	r1, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	fbb0 f3f3 	udiv	r3, r0, r3
 8001916:	3301      	adds	r3, #1
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Init+0x196>
 800192a:	2301      	movs	r3, #1
 800192c:	e022      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10e      	bne.n	8001954 <HAL_I2C_Init+0x1bc>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1e58      	subs	r0, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6859      	ldr	r1, [r3, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	440b      	add	r3, r1
 8001944:	fbb0 f3f3 	udiv	r3, r0, r3
 8001948:	3301      	adds	r3, #1
 800194a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001952:	e00f      	b.n	8001974 <HAL_I2C_Init+0x1dc>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	0099      	lsls	r1, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6809      	ldr	r1, [r1, #0]
 8001978:	4313      	orrs	r3, r2
 800197a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6911      	ldr	r1, [r2, #16]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68d2      	ldr	r2, [r2, #12]
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	000186a0 	.word	0x000186a0
 8001a10:	001e847f 	.word	0x001e847f
 8001a14:	003d08ff 	.word	0x003d08ff
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	10624dd3 	.word	0x10624dd3

08001a20 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	2b80      	cmp	r3, #128	@ 0x80
 8001a34:	d103      	bne.n	8001a3e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d158      	bne.n	8001b18 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_I2C_Slave_Receive_IT+0x26>
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e051      	b.n	8001b1a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Slave_Receive_IT+0x38>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e04a      	b.n	8001b1a <HAL_I2C_Slave_Receive_IT+0xce>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d007      	beq.n	8001aaa <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2222      	movs	r2, #34	@ 0x22
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	88fa      	ldrh	r2, [r7, #6]
 8001ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b28 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001afa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001b12:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	ffff0000 	.word	0xffff0000

08001b2c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001b48:	2b28      	cmp	r3, #40	@ 0x28
 8001b4a:	d15b      	bne.n	8001c04 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e054      	b.n	8001c06 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e04d      	b.n	8001c06 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d007      	beq.n	8001b90 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2229      	movs	r2, #41	@ 0x29
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001bfe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b087      	sub	sp, #28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001c2e:	2b28      	cmp	r3, #40	@ 0x28
 8001c30:	d15b      	bne.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e054      	b.n	8001cec <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e04d      	b.n	8001cec <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d007      	beq.n	8001c76 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c84:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	222a      	movs	r2, #42	@ 0x2a
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	88fa      	ldrh	r2, [r7, #6]
 8001ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001ce4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d124      	bne.n	8001d56 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2228      	movs	r2, #40	@ 0x28
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d007      	beq.n	8001d32 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d40:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001d50:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d003      	beq.n	8001d9c <HAL_I2C_EV_IRQHandler+0x38>
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b40      	cmp	r3, #64	@ 0x40
 8001d98:	f040 80b1 	bne.w	8001efe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001dbc:	d003      	beq.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x62>
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_EV_IRQHandler+0x66>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_I2C_EV_IRQHandler+0x68>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	f000 8114 	beq.w	8001ffa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_I2C_EV_IRQHandler+0x90>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f001 fc3e 	bl	8003668 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fd44 	bl	800287a <I2C_Master_SB>
 8001df2:	e083      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_I2C_EV_IRQHandler+0xac>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fdbc 	bl	8002986 <I2C_Master_ADD10>
 8001e0e:	e075      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <HAL_I2C_EV_IRQHandler+0xc8>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fdd8 	bl	80029da <I2C_Master_ADDR>
 8001e2a:	e067      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d036      	beq.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e44:	f000 80db 	beq.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <HAL_I2C_EV_IRQHandler+0x10a>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_I2C_EV_IRQHandler+0x10a>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f9a0 	bl	80021ac <I2C_MasterTransmit_TXE>
 8001e6c:	e046      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80c2 	beq.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80bc 	beq.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e86:	7bbb      	ldrb	r3, [r7, #14]
 8001e88:	2b21      	cmp	r3, #33	@ 0x21
 8001e8a:	d103      	bne.n	8001e94 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fa29 	bl	80022e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e92:	e0b4      	b.n	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	f040 80b1 	bne.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fa97 	bl	80023d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea2:	e0ac      	b.n	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eb2:	f000 80a4 	beq.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x178>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x178>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb13 	bl	8002500 <I2C_MasterReceive_RXNE>
 8001eda:	e00f      	b.n	8001efc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 808b 	beq.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8085 	beq.w	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fbcb 	bl	8002690 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001efa:	e080      	b.n	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
 8001efc:	e07f      	b.n	8001ffe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e007      	b.n	8001f20 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0x1ea>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 ff96 	bl	8002e78 <I2C_Slave_ADDR>
 8001f4c:	e05a      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_I2C_EV_IRQHandler+0x206>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 ffd0 	bl	8002f08 <I2C_Slave_STOPF>
 8001f68:	e04c      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	2b21      	cmp	r3, #33	@ 0x21
 8001f6e:	d002      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x212>
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	2b29      	cmp	r3, #41	@ 0x29
 8001f74:	d120      	bne.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_I2C_EV_IRQHandler+0x238>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_I2C_EV_IRQHandler+0x238>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 feb1 	bl	8002cfc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f9a:	e032      	b.n	8002002 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02d      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0x29e>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d028      	beq.n	8002002 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fee0 	bl	8002d76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fb6:	e024      	b.n	8002002 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00d      	beq.n	8001fde <HAL_I2C_EV_IRQHandler+0x27a>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_I2C_EV_IRQHandler+0x27a>
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 feee 	bl	8002db8 <I2C_SlaveReceive_RXNE>
 8001fdc:	e012      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 ff1e 	bl	8002e34 <I2C_SlaveReceive_BTF>
 8001ff8:	e004      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001ffa:	bf00      	nop
 8001ffc:	e002      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ffe:	bf00      	nop
 8002000:	e000      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002002:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b08a      	sub	sp, #40	@ 0x28
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800202c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <HAL_I2C_ER_IRQHandler+0x4a>
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002052:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00d      	beq.n	800207a <HAL_I2C_ER_IRQHandler+0x70>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002078:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d03e      	beq.n	8002102 <HAL_I2C_ER_IRQHandler+0xf8>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d039      	beq.n	8002102 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800208e:	7efb      	ldrb	r3, [r7, #27]
 8002090:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80020a8:	7ebb      	ldrb	r3, [r7, #26]
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d112      	bne.n	80020d4 <HAL_I2C_ER_IRQHandler+0xca>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10f      	bne.n	80020d4 <HAL_I2C_ER_IRQHandler+0xca>
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b21      	cmp	r3, #33	@ 0x21
 80020b8:	d008      	beq.n	80020cc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b29      	cmp	r3, #41	@ 0x29
 80020be:	d005      	beq.n	80020cc <HAL_I2C_ER_IRQHandler+0xc2>
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	2b28      	cmp	r3, #40	@ 0x28
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b21      	cmp	r3, #33	@ 0x21
 80020ca:	d103      	bne.n	80020d4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f001 f84b 	bl	8003168 <I2C_Slave_AF>
 80020d2:	e016      	b.n	8002102 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020e6:	7efb      	ldrb	r3, [r7, #27]
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d002      	beq.n	80020f2 <HAL_I2C_ER_IRQHandler+0xe8>
 80020ec:	7efb      	ldrb	r3, [r7, #27]
 80020ee:	2b40      	cmp	r3, #64	@ 0x40
 80020f0:	d107      	bne.n	8002102 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002100:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x11e>
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002126:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f001 f888 	bl	8003250 <I2C_ITError>
  }
}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	@ 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d150      	bne.n	8002274 <I2C_MasterTransmit_TXE+0xc8>
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b21      	cmp	r3, #33	@ 0x21
 80021d6:	d14d      	bne.n	8002274 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d01d      	beq.n	800221a <I2C_MasterTransmit_TXE+0x6e>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d01a      	beq.n	800221a <I2C_MasterTransmit_TXE+0x6e>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021ea:	d016      	beq.n	800221a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2211      	movs	r2, #17
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff98 	bl	8002148 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002218:	e060      	b.n	80022dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002228:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002238:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b40      	cmp	r3, #64	@ 0x40
 8002252:	d107      	bne.n	8002264 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff87 	bl	8002170 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002262:	e03b      	b.n	80022dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff6b 	bl	8002148 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002272:	e033      	b.n	80022dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b21      	cmp	r3, #33	@ 0x21
 8002278:	d005      	beq.n	8002286 <I2C_MasterTransmit_TXE+0xda>
 800227a:	7bbb      	ldrb	r3, [r7, #14]
 800227c:	2b40      	cmp	r3, #64	@ 0x40
 800227e:	d12d      	bne.n	80022dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b22      	cmp	r3, #34	@ 0x22
 8002284:	d12a      	bne.n	80022dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d108      	bne.n	80022a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022a0:	e01c      	b.n	80022dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b40      	cmp	r3, #64	@ 0x40
 80022ac:	d103      	bne.n	80022b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f88e 	bl	80023d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80022b4:	e012      	b.n	80022dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80022da:	e7ff      	b.n	80022dc <I2C_MasterTransmit_TXE+0x130>
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b21      	cmp	r3, #33	@ 0x21
 80022fc:	d164      	bne.n	80023c8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800232c:	e04c      	b.n	80023c8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d01d      	beq.n	8002370 <I2C_MasterTransmit_BTF+0x8c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b20      	cmp	r3, #32
 8002338:	d01a      	beq.n	8002370 <I2C_MasterTransmit_BTF+0x8c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002340:	d016      	beq.n	8002370 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002350:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2211      	movs	r2, #17
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff feed 	bl	8002148 <HAL_I2C_MasterTxCpltCallback>
}
 800236e:	e02b      	b.n	80023c8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800237e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b40      	cmp	r3, #64	@ 0x40
 80023a8:	d107      	bne.n	80023ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff fedc 	bl	8002170 <HAL_I2C_MemTxCpltCallback>
}
 80023b8:	e006      	b.n	80023c8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fec0 	bl	8002148 <HAL_I2C_MasterTxCpltCallback>
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11d      	bne.n	8002424 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10b      	bne.n	8002408 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002406:	e077      	b.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	b29b      	uxth	r3, r3
 800240e:	121b      	asrs	r3, r3, #8
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002422:	e069      	b.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002428:	2b01      	cmp	r3, #1
 800242a:	d10b      	bne.n	8002444 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002442:	e059      	b.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002448:	2b02      	cmp	r3, #2
 800244a:	d152      	bne.n	80024f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b22      	cmp	r3, #34	@ 0x22
 8002450:	d10d      	bne.n	800246e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002460:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800246c:	e044      	b.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d015      	beq.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b21      	cmp	r3, #33	@ 0x21
 800247c:	d112      	bne.n	80024a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024a2:	e029      	b.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d124      	bne.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b21      	cmp	r3, #33	@ 0x21
 80024b2:	d121      	bne.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fe40 	bl	8002170 <HAL_I2C_MemTxCpltCallback>
}
 80024f0:	e002      	b.n	80024f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fa94 	bl	8001a20 <I2C_Flush_DR>
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b22      	cmp	r3, #34	@ 0x22
 8002512:	f040 80b9 	bne.w	8002688 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d921      	bls.n	800256e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b03      	cmp	r3, #3
 8002558:	f040 8096 	bne.w	8002688 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800256c:	e08c      	b.n	8002688 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	2b02      	cmp	r3, #2
 8002574:	d07f      	beq.n	8002676 <I2C_MasterReceive_RXNE+0x176>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d002      	beq.n	8002582 <I2C_MasterReceive_RXNE+0x82>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d179      	bne.n	8002676 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f001 f83e 	bl	8003604 <I2C_WaitOnSTOPRequestThroughIT>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d14c      	bne.n	8002628 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b40      	cmp	r3, #64	@ 0x40
 80025e6:	d10a      	bne.n	80025fe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fdc4 	bl	8002184 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025fc:	e044      	b.n	8002688 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d002      	beq.n	8002612 <I2C_MasterReceive_RXNE+0x112>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b20      	cmp	r3, #32
 8002610:	d103      	bne.n	800261a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
 8002618:	e002      	b.n	8002620 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2212      	movs	r2, #18
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fd9b 	bl	800215c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002626:	e02f      	b.n	8002688 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002636:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fb25 	bl	8000cbe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002674:	e008      	b.n	8002688 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002684:	605a      	str	r2, [r3, #4]
}
 8002686:	e7ff      	b.n	8002688 <I2C_MasterReceive_RXNE+0x188>
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d11b      	bne.n	80026e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026de:	e0c8      	b.n	8002872 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d129      	bne.n	800273e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d00a      	beq.n	8002716 <I2C_MasterReceive_BTF+0x86>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d007      	beq.n	8002716 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002714:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800273c:	e099      	b.n	8002872 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	f040 8081 	bne.w	800284c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d002      	beq.n	8002756 <I2C_MasterReceive_BTF+0xc6>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d108      	bne.n	8002768 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e019      	b.n	800279c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b04      	cmp	r3, #4
 800276c:	d002      	beq.n	8002774 <I2C_MasterReceive_BTF+0xe4>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d108      	bne.n	8002786 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e00a      	b.n	800279c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b10      	cmp	r3, #16
 800278a:	d007      	beq.n	800279c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80027f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d10a      	bne.n	8002822 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fcb2 	bl	8002184 <HAL_I2C_MemRxCpltCallback>
}
 8002820:	e027      	b.n	8002872 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d002      	beq.n	8002836 <I2C_MasterReceive_BTF+0x1a6>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b20      	cmp	r3, #32
 8002834:	d103      	bne.n	800283e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
 800283c:	e002      	b.n	8002844 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2212      	movs	r2, #18
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fc89 	bl	800215c <HAL_I2C_MasterRxCpltCallback>
}
 800284a:	e012      	b.n	8002872 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b40      	cmp	r3, #64	@ 0x40
 800288c:	d117      	bne.n	80028be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028a8:	e067      	b.n	800297a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]
}
 80028bc:	e05d      	b.n	800297a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028c6:	d133      	bne.n	8002930 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b21      	cmp	r3, #33	@ 0x21
 80028d2:	d109      	bne.n	80028e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e008      	b.n	80028fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <I2C_Master_SB+0x92>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d032      	beq.n	800297a <I2C_Master_SB+0x100>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d02d      	beq.n	800297a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800292c:	605a      	str	r2, [r3, #4]
}
 800292e:	e024      	b.n	800297a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10e      	bne.n	8002956 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	b29b      	uxth	r3, r3
 800293e:	11db      	asrs	r3, r3, #7
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0306 	and.w	r3, r3, #6
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f063 030f 	orn	r3, r3, #15
 800294c:	b2da      	uxtb	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	e011      	b.n	800297a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10d      	bne.n	800297a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	b29b      	uxth	r3, r3
 8002964:	11db      	asrs	r3, r3, #7
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 0306 	and.w	r3, r3, #6
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f063 030e 	orn	r3, r3, #14
 8002972:	b2da      	uxtb	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	b2da      	uxtb	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <I2C_Master_ADD10+0x26>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d108      	bne.n	80029be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00c      	beq.n	80029ce <I2C_Master_ADD10+0x48>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029cc:	605a      	str	r2, [r3, #4]
  }
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b091      	sub	sp, #68	@ 0x44
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b22      	cmp	r3, #34	@ 0x22
 8002a02:	f040 8169 	bne.w	8002cd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <I2C_Master_ADDR+0x54>
 8002a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a12:	2b40      	cmp	r3, #64	@ 0x40
 8002a14:	d10b      	bne.n	8002a2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a16:	2300      	movs	r3, #0
 8002a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	e160      	b.n	8002cf0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11d      	bne.n	8002a72 <I2C_Master_ADDR+0x98>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a3e:	d118      	bne.n	8002a72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a70:	e13e      	b.n	8002cf0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d113      	bne.n	8002aa4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e115      	b.n	8002cd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 808a 	bne.w	8002bc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ab6:	d137      	bne.n	8002b28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad6:	d113      	bne.n	8002b00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	e0e7      	b.n	8002cd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e0d3      	b.n	8002cd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d02e      	beq.n	8002b8c <I2C_Master_ADDR+0x1b2>
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d02b      	beq.n	8002b8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d102      	bne.n	8002b40 <I2C_Master_ADDR+0x166>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d125      	bne.n	8002b8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00e      	beq.n	8002b64 <I2C_Master_ADDR+0x18a>
 8002b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d00b      	beq.n	8002b64 <I2C_Master_ADDR+0x18a>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d008      	beq.n	8002b64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e007      	b.n	8002b74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	e0a1      	b.n	8002cd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e085      	b.n	8002cd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d14d      	bne.n	8002c6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d016      	beq.n	8002c02 <I2C_Master_ADDR+0x228>
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d013      	beq.n	8002c02 <I2C_Master_ADDR+0x228>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d010      	beq.n	8002c02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c20:	d117      	bne.n	8002c52 <I2C_Master_ADDR+0x278>
 8002c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c28:	d00b      	beq.n	8002c42 <I2C_Master_ADDR+0x268>
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d008      	beq.n	8002c42 <I2C_Master_ADDR+0x268>
 8002c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d005      	beq.n	8002c42 <I2C_Master_ADDR+0x268>
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d002      	beq.n	8002c42 <I2C_Master_ADDR+0x268>
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d107      	bne.n	8002c52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	e032      	b.n	8002cd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c88:	d117      	bne.n	8002cba <I2C_Master_ADDR+0x2e0>
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c90:	d00b      	beq.n	8002caa <I2C_Master_ADDR+0x2d0>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d008      	beq.n	8002caa <I2C_Master_ADDR+0x2d0>
 8002c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d005      	beq.n	8002caa <I2C_Master_ADDR+0x2d0>
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d002      	beq.n	8002caa <I2C_Master_ADDR+0x2d0>
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d107      	bne.n	8002cba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cd6:	e00b      	b.n	8002cf0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	e7ff      	b.n	8002cf0 <I2C_Master_ADDR+0x316>
 8002cf0:	bf00      	nop
 8002cf2:	3744      	adds	r7, #68	@ 0x44
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02b      	beq.n	8002d6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d114      	bne.n	8002d6e <I2C_SlaveTransmit_TXE+0x72>
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b29      	cmp	r3, #41	@ 0x29
 8002d48:	d111      	bne.n	8002d6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2221      	movs	r2, #33	@ 0x21
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2228      	movs	r2, #40	@ 0x28
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fd ff9d 	bl	8000ca8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d011      	beq.n	8002dac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02c      	beq.n	8002e2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d114      	bne.n	8002e2c <I2C_SlaveReceive_RXNE+0x74>
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e06:	d111      	bne.n	8002e2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2222      	movs	r2, #34	@ 0x22
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2228      	movs	r2, #40	@ 0x28
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd ff24 	bl	8000c74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e92:	2b28      	cmp	r3, #40	@ 0x28
 8002e94:	d125      	bne.n	8002ee2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	81bb      	strh	r3, [r7, #12]
 8002ec4:	e002      	b.n	8002ecc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ed4:	89ba      	ldrh	r2, [r7, #12]
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fd fea4 	bl	8000c28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ee0:	e00e      	b.n	8002f00 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f64:	d172      	bne.n	800304c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b22      	cmp	r3, #34	@ 0x22
 8002f6a:	d002      	beq.n	8002f72 <I2C_Slave_STOPF+0x6a>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f70:	d135      	bne.n	8002fde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fa1f 	bl	80013ee <HAL_DMA_GetState>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d049      	beq.n	800304a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	4a69      	ldr	r2, [pc, #420]	@ (8003160 <I2C_Slave_STOPF+0x258>)
 8002fbc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f9f1 	bl	80013aa <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03d      	beq.n	800304a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fdc:	e035      	b.n	800304a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f043 0204 	orr.w	r2, r3, #4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003010:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe f9e9 	bl	80013ee <HAL_DMA_GetState>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d014      	beq.n	800304c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003026:	4a4e      	ldr	r2, [pc, #312]	@ (8003160 <I2C_Slave_STOPF+0x258>)
 8003028:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f9bb 	bl	80013aa <HAL_DMA_Abort_IT>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003044:	4610      	mov	r0, r2
 8003046:	4798      	blx	r3
 8003048:	e000      	b.n	800304c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800304a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03e      	beq.n	80030d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d112      	bne.n	800308a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d112      	bne.n	80030be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f8b7 	bl	8003250 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030e2:	e039      	b.n	8003158 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80030e8:	d109      	bne.n	80030fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2228      	movs	r2, #40	@ 0x28
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fd fdbb 	bl	8000c74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b28      	cmp	r3, #40	@ 0x28
 8003108:	d111      	bne.n	800312e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <I2C_Slave_STOPF+0x25c>)
 800310e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fd72 	bl	8000c10 <HAL_I2C_ListenCpltCallback>
}
 800312c:	e014      	b.n	8003158 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	2b22      	cmp	r3, #34	@ 0x22
 8003134:	d002      	beq.n	800313c <I2C_Slave_STOPF+0x234>
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b22      	cmp	r3, #34	@ 0x22
 800313a:	d10d      	bne.n	8003158 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fd8e 	bl	8000c74 <HAL_I2C_SlaveRxCpltCallback>
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	080034b5 	.word	0x080034b5
 8003164:	ffff0000 	.word	0xffff0000

08003168 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d002      	beq.n	800318a <I2C_Slave_AF+0x22>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b20      	cmp	r3, #32
 8003188:	d129      	bne.n	80031de <I2C_Slave_AF+0x76>
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b28      	cmp	r3, #40	@ 0x28
 800318e:	d126      	bne.n	80031de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2e      	ldr	r2, [pc, #184]	@ (800324c <I2C_Slave_AF+0xe4>)
 8003194:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fd1a 	bl	8000c10 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031dc:	e031      	b.n	8003242 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b21      	cmp	r3, #33	@ 0x21
 80031e2:	d129      	bne.n	8003238 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a19      	ldr	r2, [pc, #100]	@ (800324c <I2C_Slave_AF+0xe4>)
 80031e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2221      	movs	r2, #33	@ 0x21
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800320e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003218:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003228:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fbf8 	bl	8001a20 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd fd39 	bl	8000ca8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003236:	e004      	b.n	8003242 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	ffff0000 	.word	0xffff0000

08003250 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003266:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003268:	7bbb      	ldrb	r3, [r7, #14]
 800326a:	2b10      	cmp	r3, #16
 800326c:	d002      	beq.n	8003274 <I2C_ITError+0x24>
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	2b40      	cmp	r3, #64	@ 0x40
 8003272:	d10a      	bne.n	800328a <I2C_ITError+0x3a>
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b22      	cmp	r3, #34	@ 0x22
 8003278:	d107      	bne.n	800328a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003288:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003290:	2b28      	cmp	r3, #40	@ 0x28
 8003292:	d107      	bne.n	80032a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2228      	movs	r2, #40	@ 0x28
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032a2:	e015      	b.n	80032d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b2:	d00a      	beq.n	80032ca <I2C_ITError+0x7a>
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b60      	cmp	r3, #96	@ 0x60
 80032b8:	d007      	beq.n	80032ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032de:	d162      	bne.n	80033a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d020      	beq.n	8003340 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003302:	4a6a      	ldr	r2, [pc, #424]	@ (80034ac <I2C_ITError+0x25c>)
 8003304:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe f84d 	bl	80013aa <HAL_DMA_Abort_IT>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8089 	beq.w	800342a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800333a:	4610      	mov	r0, r2
 800333c:	4798      	blx	r3
 800333e:	e074      	b.n	800342a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003344:	4a59      	ldr	r2, [pc, #356]	@ (80034ac <I2C_ITError+0x25c>)
 8003346:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe f82c 	bl	80013aa <HAL_DMA_Abort_IT>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d068      	beq.n	800342a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d10b      	bne.n	800337e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
 80033a4:	e041      	b.n	800342a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b60      	cmp	r3, #96	@ 0x60
 80033b0:	d125      	bne.n	80033fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ca:	2b40      	cmp	r3, #64	@ 0x40
 80033cc:	d10b      	bne.n	80033e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fece 	bl	8002198 <HAL_I2C_AbortCpltCallback>
 80033fc:	e015      	b.n	800342a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d10b      	bne.n	8003424 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd fc4a 	bl	8000cbe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d113      	bne.n	80034a4 <I2C_ITError+0x254>
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b28      	cmp	r3, #40	@ 0x28
 8003480:	d110      	bne.n	80034a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <I2C_ITError+0x260>)
 8003486:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fbb6 	bl	8000c10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	080034b5 	.word	0x080034b5
 80034b0:	ffff0000 	.word	0xffff0000

080034b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ce:	4b4b      	ldr	r3, [pc, #300]	@ (80035fc <I2C_DMAAbort+0x148>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	08db      	lsrs	r3, r3, #3
 80034d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003600 <I2C_DMAAbort+0x14c>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0a1a      	lsrs	r2, r3, #8
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00da      	lsls	r2, r3, #3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80034fa:	e00a      	b.n	8003512 <I2C_DMAAbort+0x5e>
    }
    count--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800350c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003510:	d0ea      	beq.n	80034e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351e:	2200      	movs	r2, #0
 8003520:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	2200      	movs	r2, #0
 8003530:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003540:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003554:	2200      	movs	r2, #0
 8003556:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	2200      	movs	r2, #0
 8003566:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b60      	cmp	r3, #96	@ 0x60
 8003582:	d10e      	bne.n	80035a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	f7fe fdfc 	bl	8002198 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035a0:	e027      	b.n	80035f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035a8:	2b28      	cmp	r3, #40	@ 0x28
 80035aa:	d117      	bne.n	80035dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2228      	movs	r2, #40	@ 0x28
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80035da:	e007      	b.n	80035ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035ec:	6978      	ldr	r0, [r7, #20]
 80035ee:	f7fd fb66 	bl	8000cbe <HAL_I2C_ErrorCallback>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000008 	.word	0x20000008
 8003600:	14f8b589 	.word	0x14f8b589

08003604 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003610:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	0a1a      	lsrs	r2, r3, #8
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3b01      	subs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e008      	b.n	8003654 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d0e9      	beq.n	8003626 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	20000008 	.word	0x20000008
 8003664:	14f8b589 	.word	0x14f8b589

08003668 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003678:	d103      	bne.n	8003682 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003680:	e007      	b.n	8003692 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800368a:	d102      	bne.n	8003692 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2208      	movs	r2, #8
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cc      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b68      	ldr	r3, [pc, #416]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90c      	bls.n	80036dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a58      	ldr	r2, [pc, #352]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a52      	ldr	r2, [pc, #328]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d119      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e067      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b37      	ldr	r3, [pc, #220]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4934      	ldr	r1, [pc, #208]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fd fc7e 	bl	8001090 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fd fc7a 	bl	8001090 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b25      	ldr	r3, [pc, #148]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20c      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b22      	ldr	r3, [pc, #136]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f855 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 800382a:	4602      	mov	r2, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	490a      	ldr	r1, [pc, #40]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fbde 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
 8003860:	080051c0 	.word	0x080051c0
 8003864:	20000008 	.word	0x20000008
 8003868:	2000000c 	.word	0x2000000c

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <HAL_RCC_GetHCLKFreq+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000008 	.word	0x20000008

08003884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003888:	f7ff fff0 	bl	800386c <HAL_RCC_GetHCLKFreq>
 800388c:	4602      	mov	r2, r0
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	4903      	ldr	r1, [pc, #12]	@ (80038a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389a:	5ccb      	ldrb	r3, [r1, r3]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40023800 	.word	0x40023800
 80038a8:	080051d0 	.word	0x080051d0

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038b0:	f7ff ffdc 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0b5b      	lsrs	r3, r3, #13
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	080051d0 	.word	0x080051d0

080038d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0ae      	sub	sp, #184	@ 0xb8
 80038da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fa:	4bcb      	ldr	r3, [pc, #812]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b0c      	cmp	r3, #12
 8003904:	f200 8206 	bhi.w	8003d14 <HAL_RCC_GetSysClockFreq+0x440>
 8003908:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <HAL_RCC_GetSysClockFreq+0x3c>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003945 	.word	0x08003945
 8003914:	08003d15 	.word	0x08003d15
 8003918:	08003d15 	.word	0x08003d15
 800391c:	08003d15 	.word	0x08003d15
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003d15 	.word	0x08003d15
 8003928:	08003d15 	.word	0x08003d15
 800392c:	08003d15 	.word	0x08003d15
 8003930:	08003955 	.word	0x08003955
 8003934:	08003d15 	.word	0x08003d15
 8003938:	08003d15 	.word	0x08003d15
 800393c:	08003d15 	.word	0x08003d15
 8003940:	08003b45 	.word	0x08003b45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4bb9      	ldr	r3, [pc, #740]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x358>)
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800394a:	e1e7      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4bb8      	ldr	r3, [pc, #736]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003952:	e1e3      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4bb4      	ldr	r3, [pc, #720]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4bb1      	ldr	r3, [pc, #708]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d071      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4bae      	ldr	r3, [pc, #696]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003978:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800397c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800398e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	0159      	lsls	r1, r3, #5
 80039a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a4:	0150      	lsls	r0, r2, #5
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4621      	mov	r1, r4
 80039ac:	1a51      	subs	r1, r2, r1
 80039ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80039b0:	4629      	mov	r1, r5
 80039b2:	eb63 0301 	sbc.w	r3, r3, r1
 80039b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80039c4:	4649      	mov	r1, r9
 80039c6:	018b      	lsls	r3, r1, #6
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ce:	4641      	mov	r1, r8
 80039d0:	018a      	lsls	r2, r1, #6
 80039d2:	4641      	mov	r1, r8
 80039d4:	1a51      	subs	r1, r2, r1
 80039d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039d8:	4649      	mov	r1, r9
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039ec:	4649      	mov	r1, r9
 80039ee:	00cb      	lsls	r3, r1, #3
 80039f0:	4641      	mov	r1, r8
 80039f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f6:	4641      	mov	r1, r8
 80039f8:	00ca      	lsls	r2, r1, #3
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	4622      	mov	r2, r4
 8003a02:	189b      	adds	r3, r3, r2
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a06:	462b      	mov	r3, r5
 8003a08:	460a      	mov	r2, r1
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	024b      	lsls	r3, r1, #9
 8003a20:	4621      	mov	r1, r4
 8003a22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a26:	4621      	mov	r1, r4
 8003a28:	024a      	lsls	r2, r1, #9
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a40:	f7fc fbe0 	bl	8000204 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4e:	e067      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a50:	4b75      	ldr	r3, [pc, #468]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a72:	4622      	mov	r2, r4
 8003a74:	462b      	mov	r3, r5
 8003a76:	f04f 0000 	mov.w	r0, #0
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	0159      	lsls	r1, r3, #5
 8003a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a84:	0150      	lsls	r0, r2, #5
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	1a51      	subs	r1, r2, r1
 8003a8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb63 0301 	sbc.w	r3, r3, r1
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	018b      	lsls	r3, r1, #6
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aae:	4641      	mov	r1, r8
 8003ab0:	018a      	lsls	r2, r1, #6
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab8:	4649      	mov	r1, r9
 8003aba:	eb63 0b01 	sbc.w	fp, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad2:	4692      	mov	sl, r2
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	eb1a 0303 	adds.w	r3, sl, r3
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	462b      	mov	r3, r5
 8003ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003af2:	4629      	mov	r1, r5
 8003af4:	028b      	lsls	r3, r1, #10
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003afc:	4621      	mov	r1, r4
 8003afe:	028a      	lsls	r2, r1, #10
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b08:	2200      	movs	r2, #0
 8003b0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b12:	f7fc fb77 	bl	8000204 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b20:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b42:	e0eb      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b50:	4b35      	ldr	r3, [pc, #212]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d06b      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b70:	2300      	movs	r3, #0
 8003b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f04f 0000 	mov.w	r0, #0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	0159      	lsls	r1, r3, #5
 8003b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8a:	0150      	lsls	r0, r2, #5
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4621      	mov	r1, r4
 8003b92:	1a51      	subs	r1, r2, r1
 8003b94:	61b9      	str	r1, [r7, #24]
 8003b96:	4629      	mov	r1, r5
 8003b98:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003baa:	4659      	mov	r1, fp
 8003bac:	018b      	lsls	r3, r1, #6
 8003bae:	4651      	mov	r1, sl
 8003bb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	018a      	lsls	r2, r1, #6
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ebb2 0801 	subs.w	r8, r2, r1
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	eb63 0901 	sbc.w	r9, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd8:	4690      	mov	r8, r2
 8003bda:	4699      	mov	r9, r3
 8003bdc:	4623      	mov	r3, r4
 8003bde:	eb18 0303 	adds.w	r3, r8, r3
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	462b      	mov	r3, r5
 8003be6:	eb49 0303 	adc.w	r3, r9, r3
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	024b      	lsls	r3, r1, #9
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c02:	4621      	mov	r1, r4
 8003c04:	024a      	lsls	r2, r1, #9
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c0e:	2200      	movs	r2, #0
 8003c10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c18:	f7fc faf4 	bl	8000204 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c26:	e065      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x420>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c34:	4b3d      	ldr	r3, [pc, #244]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	4611      	mov	r1, r2
 8003c40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c46:	2300      	movs	r3, #0
 8003c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c4e:	4642      	mov	r2, r8
 8003c50:	464b      	mov	r3, r9
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c60:	0150      	lsls	r0, r2, #5
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4641      	mov	r1, r8
 8003c68:	1a51      	subs	r1, r2, r1
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c80:	4659      	mov	r1, fp
 8003c82:	018b      	lsls	r3, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	018a      	lsls	r2, r1, #6
 8003c8e:	4651      	mov	r1, sl
 8003c90:	1a54      	subs	r4, r2, r1
 8003c92:	4659      	mov	r1, fp
 8003c94:	eb63 0501 	sbc.w	r5, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	00eb      	lsls	r3, r5, #3
 8003ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca6:	00e2      	lsls	r2, r4, #3
 8003ca8:	4614      	mov	r4, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	4643      	mov	r3, r8
 8003cae:	18e3      	adds	r3, r4, r3
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	eb45 0303 	adc.w	r3, r5, r3
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	028b      	lsls	r3, r1, #10
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	028a      	lsls	r2, r1, #10
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cdc:	2200      	movs	r2, #0
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ce2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ce6:	f7fc fa8d 	bl	8000204 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4613      	mov	r3, r2
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x458>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0f1b      	lsrs	r3, r3, #28
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d12:	e003      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	37b8      	adds	r7, #184	@ 0xb8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e28d      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8083 	beq.w	8003e5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d54:	4b94      	ldr	r3, [pc, #592]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d60:	4b91      	ldr	r3, [pc, #580]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d78:	d00c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d92:	d10b      	bne.n	8003dac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	4b84      	ldr	r3, [pc, #528]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x124>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d157      	bne.n	8003e58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e25a      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x90>
 8003db6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xcc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0xb4>
 8003dce:	4b76      	ldr	r3, [pc, #472]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a75      	ldr	r2, [pc, #468]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b73      	ldr	r3, [pc, #460]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a72      	ldr	r2, [pc, #456]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xcc>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd f942 	bl	8001090 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd f93e 	bl	8001090 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e21f      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b61      	ldr	r3, [pc, #388]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xdc>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd f92e 	bl	8001090 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fd f92a 	bl	8001090 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e20b      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b57      	ldr	r3, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x104>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d06f      	beq.n	8003f46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e66:	4b50      	ldr	r3, [pc, #320]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e72:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8a:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e96:	4b44      	ldr	r3, [pc, #272]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d116      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x186>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1d3      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4937      	ldr	r1, [pc, #220]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	e03a      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed8:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <HAL_RCC_OscConfig+0x278>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd f8d7 	bl	8001090 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd f8d3 	bl	8001090 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1b4      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4925      	ldr	r1, [pc, #148]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <HAL_RCC_OscConfig+0x278>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd f8b6 	bl	8001090 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fd f8b2 	bl	8001090 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e193      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d036      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd f896 	bl	8001090 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7fd f892 	bl	8001090 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e173      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x234>
 8003f86:	e01b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fd f87f 	bl	8001090 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	e00e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fd f87b 	bl	8001090 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d907      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e15c      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	42470000 	.word	0x42470000
 8003fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ea      	bne.n	8003f96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8097 	beq.w	80040fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b83      	ldr	r3, [pc, #524]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fee:	4b7c      	ldr	r3, [pc, #496]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b79      	ldr	r3, [pc, #484]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400a:	4b76      	ldr	r3, [pc, #472]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a75      	ldr	r2, [pc, #468]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fd f83b 	bl	8001090 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd f837 	bl	8001090 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e118      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	4b6c      	ldr	r3, [pc, #432]	@ (80041e4 <HAL_RCC_OscConfig+0x4b0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x31e>
 8004044:	4b66      	ldr	r3, [pc, #408]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a65      	ldr	r2, [pc, #404]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	e01c      	b.n	800408c <HAL_RCC_OscConfig+0x358>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x340>
 800405a:	4b61      	ldr	r3, [pc, #388]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405e:	4a60      	ldr	r2, [pc, #384]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6713      	str	r3, [r2, #112]	@ 0x70
 8004066:	4b5e      	ldr	r3, [pc, #376]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	4a5d      	ldr	r2, [pc, #372]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6713      	str	r3, [r2, #112]	@ 0x70
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0x358>
 8004074:	4b5a      	ldr	r3, [pc, #360]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	4a59      	ldr	r2, [pc, #356]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004080:	4b57      	ldr	r3, [pc, #348]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004084:	4a56      	ldr	r2, [pc, #344]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fc fffc 	bl	8001090 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fc fff8 	bl	8001090 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0d7      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b2:	4b4b      	ldr	r3, [pc, #300]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ee      	beq.n	800409c <HAL_RCC_OscConfig+0x368>
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc ffe6 	bl	8001090 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fc ffe2 	bl	8001090 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0c1      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040de:	4b40      	ldr	r3, [pc, #256]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ee      	bne.n	80040c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	4a3a      	ldr	r2, [pc, #232]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80ad 	beq.w	8004260 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d060      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d145      	bne.n	80041a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b33      	ldr	r3, [pc, #204]	@ (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fc ffb6 	bl	8001090 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fc ffb2 	bl	8001090 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e093      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b29      	ldr	r3, [pc, #164]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	491b      	ldr	r1, [pc, #108]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	4313      	orrs	r3, r2
 8004176:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fc ff87 	bl	8001090 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004186:	f7fc ff83 	bl	8001090 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e064      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x452>
 80041a4:	e05c      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x4b4>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fc ff70 	bl	8001090 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fc ff6c 	bl	8001090 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04d      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x480>
 80041d2:	e045      	b.n	8004260 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e040      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <HAL_RCC_OscConfig+0x538>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d030      	beq.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d129      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d122      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004224:	4293      	cmp	r3, r2
 8004226:	d119      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	3b01      	subs	r3, #1
 8004236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d10f      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e042      	b.n	8004308 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fda2 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fcbb 	bl	8004c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d121      	bne.n	800436e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_UART_Transmit_IT+0x26>
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e01a      	b.n	8004370 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2221      	movs	r2, #33	@ 0x21
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004368:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b0ba      	sub	sp, #232	@ 0xe8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_UART_IRQHandler+0x66>
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fb69 	bl	8004ab2 <UART_Receive_IT>
      return;
 80043e0:	e25b      	b.n	800489a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80de 	beq.w	80045a8 <HAL_UART_IRQHandler+0x22c>
 80043ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80d1 	beq.w	80045a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0xae>
 8004412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	f043 0201 	orr.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_UART_IRQHandler+0xd2>
 8004436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f043 0202 	orr.w	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_UART_IRQHandler+0xf6>
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d011      	beq.n	80044a2 <HAL_UART_IRQHandler+0x126>
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800448a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	f043 0208 	orr.w	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 81f2 	beq.w	8004890 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_UART_IRQHandler+0x14e>
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 faf4 	bl	8004ab2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d4:	2b40      	cmp	r3, #64	@ 0x40
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <HAL_UART_IRQHandler+0x17a>
 80044ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04f      	beq.n	8004596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9fc 	bl	80048f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004506:	2b40      	cmp	r3, #64	@ 0x40
 8004508:	d141      	bne.n	800458e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800453a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1d9      	bne.n	800450a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d013      	beq.n	8004586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	4a7e      	ldr	r2, [pc, #504]	@ (800475c <HAL_UART_IRQHandler+0x3e0>)
 8004564:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc ff1d 	bl	80013aa <HAL_DMA_Abort_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004580:	4610      	mov	r0, r2
 8004582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e00e      	b.n	80045a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f99e 	bl	80048c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e00a      	b.n	80045a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f99a 	bl	80048c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	e006      	b.n	80045a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f996 	bl	80048c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045a2:	e175      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	bf00      	nop
    return;
 80045a6:	e173      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 814f 	bne.w	8004850 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8148 	beq.w	8004850 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8141 	beq.w	8004850 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ee:	2b40      	cmp	r3, #64	@ 0x40
 80045f0:	f040 80b6 	bne.w	8004760 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8145 	beq.w	8004894 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800460e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004612:	429a      	cmp	r2, r3
 8004614:	f080 813e 	bcs.w	8004894 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800461e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462a:	f000 8088 	beq.w	800473e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800464c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800465a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800465e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1d9      	bne.n	800462e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800468a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800469e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e1      	bne.n	800467a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e3      	bne.n	80046b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800470c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004720:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800472e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e3      	bne.n	80046fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc fdc6 	bl	80012ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	b29b      	uxth	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8c1 	bl	80048dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800475a:	e09b      	b.n	8004894 <HAL_UART_IRQHandler+0x518>
 800475c:	080049bb 	.word	0x080049bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004768:	b29b      	uxth	r3, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 808e 	beq.w	8004898 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800477c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8089 	beq.w	8004898 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800479c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e3      	bne.n	8004786 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	623b      	str	r3, [r7, #32]
   return(result);
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e3      	bne.n	80047be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	60fb      	str	r3, [r7, #12]
   return(result);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0310 	bic.w	r3, r3, #16
 800481a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004828:	61fa      	str	r2, [r7, #28]
 800482a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	69b9      	ldr	r1, [r7, #24]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	617b      	str	r3, [r7, #20]
   return(result);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e3      	bne.n	8004804 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f847 	bl	80048dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800484e:	e023      	b.n	8004898 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <HAL_UART_IRQHandler+0x4f4>
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8ba 	bl	80049e2 <UART_Transmit_IT>
    return;
 800486e:	e014      	b.n	800489a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <HAL_UART_IRQHandler+0x51e>
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8fa 	bl	8004a82 <UART_EndTransmit_IT>
    return;
 800488e:	e004      	b.n	800489a <HAL_UART_IRQHandler+0x51e>
    return;
 8004890:	bf00      	nop
 8004892:	e002      	b.n	800489a <HAL_UART_IRQHandler+0x51e>
      return;
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <HAL_UART_IRQHandler+0x51e>
      return;
 8004898:	bf00      	nop
  }
}
 800489a:	37e8      	adds	r7, #232	@ 0xe8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b095      	sub	sp, #84	@ 0x54
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800491c:	643a      	str	r2, [r7, #64]	@ 0x40
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3314      	adds	r3, #20
 8004936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3314      	adds	r3, #20
 800494e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	d119      	bne.n	80049a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	60bb      	str	r3, [r7, #8]
   return(result);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f023 0310 	bic.w	r3, r3, #16
 8004982:	647b      	str	r3, [r7, #68]	@ 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800498c:	61ba      	str	r2, [r7, #24]
 800498e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6979      	ldr	r1, [r7, #20]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	613b      	str	r3, [r7, #16]
   return(result);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e5      	bne.n	800496c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049ae:	bf00      	nop
 80049b0:	3754      	adds	r7, #84	@ 0x54
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff ff77 	bl	80048c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b21      	cmp	r3, #33	@ 0x21
 80049f4:	d13e      	bne.n	8004a74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fe:	d114      	bne.n	8004a2a <UART_Transmit_IT+0x48>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d110      	bne.n	8004a2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]
 8004a28:	e008      	b.n	8004a3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6211      	str	r1, [r2, #32]
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10f      	bne.n	8004a70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff fefc 	bl	80048a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08c      	sub	sp, #48	@ 0x30
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b22      	cmp	r3, #34	@ 0x22
 8004ac4:	f040 80ae 	bne.w	8004c24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad0:	d117      	bne.n	8004b02 <UART_Receive_IT+0x50>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d113      	bne.n	8004b02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b00:	e026      	b.n	8004b50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b14:	d007      	beq.n	8004b26 <UART_Receive_IT+0x74>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10a      	bne.n	8004b34 <UART_Receive_IT+0x82>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e008      	b.n	8004b46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d15d      	bne.n	8004c20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0220 	bic.w	r2, r2, #32
 8004b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d135      	bne.n	8004c16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	623a      	str	r2, [r7, #32]
 8004bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69f9      	ldr	r1, [r7, #28]
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e5      	bne.n	8004bb0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d10a      	bne.n	8004c08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff fe64 	bl	80048dc <HAL_UARTEx_RxEventCallback>
 8004c14:	e002      	b.n	8004c1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fe4c 	bl	80048b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e002      	b.n	8004c26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e000      	b.n	8004c26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3730      	adds	r7, #48	@ 0x30
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b0c0      	sub	sp, #256	@ 0x100
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	68d9      	ldr	r1, [r3, #12]
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	ea40 0301 	orr.w	r3, r0, r1
 8004c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c88:	f021 010c 	bic.w	r1, r1, #12
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c96:	430b      	orrs	r3, r1
 8004c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004caa:	6999      	ldr	r1, [r3, #24]
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	ea40 0301 	orr.w	r3, r0, r1
 8004cb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8004efc <UART_SetConfig+0x2cc>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d005      	beq.n	8004cd0 <UART_SetConfig+0xa0>
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b8d      	ldr	r3, [pc, #564]	@ (8004f00 <UART_SetConfig+0x2d0>)
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d104      	bne.n	8004cda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7fe fdec 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8004cd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cd8:	e003      	b.n	8004ce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cda:	f7fe fdd3 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 8004cde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cec:	f040 810c 	bne.w	8004f08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	1891      	adds	r1, r2, r2
 8004d08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d0a:	415b      	adcs	r3, r3
 8004d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d12:	4621      	mov	r1, r4
 8004d14:	eb12 0801 	adds.w	r8, r2, r1
 8004d18:	4629      	mov	r1, r5
 8004d1a:	eb43 0901 	adc.w	r9, r3, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d32:	4690      	mov	r8, r2
 8004d34:	4699      	mov	r9, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	eb18 0303 	adds.w	r3, r8, r3
 8004d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d40:	462b      	mov	r3, r5
 8004d42:	eb49 0303 	adc.w	r3, r9, r3
 8004d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d5e:	460b      	mov	r3, r1
 8004d60:	18db      	adds	r3, r3, r3
 8004d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d64:	4613      	mov	r3, r2
 8004d66:	eb42 0303 	adc.w	r3, r2, r3
 8004d6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d74:	f7fb fa46 	bl	8000204 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4b61      	ldr	r3, [pc, #388]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	011c      	lsls	r4, r3, #4
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004da0:	415b      	adcs	r3, r3
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004da8:	4641      	mov	r1, r8
 8004daa:	eb12 0a01 	adds.w	sl, r2, r1
 8004dae:	4649      	mov	r1, r9
 8004db0:	eb43 0b01 	adc.w	fp, r3, r1
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc8:	4692      	mov	sl, r2
 8004dca:	469b      	mov	fp, r3
 8004dcc:	4643      	mov	r3, r8
 8004dce:	eb1a 0303 	adds.w	r3, sl, r3
 8004dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004df0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004df4:	460b      	mov	r3, r1
 8004df6:	18db      	adds	r3, r3, r3
 8004df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e0a:	f7fb f9fb 	bl	8000204 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004e16:	fba3 2301 	umull	r2, r3, r3, r1
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2264      	movs	r2, #100	@ 0x64
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	1acb      	subs	r3, r1, r3
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e2a:	4b36      	ldr	r3, [pc, #216]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e38:	441c      	add	r4, r3
 8004e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	1891      	adds	r1, r2, r2
 8004e52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e54:	415b      	adcs	r3, r3
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	1851      	adds	r1, r2, r1
 8004e60:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e62:	4649      	mov	r1, r9
 8004e64:	414b      	adcs	r3, r1
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e74:	4659      	mov	r1, fp
 8004e76:	00cb      	lsls	r3, r1, #3
 8004e78:	4651      	mov	r1, sl
 8004e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7e:	4651      	mov	r1, sl
 8004e80:	00ca      	lsls	r2, r1, #3
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	4642      	mov	r2, r8
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e90:	464b      	mov	r3, r9
 8004e92:	460a      	mov	r2, r1
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ea8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ec6:	f7fb f99d 	bl	8000204 <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	2164      	movs	r1, #100	@ 0x64
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	3332      	adds	r3, #50	@ 0x32
 8004ee2:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	f003 0207 	and.w	r2, r3, #7
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4422      	add	r2, r4
 8004ef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ef8:	e106      	b.n	8005108 <UART_SetConfig+0x4d8>
 8004efa:	bf00      	nop
 8004efc:	40011000 	.word	0x40011000
 8004f00:	40011400 	.word	0x40011400
 8004f04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	1891      	adds	r1, r2, r2
 8004f20:	6239      	str	r1, [r7, #32]
 8004f22:	415b      	adcs	r3, r3
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	1854      	adds	r4, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb43 0501 	adc.w	r5, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	00eb      	lsls	r3, r5, #3
 8004f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f42:	00e2      	lsls	r2, r4, #3
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f50:	464b      	mov	r3, r9
 8004f52:	eb45 0303 	adc.w	r3, r5, r3
 8004f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f76:	4629      	mov	r1, r5
 8004f78:	008b      	lsls	r3, r1, #2
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f80:	4621      	mov	r1, r4
 8004f82:	008a      	lsls	r2, r1, #2
 8004f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f88:	f7fb f93c 	bl	8000204 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4b60      	ldr	r3, [pc, #384]	@ (8005114 <UART_SetConfig+0x4e4>)
 8004f92:	fba3 2302 	umull	r2, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	011c      	lsls	r4, r3, #4
 8004f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	1891      	adds	r1, r2, r2
 8004fb2:	61b9      	str	r1, [r7, #24]
 8004fb4:	415b      	adcs	r3, r3
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	1851      	adds	r1, r2, r1
 8004fc0:	6139      	str	r1, [r7, #16]
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	414b      	adcs	r3, r1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	00cb      	lsls	r3, r1, #3
 8004fd8:	4651      	mov	r1, sl
 8004fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fde:	4651      	mov	r1, sl
 8004fe0:	00ca      	lsls	r2, r1, #3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4642      	mov	r2, r8
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005006:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005014:	4649      	mov	r1, r9
 8005016:	008b      	lsls	r3, r1, #2
 8005018:	4641      	mov	r1, r8
 800501a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501e:	4641      	mov	r1, r8
 8005020:	008a      	lsls	r2, r1, #2
 8005022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005026:	f7fb f8ed 	bl	8000204 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4611      	mov	r1, r2
 8005030:	4b38      	ldr	r3, [pc, #224]	@ (8005114 <UART_SetConfig+0x4e4>)
 8005032:	fba3 2301 	umull	r2, r3, r3, r1
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2264      	movs	r2, #100	@ 0x64
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	1acb      	subs	r3, r1, r3
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	3332      	adds	r3, #50	@ 0x32
 8005044:	4a33      	ldr	r2, [pc, #204]	@ (8005114 <UART_SetConfig+0x4e4>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005050:	441c      	add	r4, r3
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	673b      	str	r3, [r7, #112]	@ 0x70
 800505a:	677a      	str	r2, [r7, #116]	@ 0x74
 800505c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	1891      	adds	r1, r2, r2
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	415b      	adcs	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005070:	4641      	mov	r1, r8
 8005072:	1851      	adds	r1, r2, r1
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	4649      	mov	r1, r9
 8005078:	414b      	adcs	r3, r1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005088:	4659      	mov	r1, fp
 800508a:	00cb      	lsls	r3, r1, #3
 800508c:	4651      	mov	r1, sl
 800508e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005092:	4651      	mov	r1, sl
 8005094:	00ca      	lsls	r2, r1, #3
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	4603      	mov	r3, r0
 800509c:	4642      	mov	r2, r8
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050a2:	464b      	mov	r3, r9
 80050a4:	460a      	mov	r2, r1
 80050a6:	eb42 0303 	adc.w	r3, r2, r3
 80050aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050c4:	4649      	mov	r1, r9
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	4641      	mov	r1, r8
 80050ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ce:	4641      	mov	r1, r8
 80050d0:	008a      	lsls	r2, r1, #2
 80050d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050d6:	f7fb f895 	bl	8000204 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <UART_SetConfig+0x4e4>)
 80050e0:	fba3 1302 	umull	r1, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2164      	movs	r1, #100	@ 0x64
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	3332      	adds	r3, #50	@ 0x32
 80050f2:	4a08      	ldr	r2, [pc, #32]	@ (8005114 <UART_SetConfig+0x4e4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4422      	add	r2, r4
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800510e:	46bd      	mov	sp, r7
 8005110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4d0d      	ldr	r5, [pc, #52]	@ (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	@ (8005164 <__libc_init_array+0x3c>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2600      	movs	r6, #0
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4d0b      	ldr	r5, [pc, #44]	@ (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	@ (800516c <__libc_init_array+0x44>)
 800513c:	f000 f818 	bl	8005170 <_init>
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2600      	movs	r6, #0
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	080051e0 	.word	0x080051e0
 8005164:	080051e0 	.word	0x080051e0
 8005168:	080051e0 	.word	0x080051e0
 800516c:	080051e4 	.word	0x080051e4

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
