
Proyecto3_LadoB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004fdc  08004fdc  00005fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff4  08004ff4  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff4  08004ff4  00005ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ffc  08004ffc  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ffc  08004ffc  00005ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005004  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08005018  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08005018  000070e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be77  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  00012ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00014a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080e  00000000  00000000  00015498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214da  00000000  00000000  00015ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd9b  00000000  00000000  00037180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafc1  00000000  00000000  00044f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fedc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  0010ff20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001129c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004fc4 	.word	0x08004fc4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004fc4 	.word	0x08004fc4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
int main(void)
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fc5e 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f89a 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f95e 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051c:	f000 f904 	bl	8000728 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f930 	bl	8000784 <MX_USART2_UART_Init>
	  }
  }



  HAL_GPIO_WritePin(SSD_G_GPIO_Port, SSD_G_Pin, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800052a:	4821      	ldr	r0, [pc, #132]	@ (80005b0 <main+0xac>)
 800052c:	f001 f808 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSD_F_GPIO_Port, SSD_F_Pin, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000536:	481f      	ldr	r0, [pc, #124]	@ (80005b4 <main+0xb0>)
 8000538:	f001 f802 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSD_A_GPIO_Port, SSD_A_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000542:	481c      	ldr	r0, [pc, #112]	@ (80005b4 <main+0xb0>)
 8000544:	f000 fffc 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSD_B_GPIO_Port, SSD_B_Pin, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800054e:	481a      	ldr	r0, [pc, #104]	@ (80005b8 <main+0xb4>)
 8000550:	f000 fff6 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSD_C_GPIO_Port, SSD_C_Pin, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2104      	movs	r1, #4
 8000558:	4817      	ldr	r0, [pc, #92]	@ (80005b8 <main+0xb4>)
 800055a:	f000 fff1 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSD_D_GPIO_Port, SSD_D_Pin, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	4813      	ldr	r0, [pc, #76]	@ (80005b0 <main+0xac>)
 8000564:	f000 ffec 	bl	8001540 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SSD_E_GPIO_Port, SSD_E_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	4810      	ldr	r0, [pc, #64]	@ (80005b0 <main+0xac>)
 800056e:	f000 ffe7 	bl	8001540 <HAL_GPIO_WritePin>
  // Inicia la recepción en modo interrupción
  HAL_I2C_Slave_Receive_IT(&hi2c1, &receivedData, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	4911      	ldr	r1, [pc, #68]	@ (80005bc <main+0xb8>)
 8000576:	4812      	ldr	r0, [pc, #72]	@ (80005c0 <main+0xbc>)
 8000578:	f001 f9de 	bl	8001938 <HAL_I2C_Slave_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  availableParkings = contarSensoresDisponibles();
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	469c      	mov	ip, r3
 8000580:	f000 f826 	bl	80005d0 <contarSensoresDisponibles.0>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <main+0xc0>)
 800058a:	701a      	strb	r2, [r3, #0]
	  //verificarAP();
	  //verificarEstadoLEDS();
	  if (dataAvailable) {
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <main+0xc4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f2      	beq.n	800057c <main+0x78>
		dataToSend = receivedData;
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <main+0xb8>)
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <main+0xc8>)
 800059c:	701a      	strb	r2, [r3, #0]
		dataAvailable = 0;
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <main+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Receive_IT(&hi2c1, &receivedData, 1);  // Prepararse para el siguiente byte
 80005a4:	2201      	movs	r2, #1
 80005a6:	4905      	ldr	r1, [pc, #20]	@ (80005bc <main+0xb8>)
 80005a8:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <main+0xbc>)
 80005aa:	f001 f9c5 	bl	8001938 <HAL_I2C_Slave_Receive_IT>
	  availableParkings = contarSensoresDisponibles();
 80005ae:	e7e5      	b.n	800057c <main+0x78>
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40020400 	.word	0x40020400
 80005bc:	200000dc 	.word	0x200000dc
 80005c0:	20000030 	.word	0x20000030
 80005c4:	200000cc 	.word	0x200000cc
 80005c8:	200000dd 	.word	0x200000dd
 80005cc:	200000db 	.word	0x200000db

080005d0 <contarSensoresDisponibles.0>:
  uint8_t contarSensoresDisponibles() {
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	f8c7 c004 	str.w	ip, [r7, #4]
      uint8_t contador = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
      contador = contador + DisponibilidadOtherSTM;
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <contarSensoresDisponibles.0+0x68>)
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4413      	add	r3, r2
 80005e6:	73fb      	strb	r3, [r7, #15]
      if (Sensor1 == AVAILABLE) {
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <contarSensoresDisponibles.0+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d102      	bne.n	80005f8 <contarSensoresDisponibles.0+0x28>
              contador++;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3301      	adds	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
	  if (Sensor2 == AVAILABLE) {
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <contarSensoresDisponibles.0+0x70>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d102      	bne.n	8000608 <contarSensoresDisponibles.0+0x38>
		  contador++;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	3301      	adds	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
	  if (Sensor3 == AVAILABLE) {
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <contarSensoresDisponibles.0+0x74>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b01      	cmp	r3, #1
 8000610:	d102      	bne.n	8000618 <contarSensoresDisponibles.0+0x48>
		  contador++;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	3301      	adds	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
	  if (Sensor4 == AVAILABLE) {
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <contarSensoresDisponibles.0+0x78>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b01      	cmp	r3, #1
 8000620:	d102      	bne.n	8000628 <contarSensoresDisponibles.0+0x58>
		  contador++;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	3301      	adds	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
      return contador;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
  }
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200000da 	.word	0x200000da
 800063c:	20000000 	.word	0x20000000
 8000640:	20000001 	.word	0x20000001
 8000644:	20000002 	.word	0x20000002
 8000648:	20000003 	.word	0x20000003

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2234      	movs	r2, #52	@ 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fc86 	bl	8004f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a29      	ldr	r2, [pc, #164]	@ (8000720 <SystemClock_Config+0xd4>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000698:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <SystemClock_Config+0xd8>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 f9a6 	bl	8003a2c <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e6:	f000 f9ff 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fe46 	bl	8003398 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000712:	f000 f9e9 	bl	8000ae8 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2202      	movs	r2, #2
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f000 ff1d 	bl	80015a4 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f9ba 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000030 	.word	0x20000030
 800077c:	40005400 	.word	0x40005400
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f003 fbd4 	bl	8003f68 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f98f 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000084 	.word	0x20000084
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x164>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a51      	ldr	r2, [pc, #324]	@ (800093c <MX_GPIO_Init+0x164>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x164>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b4b      	ldr	r3, [pc, #300]	@ (800093c <MX_GPIO_Init+0x164>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a4a      	ldr	r2, [pc, #296]	@ (800093c <MX_GPIO_Init+0x164>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b48      	ldr	r3, [pc, #288]	@ (800093c <MX_GPIO_Init+0x164>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b44      	ldr	r3, [pc, #272]	@ (800093c <MX_GPIO_Init+0x164>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a43      	ldr	r2, [pc, #268]	@ (800093c <MX_GPIO_Init+0x164>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b41      	ldr	r3, [pc, #260]	@ (800093c <MX_GPIO_Init+0x164>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x164>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x164>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x164>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENS3_G_Pin|LED_SENS3_R_Pin|LED_SENS4_R_Pin|LED_SENS4_G_Pin
 800085e:	2201      	movs	r2, #1
 8000860:	f240 116f 	movw	r1, #367	@ 0x16f
 8000864:	4836      	ldr	r0, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x168>)
 8000866:	f000 fe6b 	bl	8001540 <HAL_GPIO_WritePin>
                          |SSD_D_Pin|SSD_E_Pin|SSD_G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SENS1_R_Pin|LED_SENS1_G_Pin|LED_SENS2_R_Pin|SSD_A_Pin
 800086a:	2201      	movs	r2, #1
 800086c:	f641 0113 	movw	r1, #6163	@ 0x1813
 8000870:	4834      	ldr	r0, [pc, #208]	@ (8000944 <MX_GPIO_Init+0x16c>)
 8000872:	f000 fe65 	bl	8001540 <HAL_GPIO_WritePin>
                          |SSD_F_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SENS2_G_Pin|SSD_C_Pin|SSD_B_Pin|LED_SENS1_RB7_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f241 0185 	movw	r1, #4229	@ 0x1085
 800087c:	4832      	ldr	r0, [pc, #200]	@ (8000948 <MX_GPIO_Init+0x170>)
 800087e:	f000 fe5f 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4829      	ldr	r0, [pc, #164]	@ (8000940 <MX_GPIO_Init+0x168>)
 800089a:	f000 fcbd 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS3_G_Pin LED_SENS3_R_Pin LED_SENS4_R_Pin LED_SENS4_G_Pin
                           SSD_D_Pin SSD_E_Pin SSD_G_Pin */
  GPIO_InitStruct.Pin = LED_SENS3_G_Pin|LED_SENS3_R_Pin|LED_SENS4_R_Pin|LED_SENS4_G_Pin
 800089e:	f240 136f 	movw	r3, #367	@ 0x16f
 80008a2:	617b      	str	r3, [r7, #20]
                          |SSD_D_Pin|SSD_E_Pin|SSD_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4822      	ldr	r0, [pc, #136]	@ (8000940 <MX_GPIO_Init+0x168>)
 80008b8:	f000 fcae 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS1_R_Pin LED_SENS1_G_Pin LED_SENS2_R_Pin SSD_A_Pin
                           SSD_F_Pin */
  GPIO_InitStruct.Pin = LED_SENS1_R_Pin|LED_SENS1_G_Pin|LED_SENS2_R_Pin|SSD_A_Pin
 80008bc:	f641 0313 	movw	r3, #6163	@ 0x1813
 80008c0:	617b      	str	r3, [r7, #20]
                          |SSD_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	481b      	ldr	r0, [pc, #108]	@ (8000944 <MX_GPIO_Init+0x16c>)
 80008d6:	f000 fc9f 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin|BTN4_Pin;
 80008da:	23e0      	movs	r3, #224	@ 0xe0
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4815      	ldr	r0, [pc, #84]	@ (8000944 <MX_GPIO_Init+0x16c>)
 80008f0:	f000 fc92 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENS2_G_Pin SSD_C_Pin SSD_B_Pin LED_SENS1_RB7_Pin */
  GPIO_InitStruct.Pin = LED_SENS2_G_Pin|SSD_C_Pin|SSD_B_Pin|LED_SENS1_RB7_Pin;
 80008f4:	f241 0385 	movw	r3, #4229	@ 0x1085
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	480e      	ldr	r0, [pc, #56]	@ (8000948 <MX_GPIO_Init+0x170>)
 800090e:	f000 fc83 	bl	8001218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2017      	movs	r0, #23
 8000918:	f000 fba7 	bl	800106a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800091c:	2017      	movs	r0, #23
 800091e:	f000 fbc0 	bl	80010a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2028      	movs	r0, #40	@ 0x28
 8000928:	f000 fb9f 	bl	800106a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092c:	2028      	movs	r0, #40	@ 0x28
 800092e:	f000 fbb8 	bl	80010a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	@ 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020800 	.word	0x40020800
 8000944:	40020000 	.word	0x40020000
 8000948:	40020400 	.word	0x40020400

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
    //1
    if (GPIO_Pin == GPIO_PIN_8) {
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800095c:	d10f      	bne.n	800097e <HAL_GPIO_EXTI_Callback+0x32>
    	switch (Sensor1) {
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <HAL_GPIO_EXTI_Callback+0x22>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d004      	beq.n	8000976 <HAL_GPIO_EXTI_Callback+0x2a>
				break;
			case AVAILABLE:
				Sensor1 = NOT_AVAILABLE;
				break;
			default:
				break;
 800096c:	e007      	b.n	800097e <HAL_GPIO_EXTI_Callback+0x32>
				Sensor1 = AVAILABLE;
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
				break;
 8000974:	e003      	b.n	800097e <HAL_GPIO_EXTI_Callback+0x32>
				Sensor1 = NOT_AVAILABLE;
 8000976:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
				break;
 800097c:	bf00      	nop
		}
    }
    if (GPIO_Pin == GPIO_PIN_5) {
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2b20      	cmp	r3, #32
 8000982:	d10f      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x58>
	   switch (Sensor2) {
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <HAL_GPIO_EXTI_Callback+0x48>
 800098e:	2b01      	cmp	r3, #1
 8000990:	d004      	beq.n	800099c <HAL_GPIO_EXTI_Callback+0x50>
				break;
			case AVAILABLE:
				Sensor2 = NOT_AVAILABLE;
				break;
			default:
				break;
 8000992:	e007      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x58>
				Sensor2 = AVAILABLE;
 8000994:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
				break;
 800099a:	e003      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x58>
				Sensor2 = NOT_AVAILABLE;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0xcc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
				break;
 80009a2:	bf00      	nop
		}
    }
    if (GPIO_Pin == GPIO_PIN_6) {
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	2b40      	cmp	r3, #64	@ 0x40
 80009a8:	d10f      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0x7e>
    	switch (Sensor3) {
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0xd0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <HAL_GPIO_EXTI_Callback+0x6e>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d004      	beq.n	80009c2 <HAL_GPIO_EXTI_Callback+0x76>
				break;
			case AVAILABLE:
				Sensor3 = NOT_AVAILABLE;
				break;
			default:
				break;
 80009b8:	e007      	b.n	80009ca <HAL_GPIO_EXTI_Callback+0x7e>
				Sensor3 = AVAILABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0xd0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
				break;
 80009c0:	e003      	b.n	80009ca <HAL_GPIO_EXTI_Callback+0x7e>
				Sensor3 = NOT_AVAILABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0xd0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
				break;
 80009c8:	bf00      	nop
		}
    }
	if (GPIO_Pin == GPIO_PIN_7) {
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b80      	cmp	r3, #128	@ 0x80
 80009ce:	d11b      	bne.n	8000a08 <HAL_GPIO_EXTI_Callback+0xbc>
		switch (Sensor4) {
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0xd4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <HAL_GPIO_EXTI_Callback+0x94>
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d00a      	beq.n	80009f4 <HAL_GPIO_EXTI_Callback+0xa8>
			case AVAILABLE:
				availableParkings = availableParkings - 1;
				Sensor4 = NOT_AVAILABLE;
				break;
			default:
				break;
 80009de:	e013      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0xbc>
				availableParkings = availableParkings + 1;
 80009e0:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xd8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xd8>)
 80009ea:	701a      	strb	r2, [r3, #0]
				Sensor4 = AVAILABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0xd4>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
				break;
 80009f2:	e009      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0xbc>
				availableParkings = availableParkings - 1;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xd8>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_GPIO_EXTI_Callback+0xd8>)
 80009fe:	701a      	strb	r2, [r3, #0]
				Sensor4 = NOT_AVAILABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
				break;
 8000a06:	bf00      	nop
		}
	}
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000001 	.word	0x20000001
 8000a1c:	20000002 	.word	0x20000002
 8000a20:	20000003 	.word	0x20000003
 8000a24:	200000cc 	.word	0x200000cc

08000a28 <HAL_I2C_SlaveTxCpltCallback>:

// Función de callback cuando el maestro solicita un dato
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d104      	bne.n	8000a44 <HAL_I2C_SlaveTxCpltCallback+0x1c>
    HAL_I2C_Slave_Transmit_IT(&hi2c1, &dataToSend, 1);  // Preparar el dato para el próximo envío
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4904      	ldr	r1, [pc, #16]	@ (8000a50 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 8000a40:	f000 ff0a 	bl	8001858 <HAL_I2C_Slave_Transmit_IT>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	200000db 	.word	0x200000db
 8000a54:	20000030 	.word	0x20000030

08000a58 <transmit_uart>:

void transmit_uart(char *string){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    uint8_t len=strlen(string);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fbcf 	bl	8000204 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, (uint8_t*)string, len, 200);
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	23c8      	movs	r3, #200	@ 0xc8
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <transmit_uart+0x28>)
 8000a74:	f003 fac8 	bl	8004008 <HAL_UART_Transmit>
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000084 	.word	0x20000084

08000a84 <HAL_I2C_SlaveRxCpltCallback>:

// Función de callback cuando el maestro envía un dato
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(SSD_G_GPIO_Port, SSD_G_Pin, 1);
  if (hi2c->Instance == I2C1) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0e      	ldr	r2, [pc, #56]	@ (8000acc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d115      	bne.n	8000ac2 <HAL_I2C_SlaveRxCpltCallback+0x3e>
	HAL_GPIO_WritePin(SSD_G_GPIO_Port, SSD_G_Pin, 1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8000a9e:	f000 fd4f 	bl	8001540 <HAL_GPIO_WritePin>
	transmit_uart(dataReceived);
 8000aa2:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8000aa4:	f7ff ffd8 	bl	8000a58 <transmit_uart>
	HAL_I2C_Slave_Transmit_IT(&hi2c1, &responseData, 1);  // Enviar respuesta
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	490b      	ldr	r1, [pc, #44]	@ (8000ad8 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8000aae:	f000 fed3 	bl	8001858 <HAL_I2C_Slave_Transmit_IT>
    dataAvailable = 1;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_I2C_SlaveRxCpltCallback+0x5c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, &receivedData, 1);  // Prepararse para recibir otro byte
 8000ab8:	2201      	movs	r2, #1
 8000aba:	490a      	ldr	r1, [pc, #40]	@ (8000ae4 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 8000abc:	4807      	ldr	r0, [pc, #28]	@ (8000adc <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8000abe:	f000 ff3b 	bl	8001938 <HAL_I2C_Slave_Receive_IT>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	200000d0 	.word	0x200000d0
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	20000030 	.word	0x20000030
 8000ae0:	200000dd 	.word	0x200000dd
 8000ae4:	200000dc 	.word	0x200000dc

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b32:	2007      	movs	r0, #7
 8000b34:	f000 fa8e 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <HAL_I2C_MspInit+0xa4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d13c      	bne.n	8000be0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <HAL_I2C_MspInit+0xa8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bec <HAL_I2C_MspInit+0xa8>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_I2C_MspInit+0xa8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b88:	2312      	movs	r3, #18
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b94:	2304      	movs	r3, #4
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4814      	ldr	r0, [pc, #80]	@ (8000bf0 <HAL_I2C_MspInit+0xac>)
 8000ba0:	f000 fb3a 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <HAL_I2C_MspInit+0xa8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a0f      	ldr	r2, [pc, #60]	@ (8000bec <HAL_I2C_MspInit+0xa8>)
 8000bae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <HAL_I2C_MspInit+0xa8>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	201f      	movs	r0, #31
 8000bc6:	f000 fa50 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bca:	201f      	movs	r0, #31
 8000bcc:	f000 fa69 	bl	80010a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2020      	movs	r0, #32
 8000bd6:	f000 fa48 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bda:	2020      	movs	r0, #32
 8000bdc:	f000 fa61 	bl	80010a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	@ 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40005400 	.word	0x40005400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	@ (8000c88 <HAL_UART_MspInit+0x94>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d133      	bne.n	8000c7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_UART_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <HAL_UART_MspInit+0x9c>)
 8000c6a:	f000 fad5 	bl	8001218 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2026      	movs	r0, #38	@ 0x26
 8000c74:	f000 f9f9 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c78:	2026      	movs	r0, #38	@ 0x26
 8000c7a:	f000 fa12 	bl	80010a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	@ 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <MemManage_Handler+0x4>

08000cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cea:	f000 f8c3 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000cf6:	2020      	movs	r0, #32
 8000cf8:	f000 fc3c 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000cfc:	2040      	movs	r0, #64	@ 0x40
 8000cfe:	f000 fc39 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000d02:	2080      	movs	r0, #128	@ 0x80
 8000d04:	f000 fc36 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <I2C1_EV_IRQHandler+0x10>)
 8000d12:	f000 fe81 	bl	8001a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000030 	.word	0x20000030

08000d20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <I2C1_ER_IRQHandler+0x10>)
 8000d26:	f000 ffca 	bl	8001cbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000030 	.word	0x20000030

08000d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <USART2_IRQHandler+0x10>)
 8000d3a:	f003 f9f1 	bl	8004120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000084 	.word	0x20000084

08000d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d50:	f000 fc10 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f004 f8e7 	bl	8004f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fba9 	bl	8000504 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dc0:	08005004 	.word	0x08005004
  ldr r2, =_sbss
 8000dc4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dc8:	200000e4 	.word	0x200000e4

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f92b 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe76 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f943 	bl	80010be <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f90b 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	2000000c 	.word	0x2000000c

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000010 	.word	0x20000010
 8000e98:	200000e0 	.word	0x200000e0

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200000e0 	.word	0x200000e0

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff feda 	bl	8000e9c <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2280      	movs	r2, #128	@ 0x80
 80010fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e052      	b.n	80011ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0216 	bic.w	r2, r2, #22
 8001116:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001126:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	2b00      	cmp	r3, #0
 800112e:	d103      	bne.n	8001138 <HAL_DMA_Abort+0x62>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0208 	bic.w	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001158:	e013      	b.n	8001182 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800115a:	f7ff fe9f 	bl	8000e9c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d90c      	bls.n	8001182 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e015      	b.n	80011ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e4      	bne.n	800115a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001194:	223f      	movs	r2, #63	@ 0x3f
 8001196:	409a      	lsls	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d004      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00c      	b.n	80011ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2205      	movs	r2, #5
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e165      	b.n	8001500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8154 	bne.w	80014fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80ae 	beq.w	80014fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <HAL_GPIO_Init+0x300>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001518 <HAL_GPIO_Init+0x300>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001518 <HAL_GPIO_Init+0x300>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a58      	ldr	r2, [pc, #352]	@ (800151c <HAL_GPIO_Init+0x304>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <HAL_GPIO_Init+0x308>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001524 <HAL_GPIO_Init+0x30c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <HAL_GPIO_Init+0x310>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4c      	ldr	r2, [pc, #304]	@ (800152c <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x20e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4b      	ldr	r2, [pc, #300]	@ (8001530 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x20a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4a      	ldr	r2, [pc, #296]	@ (8001534 <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x206>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	@ (8001538 <HAL_GPIO_Init+0x320>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x202>
 8001416:	2306      	movs	r3, #6
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800141a:	2307      	movs	r3, #7
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x21c>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	@ (800151c <HAL_GPIO_Init+0x304>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b3a      	ldr	r3, [pc, #232]	@ (800153c <HAL_GPIO_Init+0x324>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a31      	ldr	r2, [pc, #196]	@ (800153c <HAL_GPIO_Init+0x324>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <HAL_GPIO_Init+0x324>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_GPIO_Init+0x324>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b25      	ldr	r3, [pc, #148]	@ (800153c <HAL_GPIO_Init+0x324>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <HAL_GPIO_Init+0x324>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_GPIO_Init+0x324>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a11      	ldr	r2, [pc, #68]	@ (800153c <HAL_GPIO_Init+0x324>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae96 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f9da 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e12b      	b.n	800180e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff faba 	bl	8000b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2224      	movs	r2, #36	@ 0x24
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001608:	f001 ffb8 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a81      	ldr	r2, [pc, #516]	@ (8001818 <HAL_I2C_Init+0x274>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d807      	bhi.n	8001628 <HAL_I2C_Init+0x84>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a80      	ldr	r2, [pc, #512]	@ (800181c <HAL_I2C_Init+0x278>)
 800161c:	4293      	cmp	r3, r2
 800161e:	bf94      	ite	ls
 8001620:	2301      	movls	r3, #1
 8001622:	2300      	movhi	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	e006      	b.n	8001636 <HAL_I2C_Init+0x92>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a7d      	ldr	r2, [pc, #500]	@ (8001820 <HAL_I2C_Init+0x27c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0e7      	b.n	800180e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4a78      	ldr	r2, [pc, #480]	@ (8001824 <HAL_I2C_Init+0x280>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0c9b      	lsrs	r3, r3, #18
 8001648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a6a      	ldr	r2, [pc, #424]	@ (8001818 <HAL_I2C_Init+0x274>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d802      	bhi.n	8001678 <HAL_I2C_Init+0xd4>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3301      	adds	r3, #1
 8001676:	e009      	b.n	800168c <HAL_I2C_Init+0xe8>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	4a69      	ldr	r2, [pc, #420]	@ (8001828 <HAL_I2C_Init+0x284>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	099b      	lsrs	r3, r3, #6
 800168a:	3301      	adds	r3, #1
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800169e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	495c      	ldr	r1, [pc, #368]	@ (8001818 <HAL_I2C_Init+0x274>)
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d819      	bhi.n	80016e0 <HAL_I2C_Init+0x13c>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e59      	subs	r1, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ba:	1c59      	adds	r1, r3, #1
 80016bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016c0:	400b      	ands	r3, r1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <HAL_I2C_Init+0x138>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e59      	subs	r1, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	e051      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 80016dc:	2304      	movs	r3, #4
 80016de:	e04f      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_I2C_Init+0x168>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e58      	subs	r0, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e012      	b.n	8001732 <HAL_I2C_Init+0x18e>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1e58      	subs	r0, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	0099      	lsls	r1, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001722:	3301      	adds	r3, #1
 8001724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_Init+0x196>
 8001736:	2301      	movs	r3, #1
 8001738:	e022      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10e      	bne.n	8001760 <HAL_I2C_Init+0x1bc>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1e58      	subs	r0, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	440b      	add	r3, r1
 8001750:	fbb0 f3f3 	udiv	r3, r0, r3
 8001754:	3301      	adds	r3, #1
 8001756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800175e:	e00f      	b.n	8001780 <HAL_I2C_Init+0x1dc>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1e58      	subs	r0, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	0099      	lsls	r1, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	fbb0 f3f3 	udiv	r3, r0, r3
 8001776:	3301      	adds	r3, #1
 8001778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	6809      	ldr	r1, [r1, #0]
 8001784:	4313      	orrs	r3, r2
 8001786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6911      	ldr	r1, [r2, #16]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68d2      	ldr	r2, [r2, #12]
 80017ba:	4311      	orrs	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	000186a0 	.word	0x000186a0
 800181c:	001e847f 	.word	0x001e847f
 8001820:	003d08ff 	.word	0x003d08ff
 8001824:	431bde83 	.word	0x431bde83
 8001828:	10624dd3 	.word	0x10624dd3

0800182c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183e:	2b80      	cmp	r3, #128	@ 0x80
 8001840:	d103      	bne.n	800184a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b20      	cmp	r3, #32
 8001870:	d158      	bne.n	8001924 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_I2C_Slave_Transmit_IT+0x26>
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e051      	b.n	8001926 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_I2C_Slave_Transmit_IT+0x38>
 800188c:	2302      	movs	r3, #2
 800188e:	e04a      	b.n	8001926 <HAL_I2C_Slave_Transmit_IT+0xce>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d007      	beq.n	80018b6 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2221      	movs	r2, #33	@ 0x21
 80018ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 80018f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001906:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800191e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	ffff0000 	.word	0xffff0000

08001938 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	4613      	mov	r3, r2
 8001944:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	d158      	bne.n	8001a04 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_I2C_Slave_Receive_IT+0x26>
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e051      	b.n	8001a06 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_I2C_Slave_Receive_IT+0x38>
 800196c:	2302      	movs	r3, #2
 800196e:	e04a      	b.n	8001a06 <HAL_I2C_Slave_Receive_IT+0xce>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d007      	beq.n	8001996 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2222      	movs	r2, #34	@ 0x22
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	88fa      	ldrh	r2, [r7, #6]
 80019c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_I2C_Slave_Receive_IT+0xdc>)
 80019d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019e6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80019fe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	ffff0000 	.word	0xffff0000

08001a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d003      	beq.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b40      	cmp	r3, #64	@ 0x40
 8001a4c:	f040 80b1 	bne.w	8001bb2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10d      	bne.n	8001a86 <HAL_I2C_EV_IRQHandler+0x6e>
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001a70:	d003      	beq.n	8001a7a <HAL_I2C_EV_IRQHandler+0x62>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001a78:	d101      	bne.n	8001a7e <HAL_I2C_EV_IRQHandler+0x66>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_I2C_EV_IRQHandler+0x68>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f000 8114 	beq.w	8001cae <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x90>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f001 fc60 	bl	8003360 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fd66 	bl	8002572 <I2C_Master_SB>
 8001aa6:	e083      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0xac>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fdde 	bl	800267e <I2C_Master_ADD10>
 8001ac2:	e075      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_I2C_EV_IRQHandler+0xc8>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fdfa 	bl	80026d2 <I2C_Master_ADDR>
 8001ade:	e067      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d036      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001af8:	f000 80db 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00d      	beq.n	8001b22 <HAL_I2C_EV_IRQHandler+0x10a>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_I2C_EV_IRQHandler+0x10a>
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9c2 	bl	8001ea4 <I2C_MasterTransmit_TXE>
 8001b20:	e046      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80c2 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80bc 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	2b21      	cmp	r3, #33	@ 0x21
 8001b3e:	d103      	bne.n	8001b48 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa4b 	bl	8001fdc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b46:	e0b4      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b40      	cmp	r3, #64	@ 0x40
 8001b4c:	f040 80b1 	bne.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fab9 	bl	80020c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b56:	e0ac      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b66:	f000 80a4 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <HAL_I2C_EV_IRQHandler+0x178>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_I2C_EV_IRQHandler+0x178>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d103      	bne.n	8001b90 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fb35 	bl	80021f8 <I2C_MasterReceive_RXNE>
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 808b 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8085 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fbed 	bl	8002388 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bae:	e080      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
 8001bb0:	e07f      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e007      	b.n	8001bd4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d011      	beq.n	8001c02 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00c      	beq.n	8001c02 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001bf8:	69b9      	ldr	r1, [r7, #24]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 ffb8 	bl	8002b70 <I2C_Slave_ADDR>
 8001c00:	e05a      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_I2C_EV_IRQHandler+0x206>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fff2 	bl	8002c00 <I2C_Slave_STOPF>
 8001c1c:	e04c      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	2b21      	cmp	r3, #33	@ 0x21
 8001c22:	d002      	beq.n	8001c2a <HAL_I2C_EV_IRQHandler+0x212>
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	2b29      	cmp	r3, #41	@ 0x29
 8001c28:	d120      	bne.n	8001c6c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <HAL_I2C_EV_IRQHandler+0x238>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_I2C_EV_IRQHandler+0x238>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d103      	bne.n	8001c50 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fed3 	bl	80029f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c4e:	e032      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02d      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29e>
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d028      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 ff02 	bl	8002a6e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c6a:	e024      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <HAL_I2C_EV_IRQHandler+0x27a>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_I2C_EV_IRQHandler+0x27a>
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 ff10 	bl	8002ab0 <I2C_SlaveReceive_RXNE>
 8001c90:	e012      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 ff40 	bl	8002b2c <I2C_SlaveReceive_BTF>
 8001cac:	e004      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001cae:	bf00      	nop
 8001cb0:	e002      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b08a      	sub	sp, #40	@ 0x28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ce0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00d      	beq.n	8001d08 <HAL_I2C_ER_IRQHandler+0x4a>
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001d06:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00d      	beq.n	8001d2e <HAL_I2C_ER_IRQHandler+0x70>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001d2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d03e      	beq.n	8001db6 <HAL_I2C_ER_IRQHandler+0xf8>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d039      	beq.n	8001db6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001d42:	7efb      	ldrb	r3, [r7, #27]
 8001d44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001d5c:	7ebb      	ldrb	r3, [r7, #26]
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d112      	bne.n	8001d88 <HAL_I2C_ER_IRQHandler+0xca>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10f      	bne.n	8001d88 <HAL_I2C_ER_IRQHandler+0xca>
 8001d68:	7cfb      	ldrb	r3, [r7, #19]
 8001d6a:	2b21      	cmp	r3, #33	@ 0x21
 8001d6c:	d008      	beq.n	8001d80 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
 8001d70:	2b29      	cmp	r3, #41	@ 0x29
 8001d72:	d005      	beq.n	8001d80 <HAL_I2C_ER_IRQHandler+0xc2>
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	2b28      	cmp	r3, #40	@ 0x28
 8001d78:	d106      	bne.n	8001d88 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b21      	cmp	r3, #33	@ 0x21
 8001d7e:	d103      	bne.n	8001d88 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f001 f86d 	bl	8002e60 <I2C_Slave_AF>
 8001d86:	e016      	b.n	8001db6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d9a:	7efb      	ldrb	r3, [r7, #27]
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d002      	beq.n	8001da6 <HAL_I2C_ER_IRQHandler+0xe8>
 8001da0:	7efb      	ldrb	r3, [r7, #27]
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <HAL_I2C_ER_IRQHandler+0x11e>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001dda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f001 f8aa 	bl	8002f48 <I2C_ITError>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	@ 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
 8001e30:	4613      	mov	r3, r2
 8001e32:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d150      	bne.n	8001f6c <I2C_MasterTransmit_TXE+0xc8>
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b21      	cmp	r3, #33	@ 0x21
 8001ece:	d14d      	bne.n	8001f6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d01d      	beq.n	8001f12 <I2C_MasterTransmit_TXE+0x6e>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d01a      	beq.n	8001f12 <I2C_MasterTransmit_TXE+0x6e>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ee2:	d016      	beq.n	8001f12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ef2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2211      	movs	r2, #17
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff76 	bl	8001dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f10:	e060      	b.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b40      	cmp	r3, #64	@ 0x40
 8001f4a:	d107      	bne.n	8001f5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff7d 	bl	8001e54 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f5a:	e03b      	b.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff49 	bl	8001dfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f6a:	e033      	b.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b21      	cmp	r3, #33	@ 0x21
 8001f70:	d005      	beq.n	8001f7e <I2C_MasterTransmit_TXE+0xda>
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	2b40      	cmp	r3, #64	@ 0x40
 8001f76:	d12d      	bne.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b22      	cmp	r3, #34	@ 0x22
 8001f7c:	d12a      	bne.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d108      	bne.n	8001f9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001f98:	e01c      	b.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b40      	cmp	r3, #64	@ 0x40
 8001fa4:	d103      	bne.n	8001fae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f88e 	bl	80020c8 <I2C_MemoryTransmit_TXE_BTF>
}
 8001fac:	e012      	b.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001fd2:	e7ff      	b.n	8001fd4 <I2C_MasterTransmit_TXE+0x130>
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b21      	cmp	r3, #33	@ 0x21
 8001ff4:	d164      	bne.n	80020c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002024:	e04c      	b.n	80020c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d01d      	beq.n	8002068 <I2C_MasterTransmit_BTF+0x8c>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b20      	cmp	r3, #32
 8002030:	d01a      	beq.n	8002068 <I2C_MasterTransmit_BTF+0x8c>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002038:	d016      	beq.n	8002068 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002048:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2211      	movs	r2, #17
 800204e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fecb 	bl	8001dfc <HAL_I2C_MasterTxCpltCallback>
}
 8002066:	e02b      	b.n	80020c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002076:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002086:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b40      	cmp	r3, #64	@ 0x40
 80020a0:	d107      	bne.n	80020b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fed2 	bl	8001e54 <HAL_I2C_MemTxCpltCallback>
}
 80020b0:	e006      	b.n	80020c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fe9e 	bl	8001dfc <HAL_I2C_MasterTxCpltCallback>
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d11d      	bne.n	800211c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10b      	bne.n	8002100 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f8:	1c9a      	adds	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80020fe:	e077      	b.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	b29b      	uxth	r3, r3
 8002106:	121b      	asrs	r3, r3, #8
 8002108:	b2da      	uxtb	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800211a:	e069      	b.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10b      	bne.n	800213c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800213a:	e059      	b.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002140:	2b02      	cmp	r3, #2
 8002142:	d152      	bne.n	80021ea <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b22      	cmp	r3, #34	@ 0x22
 8002148:	d10d      	bne.n	8002166 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002158:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002164:	e044      	b.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b21      	cmp	r3, #33	@ 0x21
 8002174:	d112      	bne.n	800219c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800219a:	e029      	b.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d124      	bne.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b21      	cmp	r3, #33	@ 0x21
 80021aa:	d121      	bne.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fe36 	bl	8001e54 <HAL_I2C_MemTxCpltCallback>
}
 80021e8:	e002      	b.n	80021f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fb1e 	bl	800182c <I2C_Flush_DR>
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b22      	cmp	r3, #34	@ 0x22
 800220a:	f040 80b9 	bne.w	8002380 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002212:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d921      	bls.n	8002266 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b03      	cmp	r3, #3
 8002250:	f040 8096 	bne.w	8002380 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002262:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002264:	e08c      	b.n	8002380 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	2b02      	cmp	r3, #2
 800226c:	d07f      	beq.n	800236e <I2C_MasterReceive_RXNE+0x176>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d002      	beq.n	800227a <I2C_MasterReceive_RXNE+0x82>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d179      	bne.n	800236e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f001 f83e 	bl	80032fc <I2C_WaitOnSTOPRequestThroughIT>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d14c      	bne.n	8002320 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002294:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b40      	cmp	r3, #64	@ 0x40
 80022de:	d10a      	bne.n	80022f6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fdba 	bl	8001e68 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80022f4:	e044      	b.n	8002380 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d002      	beq.n	800230a <I2C_MasterReceive_RXNE+0x112>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b20      	cmp	r3, #32
 8002308:	d103      	bne.n	8002312 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002310:	e002      	b.n	8002318 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2212      	movs	r2, #18
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fd79 	bl	8001e10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800231e:	e02f      	b.n	8002380 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800232e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fd88 	bl	8001e7c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800236c:	e008      	b.n	8002380 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800237c:	605a      	str	r2, [r3, #4]
}
 800237e:	e7ff      	b.n	8002380 <I2C_MasterReceive_RXNE+0x188>
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11b      	bne.n	80023d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80023d6:	e0c8      	b.n	800256a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d129      	bne.n	8002436 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d00a      	beq.n	800240e <I2C_MasterReceive_BTF+0x86>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d007      	beq.n	800240e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800240c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002434:	e099      	b.n	800256a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	f040 8081 	bne.w	8002544 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d002      	beq.n	800244e <I2C_MasterReceive_BTF+0xc6>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b10      	cmp	r3, #16
 800244c:	d108      	bne.n	8002460 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e019      	b.n	8002494 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d002      	beq.n	800246c <I2C_MasterReceive_BTF+0xe4>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d108      	bne.n	800247e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e00a      	b.n	8002494 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b10      	cmp	r3, #16
 8002482:	d007      	beq.n	8002494 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002492:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b40      	cmp	r3, #64	@ 0x40
 8002502:	d10a      	bne.n	800251a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fca8 	bl	8001e68 <HAL_I2C_MemRxCpltCallback>
}
 8002518:	e027      	b.n	800256a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d002      	beq.n	800252e <I2C_MasterReceive_BTF+0x1a6>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b20      	cmp	r3, #32
 800252c:	d103      	bne.n	8002536 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
 8002534:	e002      	b.n	800253c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2212      	movs	r2, #18
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fc67 	bl	8001e10 <HAL_I2C_MasterRxCpltCallback>
}
 8002542:	e012      	b.n	800256a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b40      	cmp	r3, #64	@ 0x40
 8002584:	d117      	bne.n	80025b6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800259e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80025a0:	e067      	b.n	8002672 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	611a      	str	r2, [r3, #16]
}
 80025b4:	e05d      	b.n	8002672 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025be:	d133      	bne.n	8002628 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b21      	cmp	r3, #33	@ 0x21
 80025ca:	d109      	bne.n	80025e0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e008      	b.n	80025f2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <I2C_Master_SB+0x92>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	2b00      	cmp	r3, #0
 800260a:	d032      	beq.n	8002672 <I2C_Master_SB+0x100>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d02d      	beq.n	8002672 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002624:	605a      	str	r2, [r3, #4]
}
 8002626:	e024      	b.n	8002672 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10e      	bne.n	800264e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	b29b      	uxth	r3, r3
 8002636:	11db      	asrs	r3, r3, #7
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0306 	and.w	r3, r3, #6
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f063 030f 	orn	r3, r3, #15
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
}
 800264c:	e011      	b.n	8002672 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	b29b      	uxth	r3, r3
 800265c:	11db      	asrs	r3, r3, #7
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0306 	and.w	r3, r3, #6
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f063 030e 	orn	r3, r3, #14
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	611a      	str	r2, [r3, #16]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	b2da      	uxtb	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <I2C_Master_ADD10+0x26>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d108      	bne.n	80026b6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <I2C_Master_ADD10+0x48>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c4:	605a      	str	r2, [r3, #4]
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b091      	sub	sp, #68	@ 0x44
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b22      	cmp	r3, #34	@ 0x22
 80026fa:	f040 8169 	bne.w	80029d0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <I2C_Master_ADDR+0x54>
 8002706:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800270a:	2b40      	cmp	r3, #64	@ 0x40
 800270c:	d10b      	bne.n	8002726 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	633b      	str	r3, [r7, #48]	@ 0x30
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	e160      	b.n	80029e8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11d      	bne.n	800276a <I2C_Master_ADDR+0x98>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002736:	d118      	bne.n	800276a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800275c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	651a      	str	r2, [r3, #80]	@ 0x50
 8002768:	e13e      	b.n	80029e8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e115      	b.n	80029c8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 808a 	bne.w	80028bc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80027a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027ae:	d137      	bne.n	8002820 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027be:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027ce:	d113      	bne.n	80027f8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027de:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	e0e7      	b.n	80029c8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e0d3      	b.n	80029c8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002822:	2b08      	cmp	r3, #8
 8002824:	d02e      	beq.n	8002884 <I2C_Master_ADDR+0x1b2>
 8002826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002828:	2b20      	cmp	r3, #32
 800282a:	d02b      	beq.n	8002884 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800282c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282e:	2b12      	cmp	r3, #18
 8002830:	d102      	bne.n	8002838 <I2C_Master_ADDR+0x166>
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	2b01      	cmp	r3, #1
 8002836:	d125      	bne.n	8002884 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00e      	beq.n	800285c <I2C_Master_ADDR+0x18a>
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	2b02      	cmp	r3, #2
 8002842:	d00b      	beq.n	800285c <I2C_Master_ADDR+0x18a>
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	2b10      	cmp	r3, #16
 8002848:	d008      	beq.n	800285c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e007      	b.n	800286c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800286a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	e0a1      	b.n	80029c8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002892:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e085      	b.n	80029c8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d14d      	bne.n	8002962 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d016      	beq.n	80028fa <I2C_Master_ADDR+0x228>
 80028cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d013      	beq.n	80028fa <I2C_Master_ADDR+0x228>
 80028d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d010      	beq.n	80028fa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e007      	b.n	800290a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002908:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002918:	d117      	bne.n	800294a <I2C_Master_ADDR+0x278>
 800291a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002920:	d00b      	beq.n	800293a <I2C_Master_ADDR+0x268>
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	2b01      	cmp	r3, #1
 8002926:	d008      	beq.n	800293a <I2C_Master_ADDR+0x268>
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	2b08      	cmp	r3, #8
 800292c:	d005      	beq.n	800293a <I2C_Master_ADDR+0x268>
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	2b10      	cmp	r3, #16
 8002932:	d002      	beq.n	800293a <I2C_Master_ADDR+0x268>
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	2b20      	cmp	r3, #32
 8002938:	d107      	bne.n	800294a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002948:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	e032      	b.n	80029c8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002970:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002980:	d117      	bne.n	80029b2 <I2C_Master_ADDR+0x2e0>
 8002982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002988:	d00b      	beq.n	80029a2 <I2C_Master_ADDR+0x2d0>
 800298a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298c:	2b01      	cmp	r3, #1
 800298e:	d008      	beq.n	80029a2 <I2C_Master_ADDR+0x2d0>
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	2b08      	cmp	r3, #8
 8002994:	d005      	beq.n	80029a2 <I2C_Master_ADDR+0x2d0>
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002998:	2b10      	cmp	r3, #16
 800299a:	d002      	beq.n	80029a2 <I2C_Master_ADDR+0x2d0>
 800299c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d107      	bne.n	80029b2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80029ce:	e00b      	b.n	80029e8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
}
 80029e6:	e7ff      	b.n	80029e8 <I2C_Master_ADDR+0x316>
 80029e8:	bf00      	nop
 80029ea:	3744      	adds	r7, #68	@ 0x44
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02b      	beq.n	8002a66 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d114      	bne.n	8002a66 <I2C_SlaveTransmit_TXE+0x72>
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b29      	cmp	r3, #41	@ 0x29
 8002a40:	d111      	bne.n	8002a66 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2221      	movs	r2, #33	@ 0x21
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2228      	movs	r2, #40	@ 0x28
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fd ffe1 	bl	8000a28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d011      	beq.n	8002aa4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02c      	beq.n	8002b24 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d114      	bne.n	8002b24 <I2C_SlaveReceive_RXNE+0x74>
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002afe:	d111      	bne.n	8002b24 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b0e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2222      	movs	r2, #34	@ 0x22
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2228      	movs	r2, #40	@ 0x28
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fd ffb0 	bl	8000a84 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d012      	beq.n	8002b64 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b8a:	2b28      	cmp	r3, #40	@ 0x28
 8002b8c:	d125      	bne.n	8002bda <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	81bb      	strh	r3, [r7, #12]
 8002bbc:	e002      	b.n	8002bc4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002bcc:	89ba      	ldrh	r2, [r7, #12]
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff f926 	bl	8001e24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002bd8:	e00e      	b.n	8002bf8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c5c:	d172      	bne.n	8002d44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b22      	cmp	r3, #34	@ 0x22
 8002c62:	d002      	beq.n	8002c6a <I2C_Slave_STOPF+0x6a>
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c68:	d135      	bne.n	8002cd6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe faa9 	bl	80011fa <HAL_DMA_GetState>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d049      	beq.n	8002d42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	4a69      	ldr	r2, [pc, #420]	@ (8002e58 <I2C_Slave_STOPF+0x258>)
 8002cb4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fa7b 	bl	80011b6 <HAL_DMA_Abort_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d03d      	beq.n	8002d42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cd4:	e035      	b.n	8002d42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f043 0204 	orr.w	r2, r3, #4
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fa73 	bl	80011fa <HAL_DMA_GetState>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d014      	beq.n	8002d44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e58 <I2C_Slave_STOPF+0x258>)
 8002d20:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fa45 	bl	80011b6 <HAL_DMA_Abort_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
 8002d40:	e000      	b.n	8002d44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03e      	beq.n	8002dcc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d112      	bne.n	8002d82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8c:	2b40      	cmp	r3, #64	@ 0x40
 8002d8e:	d112      	bne.n	8002db6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8b7 	bl	8002f48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002dda:	e039      	b.n	8002e50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8002de0:	d109      	bne.n	8002df6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2228      	movs	r2, #40	@ 0x28
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd fe47 	bl	8000a84 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b28      	cmp	r3, #40	@ 0x28
 8002e00:	d111      	bne.n	8002e26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <I2C_Slave_STOPF+0x25c>)
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff f80e 	bl	8001e40 <HAL_I2C_ListenCpltCallback>
}
 8002e24:	e014      	b.n	8002e50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	2b22      	cmp	r3, #34	@ 0x22
 8002e2c:	d002      	beq.n	8002e34 <I2C_Slave_STOPF+0x234>
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b22      	cmp	r3, #34	@ 0x22
 8002e32:	d10d      	bne.n	8002e50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd fe1a 	bl	8000a84 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	080031ad 	.word	0x080031ad
 8002e5c:	ffff0000 	.word	0xffff0000

08002e60 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d002      	beq.n	8002e82 <I2C_Slave_AF+0x22>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d129      	bne.n	8002ed6 <I2C_Slave_AF+0x76>
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b28      	cmp	r3, #40	@ 0x28
 8002e86:	d126      	bne.n	8002ed6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f44 <I2C_Slave_AF+0xe4>)
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e9c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ea6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe ffb6 	bl	8001e40 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002ed4:	e031      	b.n	8002f3a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b21      	cmp	r3, #33	@ 0x21
 8002eda:	d129      	bne.n	8002f30 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a19      	ldr	r2, [pc, #100]	@ (8002f44 <I2C_Slave_AF+0xe4>)
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2221      	movs	r2, #33	@ 0x21
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f06:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f10:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f20:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fc82 	bl	800182c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fd fd7d 	bl	8000a28 <HAL_I2C_SlaveTxCpltCallback>
}
 8002f2e:	e004      	b.n	8002f3a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	ffff0000 	.word	0xffff0000

08002f48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d002      	beq.n	8002f6c <I2C_ITError+0x24>
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d10a      	bne.n	8002f82 <I2C_ITError+0x3a>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b22      	cmp	r3, #34	@ 0x22
 8002f70:	d107      	bne.n	8002f82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f88:	2b28      	cmp	r3, #40	@ 0x28
 8002f8a:	d107      	bne.n	8002f9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2228      	movs	r2, #40	@ 0x28
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f9a:	e015      	b.n	8002fc8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002faa:	d00a      	beq.n	8002fc2 <I2C_ITError+0x7a>
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b60      	cmp	r3, #96	@ 0x60
 8002fb0:	d007      	beq.n	8002fc2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fd6:	d162      	bne.n	800309e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fe6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d020      	beq.n	8003038 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80031a4 <I2C_ITError+0x25c>)
 8002ffc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f8d7 	bl	80011b6 <HAL_DMA_Abort_IT>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8089 	beq.w	8003122 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003032:	4610      	mov	r0, r2
 8003034:	4798      	blx	r3
 8003036:	e074      	b.n	8003122 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	4a59      	ldr	r2, [pc, #356]	@ (80031a4 <I2C_ITError+0x25c>)
 800303e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe f8b6 	bl	80011b6 <HAL_DMA_Abort_IT>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d068      	beq.n	8003122 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305a:	2b40      	cmp	r3, #64	@ 0x40
 800305c:	d10b      	bne.n	8003076 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
 800309c:	e041      	b.n	8003122 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b60      	cmp	r3, #96	@ 0x60
 80030a8:	d125      	bne.n	80030f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c2:	2b40      	cmp	r3, #64	@ 0x40
 80030c4:	d10b      	bne.n	80030de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fece 	bl	8001e90 <HAL_I2C_AbortCpltCallback>
 80030f4:	e015      	b.n	8003122 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d10b      	bne.n	800311c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fe fead 	bl	8001e7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10e      	bne.n	8003150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800315e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003166:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d113      	bne.n	800319c <I2C_ITError+0x254>
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b28      	cmp	r3, #40	@ 0x28
 8003178:	d110      	bne.n	800319c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0a      	ldr	r2, [pc, #40]	@ (80031a8 <I2C_ITError+0x260>)
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fe52 	bl	8001e40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	080031ad 	.word	0x080031ad
 80031a8:	ffff0000 	.word	0xffff0000

080031ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031c6:	4b4b      	ldr	r3, [pc, #300]	@ (80032f4 <I2C_DMAAbort+0x148>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	4a4a      	ldr	r2, [pc, #296]	@ (80032f8 <I2C_DMAAbort+0x14c>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a1a      	lsrs	r2, r3, #8
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80031f2:	e00a      	b.n	800320a <I2C_DMAAbort+0x5e>
    }
    count--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003208:	d0ea      	beq.n	80031e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003216:	2200      	movs	r2, #0
 8003218:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	2200      	movs	r2, #0
 8003228:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003238:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	2200      	movs	r2, #0
 800324e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b60      	cmp	r3, #96	@ 0x60
 800327a:	d10e      	bne.n	800329a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7fe fdfc 	bl	8001e90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003298:	e027      	b.n	80032ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032a0:	2b28      	cmp	r3, #40	@ 0x28
 80032a2:	d117      	bne.n	80032d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2228      	movs	r2, #40	@ 0x28
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032d2:	e007      	b.n	80032e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80032e4:	6978      	ldr	r0, [r7, #20]
 80032e6:	f7fe fdc9 	bl	8001e7c <HAL_I2C_ErrorCallback>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008
 80032f8:	14f8b589 	.word	0x14f8b589

080032fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	4a13      	ldr	r2, [pc, #76]	@ (800335c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	0a1a      	lsrs	r2, r3, #8
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3b01      	subs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e008      	b.n	800334c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003348:	d0e9      	beq.n	800331e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	20000008 	.word	0x20000008
 800335c:	14f8b589 	.word	0x14f8b589

08003360 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003370:	d103      	bne.n	800337a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003378:	e007      	b.n	800338a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003382:	d102      	bne.n	800338a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2208      	movs	r2, #8
 8003388:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0cc      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b68      	ldr	r3, [pc, #416]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d90c      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b65      	ldr	r3, [pc, #404]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a52      	ldr	r2, [pc, #328]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800340e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d044      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d119      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d003      	beq.n	8003456 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b3f      	ldr	r3, [pc, #252]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	4b3b      	ldr	r3, [pc, #236]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e067      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4934      	ldr	r1, [pc, #208]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7fd fd08 	bl	8000e9c <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fd fd04 	bl	8000e9c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e04f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d20c      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b22      	ldr	r3, [pc, #136]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f855 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	@ (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fc68 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
 8003558:	08004fdc 	.word	0x08004fdc
 800355c:	20000008 	.word	0x20000008
 8003560:	2000000c 	.word	0x2000000c

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000008 	.word	0x20000008

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	08004fec 	.word	0x08004fec

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffdc 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	08004fec 	.word	0x08004fec

080035cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b0ae      	sub	sp, #184	@ 0xb8
 80035d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f2:	4bcb      	ldr	r3, [pc, #812]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	f200 8206 	bhi.w	8003a0c <HAL_RCC_GetSysClockFreq+0x440>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003a0d 	.word	0x08003a0d
 8003610:	08003a0d 	.word	0x08003a0d
 8003614:	08003a0d 	.word	0x08003a0d
 8003618:	08003645 	.word	0x08003645
 800361c:	08003a0d 	.word	0x08003a0d
 8003620:	08003a0d 	.word	0x08003a0d
 8003624:	08003a0d 	.word	0x08003a0d
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003a0d 	.word	0x08003a0d
 8003630:	08003a0d 	.word	0x08003a0d
 8003634:	08003a0d 	.word	0x08003a0d
 8003638:	0800383d 	.word	0x0800383d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4bb9      	ldr	r3, [pc, #740]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x358>)
 800363e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003642:	e1e7      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003644:	4bb8      	ldr	r3, [pc, #736]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800364a:	e1e3      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800364c:	4bb4      	ldr	r3, [pc, #720]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003654:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003658:	4bb1      	ldr	r3, [pc, #708]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d071      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003664:	4bae      	ldr	r3, [pc, #696]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003670:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800368a:	4622      	mov	r2, r4
 800368c:	462b      	mov	r3, r5
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	0159      	lsls	r1, r3, #5
 8003698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369c:	0150      	lsls	r0, r2, #5
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4621      	mov	r1, r4
 80036a4:	1a51      	subs	r1, r2, r1
 80036a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb63 0301 	sbc.w	r3, r3, r1
 80036ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80036bc:	4649      	mov	r1, r9
 80036be:	018b      	lsls	r3, r1, #6
 80036c0:	4641      	mov	r1, r8
 80036c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c6:	4641      	mov	r1, r8
 80036c8:	018a      	lsls	r2, r1, #6
 80036ca:	4641      	mov	r1, r8
 80036cc:	1a51      	subs	r1, r2, r1
 80036ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036d0:	4649      	mov	r1, r9
 80036d2:	eb63 0301 	sbc.w	r3, r3, r1
 80036d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80036e4:	4649      	mov	r1, r9
 80036e6:	00cb      	lsls	r3, r1, #3
 80036e8:	4641      	mov	r1, r8
 80036ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ee:	4641      	mov	r1, r8
 80036f0:	00ca      	lsls	r2, r1, #3
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	4622      	mov	r2, r4
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fe:	462b      	mov	r3, r5
 8003700:	460a      	mov	r2, r1
 8003702:	eb42 0303 	adc.w	r3, r2, r3
 8003706:	637b      	str	r3, [r7, #52]	@ 0x34
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003714:	4629      	mov	r1, r5
 8003716:	024b      	lsls	r3, r1, #9
 8003718:	4621      	mov	r1, r4
 800371a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800371e:	4621      	mov	r1, r4
 8003720:	024a      	lsls	r2, r1, #9
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003734:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003738:	f7fc fd6c 	bl	8000214 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003746:	e067      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003748:	4b75      	ldr	r3, [pc, #468]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003754:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003758:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800375c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003760:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003762:	2300      	movs	r3, #0
 8003764:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003766:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800376a:	4622      	mov	r2, r4
 800376c:	462b      	mov	r3, r5
 800376e:	f04f 0000 	mov.w	r0, #0
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	0159      	lsls	r1, r3, #5
 8003778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377c:	0150      	lsls	r0, r2, #5
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4621      	mov	r1, r4
 8003784:	1a51      	subs	r1, r2, r1
 8003786:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003788:	4629      	mov	r1, r5
 800378a:	eb63 0301 	sbc.w	r3, r3, r1
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800379c:	4649      	mov	r1, r9
 800379e:	018b      	lsls	r3, r1, #6
 80037a0:	4641      	mov	r1, r8
 80037a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037a6:	4641      	mov	r1, r8
 80037a8:	018a      	lsls	r2, r1, #6
 80037aa:	4641      	mov	r1, r8
 80037ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80037b0:	4649      	mov	r1, r9
 80037b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ca:	4692      	mov	sl, r2
 80037cc:	469b      	mov	fp, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	eb1a 0303 	adds.w	r3, sl, r3
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	462b      	mov	r3, r5
 80037d8:	eb4b 0303 	adc.w	r3, fp, r3
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80037ea:	4629      	mov	r1, r5
 80037ec:	028b      	lsls	r3, r1, #10
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f4:	4621      	mov	r1, r4
 80037f6:	028a      	lsls	r2, r1, #10
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003800:	2200      	movs	r2, #0
 8003802:	673b      	str	r3, [r7, #112]	@ 0x70
 8003804:	677a      	str	r2, [r7, #116]	@ 0x74
 8003806:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800380a:	f7fc fd03 	bl	8000214 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4613      	mov	r3, r2
 8003814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003818:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800382a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800382e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800383a:	e0eb      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b38      	ldr	r3, [pc, #224]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003848:	4b35      	ldr	r3, [pc, #212]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d06b      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003854:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x354>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	2200      	movs	r2, #0
 800385c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800385e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003860:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	663b      	str	r3, [r7, #96]	@ 0x60
 8003868:	2300      	movs	r3, #0
 800386a:	667b      	str	r3, [r7, #100]	@ 0x64
 800386c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003870:	4622      	mov	r2, r4
 8003872:	462b      	mov	r3, r5
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	0159      	lsls	r1, r3, #5
 800387e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003882:	0150      	lsls	r0, r2, #5
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4621      	mov	r1, r4
 800388a:	1a51      	subs	r1, r2, r1
 800388c:	61b9      	str	r1, [r7, #24]
 800388e:	4629      	mov	r1, r5
 8003890:	eb63 0301 	sbc.w	r3, r3, r1
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80038a2:	4659      	mov	r1, fp
 80038a4:	018b      	lsls	r3, r1, #6
 80038a6:	4651      	mov	r1, sl
 80038a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ac:	4651      	mov	r1, sl
 80038ae:	018a      	lsls	r2, r1, #6
 80038b0:	4651      	mov	r1, sl
 80038b2:	ebb2 0801 	subs.w	r8, r2, r1
 80038b6:	4659      	mov	r1, fp
 80038b8:	eb63 0901 	sbc.w	r9, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d0:	4690      	mov	r8, r2
 80038d2:	4699      	mov	r9, r3
 80038d4:	4623      	mov	r3, r4
 80038d6:	eb18 0303 	adds.w	r3, r8, r3
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	462b      	mov	r3, r5
 80038de:	eb49 0303 	adc.w	r3, r9, r3
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80038f0:	4629      	mov	r1, r5
 80038f2:	024b      	lsls	r3, r1, #9
 80038f4:	4621      	mov	r1, r4
 80038f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038fa:	4621      	mov	r1, r4
 80038fc:	024a      	lsls	r2, r1, #9
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003906:	2200      	movs	r2, #0
 8003908:	65bb      	str	r3, [r7, #88]	@ 0x58
 800390a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800390c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003910:	f7fc fc80 	bl	8000214 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800391e:	e065      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x420>
 8003920:	40023800 	.word	0x40023800
 8003924:	00f42400 	.word	0x00f42400
 8003928:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x458>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	2200      	movs	r2, #0
 8003934:	4618      	mov	r0, r3
 8003936:	4611      	mov	r1, r2
 8003938:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800393c:	653b      	str	r3, [r7, #80]	@ 0x50
 800393e:	2300      	movs	r3, #0
 8003940:	657b      	str	r3, [r7, #84]	@ 0x54
 8003942:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003946:	4642      	mov	r2, r8
 8003948:	464b      	mov	r3, r9
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	0159      	lsls	r1, r3, #5
 8003954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003958:	0150      	lsls	r0, r2, #5
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4641      	mov	r1, r8
 8003960:	1a51      	subs	r1, r2, r1
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	4649      	mov	r1, r9
 8003966:	eb63 0301 	sbc.w	r3, r3, r1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003978:	4659      	mov	r1, fp
 800397a:	018b      	lsls	r3, r1, #6
 800397c:	4651      	mov	r1, sl
 800397e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003982:	4651      	mov	r1, sl
 8003984:	018a      	lsls	r2, r1, #6
 8003986:	4651      	mov	r1, sl
 8003988:	1a54      	subs	r4, r2, r1
 800398a:	4659      	mov	r1, fp
 800398c:	eb63 0501 	sbc.w	r5, r3, r1
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	00eb      	lsls	r3, r5, #3
 800399a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399e:	00e2      	lsls	r2, r4, #3
 80039a0:	4614      	mov	r4, r2
 80039a2:	461d      	mov	r5, r3
 80039a4:	4643      	mov	r3, r8
 80039a6:	18e3      	adds	r3, r4, r3
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	464b      	mov	r3, r9
 80039ac:	eb45 0303 	adc.w	r3, r5, r3
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039be:	4629      	mov	r1, r5
 80039c0:	028b      	lsls	r3, r1, #10
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039c8:	4621      	mov	r1, r4
 80039ca:	028a      	lsls	r2, r1, #10
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039d4:	2200      	movs	r2, #0
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039de:	f7fc fc19 	bl	8000214 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4613      	mov	r3, r2
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x458>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0f1b      	lsrs	r3, r3, #28
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80039fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a0a:	e003      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	37b8      	adds	r7, #184	@ 0xb8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	00f42400 	.word	0x00f42400

08003a2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e28d      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8083 	beq.w	8003b52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a4c:	4b94      	ldr	r3, [pc, #592]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d019      	beq.n	8003a8c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a58:	4b91      	ldr	r3, [pc, #580]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a64:	4b8e      	ldr	r3, [pc, #568]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a70:	d00c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b8b      	ldr	r3, [pc, #556]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d112      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4b88      	ldr	r3, [pc, #544]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	4b84      	ldr	r3, [pc, #528]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05b      	beq.n	8003b50 <HAL_RCC_OscConfig+0x124>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d157      	bne.n	8003b50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e25a      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x90>
 8003aae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xcc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xb4>
 8003ac6:	4b76      	ldr	r3, [pc, #472]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a75      	ldr	r2, [pc, #468]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b73      	ldr	r3, [pc, #460]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a72      	ldr	r2, [pc, #456]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xcc>
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd f9cc 	bl	8000e9c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd f9c8 	bl	8000e9c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e21f      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xdc>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd f9b8 	bl	8000e9c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd f9b4 	bl	8000e9c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e20b      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b57      	ldr	r3, [pc, #348]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x104>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06f      	beq.n	8003c3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b5e:	4b50      	ldr	r3, [pc, #320]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b82:	4b47      	ldr	r3, [pc, #284]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d11c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x186>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e1d3      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4937      	ldr	r1, [pc, #220]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc6:	e03a      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd0:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCC_OscConfig+0x278>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd f961 	bl	8000e9c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bde:	f7fd f95d 	bl	8000e9c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1b4      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b28      	ldr	r3, [pc, #160]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4925      	ldr	r1, [pc, #148]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]
 8003c10:	e015      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c12:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <HAL_RCC_OscConfig+0x278>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd f940 	bl	8000e9c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c20:	f7fd f93c 	bl	8000e9c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e193      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d036      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d016      	beq.n	8003c80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_RCC_OscConfig+0x27c>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd f920 	bl	8000e9c <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fd f91c 	bl	8000e9c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e173      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_RCC_OscConfig+0x274>)
 8003c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x234>
 8003c7e:	e01b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c80:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_OscConfig+0x27c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fd f909 	bl	8000e9c <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8c:	e00e      	b.n	8003cac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd f905 	bl	8000e9c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d907      	bls.n	8003cac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e15c      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	42470000 	.word	0x42470000
 8003ca8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cac:	4b8a      	ldr	r3, [pc, #552]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ea      	bne.n	8003c8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8097 	beq.w	8003df4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cca:	4b83      	ldr	r3, [pc, #524]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	4a7e      	ldr	r2, [pc, #504]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	4b79      	ldr	r3, [pc, #484]	@ (8003edc <HAL_RCC_OscConfig+0x4b0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d02:	4b76      	ldr	r3, [pc, #472]	@ (8003edc <HAL_RCC_OscConfig+0x4b0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a75      	ldr	r2, [pc, #468]	@ (8003edc <HAL_RCC_OscConfig+0x4b0>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fd f8c5 	bl	8000e9c <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fd f8c1 	bl	8000e9c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e118      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	4b6c      	ldr	r3, [pc, #432]	@ (8003edc <HAL_RCC_OscConfig+0x4b0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x31e>
 8003d3c:	4b66      	ldr	r3, [pc, #408]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d40:	4a65      	ldr	r2, [pc, #404]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d48:	e01c      	b.n	8003d84 <HAL_RCC_OscConfig+0x358>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x340>
 8003d52:	4b61      	ldr	r3, [pc, #388]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	4a60      	ldr	r2, [pc, #384]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	4a5d      	ldr	r2, [pc, #372]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0x358>
 8003d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a59      	ldr	r2, [pc, #356]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d78:	4b57      	ldr	r3, [pc, #348]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7c:	4a56      	ldr	r2, [pc, #344]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d015      	beq.n	8003db8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd f886 	bl	8000e9c <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fd f882 	bl	8000e9c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0d7      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0ee      	beq.n	8003d94 <HAL_RCC_OscConfig+0x368>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd f870 	bl	8000e9c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd f86c 	bl	8000e9c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0c1      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd6:	4b40      	ldr	r3, [pc, #256]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ee      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	4a3a      	ldr	r2, [pc, #232]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80ad 	beq.w	8003f58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dfe:	4b36      	ldr	r3, [pc, #216]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d060      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d145      	bne.n	8003e9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd f840 	bl	8000e9c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd f83c 	bl	8000e9c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e093      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	4b29      	ldr	r3, [pc, #164]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	019b      	lsls	r3, r3, #6
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	3b01      	subs	r3, #1
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	491b      	ldr	r1, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b4>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fd f811 	bl	8000e9c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd f80d 	bl	8000e9c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e064      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x452>
 8003e9c:	e05c      	b.n	8003f58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <HAL_RCC_OscConfig+0x4b4>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fc fffa 	bl	8000e9c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fc fff6 	bl	8000e9c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e04d      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_OscConfig+0x4ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x480>
 8003eca:	e045      	b.n	8003f58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e040      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <HAL_RCC_OscConfig+0x538>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d030      	beq.n	8003f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d129      	bne.n	8003f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d122      	bne.n	8003f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d119      	bne.n	8003f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d10f      	bne.n	8003f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800

08003f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e042      	b.n	8004000 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fc fe30 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	@ 0x24
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fd69 	bl	8004a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	@ 0x28
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	d175      	bne.n	8004114 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_UART_Transmit+0x2c>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e06e      	b.n	8004116 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004046:	f7fc ff29 	bl	8000e9c <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Transmit+0x6c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800407c:	e02e      	b.n	80040dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fb05 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e03a      	b.n	8004116 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3302      	adds	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e007      	b.n	80040ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1cb      	bne.n	800407e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2140      	movs	r1, #64	@ 0x40
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fad1 	bl	8004698 <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e006      	b.n	8004116 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0ba      	sub	sp, #232	@ 0xe8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800415e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_UART_IRQHandler+0x66>
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fbc2 	bl	8004908 <UART_Receive_IT>
      return;
 8004184:	e25b      	b.n	800463e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80de 	beq.w	800434c <HAL_UART_IRQHandler+0x22c>
 8004190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80d1 	beq.w	800434c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_UART_IRQHandler+0xae>
 80041b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	f043 0201 	orr.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <HAL_UART_IRQHandler+0xd2>
 80041da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f043 0202 	orr.w	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_UART_IRQHandler+0xf6>
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <HAL_UART_IRQHandler+0x126>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800422e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f043 0208 	orr.w	r2, r3, #8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 81f2 	beq.w	8004634 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_UART_IRQHandler+0x14e>
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb4d 	bl	8004908 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_UART_IRQHandler+0x17a>
 8004292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04f      	beq.n	800433a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa55 	bl	800474a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d141      	bne.n	8004332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1d9      	bne.n	80042ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004306:	4a7e      	ldr	r2, [pc, #504]	@ (8004500 <HAL_UART_IRQHandler+0x3e0>)
 8004308:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430e:	4618      	mov	r0, r3
 8004310:	f7fc ff51 	bl	80011b6 <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004324:	4610      	mov	r0, r2
 8004326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	e00e      	b.n	8004348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f99e 	bl	800466c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00a      	b.n	8004348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f99a 	bl	800466c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e006      	b.n	8004348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f996 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004346:	e175      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	bf00      	nop
    return;
 800434a:	e173      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	2b01      	cmp	r3, #1
 8004352:	f040 814f 	bne.w	80045f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8148 	beq.w	80045f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8141 	beq.w	80045f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	f040 80b6 	bne.w	8004504 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8145 	beq.w	8004638 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f080 813e 	bcs.w	8004638 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ce:	f000 8088 	beq.w	80044e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800440a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d9      	bne.n	80043d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800442e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800444a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e1      	bne.n	800441e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800446a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800446c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800447e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800448c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e3      	bne.n	800445a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e3      	bne.n	80044a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fdfa 	bl	80010d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8c1 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044fe:	e09b      	b.n	8004638 <HAL_UART_IRQHandler+0x518>
 8004500:	08004811 	.word	0x08004811
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 808e 	beq.w	800463c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8089 	beq.w	800463c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800453a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004540:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800454e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800455c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e3      	bne.n	800452a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	623b      	str	r3, [r7, #32]
   return(result);
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004586:	633a      	str	r2, [r7, #48]	@ 0x30
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800458c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e3      	bne.n	8004562 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045cc:	61fa      	str	r2, [r7, #28]
 80045ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	69b9      	ldr	r1, [r7, #24]
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	617b      	str	r3, [r7, #20]
   return(result);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e3      	bne.n	80045a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f847 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045f2:	e023      	b.n	800463c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_UART_IRQHandler+0x4f4>
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f913 	bl	8004838 <UART_Transmit_IT>
    return;
 8004612:	e014      	b.n	800463e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <HAL_UART_IRQHandler+0x51e>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f953 	bl	80048d8 <UART_EndTransmit_IT>
    return;
 8004632:	e004      	b.n	800463e <HAL_UART_IRQHandler+0x51e>
    return;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_UART_IRQHandler+0x51e>
      return;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_UART_IRQHandler+0x51e>
      return;
 800463c:	bf00      	nop
  }
}
 800463e:	37e8      	adds	r7, #232	@ 0xe8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a8:	e03b      	b.n	8004722 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d037      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fc fbf3 	bl	8000e9c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	6a3a      	ldr	r2, [r7, #32]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e03a      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d023      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b80      	cmp	r3, #128	@ 0x80
 80046de:	d020      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b40      	cmp	r3, #64	@ 0x40
 80046e4:	d01d      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d116      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f81d 	bl	800474a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2208      	movs	r2, #8
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e00f      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	429a      	cmp	r2, r3
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d0b4      	beq.n	80046aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800474a:	b480      	push	{r7}
 800474c:	b095      	sub	sp, #84	@ 0x54
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004772:	643a      	str	r2, [r7, #64]	@ 0x40
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	61fb      	str	r3, [r7, #28]
   return(result);
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d119      	bne.n	80047f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f023 0310 	bic.w	r3, r3, #16
 80047d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e2:	61ba      	str	r2, [r7, #24]
 80047e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	613b      	str	r3, [r7, #16]
   return(result);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004804:	bf00      	nop
 8004806:	3754      	adds	r7, #84	@ 0x54
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff ff1e 	bl	800466c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b21      	cmp	r3, #33	@ 0x21
 800484a:	d13e      	bne.n	80048ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d114      	bne.n	8004880 <UART_Transmit_IT+0x48>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d110      	bne.n	8004880 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004872:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	621a      	str	r2, [r3, #32]
 800487e:	e008      	b.n	8004892 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	1c59      	adds	r1, r3, #1
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6211      	str	r1, [r2, #32]
 800488a:	781a      	ldrb	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fea3 	bl	8004644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	@ 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b22      	cmp	r3, #34	@ 0x22
 800491a:	f040 80ae 	bne.w	8004a7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004926:	d117      	bne.n	8004958 <UART_Receive_IT+0x50>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d113      	bne.n	8004958 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	b29a      	uxth	r2, r3
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	629a      	str	r2, [r3, #40]	@ 0x28
 8004956:	e026      	b.n	80049a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496a:	d007      	beq.n	800497c <UART_Receive_IT+0x74>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <UART_Receive_IT+0x82>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e008      	b.n	800499c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004996:	b2da      	uxtb	r2, r3
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4619      	mov	r1, r3
 80049b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d15d      	bne.n	8004a76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0220 	bic.w	r2, r2, #32
 80049c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d135      	bne.n	8004a6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	330c      	adds	r3, #12
 8004a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	613b      	str	r3, [r7, #16]
   return(result);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f023 0310 	bic.w	r3, r3, #16
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a26:	623a      	str	r2, [r7, #32]
 8004a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e5      	bne.n	8004a06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d10a      	bne.n	8004a5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fe0b 	bl	8004680 <HAL_UARTEx_RxEventCallback>
 8004a6a:	e002      	b.n	8004a72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fdf3 	bl	8004658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e002      	b.n	8004a7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3730      	adds	r7, #48	@ 0x30
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b0c0      	sub	sp, #256	@ 0x100
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	ea40 0301 	orr.w	r3, r0, r1
 8004aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004adc:	f021 010c 	bic.w	r1, r1, #12
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004aea:	430b      	orrs	r3, r1
 8004aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	6999      	ldr	r1, [r3, #24]
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	ea40 0301 	orr.w	r3, r0, r1
 8004b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b8f      	ldr	r3, [pc, #572]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d005      	beq.n	8004b24 <UART_SetConfig+0xa0>
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d54 <UART_SetConfig+0x2d0>)
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d104      	bne.n	8004b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fe fd3e 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 8004b28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b2c:	e003      	b.n	8004b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2e:	f7fe fd25 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8004b32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b40:	f040 810c 	bne.w	8004d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b56:	4622      	mov	r2, r4
 8004b58:	462b      	mov	r3, r5
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b66:	4621      	mov	r1, r4
 8004b68:	eb12 0801 	adds.w	r8, r2, r1
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	eb43 0901 	adc.w	r9, r3, r1
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b86:	4690      	mov	r8, r2
 8004b88:	4699      	mov	r9, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	eb18 0303 	adds.w	r3, r8, r3
 8004b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b94:	462b      	mov	r3, r5
 8004b96:	eb49 0303 	adc.w	r3, r9, r3
 8004b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004baa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	18db      	adds	r3, r3, r3
 8004bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb8:	4613      	mov	r3, r2
 8004bba:	eb42 0303 	adc.w	r3, r2, r3
 8004bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bc8:	f7fb fb24 	bl	8000214 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b61      	ldr	r3, [pc, #388]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	011c      	lsls	r4, r3, #4
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004be4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb43 0b01 	adc.w	fp, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c1c:	4692      	mov	sl, r2
 8004c1e:	469b      	mov	fp, r3
 8004c20:	4643      	mov	r3, r8
 8004c22:	eb1a 0303 	adds.w	r3, sl, r3
 8004c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	18db      	adds	r3, r3, r3
 8004c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c4e:	4613      	mov	r3, r2
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c5e:	f7fb fad9 	bl	8000214 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2264      	movs	r2, #100	@ 0x64
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	1acb      	subs	r3, r1, r3
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c7e:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004c80:	fba3 2302 	umull	r2, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c8c:	441c      	add	r4, r3
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d1a:	f7fb fa7b 	bl	8000214 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	@ 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3332      	adds	r3, #50	@ 0x32
 8004d36:	4a08      	ldr	r2, [pc, #32]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d4c:	e106      	b.n	8004f5c <UART_SetConfig+0x4d8>
 8004d4e:	bf00      	nop
 8004d50:	40011000 	.word	0x40011000
 8004d54:	40011400 	.word	0x40011400
 8004d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d6e:	4642      	mov	r2, r8
 8004d70:	464b      	mov	r3, r9
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	6239      	str	r1, [r7, #32]
 8004d76:	415b      	adcs	r3, r3
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d7e:	4641      	mov	r1, r8
 8004d80:	1854      	adds	r4, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb43 0501 	adc.w	r5, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	00eb      	lsls	r3, r5, #3
 8004d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d96:	00e2      	lsls	r2, r4, #3
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	18e3      	adds	r3, r4, r3
 8004da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004da4:	464b      	mov	r3, r9
 8004da6:	eb45 0303 	adc.w	r3, r5, r3
 8004daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dca:	4629      	mov	r1, r5
 8004dcc:	008b      	lsls	r3, r1, #2
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	008a      	lsls	r2, r1, #2
 8004dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ddc:	f7fb fa1a 	bl	8000214 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4b60      	ldr	r3, [pc, #384]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004de6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	011c      	lsls	r4, r3, #4
 8004dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004df8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	1891      	adds	r1, r2, r2
 8004e06:	61b9      	str	r1, [r7, #24]
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e10:	4641      	mov	r1, r8
 8004e12:	1851      	adds	r1, r2, r1
 8004e14:	6139      	str	r1, [r7, #16]
 8004e16:	4649      	mov	r1, r9
 8004e18:	414b      	adcs	r3, r1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e28:	4659      	mov	r1, fp
 8004e2a:	00cb      	lsls	r3, r1, #3
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e32:	4651      	mov	r1, sl
 8004e34:	00ca      	lsls	r2, r1, #3
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e44:	464b      	mov	r3, r9
 8004e46:	460a      	mov	r2, r1
 8004e48:	eb42 0303 	adc.w	r3, r2, r3
 8004e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e68:	4649      	mov	r1, r9
 8004e6a:	008b      	lsls	r3, r1, #2
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e72:	4641      	mov	r1, r8
 8004e74:	008a      	lsls	r2, r1, #2
 8004e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e7a:	f7fb f9cb 	bl	8000214 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	4b38      	ldr	r3, [pc, #224]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004e86:	fba3 2301 	umull	r2, r3, r3, r1
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2264      	movs	r2, #100	@ 0x64
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	1acb      	subs	r3, r1, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	@ 0x32
 8004e98:	4a33      	ldr	r2, [pc, #204]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea4:	441c      	add	r4, r3
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eaa:	2200      	movs	r2, #0
 8004eac:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eae:	677a      	str	r2, [r7, #116]	@ 0x74
 8004eb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	1891      	adds	r1, r2, r2
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	1851      	adds	r1, r2, r1
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	4649      	mov	r1, r9
 8004ecc:	414b      	adcs	r3, r1
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004edc:	4659      	mov	r1, fp
 8004ede:	00cb      	lsls	r3, r1, #3
 8004ee0:	4651      	mov	r1, sl
 8004ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	00ca      	lsls	r2, r1, #3
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	189b      	adds	r3, r3, r2
 8004ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	460a      	mov	r2, r1
 8004efa:	eb42 0303 	adc.w	r3, r2, r3
 8004efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f18:	4649      	mov	r1, r9
 8004f1a:	008b      	lsls	r3, r1, #2
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f22:	4641      	mov	r1, r8
 8004f24:	008a      	lsls	r2, r1, #2
 8004f26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f2a:	f7fb f973 	bl	8000214 <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004f34:	fba3 1302 	umull	r1, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2164      	movs	r1, #100	@ 0x64
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	3332      	adds	r3, #50	@ 0x32
 8004f46:	4a08      	ldr	r2, [pc, #32]	@ (8004f68 <UART_SetConfig+0x4e4>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 020f 	and.w	r2, r3, #15
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4422      	add	r2, r4
 8004f5a:	609a      	str	r2, [r3, #8]
}
 8004f5c:	bf00      	nop
 8004f5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f62:	46bd      	mov	sp, r7
 8004f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f68:	51eb851f 	.word	0x51eb851f

08004f6c <memset>:
 8004f6c:	4402      	add	r2, r0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d100      	bne.n	8004f76 <memset+0xa>
 8004f74:	4770      	bx	lr
 8004f76:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7a:	e7f9      	b.n	8004f70 <memset+0x4>

08004f7c <__libc_init_array>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004fb4 <__libc_init_array+0x38>)
 8004f80:	4c0d      	ldr	r4, [pc, #52]	@ (8004fb8 <__libc_init_array+0x3c>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	2600      	movs	r6, #0
 8004f88:	42a6      	cmp	r6, r4
 8004f8a:	d109      	bne.n	8004fa0 <__libc_init_array+0x24>
 8004f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8004fbc <__libc_init_array+0x40>)
 8004f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8004fc0 <__libc_init_array+0x44>)
 8004f90:	f000 f818 	bl	8004fc4 <_init>
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	2600      	movs	r6, #0
 8004f9a:	42a6      	cmp	r6, r4
 8004f9c:	d105      	bne.n	8004faa <__libc_init_array+0x2e>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa4:	4798      	blx	r3
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7ee      	b.n	8004f88 <__libc_init_array+0xc>
 8004faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fae:	4798      	blx	r3
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7f2      	b.n	8004f9a <__libc_init_array+0x1e>
 8004fb4:	08004ffc 	.word	0x08004ffc
 8004fb8:	08004ffc 	.word	0x08004ffc
 8004fbc:	08004ffc 	.word	0x08004ffc
 8004fc0:	08005000 	.word	0x08005000

08004fc4 <_init>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	bf00      	nop
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr

08004fd0 <_fini>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr
